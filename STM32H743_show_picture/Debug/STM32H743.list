
STM32H743.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .sram_data1   00000000  c0000000  c0000000  0015c000  2**0
                  CONTENTS
  1 .sram_data2   00000000  c0200000  c0200000  0015c000  2**0
                  CONTENTS
  2 .sram_data3   0012c000  c0800000  c0800000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .text         0000f1e4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       00000460  0800f488  0800f488  0001f488  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM          00000008  0800f8e8  0800f8e8  0001f8e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .init_array   00000004  0800f8f0  0800f8f0  0001f8f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800f8f4  0800f8f4  0001f8f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000001d8  24000000  0800f8f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000004a8  240001d8  0800fad0  000201d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  24000680  0800fad0  00020680  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0015c000  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0015c02e  2**0
                  CONTENTS, READONLY
 14 .debug_info   00020209  00000000  00000000  0015c071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003b59  00000000  00000000  0017c27a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001838  00000000  00000000  0017fdd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000012d0  00000000  00000000  00181610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003ac1d  00000000  00000000  001828e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000212d3  00000000  00000000  001bd4fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0016ecc6  00000000  00000000  001de7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007a68  00000000  00000000  0034d498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  00354f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f46c 	.word	0x0800f46c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800f46c 	.word	0x0800f46c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a8 	b.w	8000a70 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9e08      	ldr	r6, [sp, #32]
 80007ae:	460d      	mov	r5, r1
 80007b0:	4604      	mov	r4, r0
 80007b2:	460f      	mov	r7, r1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d14a      	bne.n	800084e <__udivmoddi4+0xa6>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4694      	mov	ip, r2
 80007bc:	d965      	bls.n	800088a <__udivmoddi4+0xe2>
 80007be:	fab2 f382 	clz	r3, r2
 80007c2:	b143      	cbz	r3, 80007d6 <__udivmoddi4+0x2e>
 80007c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007c8:	f1c3 0220 	rsb	r2, r3, #32
 80007cc:	409f      	lsls	r7, r3
 80007ce:	fa20 f202 	lsr.w	r2, r0, r2
 80007d2:	4317      	orrs	r7, r2
 80007d4:	409c      	lsls	r4, r3
 80007d6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80007da:	fa1f f58c 	uxth.w	r5, ip
 80007de:	fbb7 f1fe 	udiv	r1, r7, lr
 80007e2:	0c22      	lsrs	r2, r4, #16
 80007e4:	fb0e 7711 	mls	r7, lr, r1, r7
 80007e8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80007ec:	fb01 f005 	mul.w	r0, r1, r5
 80007f0:	4290      	cmp	r0, r2
 80007f2:	d90a      	bls.n	800080a <__udivmoddi4+0x62>
 80007f4:	eb1c 0202 	adds.w	r2, ip, r2
 80007f8:	f101 37ff 	add.w	r7, r1, #4294967295
 80007fc:	f080 811c 	bcs.w	8000a38 <__udivmoddi4+0x290>
 8000800:	4290      	cmp	r0, r2
 8000802:	f240 8119 	bls.w	8000a38 <__udivmoddi4+0x290>
 8000806:	3902      	subs	r1, #2
 8000808:	4462      	add	r2, ip
 800080a:	1a12      	subs	r2, r2, r0
 800080c:	b2a4      	uxth	r4, r4
 800080e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000812:	fb0e 2210 	mls	r2, lr, r0, r2
 8000816:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800081a:	fb00 f505 	mul.w	r5, r0, r5
 800081e:	42a5      	cmp	r5, r4
 8000820:	d90a      	bls.n	8000838 <__udivmoddi4+0x90>
 8000822:	eb1c 0404 	adds.w	r4, ip, r4
 8000826:	f100 32ff 	add.w	r2, r0, #4294967295
 800082a:	f080 8107 	bcs.w	8000a3c <__udivmoddi4+0x294>
 800082e:	42a5      	cmp	r5, r4
 8000830:	f240 8104 	bls.w	8000a3c <__udivmoddi4+0x294>
 8000834:	4464      	add	r4, ip
 8000836:	3802      	subs	r0, #2
 8000838:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800083c:	1b64      	subs	r4, r4, r5
 800083e:	2100      	movs	r1, #0
 8000840:	b11e      	cbz	r6, 800084a <__udivmoddi4+0xa2>
 8000842:	40dc      	lsrs	r4, r3
 8000844:	2300      	movs	r3, #0
 8000846:	e9c6 4300 	strd	r4, r3, [r6]
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	428b      	cmp	r3, r1
 8000850:	d908      	bls.n	8000864 <__udivmoddi4+0xbc>
 8000852:	2e00      	cmp	r6, #0
 8000854:	f000 80ed 	beq.w	8000a32 <__udivmoddi4+0x28a>
 8000858:	2100      	movs	r1, #0
 800085a:	e9c6 0500 	strd	r0, r5, [r6]
 800085e:	4608      	mov	r0, r1
 8000860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000864:	fab3 f183 	clz	r1, r3
 8000868:	2900      	cmp	r1, #0
 800086a:	d149      	bne.n	8000900 <__udivmoddi4+0x158>
 800086c:	42ab      	cmp	r3, r5
 800086e:	d302      	bcc.n	8000876 <__udivmoddi4+0xce>
 8000870:	4282      	cmp	r2, r0
 8000872:	f200 80f8 	bhi.w	8000a66 <__udivmoddi4+0x2be>
 8000876:	1a84      	subs	r4, r0, r2
 8000878:	eb65 0203 	sbc.w	r2, r5, r3
 800087c:	2001      	movs	r0, #1
 800087e:	4617      	mov	r7, r2
 8000880:	2e00      	cmp	r6, #0
 8000882:	d0e2      	beq.n	800084a <__udivmoddi4+0xa2>
 8000884:	e9c6 4700 	strd	r4, r7, [r6]
 8000888:	e7df      	b.n	800084a <__udivmoddi4+0xa2>
 800088a:	b902      	cbnz	r2, 800088e <__udivmoddi4+0xe6>
 800088c:	deff      	udf	#255	; 0xff
 800088e:	fab2 f382 	clz	r3, r2
 8000892:	2b00      	cmp	r3, #0
 8000894:	f040 8090 	bne.w	80009b8 <__udivmoddi4+0x210>
 8000898:	1a8a      	subs	r2, r1, r2
 800089a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800089e:	fa1f fe8c 	uxth.w	lr, ip
 80008a2:	2101      	movs	r1, #1
 80008a4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008a8:	fb07 2015 	mls	r0, r7, r5, r2
 80008ac:	0c22      	lsrs	r2, r4, #16
 80008ae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008b2:	fb0e f005 	mul.w	r0, lr, r5
 80008b6:	4290      	cmp	r0, r2
 80008b8:	d908      	bls.n	80008cc <__udivmoddi4+0x124>
 80008ba:	eb1c 0202 	adds.w	r2, ip, r2
 80008be:	f105 38ff 	add.w	r8, r5, #4294967295
 80008c2:	d202      	bcs.n	80008ca <__udivmoddi4+0x122>
 80008c4:	4290      	cmp	r0, r2
 80008c6:	f200 80cb 	bhi.w	8000a60 <__udivmoddi4+0x2b8>
 80008ca:	4645      	mov	r5, r8
 80008cc:	1a12      	subs	r2, r2, r0
 80008ce:	b2a4      	uxth	r4, r4
 80008d0:	fbb2 f0f7 	udiv	r0, r2, r7
 80008d4:	fb07 2210 	mls	r2, r7, r0, r2
 80008d8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008dc:	fb0e fe00 	mul.w	lr, lr, r0
 80008e0:	45a6      	cmp	lr, r4
 80008e2:	d908      	bls.n	80008f6 <__udivmoddi4+0x14e>
 80008e4:	eb1c 0404 	adds.w	r4, ip, r4
 80008e8:	f100 32ff 	add.w	r2, r0, #4294967295
 80008ec:	d202      	bcs.n	80008f4 <__udivmoddi4+0x14c>
 80008ee:	45a6      	cmp	lr, r4
 80008f0:	f200 80bb 	bhi.w	8000a6a <__udivmoddi4+0x2c2>
 80008f4:	4610      	mov	r0, r2
 80008f6:	eba4 040e 	sub.w	r4, r4, lr
 80008fa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80008fe:	e79f      	b.n	8000840 <__udivmoddi4+0x98>
 8000900:	f1c1 0720 	rsb	r7, r1, #32
 8000904:	408b      	lsls	r3, r1
 8000906:	fa22 fc07 	lsr.w	ip, r2, r7
 800090a:	ea4c 0c03 	orr.w	ip, ip, r3
 800090e:	fa05 f401 	lsl.w	r4, r5, r1
 8000912:	fa20 f307 	lsr.w	r3, r0, r7
 8000916:	40fd      	lsrs	r5, r7
 8000918:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800091c:	4323      	orrs	r3, r4
 800091e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000922:	fa1f fe8c 	uxth.w	lr, ip
 8000926:	fb09 5518 	mls	r5, r9, r8, r5
 800092a:	0c1c      	lsrs	r4, r3, #16
 800092c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000930:	fb08 f50e 	mul.w	r5, r8, lr
 8000934:	42a5      	cmp	r5, r4
 8000936:	fa02 f201 	lsl.w	r2, r2, r1
 800093a:	fa00 f001 	lsl.w	r0, r0, r1
 800093e:	d90b      	bls.n	8000958 <__udivmoddi4+0x1b0>
 8000940:	eb1c 0404 	adds.w	r4, ip, r4
 8000944:	f108 3aff 	add.w	sl, r8, #4294967295
 8000948:	f080 8088 	bcs.w	8000a5c <__udivmoddi4+0x2b4>
 800094c:	42a5      	cmp	r5, r4
 800094e:	f240 8085 	bls.w	8000a5c <__udivmoddi4+0x2b4>
 8000952:	f1a8 0802 	sub.w	r8, r8, #2
 8000956:	4464      	add	r4, ip
 8000958:	1b64      	subs	r4, r4, r5
 800095a:	b29d      	uxth	r5, r3
 800095c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000960:	fb09 4413 	mls	r4, r9, r3, r4
 8000964:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000968:	fb03 fe0e 	mul.w	lr, r3, lr
 800096c:	45a6      	cmp	lr, r4
 800096e:	d908      	bls.n	8000982 <__udivmoddi4+0x1da>
 8000970:	eb1c 0404 	adds.w	r4, ip, r4
 8000974:	f103 35ff 	add.w	r5, r3, #4294967295
 8000978:	d26c      	bcs.n	8000a54 <__udivmoddi4+0x2ac>
 800097a:	45a6      	cmp	lr, r4
 800097c:	d96a      	bls.n	8000a54 <__udivmoddi4+0x2ac>
 800097e:	3b02      	subs	r3, #2
 8000980:	4464      	add	r4, ip
 8000982:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000986:	fba3 9502 	umull	r9, r5, r3, r2
 800098a:	eba4 040e 	sub.w	r4, r4, lr
 800098e:	42ac      	cmp	r4, r5
 8000990:	46c8      	mov	r8, r9
 8000992:	46ae      	mov	lr, r5
 8000994:	d356      	bcc.n	8000a44 <__udivmoddi4+0x29c>
 8000996:	d053      	beq.n	8000a40 <__udivmoddi4+0x298>
 8000998:	b156      	cbz	r6, 80009b0 <__udivmoddi4+0x208>
 800099a:	ebb0 0208 	subs.w	r2, r0, r8
 800099e:	eb64 040e 	sbc.w	r4, r4, lr
 80009a2:	fa04 f707 	lsl.w	r7, r4, r7
 80009a6:	40ca      	lsrs	r2, r1
 80009a8:	40cc      	lsrs	r4, r1
 80009aa:	4317      	orrs	r7, r2
 80009ac:	e9c6 7400 	strd	r7, r4, [r6]
 80009b0:	4618      	mov	r0, r3
 80009b2:	2100      	movs	r1, #0
 80009b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b8:	f1c3 0120 	rsb	r1, r3, #32
 80009bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80009c0:	fa20 f201 	lsr.w	r2, r0, r1
 80009c4:	fa25 f101 	lsr.w	r1, r5, r1
 80009c8:	409d      	lsls	r5, r3
 80009ca:	432a      	orrs	r2, r5
 80009cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d0:	fa1f fe8c 	uxth.w	lr, ip
 80009d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009d8:	fb07 1510 	mls	r5, r7, r0, r1
 80009dc:	0c11      	lsrs	r1, r2, #16
 80009de:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80009e2:	fb00 f50e 	mul.w	r5, r0, lr
 80009e6:	428d      	cmp	r5, r1
 80009e8:	fa04 f403 	lsl.w	r4, r4, r3
 80009ec:	d908      	bls.n	8000a00 <__udivmoddi4+0x258>
 80009ee:	eb1c 0101 	adds.w	r1, ip, r1
 80009f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80009f6:	d22f      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 80009f8:	428d      	cmp	r5, r1
 80009fa:	d92d      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 80009fc:	3802      	subs	r0, #2
 80009fe:	4461      	add	r1, ip
 8000a00:	1b49      	subs	r1, r1, r5
 8000a02:	b292      	uxth	r2, r2
 8000a04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a08:	fb07 1115 	mls	r1, r7, r5, r1
 8000a0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a10:	fb05 f10e 	mul.w	r1, r5, lr
 8000a14:	4291      	cmp	r1, r2
 8000a16:	d908      	bls.n	8000a2a <__udivmoddi4+0x282>
 8000a18:	eb1c 0202 	adds.w	r2, ip, r2
 8000a1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a20:	d216      	bcs.n	8000a50 <__udivmoddi4+0x2a8>
 8000a22:	4291      	cmp	r1, r2
 8000a24:	d914      	bls.n	8000a50 <__udivmoddi4+0x2a8>
 8000a26:	3d02      	subs	r5, #2
 8000a28:	4462      	add	r2, ip
 8000a2a:	1a52      	subs	r2, r2, r1
 8000a2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a30:	e738      	b.n	80008a4 <__udivmoddi4+0xfc>
 8000a32:	4631      	mov	r1, r6
 8000a34:	4630      	mov	r0, r6
 8000a36:	e708      	b.n	800084a <__udivmoddi4+0xa2>
 8000a38:	4639      	mov	r1, r7
 8000a3a:	e6e6      	b.n	800080a <__udivmoddi4+0x62>
 8000a3c:	4610      	mov	r0, r2
 8000a3e:	e6fb      	b.n	8000838 <__udivmoddi4+0x90>
 8000a40:	4548      	cmp	r0, r9
 8000a42:	d2a9      	bcs.n	8000998 <__udivmoddi4+0x1f0>
 8000a44:	ebb9 0802 	subs.w	r8, r9, r2
 8000a48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	e7a3      	b.n	8000998 <__udivmoddi4+0x1f0>
 8000a50:	4645      	mov	r5, r8
 8000a52:	e7ea      	b.n	8000a2a <__udivmoddi4+0x282>
 8000a54:	462b      	mov	r3, r5
 8000a56:	e794      	b.n	8000982 <__udivmoddi4+0x1da>
 8000a58:	4640      	mov	r0, r8
 8000a5a:	e7d1      	b.n	8000a00 <__udivmoddi4+0x258>
 8000a5c:	46d0      	mov	r8, sl
 8000a5e:	e77b      	b.n	8000958 <__udivmoddi4+0x1b0>
 8000a60:	3d02      	subs	r5, #2
 8000a62:	4462      	add	r2, ip
 8000a64:	e732      	b.n	80008cc <__udivmoddi4+0x124>
 8000a66:	4608      	mov	r0, r1
 8000a68:	e70a      	b.n	8000880 <__udivmoddi4+0xd8>
 8000a6a:	4464      	add	r4, ip
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	e742      	b.n	80008f6 <__udivmoddi4+0x14e>

08000a70 <__aeabi_idiv0>:
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a78:	f001 f8f6 	bl	8001c68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a7c:	f000 f81a 	bl	8000ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a80:	f000 fab4 	bl	8000fec <MX_GPIO_Init>
  MX_TIM3_Init();
 8000a84:	f000 f978 	bl	8000d78 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000a88:	f000 f9c4 	bl	8000e14 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a8c:	f000 fa10 	bl	8000eb0 <MX_USART2_UART_Init>
  MX_FMC_Init();
 8000a90:	f000 fa5a 	bl	8000f48 <MX_FMC_Init>
  MX_LTDC_Init();
 8000a94:	f000 f8c2 	bl	8000c1c <MX_LTDC_Init>
  MX_DMA2D_Init();
 8000a98:	f000 f886 	bl	8000ba8 <MX_DMA2D_Init>
  MX_QUADSPI_Init();
 8000a9c:	f000 f940 	bl	8000d20 <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */
  log_com_uart_init();
 8000aa0:	f00a f9da 	bl	800ae58 <log_com_uart_init>
//  printf("STM32H743 SDRAM Test \r\n");

  SDRAM_Init();
 8000aa4:	f00a f996 	bl	800add4 <SDRAM_Init>
//      printf("SDRAM Test success\r\n");
//  } else {
//      printf("SDRAM Test fail\r\n");
//  }

  W25QXX_Init();
 8000aa8:	f00a f8fc 	bl	800aca4 <W25QXX_Init>
//	  test_lcd_show_picture();
//	  test_spi_id = W25QXX_ReadID();
//	  printf("test_spi_id = %x \r\n",test_spi_id);
//	  HAL_Delay(1000);
//	  test_spi_flash();
	  test_picture_show();
 8000aac:	f009 fefc 	bl	800a8a8 <test_picture_show>
 8000ab0:	e7fc      	b.n	8000aac <main+0x38>
	...

08000ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b09c      	sub	sp, #112	; 0x70
 8000ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000abe:	224c      	movs	r2, #76	; 0x4c
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f00b f9fa 	bl	800bebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2220      	movs	r2, #32
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f00b f9f4 	bl	800bebc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ad4:	2002      	movs	r0, #2
 8000ad6:	f003 f82d 	bl	8003b34 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ada:	2300      	movs	r3, #0
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	4b30      	ldr	r3, [pc, #192]	; (8000ba0 <SystemClock_Config+0xec>)
 8000ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ae2:	4a2f      	ldr	r2, [pc, #188]	; (8000ba0 <SystemClock_Config+0xec>)
 8000ae4:	f023 0301 	bic.w	r3, r3, #1
 8000ae8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000aea:	4b2d      	ldr	r3, [pc, #180]	; (8000ba0 <SystemClock_Config+0xec>)
 8000aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	4b2b      	ldr	r3, [pc, #172]	; (8000ba4 <SystemClock_Config+0xf0>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	4a2a      	ldr	r2, [pc, #168]	; (8000ba4 <SystemClock_Config+0xf0>)
 8000afa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000afe:	6193      	str	r3, [r2, #24]
 8000b00:	4b28      	ldr	r3, [pc, #160]	; (8000ba4 <SystemClock_Config+0xf0>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b08:	603b      	str	r3, [r7, #0]
 8000b0a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b0c:	bf00      	nop
 8000b0e:	4b25      	ldr	r3, [pc, #148]	; (8000ba4 <SystemClock_Config+0xf0>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b1a:	d1f8      	bne.n	8000b0e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b26:	2302      	movs	r3, #2
 8000b28:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000b32:	2340      	movs	r3, #64	; 0x40
 8000b34:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b36:	2302      	movs	r3, #2
 8000b38:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b42:	230c      	movs	r3, #12
 8000b44:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b46:	2300      	movs	r3, #0
 8000b48:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b52:	4618      	mov	r0, r3
 8000b54:	f003 fbf4 	bl	8004340 <HAL_RCC_OscConfig>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b5e:	f000 fb1d 	bl	800119c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b62:	233f      	movs	r3, #63	; 0x3f
 8000b64:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b66:	2303      	movs	r3, #3
 8000b68:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b6e:	2308      	movs	r3, #8
 8000b70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b72:	2340      	movs	r3, #64	; 0x40
 8000b74:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b76:	2340      	movs	r3, #64	; 0x40
 8000b78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b7e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b80:	2340      	movs	r3, #64	; 0x40
 8000b82:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2102      	movs	r1, #2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f004 f833 	bl	8004bf4 <HAL_RCC_ClockConfig>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000b94:	f000 fb02 	bl	800119c <Error_Handler>
  }
}
 8000b98:	bf00      	nop
 8000b9a:	3770      	adds	r7, #112	; 0x70
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	58000400 	.word	0x58000400
 8000ba4:	58024800 	.word	0x58024800

08000ba8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000bac:	4b19      	ldr	r3, [pc, #100]	; (8000c14 <MX_DMA2D_Init+0x6c>)
 8000bae:	4a1a      	ldr	r2, [pc, #104]	; (8000c18 <MX_DMA2D_Init+0x70>)
 8000bb0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000bb2:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <MX_DMA2D_Init+0x6c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000bb8:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <MX_DMA2D_Init+0x6c>)
 8000bba:	2202      	movs	r2, #2
 8000bbc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <MX_DMA2D_Init+0x6c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000bc4:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <MX_DMA2D_Init+0x6c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000bca:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <MX_DMA2D_Init+0x6c>)
 8000bcc:	2202      	movs	r2, #2
 8000bce:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000bd0:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <MX_DMA2D_Init+0x6c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <MX_DMA2D_Init+0x6c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000bdc:	4b0d      	ldr	r3, [pc, #52]	; (8000c14 <MX_DMA2D_Init+0x6c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000be2:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <MX_DMA2D_Init+0x6c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000be8:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <MX_DMA2D_Init+0x6c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000bee:	4809      	ldr	r0, [pc, #36]	; (8000c14 <MX_DMA2D_Init+0x6c>)
 8000bf0:	f001 ff70 	bl	8002ad4 <HAL_DMA2D_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000bfa:	f000 facf 	bl	800119c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000bfe:	2101      	movs	r1, #1
 8000c00:	4804      	ldr	r0, [pc, #16]	; (8000c14 <MX_DMA2D_Init+0x6c>)
 8000c02:	f002 f90f 	bl	8002e24 <HAL_DMA2D_ConfigLayer>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8000c0c:	f000 fac6 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	240001f4 	.word	0x240001f4
 8000c18:	52001000 	.word	0x52001000

08000c1c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08e      	sub	sp, #56	; 0x38
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	2234      	movs	r2, #52	; 0x34
 8000c26:	2100      	movs	r1, #0
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f00b f947 	bl	800bebc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000c2e:	4b3a      	ldr	r3, [pc, #232]	; (8000d18 <MX_LTDC_Init+0xfc>)
 8000c30:	4a3a      	ldr	r2, [pc, #232]	; (8000d1c <MX_LTDC_Init+0x100>)
 8000c32:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c34:	4b38      	ldr	r3, [pc, #224]	; (8000d18 <MX_LTDC_Init+0xfc>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000c3a:	4b37      	ldr	r3, [pc, #220]	; (8000d18 <MX_LTDC_Init+0xfc>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c40:	4b35      	ldr	r3, [pc, #212]	; (8000d18 <MX_LTDC_Init+0xfc>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c46:	4b34      	ldr	r3, [pc, #208]	; (8000d18 <MX_LTDC_Init+0xfc>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 19;
 8000c4c:	4b32      	ldr	r3, [pc, #200]	; (8000d18 <MX_LTDC_Init+0xfc>)
 8000c4e:	2213      	movs	r2, #19
 8000c50:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 2;
 8000c52:	4b31      	ldr	r3, [pc, #196]	; (8000d18 <MX_LTDC_Init+0xfc>)
 8000c54:	2202      	movs	r2, #2
 8000c56:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 159;
 8000c58:	4b2f      	ldr	r3, [pc, #188]	; (8000d18 <MX_LTDC_Init+0xfc>)
 8000c5a:	229f      	movs	r2, #159	; 0x9f
 8000c5c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 22;
 8000c5e:	4b2e      	ldr	r3, [pc, #184]	; (8000d18 <MX_LTDC_Init+0xfc>)
 8000c60:	2216      	movs	r2, #22
 8000c62:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 1183;
 8000c64:	4b2c      	ldr	r3, [pc, #176]	; (8000d18 <MX_LTDC_Init+0xfc>)
 8000c66:	f240 429f 	movw	r2, #1183	; 0x49f
 8000c6a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 622;
 8000c6c:	4b2a      	ldr	r3, [pc, #168]	; (8000d18 <MX_LTDC_Init+0xfc>)
 8000c6e:	f240 226e 	movw	r2, #622	; 0x26e
 8000c72:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 1343;
 8000c74:	4b28      	ldr	r3, [pc, #160]	; (8000d18 <MX_LTDC_Init+0xfc>)
 8000c76:	f240 523f 	movw	r2, #1343	; 0x53f
 8000c7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 634;
 8000c7c:	4b26      	ldr	r3, [pc, #152]	; (8000d18 <MX_LTDC_Init+0xfc>)
 8000c7e:	f240 227a 	movw	r2, #634	; 0x27a
 8000c82:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000c84:	4b24      	ldr	r3, [pc, #144]	; (8000d18 <MX_LTDC_Init+0xfc>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000c8c:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <MX_LTDC_Init+0xfc>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000c94:	4b20      	ldr	r3, [pc, #128]	; (8000d18 <MX_LTDC_Init+0xfc>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c9c:	481e      	ldr	r0, [pc, #120]	; (8000d18 <MX_LTDC_Init+0xfc>)
 8000c9e:	f002 fbdf 	bl	8003460 <HAL_LTDC_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000ca8:	f000 fa78 	bl	800119c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 1024;
 8000cb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cb4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 600;
 8000cba:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000cbe:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000cc4:	23ff      	movs	r3, #255	; 0xff
 8000cc6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000ccc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cd0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000cd2:	2305      	movs	r3, #5
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000cd6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 1024;
 8000cdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 600;
 8000ce2:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000ce6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4805      	ldr	r0, [pc, #20]	; (8000d18 <MX_LTDC_Init+0xfc>)
 8000d02:	f002 fd3f 	bl	8003784 <HAL_LTDC_ConfigLayer>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000d0c:	f000 fa46 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000d10:	bf00      	nop
 8000d12:	3738      	adds	r7, #56	; 0x38
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	2400025c 	.word	0x2400025c
 8000d1c:	50001000 	.word	0x50001000

08000d20 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <MX_QUADSPI_Init+0x50>)
 8000d26:	4a13      	ldr	r2, [pc, #76]	; (8000d74 <MX_QUADSPI_Init+0x54>)
 8000d28:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <MX_QUADSPI_Init+0x50>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <MX_QUADSPI_Init+0x50>)
 8000d32:	2204      	movs	r2, #4
 8000d34:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <MX_QUADSPI_Init+0x50>)
 8000d38:	2210      	movs	r2, #16
 8000d3a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <MX_QUADSPI_Init+0x50>)
 8000d3e:	2218      	movs	r2, #24
 8000d40:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8000d42:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <MX_QUADSPI_Init+0x50>)
 8000d44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d48:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <MX_QUADSPI_Init+0x50>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <MX_QUADSPI_Init+0x50>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <MX_QUADSPI_Init+0x50>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000d5c:	4804      	ldr	r0, [pc, #16]	; (8000d70 <MX_QUADSPI_Init+0x50>)
 8000d5e:	f002 ff23 	bl	8003ba8 <HAL_QSPI_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000d68:	f000 fa18 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	24000304 	.word	0x24000304
 8000d74:	52005000 	.word	0x52005000

08000d78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d7e:	f107 0310 	add.w	r3, r7, #16
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d96:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <MX_TIM3_Init+0x94>)
 8000d98:	4a1d      	ldr	r2, [pc, #116]	; (8000e10 <MX_TIM3_Init+0x98>)
 8000d9a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d9c:	4b1b      	ldr	r3, [pc, #108]	; (8000e0c <MX_TIM3_Init+0x94>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da2:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <MX_TIM3_Init+0x94>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000da8:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <MX_TIM3_Init+0x94>)
 8000daa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db0:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <MX_TIM3_Init+0x94>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db6:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <MX_TIM3_Init+0x94>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dbc:	4813      	ldr	r0, [pc, #76]	; (8000e0c <MX_TIM3_Init+0x94>)
 8000dbe:	f006 f96a 	bl	8007096 <HAL_TIM_Base_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000dc8:	f000 f9e8 	bl	800119c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dd2:	f107 0310 	add.w	r3, r7, #16
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	480c      	ldr	r0, [pc, #48]	; (8000e0c <MX_TIM3_Init+0x94>)
 8000dda:	f006 fad3 	bl	8007384 <HAL_TIM_ConfigClockSource>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000de4:	f000 f9da 	bl	800119c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de8:	2300      	movs	r3, #0
 8000dea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	4619      	mov	r1, r3
 8000df4:	4805      	ldr	r0, [pc, #20]	; (8000e0c <MX_TIM3_Init+0x94>)
 8000df6:	f006 fd27 	bl	8007848 <HAL_TIMEx_MasterConfigSynchronization>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000e00:	f000 f9cc 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e04:	bf00      	nop
 8000e06:	3720      	adds	r7, #32
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	24000350 	.word	0x24000350
 8000e10:	40000400 	.word	0x40000400

08000e14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e18:	4b22      	ldr	r3, [pc, #136]	; (8000ea4 <MX_USART1_UART_Init+0x90>)
 8000e1a:	4a23      	ldr	r2, [pc, #140]	; (8000ea8 <MX_USART1_UART_Init+0x94>)
 8000e1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8000e1e:	4b21      	ldr	r3, [pc, #132]	; (8000ea4 <MX_USART1_UART_Init+0x90>)
 8000e20:	4a22      	ldr	r2, [pc, #136]	; (8000eac <MX_USART1_UART_Init+0x98>)
 8000e22:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e24:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <MX_USART1_UART_Init+0x90>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ea4 <MX_USART1_UART_Init+0x90>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e30:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <MX_USART1_UART_Init+0x90>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e36:	4b1b      	ldr	r3, [pc, #108]	; (8000ea4 <MX_USART1_UART_Init+0x90>)
 8000e38:	220c      	movs	r2, #12
 8000e3a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e3c:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <MX_USART1_UART_Init+0x90>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e42:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <MX_USART1_UART_Init+0x90>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e48:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <MX_USART1_UART_Init+0x90>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e4e:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <MX_USART1_UART_Init+0x90>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <MX_USART1_UART_Init+0x90>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e5a:	4812      	ldr	r0, [pc, #72]	; (8000ea4 <MX_USART1_UART_Init+0x90>)
 8000e5c:	f006 fda0 	bl	80079a0 <HAL_UART_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8000e66:	f000 f999 	bl	800119c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <MX_USART1_UART_Init+0x90>)
 8000e6e:	f009 fb2a 	bl	800a4c6 <HAL_UARTEx_SetTxFifoThreshold>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8000e78:	f000 f990 	bl	800119c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4809      	ldr	r0, [pc, #36]	; (8000ea4 <MX_USART1_UART_Init+0x90>)
 8000e80:	f009 fb5f 	bl	800a542 <HAL_UARTEx_SetRxFifoThreshold>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000e8a:	f000 f987 	bl	800119c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e8e:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <MX_USART1_UART_Init+0x90>)
 8000e90:	f009 fae0 	bl	800a454 <HAL_UARTEx_DisableFifoMode>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000e9a:	f000 f97f 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	2400039c 	.word	0x2400039c
 8000ea8:	40011000 	.word	0x40011000
 8000eac:	001e8480 	.word	0x001e8480

08000eb0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eb4:	4b22      	ldr	r3, [pc, #136]	; (8000f40 <MX_USART2_UART_Init+0x90>)
 8000eb6:	4a23      	ldr	r2, [pc, #140]	; (8000f44 <MX_USART2_UART_Init+0x94>)
 8000eb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eba:	4b21      	ldr	r3, [pc, #132]	; (8000f40 <MX_USART2_UART_Init+0x90>)
 8000ebc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ec0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ec2:	4b1f      	ldr	r3, [pc, #124]	; (8000f40 <MX_USART2_UART_Init+0x90>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ec8:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <MX_USART2_UART_Init+0x90>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ece:	4b1c      	ldr	r3, [pc, #112]	; (8000f40 <MX_USART2_UART_Init+0x90>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ed4:	4b1a      	ldr	r3, [pc, #104]	; (8000f40 <MX_USART2_UART_Init+0x90>)
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eda:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <MX_USART2_UART_Init+0x90>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee0:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <MX_USART2_UART_Init+0x90>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ee6:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <MX_USART2_UART_Init+0x90>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000eec:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <MX_USART2_UART_Init+0x90>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ef2:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <MX_USART2_UART_Init+0x90>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ef8:	4811      	ldr	r0, [pc, #68]	; (8000f40 <MX_USART2_UART_Init+0x90>)
 8000efa:	f006 fd51 	bl	80079a0 <HAL_UART_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000f04:	f000 f94a 	bl	800119c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f08:	2100      	movs	r1, #0
 8000f0a:	480d      	ldr	r0, [pc, #52]	; (8000f40 <MX_USART2_UART_Init+0x90>)
 8000f0c:	f009 fadb 	bl	800a4c6 <HAL_UARTEx_SetTxFifoThreshold>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000f16:	f000 f941 	bl	800119c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4808      	ldr	r0, [pc, #32]	; (8000f40 <MX_USART2_UART_Init+0x90>)
 8000f1e:	f009 fb10 	bl	800a542 <HAL_UARTEx_SetRxFifoThreshold>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000f28:	f000 f938 	bl	800119c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000f2c:	4804      	ldr	r0, [pc, #16]	; (8000f40 <MX_USART2_UART_Init+0x90>)
 8000f2e:	f009 fa91 	bl	800a454 <HAL_UARTEx_DisableFifoMode>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000f38:	f000 f930 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	24000430 	.word	0x24000430
 8000f44:	40004400 	.word	0x40004400

08000f48 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
 8000f5c:	615a      	str	r2, [r3, #20]
 8000f5e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f60:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <MX_FMC_Init+0x9c>)
 8000f62:	4a21      	ldr	r2, [pc, #132]	; (8000fe8 <MX_FMC_Init+0xa0>)
 8000f64:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000f66:	4b1f      	ldr	r3, [pc, #124]	; (8000fe4 <MX_FMC_Init+0x9c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000f6c:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <MX_FMC_Init+0x9c>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000f72:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <MX_FMC_Init+0x9c>)
 8000f74:	2208      	movs	r2, #8
 8000f76:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000f78:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <MX_FMC_Init+0x9c>)
 8000f7a:	2210      	movs	r2, #16
 8000f7c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000f7e:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <MX_FMC_Init+0x9c>)
 8000f80:	2240      	movs	r2, #64	; 0x40
 8000f82:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000f84:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <MX_FMC_Init+0x9c>)
 8000f86:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000f8a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000f8c:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <MX_FMC_Init+0x9c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000f92:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <MX_FMC_Init+0x9c>)
 8000f94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f98:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000f9a:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <MX_FMC_Init+0x9c>)
 8000f9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000fa2:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <MX_FMC_Init+0x9c>)
 8000fa4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fa8:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000faa:	2302      	movs	r3, #2
 8000fac:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 8;
 8000fae:	2308      	movs	r3, #8
 8000fb0:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 6;
 8000fb2:	2306      	movs	r3, #6
 8000fb4:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8000fb6:	2306      	movs	r3, #6
 8000fb8:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 6;
 8000fba:	2306      	movs	r3, #6
 8000fbc:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4806      	ldr	r0, [pc, #24]	; (8000fe4 <MX_FMC_Init+0x9c>)
 8000fcc:	f005 ffca 	bl	8006f64 <HAL_SDRAM_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_FMC_Init+0x92>
  {
    Error_Handler( );
 8000fd6:	f000 f8e1 	bl	800119c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000fda:	bf00      	nop
 8000fdc:	3720      	adds	r7, #32
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	240004c4 	.word	0x240004c4
 8000fe8:	52004140 	.word	0x52004140

08000fec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08e      	sub	sp, #56	; 0x38
 8000ff0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001002:	4b62      	ldr	r3, [pc, #392]	; (800118c <MX_GPIO_Init+0x1a0>)
 8001004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001008:	4a60      	ldr	r2, [pc, #384]	; (800118c <MX_GPIO_Init+0x1a0>)
 800100a:	f043 0304 	orr.w	r3, r3, #4
 800100e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001012:	4b5e      	ldr	r3, [pc, #376]	; (800118c <MX_GPIO_Init+0x1a0>)
 8001014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001018:	f003 0304 	and.w	r3, r3, #4
 800101c:	623b      	str	r3, [r7, #32]
 800101e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001020:	4b5a      	ldr	r3, [pc, #360]	; (800118c <MX_GPIO_Init+0x1a0>)
 8001022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001026:	4a59      	ldr	r2, [pc, #356]	; (800118c <MX_GPIO_Init+0x1a0>)
 8001028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800102c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001030:	4b56      	ldr	r3, [pc, #344]	; (800118c <MX_GPIO_Init+0x1a0>)
 8001032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800103a:	61fb      	str	r3, [r7, #28]
 800103c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800103e:	4b53      	ldr	r3, [pc, #332]	; (800118c <MX_GPIO_Init+0x1a0>)
 8001040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001044:	4a51      	ldr	r2, [pc, #324]	; (800118c <MX_GPIO_Init+0x1a0>)
 8001046:	f043 0320 	orr.w	r3, r3, #32
 800104a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800104e:	4b4f      	ldr	r3, [pc, #316]	; (800118c <MX_GPIO_Init+0x1a0>)
 8001050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001054:	f003 0320 	and.w	r3, r3, #32
 8001058:	61bb      	str	r3, [r7, #24]
 800105a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800105c:	4b4b      	ldr	r3, [pc, #300]	; (800118c <MX_GPIO_Init+0x1a0>)
 800105e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001062:	4a4a      	ldr	r2, [pc, #296]	; (800118c <MX_GPIO_Init+0x1a0>)
 8001064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001068:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800106c:	4b47      	ldr	r3, [pc, #284]	; (800118c <MX_GPIO_Init+0x1a0>)
 800106e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	4b44      	ldr	r3, [pc, #272]	; (800118c <MX_GPIO_Init+0x1a0>)
 800107c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001080:	4a42      	ldr	r2, [pc, #264]	; (800118c <MX_GPIO_Init+0x1a0>)
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800108a:	4b40      	ldr	r3, [pc, #256]	; (800118c <MX_GPIO_Init+0x1a0>)
 800108c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001098:	4b3c      	ldr	r3, [pc, #240]	; (800118c <MX_GPIO_Init+0x1a0>)
 800109a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109e:	4a3b      	ldr	r2, [pc, #236]	; (800118c <MX_GPIO_Init+0x1a0>)
 80010a0:	f043 0302 	orr.w	r3, r3, #2
 80010a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010a8:	4b38      	ldr	r3, [pc, #224]	; (800118c <MX_GPIO_Init+0x1a0>)
 80010aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010b6:	4b35      	ldr	r3, [pc, #212]	; (800118c <MX_GPIO_Init+0x1a0>)
 80010b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010bc:	4a33      	ldr	r2, [pc, #204]	; (800118c <MX_GPIO_Init+0x1a0>)
 80010be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010c6:	4b31      	ldr	r3, [pc, #196]	; (800118c <MX_GPIO_Init+0x1a0>)
 80010c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010d4:	4b2d      	ldr	r3, [pc, #180]	; (800118c <MX_GPIO_Init+0x1a0>)
 80010d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010da:	4a2c      	ldr	r2, [pc, #176]	; (800118c <MX_GPIO_Init+0x1a0>)
 80010dc:	f043 0310 	orr.w	r3, r3, #16
 80010e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e4:	4b29      	ldr	r3, [pc, #164]	; (800118c <MX_GPIO_Init+0x1a0>)
 80010e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ea:	f003 0310 	and.w	r3, r3, #16
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f2:	4b26      	ldr	r3, [pc, #152]	; (800118c <MX_GPIO_Init+0x1a0>)
 80010f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f8:	4a24      	ldr	r2, [pc, #144]	; (800118c <MX_GPIO_Init+0x1a0>)
 80010fa:	f043 0308 	orr.w	r3, r3, #8
 80010fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001102:	4b22      	ldr	r3, [pc, #136]	; (800118c <MX_GPIO_Init+0x1a0>)
 8001104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001108:	f003 0308 	and.w	r3, r3, #8
 800110c:	603b      	str	r3, [r7, #0]
 800110e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED0_Pin|LCD_BL_Pin, GPIO_PIN_SET);
 8001110:	2201      	movs	r2, #1
 8001112:	2123      	movs	r1, #35	; 0x23
 8001114:	481e      	ldr	r0, [pc, #120]	; (8001190 <MX_GPIO_Init+0x1a4>)
 8001116:	f002 f989 	bl	800342c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : KEY2_Pin */
  GPIO_InitStruct.Pin = KEY2_Pin;
 800111a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001120:	2300      	movs	r3, #0
 8001122:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001124:	2301      	movs	r3, #1
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KEY2_GPIO_Port, &GPIO_InitStruct);
 8001128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112c:	4619      	mov	r1, r3
 800112e:	4819      	ldr	r0, [pc, #100]	; (8001194 <MX_GPIO_Init+0x1a8>)
 8001130:	f001 ffcc 	bl	80030cc <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY1_Pin KEY0_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY0_Pin;
 8001134:	230c      	movs	r3, #12
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001138:	2300      	movs	r3, #0
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800113c:	2301      	movs	r3, #1
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001144:	4619      	mov	r1, r3
 8001146:	4814      	ldr	r0, [pc, #80]	; (8001198 <MX_GPIO_Init+0x1ac>)
 8001148:	f001 ffc0 	bl	80030cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED0_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED0_Pin;
 800114c:	2303      	movs	r3, #3
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001150:	2301      	movs	r3, #1
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001154:	2301      	movs	r3, #1
 8001156:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001158:	2302      	movs	r3, #2
 800115a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001160:	4619      	mov	r1, r3
 8001162:	480b      	ldr	r0, [pc, #44]	; (8001190 <MX_GPIO_Init+0x1a4>)
 8001164:	f001 ffb2 	bl	80030cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8001168:	2320      	movs	r3, #32
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116c:	2301      	movs	r3, #1
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2300      	movs	r3, #0
 8001176:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8001178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117c:	4619      	mov	r1, r3
 800117e:	4804      	ldr	r0, [pc, #16]	; (8001190 <MX_GPIO_Init+0x1a4>)
 8001180:	f001 ffa4 	bl	80030cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001184:	bf00      	nop
 8001186:	3738      	adds	r7, #56	; 0x38
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	58024400 	.word	0x58024400
 8001190:	58020400 	.word	0x58020400
 8001194:	58020800 	.word	0x58020800
 8001198:	58021c00 	.word	0x58021c00

0800119c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a0:	b672      	cpsid	i
}
 80011a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <Error_Handler+0x8>
	...

080011a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ae:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <HAL_MspInit+0x30>)
 80011b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011b4:	4a08      	ldr	r2, [pc, #32]	; (80011d8 <HAL_MspInit+0x30>)
 80011b6:	f043 0302 	orr.w	r3, r3, #2
 80011ba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_MspInit+0x30>)
 80011c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	58024400 	.word	0x58024400

080011dc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a0e      	ldr	r2, [pc, #56]	; (8001224 <HAL_DMA2D_MspInit+0x48>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d116      	bne.n	800121c <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <HAL_DMA2D_MspInit+0x4c>)
 80011f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80011f4:	4a0c      	ldr	r2, [pc, #48]	; (8001228 <HAL_DMA2D_MspInit+0x4c>)
 80011f6:	f043 0310 	orr.w	r3, r3, #16
 80011fa:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <HAL_DMA2D_MspInit+0x4c>)
 8001200:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001204:	f003 0310 	and.w	r3, r3, #16
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800120c:	2200      	movs	r2, #0
 800120e:	2100      	movs	r1, #0
 8001210:	205a      	movs	r0, #90	; 0x5a
 8001212:	f000 fec6 	bl	8001fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001216:	205a      	movs	r0, #90	; 0x5a
 8001218:	f000 fedd 	bl	8001fd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800121c:	bf00      	nop
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	52001000 	.word	0x52001000
 8001228:	58024400 	.word	0x58024400

0800122c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b0be      	sub	sp, #248	; 0xf8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001244:	f107 0320 	add.w	r3, r7, #32
 8001248:	22c0      	movs	r2, #192	; 0xc0
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f00a fe35 	bl	800bebc <memset>
  if(hltdc->Instance==LTDC)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a6a      	ldr	r2, [pc, #424]	; (8001400 <HAL_LTDC_MspInit+0x1d4>)
 8001258:	4293      	cmp	r3, r2
 800125a:	f040 80cd 	bne.w	80013f8 <HAL_LTDC_MspInit+0x1cc>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800125e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001262:	f04f 0300 	mov.w	r3, #0
 8001266:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 800126a:	2320      	movs	r3, #32
 800126c:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 800126e:	23c0      	movs	r3, #192	; 0xc0
 8001270:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001272:	2302      	movs	r3, #2
 8001274:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001276:	2302      	movs	r3, #2
 8001278:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 3;
 800127a:	2303      	movs	r3, #3
 800127c:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800127e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001282:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001284:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001288:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800128e:	f107 0320 	add.w	r3, r7, #32
 8001292:	4618      	mov	r0, r3
 8001294:	f004 f83a 	bl	800530c <HAL_RCCEx_PeriphCLKConfig>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 800129e:	f7ff ff7d 	bl	800119c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80012a2:	4b58      	ldr	r3, [pc, #352]	; (8001404 <HAL_LTDC_MspInit+0x1d8>)
 80012a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80012a8:	4a56      	ldr	r2, [pc, #344]	; (8001404 <HAL_LTDC_MspInit+0x1d8>)
 80012aa:	f043 0308 	orr.w	r3, r3, #8
 80012ae:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80012b2:	4b54      	ldr	r3, [pc, #336]	; (8001404 <HAL_LTDC_MspInit+0x1d8>)
 80012b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80012b8:	f003 0308 	and.w	r3, r3, #8
 80012bc:	61fb      	str	r3, [r7, #28]
 80012be:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80012c0:	4b50      	ldr	r3, [pc, #320]	; (8001404 <HAL_LTDC_MspInit+0x1d8>)
 80012c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c6:	4a4f      	ldr	r2, [pc, #316]	; (8001404 <HAL_LTDC_MspInit+0x1d8>)
 80012c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d0:	4b4c      	ldr	r3, [pc, #304]	; (8001404 <HAL_LTDC_MspInit+0x1d8>)
 80012d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012da:	61bb      	str	r3, [r7, #24]
 80012dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012de:	4b49      	ldr	r3, [pc, #292]	; (8001404 <HAL_LTDC_MspInit+0x1d8>)
 80012e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e4:	4a47      	ldr	r2, [pc, #284]	; (8001404 <HAL_LTDC_MspInit+0x1d8>)
 80012e6:	f043 0320 	orr.w	r3, r3, #32
 80012ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ee:	4b45      	ldr	r3, [pc, #276]	; (8001404 <HAL_LTDC_MspInit+0x1d8>)
 80012f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f4:	f003 0320 	and.w	r3, r3, #32
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80012fc:	4b41      	ldr	r3, [pc, #260]	; (8001404 <HAL_LTDC_MspInit+0x1d8>)
 80012fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001302:	4a40      	ldr	r2, [pc, #256]	; (8001404 <HAL_LTDC_MspInit+0x1d8>)
 8001304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001308:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800130c:	4b3d      	ldr	r3, [pc, #244]	; (8001404 <HAL_LTDC_MspInit+0x1d8>)
 800130e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800131a:	4b3a      	ldr	r3, [pc, #232]	; (8001404 <HAL_LTDC_MspInit+0x1d8>)
 800131c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001320:	4a38      	ldr	r2, [pc, #224]	; (8001404 <HAL_LTDC_MspInit+0x1d8>)
 8001322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001326:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800132a:	4b36      	ldr	r3, [pc, #216]	; (8001404 <HAL_LTDC_MspInit+0x1d8>)
 800132c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	68fb      	ldr	r3, [r7, #12]
    PI4     ------> LTDC_B4
    PI5     ------> LTDC_B5
    PI6     ------> LTDC_B6
    PI7     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1
 8001338:	f240 63f7 	movw	r3, #1783	; 0x6f7
 800133c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	2302      	movs	r3, #2
 8001342:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134c:	2303      	movs	r3, #3
 800134e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001352:	230e      	movs	r3, #14
 8001354:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001358:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800135c:	4619      	mov	r1, r3
 800135e:	482a      	ldr	r0, [pc, #168]	; (8001408 <HAL_LTDC_MspInit+0x1dc>)
 8001360:	f001 feb4 	bl	80030cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001364:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001368:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136c:	2302      	movs	r3, #2
 800136e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001378:	2303      	movs	r3, #3
 800137a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800137e:	230e      	movs	r3, #14
 8001380:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001384:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001388:	4619      	mov	r1, r3
 800138a:	4820      	ldr	r0, [pc, #128]	; (800140c <HAL_LTDC_MspInit+0x1e0>)
 800138c:	f001 fe9e 	bl	80030cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8001390:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8001394:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	2302      	movs	r3, #2
 800139a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a4:	2303      	movs	r3, #3
 80013a6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013aa:	230e      	movs	r3, #14
 80013ac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013b0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80013b4:	4619      	mov	r1, r3
 80013b6:	4816      	ldr	r0, [pc, #88]	; (8001410 <HAL_LTDC_MspInit+0x1e4>)
 80013b8:	f001 fe88 	bl	80030cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 80013bc:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80013c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d0:	2303      	movs	r3, #3
 80013d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013d6:	230e      	movs	r3, #14
 80013d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013dc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80013e0:	4619      	mov	r1, r3
 80013e2:	480c      	ldr	r0, [pc, #48]	; (8001414 <HAL_LTDC_MspInit+0x1e8>)
 80013e4:	f001 fe72 	bl	80030cc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 1, 0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2101      	movs	r1, #1
 80013ec:	2058      	movs	r0, #88	; 0x58
 80013ee:	f000 fdd8 	bl	8001fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80013f2:	2058      	movs	r0, #88	; 0x58
 80013f4:	f000 fdef 	bl	8001fd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80013f8:	bf00      	nop
 80013fa:	37f8      	adds	r7, #248	; 0xf8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	50001000 	.word	0x50001000
 8001404:	58024400 	.word	0x58024400
 8001408:	58022000 	.word	0x58022000
 800140c:	58021400 	.word	0x58021400
 8001410:	58021c00 	.word	0x58021c00
 8001414:	58021800 	.word	0x58021800

08001418 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b0bc      	sub	sp, #240	; 0xf0
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001430:	f107 0318 	add.w	r3, r7, #24
 8001434:	22c0      	movs	r2, #192	; 0xc0
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f00a fd3f 	bl	800bebc <memset>
  if(hqspi->Instance==QUADSPI)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a4e      	ldr	r2, [pc, #312]	; (800157c <HAL_QSPI_MspInit+0x164>)
 8001444:	4293      	cmp	r3, r2
 8001446:	f040 8094 	bne.w	8001572 <HAL_QSPI_MspInit+0x15a>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800144a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800144e:	f04f 0300 	mov.w	r3, #0
 8001452:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8001456:	2300      	movs	r3, #0
 8001458:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800145a:	f107 0318 	add.w	r3, r7, #24
 800145e:	4618      	mov	r0, r3
 8001460:	f003 ff54 	bl	800530c <HAL_RCCEx_PeriphCLKConfig>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 800146a:	f7ff fe97 	bl	800119c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800146e:	4b44      	ldr	r3, [pc, #272]	; (8001580 <HAL_QSPI_MspInit+0x168>)
 8001470:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001474:	4a42      	ldr	r2, [pc, #264]	; (8001580 <HAL_QSPI_MspInit+0x168>)
 8001476:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800147a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800147e:	4b40      	ldr	r3, [pc, #256]	; (8001580 <HAL_QSPI_MspInit+0x168>)
 8001480:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001488:	617b      	str	r3, [r7, #20]
 800148a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800148c:	4b3c      	ldr	r3, [pc, #240]	; (8001580 <HAL_QSPI_MspInit+0x168>)
 800148e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001492:	4a3b      	ldr	r2, [pc, #236]	; (8001580 <HAL_QSPI_MspInit+0x168>)
 8001494:	f043 0320 	orr.w	r3, r3, #32
 8001498:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800149c:	4b38      	ldr	r3, [pc, #224]	; (8001580 <HAL_QSPI_MspInit+0x168>)
 800149e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a2:	f003 0320 	and.w	r3, r3, #32
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014aa:	4b35      	ldr	r3, [pc, #212]	; (8001580 <HAL_QSPI_MspInit+0x168>)
 80014ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b0:	4a33      	ldr	r2, [pc, #204]	; (8001580 <HAL_QSPI_MspInit+0x168>)
 80014b2:	f043 0302 	orr.w	r3, r3, #2
 80014b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ba:	4b31      	ldr	r3, [pc, #196]	; (8001580 <HAL_QSPI_MspInit+0x168>)
 80014bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	68fb      	ldr	r3, [r7, #12]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014c8:	23c0      	movs	r3, #192	; 0xc0
 80014ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	2302      	movs	r3, #2
 80014d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014da:	2303      	movs	r3, #3
 80014dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80014e0:	2309      	movs	r3, #9
 80014e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014e6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014ea:	4619      	mov	r1, r3
 80014ec:	4825      	ldr	r0, [pc, #148]	; (8001584 <HAL_QSPI_MspInit+0x16c>)
 80014ee:	f001 fded 	bl	80030cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001506:	2303      	movs	r3, #3
 8001508:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800150c:	230a      	movs	r3, #10
 800150e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001512:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001516:	4619      	mov	r1, r3
 8001518:	481a      	ldr	r0, [pc, #104]	; (8001584 <HAL_QSPI_MspInit+0x16c>)
 800151a:	f001 fdd7 	bl	80030cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800151e:	2304      	movs	r3, #4
 8001520:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001530:	2303      	movs	r3, #3
 8001532:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001536:	2309      	movs	r3, #9
 8001538:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001540:	4619      	mov	r1, r3
 8001542:	4811      	ldr	r0, [pc, #68]	; (8001588 <HAL_QSPI_MspInit+0x170>)
 8001544:	f001 fdc2 	bl	80030cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001548:	2340      	movs	r3, #64	; 0x40
 800154a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154e:	2302      	movs	r3, #2
 8001550:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155a:	2303      	movs	r3, #3
 800155c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001560:	230a      	movs	r3, #10
 8001562:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001566:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800156a:	4619      	mov	r1, r3
 800156c:	4806      	ldr	r0, [pc, #24]	; (8001588 <HAL_QSPI_MspInit+0x170>)
 800156e:	f001 fdad 	bl	80030cc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001572:	bf00      	nop
 8001574:	37f0      	adds	r7, #240	; 0xf0
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	52005000 	.word	0x52005000
 8001580:	58024400 	.word	0x58024400
 8001584:	58021400 	.word	0x58021400
 8001588:	58020400 	.word	0x58020400

0800158c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <HAL_TIM_Base_MspInit+0x48>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d116      	bne.n	80015cc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <HAL_TIM_Base_MspInit+0x4c>)
 80015a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015a4:	4a0c      	ldr	r2, [pc, #48]	; (80015d8 <HAL_TIM_Base_MspInit+0x4c>)
 80015a6:	f043 0302 	orr.w	r3, r3, #2
 80015aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <HAL_TIM_Base_MspInit+0x4c>)
 80015b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80015bc:	2200      	movs	r2, #0
 80015be:	2101      	movs	r1, #1
 80015c0:	201d      	movs	r0, #29
 80015c2:	f000 fcee 	bl	8001fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015c6:	201d      	movs	r0, #29
 80015c8:	f000 fd05 	bl	8001fd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015cc:	bf00      	nop
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40000400 	.word	0x40000400
 80015d8:	58024400 	.word	0x58024400

080015dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b0bc      	sub	sp, #240	; 0xf0
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015f4:	f107 0318 	add.w	r3, r7, #24
 80015f8:	22c0      	movs	r2, #192	; 0xc0
 80015fa:	2100      	movs	r1, #0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f00a fc5d 	bl	800bebc <memset>
  if(huart->Instance==USART1)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a55      	ldr	r2, [pc, #340]	; (800175c <HAL_UART_MspInit+0x180>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d14f      	bne.n	80016ac <HAL_UART_MspInit+0xd0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800160c:	f04f 0201 	mov.w	r2, #1
 8001610:	f04f 0300 	mov.w	r3, #0
 8001614:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001618:	2300      	movs	r3, #0
 800161a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800161e:	f107 0318 	add.w	r3, r7, #24
 8001622:	4618      	mov	r0, r3
 8001624:	f003 fe72 	bl	800530c <HAL_RCCEx_PeriphCLKConfig>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800162e:	f7ff fdb5 	bl	800119c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001632:	4b4b      	ldr	r3, [pc, #300]	; (8001760 <HAL_UART_MspInit+0x184>)
 8001634:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001638:	4a49      	ldr	r2, [pc, #292]	; (8001760 <HAL_UART_MspInit+0x184>)
 800163a:	f043 0310 	orr.w	r3, r3, #16
 800163e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001642:	4b47      	ldr	r3, [pc, #284]	; (8001760 <HAL_UART_MspInit+0x184>)
 8001644:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001650:	4b43      	ldr	r3, [pc, #268]	; (8001760 <HAL_UART_MspInit+0x184>)
 8001652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001656:	4a42      	ldr	r2, [pc, #264]	; (8001760 <HAL_UART_MspInit+0x184>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001660:	4b3f      	ldr	r3, [pc, #252]	; (8001760 <HAL_UART_MspInit+0x184>)
 8001662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	613b      	str	r3, [r7, #16]
 800166c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800166e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001672:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2300      	movs	r3, #0
 8001684:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001688:	2307      	movs	r3, #7
 800168a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001692:	4619      	mov	r1, r3
 8001694:	4833      	ldr	r0, [pc, #204]	; (8001764 <HAL_UART_MspInit+0x188>)
 8001696:	f001 fd19 	bl	80030cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2101      	movs	r1, #1
 800169e:	2025      	movs	r0, #37	; 0x25
 80016a0:	f000 fc7f 	bl	8001fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016a4:	2025      	movs	r0, #37	; 0x25
 80016a6:	f000 fc96 	bl	8001fd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016aa:	e052      	b.n	8001752 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART2)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a2d      	ldr	r2, [pc, #180]	; (8001768 <HAL_UART_MspInit+0x18c>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d14d      	bne.n	8001752 <HAL_UART_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016b6:	f04f 0202 	mov.w	r2, #2
 80016ba:	f04f 0300 	mov.w	r3, #0
 80016be:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80016c2:	2300      	movs	r3, #0
 80016c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016c8:	f107 0318 	add.w	r3, r7, #24
 80016cc:	4618      	mov	r0, r3
 80016ce:	f003 fe1d 	bl	800530c <HAL_RCCEx_PeriphCLKConfig>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <HAL_UART_MspInit+0x100>
      Error_Handler();
 80016d8:	f7ff fd60 	bl	800119c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016dc:	4b20      	ldr	r3, [pc, #128]	; (8001760 <HAL_UART_MspInit+0x184>)
 80016de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016e2:	4a1f      	ldr	r2, [pc, #124]	; (8001760 <HAL_UART_MspInit+0x184>)
 80016e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016ec:	4b1c      	ldr	r3, [pc, #112]	; (8001760 <HAL_UART_MspInit+0x184>)
 80016ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	4b19      	ldr	r3, [pc, #100]	; (8001760 <HAL_UART_MspInit+0x184>)
 80016fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001700:	4a17      	ldr	r2, [pc, #92]	; (8001760 <HAL_UART_MspInit+0x184>)
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <HAL_UART_MspInit+0x184>)
 800170c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001718:	230c      	movs	r3, #12
 800171a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171e:	2302      	movs	r3, #2
 8001720:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172a:	2300      	movs	r3, #0
 800172c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001730:	2307      	movs	r3, #7
 8001732:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001736:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800173a:	4619      	mov	r1, r3
 800173c:	4809      	ldr	r0, [pc, #36]	; (8001764 <HAL_UART_MspInit+0x188>)
 800173e:	f001 fcc5 	bl	80030cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2100      	movs	r1, #0
 8001746:	2026      	movs	r0, #38	; 0x26
 8001748:	f000 fc2b 	bl	8001fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800174c:	2026      	movs	r0, #38	; 0x26
 800174e:	f000 fc42 	bl	8001fd6 <HAL_NVIC_EnableIRQ>
}
 8001752:	bf00      	nop
 8001754:	37f0      	adds	r7, #240	; 0xf0
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40011000 	.word	0x40011000
 8001760:	58024400 	.word	0x58024400
 8001764:	58020000 	.word	0x58020000
 8001768:	40004400 	.word	0x40004400

0800176c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800176c:	b580      	push	{r7, lr}
 800176e:	b0b8      	sub	sp, #224	; 0xe0
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001772:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
 8001780:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001782:	4b51      	ldr	r3, [pc, #324]	; (80018c8 <HAL_FMC_MspInit+0x15c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	f040 8099 	bne.w	80018be <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 800178c:	4b4e      	ldr	r3, [pc, #312]	; (80018c8 <HAL_FMC_MspInit+0x15c>)
 800178e:	2201      	movs	r2, #1
 8001790:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001792:	f107 0308 	add.w	r3, r7, #8
 8001796:	22c0      	movs	r2, #192	; 0xc0
 8001798:	2100      	movs	r1, #0
 800179a:	4618      	mov	r0, r3
 800179c:	f00a fb8e 	bl	800bebc <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80017a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017a4:	f04f 0300 	mov.w	r3, #0
 80017a8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80017ac:	2300      	movs	r3, #0
 80017ae:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017b0:	f107 0308 	add.w	r3, r7, #8
 80017b4:	4618      	mov	r0, r3
 80017b6:	f003 fda9 	bl	800530c <HAL_RCCEx_PeriphCLKConfig>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80017c0:	f7ff fcec 	bl	800119c <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80017c4:	4b41      	ldr	r3, [pc, #260]	; (80018cc <HAL_FMC_MspInit+0x160>)
 80017c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80017ca:	4a40      	ldr	r2, [pc, #256]	; (80018cc <HAL_FMC_MspInit+0x160>)
 80017cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017d0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80017d4:	4b3d      	ldr	r3, [pc, #244]	; (80018cc <HAL_FMC_MspInit+0x160>)
 80017d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80017da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80017e2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80017e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	2302      	movs	r3, #2
 80017ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f6:	2303      	movs	r3, #3
 80017f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017fc:	230c      	movs	r3, #12
 80017fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001802:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001806:	4619      	mov	r1, r3
 8001808:	4831      	ldr	r0, [pc, #196]	; (80018d0 <HAL_FMC_MspInit+0x164>)
 800180a:	f001 fc5f 	bl	80030cc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800180e:	230d      	movs	r3, #13
 8001810:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001814:	2302      	movs	r3, #2
 8001816:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001820:	2303      	movs	r3, #3
 8001822:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001826:	230c      	movs	r3, #12
 8001828:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800182c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001830:	4619      	mov	r1, r3
 8001832:	4828      	ldr	r0, [pc, #160]	; (80018d4 <HAL_FMC_MspInit+0x168>)
 8001834:	f001 fc4a 	bl	80030cc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8001838:	f248 1337 	movw	r3, #33079	; 0x8137
 800183c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001840:	2302      	movs	r3, #2
 8001842:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184c:	2303      	movs	r3, #3
 800184e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001852:	230c      	movs	r3, #12
 8001854:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001858:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800185c:	4619      	mov	r1, r3
 800185e:	481e      	ldr	r0, [pc, #120]	; (80018d8 <HAL_FMC_MspInit+0x16c>)
 8001860:	f001 fc34 	bl	80030cc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001864:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001868:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	2302      	movs	r3, #2
 800186e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001878:	2303      	movs	r3, #3
 800187a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800187e:	230c      	movs	r3, #12
 8001880:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001884:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001888:	4619      	mov	r1, r3
 800188a:	4814      	ldr	r0, [pc, #80]	; (80018dc <HAL_FMC_MspInit+0x170>)
 800188c:	f001 fc1e 	bl	80030cc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001890:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001894:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001898:	2302      	movs	r3, #2
 800189a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a4:	2303      	movs	r3, #3
 80018a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018aa:	230c      	movs	r3, #12
 80018ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018b4:	4619      	mov	r1, r3
 80018b6:	480a      	ldr	r0, [pc, #40]	; (80018e0 <HAL_FMC_MspInit+0x174>)
 80018b8:	f001 fc08 	bl	80030cc <HAL_GPIO_Init>
 80018bc:	e000      	b.n	80018c0 <HAL_FMC_MspInit+0x154>
    return;
 80018be:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80018c0:	37e0      	adds	r7, #224	; 0xe0
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	240004f8 	.word	0x240004f8
 80018cc:	58024400 	.word	0x58024400
 80018d0:	58021400 	.word	0x58021400
 80018d4:	58020800 	.word	0x58020800
 80018d8:	58021800 	.word	0x58021800
 80018dc:	58021000 	.word	0x58021000
 80018e0:	58020c00 	.word	0x58020c00

080018e4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80018ec:	f7ff ff3e 	bl	800176c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018fc:	e7fe      	b.n	80018fc <NMI_Handler+0x4>

080018fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001902:	e7fe      	b.n	8001902 <HardFault_Handler+0x4>

08001904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001908:	e7fe      	b.n	8001908 <MemManage_Handler+0x4>

0800190a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800190e:	e7fe      	b.n	800190e <BusFault_Handler+0x4>

08001910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001914:	e7fe      	b.n	8001914 <UsageFault_Handler+0x4>

08001916 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001944:	f000 fa02 	bl	8001d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}

0800194c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001950:	4802      	ldr	r0, [pc, #8]	; (800195c <TIM3_IRQHandler+0x10>)
 8001952:	f005 fbf7 	bl	8007144 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	24000350 	.word	0x24000350

08001960 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001964:	4802      	ldr	r0, [pc, #8]	; (8001970 <USART1_IRQHandler+0x10>)
 8001966:	f006 f9d9 	bl	8007d1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	2400039c 	.word	0x2400039c

08001974 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001978:	4802      	ldr	r0, [pc, #8]	; (8001984 <USART2_IRQHandler+0x10>)
 800197a:	f006 f9cf 	bl	8007d1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	24000430 	.word	0x24000430

08001988 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800198c:	4802      	ldr	r0, [pc, #8]	; (8001998 <LTDC_IRQHandler+0x10>)
 800198e:	f001 fe37 	bl	8003600 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	2400025c 	.word	0x2400025c

0800199c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80019a0:	4802      	ldr	r0, [pc, #8]	; (80019ac <DMA2D_IRQHandler+0x10>)
 80019a2:	f001 f92e 	bl	8002c02 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	240001f4 	.word	0x240001f4

080019b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return 1;
 80019b4:	2301      	movs	r3, #1
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <_kill>:

int _kill(int pid, int sig)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019ca:	f00a fac9 	bl	800bf60 <__errno>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2216      	movs	r2, #22
 80019d2:	601a      	str	r2, [r3, #0]
  return -1;
 80019d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <_exit>:

void _exit (int status)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019e8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7ff ffe7 	bl	80019c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019f2:	e7fe      	b.n	80019f2 <_exit+0x12>

080019f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
 8001a04:	e00a      	b.n	8001a1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a06:	f3af 8000 	nop.w
 8001a0a:	4601      	mov	r1, r0
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	1c5a      	adds	r2, r3, #1
 8001a10:	60ba      	str	r2, [r7, #8]
 8001a12:	b2ca      	uxtb	r2, r1
 8001a14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	dbf0      	blt.n	8001a06 <_read+0x12>
  }

  return len;
 8001a24:	687b      	ldr	r3, [r7, #4]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <_close>:
  }
  return len;
}

int _close(int file)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
 8001a4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a56:	605a      	str	r2, [r3, #4]
  return 0;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <_isatty>:

int _isatty(int file)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a6e:	2301      	movs	r3, #1
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aa0:	4a14      	ldr	r2, [pc, #80]	; (8001af4 <_sbrk+0x5c>)
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <_sbrk+0x60>)
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aac:	4b13      	ldr	r3, [pc, #76]	; (8001afc <_sbrk+0x64>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d102      	bne.n	8001aba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <_sbrk+0x64>)
 8001ab6:	4a12      	ldr	r2, [pc, #72]	; (8001b00 <_sbrk+0x68>)
 8001ab8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <_sbrk+0x64>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d207      	bcs.n	8001ad8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ac8:	f00a fa4a 	bl	800bf60 <__errno>
 8001acc:	4603      	mov	r3, r0
 8001ace:	220c      	movs	r2, #12
 8001ad0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad6:	e009      	b.n	8001aec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ad8:	4b08      	ldr	r3, [pc, #32]	; (8001afc <_sbrk+0x64>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ade:	4b07      	ldr	r3, [pc, #28]	; (8001afc <_sbrk+0x64>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	4a05      	ldr	r2, [pc, #20]	; (8001afc <_sbrk+0x64>)
 8001ae8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aea:	68fb      	ldr	r3, [r7, #12]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	24080000 	.word	0x24080000
 8001af8:	00000400 	.word	0x00000400
 8001afc:	240004fc 	.word	0x240004fc
 8001b00:	24000680 	.word	0x24000680

08001b04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b08:	4b37      	ldr	r3, [pc, #220]	; (8001be8 <SystemInit+0xe4>)
 8001b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b0e:	4a36      	ldr	r2, [pc, #216]	; (8001be8 <SystemInit+0xe4>)
 8001b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b18:	4b34      	ldr	r3, [pc, #208]	; (8001bec <SystemInit+0xe8>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 030f 	and.w	r3, r3, #15
 8001b20:	2b06      	cmp	r3, #6
 8001b22:	d807      	bhi.n	8001b34 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b24:	4b31      	ldr	r3, [pc, #196]	; (8001bec <SystemInit+0xe8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f023 030f 	bic.w	r3, r3, #15
 8001b2c:	4a2f      	ldr	r2, [pc, #188]	; (8001bec <SystemInit+0xe8>)
 8001b2e:	f043 0307 	orr.w	r3, r3, #7
 8001b32:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b34:	4b2e      	ldr	r3, [pc, #184]	; (8001bf0 <SystemInit+0xec>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a2d      	ldr	r2, [pc, #180]	; (8001bf0 <SystemInit+0xec>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b40:	4b2b      	ldr	r3, [pc, #172]	; (8001bf0 <SystemInit+0xec>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b46:	4b2a      	ldr	r3, [pc, #168]	; (8001bf0 <SystemInit+0xec>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	4929      	ldr	r1, [pc, #164]	; (8001bf0 <SystemInit+0xec>)
 8001b4c:	4b29      	ldr	r3, [pc, #164]	; (8001bf4 <SystemInit+0xf0>)
 8001b4e:	4013      	ands	r3, r2
 8001b50:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b52:	4b26      	ldr	r3, [pc, #152]	; (8001bec <SystemInit+0xe8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d007      	beq.n	8001b6e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b5e:	4b23      	ldr	r3, [pc, #140]	; (8001bec <SystemInit+0xe8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f023 030f 	bic.w	r3, r3, #15
 8001b66:	4a21      	ldr	r2, [pc, #132]	; (8001bec <SystemInit+0xe8>)
 8001b68:	f043 0307 	orr.w	r3, r3, #7
 8001b6c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001b6e:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <SystemInit+0xec>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001b74:	4b1e      	ldr	r3, [pc, #120]	; (8001bf0 <SystemInit+0xec>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001b7a:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <SystemInit+0xec>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001b80:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <SystemInit+0xec>)
 8001b82:	4a1d      	ldr	r2, [pc, #116]	; (8001bf8 <SystemInit+0xf4>)
 8001b84:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001b86:	4b1a      	ldr	r3, [pc, #104]	; (8001bf0 <SystemInit+0xec>)
 8001b88:	4a1c      	ldr	r2, [pc, #112]	; (8001bfc <SystemInit+0xf8>)
 8001b8a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001b8c:	4b18      	ldr	r3, [pc, #96]	; (8001bf0 <SystemInit+0xec>)
 8001b8e:	4a1c      	ldr	r2, [pc, #112]	; (8001c00 <SystemInit+0xfc>)
 8001b90:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001b92:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <SystemInit+0xec>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001b98:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <SystemInit+0xec>)
 8001b9a:	4a19      	ldr	r2, [pc, #100]	; (8001c00 <SystemInit+0xfc>)
 8001b9c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001b9e:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <SystemInit+0xec>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <SystemInit+0xec>)
 8001ba6:	4a16      	ldr	r2, [pc, #88]	; (8001c00 <SystemInit+0xfc>)
 8001ba8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001baa:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <SystemInit+0xec>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <SystemInit+0xec>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0e      	ldr	r2, [pc, #56]	; (8001bf0 <SystemInit+0xec>)
 8001bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <SystemInit+0xec>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001bc2:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <SystemInit+0x100>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <SystemInit+0x104>)
 8001bc8:	4013      	ands	r3, r2
 8001bca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bce:	d202      	bcs.n	8001bd6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001bd0:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <SystemInit+0x108>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <SystemInit+0x10c>)
 8001bd8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001bdc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001bde:	bf00      	nop
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	e000ed00 	.word	0xe000ed00
 8001bec:	52002000 	.word	0x52002000
 8001bf0:	58024400 	.word	0x58024400
 8001bf4:	eaf6ed7f 	.word	0xeaf6ed7f
 8001bf8:	02020200 	.word	0x02020200
 8001bfc:	01ff0000 	.word	0x01ff0000
 8001c00:	01010280 	.word	0x01010280
 8001c04:	5c001000 	.word	0x5c001000
 8001c08:	ffff0000 	.word	0xffff0000
 8001c0c:	51008108 	.word	0x51008108
 8001c10:	52004000 	.word	0x52004000

08001c14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001c14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c18:	f7ff ff74 	bl	8001b04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c1c:	480c      	ldr	r0, [pc, #48]	; (8001c50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c1e:	490d      	ldr	r1, [pc, #52]	; (8001c54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c20:	4a0d      	ldr	r2, [pc, #52]	; (8001c58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c24:	e002      	b.n	8001c2c <LoopCopyDataInit>

08001c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c2a:	3304      	adds	r3, #4

08001c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c30:	d3f9      	bcc.n	8001c26 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c32:	4a0a      	ldr	r2, [pc, #40]	; (8001c5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c34:	4c0a      	ldr	r4, [pc, #40]	; (8001c60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c38:	e001      	b.n	8001c3e <LoopFillZerobss>

08001c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c3c:	3204      	adds	r2, #4

08001c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c40:	d3fb      	bcc.n	8001c3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c42:	f00a f993 	bl	800bf6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c46:	f7fe ff15 	bl	8000a74 <main>
  bx  lr
 8001c4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c4c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001c50:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c54:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001c58:	0800f8f8 	.word	0x0800f8f8
  ldr r2, =_sbss
 8001c5c:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8001c60:	24000680 	.word	0x24000680

08001c64 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c64:	e7fe      	b.n	8001c64 <ADC3_IRQHandler>
	...

08001c68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c6e:	2003      	movs	r0, #3
 8001c70:	f000 f98c 	bl	8001f8c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c74:	f003 f974 	bl	8004f60 <HAL_RCC_GetSysClockFreq>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <HAL_Init+0x68>)
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	0a1b      	lsrs	r3, r3, #8
 8001c80:	f003 030f 	and.w	r3, r3, #15
 8001c84:	4913      	ldr	r1, [pc, #76]	; (8001cd4 <HAL_Init+0x6c>)
 8001c86:	5ccb      	ldrb	r3, [r1, r3]
 8001c88:	f003 031f 	and.w	r3, r3, #31
 8001c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c90:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c92:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <HAL_Init+0x68>)
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	4a0e      	ldr	r2, [pc, #56]	; (8001cd4 <HAL_Init+0x6c>)
 8001c9c:	5cd3      	ldrb	r3, [r2, r3]
 8001c9e:	f003 031f 	and.w	r3, r3, #31
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca8:	4a0b      	ldr	r2, [pc, #44]	; (8001cd8 <HAL_Init+0x70>)
 8001caa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001cac:	4a0b      	ldr	r2, [pc, #44]	; (8001cdc <HAL_Init+0x74>)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cb2:	200f      	movs	r0, #15
 8001cb4:	f000 f814 	bl	8001ce0 <HAL_InitTick>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e002      	b.n	8001cc8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001cc2:	f7ff fa71 	bl	80011a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	58024400 	.word	0x58024400
 8001cd4:	0800f488 	.word	0x0800f488
 8001cd8:	24000004 	.word	0x24000004
 8001cdc:	24000000 	.word	0x24000000

08001ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001ce8:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <HAL_InitTick+0x60>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e021      	b.n	8001d38 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001cf4:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <HAL_InitTick+0x64>)
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <HAL_InitTick+0x60>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 f971 	bl	8001ff2 <HAL_SYSTICK_Config>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e00e      	b.n	8001d38 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b0f      	cmp	r3, #15
 8001d1e:	d80a      	bhi.n	8001d36 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d20:	2200      	movs	r2, #0
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	f04f 30ff 	mov.w	r0, #4294967295
 8001d28:	f000 f93b 	bl	8001fa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d2c:	4a06      	ldr	r2, [pc, #24]	; (8001d48 <HAL_InitTick+0x68>)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
 8001d34:	e000      	b.n	8001d38 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	2400000c 	.word	0x2400000c
 8001d44:	24000000 	.word	0x24000000
 8001d48:	24000008 	.word	0x24000008

08001d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_IncTick+0x20>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	461a      	mov	r2, r3
 8001d56:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <HAL_IncTick+0x24>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <HAL_IncTick+0x24>)
 8001d5e:	6013      	str	r3, [r2, #0]
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	2400000c 	.word	0x2400000c
 8001d70:	24000500 	.word	0x24000500

08001d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return uwTick;
 8001d78:	4b03      	ldr	r3, [pc, #12]	; (8001d88 <HAL_GetTick+0x14>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	24000500 	.word	0x24000500

08001d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d94:	f7ff ffee 	bl	8001d74 <HAL_GetTick>
 8001d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da4:	d005      	beq.n	8001db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001da6:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <HAL_Delay+0x44>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4413      	add	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001db2:	bf00      	nop
 8001db4:	f7ff ffde 	bl	8001d74 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d8f7      	bhi.n	8001db4 <HAL_Delay+0x28>
  {
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	2400000c 	.word	0x2400000c

08001dd4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001dd8:	4b03      	ldr	r3, [pc, #12]	; (8001de8 <HAL_GetREVID+0x14>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	0c1b      	lsrs	r3, r3, #16
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	5c001000 	.word	0x5c001000

08001dec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <__NVIC_SetPriorityGrouping+0x40>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e08:	4013      	ands	r3, r2
 8001e0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <__NVIC_SetPriorityGrouping+0x44>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e1a:	4a04      	ldr	r2, [pc, #16]	; (8001e2c <__NVIC_SetPriorityGrouping+0x40>)
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	60d3      	str	r3, [r2, #12]
}
 8001e20:	bf00      	nop
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000ed00 	.word	0xe000ed00
 8001e30:	05fa0000 	.word	0x05fa0000

08001e34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e38:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <__NVIC_GetPriorityGrouping+0x18>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	0a1b      	lsrs	r3, r3, #8
 8001e3e:	f003 0307 	and.w	r3, r3, #7
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	db0b      	blt.n	8001e7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e62:	88fb      	ldrh	r3, [r7, #6]
 8001e64:	f003 021f 	and.w	r2, r3, #31
 8001e68:	4907      	ldr	r1, [pc, #28]	; (8001e88 <__NVIC_EnableIRQ+0x38>)
 8001e6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e6e:	095b      	lsrs	r3, r3, #5
 8001e70:	2001      	movs	r0, #1
 8001e72:	fa00 f202 	lsl.w	r2, r0, r2
 8001e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	e000e100 	.word	0xe000e100

08001e8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	6039      	str	r1, [r7, #0]
 8001e96:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	db0a      	blt.n	8001eb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	490c      	ldr	r1, [pc, #48]	; (8001ed8 <__NVIC_SetPriority+0x4c>)
 8001ea6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eaa:	0112      	lsls	r2, r2, #4
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	440b      	add	r3, r1
 8001eb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eb4:	e00a      	b.n	8001ecc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	4908      	ldr	r1, [pc, #32]	; (8001edc <__NVIC_SetPriority+0x50>)
 8001ebc:	88fb      	ldrh	r3, [r7, #6]
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	3b04      	subs	r3, #4
 8001ec4:	0112      	lsls	r2, r2, #4
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	440b      	add	r3, r1
 8001eca:	761a      	strb	r2, [r3, #24]
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000e100 	.word	0xe000e100
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b089      	sub	sp, #36	; 0x24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f1c3 0307 	rsb	r3, r3, #7
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	bf28      	it	cs
 8001efe:	2304      	movcs	r3, #4
 8001f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	3304      	adds	r3, #4
 8001f06:	2b06      	cmp	r3, #6
 8001f08:	d902      	bls.n	8001f10 <NVIC_EncodePriority+0x30>
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3b03      	subs	r3, #3
 8001f0e:	e000      	b.n	8001f12 <NVIC_EncodePriority+0x32>
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f14:	f04f 32ff 	mov.w	r2, #4294967295
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43da      	mvns	r2, r3
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	401a      	ands	r2, r3
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f28:	f04f 31ff 	mov.w	r1, #4294967295
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f32:	43d9      	mvns	r1, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f38:	4313      	orrs	r3, r2
         );
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3724      	adds	r7, #36	; 0x24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f58:	d301      	bcc.n	8001f5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e00f      	b.n	8001f7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f5e:	4a0a      	ldr	r2, [pc, #40]	; (8001f88 <SysTick_Config+0x40>)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f66:	210f      	movs	r1, #15
 8001f68:	f04f 30ff 	mov.w	r0, #4294967295
 8001f6c:	f7ff ff8e 	bl	8001e8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f70:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <SysTick_Config+0x40>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f76:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <SysTick_Config+0x40>)
 8001f78:	2207      	movs	r2, #7
 8001f7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	e000e010 	.word	0xe000e010

08001f8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7ff ff29 	bl	8001dec <__NVIC_SetPriorityGrouping>
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b086      	sub	sp, #24
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	4603      	mov	r3, r0
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	607a      	str	r2, [r7, #4]
 8001fae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb0:	f7ff ff40 	bl	8001e34 <__NVIC_GetPriorityGrouping>
 8001fb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	68b9      	ldr	r1, [r7, #8]
 8001fba:	6978      	ldr	r0, [r7, #20]
 8001fbc:	f7ff ff90 	bl	8001ee0 <NVIC_EncodePriority>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ff5f 	bl	8001e8c <__NVIC_SetPriority>
}
 8001fce:	bf00      	nop
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	4603      	mov	r3, r0
 8001fde:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fe0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff ff33 	bl	8001e50 <__NVIC_EnableIRQ>
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff ffa4 	bl	8001f48 <SysTick_Config>
 8002000:	4603      	mov	r3, r0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002014:	f7ff feae 	bl	8001d74 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e2dc      	b.n	80025de <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d008      	beq.n	8002042 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2280      	movs	r2, #128	; 0x80
 8002034:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e2cd      	b.n	80025de <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a76      	ldr	r2, [pc, #472]	; (8002220 <HAL_DMA_Abort+0x214>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d04a      	beq.n	80020e2 <HAL_DMA_Abort+0xd6>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a74      	ldr	r2, [pc, #464]	; (8002224 <HAL_DMA_Abort+0x218>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d045      	beq.n	80020e2 <HAL_DMA_Abort+0xd6>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a73      	ldr	r2, [pc, #460]	; (8002228 <HAL_DMA_Abort+0x21c>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d040      	beq.n	80020e2 <HAL_DMA_Abort+0xd6>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a71      	ldr	r2, [pc, #452]	; (800222c <HAL_DMA_Abort+0x220>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d03b      	beq.n	80020e2 <HAL_DMA_Abort+0xd6>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a70      	ldr	r2, [pc, #448]	; (8002230 <HAL_DMA_Abort+0x224>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d036      	beq.n	80020e2 <HAL_DMA_Abort+0xd6>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a6e      	ldr	r2, [pc, #440]	; (8002234 <HAL_DMA_Abort+0x228>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d031      	beq.n	80020e2 <HAL_DMA_Abort+0xd6>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a6d      	ldr	r2, [pc, #436]	; (8002238 <HAL_DMA_Abort+0x22c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d02c      	beq.n	80020e2 <HAL_DMA_Abort+0xd6>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a6b      	ldr	r2, [pc, #428]	; (800223c <HAL_DMA_Abort+0x230>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d027      	beq.n	80020e2 <HAL_DMA_Abort+0xd6>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a6a      	ldr	r2, [pc, #424]	; (8002240 <HAL_DMA_Abort+0x234>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d022      	beq.n	80020e2 <HAL_DMA_Abort+0xd6>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a68      	ldr	r2, [pc, #416]	; (8002244 <HAL_DMA_Abort+0x238>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d01d      	beq.n	80020e2 <HAL_DMA_Abort+0xd6>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a67      	ldr	r2, [pc, #412]	; (8002248 <HAL_DMA_Abort+0x23c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d018      	beq.n	80020e2 <HAL_DMA_Abort+0xd6>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a65      	ldr	r2, [pc, #404]	; (800224c <HAL_DMA_Abort+0x240>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d013      	beq.n	80020e2 <HAL_DMA_Abort+0xd6>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a64      	ldr	r2, [pc, #400]	; (8002250 <HAL_DMA_Abort+0x244>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d00e      	beq.n	80020e2 <HAL_DMA_Abort+0xd6>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a62      	ldr	r2, [pc, #392]	; (8002254 <HAL_DMA_Abort+0x248>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d009      	beq.n	80020e2 <HAL_DMA_Abort+0xd6>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a61      	ldr	r2, [pc, #388]	; (8002258 <HAL_DMA_Abort+0x24c>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d004      	beq.n	80020e2 <HAL_DMA_Abort+0xd6>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a5f      	ldr	r2, [pc, #380]	; (800225c <HAL_DMA_Abort+0x250>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d101      	bne.n	80020e6 <HAL_DMA_Abort+0xda>
 80020e2:	2301      	movs	r3, #1
 80020e4:	e000      	b.n	80020e8 <HAL_DMA_Abort+0xdc>
 80020e6:	2300      	movs	r3, #0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d013      	beq.n	8002114 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 021e 	bic.w	r2, r2, #30
 80020fa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	695a      	ldr	r2, [r3, #20]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800210a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	617b      	str	r3, [r7, #20]
 8002112:	e00a      	b.n	800212a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 020e 	bic.w	r2, r2, #14
 8002122:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a3c      	ldr	r2, [pc, #240]	; (8002220 <HAL_DMA_Abort+0x214>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d072      	beq.n	800221a <HAL_DMA_Abort+0x20e>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a3a      	ldr	r2, [pc, #232]	; (8002224 <HAL_DMA_Abort+0x218>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d06d      	beq.n	800221a <HAL_DMA_Abort+0x20e>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a39      	ldr	r2, [pc, #228]	; (8002228 <HAL_DMA_Abort+0x21c>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d068      	beq.n	800221a <HAL_DMA_Abort+0x20e>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a37      	ldr	r2, [pc, #220]	; (800222c <HAL_DMA_Abort+0x220>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d063      	beq.n	800221a <HAL_DMA_Abort+0x20e>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a36      	ldr	r2, [pc, #216]	; (8002230 <HAL_DMA_Abort+0x224>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d05e      	beq.n	800221a <HAL_DMA_Abort+0x20e>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a34      	ldr	r2, [pc, #208]	; (8002234 <HAL_DMA_Abort+0x228>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d059      	beq.n	800221a <HAL_DMA_Abort+0x20e>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a33      	ldr	r2, [pc, #204]	; (8002238 <HAL_DMA_Abort+0x22c>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d054      	beq.n	800221a <HAL_DMA_Abort+0x20e>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a31      	ldr	r2, [pc, #196]	; (800223c <HAL_DMA_Abort+0x230>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d04f      	beq.n	800221a <HAL_DMA_Abort+0x20e>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a30      	ldr	r2, [pc, #192]	; (8002240 <HAL_DMA_Abort+0x234>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d04a      	beq.n	800221a <HAL_DMA_Abort+0x20e>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a2e      	ldr	r2, [pc, #184]	; (8002244 <HAL_DMA_Abort+0x238>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d045      	beq.n	800221a <HAL_DMA_Abort+0x20e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a2d      	ldr	r2, [pc, #180]	; (8002248 <HAL_DMA_Abort+0x23c>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d040      	beq.n	800221a <HAL_DMA_Abort+0x20e>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a2b      	ldr	r2, [pc, #172]	; (800224c <HAL_DMA_Abort+0x240>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d03b      	beq.n	800221a <HAL_DMA_Abort+0x20e>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a2a      	ldr	r2, [pc, #168]	; (8002250 <HAL_DMA_Abort+0x244>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d036      	beq.n	800221a <HAL_DMA_Abort+0x20e>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a28      	ldr	r2, [pc, #160]	; (8002254 <HAL_DMA_Abort+0x248>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d031      	beq.n	800221a <HAL_DMA_Abort+0x20e>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a27      	ldr	r2, [pc, #156]	; (8002258 <HAL_DMA_Abort+0x24c>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d02c      	beq.n	800221a <HAL_DMA_Abort+0x20e>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a25      	ldr	r2, [pc, #148]	; (800225c <HAL_DMA_Abort+0x250>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d027      	beq.n	800221a <HAL_DMA_Abort+0x20e>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a24      	ldr	r2, [pc, #144]	; (8002260 <HAL_DMA_Abort+0x254>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d022      	beq.n	800221a <HAL_DMA_Abort+0x20e>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a22      	ldr	r2, [pc, #136]	; (8002264 <HAL_DMA_Abort+0x258>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d01d      	beq.n	800221a <HAL_DMA_Abort+0x20e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a21      	ldr	r2, [pc, #132]	; (8002268 <HAL_DMA_Abort+0x25c>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d018      	beq.n	800221a <HAL_DMA_Abort+0x20e>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a1f      	ldr	r2, [pc, #124]	; (800226c <HAL_DMA_Abort+0x260>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d013      	beq.n	800221a <HAL_DMA_Abort+0x20e>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a1e      	ldr	r2, [pc, #120]	; (8002270 <HAL_DMA_Abort+0x264>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d00e      	beq.n	800221a <HAL_DMA_Abort+0x20e>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a1c      	ldr	r2, [pc, #112]	; (8002274 <HAL_DMA_Abort+0x268>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d009      	beq.n	800221a <HAL_DMA_Abort+0x20e>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a1b      	ldr	r2, [pc, #108]	; (8002278 <HAL_DMA_Abort+0x26c>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d004      	beq.n	800221a <HAL_DMA_Abort+0x20e>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a19      	ldr	r2, [pc, #100]	; (800227c <HAL_DMA_Abort+0x270>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d132      	bne.n	8002280 <HAL_DMA_Abort+0x274>
 800221a:	2301      	movs	r3, #1
 800221c:	e031      	b.n	8002282 <HAL_DMA_Abort+0x276>
 800221e:	bf00      	nop
 8002220:	40020010 	.word	0x40020010
 8002224:	40020028 	.word	0x40020028
 8002228:	40020040 	.word	0x40020040
 800222c:	40020058 	.word	0x40020058
 8002230:	40020070 	.word	0x40020070
 8002234:	40020088 	.word	0x40020088
 8002238:	400200a0 	.word	0x400200a0
 800223c:	400200b8 	.word	0x400200b8
 8002240:	40020410 	.word	0x40020410
 8002244:	40020428 	.word	0x40020428
 8002248:	40020440 	.word	0x40020440
 800224c:	40020458 	.word	0x40020458
 8002250:	40020470 	.word	0x40020470
 8002254:	40020488 	.word	0x40020488
 8002258:	400204a0 	.word	0x400204a0
 800225c:	400204b8 	.word	0x400204b8
 8002260:	58025408 	.word	0x58025408
 8002264:	5802541c 	.word	0x5802541c
 8002268:	58025430 	.word	0x58025430
 800226c:	58025444 	.word	0x58025444
 8002270:	58025458 	.word	0x58025458
 8002274:	5802546c 	.word	0x5802546c
 8002278:	58025480 	.word	0x58025480
 800227c:	58025494 	.word	0x58025494
 8002280:	2300      	movs	r3, #0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d007      	beq.n	8002296 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002290:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002294:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a6d      	ldr	r2, [pc, #436]	; (8002450 <HAL_DMA_Abort+0x444>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d04a      	beq.n	8002336 <HAL_DMA_Abort+0x32a>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a6b      	ldr	r2, [pc, #428]	; (8002454 <HAL_DMA_Abort+0x448>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d045      	beq.n	8002336 <HAL_DMA_Abort+0x32a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a6a      	ldr	r2, [pc, #424]	; (8002458 <HAL_DMA_Abort+0x44c>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d040      	beq.n	8002336 <HAL_DMA_Abort+0x32a>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a68      	ldr	r2, [pc, #416]	; (800245c <HAL_DMA_Abort+0x450>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d03b      	beq.n	8002336 <HAL_DMA_Abort+0x32a>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a67      	ldr	r2, [pc, #412]	; (8002460 <HAL_DMA_Abort+0x454>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d036      	beq.n	8002336 <HAL_DMA_Abort+0x32a>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a65      	ldr	r2, [pc, #404]	; (8002464 <HAL_DMA_Abort+0x458>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d031      	beq.n	8002336 <HAL_DMA_Abort+0x32a>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a64      	ldr	r2, [pc, #400]	; (8002468 <HAL_DMA_Abort+0x45c>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d02c      	beq.n	8002336 <HAL_DMA_Abort+0x32a>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a62      	ldr	r2, [pc, #392]	; (800246c <HAL_DMA_Abort+0x460>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d027      	beq.n	8002336 <HAL_DMA_Abort+0x32a>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a61      	ldr	r2, [pc, #388]	; (8002470 <HAL_DMA_Abort+0x464>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d022      	beq.n	8002336 <HAL_DMA_Abort+0x32a>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a5f      	ldr	r2, [pc, #380]	; (8002474 <HAL_DMA_Abort+0x468>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d01d      	beq.n	8002336 <HAL_DMA_Abort+0x32a>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a5e      	ldr	r2, [pc, #376]	; (8002478 <HAL_DMA_Abort+0x46c>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d018      	beq.n	8002336 <HAL_DMA_Abort+0x32a>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a5c      	ldr	r2, [pc, #368]	; (800247c <HAL_DMA_Abort+0x470>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d013      	beq.n	8002336 <HAL_DMA_Abort+0x32a>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a5b      	ldr	r2, [pc, #364]	; (8002480 <HAL_DMA_Abort+0x474>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d00e      	beq.n	8002336 <HAL_DMA_Abort+0x32a>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a59      	ldr	r2, [pc, #356]	; (8002484 <HAL_DMA_Abort+0x478>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d009      	beq.n	8002336 <HAL_DMA_Abort+0x32a>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a58      	ldr	r2, [pc, #352]	; (8002488 <HAL_DMA_Abort+0x47c>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d004      	beq.n	8002336 <HAL_DMA_Abort+0x32a>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a56      	ldr	r2, [pc, #344]	; (800248c <HAL_DMA_Abort+0x480>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d108      	bne.n	8002348 <HAL_DMA_Abort+0x33c>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0201 	bic.w	r2, r2, #1
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	e007      	b.n	8002358 <HAL_DMA_Abort+0x34c>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 0201 	bic.w	r2, r2, #1
 8002356:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002358:	e013      	b.n	8002382 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800235a:	f7ff fd0b 	bl	8001d74 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b05      	cmp	r3, #5
 8002366:	d90c      	bls.n	8002382 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2220      	movs	r2, #32
 800236c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2203      	movs	r2, #3
 8002372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e12d      	b.n	80025de <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1e5      	bne.n	800235a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a2f      	ldr	r2, [pc, #188]	; (8002450 <HAL_DMA_Abort+0x444>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d04a      	beq.n	800242e <HAL_DMA_Abort+0x422>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a2d      	ldr	r2, [pc, #180]	; (8002454 <HAL_DMA_Abort+0x448>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d045      	beq.n	800242e <HAL_DMA_Abort+0x422>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a2c      	ldr	r2, [pc, #176]	; (8002458 <HAL_DMA_Abort+0x44c>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d040      	beq.n	800242e <HAL_DMA_Abort+0x422>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a2a      	ldr	r2, [pc, #168]	; (800245c <HAL_DMA_Abort+0x450>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d03b      	beq.n	800242e <HAL_DMA_Abort+0x422>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a29      	ldr	r2, [pc, #164]	; (8002460 <HAL_DMA_Abort+0x454>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d036      	beq.n	800242e <HAL_DMA_Abort+0x422>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a27      	ldr	r2, [pc, #156]	; (8002464 <HAL_DMA_Abort+0x458>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d031      	beq.n	800242e <HAL_DMA_Abort+0x422>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a26      	ldr	r2, [pc, #152]	; (8002468 <HAL_DMA_Abort+0x45c>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d02c      	beq.n	800242e <HAL_DMA_Abort+0x422>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a24      	ldr	r2, [pc, #144]	; (800246c <HAL_DMA_Abort+0x460>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d027      	beq.n	800242e <HAL_DMA_Abort+0x422>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a23      	ldr	r2, [pc, #140]	; (8002470 <HAL_DMA_Abort+0x464>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d022      	beq.n	800242e <HAL_DMA_Abort+0x422>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a21      	ldr	r2, [pc, #132]	; (8002474 <HAL_DMA_Abort+0x468>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d01d      	beq.n	800242e <HAL_DMA_Abort+0x422>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a20      	ldr	r2, [pc, #128]	; (8002478 <HAL_DMA_Abort+0x46c>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d018      	beq.n	800242e <HAL_DMA_Abort+0x422>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a1e      	ldr	r2, [pc, #120]	; (800247c <HAL_DMA_Abort+0x470>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d013      	beq.n	800242e <HAL_DMA_Abort+0x422>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a1d      	ldr	r2, [pc, #116]	; (8002480 <HAL_DMA_Abort+0x474>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d00e      	beq.n	800242e <HAL_DMA_Abort+0x422>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a1b      	ldr	r2, [pc, #108]	; (8002484 <HAL_DMA_Abort+0x478>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d009      	beq.n	800242e <HAL_DMA_Abort+0x422>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a1a      	ldr	r2, [pc, #104]	; (8002488 <HAL_DMA_Abort+0x47c>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d004      	beq.n	800242e <HAL_DMA_Abort+0x422>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a18      	ldr	r2, [pc, #96]	; (800248c <HAL_DMA_Abort+0x480>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d101      	bne.n	8002432 <HAL_DMA_Abort+0x426>
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <HAL_DMA_Abort+0x428>
 8002432:	2300      	movs	r3, #0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d02b      	beq.n	8002490 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002442:	f003 031f 	and.w	r3, r3, #31
 8002446:	223f      	movs	r2, #63	; 0x3f
 8002448:	409a      	lsls	r2, r3
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	609a      	str	r2, [r3, #8]
 800244e:	e02a      	b.n	80024a6 <HAL_DMA_Abort+0x49a>
 8002450:	40020010 	.word	0x40020010
 8002454:	40020028 	.word	0x40020028
 8002458:	40020040 	.word	0x40020040
 800245c:	40020058 	.word	0x40020058
 8002460:	40020070 	.word	0x40020070
 8002464:	40020088 	.word	0x40020088
 8002468:	400200a0 	.word	0x400200a0
 800246c:	400200b8 	.word	0x400200b8
 8002470:	40020410 	.word	0x40020410
 8002474:	40020428 	.word	0x40020428
 8002478:	40020440 	.word	0x40020440
 800247c:	40020458 	.word	0x40020458
 8002480:	40020470 	.word	0x40020470
 8002484:	40020488 	.word	0x40020488
 8002488:	400204a0 	.word	0x400204a0
 800248c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002494:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249a:	f003 031f 	and.w	r3, r3, #31
 800249e:	2201      	movs	r2, #1
 80024a0:	409a      	lsls	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a4f      	ldr	r2, [pc, #316]	; (80025e8 <HAL_DMA_Abort+0x5dc>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d072      	beq.n	8002596 <HAL_DMA_Abort+0x58a>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a4d      	ldr	r2, [pc, #308]	; (80025ec <HAL_DMA_Abort+0x5e0>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d06d      	beq.n	8002596 <HAL_DMA_Abort+0x58a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a4c      	ldr	r2, [pc, #304]	; (80025f0 <HAL_DMA_Abort+0x5e4>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d068      	beq.n	8002596 <HAL_DMA_Abort+0x58a>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a4a      	ldr	r2, [pc, #296]	; (80025f4 <HAL_DMA_Abort+0x5e8>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d063      	beq.n	8002596 <HAL_DMA_Abort+0x58a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a49      	ldr	r2, [pc, #292]	; (80025f8 <HAL_DMA_Abort+0x5ec>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d05e      	beq.n	8002596 <HAL_DMA_Abort+0x58a>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a47      	ldr	r2, [pc, #284]	; (80025fc <HAL_DMA_Abort+0x5f0>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d059      	beq.n	8002596 <HAL_DMA_Abort+0x58a>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a46      	ldr	r2, [pc, #280]	; (8002600 <HAL_DMA_Abort+0x5f4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d054      	beq.n	8002596 <HAL_DMA_Abort+0x58a>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a44      	ldr	r2, [pc, #272]	; (8002604 <HAL_DMA_Abort+0x5f8>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d04f      	beq.n	8002596 <HAL_DMA_Abort+0x58a>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a43      	ldr	r2, [pc, #268]	; (8002608 <HAL_DMA_Abort+0x5fc>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d04a      	beq.n	8002596 <HAL_DMA_Abort+0x58a>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a41      	ldr	r2, [pc, #260]	; (800260c <HAL_DMA_Abort+0x600>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d045      	beq.n	8002596 <HAL_DMA_Abort+0x58a>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a40      	ldr	r2, [pc, #256]	; (8002610 <HAL_DMA_Abort+0x604>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d040      	beq.n	8002596 <HAL_DMA_Abort+0x58a>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a3e      	ldr	r2, [pc, #248]	; (8002614 <HAL_DMA_Abort+0x608>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d03b      	beq.n	8002596 <HAL_DMA_Abort+0x58a>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a3d      	ldr	r2, [pc, #244]	; (8002618 <HAL_DMA_Abort+0x60c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d036      	beq.n	8002596 <HAL_DMA_Abort+0x58a>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a3b      	ldr	r2, [pc, #236]	; (800261c <HAL_DMA_Abort+0x610>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d031      	beq.n	8002596 <HAL_DMA_Abort+0x58a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a3a      	ldr	r2, [pc, #232]	; (8002620 <HAL_DMA_Abort+0x614>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d02c      	beq.n	8002596 <HAL_DMA_Abort+0x58a>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a38      	ldr	r2, [pc, #224]	; (8002624 <HAL_DMA_Abort+0x618>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d027      	beq.n	8002596 <HAL_DMA_Abort+0x58a>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a37      	ldr	r2, [pc, #220]	; (8002628 <HAL_DMA_Abort+0x61c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d022      	beq.n	8002596 <HAL_DMA_Abort+0x58a>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a35      	ldr	r2, [pc, #212]	; (800262c <HAL_DMA_Abort+0x620>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d01d      	beq.n	8002596 <HAL_DMA_Abort+0x58a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a34      	ldr	r2, [pc, #208]	; (8002630 <HAL_DMA_Abort+0x624>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d018      	beq.n	8002596 <HAL_DMA_Abort+0x58a>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a32      	ldr	r2, [pc, #200]	; (8002634 <HAL_DMA_Abort+0x628>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d013      	beq.n	8002596 <HAL_DMA_Abort+0x58a>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a31      	ldr	r2, [pc, #196]	; (8002638 <HAL_DMA_Abort+0x62c>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d00e      	beq.n	8002596 <HAL_DMA_Abort+0x58a>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a2f      	ldr	r2, [pc, #188]	; (800263c <HAL_DMA_Abort+0x630>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d009      	beq.n	8002596 <HAL_DMA_Abort+0x58a>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a2e      	ldr	r2, [pc, #184]	; (8002640 <HAL_DMA_Abort+0x634>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d004      	beq.n	8002596 <HAL_DMA_Abort+0x58a>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a2c      	ldr	r2, [pc, #176]	; (8002644 <HAL_DMA_Abort+0x638>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d101      	bne.n	800259a <HAL_DMA_Abort+0x58e>
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <HAL_DMA_Abort+0x590>
 800259a:	2300      	movs	r3, #0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d015      	beq.n	80025cc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80025a8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00c      	beq.n	80025cc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025c0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80025ca:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40020010 	.word	0x40020010
 80025ec:	40020028 	.word	0x40020028
 80025f0:	40020040 	.word	0x40020040
 80025f4:	40020058 	.word	0x40020058
 80025f8:	40020070 	.word	0x40020070
 80025fc:	40020088 	.word	0x40020088
 8002600:	400200a0 	.word	0x400200a0
 8002604:	400200b8 	.word	0x400200b8
 8002608:	40020410 	.word	0x40020410
 800260c:	40020428 	.word	0x40020428
 8002610:	40020440 	.word	0x40020440
 8002614:	40020458 	.word	0x40020458
 8002618:	40020470 	.word	0x40020470
 800261c:	40020488 	.word	0x40020488
 8002620:	400204a0 	.word	0x400204a0
 8002624:	400204b8 	.word	0x400204b8
 8002628:	58025408 	.word	0x58025408
 800262c:	5802541c 	.word	0x5802541c
 8002630:	58025430 	.word	0x58025430
 8002634:	58025444 	.word	0x58025444
 8002638:	58025458 	.word	0x58025458
 800263c:	5802546c 	.word	0x5802546c
 8002640:	58025480 	.word	0x58025480
 8002644:	58025494 	.word	0x58025494

08002648 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e237      	b.n	8002aca <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d004      	beq.n	8002670 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2280      	movs	r2, #128	; 0x80
 800266a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e22c      	b.n	8002aca <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a5c      	ldr	r2, [pc, #368]	; (80027e8 <HAL_DMA_Abort_IT+0x1a0>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d04a      	beq.n	8002710 <HAL_DMA_Abort_IT+0xc8>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a5b      	ldr	r2, [pc, #364]	; (80027ec <HAL_DMA_Abort_IT+0x1a4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d045      	beq.n	8002710 <HAL_DMA_Abort_IT+0xc8>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a59      	ldr	r2, [pc, #356]	; (80027f0 <HAL_DMA_Abort_IT+0x1a8>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d040      	beq.n	8002710 <HAL_DMA_Abort_IT+0xc8>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a58      	ldr	r2, [pc, #352]	; (80027f4 <HAL_DMA_Abort_IT+0x1ac>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d03b      	beq.n	8002710 <HAL_DMA_Abort_IT+0xc8>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a56      	ldr	r2, [pc, #344]	; (80027f8 <HAL_DMA_Abort_IT+0x1b0>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d036      	beq.n	8002710 <HAL_DMA_Abort_IT+0xc8>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a55      	ldr	r2, [pc, #340]	; (80027fc <HAL_DMA_Abort_IT+0x1b4>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d031      	beq.n	8002710 <HAL_DMA_Abort_IT+0xc8>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a53      	ldr	r2, [pc, #332]	; (8002800 <HAL_DMA_Abort_IT+0x1b8>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d02c      	beq.n	8002710 <HAL_DMA_Abort_IT+0xc8>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a52      	ldr	r2, [pc, #328]	; (8002804 <HAL_DMA_Abort_IT+0x1bc>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d027      	beq.n	8002710 <HAL_DMA_Abort_IT+0xc8>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a50      	ldr	r2, [pc, #320]	; (8002808 <HAL_DMA_Abort_IT+0x1c0>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d022      	beq.n	8002710 <HAL_DMA_Abort_IT+0xc8>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a4f      	ldr	r2, [pc, #316]	; (800280c <HAL_DMA_Abort_IT+0x1c4>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d01d      	beq.n	8002710 <HAL_DMA_Abort_IT+0xc8>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a4d      	ldr	r2, [pc, #308]	; (8002810 <HAL_DMA_Abort_IT+0x1c8>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d018      	beq.n	8002710 <HAL_DMA_Abort_IT+0xc8>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a4c      	ldr	r2, [pc, #304]	; (8002814 <HAL_DMA_Abort_IT+0x1cc>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d013      	beq.n	8002710 <HAL_DMA_Abort_IT+0xc8>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a4a      	ldr	r2, [pc, #296]	; (8002818 <HAL_DMA_Abort_IT+0x1d0>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d00e      	beq.n	8002710 <HAL_DMA_Abort_IT+0xc8>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a49      	ldr	r2, [pc, #292]	; (800281c <HAL_DMA_Abort_IT+0x1d4>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d009      	beq.n	8002710 <HAL_DMA_Abort_IT+0xc8>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a47      	ldr	r2, [pc, #284]	; (8002820 <HAL_DMA_Abort_IT+0x1d8>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d004      	beq.n	8002710 <HAL_DMA_Abort_IT+0xc8>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a46      	ldr	r2, [pc, #280]	; (8002824 <HAL_DMA_Abort_IT+0x1dc>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d101      	bne.n	8002714 <HAL_DMA_Abort_IT+0xcc>
 8002710:	2301      	movs	r3, #1
 8002712:	e000      	b.n	8002716 <HAL_DMA_Abort_IT+0xce>
 8002714:	2300      	movs	r3, #0
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 8086 	beq.w	8002828 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2204      	movs	r2, #4
 8002720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a2f      	ldr	r2, [pc, #188]	; (80027e8 <HAL_DMA_Abort_IT+0x1a0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d04a      	beq.n	80027c4 <HAL_DMA_Abort_IT+0x17c>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a2e      	ldr	r2, [pc, #184]	; (80027ec <HAL_DMA_Abort_IT+0x1a4>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d045      	beq.n	80027c4 <HAL_DMA_Abort_IT+0x17c>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a2c      	ldr	r2, [pc, #176]	; (80027f0 <HAL_DMA_Abort_IT+0x1a8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d040      	beq.n	80027c4 <HAL_DMA_Abort_IT+0x17c>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a2b      	ldr	r2, [pc, #172]	; (80027f4 <HAL_DMA_Abort_IT+0x1ac>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d03b      	beq.n	80027c4 <HAL_DMA_Abort_IT+0x17c>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a29      	ldr	r2, [pc, #164]	; (80027f8 <HAL_DMA_Abort_IT+0x1b0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d036      	beq.n	80027c4 <HAL_DMA_Abort_IT+0x17c>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a28      	ldr	r2, [pc, #160]	; (80027fc <HAL_DMA_Abort_IT+0x1b4>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d031      	beq.n	80027c4 <HAL_DMA_Abort_IT+0x17c>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a26      	ldr	r2, [pc, #152]	; (8002800 <HAL_DMA_Abort_IT+0x1b8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d02c      	beq.n	80027c4 <HAL_DMA_Abort_IT+0x17c>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a25      	ldr	r2, [pc, #148]	; (8002804 <HAL_DMA_Abort_IT+0x1bc>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d027      	beq.n	80027c4 <HAL_DMA_Abort_IT+0x17c>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a23      	ldr	r2, [pc, #140]	; (8002808 <HAL_DMA_Abort_IT+0x1c0>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d022      	beq.n	80027c4 <HAL_DMA_Abort_IT+0x17c>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a22      	ldr	r2, [pc, #136]	; (800280c <HAL_DMA_Abort_IT+0x1c4>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d01d      	beq.n	80027c4 <HAL_DMA_Abort_IT+0x17c>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a20      	ldr	r2, [pc, #128]	; (8002810 <HAL_DMA_Abort_IT+0x1c8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d018      	beq.n	80027c4 <HAL_DMA_Abort_IT+0x17c>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a1f      	ldr	r2, [pc, #124]	; (8002814 <HAL_DMA_Abort_IT+0x1cc>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d013      	beq.n	80027c4 <HAL_DMA_Abort_IT+0x17c>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a1d      	ldr	r2, [pc, #116]	; (8002818 <HAL_DMA_Abort_IT+0x1d0>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d00e      	beq.n	80027c4 <HAL_DMA_Abort_IT+0x17c>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a1c      	ldr	r2, [pc, #112]	; (800281c <HAL_DMA_Abort_IT+0x1d4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d009      	beq.n	80027c4 <HAL_DMA_Abort_IT+0x17c>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a1a      	ldr	r2, [pc, #104]	; (8002820 <HAL_DMA_Abort_IT+0x1d8>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d004      	beq.n	80027c4 <HAL_DMA_Abort_IT+0x17c>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a19      	ldr	r2, [pc, #100]	; (8002824 <HAL_DMA_Abort_IT+0x1dc>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d108      	bne.n	80027d6 <HAL_DMA_Abort_IT+0x18e>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 0201 	bic.w	r2, r2, #1
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	e178      	b.n	8002ac8 <HAL_DMA_Abort_IT+0x480>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0201 	bic.w	r2, r2, #1
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	e16f      	b.n	8002ac8 <HAL_DMA_Abort_IT+0x480>
 80027e8:	40020010 	.word	0x40020010
 80027ec:	40020028 	.word	0x40020028
 80027f0:	40020040 	.word	0x40020040
 80027f4:	40020058 	.word	0x40020058
 80027f8:	40020070 	.word	0x40020070
 80027fc:	40020088 	.word	0x40020088
 8002800:	400200a0 	.word	0x400200a0
 8002804:	400200b8 	.word	0x400200b8
 8002808:	40020410 	.word	0x40020410
 800280c:	40020428 	.word	0x40020428
 8002810:	40020440 	.word	0x40020440
 8002814:	40020458 	.word	0x40020458
 8002818:	40020470 	.word	0x40020470
 800281c:	40020488 	.word	0x40020488
 8002820:	400204a0 	.word	0x400204a0
 8002824:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 020e 	bic.w	r2, r2, #14
 8002836:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a6c      	ldr	r2, [pc, #432]	; (80029f0 <HAL_DMA_Abort_IT+0x3a8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d04a      	beq.n	80028d8 <HAL_DMA_Abort_IT+0x290>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a6b      	ldr	r2, [pc, #428]	; (80029f4 <HAL_DMA_Abort_IT+0x3ac>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d045      	beq.n	80028d8 <HAL_DMA_Abort_IT+0x290>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a69      	ldr	r2, [pc, #420]	; (80029f8 <HAL_DMA_Abort_IT+0x3b0>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d040      	beq.n	80028d8 <HAL_DMA_Abort_IT+0x290>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a68      	ldr	r2, [pc, #416]	; (80029fc <HAL_DMA_Abort_IT+0x3b4>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d03b      	beq.n	80028d8 <HAL_DMA_Abort_IT+0x290>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a66      	ldr	r2, [pc, #408]	; (8002a00 <HAL_DMA_Abort_IT+0x3b8>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d036      	beq.n	80028d8 <HAL_DMA_Abort_IT+0x290>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a65      	ldr	r2, [pc, #404]	; (8002a04 <HAL_DMA_Abort_IT+0x3bc>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d031      	beq.n	80028d8 <HAL_DMA_Abort_IT+0x290>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a63      	ldr	r2, [pc, #396]	; (8002a08 <HAL_DMA_Abort_IT+0x3c0>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d02c      	beq.n	80028d8 <HAL_DMA_Abort_IT+0x290>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a62      	ldr	r2, [pc, #392]	; (8002a0c <HAL_DMA_Abort_IT+0x3c4>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d027      	beq.n	80028d8 <HAL_DMA_Abort_IT+0x290>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a60      	ldr	r2, [pc, #384]	; (8002a10 <HAL_DMA_Abort_IT+0x3c8>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d022      	beq.n	80028d8 <HAL_DMA_Abort_IT+0x290>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a5f      	ldr	r2, [pc, #380]	; (8002a14 <HAL_DMA_Abort_IT+0x3cc>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d01d      	beq.n	80028d8 <HAL_DMA_Abort_IT+0x290>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a5d      	ldr	r2, [pc, #372]	; (8002a18 <HAL_DMA_Abort_IT+0x3d0>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d018      	beq.n	80028d8 <HAL_DMA_Abort_IT+0x290>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a5c      	ldr	r2, [pc, #368]	; (8002a1c <HAL_DMA_Abort_IT+0x3d4>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d013      	beq.n	80028d8 <HAL_DMA_Abort_IT+0x290>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a5a      	ldr	r2, [pc, #360]	; (8002a20 <HAL_DMA_Abort_IT+0x3d8>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d00e      	beq.n	80028d8 <HAL_DMA_Abort_IT+0x290>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a59      	ldr	r2, [pc, #356]	; (8002a24 <HAL_DMA_Abort_IT+0x3dc>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d009      	beq.n	80028d8 <HAL_DMA_Abort_IT+0x290>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a57      	ldr	r2, [pc, #348]	; (8002a28 <HAL_DMA_Abort_IT+0x3e0>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d004      	beq.n	80028d8 <HAL_DMA_Abort_IT+0x290>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a56      	ldr	r2, [pc, #344]	; (8002a2c <HAL_DMA_Abort_IT+0x3e4>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d108      	bne.n	80028ea <HAL_DMA_Abort_IT+0x2a2>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0201 	bic.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	e007      	b.n	80028fa <HAL_DMA_Abort_IT+0x2b2>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 0201 	bic.w	r2, r2, #1
 80028f8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a3c      	ldr	r2, [pc, #240]	; (80029f0 <HAL_DMA_Abort_IT+0x3a8>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d072      	beq.n	80029ea <HAL_DMA_Abort_IT+0x3a2>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a3a      	ldr	r2, [pc, #232]	; (80029f4 <HAL_DMA_Abort_IT+0x3ac>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d06d      	beq.n	80029ea <HAL_DMA_Abort_IT+0x3a2>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a39      	ldr	r2, [pc, #228]	; (80029f8 <HAL_DMA_Abort_IT+0x3b0>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d068      	beq.n	80029ea <HAL_DMA_Abort_IT+0x3a2>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a37      	ldr	r2, [pc, #220]	; (80029fc <HAL_DMA_Abort_IT+0x3b4>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d063      	beq.n	80029ea <HAL_DMA_Abort_IT+0x3a2>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a36      	ldr	r2, [pc, #216]	; (8002a00 <HAL_DMA_Abort_IT+0x3b8>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d05e      	beq.n	80029ea <HAL_DMA_Abort_IT+0x3a2>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a34      	ldr	r2, [pc, #208]	; (8002a04 <HAL_DMA_Abort_IT+0x3bc>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d059      	beq.n	80029ea <HAL_DMA_Abort_IT+0x3a2>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a33      	ldr	r2, [pc, #204]	; (8002a08 <HAL_DMA_Abort_IT+0x3c0>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d054      	beq.n	80029ea <HAL_DMA_Abort_IT+0x3a2>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a31      	ldr	r2, [pc, #196]	; (8002a0c <HAL_DMA_Abort_IT+0x3c4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d04f      	beq.n	80029ea <HAL_DMA_Abort_IT+0x3a2>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a30      	ldr	r2, [pc, #192]	; (8002a10 <HAL_DMA_Abort_IT+0x3c8>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d04a      	beq.n	80029ea <HAL_DMA_Abort_IT+0x3a2>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a2e      	ldr	r2, [pc, #184]	; (8002a14 <HAL_DMA_Abort_IT+0x3cc>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d045      	beq.n	80029ea <HAL_DMA_Abort_IT+0x3a2>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a2d      	ldr	r2, [pc, #180]	; (8002a18 <HAL_DMA_Abort_IT+0x3d0>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d040      	beq.n	80029ea <HAL_DMA_Abort_IT+0x3a2>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a2b      	ldr	r2, [pc, #172]	; (8002a1c <HAL_DMA_Abort_IT+0x3d4>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d03b      	beq.n	80029ea <HAL_DMA_Abort_IT+0x3a2>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a2a      	ldr	r2, [pc, #168]	; (8002a20 <HAL_DMA_Abort_IT+0x3d8>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d036      	beq.n	80029ea <HAL_DMA_Abort_IT+0x3a2>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a28      	ldr	r2, [pc, #160]	; (8002a24 <HAL_DMA_Abort_IT+0x3dc>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d031      	beq.n	80029ea <HAL_DMA_Abort_IT+0x3a2>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a27      	ldr	r2, [pc, #156]	; (8002a28 <HAL_DMA_Abort_IT+0x3e0>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d02c      	beq.n	80029ea <HAL_DMA_Abort_IT+0x3a2>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a25      	ldr	r2, [pc, #148]	; (8002a2c <HAL_DMA_Abort_IT+0x3e4>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d027      	beq.n	80029ea <HAL_DMA_Abort_IT+0x3a2>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a24      	ldr	r2, [pc, #144]	; (8002a30 <HAL_DMA_Abort_IT+0x3e8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d022      	beq.n	80029ea <HAL_DMA_Abort_IT+0x3a2>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a22      	ldr	r2, [pc, #136]	; (8002a34 <HAL_DMA_Abort_IT+0x3ec>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d01d      	beq.n	80029ea <HAL_DMA_Abort_IT+0x3a2>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a21      	ldr	r2, [pc, #132]	; (8002a38 <HAL_DMA_Abort_IT+0x3f0>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d018      	beq.n	80029ea <HAL_DMA_Abort_IT+0x3a2>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a1f      	ldr	r2, [pc, #124]	; (8002a3c <HAL_DMA_Abort_IT+0x3f4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d013      	beq.n	80029ea <HAL_DMA_Abort_IT+0x3a2>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a1e      	ldr	r2, [pc, #120]	; (8002a40 <HAL_DMA_Abort_IT+0x3f8>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d00e      	beq.n	80029ea <HAL_DMA_Abort_IT+0x3a2>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a1c      	ldr	r2, [pc, #112]	; (8002a44 <HAL_DMA_Abort_IT+0x3fc>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d009      	beq.n	80029ea <HAL_DMA_Abort_IT+0x3a2>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a1b      	ldr	r2, [pc, #108]	; (8002a48 <HAL_DMA_Abort_IT+0x400>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d004      	beq.n	80029ea <HAL_DMA_Abort_IT+0x3a2>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a19      	ldr	r2, [pc, #100]	; (8002a4c <HAL_DMA_Abort_IT+0x404>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d132      	bne.n	8002a50 <HAL_DMA_Abort_IT+0x408>
 80029ea:	2301      	movs	r3, #1
 80029ec:	e031      	b.n	8002a52 <HAL_DMA_Abort_IT+0x40a>
 80029ee:	bf00      	nop
 80029f0:	40020010 	.word	0x40020010
 80029f4:	40020028 	.word	0x40020028
 80029f8:	40020040 	.word	0x40020040
 80029fc:	40020058 	.word	0x40020058
 8002a00:	40020070 	.word	0x40020070
 8002a04:	40020088 	.word	0x40020088
 8002a08:	400200a0 	.word	0x400200a0
 8002a0c:	400200b8 	.word	0x400200b8
 8002a10:	40020410 	.word	0x40020410
 8002a14:	40020428 	.word	0x40020428
 8002a18:	40020440 	.word	0x40020440
 8002a1c:	40020458 	.word	0x40020458
 8002a20:	40020470 	.word	0x40020470
 8002a24:	40020488 	.word	0x40020488
 8002a28:	400204a0 	.word	0x400204a0
 8002a2c:	400204b8 	.word	0x400204b8
 8002a30:	58025408 	.word	0x58025408
 8002a34:	5802541c 	.word	0x5802541c
 8002a38:	58025430 	.word	0x58025430
 8002a3c:	58025444 	.word	0x58025444
 8002a40:	58025458 	.word	0x58025458
 8002a44:	5802546c 	.word	0x5802546c
 8002a48:	58025480 	.word	0x58025480
 8002a4c:	58025494 	.word	0x58025494
 8002a50:	2300      	movs	r3, #0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d028      	beq.n	8002aa8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a64:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a70:	f003 031f 	and.w	r3, r3, #31
 8002a74:	2201      	movs	r2, #1
 8002a76:	409a      	lsls	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002a84:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00c      	beq.n	8002aa8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a9c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002aa6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop

08002ad4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e04f      	b.n	8002b86 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d106      	bne.n	8002b00 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7fe fb6e 	bl	80011dc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2202      	movs	r2, #2
 8002b04:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	4b20      	ldr	r3, [pc, #128]	; (8002b90 <HAL_DMA2D_Init+0xbc>)
 8002b10:	4013      	ands	r3, r2
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6851      	ldr	r1, [r2, #4]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	69d2      	ldr	r2, [r2, #28]
 8002b1a:	4311      	orrs	r1, r2
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	430b      	orrs	r3, r1
 8002b22:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b2a:	4b1a      	ldr	r3, [pc, #104]	; (8002b94 <HAL_DMA2D_Init+0xc0>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6891      	ldr	r1, [r2, #8]
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6992      	ldr	r2, [r2, #24]
 8002b36:	4311      	orrs	r1, r2
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	430b      	orrs	r3, r1
 8002b3e:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b46:	4b14      	ldr	r3, [pc, #80]	; (8002b98 <HAL_DMA2D_Init+0xc4>)
 8002b48:	4013      	ands	r3, r2
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	68d1      	ldr	r1, [r2, #12]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6812      	ldr	r2, [r2, #0]
 8002b52:	430b      	orrs	r3, r1
 8002b54:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	051a      	lsls	r2, r3, #20
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	055b      	lsls	r3, r3, #21
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	fff8ffbf 	.word	0xfff8ffbf
 8002b94:	fffffef8 	.word	0xfffffef8
 8002b98:	ffff0000 	.word	0xffff0000

08002b9c <HAL_DMA2D_Start_IT>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                     uint32_t Height)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af02      	add	r7, sp, #8
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
 8002ba8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d101      	bne.n	8002bb8 <HAL_DMA2D_Start_IT+0x1c>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e020      	b.n	8002bfa <HAL_DMA2D_Start_IT+0x5e>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	68b9      	ldr	r1, [r7, #8]
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 f9d4 	bl	8002f80 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC | DMA2D_IT_TE | DMA2D_IT_CE);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8002be6:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0201 	orr.w	r2, r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b084      	sub	sp, #16
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d026      	beq.n	8002c72 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d021      	beq.n	8002c72 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c3c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c42:	f043 0201 	orr.w	r2, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2204      	movs	r2, #4
 8002c56:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f003 0320 	and.w	r3, r3, #32
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d026      	beq.n	8002cca <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d021      	beq.n	8002cca <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c94:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ca2:	f043 0202 	orr.w	r2, r3, #2
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2204      	movs	r2, #4
 8002cae:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d026      	beq.n	8002d22 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d021      	beq.n	8002d22 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cec:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2208      	movs	r2, #8
 8002cf4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cfa:	f043 0204 	orr.w	r2, r3, #4
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2204      	movs	r2, #4
 8002d06:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d013      	beq.n	8002d54 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00e      	beq.n	8002d54 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d44:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2204      	movs	r2, #4
 8002d4c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f853 	bl	8002dfa <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d024      	beq.n	8002da8 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d01f      	beq.n	8002da8 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d76:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f003 0310 	and.w	r3, r3, #16
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d01f      	beq.n	8002df2 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d01a      	beq.n	8002df2 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dca:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2210      	movs	r2, #16
 8002dd2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f80e 	bl	8002e0e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002df2:	bf00      	nop
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
	...

08002e24 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_DMA2D_ConfigLayer+0x24>
 8002e44:	2302      	movs	r3, #2
 8002e46:	e092      	b.n	8002f6e <HAL_DMA2D_ConfigLayer+0x14a>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2202      	movs	r2, #2
 8002e54:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	1a9b      	subs	r3, r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	3328      	adds	r3, #40	; 0x28
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	4413      	add	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	041b      	lsls	r3, r3, #16
 8002e74:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002e7c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002e84:	4313      	orrs	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8002e88:	4b3c      	ldr	r3, [pc, #240]	; (8002f7c <HAL_DMA2D_ConfigLayer+0x158>)
 8002e8a:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b0a      	cmp	r3, #10
 8002e92:	d003      	beq.n	8002e9c <HAL_DMA2D_ConfigLayer+0x78>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b09      	cmp	r3, #9
 8002e9a:	d107      	bne.n	8002eac <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	e005      	b.n	8002eb8 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	061b      	lsls	r3, r3, #24
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d120      	bne.n	8002f00 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	ea02 0103 	and.w	r1, r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	6812      	ldr	r2, [r2, #0]
 8002ede:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	2b0a      	cmp	r3, #10
 8002ee6:	d003      	beq.n	8002ef0 <HAL_DMA2D_ConfigLayer+0xcc>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b09      	cmp	r3, #9
 8002eee:	d135      	bne.n	8002f5c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002efc:	629a      	str	r2, [r3, #40]	; 0x28
 8002efe:	e02d      	b.n	8002f5c <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b0b      	cmp	r3, #11
 8002f06:	d109      	bne.n	8002f1c <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	049b      	lsls	r3, r3, #18
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8002f1a:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	69da      	ldr	r2, [r3, #28]
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	43db      	mvns	r3, r3
 8002f26:	ea02 0103 	and.w	r1, r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	6812      	ldr	r2, [r2, #0]
 8002f3c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b0a      	cmp	r3, #10
 8002f44:	d003      	beq.n	8002f4e <HAL_DMA2D_ConfigLayer+0x12a>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b09      	cmp	r3, #9
 8002f4c:	d106      	bne.n	8002f5c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002f5a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	371c      	adds	r7, #28
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	ff33000f 	.word	0xff33000f

08002f80 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b08b      	sub	sp, #44	; 0x2c
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f94:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	041a      	lsls	r2, r3, #16
 8002f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002fb8:	d174      	bne.n	80030a4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002fc0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002fc8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002fd0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d108      	bne.n	8002ff2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff0:	e053      	b.n	800309a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d106      	bne.n	8003008 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	4313      	orrs	r3, r2
 8003004:	627b      	str	r3, [r7, #36]	; 0x24
 8003006:	e048      	b.n	800309a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	2b02      	cmp	r3, #2
 800300e:	d111      	bne.n	8003034 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	0cdb      	lsrs	r3, r3, #19
 8003014:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	0a9b      	lsrs	r3, r3, #10
 800301a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	08db      	lsrs	r3, r3, #3
 8003020:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	015a      	lsls	r2, r3, #5
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	02db      	lsls	r3, r3, #11
 800302a:	4313      	orrs	r3, r2
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	4313      	orrs	r3, r2
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
 8003032:	e032      	b.n	800309a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2b03      	cmp	r3, #3
 800303a:	d117      	bne.n	800306c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	0fdb      	lsrs	r3, r3, #31
 8003040:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	0cdb      	lsrs	r3, r3, #19
 8003046:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	0adb      	lsrs	r3, r3, #11
 800304c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	08db      	lsrs	r3, r3, #3
 8003052:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	029b      	lsls	r3, r3, #10
 800305c:	431a      	orrs	r2, r3
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	03db      	lsls	r3, r3, #15
 8003062:	4313      	orrs	r3, r2
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	4313      	orrs	r3, r2
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
 800306a:	e016      	b.n	800309a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	0f1b      	lsrs	r3, r3, #28
 8003070:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	0d1b      	lsrs	r3, r3, #20
 8003076:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	0b1b      	lsrs	r3, r3, #12
 800307c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	091b      	lsrs	r3, r3, #4
 8003082:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	011a      	lsls	r2, r3, #4
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	021b      	lsls	r3, r3, #8
 800308c:	431a      	orrs	r2, r3
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	031b      	lsls	r3, r3, #12
 8003092:	4313      	orrs	r3, r2
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	4313      	orrs	r3, r2
 8003098:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a0:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80030a2:	e00d      	b.n	80030c0 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030ac:	d104      	bne.n	80030b8 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	615a      	str	r2, [r3, #20]
}
 80030b6:	e003      	b.n	80030c0 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	60da      	str	r2, [r3, #12]
}
 80030c0:	bf00      	nop
 80030c2:	372c      	adds	r7, #44	; 0x2c
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b089      	sub	sp, #36	; 0x24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80030da:	4b89      	ldr	r3, [pc, #548]	; (8003300 <HAL_GPIO_Init+0x234>)
 80030dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80030de:	e194      	b.n	800340a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	2101      	movs	r1, #1
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	fa01 f303 	lsl.w	r3, r1, r3
 80030ec:	4013      	ands	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 8186 	beq.w	8003404 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f003 0303 	and.w	r3, r3, #3
 8003100:	2b01      	cmp	r3, #1
 8003102:	d005      	beq.n	8003110 <HAL_GPIO_Init+0x44>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 0303 	and.w	r3, r3, #3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d130      	bne.n	8003172 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	2203      	movs	r2, #3
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4013      	ands	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	68da      	ldr	r2, [r3, #12]
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4313      	orrs	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003146:	2201      	movs	r2, #1
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	43db      	mvns	r3, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4013      	ands	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	091b      	lsrs	r3, r3, #4
 800315c:	f003 0201 	and.w	r2, r3, #1
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4313      	orrs	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	2b03      	cmp	r3, #3
 800317c:	d017      	beq.n	80031ae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	2203      	movs	r2, #3
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43db      	mvns	r3, r3
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	4013      	ands	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d123      	bne.n	8003202 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	08da      	lsrs	r2, r3, #3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	3208      	adds	r2, #8
 80031c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	220f      	movs	r2, #15
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43db      	mvns	r3, r3
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	4013      	ands	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	691a      	ldr	r2, [r3, #16]
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	08da      	lsrs	r2, r3, #3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3208      	adds	r2, #8
 80031fc:	69b9      	ldr	r1, [r7, #24]
 80031fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	2203      	movs	r2, #3
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43db      	mvns	r3, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4013      	ands	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f003 0203 	and.w	r2, r3, #3
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	4313      	orrs	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 80e0 	beq.w	8003404 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003244:	4b2f      	ldr	r3, [pc, #188]	; (8003304 <HAL_GPIO_Init+0x238>)
 8003246:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800324a:	4a2e      	ldr	r2, [pc, #184]	; (8003304 <HAL_GPIO_Init+0x238>)
 800324c:	f043 0302 	orr.w	r3, r3, #2
 8003250:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003254:	4b2b      	ldr	r3, [pc, #172]	; (8003304 <HAL_GPIO_Init+0x238>)
 8003256:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003262:	4a29      	ldr	r2, [pc, #164]	; (8003308 <HAL_GPIO_Init+0x23c>)
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	089b      	lsrs	r3, r3, #2
 8003268:	3302      	adds	r3, #2
 800326a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800326e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	220f      	movs	r2, #15
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	43db      	mvns	r3, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	4013      	ands	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a20      	ldr	r2, [pc, #128]	; (800330c <HAL_GPIO_Init+0x240>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d052      	beq.n	8003334 <HAL_GPIO_Init+0x268>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a1f      	ldr	r2, [pc, #124]	; (8003310 <HAL_GPIO_Init+0x244>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d031      	beq.n	80032fa <HAL_GPIO_Init+0x22e>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a1e      	ldr	r2, [pc, #120]	; (8003314 <HAL_GPIO_Init+0x248>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d02b      	beq.n	80032f6 <HAL_GPIO_Init+0x22a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a1d      	ldr	r2, [pc, #116]	; (8003318 <HAL_GPIO_Init+0x24c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d025      	beq.n	80032f2 <HAL_GPIO_Init+0x226>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a1c      	ldr	r2, [pc, #112]	; (800331c <HAL_GPIO_Init+0x250>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d01f      	beq.n	80032ee <HAL_GPIO_Init+0x222>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a1b      	ldr	r2, [pc, #108]	; (8003320 <HAL_GPIO_Init+0x254>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d019      	beq.n	80032ea <HAL_GPIO_Init+0x21e>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a1a      	ldr	r2, [pc, #104]	; (8003324 <HAL_GPIO_Init+0x258>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d013      	beq.n	80032e6 <HAL_GPIO_Init+0x21a>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a19      	ldr	r2, [pc, #100]	; (8003328 <HAL_GPIO_Init+0x25c>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d00d      	beq.n	80032e2 <HAL_GPIO_Init+0x216>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a18      	ldr	r2, [pc, #96]	; (800332c <HAL_GPIO_Init+0x260>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d007      	beq.n	80032de <HAL_GPIO_Init+0x212>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a17      	ldr	r2, [pc, #92]	; (8003330 <HAL_GPIO_Init+0x264>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d101      	bne.n	80032da <HAL_GPIO_Init+0x20e>
 80032d6:	2309      	movs	r3, #9
 80032d8:	e02d      	b.n	8003336 <HAL_GPIO_Init+0x26a>
 80032da:	230a      	movs	r3, #10
 80032dc:	e02b      	b.n	8003336 <HAL_GPIO_Init+0x26a>
 80032de:	2308      	movs	r3, #8
 80032e0:	e029      	b.n	8003336 <HAL_GPIO_Init+0x26a>
 80032e2:	2307      	movs	r3, #7
 80032e4:	e027      	b.n	8003336 <HAL_GPIO_Init+0x26a>
 80032e6:	2306      	movs	r3, #6
 80032e8:	e025      	b.n	8003336 <HAL_GPIO_Init+0x26a>
 80032ea:	2305      	movs	r3, #5
 80032ec:	e023      	b.n	8003336 <HAL_GPIO_Init+0x26a>
 80032ee:	2304      	movs	r3, #4
 80032f0:	e021      	b.n	8003336 <HAL_GPIO_Init+0x26a>
 80032f2:	2303      	movs	r3, #3
 80032f4:	e01f      	b.n	8003336 <HAL_GPIO_Init+0x26a>
 80032f6:	2302      	movs	r3, #2
 80032f8:	e01d      	b.n	8003336 <HAL_GPIO_Init+0x26a>
 80032fa:	2301      	movs	r3, #1
 80032fc:	e01b      	b.n	8003336 <HAL_GPIO_Init+0x26a>
 80032fe:	bf00      	nop
 8003300:	58000080 	.word	0x58000080
 8003304:	58024400 	.word	0x58024400
 8003308:	58000400 	.word	0x58000400
 800330c:	58020000 	.word	0x58020000
 8003310:	58020400 	.word	0x58020400
 8003314:	58020800 	.word	0x58020800
 8003318:	58020c00 	.word	0x58020c00
 800331c:	58021000 	.word	0x58021000
 8003320:	58021400 	.word	0x58021400
 8003324:	58021800 	.word	0x58021800
 8003328:	58021c00 	.word	0x58021c00
 800332c:	58022000 	.word	0x58022000
 8003330:	58022400 	.word	0x58022400
 8003334:	2300      	movs	r3, #0
 8003336:	69fa      	ldr	r2, [r7, #28]
 8003338:	f002 0203 	and.w	r2, r2, #3
 800333c:	0092      	lsls	r2, r2, #2
 800333e:	4093      	lsls	r3, r2
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	4313      	orrs	r3, r2
 8003344:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003346:	4938      	ldr	r1, [pc, #224]	; (8003428 <HAL_GPIO_Init+0x35c>)
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	089b      	lsrs	r3, r3, #2
 800334c:	3302      	adds	r3, #2
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	43db      	mvns	r3, r3
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	4013      	ands	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	4313      	orrs	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800337a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	43db      	mvns	r3, r3
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	4013      	ands	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80033a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	43db      	mvns	r3, r3
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	4013      	ands	r3, r2
 80033be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	43db      	mvns	r3, r3
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4013      	ands	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	3301      	adds	r3, #1
 8003408:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	fa22 f303 	lsr.w	r3, r2, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	f47f ae63 	bne.w	80030e0 <HAL_GPIO_Init+0x14>
  }
}
 800341a:	bf00      	nop
 800341c:	bf00      	nop
 800341e:	3724      	adds	r7, #36	; 0x24
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	58000400 	.word	0x58000400

0800342c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	460b      	mov	r3, r1
 8003436:	807b      	strh	r3, [r7, #2]
 8003438:	4613      	mov	r3, r2
 800343a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800343c:	787b      	ldrb	r3, [r7, #1]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003442:	887a      	ldrh	r2, [r7, #2]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003448:	e003      	b.n	8003452 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800344a:	887b      	ldrh	r3, [r7, #2]
 800344c:	041a      	lsls	r2, r3, #16
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	619a      	str	r2, [r3, #24]
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
	...

08003460 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e0bf      	b.n	80035f2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d106      	bne.n	800348c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7fd fed0 	bl	800122c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	699a      	ldr	r2, [r3, #24]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80034a2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6999      	ldr	r1, [r3, #24]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80034b8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6899      	ldr	r1, [r3, #8]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	4b4a      	ldr	r3, [pc, #296]	; (80035fc <HAL_LTDC_Init+0x19c>)
 80034d4:	400b      	ands	r3, r1
 80034d6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	041b      	lsls	r3, r3, #16
 80034de:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6899      	ldr	r1, [r3, #8]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	699a      	ldr	r2, [r3, #24]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68d9      	ldr	r1, [r3, #12]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	4b3e      	ldr	r3, [pc, #248]	; (80035fc <HAL_LTDC_Init+0x19c>)
 8003502:	400b      	ands	r3, r1
 8003504:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	041b      	lsls	r3, r3, #16
 800350c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68d9      	ldr	r1, [r3, #12]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a1a      	ldr	r2, [r3, #32]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6919      	ldr	r1, [r3, #16]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	4b33      	ldr	r3, [pc, #204]	; (80035fc <HAL_LTDC_Init+0x19c>)
 8003530:	400b      	ands	r3, r1
 8003532:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	041b      	lsls	r3, r3, #16
 800353a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6919      	ldr	r1, [r3, #16]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	431a      	orrs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6959      	ldr	r1, [r3, #20]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	4b27      	ldr	r3, [pc, #156]	; (80035fc <HAL_LTDC_Init+0x19c>)
 800355e:	400b      	ands	r3, r1
 8003560:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003566:	041b      	lsls	r3, r3, #16
 8003568:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6959      	ldr	r1, [r3, #20]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003586:	021b      	lsls	r3, r3, #8
 8003588:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003590:	041b      	lsls	r3, r3, #16
 8003592:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80035a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80035b6:	431a      	orrs	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0206 	orr.w	r2, r2, #6
 80035ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699a      	ldr	r2, [r3, #24]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0201 	orr.w	r2, r2, #1
 80035de:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	f000f800 	.word	0xf000f800

08003600 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003616:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	2b00      	cmp	r3, #0
 8003620:	d023      	beq.n	800366a <HAL_LTDC_IRQHandler+0x6a>
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b00      	cmp	r3, #0
 800362a:	d01e      	beq.n	800366a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 0204 	bic.w	r2, r2, #4
 800363a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2204      	movs	r2, #4
 8003642:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800364a:	f043 0201 	orr.w	r2, r3, #1
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2204      	movs	r2, #4
 8003658:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f86f 	bl	8003748 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d023      	beq.n	80036bc <HAL_LTDC_IRQHandler+0xbc>
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d01e      	beq.n	80036bc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0202 	bic.w	r2, r2, #2
 800368c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2202      	movs	r2, #2
 8003694:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800369c:	f043 0202 	orr.w	r2, r3, #2
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2204      	movs	r2, #4
 80036aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f846 	bl	8003748 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d01b      	beq.n	80036fe <HAL_LTDC_IRQHandler+0xfe>
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d016      	beq.n	80036fe <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 0201 	bic.w	r2, r2, #1
 80036de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2201      	movs	r2, #1
 80036e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f82f 	bl	800375c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f003 0308 	and.w	r3, r3, #8
 8003704:	2b00      	cmp	r3, #0
 8003706:	d01b      	beq.n	8003740 <HAL_LTDC_IRQHandler+0x140>
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b00      	cmp	r3, #0
 8003710:	d016      	beq.n	8003740 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0208 	bic.w	r2, r2, #8
 8003720:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2208      	movs	r2, #8
 8003728:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f818 	bl	8003770 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003740:	bf00      	nop
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003784:	b5b0      	push	{r4, r5, r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003796:	2b01      	cmp	r3, #1
 8003798:	d101      	bne.n	800379e <HAL_LTDC_ConfigLayer+0x1a>
 800379a:	2302      	movs	r3, #2
 800379c:	e02c      	b.n	80037f8 <HAL_LTDC_ConfigLayer+0x74>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2202      	movs	r2, #2
 80037aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2134      	movs	r1, #52	; 0x34
 80037b4:	fb01 f303 	mul.w	r3, r1, r3
 80037b8:	4413      	add	r3, r2
 80037ba:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	4614      	mov	r4, r2
 80037c2:	461d      	mov	r5, r3
 80037c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037d0:	682b      	ldr	r3, [r5, #0]
 80037d2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	68b9      	ldr	r1, [r7, #8]
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 f811 	bl	8003800 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2201      	movs	r2, #1
 80037e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bdb0      	pop	{r4, r5, r7, pc}

08003800 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003800:	b480      	push	{r7}
 8003802:	b089      	sub	sp, #36	; 0x24
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	0c1b      	lsrs	r3, r3, #16
 8003818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800381c:	4413      	add	r3, r2
 800381e:	041b      	lsls	r3, r3, #16
 8003820:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	461a      	mov	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	01db      	lsls	r3, r3, #7
 800382c:	4413      	add	r3, r2
 800382e:	3384      	adds	r3, #132	; 0x84
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	6812      	ldr	r2, [r2, #0]
 8003836:	4611      	mov	r1, r2
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	01d2      	lsls	r2, r2, #7
 800383c:	440a      	add	r2, r1
 800383e:	3284      	adds	r2, #132	; 0x84
 8003840:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003844:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	0c1b      	lsrs	r3, r3, #16
 8003852:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003856:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003858:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4619      	mov	r1, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	01db      	lsls	r3, r3, #7
 8003864:	440b      	add	r3, r1
 8003866:	3384      	adds	r3, #132	; 0x84
 8003868:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800386e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	68da      	ldr	r2, [r3, #12]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800387e:	4413      	add	r3, r2
 8003880:	041b      	lsls	r3, r3, #16
 8003882:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	461a      	mov	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	01db      	lsls	r3, r3, #7
 800388e:	4413      	add	r3, r2
 8003890:	3384      	adds	r3, #132	; 0x84
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	6812      	ldr	r2, [r2, #0]
 8003898:	4611      	mov	r1, r2
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	01d2      	lsls	r2, r2, #7
 800389e:	440a      	add	r2, r1
 80038a0:	3284      	adds	r2, #132	; 0x84
 80038a2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80038a6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038b6:	4413      	add	r3, r2
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4619      	mov	r1, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	01db      	lsls	r3, r3, #7
 80038c4:	440b      	add	r3, r1
 80038c6:	3384      	adds	r3, #132	; 0x84
 80038c8:	4619      	mov	r1, r3
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	461a      	mov	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	01db      	lsls	r3, r3, #7
 80038da:	4413      	add	r3, r2
 80038dc:	3384      	adds	r3, #132	; 0x84
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	6812      	ldr	r2, [r2, #0]
 80038e4:	4611      	mov	r1, r2
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	01d2      	lsls	r2, r2, #7
 80038ea:	440a      	add	r2, r1
 80038ec:	3284      	adds	r2, #132	; 0x84
 80038ee:	f023 0307 	bic.w	r3, r3, #7
 80038f2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	461a      	mov	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	01db      	lsls	r3, r3, #7
 80038fe:	4413      	add	r3, r2
 8003900:	3384      	adds	r3, #132	; 0x84
 8003902:	461a      	mov	r2, r3
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003910:	021b      	lsls	r3, r3, #8
 8003912:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800391a:	041b      	lsls	r3, r3, #16
 800391c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	061b      	lsls	r3, r3, #24
 8003924:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	461a      	mov	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	01db      	lsls	r3, r3, #7
 8003930:	4413      	add	r3, r2
 8003932:	3384      	adds	r3, #132	; 0x84
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	01db      	lsls	r3, r3, #7
 8003940:	4413      	add	r3, r2
 8003942:	3384      	adds	r3, #132	; 0x84
 8003944:	461a      	mov	r2, r3
 8003946:	2300      	movs	r3, #0
 8003948:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003950:	461a      	mov	r2, r3
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	431a      	orrs	r2, r3
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	431a      	orrs	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4619      	mov	r1, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	01db      	lsls	r3, r3, #7
 8003964:	440b      	add	r3, r1
 8003966:	3384      	adds	r3, #132	; 0x84
 8003968:	4619      	mov	r1, r3
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	4313      	orrs	r3, r2
 800396e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	461a      	mov	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	01db      	lsls	r3, r3, #7
 800397a:	4413      	add	r3, r2
 800397c:	3384      	adds	r3, #132	; 0x84
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	6812      	ldr	r2, [r2, #0]
 8003984:	4611      	mov	r1, r2
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	01d2      	lsls	r2, r2, #7
 800398a:	440a      	add	r2, r1
 800398c:	3284      	adds	r2, #132	; 0x84
 800398e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003992:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	461a      	mov	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	01db      	lsls	r3, r3, #7
 800399e:	4413      	add	r3, r2
 80039a0:	3384      	adds	r3, #132	; 0x84
 80039a2:	461a      	mov	r2, r3
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	461a      	mov	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	01db      	lsls	r3, r3, #7
 80039b4:	4413      	add	r3, r2
 80039b6:	3384      	adds	r3, #132	; 0x84
 80039b8:	69da      	ldr	r2, [r3, #28]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4619      	mov	r1, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	01db      	lsls	r3, r3, #7
 80039c4:	440b      	add	r3, r1
 80039c6:	3384      	adds	r3, #132	; 0x84
 80039c8:	4619      	mov	r1, r3
 80039ca:	4b58      	ldr	r3, [pc, #352]	; (8003b2c <LTDC_SetConfig+0x32c>)
 80039cc:	4013      	ands	r3, r2
 80039ce:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	69da      	ldr	r2, [r3, #28]
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	68f9      	ldr	r1, [r7, #12]
 80039da:	6809      	ldr	r1, [r1, #0]
 80039dc:	4608      	mov	r0, r1
 80039de:	6879      	ldr	r1, [r7, #4]
 80039e0:	01c9      	lsls	r1, r1, #7
 80039e2:	4401      	add	r1, r0
 80039e4:	3184      	adds	r1, #132	; 0x84
 80039e6:	4313      	orrs	r3, r2
 80039e8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	01db      	lsls	r3, r3, #7
 80039f4:	4413      	add	r3, r2
 80039f6:	3384      	adds	r3, #132	; 0x84
 80039f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	01db      	lsls	r3, r3, #7
 8003a04:	4413      	add	r3, r2
 8003a06:	3384      	adds	r3, #132	; 0x84
 8003a08:	461a      	mov	r2, r3
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	461a      	mov	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	01db      	lsls	r3, r3, #7
 8003a18:	4413      	add	r3, r2
 8003a1a:	3384      	adds	r3, #132	; 0x84
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a22:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d102      	bne.n	8003a32 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8003a2c:	2304      	movs	r3, #4
 8003a2e:	61fb      	str	r3, [r7, #28]
 8003a30:	e01b      	b.n	8003a6a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d102      	bne.n	8003a40 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	61fb      	str	r3, [r7, #28]
 8003a3e:	e014      	b.n	8003a6a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	2b04      	cmp	r3, #4
 8003a46:	d00b      	beq.n	8003a60 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d007      	beq.n	8003a60 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003a54:	2b03      	cmp	r3, #3
 8003a56:	d003      	beq.n	8003a60 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003a5c:	2b07      	cmp	r3, #7
 8003a5e:	d102      	bne.n	8003a66 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8003a60:	2302      	movs	r3, #2
 8003a62:	61fb      	str	r3, [r7, #28]
 8003a64:	e001      	b.n	8003a6a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8003a66:	2301      	movs	r3, #1
 8003a68:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	01db      	lsls	r3, r3, #7
 8003a74:	4413      	add	r3, r2
 8003a76:	3384      	adds	r3, #132	; 0x84
 8003a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	6812      	ldr	r2, [r2, #0]
 8003a7e:	4611      	mov	r1, r2
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	01d2      	lsls	r2, r2, #7
 8003a84:	440a      	add	r2, r1
 8003a86:	3284      	adds	r2, #132	; 0x84
 8003a88:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003a8c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a92:	69fa      	ldr	r2, [r7, #28]
 8003a94:	fb02 f303 	mul.w	r3, r2, r3
 8003a98:	041a      	lsls	r2, r3, #16
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	6859      	ldr	r1, [r3, #4]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	1acb      	subs	r3, r1, r3
 8003aa4:	69f9      	ldr	r1, [r7, #28]
 8003aa6:	fb01 f303 	mul.w	r3, r1, r3
 8003aaa:	3307      	adds	r3, #7
 8003aac:	68f9      	ldr	r1, [r7, #12]
 8003aae:	6809      	ldr	r1, [r1, #0]
 8003ab0:	4608      	mov	r0, r1
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	01c9      	lsls	r1, r1, #7
 8003ab6:	4401      	add	r1, r0
 8003ab8:	3184      	adds	r1, #132	; 0x84
 8003aba:	4313      	orrs	r3, r2
 8003abc:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	01db      	lsls	r3, r3, #7
 8003ac8:	4413      	add	r3, r2
 8003aca:	3384      	adds	r3, #132	; 0x84
 8003acc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	01db      	lsls	r3, r3, #7
 8003ad8:	440b      	add	r3, r1
 8003ada:	3384      	adds	r3, #132	; 0x84
 8003adc:	4619      	mov	r1, r3
 8003ade:	4b14      	ldr	r3, [pc, #80]	; (8003b30 <LTDC_SetConfig+0x330>)
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	01db      	lsls	r3, r3, #7
 8003aee:	4413      	add	r3, r2
 8003af0:	3384      	adds	r3, #132	; 0x84
 8003af2:	461a      	mov	r2, r3
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	461a      	mov	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	01db      	lsls	r3, r3, #7
 8003b04:	4413      	add	r3, r2
 8003b06:	3384      	adds	r3, #132	; 0x84
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	6812      	ldr	r2, [r2, #0]
 8003b0e:	4611      	mov	r1, r2
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	01d2      	lsls	r2, r2, #7
 8003b14:	440a      	add	r2, r1
 8003b16:	3284      	adds	r2, #132	; 0x84
 8003b18:	f043 0301 	orr.w	r3, r3, #1
 8003b1c:	6013      	str	r3, [r2, #0]
}
 8003b1e:	bf00      	nop
 8003b20:	3724      	adds	r7, #36	; 0x24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	fffff8f8 	.word	0xfffff8f8
 8003b30:	fffff800 	.word	0xfffff800

08003b34 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003b3c:	4b19      	ldr	r3, [pc, #100]	; (8003ba4 <HAL_PWREx_ConfigSupply+0x70>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b04      	cmp	r3, #4
 8003b46:	d00a      	beq.n	8003b5e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003b48:	4b16      	ldr	r3, [pc, #88]	; (8003ba4 <HAL_PWREx_ConfigSupply+0x70>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d001      	beq.n	8003b5a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e01f      	b.n	8003b9a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	e01d      	b.n	8003b9a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003b5e:	4b11      	ldr	r3, [pc, #68]	; (8003ba4 <HAL_PWREx_ConfigSupply+0x70>)
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	f023 0207 	bic.w	r2, r3, #7
 8003b66:	490f      	ldr	r1, [pc, #60]	; (8003ba4 <HAL_PWREx_ConfigSupply+0x70>)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003b6e:	f7fe f901 	bl	8001d74 <HAL_GetTick>
 8003b72:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003b74:	e009      	b.n	8003b8a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003b76:	f7fe f8fd 	bl	8001d74 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b84:	d901      	bls.n	8003b8a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e007      	b.n	8003b9a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003b8a:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <HAL_PWREx_ConfigSupply+0x70>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b96:	d1ee      	bne.n	8003b76 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	58024800 	.word	0x58024800

08003ba8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af02      	add	r7, sp, #8
 8003bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003bb0:	f7fe f8e0 	bl	8001d74 <HAL_GetTick>
 8003bb4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e05f      	b.n	8003c80 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d107      	bne.n	8003bdc <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7fd fc23 	bl	8001418 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003bd2:	f241 3188 	movw	r1, #5000	; 0x1388
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f9e7 	bl	8003faa <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	3b01      	subs	r3, #1
 8003bec:	021a      	lsls	r2, r3, #8
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	2120      	movs	r1, #32
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f9df 	bl	8003fc6 <QSPI_WaitFlagStateUntilTimeout>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003c0c:	7afb      	ldrb	r3, [r7, #11]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d135      	bne.n	8003c7e <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	4b1b      	ldr	r3, [pc, #108]	; (8003c88 <HAL_QSPI_Init+0xe0>)
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6852      	ldr	r2, [r2, #4]
 8003c20:	0611      	lsls	r1, r2, #24
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	68d2      	ldr	r2, [r2, #12]
 8003c26:	4311      	orrs	r1, r2
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	69d2      	ldr	r2, [r2, #28]
 8003c2c:	4311      	orrs	r1, r2
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6a12      	ldr	r2, [r2, #32]
 8003c32:	4311      	orrs	r1, r2
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6812      	ldr	r2, [r2, #0]
 8003c38:	430b      	orrs	r3, r1
 8003c3a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	4b12      	ldr	r3, [pc, #72]	; (8003c8c <HAL_QSPI_Init+0xe4>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6912      	ldr	r2, [r2, #16]
 8003c4a:	0411      	lsls	r1, r2, #16
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	6952      	ldr	r2, [r2, #20]
 8003c50:	4311      	orrs	r1, r2
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6992      	ldr	r2, [r2, #24]
 8003c56:	4311      	orrs	r1, r2
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	6812      	ldr	r2, [r2, #0]
 8003c5c:	430b      	orrs	r3, r1
 8003c5e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0201 	orr.w	r2, r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8003c7e:	7afb      	ldrb	r3, [r7, #11]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	00ffff2f 	.word	0x00ffff2f
 8003c8c:	ffe0f8fe 	.word	0xffe0f8fe

08003c90 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b088      	sub	sp, #32
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003c9c:	f7fe f86a 	bl	8001d74 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d101      	bne.n	8003cb2 <HAL_QSPI_Command+0x22>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	e048      	b.n	8003d44 <HAL_QSPI_Command+0xb4>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d137      	bne.n	8003d36 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	2120      	movs	r1, #32
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f000 f971 	bl	8003fc6 <QSPI_WaitFlagStateUntilTimeout>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003ce8:	7dfb      	ldrb	r3, [r7, #23]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d125      	bne.n	8003d3a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003cee:	2200      	movs	r2, #0
 8003cf0:	68b9      	ldr	r1, [r7, #8]
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 f99e 	bl	8004034 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d115      	bne.n	8003d2c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	2201      	movs	r2, #1
 8003d08:	2102      	movs	r1, #2
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 f95b 	bl	8003fc6 <QSPI_WaitFlagStateUntilTimeout>
 8003d10:	4603      	mov	r3, r0
 8003d12:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8003d14:	7dfb      	ldrb	r3, [r7, #23]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10f      	bne.n	8003d3a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2202      	movs	r2, #2
 8003d20:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d2a:	e006      	b.n	8003d3a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d34:	e001      	b.n	8003d3a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8003d36:	2302      	movs	r3, #2
 8003d38:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8003d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3718      	adds	r7, #24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b08a      	sub	sp, #40	; 0x28
 8003d50:	af02      	add	r7, sp, #8
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8003d5c:	f7fe f80a 	bl	8001d74 <HAL_GetTick>
 8003d60:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	3320      	adds	r3, #32
 8003d68:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d101      	bne.n	8003d7a <HAL_QSPI_Transmit+0x2e>
 8003d76:	2302      	movs	r3, #2
 8003d78:	e076      	b.n	8003e68 <HAL_QSPI_Transmit+0x11c>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d165      	bne.n	8003e5a <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d056      	beq.n	8003e48 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2212      	movs	r2, #18
 8003d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	1c5a      	adds	r2, r3, #1
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	1c5a      	adds	r2, r3, #1
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	695a      	ldr	r2, [r3, #20]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003dce:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8003dd0:	e01b      	b.n	8003e0a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	2104      	movs	r1, #4
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 f8f2 	bl	8003fc6 <QSPI_WaitFlagStateUntilTimeout>
 8003de2:	4603      	mov	r3, r0
 8003de4:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8003de6:	7ffb      	ldrb	r3, [r7, #31]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d113      	bne.n	8003e14 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	781a      	ldrb	r2, [r3, #0]
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	1c5a      	adds	r2, r3, #1
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e04:	1e5a      	subs	r2, r3, #1
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1df      	bne.n	8003dd2 <HAL_QSPI_Transmit+0x86>
 8003e12:	e000      	b.n	8003e16 <HAL_QSPI_Transmit+0xca>
          break;
 8003e14:	bf00      	nop
      }

      if (status == HAL_OK)
 8003e16:	7ffb      	ldrb	r3, [r7, #31]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d110      	bne.n	8003e3e <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	2201      	movs	r2, #1
 8003e24:	2102      	movs	r1, #2
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 f8cd 	bl	8003fc6 <QSPI_WaitFlagStateUntilTimeout>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8003e30:	7ffb      	ldrb	r3, [r7, #31]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d103      	bne.n	8003e3e <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e46:	e00a      	b.n	8003e5e <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4c:	f043 0208 	orr.w	r2, r3, #8
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	77fb      	strb	r3, [r7, #31]
 8003e58:	e001      	b.n	8003e5e <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8003e66:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3720      	adds	r7, #32
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08a      	sub	sp, #40	; 0x28
 8003e74:	af02      	add	r7, sp, #8
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8003e80:	f7fd ff78 	bl	8001d74 <HAL_GetTick>
 8003e84:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	3320      	adds	r3, #32
 8003e94:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d101      	bne.n	8003ea6 <HAL_QSPI_Receive+0x36>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	e07d      	b.n	8003fa2 <HAL_QSPI_Receive+0x132>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d16c      	bne.n	8003f94 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d05d      	beq.n	8003f82 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2222      	movs	r2, #34	; 0x22
 8003eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	1c5a      	adds	r2, r3, #1
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	1c5a      	adds	r2, r3, #1
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003efe:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8003f08:	e01c      	b.n	8003f44 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	2201      	movs	r2, #1
 8003f12:	2106      	movs	r1, #6
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 f856 	bl	8003fc6 <QSPI_WaitFlagStateUntilTimeout>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8003f1e:	7ffb      	ldrb	r3, [r7, #31]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d114      	bne.n	8003f4e <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	7812      	ldrb	r2, [r2, #0]
 8003f2c:	b2d2      	uxtb	r2, r2
 8003f2e:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f34:	1c5a      	adds	r2, r3, #1
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3e:	1e5a      	subs	r2, r3, #1
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1de      	bne.n	8003f0a <HAL_QSPI_Receive+0x9a>
 8003f4c:	e000      	b.n	8003f50 <HAL_QSPI_Receive+0xe0>
          break;
 8003f4e:	bf00      	nop
      }

      if (status == HAL_OK)
 8003f50:	7ffb      	ldrb	r3, [r7, #31]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d110      	bne.n	8003f78 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	2102      	movs	r1, #2
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 f830 	bl	8003fc6 <QSPI_WaitFlagStateUntilTimeout>
 8003f66:	4603      	mov	r3, r0
 8003f68:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8003f6a:	7ffb      	ldrb	r3, [r7, #31]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d103      	bne.n	8003f78 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2202      	movs	r2, #2
 8003f76:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f80:	e00a      	b.n	8003f98 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f86:	f043 0208 	orr.w	r2, r3, #8
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	77fb      	strb	r3, [r7, #31]
 8003f92:	e001      	b.n	8003f98 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003f94:	2302      	movs	r3, #2
 8003f96:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8003fa0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3720      	adds	r7, #32
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
 8003fb2:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	649a      	str	r2, [r3, #72]	; 0x48
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b084      	sub	sp, #16
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	60f8      	str	r0, [r7, #12]
 8003fce:	60b9      	str	r1, [r7, #8]
 8003fd0:	603b      	str	r3, [r7, #0]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003fd6:	e01a      	b.n	800400e <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fde:	d016      	beq.n	800400e <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fe0:	f7fd fec8 	bl	8001d74 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d302      	bcc.n	8003ff6 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10b      	bne.n	800400e <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2204      	movs	r2, #4
 8003ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004002:	f043 0201 	orr.w	r2, r3, #1
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e00e      	b.n	800402c <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689a      	ldr	r2, [r3, #8]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	4013      	ands	r3, r2
 8004018:	2b00      	cmp	r3, #0
 800401a:	bf14      	ite	ne
 800401c:	2301      	movne	r3, #1
 800401e:	2300      	moveq	r3, #0
 8004020:	b2db      	uxtb	r3, r3
 8004022:	461a      	mov	r2, r3
 8004024:	79fb      	ldrb	r3, [r7, #7]
 8004026:	429a      	cmp	r2, r3
 8004028:	d1d6      	bne.n	8003fd8 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	2b00      	cmp	r3, #0
 8004046:	d009      	beq.n	800405c <QSPI_Config+0x28>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800404e:	d005      	beq.n	800405c <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	3a01      	subs	r2, #1
 800405a:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 80b9 	beq.w	80041d8 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d05f      	beq.n	800412e <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	6892      	ldr	r2, [r2, #8]
 8004076:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	69db      	ldr	r3, [r3, #28]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d031      	beq.n	80040e4 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004088:	431a      	orrs	r2, r3
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408e:	431a      	orrs	r2, r3
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	431a      	orrs	r2, r3
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	049b      	lsls	r3, r3, #18
 800409c:	431a      	orrs	r2, r3
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	431a      	orrs	r2, r3
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	431a      	orrs	r2, r3
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	431a      	orrs	r2, r3
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	431a      	orrs	r2, r3
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	431a      	orrs	r2, r3
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	ea42 0103 	orr.w	r1, r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80040d4:	f000 812e 	beq.w	8004334 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	6852      	ldr	r2, [r2, #4]
 80040e0:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80040e2:	e127      	b.n	8004334 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ec:	431a      	orrs	r2, r3
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f2:	431a      	orrs	r2, r3
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f8:	431a      	orrs	r2, r3
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	049b      	lsls	r3, r3, #18
 8004100:	431a      	orrs	r2, r3
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	431a      	orrs	r2, r3
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	431a      	orrs	r2, r3
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	431a      	orrs	r2, r3
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	431a      	orrs	r2, r3
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	ea42 0103 	orr.w	r1, r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	430a      	orrs	r2, r1
 800412a:	615a      	str	r2, [r3, #20]
}
 800412c:	e102      	b.n	8004334 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d02e      	beq.n	8004194 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413e:	431a      	orrs	r2, r3
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004144:	431a      	orrs	r2, r3
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	431a      	orrs	r2, r3
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	049b      	lsls	r3, r3, #18
 8004152:	431a      	orrs	r2, r3
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	431a      	orrs	r2, r3
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	431a      	orrs	r2, r3
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	69db      	ldr	r3, [r3, #28]
 8004164:	431a      	orrs	r2, r3
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	431a      	orrs	r2, r3
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	ea42 0103 	orr.w	r1, r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	430a      	orrs	r2, r1
 800417c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004184:	f000 80d6 	beq.w	8004334 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	6852      	ldr	r2, [r2, #4]
 8004190:	619a      	str	r2, [r3, #24]
}
 8004192:	e0cf      	b.n	8004334 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419c:	431a      	orrs	r2, r3
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a2:	431a      	orrs	r2, r3
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	431a      	orrs	r2, r3
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	049b      	lsls	r3, r3, #18
 80041b0:	431a      	orrs	r2, r3
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	431a      	orrs	r2, r3
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	69db      	ldr	r3, [r3, #28]
 80041bc:	431a      	orrs	r2, r3
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	431a      	orrs	r2, r3
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	ea42 0103 	orr.w	r1, r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	615a      	str	r2, [r3, #20]
}
 80041d6:	e0ad      	b.n	8004334 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d058      	beq.n	8004292 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	6892      	ldr	r2, [r2, #8]
 80041e8:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d02d      	beq.n	800424e <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fa:	431a      	orrs	r2, r3
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004200:	431a      	orrs	r2, r3
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	431a      	orrs	r2, r3
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	049b      	lsls	r3, r3, #18
 800420e:	431a      	orrs	r2, r3
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	431a      	orrs	r2, r3
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	431a      	orrs	r2, r3
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	431a      	orrs	r2, r3
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	431a      	orrs	r2, r3
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	ea42 0103 	orr.w	r1, r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	430a      	orrs	r2, r1
 8004238:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004240:	d078      	beq.n	8004334 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	6852      	ldr	r2, [r2, #4]
 800424a:	619a      	str	r2, [r3, #24]
}
 800424c:	e072      	b.n	8004334 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004256:	431a      	orrs	r2, r3
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800425c:	431a      	orrs	r2, r3
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	431a      	orrs	r2, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	049b      	lsls	r3, r3, #18
 800426a:	431a      	orrs	r2, r3
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	431a      	orrs	r2, r3
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	431a      	orrs	r2, r3
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	431a      	orrs	r2, r3
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	ea42 0103 	orr.w	r1, r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	430a      	orrs	r2, r1
 800428e:	615a      	str	r2, [r3, #20]
}
 8004290:	e050      	b.n	8004334 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d02a      	beq.n	80042f0 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a2:	431a      	orrs	r2, r3
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a8:	431a      	orrs	r2, r3
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	431a      	orrs	r2, r3
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	049b      	lsls	r3, r3, #18
 80042b6:	431a      	orrs	r2, r3
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	431a      	orrs	r2, r3
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	431a      	orrs	r2, r3
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	69db      	ldr	r3, [r3, #28]
 80042c8:	431a      	orrs	r2, r3
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	ea42 0103 	orr.w	r1, r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	430a      	orrs	r2, r1
 80042da:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80042e2:	d027      	beq.n	8004334 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	6852      	ldr	r2, [r2, #4]
 80042ec:	619a      	str	r2, [r3, #24]
}
 80042ee:	e021      	b.n	8004334 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d01d      	beq.n	8004334 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004300:	431a      	orrs	r2, r3
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004306:	431a      	orrs	r2, r3
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	431a      	orrs	r2, r3
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	049b      	lsls	r3, r3, #18
 8004314:	431a      	orrs	r2, r3
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	431a      	orrs	r2, r3
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	69db      	ldr	r3, [r3, #28]
 8004320:	431a      	orrs	r2, r3
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	ea42 0103 	orr.w	r1, r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	430a      	orrs	r2, r1
 8004332:	615a      	str	r2, [r3, #20]
}
 8004334:	bf00      	nop
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b08c      	sub	sp, #48	; 0x30
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d102      	bne.n	8004354 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	f000 bc48 	b.w	8004be4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 8088 	beq.w	8004472 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004362:	4b99      	ldr	r3, [pc, #612]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800436a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800436c:	4b96      	ldr	r3, [pc, #600]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 800436e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004370:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004374:	2b10      	cmp	r3, #16
 8004376:	d007      	beq.n	8004388 <HAL_RCC_OscConfig+0x48>
 8004378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437a:	2b18      	cmp	r3, #24
 800437c:	d111      	bne.n	80043a2 <HAL_RCC_OscConfig+0x62>
 800437e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004380:	f003 0303 	and.w	r3, r3, #3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d10c      	bne.n	80043a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004388:	4b8f      	ldr	r3, [pc, #572]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d06d      	beq.n	8004470 <HAL_RCC_OscConfig+0x130>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d169      	bne.n	8004470 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	f000 bc21 	b.w	8004be4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043aa:	d106      	bne.n	80043ba <HAL_RCC_OscConfig+0x7a>
 80043ac:	4b86      	ldr	r3, [pc, #536]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a85      	ldr	r2, [pc, #532]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 80043b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b6:	6013      	str	r3, [r2, #0]
 80043b8:	e02e      	b.n	8004418 <HAL_RCC_OscConfig+0xd8>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10c      	bne.n	80043dc <HAL_RCC_OscConfig+0x9c>
 80043c2:	4b81      	ldr	r3, [pc, #516]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a80      	ldr	r2, [pc, #512]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 80043c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	4b7e      	ldr	r3, [pc, #504]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a7d      	ldr	r2, [pc, #500]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 80043d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	e01d      	b.n	8004418 <HAL_RCC_OscConfig+0xd8>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043e4:	d10c      	bne.n	8004400 <HAL_RCC_OscConfig+0xc0>
 80043e6:	4b78      	ldr	r3, [pc, #480]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a77      	ldr	r2, [pc, #476]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 80043ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	4b75      	ldr	r3, [pc, #468]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a74      	ldr	r2, [pc, #464]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 80043f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	e00b      	b.n	8004418 <HAL_RCC_OscConfig+0xd8>
 8004400:	4b71      	ldr	r3, [pc, #452]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a70      	ldr	r2, [pc, #448]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 8004406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800440a:	6013      	str	r3, [r2, #0]
 800440c:	4b6e      	ldr	r3, [pc, #440]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a6d      	ldr	r2, [pc, #436]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 8004412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d013      	beq.n	8004448 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004420:	f7fd fca8 	bl	8001d74 <HAL_GetTick>
 8004424:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004428:	f7fd fca4 	bl	8001d74 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b64      	cmp	r3, #100	; 0x64
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e3d4      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800443a:	4b63      	ldr	r3, [pc, #396]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d0f0      	beq.n	8004428 <HAL_RCC_OscConfig+0xe8>
 8004446:	e014      	b.n	8004472 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004448:	f7fd fc94 	bl	8001d74 <HAL_GetTick>
 800444c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004450:	f7fd fc90 	bl	8001d74 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b64      	cmp	r3, #100	; 0x64
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e3c0      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004462:	4b59      	ldr	r3, [pc, #356]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1f0      	bne.n	8004450 <HAL_RCC_OscConfig+0x110>
 800446e:	e000      	b.n	8004472 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 80ca 	beq.w	8004614 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004480:	4b51      	ldr	r3, [pc, #324]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004488:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800448a:	4b4f      	ldr	r3, [pc, #316]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 800448c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d007      	beq.n	80044a6 <HAL_RCC_OscConfig+0x166>
 8004496:	6a3b      	ldr	r3, [r7, #32]
 8004498:	2b18      	cmp	r3, #24
 800449a:	d156      	bne.n	800454a <HAL_RCC_OscConfig+0x20a>
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	f003 0303 	and.w	r3, r3, #3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d151      	bne.n	800454a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044a6:	4b48      	ldr	r3, [pc, #288]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0304 	and.w	r3, r3, #4
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d005      	beq.n	80044be <HAL_RCC_OscConfig+0x17e>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e392      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80044be:	4b42      	ldr	r3, [pc, #264]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f023 0219 	bic.w	r2, r3, #25
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	493f      	ldr	r1, [pc, #252]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d0:	f7fd fc50 	bl	8001d74 <HAL_GetTick>
 80044d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044d8:	f7fd fc4c 	bl	8001d74 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e37c      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044ea:	4b37      	ldr	r3, [pc, #220]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0304 	and.w	r3, r3, #4
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0f0      	beq.n	80044d8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f6:	f7fd fc6d 	bl	8001dd4 <HAL_GetREVID>
 80044fa:	4603      	mov	r3, r0
 80044fc:	f241 0203 	movw	r2, #4099	; 0x1003
 8004500:	4293      	cmp	r3, r2
 8004502:	d817      	bhi.n	8004534 <HAL_RCC_OscConfig+0x1f4>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	2b40      	cmp	r3, #64	; 0x40
 800450a:	d108      	bne.n	800451e <HAL_RCC_OscConfig+0x1de>
 800450c:	4b2e      	ldr	r3, [pc, #184]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004514:	4a2c      	ldr	r2, [pc, #176]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 8004516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800451a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800451c:	e07a      	b.n	8004614 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800451e:	4b2a      	ldr	r3, [pc, #168]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	031b      	lsls	r3, r3, #12
 800452c:	4926      	ldr	r1, [pc, #152]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 800452e:	4313      	orrs	r3, r2
 8004530:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004532:	e06f      	b.n	8004614 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004534:	4b24      	ldr	r3, [pc, #144]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	061b      	lsls	r3, r3, #24
 8004542:	4921      	ldr	r1, [pc, #132]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 8004544:	4313      	orrs	r3, r2
 8004546:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004548:	e064      	b.n	8004614 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d047      	beq.n	80045e2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004552:	4b1d      	ldr	r3, [pc, #116]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f023 0219 	bic.w	r2, r3, #25
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	491a      	ldr	r1, [pc, #104]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 8004560:	4313      	orrs	r3, r2
 8004562:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004564:	f7fd fc06 	bl	8001d74 <HAL_GetTick>
 8004568:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800456c:	f7fd fc02 	bl	8001d74 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e332      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800457e:	4b12      	ldr	r3, [pc, #72]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0304 	and.w	r3, r3, #4
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0f0      	beq.n	800456c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800458a:	f7fd fc23 	bl	8001dd4 <HAL_GetREVID>
 800458e:	4603      	mov	r3, r0
 8004590:	f241 0203 	movw	r2, #4099	; 0x1003
 8004594:	4293      	cmp	r3, r2
 8004596:	d819      	bhi.n	80045cc <HAL_RCC_OscConfig+0x28c>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	2b40      	cmp	r3, #64	; 0x40
 800459e:	d108      	bne.n	80045b2 <HAL_RCC_OscConfig+0x272>
 80045a0:	4b09      	ldr	r3, [pc, #36]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80045a8:	4a07      	ldr	r2, [pc, #28]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 80045aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045ae:	6053      	str	r3, [r2, #4]
 80045b0:	e030      	b.n	8004614 <HAL_RCC_OscConfig+0x2d4>
 80045b2:	4b05      	ldr	r3, [pc, #20]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	031b      	lsls	r3, r3, #12
 80045c0:	4901      	ldr	r1, [pc, #4]	; (80045c8 <HAL_RCC_OscConfig+0x288>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	604b      	str	r3, [r1, #4]
 80045c6:	e025      	b.n	8004614 <HAL_RCC_OscConfig+0x2d4>
 80045c8:	58024400 	.word	0x58024400
 80045cc:	4b9a      	ldr	r3, [pc, #616]	; (8004838 <HAL_RCC_OscConfig+0x4f8>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	061b      	lsls	r3, r3, #24
 80045da:	4997      	ldr	r1, [pc, #604]	; (8004838 <HAL_RCC_OscConfig+0x4f8>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	604b      	str	r3, [r1, #4]
 80045e0:	e018      	b.n	8004614 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045e2:	4b95      	ldr	r3, [pc, #596]	; (8004838 <HAL_RCC_OscConfig+0x4f8>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a94      	ldr	r2, [pc, #592]	; (8004838 <HAL_RCC_OscConfig+0x4f8>)
 80045e8:	f023 0301 	bic.w	r3, r3, #1
 80045ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ee:	f7fd fbc1 	bl	8001d74 <HAL_GetTick>
 80045f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045f4:	e008      	b.n	8004608 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045f6:	f7fd fbbd 	bl	8001d74 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d901      	bls.n	8004608 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e2ed      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004608:	4b8b      	ldr	r3, [pc, #556]	; (8004838 <HAL_RCC_OscConfig+0x4f8>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1f0      	bne.n	80045f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0310 	and.w	r3, r3, #16
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 80a9 	beq.w	8004774 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004622:	4b85      	ldr	r3, [pc, #532]	; (8004838 <HAL_RCC_OscConfig+0x4f8>)
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800462a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800462c:	4b82      	ldr	r3, [pc, #520]	; (8004838 <HAL_RCC_OscConfig+0x4f8>)
 800462e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004630:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	2b08      	cmp	r3, #8
 8004636:	d007      	beq.n	8004648 <HAL_RCC_OscConfig+0x308>
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	2b18      	cmp	r3, #24
 800463c:	d13a      	bne.n	80046b4 <HAL_RCC_OscConfig+0x374>
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f003 0303 	and.w	r3, r3, #3
 8004644:	2b01      	cmp	r3, #1
 8004646:	d135      	bne.n	80046b4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004648:	4b7b      	ldr	r3, [pc, #492]	; (8004838 <HAL_RCC_OscConfig+0x4f8>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004650:	2b00      	cmp	r3, #0
 8004652:	d005      	beq.n	8004660 <HAL_RCC_OscConfig+0x320>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	2b80      	cmp	r3, #128	; 0x80
 800465a:	d001      	beq.n	8004660 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e2c1      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004660:	f7fd fbb8 	bl	8001dd4 <HAL_GetREVID>
 8004664:	4603      	mov	r3, r0
 8004666:	f241 0203 	movw	r2, #4099	; 0x1003
 800466a:	4293      	cmp	r3, r2
 800466c:	d817      	bhi.n	800469e <HAL_RCC_OscConfig+0x35e>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	2b20      	cmp	r3, #32
 8004674:	d108      	bne.n	8004688 <HAL_RCC_OscConfig+0x348>
 8004676:	4b70      	ldr	r3, [pc, #448]	; (8004838 <HAL_RCC_OscConfig+0x4f8>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800467e:	4a6e      	ldr	r2, [pc, #440]	; (8004838 <HAL_RCC_OscConfig+0x4f8>)
 8004680:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004684:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004686:	e075      	b.n	8004774 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004688:	4b6b      	ldr	r3, [pc, #428]	; (8004838 <HAL_RCC_OscConfig+0x4f8>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	069b      	lsls	r3, r3, #26
 8004696:	4968      	ldr	r1, [pc, #416]	; (8004838 <HAL_RCC_OscConfig+0x4f8>)
 8004698:	4313      	orrs	r3, r2
 800469a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800469c:	e06a      	b.n	8004774 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800469e:	4b66      	ldr	r3, [pc, #408]	; (8004838 <HAL_RCC_OscConfig+0x4f8>)
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	061b      	lsls	r3, r3, #24
 80046ac:	4962      	ldr	r1, [pc, #392]	; (8004838 <HAL_RCC_OscConfig+0x4f8>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046b2:	e05f      	b.n	8004774 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d042      	beq.n	8004742 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80046bc:	4b5e      	ldr	r3, [pc, #376]	; (8004838 <HAL_RCC_OscConfig+0x4f8>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a5d      	ldr	r2, [pc, #372]	; (8004838 <HAL_RCC_OscConfig+0x4f8>)
 80046c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c8:	f7fd fb54 	bl	8001d74 <HAL_GetTick>
 80046cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80046d0:	f7fd fb50 	bl	8001d74 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e280      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046e2:	4b55      	ldr	r3, [pc, #340]	; (8004838 <HAL_RCC_OscConfig+0x4f8>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0f0      	beq.n	80046d0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046ee:	f7fd fb71 	bl	8001dd4 <HAL_GetREVID>
 80046f2:	4603      	mov	r3, r0
 80046f4:	f241 0203 	movw	r2, #4099	; 0x1003
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d817      	bhi.n	800472c <HAL_RCC_OscConfig+0x3ec>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	2b20      	cmp	r3, #32
 8004702:	d108      	bne.n	8004716 <HAL_RCC_OscConfig+0x3d6>
 8004704:	4b4c      	ldr	r3, [pc, #304]	; (8004838 <HAL_RCC_OscConfig+0x4f8>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800470c:	4a4a      	ldr	r2, [pc, #296]	; (8004838 <HAL_RCC_OscConfig+0x4f8>)
 800470e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004712:	6053      	str	r3, [r2, #4]
 8004714:	e02e      	b.n	8004774 <HAL_RCC_OscConfig+0x434>
 8004716:	4b48      	ldr	r3, [pc, #288]	; (8004838 <HAL_RCC_OscConfig+0x4f8>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	069b      	lsls	r3, r3, #26
 8004724:	4944      	ldr	r1, [pc, #272]	; (8004838 <HAL_RCC_OscConfig+0x4f8>)
 8004726:	4313      	orrs	r3, r2
 8004728:	604b      	str	r3, [r1, #4]
 800472a:	e023      	b.n	8004774 <HAL_RCC_OscConfig+0x434>
 800472c:	4b42      	ldr	r3, [pc, #264]	; (8004838 <HAL_RCC_OscConfig+0x4f8>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	061b      	lsls	r3, r3, #24
 800473a:	493f      	ldr	r1, [pc, #252]	; (8004838 <HAL_RCC_OscConfig+0x4f8>)
 800473c:	4313      	orrs	r3, r2
 800473e:	60cb      	str	r3, [r1, #12]
 8004740:	e018      	b.n	8004774 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004742:	4b3d      	ldr	r3, [pc, #244]	; (8004838 <HAL_RCC_OscConfig+0x4f8>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a3c      	ldr	r2, [pc, #240]	; (8004838 <HAL_RCC_OscConfig+0x4f8>)
 8004748:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800474c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474e:	f7fd fb11 	bl	8001d74 <HAL_GetTick>
 8004752:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004754:	e008      	b.n	8004768 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004756:	f7fd fb0d 	bl	8001d74 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d901      	bls.n	8004768 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e23d      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004768:	4b33      	ldr	r3, [pc, #204]	; (8004838 <HAL_RCC_OscConfig+0x4f8>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1f0      	bne.n	8004756 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0308 	and.w	r3, r3, #8
 800477c:	2b00      	cmp	r3, #0
 800477e:	d036      	beq.n	80047ee <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d019      	beq.n	80047bc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004788:	4b2b      	ldr	r3, [pc, #172]	; (8004838 <HAL_RCC_OscConfig+0x4f8>)
 800478a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800478c:	4a2a      	ldr	r2, [pc, #168]	; (8004838 <HAL_RCC_OscConfig+0x4f8>)
 800478e:	f043 0301 	orr.w	r3, r3, #1
 8004792:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004794:	f7fd faee 	bl	8001d74 <HAL_GetTick>
 8004798:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800479c:	f7fd faea 	bl	8001d74 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e21a      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047ae:	4b22      	ldr	r3, [pc, #136]	; (8004838 <HAL_RCC_OscConfig+0x4f8>)
 80047b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f0      	beq.n	800479c <HAL_RCC_OscConfig+0x45c>
 80047ba:	e018      	b.n	80047ee <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047bc:	4b1e      	ldr	r3, [pc, #120]	; (8004838 <HAL_RCC_OscConfig+0x4f8>)
 80047be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047c0:	4a1d      	ldr	r2, [pc, #116]	; (8004838 <HAL_RCC_OscConfig+0x4f8>)
 80047c2:	f023 0301 	bic.w	r3, r3, #1
 80047c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c8:	f7fd fad4 	bl	8001d74 <HAL_GetTick>
 80047cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047d0:	f7fd fad0 	bl	8001d74 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e200      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047e2:	4b15      	ldr	r3, [pc, #84]	; (8004838 <HAL_RCC_OscConfig+0x4f8>)
 80047e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1f0      	bne.n	80047d0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0320 	and.w	r3, r3, #32
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d039      	beq.n	800486e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d01c      	beq.n	800483c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004802:	4b0d      	ldr	r3, [pc, #52]	; (8004838 <HAL_RCC_OscConfig+0x4f8>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a0c      	ldr	r2, [pc, #48]	; (8004838 <HAL_RCC_OscConfig+0x4f8>)
 8004808:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800480c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800480e:	f7fd fab1 	bl	8001d74 <HAL_GetTick>
 8004812:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004814:	e008      	b.n	8004828 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004816:	f7fd faad 	bl	8001d74 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e1dd      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004828:	4b03      	ldr	r3, [pc, #12]	; (8004838 <HAL_RCC_OscConfig+0x4f8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0f0      	beq.n	8004816 <HAL_RCC_OscConfig+0x4d6>
 8004834:	e01b      	b.n	800486e <HAL_RCC_OscConfig+0x52e>
 8004836:	bf00      	nop
 8004838:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800483c:	4b9b      	ldr	r3, [pc, #620]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a9a      	ldr	r2, [pc, #616]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004842:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004846:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004848:	f7fd fa94 	bl	8001d74 <HAL_GetTick>
 800484c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004850:	f7fd fa90 	bl	8001d74 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e1c0      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004862:	4b92      	ldr	r3, [pc, #584]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1f0      	bne.n	8004850 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0304 	and.w	r3, r3, #4
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 8081 	beq.w	800497e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800487c:	4b8c      	ldr	r3, [pc, #560]	; (8004ab0 <HAL_RCC_OscConfig+0x770>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a8b      	ldr	r2, [pc, #556]	; (8004ab0 <HAL_RCC_OscConfig+0x770>)
 8004882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004886:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004888:	f7fd fa74 	bl	8001d74 <HAL_GetTick>
 800488c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004890:	f7fd fa70 	bl	8001d74 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b64      	cmp	r3, #100	; 0x64
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e1a0      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048a2:	4b83      	ldr	r3, [pc, #524]	; (8004ab0 <HAL_RCC_OscConfig+0x770>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d0f0      	beq.n	8004890 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d106      	bne.n	80048c4 <HAL_RCC_OscConfig+0x584>
 80048b6:	4b7d      	ldr	r3, [pc, #500]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 80048b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ba:	4a7c      	ldr	r2, [pc, #496]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 80048bc:	f043 0301 	orr.w	r3, r3, #1
 80048c0:	6713      	str	r3, [r2, #112]	; 0x70
 80048c2:	e02d      	b.n	8004920 <HAL_RCC_OscConfig+0x5e0>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10c      	bne.n	80048e6 <HAL_RCC_OscConfig+0x5a6>
 80048cc:	4b77      	ldr	r3, [pc, #476]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 80048ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d0:	4a76      	ldr	r2, [pc, #472]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 80048d2:	f023 0301 	bic.w	r3, r3, #1
 80048d6:	6713      	str	r3, [r2, #112]	; 0x70
 80048d8:	4b74      	ldr	r3, [pc, #464]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 80048da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048dc:	4a73      	ldr	r2, [pc, #460]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 80048de:	f023 0304 	bic.w	r3, r3, #4
 80048e2:	6713      	str	r3, [r2, #112]	; 0x70
 80048e4:	e01c      	b.n	8004920 <HAL_RCC_OscConfig+0x5e0>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	2b05      	cmp	r3, #5
 80048ec:	d10c      	bne.n	8004908 <HAL_RCC_OscConfig+0x5c8>
 80048ee:	4b6f      	ldr	r3, [pc, #444]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 80048f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f2:	4a6e      	ldr	r2, [pc, #440]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 80048f4:	f043 0304 	orr.w	r3, r3, #4
 80048f8:	6713      	str	r3, [r2, #112]	; 0x70
 80048fa:	4b6c      	ldr	r3, [pc, #432]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 80048fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fe:	4a6b      	ldr	r2, [pc, #428]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004900:	f043 0301 	orr.w	r3, r3, #1
 8004904:	6713      	str	r3, [r2, #112]	; 0x70
 8004906:	e00b      	b.n	8004920 <HAL_RCC_OscConfig+0x5e0>
 8004908:	4b68      	ldr	r3, [pc, #416]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 800490a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490c:	4a67      	ldr	r2, [pc, #412]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 800490e:	f023 0301 	bic.w	r3, r3, #1
 8004912:	6713      	str	r3, [r2, #112]	; 0x70
 8004914:	4b65      	ldr	r3, [pc, #404]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004918:	4a64      	ldr	r2, [pc, #400]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 800491a:	f023 0304 	bic.w	r3, r3, #4
 800491e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d015      	beq.n	8004954 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004928:	f7fd fa24 	bl	8001d74 <HAL_GetTick>
 800492c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800492e:	e00a      	b.n	8004946 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004930:	f7fd fa20 	bl	8001d74 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	f241 3288 	movw	r2, #5000	; 0x1388
 800493e:	4293      	cmp	r3, r2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e14e      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004946:	4b59      	ldr	r3, [pc, #356]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d0ee      	beq.n	8004930 <HAL_RCC_OscConfig+0x5f0>
 8004952:	e014      	b.n	800497e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004954:	f7fd fa0e 	bl	8001d74 <HAL_GetTick>
 8004958:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800495a:	e00a      	b.n	8004972 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800495c:	f7fd fa0a 	bl	8001d74 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	f241 3288 	movw	r2, #5000	; 0x1388
 800496a:	4293      	cmp	r3, r2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e138      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004972:	4b4e      	ldr	r3, [pc, #312]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1ee      	bne.n	800495c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 812d 	beq.w	8004be2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004988:	4b48      	ldr	r3, [pc, #288]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004990:	2b18      	cmp	r3, #24
 8004992:	f000 80bd 	beq.w	8004b10 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	2b02      	cmp	r3, #2
 800499c:	f040 809e 	bne.w	8004adc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a0:	4b42      	ldr	r3, [pc, #264]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a41      	ldr	r2, [pc, #260]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 80049a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ac:	f7fd f9e2 	bl	8001d74 <HAL_GetTick>
 80049b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b4:	f7fd f9de 	bl	8001d74 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e10e      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049c6:	4b39      	ldr	r3, [pc, #228]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1f0      	bne.n	80049b4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049d2:	4b36      	ldr	r3, [pc, #216]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 80049d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049d6:	4b37      	ldr	r3, [pc, #220]	; (8004ab4 <HAL_RCC_OscConfig+0x774>)
 80049d8:	4013      	ands	r3, r2
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80049e2:	0112      	lsls	r2, r2, #4
 80049e4:	430a      	orrs	r2, r1
 80049e6:	4931      	ldr	r1, [pc, #196]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	628b      	str	r3, [r1, #40]	; 0x28
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f0:	3b01      	subs	r3, #1
 80049f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fa:	3b01      	subs	r3, #1
 80049fc:	025b      	lsls	r3, r3, #9
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	431a      	orrs	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a06:	3b01      	subs	r3, #1
 8004a08:	041b      	lsls	r3, r3, #16
 8004a0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a14:	3b01      	subs	r3, #1
 8004a16:	061b      	lsls	r3, r3, #24
 8004a18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a1c:	4923      	ldr	r1, [pc, #140]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004a22:	4b22      	ldr	r3, [pc, #136]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a26:	4a21      	ldr	r2, [pc, #132]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a28:	f023 0301 	bic.w	r3, r3, #1
 8004a2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004a2e:	4b1f      	ldr	r3, [pc, #124]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a32:	4b21      	ldr	r3, [pc, #132]	; (8004ab8 <HAL_RCC_OscConfig+0x778>)
 8004a34:	4013      	ands	r3, r2
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004a3a:	00d2      	lsls	r2, r2, #3
 8004a3c:	491b      	ldr	r1, [pc, #108]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004a42:	4b1a      	ldr	r3, [pc, #104]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a46:	f023 020c 	bic.w	r2, r3, #12
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	4917      	ldr	r1, [pc, #92]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004a54:	4b15      	ldr	r3, [pc, #84]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a58:	f023 0202 	bic.w	r2, r3, #2
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a60:	4912      	ldr	r1, [pc, #72]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004a66:	4b11      	ldr	r3, [pc, #68]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6a:	4a10      	ldr	r2, [pc, #64]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a72:	4b0e      	ldr	r3, [pc, #56]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a76:	4a0d      	ldr	r2, [pc, #52]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004a7e:	4b0b      	ldr	r3, [pc, #44]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a82:	4a0a      	ldr	r2, [pc, #40]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004a8a:	4b08      	ldr	r3, [pc, #32]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8e:	4a07      	ldr	r2, [pc, #28]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a90:	f043 0301 	orr.w	r3, r3, #1
 8004a94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a96:	4b05      	ldr	r3, [pc, #20]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a04      	ldr	r2, [pc, #16]	; (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa2:	f7fd f967 	bl	8001d74 <HAL_GetTick>
 8004aa6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004aa8:	e011      	b.n	8004ace <HAL_RCC_OscConfig+0x78e>
 8004aaa:	bf00      	nop
 8004aac:	58024400 	.word	0x58024400
 8004ab0:	58024800 	.word	0x58024800
 8004ab4:	fffffc0c 	.word	0xfffffc0c
 8004ab8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004abc:	f7fd f95a 	bl	8001d74 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e08a      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ace:	4b47      	ldr	r3, [pc, #284]	; (8004bec <HAL_RCC_OscConfig+0x8ac>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d0f0      	beq.n	8004abc <HAL_RCC_OscConfig+0x77c>
 8004ada:	e082      	b.n	8004be2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004adc:	4b43      	ldr	r3, [pc, #268]	; (8004bec <HAL_RCC_OscConfig+0x8ac>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a42      	ldr	r2, [pc, #264]	; (8004bec <HAL_RCC_OscConfig+0x8ac>)
 8004ae2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae8:	f7fd f944 	bl	8001d74 <HAL_GetTick>
 8004aec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004aee:	e008      	b.n	8004b02 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004af0:	f7fd f940 	bl	8001d74 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e070      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b02:	4b3a      	ldr	r3, [pc, #232]	; (8004bec <HAL_RCC_OscConfig+0x8ac>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1f0      	bne.n	8004af0 <HAL_RCC_OscConfig+0x7b0>
 8004b0e:	e068      	b.n	8004be2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004b10:	4b36      	ldr	r3, [pc, #216]	; (8004bec <HAL_RCC_OscConfig+0x8ac>)
 8004b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b14:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004b16:	4b35      	ldr	r3, [pc, #212]	; (8004bec <HAL_RCC_OscConfig+0x8ac>)
 8004b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d031      	beq.n	8004b88 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	f003 0203 	and.w	r2, r3, #3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d12a      	bne.n	8004b88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	091b      	lsrs	r3, r3, #4
 8004b36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d122      	bne.n	8004b88 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d11a      	bne.n	8004b88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	0a5b      	lsrs	r3, r3, #9
 8004b56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b5e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d111      	bne.n	8004b88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	0c1b      	lsrs	r3, r3, #16
 8004b68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b70:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d108      	bne.n	8004b88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	0e1b      	lsrs	r3, r3, #24
 8004b7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b82:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d001      	beq.n	8004b8c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e02b      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004b8c:	4b17      	ldr	r3, [pc, #92]	; (8004bec <HAL_RCC_OscConfig+0x8ac>)
 8004b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b90:	08db      	lsrs	r3, r3, #3
 8004b92:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b96:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d01f      	beq.n	8004be2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004ba2:	4b12      	ldr	r3, [pc, #72]	; (8004bec <HAL_RCC_OscConfig+0x8ac>)
 8004ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba6:	4a11      	ldr	r2, [pc, #68]	; (8004bec <HAL_RCC_OscConfig+0x8ac>)
 8004ba8:	f023 0301 	bic.w	r3, r3, #1
 8004bac:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004bae:	f7fd f8e1 	bl	8001d74 <HAL_GetTick>
 8004bb2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004bb4:	bf00      	nop
 8004bb6:	f7fd f8dd 	bl	8001d74 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d0f9      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004bc2:	4b0a      	ldr	r3, [pc, #40]	; (8004bec <HAL_RCC_OscConfig+0x8ac>)
 8004bc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bc6:	4b0a      	ldr	r3, [pc, #40]	; (8004bf0 <HAL_RCC_OscConfig+0x8b0>)
 8004bc8:	4013      	ands	r3, r2
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004bce:	00d2      	lsls	r2, r2, #3
 8004bd0:	4906      	ldr	r1, [pc, #24]	; (8004bec <HAL_RCC_OscConfig+0x8ac>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004bd6:	4b05      	ldr	r3, [pc, #20]	; (8004bec <HAL_RCC_OscConfig+0x8ac>)
 8004bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bda:	4a04      	ldr	r2, [pc, #16]	; (8004bec <HAL_RCC_OscConfig+0x8ac>)
 8004bdc:	f043 0301 	orr.w	r3, r3, #1
 8004be0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3730      	adds	r7, #48	; 0x30
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	58024400 	.word	0x58024400
 8004bf0:	ffff0007 	.word	0xffff0007

08004bf4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e19c      	b.n	8004f42 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c08:	4b8a      	ldr	r3, [pc, #552]	; (8004e34 <HAL_RCC_ClockConfig+0x240>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 030f 	and.w	r3, r3, #15
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d910      	bls.n	8004c38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c16:	4b87      	ldr	r3, [pc, #540]	; (8004e34 <HAL_RCC_ClockConfig+0x240>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f023 020f 	bic.w	r2, r3, #15
 8004c1e:	4985      	ldr	r1, [pc, #532]	; (8004e34 <HAL_RCC_ClockConfig+0x240>)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c26:	4b83      	ldr	r3, [pc, #524]	; (8004e34 <HAL_RCC_ClockConfig+0x240>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 030f 	and.w	r3, r3, #15
 8004c2e:	683a      	ldr	r2, [r7, #0]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d001      	beq.n	8004c38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e184      	b.n	8004f42 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0304 	and.w	r3, r3, #4
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d010      	beq.n	8004c66 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691a      	ldr	r2, [r3, #16]
 8004c48:	4b7b      	ldr	r3, [pc, #492]	; (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d908      	bls.n	8004c66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004c54:	4b78      	ldr	r3, [pc, #480]	; (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	4975      	ldr	r1, [pc, #468]	; (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0308 	and.w	r3, r3, #8
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d010      	beq.n	8004c94 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	695a      	ldr	r2, [r3, #20]
 8004c76:	4b70      	ldr	r3, [pc, #448]	; (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d908      	bls.n	8004c94 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c82:	4b6d      	ldr	r3, [pc, #436]	; (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	496a      	ldr	r1, [pc, #424]	; (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0310 	and.w	r3, r3, #16
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d010      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	699a      	ldr	r2, [r3, #24]
 8004ca4:	4b64      	ldr	r3, [pc, #400]	; (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004ca6:	69db      	ldr	r3, [r3, #28]
 8004ca8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d908      	bls.n	8004cc2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004cb0:	4b61      	ldr	r3, [pc, #388]	; (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	495e      	ldr	r1, [pc, #376]	; (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0320 	and.w	r3, r3, #32
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d010      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	69da      	ldr	r2, [r3, #28]
 8004cd2:	4b59      	ldr	r3, [pc, #356]	; (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d908      	bls.n	8004cf0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004cde:	4b56      	ldr	r3, [pc, #344]	; (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	4953      	ldr	r1, [pc, #332]	; (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d010      	beq.n	8004d1e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68da      	ldr	r2, [r3, #12]
 8004d00:	4b4d      	ldr	r3, [pc, #308]	; (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	f003 030f 	and.w	r3, r3, #15
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d908      	bls.n	8004d1e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d0c:	4b4a      	ldr	r3, [pc, #296]	; (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	f023 020f 	bic.w	r2, r3, #15
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	4947      	ldr	r1, [pc, #284]	; (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d055      	beq.n	8004dd6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004d2a:	4b43      	ldr	r3, [pc, #268]	; (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	4940      	ldr	r1, [pc, #256]	; (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d107      	bne.n	8004d54 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d44:	4b3c      	ldr	r3, [pc, #240]	; (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d121      	bne.n	8004d94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e0f6      	b.n	8004f42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	2b03      	cmp	r3, #3
 8004d5a:	d107      	bne.n	8004d6c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d5c:	4b36      	ldr	r3, [pc, #216]	; (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d115      	bne.n	8004d94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e0ea      	b.n	8004f42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d107      	bne.n	8004d84 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d74:	4b30      	ldr	r3, [pc, #192]	; (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d109      	bne.n	8004d94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e0de      	b.n	8004f42 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d84:	4b2c      	ldr	r3, [pc, #176]	; (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0304 	and.w	r3, r3, #4
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d101      	bne.n	8004d94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e0d6      	b.n	8004f42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d94:	4b28      	ldr	r3, [pc, #160]	; (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	f023 0207 	bic.w	r2, r3, #7
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	4925      	ldr	r1, [pc, #148]	; (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004da6:	f7fc ffe5 	bl	8001d74 <HAL_GetTick>
 8004daa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dac:	e00a      	b.n	8004dc4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dae:	f7fc ffe1 	bl	8001d74 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e0be      	b.n	8004f42 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dc4:	4b1c      	ldr	r3, [pc, #112]	; (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d1eb      	bne.n	8004dae <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d010      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68da      	ldr	r2, [r3, #12]
 8004de6:	4b14      	ldr	r3, [pc, #80]	; (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	f003 030f 	and.w	r3, r3, #15
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d208      	bcs.n	8004e04 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004df2:	4b11      	ldr	r3, [pc, #68]	; (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	f023 020f 	bic.w	r2, r3, #15
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	490e      	ldr	r1, [pc, #56]	; (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e04:	4b0b      	ldr	r3, [pc, #44]	; (8004e34 <HAL_RCC_ClockConfig+0x240>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 030f 	and.w	r3, r3, #15
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d214      	bcs.n	8004e3c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e12:	4b08      	ldr	r3, [pc, #32]	; (8004e34 <HAL_RCC_ClockConfig+0x240>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f023 020f 	bic.w	r2, r3, #15
 8004e1a:	4906      	ldr	r1, [pc, #24]	; (8004e34 <HAL_RCC_ClockConfig+0x240>)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e22:	4b04      	ldr	r3, [pc, #16]	; (8004e34 <HAL_RCC_ClockConfig+0x240>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 030f 	and.w	r3, r3, #15
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d005      	beq.n	8004e3c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e086      	b.n	8004f42 <HAL_RCC_ClockConfig+0x34e>
 8004e34:	52002000 	.word	0x52002000
 8004e38:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0304 	and.w	r3, r3, #4
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d010      	beq.n	8004e6a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	691a      	ldr	r2, [r3, #16]
 8004e4c:	4b3f      	ldr	r3, [pc, #252]	; (8004f4c <HAL_RCC_ClockConfig+0x358>)
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d208      	bcs.n	8004e6a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e58:	4b3c      	ldr	r3, [pc, #240]	; (8004f4c <HAL_RCC_ClockConfig+0x358>)
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	4939      	ldr	r1, [pc, #228]	; (8004f4c <HAL_RCC_ClockConfig+0x358>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0308 	and.w	r3, r3, #8
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d010      	beq.n	8004e98 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	695a      	ldr	r2, [r3, #20]
 8004e7a:	4b34      	ldr	r3, [pc, #208]	; (8004f4c <HAL_RCC_ClockConfig+0x358>)
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d208      	bcs.n	8004e98 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e86:	4b31      	ldr	r3, [pc, #196]	; (8004f4c <HAL_RCC_ClockConfig+0x358>)
 8004e88:	69db      	ldr	r3, [r3, #28]
 8004e8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	492e      	ldr	r1, [pc, #184]	; (8004f4c <HAL_RCC_ClockConfig+0x358>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0310 	and.w	r3, r3, #16
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d010      	beq.n	8004ec6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	699a      	ldr	r2, [r3, #24]
 8004ea8:	4b28      	ldr	r3, [pc, #160]	; (8004f4c <HAL_RCC_ClockConfig+0x358>)
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d208      	bcs.n	8004ec6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004eb4:	4b25      	ldr	r3, [pc, #148]	; (8004f4c <HAL_RCC_ClockConfig+0x358>)
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	4922      	ldr	r1, [pc, #136]	; (8004f4c <HAL_RCC_ClockConfig+0x358>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0320 	and.w	r3, r3, #32
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d010      	beq.n	8004ef4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	69da      	ldr	r2, [r3, #28]
 8004ed6:	4b1d      	ldr	r3, [pc, #116]	; (8004f4c <HAL_RCC_ClockConfig+0x358>)
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d208      	bcs.n	8004ef4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004ee2:	4b1a      	ldr	r3, [pc, #104]	; (8004f4c <HAL_RCC_ClockConfig+0x358>)
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	69db      	ldr	r3, [r3, #28]
 8004eee:	4917      	ldr	r1, [pc, #92]	; (8004f4c <HAL_RCC_ClockConfig+0x358>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004ef4:	f000 f834 	bl	8004f60 <HAL_RCC_GetSysClockFreq>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	4b14      	ldr	r3, [pc, #80]	; (8004f4c <HAL_RCC_ClockConfig+0x358>)
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	0a1b      	lsrs	r3, r3, #8
 8004f00:	f003 030f 	and.w	r3, r3, #15
 8004f04:	4912      	ldr	r1, [pc, #72]	; (8004f50 <HAL_RCC_ClockConfig+0x35c>)
 8004f06:	5ccb      	ldrb	r3, [r1, r3]
 8004f08:	f003 031f 	and.w	r3, r3, #31
 8004f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f10:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f12:	4b0e      	ldr	r3, [pc, #56]	; (8004f4c <HAL_RCC_ClockConfig+0x358>)
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	f003 030f 	and.w	r3, r3, #15
 8004f1a:	4a0d      	ldr	r2, [pc, #52]	; (8004f50 <HAL_RCC_ClockConfig+0x35c>)
 8004f1c:	5cd3      	ldrb	r3, [r2, r3]
 8004f1e:	f003 031f 	and.w	r3, r3, #31
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	fa22 f303 	lsr.w	r3, r2, r3
 8004f28:	4a0a      	ldr	r2, [pc, #40]	; (8004f54 <HAL_RCC_ClockConfig+0x360>)
 8004f2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f2c:	4a0a      	ldr	r2, [pc, #40]	; (8004f58 <HAL_RCC_ClockConfig+0x364>)
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004f32:	4b0a      	ldr	r3, [pc, #40]	; (8004f5c <HAL_RCC_ClockConfig+0x368>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7fc fed2 	bl	8001ce0 <HAL_InitTick>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3718      	adds	r7, #24
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	58024400 	.word	0x58024400
 8004f50:	0800f488 	.word	0x0800f488
 8004f54:	24000004 	.word	0x24000004
 8004f58:	24000000 	.word	0x24000000
 8004f5c:	24000008 	.word	0x24000008

08004f60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b089      	sub	sp, #36	; 0x24
 8004f64:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f66:	4bb3      	ldr	r3, [pc, #716]	; (8005234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f6e:	2b18      	cmp	r3, #24
 8004f70:	f200 8155 	bhi.w	800521e <HAL_RCC_GetSysClockFreq+0x2be>
 8004f74:	a201      	add	r2, pc, #4	; (adr r2, 8004f7c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7a:	bf00      	nop
 8004f7c:	08004fe1 	.word	0x08004fe1
 8004f80:	0800521f 	.word	0x0800521f
 8004f84:	0800521f 	.word	0x0800521f
 8004f88:	0800521f 	.word	0x0800521f
 8004f8c:	0800521f 	.word	0x0800521f
 8004f90:	0800521f 	.word	0x0800521f
 8004f94:	0800521f 	.word	0x0800521f
 8004f98:	0800521f 	.word	0x0800521f
 8004f9c:	08005007 	.word	0x08005007
 8004fa0:	0800521f 	.word	0x0800521f
 8004fa4:	0800521f 	.word	0x0800521f
 8004fa8:	0800521f 	.word	0x0800521f
 8004fac:	0800521f 	.word	0x0800521f
 8004fb0:	0800521f 	.word	0x0800521f
 8004fb4:	0800521f 	.word	0x0800521f
 8004fb8:	0800521f 	.word	0x0800521f
 8004fbc:	0800500d 	.word	0x0800500d
 8004fc0:	0800521f 	.word	0x0800521f
 8004fc4:	0800521f 	.word	0x0800521f
 8004fc8:	0800521f 	.word	0x0800521f
 8004fcc:	0800521f 	.word	0x0800521f
 8004fd0:	0800521f 	.word	0x0800521f
 8004fd4:	0800521f 	.word	0x0800521f
 8004fd8:	0800521f 	.word	0x0800521f
 8004fdc:	08005013 	.word	0x08005013
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fe0:	4b94      	ldr	r3, [pc, #592]	; (8005234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0320 	and.w	r3, r3, #32
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d009      	beq.n	8005000 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004fec:	4b91      	ldr	r3, [pc, #580]	; (8005234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	08db      	lsrs	r3, r3, #3
 8004ff2:	f003 0303 	and.w	r3, r3, #3
 8004ff6:	4a90      	ldr	r2, [pc, #576]	; (8005238 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8004ffc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004ffe:	e111      	b.n	8005224 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005000:	4b8d      	ldr	r3, [pc, #564]	; (8005238 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005002:	61bb      	str	r3, [r7, #24]
      break;
 8005004:	e10e      	b.n	8005224 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005006:	4b8d      	ldr	r3, [pc, #564]	; (800523c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005008:	61bb      	str	r3, [r7, #24]
      break;
 800500a:	e10b      	b.n	8005224 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800500c:	4b8c      	ldr	r3, [pc, #560]	; (8005240 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800500e:	61bb      	str	r3, [r7, #24]
      break;
 8005010:	e108      	b.n	8005224 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005012:	4b88      	ldr	r3, [pc, #544]	; (8005234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005016:	f003 0303 	and.w	r3, r3, #3
 800501a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800501c:	4b85      	ldr	r3, [pc, #532]	; (8005234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800501e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005020:	091b      	lsrs	r3, r3, #4
 8005022:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005026:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005028:	4b82      	ldr	r3, [pc, #520]	; (8005234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800502a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005032:	4b80      	ldr	r3, [pc, #512]	; (8005234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005036:	08db      	lsrs	r3, r3, #3
 8005038:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	fb02 f303 	mul.w	r3, r2, r3
 8005042:	ee07 3a90 	vmov	s15, r3
 8005046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800504a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 80e1 	beq.w	8005218 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	2b02      	cmp	r3, #2
 800505a:	f000 8083 	beq.w	8005164 <HAL_RCC_GetSysClockFreq+0x204>
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	2b02      	cmp	r3, #2
 8005062:	f200 80a1 	bhi.w	80051a8 <HAL_RCC_GetSysClockFreq+0x248>
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d003      	beq.n	8005074 <HAL_RCC_GetSysClockFreq+0x114>
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d056      	beq.n	8005120 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005072:	e099      	b.n	80051a8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005074:	4b6f      	ldr	r3, [pc, #444]	; (8005234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0320 	and.w	r3, r3, #32
 800507c:	2b00      	cmp	r3, #0
 800507e:	d02d      	beq.n	80050dc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005080:	4b6c      	ldr	r3, [pc, #432]	; (8005234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	08db      	lsrs	r3, r3, #3
 8005086:	f003 0303 	and.w	r3, r3, #3
 800508a:	4a6b      	ldr	r2, [pc, #428]	; (8005238 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800508c:	fa22 f303 	lsr.w	r3, r2, r3
 8005090:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	ee07 3a90 	vmov	s15, r3
 8005098:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	ee07 3a90 	vmov	s15, r3
 80050a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050aa:	4b62      	ldr	r3, [pc, #392]	; (8005234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050b2:	ee07 3a90 	vmov	s15, r3
 80050b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80050be:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005244 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050d6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80050da:	e087      	b.n	80051ec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	ee07 3a90 	vmov	s15, r3
 80050e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050e6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005248 <HAL_RCC_GetSysClockFreq+0x2e8>
 80050ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ee:	4b51      	ldr	r3, [pc, #324]	; (8005234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050f6:	ee07 3a90 	vmov	s15, r3
 80050fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005102:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005244 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800510a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800510e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800511a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800511e:	e065      	b.n	80051ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	ee07 3a90 	vmov	s15, r3
 8005126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800512a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800524c <HAL_RCC_GetSysClockFreq+0x2ec>
 800512e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005132:	4b40      	ldr	r3, [pc, #256]	; (8005234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800513a:	ee07 3a90 	vmov	s15, r3
 800513e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005142:	ed97 6a02 	vldr	s12, [r7, #8]
 8005146:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005244 <HAL_RCC_GetSysClockFreq+0x2e4>
 800514a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800514e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800515a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800515e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005162:	e043      	b.n	80051ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	ee07 3a90 	vmov	s15, r3
 800516a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800516e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005250 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005176:	4b2f      	ldr	r3, [pc, #188]	; (8005234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800517e:	ee07 3a90 	vmov	s15, r3
 8005182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005186:	ed97 6a02 	vldr	s12, [r7, #8]
 800518a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005244 <HAL_RCC_GetSysClockFreq+0x2e4>
 800518e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800519a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800519e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80051a6:	e021      	b.n	80051ec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	ee07 3a90 	vmov	s15, r3
 80051ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051b2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800524c <HAL_RCC_GetSysClockFreq+0x2ec>
 80051b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ba:	4b1e      	ldr	r3, [pc, #120]	; (8005234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051c2:	ee07 3a90 	vmov	s15, r3
 80051c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80051ce:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005244 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80051ea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80051ec:	4b11      	ldr	r3, [pc, #68]	; (8005234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f0:	0a5b      	lsrs	r3, r3, #9
 80051f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051f6:	3301      	adds	r3, #1
 80051f8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	ee07 3a90 	vmov	s15, r3
 8005200:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005204:	edd7 6a07 	vldr	s13, [r7, #28]
 8005208:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800520c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005210:	ee17 3a90 	vmov	r3, s15
 8005214:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005216:	e005      	b.n	8005224 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005218:	2300      	movs	r3, #0
 800521a:	61bb      	str	r3, [r7, #24]
      break;
 800521c:	e002      	b.n	8005224 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800521e:	4b07      	ldr	r3, [pc, #28]	; (800523c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005220:	61bb      	str	r3, [r7, #24]
      break;
 8005222:	bf00      	nop
  }

  return sysclockfreq;
 8005224:	69bb      	ldr	r3, [r7, #24]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3724      	adds	r7, #36	; 0x24
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	58024400 	.word	0x58024400
 8005238:	03d09000 	.word	0x03d09000
 800523c:	003d0900 	.word	0x003d0900
 8005240:	017d7840 	.word	0x017d7840
 8005244:	46000000 	.word	0x46000000
 8005248:	4c742400 	.word	0x4c742400
 800524c:	4a742400 	.word	0x4a742400
 8005250:	4bbebc20 	.word	0x4bbebc20

08005254 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800525a:	f7ff fe81 	bl	8004f60 <HAL_RCC_GetSysClockFreq>
 800525e:	4602      	mov	r2, r0
 8005260:	4b10      	ldr	r3, [pc, #64]	; (80052a4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	0a1b      	lsrs	r3, r3, #8
 8005266:	f003 030f 	and.w	r3, r3, #15
 800526a:	490f      	ldr	r1, [pc, #60]	; (80052a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800526c:	5ccb      	ldrb	r3, [r1, r3]
 800526e:	f003 031f 	and.w	r3, r3, #31
 8005272:	fa22 f303 	lsr.w	r3, r2, r3
 8005276:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005278:	4b0a      	ldr	r3, [pc, #40]	; (80052a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	f003 030f 	and.w	r3, r3, #15
 8005280:	4a09      	ldr	r2, [pc, #36]	; (80052a8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005282:	5cd3      	ldrb	r3, [r2, r3]
 8005284:	f003 031f 	and.w	r3, r3, #31
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	fa22 f303 	lsr.w	r3, r2, r3
 800528e:	4a07      	ldr	r2, [pc, #28]	; (80052ac <HAL_RCC_GetHCLKFreq+0x58>)
 8005290:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005292:	4a07      	ldr	r2, [pc, #28]	; (80052b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005298:	4b04      	ldr	r3, [pc, #16]	; (80052ac <HAL_RCC_GetHCLKFreq+0x58>)
 800529a:	681b      	ldr	r3, [r3, #0]
}
 800529c:	4618      	mov	r0, r3
 800529e:	3708      	adds	r7, #8
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	58024400 	.word	0x58024400
 80052a8:	0800f488 	.word	0x0800f488
 80052ac:	24000004 	.word	0x24000004
 80052b0:	24000000 	.word	0x24000000

080052b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80052b8:	f7ff ffcc 	bl	8005254 <HAL_RCC_GetHCLKFreq>
 80052bc:	4602      	mov	r2, r0
 80052be:	4b06      	ldr	r3, [pc, #24]	; (80052d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	091b      	lsrs	r3, r3, #4
 80052c4:	f003 0307 	and.w	r3, r3, #7
 80052c8:	4904      	ldr	r1, [pc, #16]	; (80052dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80052ca:	5ccb      	ldrb	r3, [r1, r3]
 80052cc:	f003 031f 	and.w	r3, r3, #31
 80052d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	58024400 	.word	0x58024400
 80052dc:	0800f488 	.word	0x0800f488

080052e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80052e4:	f7ff ffb6 	bl	8005254 <HAL_RCC_GetHCLKFreq>
 80052e8:	4602      	mov	r2, r0
 80052ea:	4b06      	ldr	r3, [pc, #24]	; (8005304 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	0a1b      	lsrs	r3, r3, #8
 80052f0:	f003 0307 	and.w	r3, r3, #7
 80052f4:	4904      	ldr	r1, [pc, #16]	; (8005308 <HAL_RCC_GetPCLK2Freq+0x28>)
 80052f6:	5ccb      	ldrb	r3, [r1, r3]
 80052f8:	f003 031f 	and.w	r3, r3, #31
 80052fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005300:	4618      	mov	r0, r3
 8005302:	bd80      	pop	{r7, pc}
 8005304:	58024400 	.word	0x58024400
 8005308:	0800f488 	.word	0x0800f488

0800530c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800530c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005310:	b0ca      	sub	sp, #296	; 0x128
 8005312:	af00      	add	r7, sp, #0
 8005314:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005318:	2300      	movs	r3, #0
 800531a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800531e:	2300      	movs	r3, #0
 8005320:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005330:	2500      	movs	r5, #0
 8005332:	ea54 0305 	orrs.w	r3, r4, r5
 8005336:	d049      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005338:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800533c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800533e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005342:	d02f      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005344:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005348:	d828      	bhi.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800534a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800534e:	d01a      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005350:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005354:	d822      	bhi.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800535a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800535e:	d007      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005360:	e01c      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005362:	4bb8      	ldr	r3, [pc, #736]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005366:	4ab7      	ldr	r2, [pc, #732]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800536c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800536e:	e01a      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005374:	3308      	adds	r3, #8
 8005376:	2102      	movs	r1, #2
 8005378:	4618      	mov	r0, r3
 800537a:	f001 fc8f 	bl	8006c9c <RCCEx_PLL2_Config>
 800537e:	4603      	mov	r3, r0
 8005380:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005384:	e00f      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800538a:	3328      	adds	r3, #40	; 0x28
 800538c:	2102      	movs	r1, #2
 800538e:	4618      	mov	r0, r3
 8005390:	f001 fd36 	bl	8006e00 <RCCEx_PLL3_Config>
 8005394:	4603      	mov	r3, r0
 8005396:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800539a:	e004      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80053a2:	e000      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80053a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10a      	bne.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80053ae:	4ba5      	ldr	r3, [pc, #660]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053b2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80053b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053bc:	4aa1      	ldr	r2, [pc, #644]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053be:	430b      	orrs	r3, r1
 80053c0:	6513      	str	r3, [r2, #80]	; 0x50
 80053c2:	e003      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80053cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80053d8:	f04f 0900 	mov.w	r9, #0
 80053dc:	ea58 0309 	orrs.w	r3, r8, r9
 80053e0:	d047      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80053e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e8:	2b04      	cmp	r3, #4
 80053ea:	d82a      	bhi.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80053ec:	a201      	add	r2, pc, #4	; (adr r2, 80053f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80053ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f2:	bf00      	nop
 80053f4:	08005409 	.word	0x08005409
 80053f8:	08005417 	.word	0x08005417
 80053fc:	0800542d 	.word	0x0800542d
 8005400:	0800544b 	.word	0x0800544b
 8005404:	0800544b 	.word	0x0800544b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005408:	4b8e      	ldr	r3, [pc, #568]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800540a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540c:	4a8d      	ldr	r2, [pc, #564]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800540e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005412:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005414:	e01a      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800541a:	3308      	adds	r3, #8
 800541c:	2100      	movs	r1, #0
 800541e:	4618      	mov	r0, r3
 8005420:	f001 fc3c 	bl	8006c9c <RCCEx_PLL2_Config>
 8005424:	4603      	mov	r3, r0
 8005426:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800542a:	e00f      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800542c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005430:	3328      	adds	r3, #40	; 0x28
 8005432:	2100      	movs	r1, #0
 8005434:	4618      	mov	r0, r3
 8005436:	f001 fce3 	bl	8006e00 <RCCEx_PLL3_Config>
 800543a:	4603      	mov	r3, r0
 800543c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005440:	e004      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005448:	e000      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800544a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800544c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10a      	bne.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005454:	4b7b      	ldr	r3, [pc, #492]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005458:	f023 0107 	bic.w	r1, r3, #7
 800545c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005462:	4a78      	ldr	r2, [pc, #480]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005464:	430b      	orrs	r3, r1
 8005466:	6513      	str	r3, [r2, #80]	; 0x50
 8005468:	e003      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800546a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800546e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800547e:	f04f 0b00 	mov.w	fp, #0
 8005482:	ea5a 030b 	orrs.w	r3, sl, fp
 8005486:	d04c      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800548c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800548e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005492:	d030      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005498:	d829      	bhi.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800549a:	2bc0      	cmp	r3, #192	; 0xc0
 800549c:	d02d      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800549e:	2bc0      	cmp	r3, #192	; 0xc0
 80054a0:	d825      	bhi.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80054a2:	2b80      	cmp	r3, #128	; 0x80
 80054a4:	d018      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80054a6:	2b80      	cmp	r3, #128	; 0x80
 80054a8:	d821      	bhi.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d002      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80054ae:	2b40      	cmp	r3, #64	; 0x40
 80054b0:	d007      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80054b2:	e01c      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054b4:	4b63      	ldr	r3, [pc, #396]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b8:	4a62      	ldr	r2, [pc, #392]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80054c0:	e01c      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054c6:	3308      	adds	r3, #8
 80054c8:	2100      	movs	r1, #0
 80054ca:	4618      	mov	r0, r3
 80054cc:	f001 fbe6 	bl	8006c9c <RCCEx_PLL2_Config>
 80054d0:	4603      	mov	r3, r0
 80054d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80054d6:	e011      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054dc:	3328      	adds	r3, #40	; 0x28
 80054de:	2100      	movs	r1, #0
 80054e0:	4618      	mov	r0, r3
 80054e2:	f001 fc8d 	bl	8006e00 <RCCEx_PLL3_Config>
 80054e6:	4603      	mov	r3, r0
 80054e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80054ec:	e006      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80054f4:	e002      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80054f6:	bf00      	nop
 80054f8:	e000      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80054fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10a      	bne.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005504:	4b4f      	ldr	r3, [pc, #316]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005508:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800550c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005512:	4a4c      	ldr	r2, [pc, #304]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005514:	430b      	orrs	r3, r1
 8005516:	6513      	str	r3, [r2, #80]	; 0x50
 8005518:	e003      	b.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800551a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800551e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800552e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005532:	2300      	movs	r3, #0
 8005534:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005538:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800553c:	460b      	mov	r3, r1
 800553e:	4313      	orrs	r3, r2
 8005540:	d053      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005546:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800554a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800554e:	d035      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005550:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005554:	d82e      	bhi.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005556:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800555a:	d031      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800555c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005560:	d828      	bhi.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005562:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005566:	d01a      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005568:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800556c:	d822      	bhi.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005572:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005576:	d007      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005578:	e01c      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800557a:	4b32      	ldr	r3, [pc, #200]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800557c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557e:	4a31      	ldr	r2, [pc, #196]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005584:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005586:	e01c      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005588:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800558c:	3308      	adds	r3, #8
 800558e:	2100      	movs	r1, #0
 8005590:	4618      	mov	r0, r3
 8005592:	f001 fb83 	bl	8006c9c <RCCEx_PLL2_Config>
 8005596:	4603      	mov	r3, r0
 8005598:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800559c:	e011      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800559e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055a2:	3328      	adds	r3, #40	; 0x28
 80055a4:	2100      	movs	r1, #0
 80055a6:	4618      	mov	r0, r3
 80055a8:	f001 fc2a 	bl	8006e00 <RCCEx_PLL3_Config>
 80055ac:	4603      	mov	r3, r0
 80055ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055b2:	e006      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80055ba:	e002      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80055bc:	bf00      	nop
 80055be:	e000      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80055c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10b      	bne.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80055ca:	4b1e      	ldr	r3, [pc, #120]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ce:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80055d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80055da:	4a1a      	ldr	r2, [pc, #104]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055dc:	430b      	orrs	r3, r1
 80055de:	6593      	str	r3, [r2, #88]	; 0x58
 80055e0:	e003      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80055ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80055f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80055fa:	2300      	movs	r3, #0
 80055fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005600:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005604:	460b      	mov	r3, r1
 8005606:	4313      	orrs	r3, r2
 8005608:	d056      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800560a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800560e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005612:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005616:	d038      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005618:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800561c:	d831      	bhi.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800561e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005622:	d034      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005624:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005628:	d82b      	bhi.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800562a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800562e:	d01d      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005630:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005634:	d825      	bhi.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005636:	2b00      	cmp	r3, #0
 8005638:	d006      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800563a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800563e:	d00a      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005640:	e01f      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005642:	bf00      	nop
 8005644:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005648:	4ba2      	ldr	r3, [pc, #648]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800564a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564c:	4aa1      	ldr	r2, [pc, #644]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800564e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005652:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005654:	e01c      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800565a:	3308      	adds	r3, #8
 800565c:	2100      	movs	r1, #0
 800565e:	4618      	mov	r0, r3
 8005660:	f001 fb1c 	bl	8006c9c <RCCEx_PLL2_Config>
 8005664:	4603      	mov	r3, r0
 8005666:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800566a:	e011      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800566c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005670:	3328      	adds	r3, #40	; 0x28
 8005672:	2100      	movs	r1, #0
 8005674:	4618      	mov	r0, r3
 8005676:	f001 fbc3 	bl	8006e00 <RCCEx_PLL3_Config>
 800567a:	4603      	mov	r3, r0
 800567c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005680:	e006      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005688:	e002      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800568a:	bf00      	nop
 800568c:	e000      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800568e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005690:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10b      	bne.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005698:	4b8e      	ldr	r3, [pc, #568]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800569a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800569c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80056a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80056a8:	4a8a      	ldr	r2, [pc, #552]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056aa:	430b      	orrs	r3, r1
 80056ac:	6593      	str	r3, [r2, #88]	; 0x58
 80056ae:	e003      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80056b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80056c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80056c8:	2300      	movs	r3, #0
 80056ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80056ce:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80056d2:	460b      	mov	r3, r1
 80056d4:	4313      	orrs	r3, r2
 80056d6:	d03a      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80056d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056de:	2b30      	cmp	r3, #48	; 0x30
 80056e0:	d01f      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80056e2:	2b30      	cmp	r3, #48	; 0x30
 80056e4:	d819      	bhi.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80056e6:	2b20      	cmp	r3, #32
 80056e8:	d00c      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80056ea:	2b20      	cmp	r3, #32
 80056ec:	d815      	bhi.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d019      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80056f2:	2b10      	cmp	r3, #16
 80056f4:	d111      	bne.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056f6:	4b77      	ldr	r3, [pc, #476]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fa:	4a76      	ldr	r2, [pc, #472]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005700:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005702:	e011      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005708:	3308      	adds	r3, #8
 800570a:	2102      	movs	r1, #2
 800570c:	4618      	mov	r0, r3
 800570e:	f001 fac5 	bl	8006c9c <RCCEx_PLL2_Config>
 8005712:	4603      	mov	r3, r0
 8005714:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005718:	e006      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005720:	e002      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005722:	bf00      	nop
 8005724:	e000      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005726:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005728:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10a      	bne.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005730:	4b68      	ldr	r3, [pc, #416]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005734:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005738:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800573c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800573e:	4a65      	ldr	r2, [pc, #404]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005740:	430b      	orrs	r3, r1
 8005742:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005744:	e003      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005746:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800574a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800574e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005756:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800575a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800575e:	2300      	movs	r3, #0
 8005760:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005764:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005768:	460b      	mov	r3, r1
 800576a:	4313      	orrs	r3, r2
 800576c:	d051      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800576e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005774:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005778:	d035      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800577a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800577e:	d82e      	bhi.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005780:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005784:	d031      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005786:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800578a:	d828      	bhi.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800578c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005790:	d01a      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005796:	d822      	bhi.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005798:	2b00      	cmp	r3, #0
 800579a:	d003      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800579c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057a0:	d007      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80057a2:	e01c      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057a4:	4b4b      	ldr	r3, [pc, #300]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a8:	4a4a      	ldr	r2, [pc, #296]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80057b0:	e01c      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057b6:	3308      	adds	r3, #8
 80057b8:	2100      	movs	r1, #0
 80057ba:	4618      	mov	r0, r3
 80057bc:	f001 fa6e 	bl	8006c9c <RCCEx_PLL2_Config>
 80057c0:	4603      	mov	r3, r0
 80057c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80057c6:	e011      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057cc:	3328      	adds	r3, #40	; 0x28
 80057ce:	2100      	movs	r1, #0
 80057d0:	4618      	mov	r0, r3
 80057d2:	f001 fb15 	bl	8006e00 <RCCEx_PLL3_Config>
 80057d6:	4603      	mov	r3, r0
 80057d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80057dc:	e006      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80057e4:	e002      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80057e6:	bf00      	nop
 80057e8:	e000      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80057ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10a      	bne.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80057f4:	4b37      	ldr	r3, [pc, #220]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057f8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80057fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005802:	4a34      	ldr	r2, [pc, #208]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005804:	430b      	orrs	r3, r1
 8005806:	6513      	str	r3, [r2, #80]	; 0x50
 8005808:	e003      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800580a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800580e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800581e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005822:	2300      	movs	r3, #0
 8005824:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005828:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800582c:	460b      	mov	r3, r1
 800582e:	4313      	orrs	r3, r2
 8005830:	d056      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005836:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800583c:	d033      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800583e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005842:	d82c      	bhi.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005844:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005848:	d02f      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800584a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800584e:	d826      	bhi.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005850:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005854:	d02b      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005856:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800585a:	d820      	bhi.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800585c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005860:	d012      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005862:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005866:	d81a      	bhi.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005868:	2b00      	cmp	r3, #0
 800586a:	d022      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800586c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005870:	d115      	bne.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005876:	3308      	adds	r3, #8
 8005878:	2101      	movs	r1, #1
 800587a:	4618      	mov	r0, r3
 800587c:	f001 fa0e 	bl	8006c9c <RCCEx_PLL2_Config>
 8005880:	4603      	mov	r3, r0
 8005882:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005886:	e015      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005888:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800588c:	3328      	adds	r3, #40	; 0x28
 800588e:	2101      	movs	r1, #1
 8005890:	4618      	mov	r0, r3
 8005892:	f001 fab5 	bl	8006e00 <RCCEx_PLL3_Config>
 8005896:	4603      	mov	r3, r0
 8005898:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800589c:	e00a      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80058a4:	e006      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80058a6:	bf00      	nop
 80058a8:	e004      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80058aa:	bf00      	nop
 80058ac:	e002      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80058ae:	bf00      	nop
 80058b0:	e000      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80058b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10d      	bne.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80058bc:	4b05      	ldr	r3, [pc, #20]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058c0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80058c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058ca:	4a02      	ldr	r2, [pc, #8]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058cc:	430b      	orrs	r3, r1
 80058ce:	6513      	str	r3, [r2, #80]	; 0x50
 80058d0:	e006      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80058d2:	bf00      	nop
 80058d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80058e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80058ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80058f0:	2300      	movs	r3, #0
 80058f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058f6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80058fa:	460b      	mov	r3, r1
 80058fc:	4313      	orrs	r3, r2
 80058fe:	d055      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005900:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005904:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005908:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800590c:	d033      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800590e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005912:	d82c      	bhi.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005918:	d02f      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800591a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800591e:	d826      	bhi.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005920:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005924:	d02b      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005926:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800592a:	d820      	bhi.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800592c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005930:	d012      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005932:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005936:	d81a      	bhi.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005938:	2b00      	cmp	r3, #0
 800593a:	d022      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800593c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005940:	d115      	bne.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005946:	3308      	adds	r3, #8
 8005948:	2101      	movs	r1, #1
 800594a:	4618      	mov	r0, r3
 800594c:	f001 f9a6 	bl	8006c9c <RCCEx_PLL2_Config>
 8005950:	4603      	mov	r3, r0
 8005952:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005956:	e015      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005958:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800595c:	3328      	adds	r3, #40	; 0x28
 800595e:	2101      	movs	r1, #1
 8005960:	4618      	mov	r0, r3
 8005962:	f001 fa4d 	bl	8006e00 <RCCEx_PLL3_Config>
 8005966:	4603      	mov	r3, r0
 8005968:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800596c:	e00a      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005974:	e006      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005976:	bf00      	nop
 8005978:	e004      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800597a:	bf00      	nop
 800597c:	e002      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800597e:	bf00      	nop
 8005980:	e000      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005982:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005984:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10b      	bne.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800598c:	4ba3      	ldr	r3, [pc, #652]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800598e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005990:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005994:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005998:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800599c:	4a9f      	ldr	r2, [pc, #636]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800599e:	430b      	orrs	r3, r1
 80059a0:	6593      	str	r3, [r2, #88]	; 0x58
 80059a2:	e003      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80059ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80059b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80059bc:	2300      	movs	r3, #0
 80059be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80059c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80059c6:	460b      	mov	r3, r1
 80059c8:	4313      	orrs	r3, r2
 80059ca:	d037      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80059cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059d6:	d00e      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80059d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059dc:	d816      	bhi.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x700>
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d018      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80059e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059e6:	d111      	bne.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059e8:	4b8c      	ldr	r3, [pc, #560]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ec:	4a8b      	ldr	r2, [pc, #556]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80059f4:	e00f      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059fa:	3308      	adds	r3, #8
 80059fc:	2101      	movs	r1, #1
 80059fe:	4618      	mov	r0, r3
 8005a00:	f001 f94c 	bl	8006c9c <RCCEx_PLL2_Config>
 8005a04:	4603      	mov	r3, r0
 8005a06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005a0a:	e004      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a12:	e000      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005a14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10a      	bne.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a1e:	4b7f      	ldr	r3, [pc, #508]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a22:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a2c:	4a7b      	ldr	r2, [pc, #492]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a2e:	430b      	orrs	r3, r1
 8005a30:	6513      	str	r3, [r2, #80]	; 0x50
 8005a32:	e003      	b.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a44:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005a48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005a52:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005a56:	460b      	mov	r3, r1
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	d039      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a62:	2b03      	cmp	r3, #3
 8005a64:	d81c      	bhi.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005a66:	a201      	add	r2, pc, #4	; (adr r2, 8005a6c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6c:	08005aa9 	.word	0x08005aa9
 8005a70:	08005a7d 	.word	0x08005a7d
 8005a74:	08005a8b 	.word	0x08005a8b
 8005a78:	08005aa9 	.word	0x08005aa9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a7c:	4b67      	ldr	r3, [pc, #412]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a80:	4a66      	ldr	r2, [pc, #408]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005a88:	e00f      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a8e:	3308      	adds	r3, #8
 8005a90:	2102      	movs	r1, #2
 8005a92:	4618      	mov	r0, r3
 8005a94:	f001 f902 	bl	8006c9c <RCCEx_PLL2_Config>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005a9e:	e004      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005aa6:	e000      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005aa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10a      	bne.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005ab2:	4b5a      	ldr	r3, [pc, #360]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ab6:	f023 0103 	bic.w	r1, r3, #3
 8005aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005abe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ac0:	4a56      	ldr	r2, [pc, #344]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ac2:	430b      	orrs	r3, r1
 8005ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ac6:	e003      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005acc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005adc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ae6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005aea:	460b      	mov	r3, r1
 8005aec:	4313      	orrs	r3, r2
 8005aee:	f000 809f 	beq.w	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005af2:	4b4b      	ldr	r3, [pc, #300]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a4a      	ldr	r2, [pc, #296]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005afc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005afe:	f7fc f939 	bl	8001d74 <HAL_GetTick>
 8005b02:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b06:	e00b      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b08:	f7fc f934 	bl	8001d74 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	2b64      	cmp	r3, #100	; 0x64
 8005b16:	d903      	bls.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b1e:	e005      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b20:	4b3f      	ldr	r3, [pc, #252]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d0ed      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005b2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d179      	bne.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005b34:	4b39      	ldr	r3, [pc, #228]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005b40:	4053      	eors	r3, r2
 8005b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d015      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b4a:	4b34      	ldr	r3, [pc, #208]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b52:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b56:	4b31      	ldr	r3, [pc, #196]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5a:	4a30      	ldr	r2, [pc, #192]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b60:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b62:	4b2e      	ldr	r3, [pc, #184]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b66:	4a2d      	ldr	r2, [pc, #180]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b6c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005b6e:	4a2b      	ldr	r2, [pc, #172]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b70:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b74:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b82:	d118      	bne.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b84:	f7fc f8f6 	bl	8001d74 <HAL_GetTick>
 8005b88:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b8c:	e00d      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b8e:	f7fc f8f1 	bl	8001d74 <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b98:	1ad2      	subs	r2, r2, r3
 8005b9a:	f241 3388 	movw	r3, #5000	; 0x1388
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d903      	bls.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005ba8:	e005      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005baa:	4b1c      	ldr	r3, [pc, #112]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bae:	f003 0302 	and.w	r3, r3, #2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d0eb      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005bb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d129      	bne.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bce:	d10e      	bne.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005bd0:	4b12      	ldr	r3, [pc, #72]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bdc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005be0:	091a      	lsrs	r2, r3, #4
 8005be2:	4b10      	ldr	r3, [pc, #64]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005be4:	4013      	ands	r3, r2
 8005be6:	4a0d      	ldr	r2, [pc, #52]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005be8:	430b      	orrs	r3, r1
 8005bea:	6113      	str	r3, [r2, #16]
 8005bec:	e005      	b.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005bee:	4b0b      	ldr	r3, [pc, #44]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	4a0a      	ldr	r2, [pc, #40]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bf4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005bf8:	6113      	str	r3, [r2, #16]
 8005bfa:	4b08      	ldr	r3, [pc, #32]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bfc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c0a:	4a04      	ldr	r2, [pc, #16]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c0c:	430b      	orrs	r3, r1
 8005c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8005c10:	e00e      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005c1a:	e009      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005c1c:	58024400 	.word	0x58024400
 8005c20:	58024800 	.word	0x58024800
 8005c24:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c38:	f002 0301 	and.w	r3, r2, #1
 8005c3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c40:	2300      	movs	r3, #0
 8005c42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c46:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	f000 8089 	beq.w	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c58:	2b28      	cmp	r3, #40	; 0x28
 8005c5a:	d86b      	bhi.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005c5c:	a201      	add	r2, pc, #4	; (adr r2, 8005c64 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c62:	bf00      	nop
 8005c64:	08005d3d 	.word	0x08005d3d
 8005c68:	08005d35 	.word	0x08005d35
 8005c6c:	08005d35 	.word	0x08005d35
 8005c70:	08005d35 	.word	0x08005d35
 8005c74:	08005d35 	.word	0x08005d35
 8005c78:	08005d35 	.word	0x08005d35
 8005c7c:	08005d35 	.word	0x08005d35
 8005c80:	08005d35 	.word	0x08005d35
 8005c84:	08005d09 	.word	0x08005d09
 8005c88:	08005d35 	.word	0x08005d35
 8005c8c:	08005d35 	.word	0x08005d35
 8005c90:	08005d35 	.word	0x08005d35
 8005c94:	08005d35 	.word	0x08005d35
 8005c98:	08005d35 	.word	0x08005d35
 8005c9c:	08005d35 	.word	0x08005d35
 8005ca0:	08005d35 	.word	0x08005d35
 8005ca4:	08005d1f 	.word	0x08005d1f
 8005ca8:	08005d35 	.word	0x08005d35
 8005cac:	08005d35 	.word	0x08005d35
 8005cb0:	08005d35 	.word	0x08005d35
 8005cb4:	08005d35 	.word	0x08005d35
 8005cb8:	08005d35 	.word	0x08005d35
 8005cbc:	08005d35 	.word	0x08005d35
 8005cc0:	08005d35 	.word	0x08005d35
 8005cc4:	08005d3d 	.word	0x08005d3d
 8005cc8:	08005d35 	.word	0x08005d35
 8005ccc:	08005d35 	.word	0x08005d35
 8005cd0:	08005d35 	.word	0x08005d35
 8005cd4:	08005d35 	.word	0x08005d35
 8005cd8:	08005d35 	.word	0x08005d35
 8005cdc:	08005d35 	.word	0x08005d35
 8005ce0:	08005d35 	.word	0x08005d35
 8005ce4:	08005d3d 	.word	0x08005d3d
 8005ce8:	08005d35 	.word	0x08005d35
 8005cec:	08005d35 	.word	0x08005d35
 8005cf0:	08005d35 	.word	0x08005d35
 8005cf4:	08005d35 	.word	0x08005d35
 8005cf8:	08005d35 	.word	0x08005d35
 8005cfc:	08005d35 	.word	0x08005d35
 8005d00:	08005d35 	.word	0x08005d35
 8005d04:	08005d3d 	.word	0x08005d3d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d0c:	3308      	adds	r3, #8
 8005d0e:	2101      	movs	r1, #1
 8005d10:	4618      	mov	r0, r3
 8005d12:	f000 ffc3 	bl	8006c9c <RCCEx_PLL2_Config>
 8005d16:	4603      	mov	r3, r0
 8005d18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005d1c:	e00f      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d22:	3328      	adds	r3, #40	; 0x28
 8005d24:	2101      	movs	r1, #1
 8005d26:	4618      	mov	r0, r3
 8005d28:	f001 f86a 	bl	8006e00 <RCCEx_PLL3_Config>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005d32:	e004      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d3a:	e000      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005d3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10a      	bne.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005d46:	4bbf      	ldr	r3, [pc, #764]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d4a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d54:	4abb      	ldr	r2, [pc, #748]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d56:	430b      	orrs	r3, r1
 8005d58:	6553      	str	r3, [r2, #84]	; 0x54
 8005d5a:	e003      	b.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6c:	f002 0302 	and.w	r3, r2, #2
 8005d70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d74:	2300      	movs	r3, #0
 8005d76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005d7a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005d7e:	460b      	mov	r3, r1
 8005d80:	4313      	orrs	r3, r2
 8005d82:	d041      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d8a:	2b05      	cmp	r3, #5
 8005d8c:	d824      	bhi.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005d8e:	a201      	add	r2, pc, #4	; (adr r2, 8005d94 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d94:	08005de1 	.word	0x08005de1
 8005d98:	08005dad 	.word	0x08005dad
 8005d9c:	08005dc3 	.word	0x08005dc3
 8005da0:	08005de1 	.word	0x08005de1
 8005da4:	08005de1 	.word	0x08005de1
 8005da8:	08005de1 	.word	0x08005de1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005db0:	3308      	adds	r3, #8
 8005db2:	2101      	movs	r1, #1
 8005db4:	4618      	mov	r0, r3
 8005db6:	f000 ff71 	bl	8006c9c <RCCEx_PLL2_Config>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005dc0:	e00f      	b.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dc6:	3328      	adds	r3, #40	; 0x28
 8005dc8:	2101      	movs	r1, #1
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f001 f818 	bl	8006e00 <RCCEx_PLL3_Config>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005dd6:	e004      	b.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005dde:	e000      	b.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005de0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005de2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10a      	bne.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005dea:	4b96      	ldr	r3, [pc, #600]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dee:	f023 0107 	bic.w	r1, r3, #7
 8005df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005df6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005df8:	4a92      	ldr	r2, [pc, #584]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005dfa:	430b      	orrs	r3, r1
 8005dfc:	6553      	str	r3, [r2, #84]	; 0x54
 8005dfe:	e003      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e10:	f002 0304 	and.w	r3, r2, #4
 8005e14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e18:	2300      	movs	r3, #0
 8005e1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e1e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005e22:	460b      	mov	r3, r1
 8005e24:	4313      	orrs	r3, r2
 8005e26:	d044      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e30:	2b05      	cmp	r3, #5
 8005e32:	d825      	bhi.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005e34:	a201      	add	r2, pc, #4	; (adr r2, 8005e3c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3a:	bf00      	nop
 8005e3c:	08005e89 	.word	0x08005e89
 8005e40:	08005e55 	.word	0x08005e55
 8005e44:	08005e6b 	.word	0x08005e6b
 8005e48:	08005e89 	.word	0x08005e89
 8005e4c:	08005e89 	.word	0x08005e89
 8005e50:	08005e89 	.word	0x08005e89
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e58:	3308      	adds	r3, #8
 8005e5a:	2101      	movs	r1, #1
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f000 ff1d 	bl	8006c9c <RCCEx_PLL2_Config>
 8005e62:	4603      	mov	r3, r0
 8005e64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005e68:	e00f      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e6e:	3328      	adds	r3, #40	; 0x28
 8005e70:	2101      	movs	r1, #1
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 ffc4 	bl	8006e00 <RCCEx_PLL3_Config>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005e7e:	e004      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e86:	e000      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10b      	bne.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e92:	4b6c      	ldr	r3, [pc, #432]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e96:	f023 0107 	bic.w	r1, r3, #7
 8005e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ea2:	4a68      	ldr	r2, [pc, #416]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ea4:	430b      	orrs	r3, r1
 8005ea6:	6593      	str	r3, [r2, #88]	; 0x58
 8005ea8:	e003      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005eae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eba:	f002 0320 	and.w	r3, r2, #32
 8005ebe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ec8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005ecc:	460b      	mov	r3, r1
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	d055      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ede:	d033      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005ee0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ee4:	d82c      	bhi.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eea:	d02f      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ef0:	d826      	bhi.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005ef2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ef6:	d02b      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005ef8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005efc:	d820      	bhi.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005efe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f02:	d012      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005f04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f08:	d81a      	bhi.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d022      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005f0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f12:	d115      	bne.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f18:	3308      	adds	r3, #8
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f000 febd 	bl	8006c9c <RCCEx_PLL2_Config>
 8005f22:	4603      	mov	r3, r0
 8005f24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005f28:	e015      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f2e:	3328      	adds	r3, #40	; 0x28
 8005f30:	2102      	movs	r1, #2
 8005f32:	4618      	mov	r0, r3
 8005f34:	f000 ff64 	bl	8006e00 <RCCEx_PLL3_Config>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005f3e:	e00a      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f46:	e006      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005f48:	bf00      	nop
 8005f4a:	e004      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005f4c:	bf00      	nop
 8005f4e:	e002      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005f50:	bf00      	nop
 8005f52:	e000      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005f54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10b      	bne.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f5e:	4b39      	ldr	r3, [pc, #228]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f62:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f6e:	4a35      	ldr	r2, [pc, #212]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f70:	430b      	orrs	r3, r1
 8005f72:	6553      	str	r3, [r2, #84]	; 0x54
 8005f74:	e003      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f86:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f8e:	2300      	movs	r3, #0
 8005f90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005f94:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005f98:	460b      	mov	r3, r1
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	d058      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fa2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fa6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005faa:	d033      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005fac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005fb0:	d82c      	bhi.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fb6:	d02f      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fbc:	d826      	bhi.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005fbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fc2:	d02b      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005fc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fc8:	d820      	bhi.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005fca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fce:	d012      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005fd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fd4:	d81a      	bhi.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d022      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fde:	d115      	bne.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fe4:	3308      	adds	r3, #8
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f000 fe57 	bl	8006c9c <RCCEx_PLL2_Config>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005ff4:	e015      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ffa:	3328      	adds	r3, #40	; 0x28
 8005ffc:	2102      	movs	r1, #2
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 fefe 	bl	8006e00 <RCCEx_PLL3_Config>
 8006004:	4603      	mov	r3, r0
 8006006:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800600a:	e00a      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006012:	e006      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006014:	bf00      	nop
 8006016:	e004      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006018:	bf00      	nop
 800601a:	e002      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800601c:	bf00      	nop
 800601e:	e000      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006020:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006022:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10e      	bne.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800602a:	4b06      	ldr	r3, [pc, #24]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800602c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800602e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006032:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006036:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800603a:	4a02      	ldr	r2, [pc, #8]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800603c:	430b      	orrs	r3, r1
 800603e:	6593      	str	r3, [r2, #88]	; 0x58
 8006040:	e006      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006042:	bf00      	nop
 8006044:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006048:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800604c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006058:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800605c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006060:	2300      	movs	r3, #0
 8006062:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006066:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800606a:	460b      	mov	r3, r1
 800606c:	4313      	orrs	r3, r2
 800606e:	d055      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006070:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006074:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006078:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800607c:	d033      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800607e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006082:	d82c      	bhi.n	80060de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006088:	d02f      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800608a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800608e:	d826      	bhi.n	80060de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006090:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006094:	d02b      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006096:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800609a:	d820      	bhi.n	80060de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800609c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060a0:	d012      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80060a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060a6:	d81a      	bhi.n	80060de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d022      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80060ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060b0:	d115      	bne.n	80060de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060b6:	3308      	adds	r3, #8
 80060b8:	2100      	movs	r1, #0
 80060ba:	4618      	mov	r0, r3
 80060bc:	f000 fdee 	bl	8006c9c <RCCEx_PLL2_Config>
 80060c0:	4603      	mov	r3, r0
 80060c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80060c6:	e015      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060cc:	3328      	adds	r3, #40	; 0x28
 80060ce:	2102      	movs	r1, #2
 80060d0:	4618      	mov	r0, r3
 80060d2:	f000 fe95 	bl	8006e00 <RCCEx_PLL3_Config>
 80060d6:	4603      	mov	r3, r0
 80060d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80060dc:	e00a      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80060e4:	e006      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80060e6:	bf00      	nop
 80060e8:	e004      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80060ea:	bf00      	nop
 80060ec:	e002      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80060ee:	bf00      	nop
 80060f0:	e000      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80060f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d10b      	bne.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80060fc:	4ba1      	ldr	r3, [pc, #644]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006100:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006104:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006108:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800610c:	4a9d      	ldr	r2, [pc, #628]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800610e:	430b      	orrs	r3, r1
 8006110:	6593      	str	r3, [r2, #88]	; 0x58
 8006112:	e003      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006114:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006118:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800611c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006124:	f002 0308 	and.w	r3, r2, #8
 8006128:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800612c:	2300      	movs	r3, #0
 800612e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006132:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006136:	460b      	mov	r3, r1
 8006138:	4313      	orrs	r3, r2
 800613a:	d01e      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800613c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006140:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006148:	d10c      	bne.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800614a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800614e:	3328      	adds	r3, #40	; 0x28
 8006150:	2102      	movs	r1, #2
 8006152:	4618      	mov	r0, r3
 8006154:	f000 fe54 	bl	8006e00 <RCCEx_PLL3_Config>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d002      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006164:	4b87      	ldr	r3, [pc, #540]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006168:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800616c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006170:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006174:	4a83      	ldr	r2, [pc, #524]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006176:	430b      	orrs	r3, r1
 8006178:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800617a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800617e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006182:	f002 0310 	and.w	r3, r2, #16
 8006186:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800618a:	2300      	movs	r3, #0
 800618c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006190:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006194:	460b      	mov	r3, r1
 8006196:	4313      	orrs	r3, r2
 8006198:	d01e      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800619a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800619e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061a6:	d10c      	bne.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80061a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ac:	3328      	adds	r3, #40	; 0x28
 80061ae:	2102      	movs	r1, #2
 80061b0:	4618      	mov	r0, r3
 80061b2:	f000 fe25 	bl	8006e00 <RCCEx_PLL3_Config>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d002      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80061c2:	4b70      	ldr	r3, [pc, #448]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80061ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061d2:	4a6c      	ldr	r2, [pc, #432]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061d4:	430b      	orrs	r3, r1
 80061d6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80061d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80061e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80061e8:	2300      	movs	r3, #0
 80061ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80061ee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80061f2:	460b      	mov	r3, r1
 80061f4:	4313      	orrs	r3, r2
 80061f6:	d03e      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80061f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006200:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006204:	d022      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006206:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800620a:	d81b      	bhi.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800620c:	2b00      	cmp	r3, #0
 800620e:	d003      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006214:	d00b      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006216:	e015      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800621c:	3308      	adds	r3, #8
 800621e:	2100      	movs	r1, #0
 8006220:	4618      	mov	r0, r3
 8006222:	f000 fd3b 	bl	8006c9c <RCCEx_PLL2_Config>
 8006226:	4603      	mov	r3, r0
 8006228:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800622c:	e00f      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800622e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006232:	3328      	adds	r3, #40	; 0x28
 8006234:	2102      	movs	r1, #2
 8006236:	4618      	mov	r0, r3
 8006238:	f000 fde2 	bl	8006e00 <RCCEx_PLL3_Config>
 800623c:	4603      	mov	r3, r0
 800623e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006242:	e004      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800624a:	e000      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800624c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800624e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006252:	2b00      	cmp	r3, #0
 8006254:	d10b      	bne.n	800626e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006256:	4b4b      	ldr	r3, [pc, #300]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800625a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800625e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006262:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006266:	4a47      	ldr	r2, [pc, #284]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006268:	430b      	orrs	r3, r1
 800626a:	6593      	str	r3, [r2, #88]	; 0x58
 800626c:	e003      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800626e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006272:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800627a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006282:	67bb      	str	r3, [r7, #120]	; 0x78
 8006284:	2300      	movs	r3, #0
 8006286:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006288:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800628c:	460b      	mov	r3, r1
 800628e:	4313      	orrs	r3, r2
 8006290:	d03b      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800629a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800629e:	d01f      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80062a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062a4:	d818      	bhi.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80062a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062aa:	d003      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80062ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062b0:	d007      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80062b2:	e011      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062b4:	4b33      	ldr	r3, [pc, #204]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b8:	4a32      	ldr	r2, [pc, #200]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80062c0:	e00f      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062c6:	3328      	adds	r3, #40	; 0x28
 80062c8:	2101      	movs	r1, #1
 80062ca:	4618      	mov	r0, r3
 80062cc:	f000 fd98 	bl	8006e00 <RCCEx_PLL3_Config>
 80062d0:	4603      	mov	r3, r0
 80062d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80062d6:	e004      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80062de:	e000      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80062e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10b      	bne.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062ea:	4b26      	ldr	r3, [pc, #152]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ee:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80062f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062fa:	4a22      	ldr	r2, [pc, #136]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062fc:	430b      	orrs	r3, r1
 80062fe:	6553      	str	r3, [r2, #84]	; 0x54
 8006300:	e003      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006302:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006306:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800630a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800630e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006312:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006316:	673b      	str	r3, [r7, #112]	; 0x70
 8006318:	2300      	movs	r3, #0
 800631a:	677b      	str	r3, [r7, #116]	; 0x74
 800631c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006320:	460b      	mov	r3, r1
 8006322:	4313      	orrs	r3, r2
 8006324:	d034      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800632a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800632c:	2b00      	cmp	r3, #0
 800632e:	d003      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006334:	d007      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006336:	e011      	b.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006338:	4b12      	ldr	r3, [pc, #72]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800633a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633c:	4a11      	ldr	r2, [pc, #68]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800633e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006342:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006344:	e00e      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006346:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800634a:	3308      	adds	r3, #8
 800634c:	2102      	movs	r1, #2
 800634e:	4618      	mov	r0, r3
 8006350:	f000 fca4 	bl	8006c9c <RCCEx_PLL2_Config>
 8006354:	4603      	mov	r3, r0
 8006356:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800635a:	e003      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006362:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006364:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10d      	bne.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800636c:	4b05      	ldr	r3, [pc, #20]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800636e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006370:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006374:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800637a:	4a02      	ldr	r2, [pc, #8]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800637c:	430b      	orrs	r3, r1
 800637e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006380:	e006      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006382:	bf00      	nop
 8006384:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006388:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800638c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006398:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800639c:	66bb      	str	r3, [r7, #104]	; 0x68
 800639e:	2300      	movs	r3, #0
 80063a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063a2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80063a6:	460b      	mov	r3, r1
 80063a8:	4313      	orrs	r3, r2
 80063aa:	d00c      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80063ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063b0:	3328      	adds	r3, #40	; 0x28
 80063b2:	2102      	movs	r1, #2
 80063b4:	4618      	mov	r0, r3
 80063b6:	f000 fd23 	bl	8006e00 <RCCEx_PLL3_Config>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d002      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80063c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ce:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80063d2:	663b      	str	r3, [r7, #96]	; 0x60
 80063d4:	2300      	movs	r3, #0
 80063d6:	667b      	str	r3, [r7, #100]	; 0x64
 80063d8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80063dc:	460b      	mov	r3, r1
 80063de:	4313      	orrs	r3, r2
 80063e0:	d038      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80063e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063ee:	d018      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80063f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063f4:	d811      	bhi.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80063f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063fa:	d014      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80063fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006400:	d80b      	bhi.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006402:	2b00      	cmp	r3, #0
 8006404:	d011      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800640a:	d106      	bne.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800640c:	4bc3      	ldr	r3, [pc, #780]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800640e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006410:	4ac2      	ldr	r2, [pc, #776]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006416:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006418:	e008      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006420:	e004      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006422:	bf00      	nop
 8006424:	e002      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006426:	bf00      	nop
 8006428:	e000      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800642a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800642c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10b      	bne.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006434:	4bb9      	ldr	r3, [pc, #740]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006438:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800643c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006440:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006444:	4ab5      	ldr	r2, [pc, #724]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006446:	430b      	orrs	r3, r1
 8006448:	6553      	str	r3, [r2, #84]	; 0x54
 800644a:	e003      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800644c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006450:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006454:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006460:	65bb      	str	r3, [r7, #88]	; 0x58
 8006462:	2300      	movs	r3, #0
 8006464:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006466:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800646a:	460b      	mov	r3, r1
 800646c:	4313      	orrs	r3, r2
 800646e:	d009      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006470:	4baa      	ldr	r3, [pc, #680]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006474:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800647c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800647e:	4aa7      	ldr	r2, [pc, #668]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006480:	430b      	orrs	r3, r1
 8006482:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006484:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006490:	653b      	str	r3, [r7, #80]	; 0x50
 8006492:	2300      	movs	r3, #0
 8006494:	657b      	str	r3, [r7, #84]	; 0x54
 8006496:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800649a:	460b      	mov	r3, r1
 800649c:	4313      	orrs	r3, r2
 800649e:	d00a      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80064a0:	4b9e      	ldr	r3, [pc, #632]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80064a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80064b0:	4a9a      	ldr	r2, [pc, #616]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064b2:	430b      	orrs	r3, r1
 80064b4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80064b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064be:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80064c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80064c4:	2300      	movs	r3, #0
 80064c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064c8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80064cc:	460b      	mov	r3, r1
 80064ce:	4313      	orrs	r3, r2
 80064d0:	d009      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80064d2:	4b92      	ldr	r3, [pc, #584]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064d6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80064da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064e0:	4a8e      	ldr	r2, [pc, #568]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064e2:	430b      	orrs	r3, r1
 80064e4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80064e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ee:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80064f2:	643b      	str	r3, [r7, #64]	; 0x40
 80064f4:	2300      	movs	r3, #0
 80064f6:	647b      	str	r3, [r7, #68]	; 0x44
 80064f8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80064fc:	460b      	mov	r3, r1
 80064fe:	4313      	orrs	r3, r2
 8006500:	d00e      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006502:	4b86      	ldr	r3, [pc, #536]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	4a85      	ldr	r2, [pc, #532]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006508:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800650c:	6113      	str	r3, [r2, #16]
 800650e:	4b83      	ldr	r3, [pc, #524]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006510:	6919      	ldr	r1, [r3, #16]
 8006512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006516:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800651a:	4a80      	ldr	r2, [pc, #512]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800651c:	430b      	orrs	r3, r1
 800651e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006528:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800652c:	63bb      	str	r3, [r7, #56]	; 0x38
 800652e:	2300      	movs	r3, #0
 8006530:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006532:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006536:	460b      	mov	r3, r1
 8006538:	4313      	orrs	r3, r2
 800653a:	d009      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800653c:	4b77      	ldr	r3, [pc, #476]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800653e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006540:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006544:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800654a:	4a74      	ldr	r2, [pc, #464]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800654c:	430b      	orrs	r3, r1
 800654e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006558:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800655c:	633b      	str	r3, [r7, #48]	; 0x30
 800655e:	2300      	movs	r3, #0
 8006560:	637b      	str	r3, [r7, #52]	; 0x34
 8006562:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006566:	460b      	mov	r3, r1
 8006568:	4313      	orrs	r3, r2
 800656a:	d00a      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800656c:	4b6b      	ldr	r3, [pc, #428]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800656e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006570:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800657c:	4a67      	ldr	r2, [pc, #412]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800657e:	430b      	orrs	r3, r1
 8006580:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658a:	2100      	movs	r1, #0
 800658c:	62b9      	str	r1, [r7, #40]	; 0x28
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006594:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006598:	460b      	mov	r3, r1
 800659a:	4313      	orrs	r3, r2
 800659c:	d011      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800659e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065a2:	3308      	adds	r3, #8
 80065a4:	2100      	movs	r1, #0
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 fb78 	bl	8006c9c <RCCEx_PLL2_Config>
 80065ac:	4603      	mov	r3, r0
 80065ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80065b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80065c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ca:	2100      	movs	r1, #0
 80065cc:	6239      	str	r1, [r7, #32]
 80065ce:	f003 0302 	and.w	r3, r3, #2
 80065d2:	627b      	str	r3, [r7, #36]	; 0x24
 80065d4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80065d8:	460b      	mov	r3, r1
 80065da:	4313      	orrs	r3, r2
 80065dc:	d011      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065e2:	3308      	adds	r3, #8
 80065e4:	2101      	movs	r1, #1
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 fb58 	bl	8006c9c <RCCEx_PLL2_Config>
 80065ec:	4603      	mov	r3, r0
 80065ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80065f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006602:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660a:	2100      	movs	r1, #0
 800660c:	61b9      	str	r1, [r7, #24]
 800660e:	f003 0304 	and.w	r3, r3, #4
 8006612:	61fb      	str	r3, [r7, #28]
 8006614:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006618:	460b      	mov	r3, r1
 800661a:	4313      	orrs	r3, r2
 800661c:	d011      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800661e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006622:	3308      	adds	r3, #8
 8006624:	2102      	movs	r1, #2
 8006626:	4618      	mov	r0, r3
 8006628:	f000 fb38 	bl	8006c9c <RCCEx_PLL2_Config>
 800662c:	4603      	mov	r3, r0
 800662e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006632:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006636:	2b00      	cmp	r3, #0
 8006638:	d003      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800663a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800663e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006642:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664a:	2100      	movs	r1, #0
 800664c:	6139      	str	r1, [r7, #16]
 800664e:	f003 0308 	and.w	r3, r3, #8
 8006652:	617b      	str	r3, [r7, #20]
 8006654:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006658:	460b      	mov	r3, r1
 800665a:	4313      	orrs	r3, r2
 800665c:	d011      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800665e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006662:	3328      	adds	r3, #40	; 0x28
 8006664:	2100      	movs	r1, #0
 8006666:	4618      	mov	r0, r3
 8006668:	f000 fbca 	bl	8006e00 <RCCEx_PLL3_Config>
 800666c:	4603      	mov	r3, r0
 800666e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8006672:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800667a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800667e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668a:	2100      	movs	r1, #0
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	f003 0310 	and.w	r3, r3, #16
 8006692:	60fb      	str	r3, [r7, #12]
 8006694:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006698:	460b      	mov	r3, r1
 800669a:	4313      	orrs	r3, r2
 800669c:	d011      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800669e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066a2:	3328      	adds	r3, #40	; 0x28
 80066a4:	2101      	movs	r1, #1
 80066a6:	4618      	mov	r0, r3
 80066a8:	f000 fbaa 	bl	8006e00 <RCCEx_PLL3_Config>
 80066ac:	4603      	mov	r3, r0
 80066ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80066b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d003      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80066c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ca:	2100      	movs	r1, #0
 80066cc:	6039      	str	r1, [r7, #0]
 80066ce:	f003 0320 	and.w	r3, r3, #32
 80066d2:	607b      	str	r3, [r7, #4]
 80066d4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80066d8:	460b      	mov	r3, r1
 80066da:	4313      	orrs	r3, r2
 80066dc:	d011      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066e2:	3328      	adds	r3, #40	; 0x28
 80066e4:	2102      	movs	r1, #2
 80066e6:	4618      	mov	r0, r3
 80066e8:	f000 fb8a 	bl	8006e00 <RCCEx_PLL3_Config>
 80066ec:	4603      	mov	r3, r0
 80066ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80066f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d003      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8006702:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8006706:	2b00      	cmp	r3, #0
 8006708:	d101      	bne.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800670a:	2300      	movs	r3, #0
 800670c:	e000      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
}
 8006710:	4618      	mov	r0, r3
 8006712:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8006716:	46bd      	mov	sp, r7
 8006718:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800671c:	58024400 	.word	0x58024400

08006720 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006724:	f7fe fd96 	bl	8005254 <HAL_RCC_GetHCLKFreq>
 8006728:	4602      	mov	r2, r0
 800672a:	4b06      	ldr	r3, [pc, #24]	; (8006744 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	091b      	lsrs	r3, r3, #4
 8006730:	f003 0307 	and.w	r3, r3, #7
 8006734:	4904      	ldr	r1, [pc, #16]	; (8006748 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006736:	5ccb      	ldrb	r3, [r1, r3]
 8006738:	f003 031f 	and.w	r3, r3, #31
 800673c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006740:	4618      	mov	r0, r3
 8006742:	bd80      	pop	{r7, pc}
 8006744:	58024400 	.word	0x58024400
 8006748:	0800f488 	.word	0x0800f488

0800674c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800674c:	b480      	push	{r7}
 800674e:	b089      	sub	sp, #36	; 0x24
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006754:	4ba1      	ldr	r3, [pc, #644]	; (80069dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006758:	f003 0303 	and.w	r3, r3, #3
 800675c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800675e:	4b9f      	ldr	r3, [pc, #636]	; (80069dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006762:	0b1b      	lsrs	r3, r3, #12
 8006764:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006768:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800676a:	4b9c      	ldr	r3, [pc, #624]	; (80069dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800676c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676e:	091b      	lsrs	r3, r3, #4
 8006770:	f003 0301 	and.w	r3, r3, #1
 8006774:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006776:	4b99      	ldr	r3, [pc, #612]	; (80069dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800677a:	08db      	lsrs	r3, r3, #3
 800677c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	fb02 f303 	mul.w	r3, r2, r3
 8006786:	ee07 3a90 	vmov	s15, r3
 800678a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800678e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	2b00      	cmp	r3, #0
 8006796:	f000 8111 	beq.w	80069bc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	2b02      	cmp	r3, #2
 800679e:	f000 8083 	beq.w	80068a8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	f200 80a1 	bhi.w	80068ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d003      	beq.n	80067b8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d056      	beq.n	8006864 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80067b6:	e099      	b.n	80068ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067b8:	4b88      	ldr	r3, [pc, #544]	; (80069dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0320 	and.w	r3, r3, #32
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d02d      	beq.n	8006820 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067c4:	4b85      	ldr	r3, [pc, #532]	; (80069dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	08db      	lsrs	r3, r3, #3
 80067ca:	f003 0303 	and.w	r3, r3, #3
 80067ce:	4a84      	ldr	r2, [pc, #528]	; (80069e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80067d0:	fa22 f303 	lsr.w	r3, r2, r3
 80067d4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	ee07 3a90 	vmov	s15, r3
 80067dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	ee07 3a90 	vmov	s15, r3
 80067e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ee:	4b7b      	ldr	r3, [pc, #492]	; (80069dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067f6:	ee07 3a90 	vmov	s15, r3
 80067fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006802:	eddf 5a78 	vldr	s11, [pc, #480]	; 80069e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800680a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800680e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800681a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800681e:	e087      	b.n	8006930 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	ee07 3a90 	vmov	s15, r3
 8006826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800682a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80069e8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800682e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006832:	4b6a      	ldr	r3, [pc, #424]	; (80069dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800683a:	ee07 3a90 	vmov	s15, r3
 800683e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006842:	ed97 6a03 	vldr	s12, [r7, #12]
 8006846:	eddf 5a67 	vldr	s11, [pc, #412]	; 80069e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800684a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800684e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006852:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800685a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800685e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006862:	e065      	b.n	8006930 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	ee07 3a90 	vmov	s15, r3
 800686a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800686e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80069ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006876:	4b59      	ldr	r3, [pc, #356]	; (80069dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800687e:	ee07 3a90 	vmov	s15, r3
 8006882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006886:	ed97 6a03 	vldr	s12, [r7, #12]
 800688a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80069e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800688e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800689a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800689e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068a6:	e043      	b.n	8006930 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	ee07 3a90 	vmov	s15, r3
 80068ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80069f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80068b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ba:	4b48      	ldr	r3, [pc, #288]	; (80069dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068c2:	ee07 3a90 	vmov	s15, r3
 80068c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80068ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 80069e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068ea:	e021      	b.n	8006930 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	ee07 3a90 	vmov	s15, r3
 80068f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80069ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80068fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068fe:	4b37      	ldr	r3, [pc, #220]	; (80069dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006906:	ee07 3a90 	vmov	s15, r3
 800690a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800690e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006912:	eddf 5a34 	vldr	s11, [pc, #208]	; 80069e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800691a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800691e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800692a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800692e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006930:	4b2a      	ldr	r3, [pc, #168]	; (80069dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006934:	0a5b      	lsrs	r3, r3, #9
 8006936:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800693a:	ee07 3a90 	vmov	s15, r3
 800693e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006942:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006946:	ee37 7a87 	vadd.f32	s14, s15, s14
 800694a:	edd7 6a07 	vldr	s13, [r7, #28]
 800694e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006952:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006956:	ee17 2a90 	vmov	r2, s15
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800695e:	4b1f      	ldr	r3, [pc, #124]	; (80069dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006962:	0c1b      	lsrs	r3, r3, #16
 8006964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006968:	ee07 3a90 	vmov	s15, r3
 800696c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006970:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006974:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006978:	edd7 6a07 	vldr	s13, [r7, #28]
 800697c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006984:	ee17 2a90 	vmov	r2, s15
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800698c:	4b13      	ldr	r3, [pc, #76]	; (80069dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800698e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006990:	0e1b      	lsrs	r3, r3, #24
 8006992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006996:	ee07 3a90 	vmov	s15, r3
 800699a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800699e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80069aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069b2:	ee17 2a90 	vmov	r2, s15
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80069ba:	e008      	b.n	80069ce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	609a      	str	r2, [r3, #8]
}
 80069ce:	bf00      	nop
 80069d0:	3724      	adds	r7, #36	; 0x24
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	58024400 	.word	0x58024400
 80069e0:	03d09000 	.word	0x03d09000
 80069e4:	46000000 	.word	0x46000000
 80069e8:	4c742400 	.word	0x4c742400
 80069ec:	4a742400 	.word	0x4a742400
 80069f0:	4bbebc20 	.word	0x4bbebc20

080069f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b089      	sub	sp, #36	; 0x24
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069fc:	4ba1      	ldr	r3, [pc, #644]	; (8006c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a00:	f003 0303 	and.w	r3, r3, #3
 8006a04:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006a06:	4b9f      	ldr	r3, [pc, #636]	; (8006c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0a:	0d1b      	lsrs	r3, r3, #20
 8006a0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a10:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006a12:	4b9c      	ldr	r3, [pc, #624]	; (8006c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a16:	0a1b      	lsrs	r3, r3, #8
 8006a18:	f003 0301 	and.w	r3, r3, #1
 8006a1c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006a1e:	4b99      	ldr	r3, [pc, #612]	; (8006c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a22:	08db      	lsrs	r3, r3, #3
 8006a24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	fb02 f303 	mul.w	r3, r2, r3
 8006a2e:	ee07 3a90 	vmov	s15, r3
 8006a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f000 8111 	beq.w	8006c64 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	f000 8083 	beq.w	8006b50 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	f200 80a1 	bhi.w	8006b94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d003      	beq.n	8006a60 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d056      	beq.n	8006b0c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006a5e:	e099      	b.n	8006b94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a60:	4b88      	ldr	r3, [pc, #544]	; (8006c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0320 	and.w	r3, r3, #32
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d02d      	beq.n	8006ac8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a6c:	4b85      	ldr	r3, [pc, #532]	; (8006c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	08db      	lsrs	r3, r3, #3
 8006a72:	f003 0303 	and.w	r3, r3, #3
 8006a76:	4a84      	ldr	r2, [pc, #528]	; (8006c88 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006a78:	fa22 f303 	lsr.w	r3, r2, r3
 8006a7c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	ee07 3a90 	vmov	s15, r3
 8006a84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	ee07 3a90 	vmov	s15, r3
 8006a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a96:	4b7b      	ldr	r3, [pc, #492]	; (8006c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a9e:	ee07 3a90 	vmov	s15, r3
 8006aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aaa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006c8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ac2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006ac6:	e087      	b.n	8006bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	ee07 3a90 	vmov	s15, r3
 8006ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ad2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006c90 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ada:	4b6a      	ldr	r3, [pc, #424]	; (8006c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ae2:	ee07 3a90 	vmov	s15, r3
 8006ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aea:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aee:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006c8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006afa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b0a:	e065      	b.n	8006bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	ee07 3a90 	vmov	s15, r3
 8006b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b16:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006c94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b1e:	4b59      	ldr	r3, [pc, #356]	; (8006c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b26:	ee07 3a90 	vmov	s15, r3
 8006b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b32:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006c8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b4e:	e043      	b.n	8006bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	ee07 3a90 	vmov	s15, r3
 8006b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b5a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b62:	4b48      	ldr	r3, [pc, #288]	; (8006c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b6a:	ee07 3a90 	vmov	s15, r3
 8006b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b72:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b76:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006c8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b92:	e021      	b.n	8006bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	ee07 3a90 	vmov	s15, r3
 8006b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b9e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006c94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ba6:	4b37      	ldr	r3, [pc, #220]	; (8006c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bae:	ee07 3a90 	vmov	s15, r3
 8006bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bba:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006c8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bd6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006bd8:	4b2a      	ldr	r3, [pc, #168]	; (8006c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bdc:	0a5b      	lsrs	r3, r3, #9
 8006bde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006be2:	ee07 3a90 	vmov	s15, r3
 8006be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bfe:	ee17 2a90 	vmov	r2, s15
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006c06:	4b1f      	ldr	r3, [pc, #124]	; (8006c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0a:	0c1b      	lsrs	r3, r3, #16
 8006c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c10:	ee07 3a90 	vmov	s15, r3
 8006c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c20:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c2c:	ee17 2a90 	vmov	r2, s15
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006c34:	4b13      	ldr	r3, [pc, #76]	; (8006c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c38:	0e1b      	lsrs	r3, r3, #24
 8006c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c3e:	ee07 3a90 	vmov	s15, r3
 8006c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c5a:	ee17 2a90 	vmov	r2, s15
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006c62:	e008      	b.n	8006c76 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	609a      	str	r2, [r3, #8]
}
 8006c76:	bf00      	nop
 8006c78:	3724      	adds	r7, #36	; 0x24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	58024400 	.word	0x58024400
 8006c88:	03d09000 	.word	0x03d09000
 8006c8c:	46000000 	.word	0x46000000
 8006c90:	4c742400 	.word	0x4c742400
 8006c94:	4a742400 	.word	0x4a742400
 8006c98:	4bbebc20 	.word	0x4bbebc20

08006c9c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006caa:	4b53      	ldr	r3, [pc, #332]	; (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cae:	f003 0303 	and.w	r3, r3, #3
 8006cb2:	2b03      	cmp	r3, #3
 8006cb4:	d101      	bne.n	8006cba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e099      	b.n	8006dee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006cba:	4b4f      	ldr	r3, [pc, #316]	; (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a4e      	ldr	r2, [pc, #312]	; (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006cc0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006cc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cc6:	f7fb f855 	bl	8001d74 <HAL_GetTick>
 8006cca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ccc:	e008      	b.n	8006ce0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006cce:	f7fb f851 	bl	8001d74 <HAL_GetTick>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	d901      	bls.n	8006ce0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e086      	b.n	8006dee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ce0:	4b45      	ldr	r3, [pc, #276]	; (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1f0      	bne.n	8006cce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006cec:	4b42      	ldr	r3, [pc, #264]	; (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	031b      	lsls	r3, r3, #12
 8006cfa:	493f      	ldr	r1, [pc, #252]	; (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	628b      	str	r3, [r1, #40]	; 0x28
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	3b01      	subs	r3, #1
 8006d06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	025b      	lsls	r3, r3, #9
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	431a      	orrs	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	041b      	lsls	r3, r3, #16
 8006d1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006d22:	431a      	orrs	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	061b      	lsls	r3, r3, #24
 8006d2c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006d30:	4931      	ldr	r1, [pc, #196]	; (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006d32:	4313      	orrs	r3, r2
 8006d34:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006d36:	4b30      	ldr	r3, [pc, #192]	; (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	695b      	ldr	r3, [r3, #20]
 8006d42:	492d      	ldr	r1, [pc, #180]	; (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006d44:	4313      	orrs	r3, r2
 8006d46:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006d48:	4b2b      	ldr	r3, [pc, #172]	; (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4c:	f023 0220 	bic.w	r2, r3, #32
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	4928      	ldr	r1, [pc, #160]	; (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006d5a:	4b27      	ldr	r3, [pc, #156]	; (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5e:	4a26      	ldr	r2, [pc, #152]	; (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006d60:	f023 0310 	bic.w	r3, r3, #16
 8006d64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006d66:	4b24      	ldr	r3, [pc, #144]	; (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006d68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d6a:	4b24      	ldr	r3, [pc, #144]	; (8006dfc <RCCEx_PLL2_Config+0x160>)
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	69d2      	ldr	r2, [r2, #28]
 8006d72:	00d2      	lsls	r2, r2, #3
 8006d74:	4920      	ldr	r1, [pc, #128]	; (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006d76:	4313      	orrs	r3, r2
 8006d78:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006d7a:	4b1f      	ldr	r3, [pc, #124]	; (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7e:	4a1e      	ldr	r2, [pc, #120]	; (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006d80:	f043 0310 	orr.w	r3, r3, #16
 8006d84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d106      	bne.n	8006d9a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006d8c:	4b1a      	ldr	r3, [pc, #104]	; (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d90:	4a19      	ldr	r2, [pc, #100]	; (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006d92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006d98:	e00f      	b.n	8006dba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d106      	bne.n	8006dae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006da0:	4b15      	ldr	r3, [pc, #84]	; (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da4:	4a14      	ldr	r2, [pc, #80]	; (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006da6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006daa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006dac:	e005      	b.n	8006dba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006dae:	4b12      	ldr	r3, [pc, #72]	; (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db2:	4a11      	ldr	r2, [pc, #68]	; (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006db4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006db8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006dba:	4b0f      	ldr	r3, [pc, #60]	; (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a0e      	ldr	r2, [pc, #56]	; (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006dc0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006dc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dc6:	f7fa ffd5 	bl	8001d74 <HAL_GetTick>
 8006dca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006dcc:	e008      	b.n	8006de0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006dce:	f7fa ffd1 	bl	8001d74 <HAL_GetTick>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d901      	bls.n	8006de0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e006      	b.n	8006dee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006de0:	4b05      	ldr	r3, [pc, #20]	; (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d0f0      	beq.n	8006dce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	58024400 	.word	0x58024400
 8006dfc:	ffff0007 	.word	0xffff0007

08006e00 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e0e:	4b53      	ldr	r3, [pc, #332]	; (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e12:	f003 0303 	and.w	r3, r3, #3
 8006e16:	2b03      	cmp	r3, #3
 8006e18:	d101      	bne.n	8006e1e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e099      	b.n	8006f52 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006e1e:	4b4f      	ldr	r3, [pc, #316]	; (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a4e      	ldr	r2, [pc, #312]	; (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006e24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e2a:	f7fa ffa3 	bl	8001d74 <HAL_GetTick>
 8006e2e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e30:	e008      	b.n	8006e44 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006e32:	f7fa ff9f 	bl	8001d74 <HAL_GetTick>
 8006e36:	4602      	mov	r2, r0
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	1ad3      	subs	r3, r2, r3
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d901      	bls.n	8006e44 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e086      	b.n	8006f52 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e44:	4b45      	ldr	r3, [pc, #276]	; (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1f0      	bne.n	8006e32 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006e50:	4b42      	ldr	r3, [pc, #264]	; (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e54:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	051b      	lsls	r3, r3, #20
 8006e5e:	493f      	ldr	r1, [pc, #252]	; (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006e60:	4313      	orrs	r3, r2
 8006e62:	628b      	str	r3, [r1, #40]	; 0x28
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	3b01      	subs	r3, #1
 8006e74:	025b      	lsls	r3, r3, #9
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	431a      	orrs	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	041b      	lsls	r3, r3, #16
 8006e82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006e86:	431a      	orrs	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	061b      	lsls	r3, r3, #24
 8006e90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006e94:	4931      	ldr	r1, [pc, #196]	; (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006e96:	4313      	orrs	r3, r2
 8006e98:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006e9a:	4b30      	ldr	r3, [pc, #192]	; (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	695b      	ldr	r3, [r3, #20]
 8006ea6:	492d      	ldr	r1, [pc, #180]	; (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006eac:	4b2b      	ldr	r3, [pc, #172]	; (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	699b      	ldr	r3, [r3, #24]
 8006eb8:	4928      	ldr	r1, [pc, #160]	; (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006ebe:	4b27      	ldr	r3, [pc, #156]	; (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec2:	4a26      	ldr	r2, [pc, #152]	; (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006ec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006eca:	4b24      	ldr	r3, [pc, #144]	; (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006ecc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ece:	4b24      	ldr	r3, [pc, #144]	; (8006f60 <RCCEx_PLL3_Config+0x160>)
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	69d2      	ldr	r2, [r2, #28]
 8006ed6:	00d2      	lsls	r2, r2, #3
 8006ed8:	4920      	ldr	r1, [pc, #128]	; (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006eda:	4313      	orrs	r3, r2
 8006edc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006ede:	4b1f      	ldr	r3, [pc, #124]	; (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee2:	4a1e      	ldr	r2, [pc, #120]	; (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ee8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d106      	bne.n	8006efe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006ef0:	4b1a      	ldr	r3, [pc, #104]	; (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef4:	4a19      	ldr	r2, [pc, #100]	; (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006ef6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006efa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006efc:	e00f      	b.n	8006f1e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d106      	bne.n	8006f12 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006f04:	4b15      	ldr	r3, [pc, #84]	; (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f08:	4a14      	ldr	r2, [pc, #80]	; (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006f0a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006f0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f10:	e005      	b.n	8006f1e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006f12:	4b12      	ldr	r3, [pc, #72]	; (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f16:	4a11      	ldr	r2, [pc, #68]	; (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006f18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f1c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006f1e:	4b0f      	ldr	r3, [pc, #60]	; (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a0e      	ldr	r2, [pc, #56]	; (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f2a:	f7fa ff23 	bl	8001d74 <HAL_GetTick>
 8006f2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f30:	e008      	b.n	8006f44 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f32:	f7fa ff1f 	bl	8001d74 <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d901      	bls.n	8006f44 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e006      	b.n	8006f52 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f44:	4b05      	ldr	r3, [pc, #20]	; (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d0f0      	beq.n	8006f32 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	58024400 	.word	0x58024400
 8006f60:	ffff0007 	.word	0xffff0007

08006f64 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e02b      	b.n	8006fd0 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d106      	bne.n	8006f92 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f7fa fca9 	bl	80018e4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2202      	movs	r2, #2
 8006f96:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	3304      	adds	r3, #4
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	4610      	mov	r0, r2
 8006fa6:	f003 fb59 	bl	800a65c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6818      	ldr	r0, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	6839      	ldr	r1, [r7, #0]
 8006fb6:	f003 fbad 	bl	800a714 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8006fba:	4b07      	ldr	r3, [pc, #28]	; (8006fd8 <HAL_SDRAM_Init+0x74>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a06      	ldr	r2, [pc, #24]	; (8006fd8 <HAL_SDRAM_Init+0x74>)
 8006fc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fc4:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3708      	adds	r7, #8
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	52004000 	.word	0x52004000

08006fdc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006fee:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006ff0:	7dfb      	ldrb	r3, [r7, #23]
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d101      	bne.n	8006ffa <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8006ff6:	2302      	movs	r3, #2
 8006ff8:	e021      	b.n	800703e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006ffa:	7dfb      	ldrb	r3, [r7, #23]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d002      	beq.n	8007006 <HAL_SDRAM_SendCommand+0x2a>
 8007000:	7dfb      	ldrb	r3, [r7, #23]
 8007002:	2b05      	cmp	r3, #5
 8007004:	d118      	bne.n	8007038 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2202      	movs	r2, #2
 800700a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	68b9      	ldr	r1, [r7, #8]
 8007016:	4618      	mov	r0, r3
 8007018:	f003 fbe6 	bl	800a7e8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2b02      	cmp	r3, #2
 8007022:	d104      	bne.n	800702e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2205      	movs	r2, #5
 8007028:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800702c:	e006      	b.n	800703c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007036:	e001      	b.n	800703c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e000      	b.n	800703e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3718      	adds	r7, #24
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b082      	sub	sp, #8
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
 800704e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007056:	b2db      	uxtb	r3, r3
 8007058:	2b02      	cmp	r3, #2
 800705a:	d101      	bne.n	8007060 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800705c:	2302      	movs	r3, #2
 800705e:	e016      	b.n	800708e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007066:	b2db      	uxtb	r3, r3
 8007068:	2b01      	cmp	r3, #1
 800706a:	d10f      	bne.n	800708c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2202      	movs	r2, #2
 8007070:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6839      	ldr	r1, [r7, #0]
 800707a:	4618      	mov	r0, r3
 800707c:	f003 fbd8 	bl	800a830 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007088:	2300      	movs	r3, #0
 800708a:	e000      	b.n	800708e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800708c:	2301      	movs	r3, #1
}
 800708e:	4618      	mov	r0, r3
 8007090:	3708      	adds	r7, #8
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b082      	sub	sp, #8
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d101      	bne.n	80070a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e049      	b.n	800713c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d106      	bne.n	80070c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f7fa fa65 	bl	800158c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2202      	movs	r2, #2
 80070c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	3304      	adds	r3, #4
 80070d2:	4619      	mov	r1, r3
 80070d4:	4610      	mov	r0, r2
 80070d6:	f000 fa7f 	bl	80075d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2201      	movs	r2, #1
 80070de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2201      	movs	r2, #1
 800711e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2201      	movs	r2, #1
 800712e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3708      	adds	r7, #8
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	f003 0302 	and.w	r3, r3, #2
 8007156:	2b02      	cmp	r3, #2
 8007158:	d122      	bne.n	80071a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	f003 0302 	and.w	r3, r3, #2
 8007164:	2b02      	cmp	r3, #2
 8007166:	d11b      	bne.n	80071a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f06f 0202 	mvn.w	r2, #2
 8007170:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	699b      	ldr	r3, [r3, #24]
 800717e:	f003 0303 	and.w	r3, r3, #3
 8007182:	2b00      	cmp	r3, #0
 8007184:	d003      	beq.n	800718e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 fa08 	bl	800759c <HAL_TIM_IC_CaptureCallback>
 800718c:	e005      	b.n	800719a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f9fa 	bl	8007588 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 fa0b 	bl	80075b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	f003 0304 	and.w	r3, r3, #4
 80071aa:	2b04      	cmp	r3, #4
 80071ac:	d122      	bne.n	80071f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	f003 0304 	and.w	r3, r3, #4
 80071b8:	2b04      	cmp	r3, #4
 80071ba:	d11b      	bne.n	80071f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f06f 0204 	mvn.w	r2, #4
 80071c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2202      	movs	r2, #2
 80071ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	699b      	ldr	r3, [r3, #24]
 80071d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d003      	beq.n	80071e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 f9de 	bl	800759c <HAL_TIM_IC_CaptureCallback>
 80071e0:	e005      	b.n	80071ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f9d0 	bl	8007588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 f9e1 	bl	80075b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	f003 0308 	and.w	r3, r3, #8
 80071fe:	2b08      	cmp	r3, #8
 8007200:	d122      	bne.n	8007248 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	f003 0308 	and.w	r3, r3, #8
 800720c:	2b08      	cmp	r3, #8
 800720e:	d11b      	bne.n	8007248 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f06f 0208 	mvn.w	r2, #8
 8007218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2204      	movs	r2, #4
 800721e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	69db      	ldr	r3, [r3, #28]
 8007226:	f003 0303 	and.w	r3, r3, #3
 800722a:	2b00      	cmp	r3, #0
 800722c:	d003      	beq.n	8007236 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f9b4 	bl	800759c <HAL_TIM_IC_CaptureCallback>
 8007234:	e005      	b.n	8007242 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f9a6 	bl	8007588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 f9b7 	bl	80075b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	f003 0310 	and.w	r3, r3, #16
 8007252:	2b10      	cmp	r3, #16
 8007254:	d122      	bne.n	800729c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	f003 0310 	and.w	r3, r3, #16
 8007260:	2b10      	cmp	r3, #16
 8007262:	d11b      	bne.n	800729c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f06f 0210 	mvn.w	r2, #16
 800726c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2208      	movs	r2, #8
 8007272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	69db      	ldr	r3, [r3, #28]
 800727a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800727e:	2b00      	cmp	r3, #0
 8007280:	d003      	beq.n	800728a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 f98a 	bl	800759c <HAL_TIM_IC_CaptureCallback>
 8007288:	e005      	b.n	8007296 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f97c 	bl	8007588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 f98d 	bl	80075b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	f003 0301 	and.w	r3, r3, #1
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d10e      	bne.n	80072c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	f003 0301 	and.w	r3, r3, #1
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d107      	bne.n	80072c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f06f 0201 	mvn.w	r2, #1
 80072c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 f956 	bl	8007574 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072d2:	2b80      	cmp	r3, #128	; 0x80
 80072d4:	d10e      	bne.n	80072f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072e0:	2b80      	cmp	r3, #128	; 0x80
 80072e2:	d107      	bne.n	80072f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80072ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 fb42 	bl	8007978 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007302:	d10e      	bne.n	8007322 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800730e:	2b80      	cmp	r3, #128	; 0x80
 8007310:	d107      	bne.n	8007322 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800731a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 fb35 	bl	800798c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800732c:	2b40      	cmp	r3, #64	; 0x40
 800732e:	d10e      	bne.n	800734e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800733a:	2b40      	cmp	r3, #64	; 0x40
 800733c:	d107      	bne.n	800734e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 f93b 	bl	80075c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	f003 0320 	and.w	r3, r3, #32
 8007358:	2b20      	cmp	r3, #32
 800735a:	d10e      	bne.n	800737a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	f003 0320 	and.w	r3, r3, #32
 8007366:	2b20      	cmp	r3, #32
 8007368:	d107      	bne.n	800737a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f06f 0220 	mvn.w	r2, #32
 8007372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 faf5 	bl	8007964 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800737a:	bf00      	nop
 800737c:	3708      	adds	r7, #8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
	...

08007384 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007398:	2b01      	cmp	r3, #1
 800739a:	d101      	bne.n	80073a0 <HAL_TIM_ConfigClockSource+0x1c>
 800739c:	2302      	movs	r3, #2
 800739e:	e0dc      	b.n	800755a <HAL_TIM_ConfigClockSource+0x1d6>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2202      	movs	r2, #2
 80073ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073b8:	68ba      	ldr	r2, [r7, #8]
 80073ba:	4b6a      	ldr	r3, [pc, #424]	; (8007564 <HAL_TIM_ConfigClockSource+0x1e0>)
 80073bc:	4013      	ands	r3, r2
 80073be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a64      	ldr	r2, [pc, #400]	; (8007568 <HAL_TIM_ConfigClockSource+0x1e4>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	f000 80a9 	beq.w	800752e <HAL_TIM_ConfigClockSource+0x1aa>
 80073dc:	4a62      	ldr	r2, [pc, #392]	; (8007568 <HAL_TIM_ConfigClockSource+0x1e4>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	f200 80ae 	bhi.w	8007540 <HAL_TIM_ConfigClockSource+0x1bc>
 80073e4:	4a61      	ldr	r2, [pc, #388]	; (800756c <HAL_TIM_ConfigClockSource+0x1e8>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	f000 80a1 	beq.w	800752e <HAL_TIM_ConfigClockSource+0x1aa>
 80073ec:	4a5f      	ldr	r2, [pc, #380]	; (800756c <HAL_TIM_ConfigClockSource+0x1e8>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	f200 80a6 	bhi.w	8007540 <HAL_TIM_ConfigClockSource+0x1bc>
 80073f4:	4a5e      	ldr	r2, [pc, #376]	; (8007570 <HAL_TIM_ConfigClockSource+0x1ec>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	f000 8099 	beq.w	800752e <HAL_TIM_ConfigClockSource+0x1aa>
 80073fc:	4a5c      	ldr	r2, [pc, #368]	; (8007570 <HAL_TIM_ConfigClockSource+0x1ec>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	f200 809e 	bhi.w	8007540 <HAL_TIM_ConfigClockSource+0x1bc>
 8007404:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007408:	f000 8091 	beq.w	800752e <HAL_TIM_ConfigClockSource+0x1aa>
 800740c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007410:	f200 8096 	bhi.w	8007540 <HAL_TIM_ConfigClockSource+0x1bc>
 8007414:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007418:	f000 8089 	beq.w	800752e <HAL_TIM_ConfigClockSource+0x1aa>
 800741c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007420:	f200 808e 	bhi.w	8007540 <HAL_TIM_ConfigClockSource+0x1bc>
 8007424:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007428:	d03e      	beq.n	80074a8 <HAL_TIM_ConfigClockSource+0x124>
 800742a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800742e:	f200 8087 	bhi.w	8007540 <HAL_TIM_ConfigClockSource+0x1bc>
 8007432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007436:	f000 8086 	beq.w	8007546 <HAL_TIM_ConfigClockSource+0x1c2>
 800743a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800743e:	d87f      	bhi.n	8007540 <HAL_TIM_ConfigClockSource+0x1bc>
 8007440:	2b70      	cmp	r3, #112	; 0x70
 8007442:	d01a      	beq.n	800747a <HAL_TIM_ConfigClockSource+0xf6>
 8007444:	2b70      	cmp	r3, #112	; 0x70
 8007446:	d87b      	bhi.n	8007540 <HAL_TIM_ConfigClockSource+0x1bc>
 8007448:	2b60      	cmp	r3, #96	; 0x60
 800744a:	d050      	beq.n	80074ee <HAL_TIM_ConfigClockSource+0x16a>
 800744c:	2b60      	cmp	r3, #96	; 0x60
 800744e:	d877      	bhi.n	8007540 <HAL_TIM_ConfigClockSource+0x1bc>
 8007450:	2b50      	cmp	r3, #80	; 0x50
 8007452:	d03c      	beq.n	80074ce <HAL_TIM_ConfigClockSource+0x14a>
 8007454:	2b50      	cmp	r3, #80	; 0x50
 8007456:	d873      	bhi.n	8007540 <HAL_TIM_ConfigClockSource+0x1bc>
 8007458:	2b40      	cmp	r3, #64	; 0x40
 800745a:	d058      	beq.n	800750e <HAL_TIM_ConfigClockSource+0x18a>
 800745c:	2b40      	cmp	r3, #64	; 0x40
 800745e:	d86f      	bhi.n	8007540 <HAL_TIM_ConfigClockSource+0x1bc>
 8007460:	2b30      	cmp	r3, #48	; 0x30
 8007462:	d064      	beq.n	800752e <HAL_TIM_ConfigClockSource+0x1aa>
 8007464:	2b30      	cmp	r3, #48	; 0x30
 8007466:	d86b      	bhi.n	8007540 <HAL_TIM_ConfigClockSource+0x1bc>
 8007468:	2b20      	cmp	r3, #32
 800746a:	d060      	beq.n	800752e <HAL_TIM_ConfigClockSource+0x1aa>
 800746c:	2b20      	cmp	r3, #32
 800746e:	d867      	bhi.n	8007540 <HAL_TIM_ConfigClockSource+0x1bc>
 8007470:	2b00      	cmp	r3, #0
 8007472:	d05c      	beq.n	800752e <HAL_TIM_ConfigClockSource+0x1aa>
 8007474:	2b10      	cmp	r3, #16
 8007476:	d05a      	beq.n	800752e <HAL_TIM_ConfigClockSource+0x1aa>
 8007478:	e062      	b.n	8007540 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800748a:	f000 f9bd 	bl	8007808 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800749c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	609a      	str	r2, [r3, #8]
      break;
 80074a6:	e04f      	b.n	8007548 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80074b8:	f000 f9a6 	bl	8007808 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	689a      	ldr	r2, [r3, #8]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074ca:	609a      	str	r2, [r3, #8]
      break;
 80074cc:	e03c      	b.n	8007548 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074da:	461a      	mov	r2, r3
 80074dc:	f000 f916 	bl	800770c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2150      	movs	r1, #80	; 0x50
 80074e6:	4618      	mov	r0, r3
 80074e8:	f000 f970 	bl	80077cc <TIM_ITRx_SetConfig>
      break;
 80074ec:	e02c      	b.n	8007548 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80074fa:	461a      	mov	r2, r3
 80074fc:	f000 f935 	bl	800776a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2160      	movs	r1, #96	; 0x60
 8007506:	4618      	mov	r0, r3
 8007508:	f000 f960 	bl	80077cc <TIM_ITRx_SetConfig>
      break;
 800750c:	e01c      	b.n	8007548 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800751a:	461a      	mov	r2, r3
 800751c:	f000 f8f6 	bl	800770c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2140      	movs	r1, #64	; 0x40
 8007526:	4618      	mov	r0, r3
 8007528:	f000 f950 	bl	80077cc <TIM_ITRx_SetConfig>
      break;
 800752c:	e00c      	b.n	8007548 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4619      	mov	r1, r3
 8007538:	4610      	mov	r0, r2
 800753a:	f000 f947 	bl	80077cc <TIM_ITRx_SetConfig>
      break;
 800753e:	e003      	b.n	8007548 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	73fb      	strb	r3, [r7, #15]
      break;
 8007544:	e000      	b.n	8007548 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007546:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007558:	7bfb      	ldrb	r3, [r7, #15]
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	ffceff88 	.word	0xffceff88
 8007568:	00100040 	.word	0x00100040
 800756c:	00100030 	.word	0x00100030
 8007570:	00100020 	.word	0x00100020

08007574 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800757c:	bf00      	nop
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80075a4:	bf00      	nop
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4a40      	ldr	r2, [pc, #256]	; (80076ec <TIM_Base_SetConfig+0x114>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d013      	beq.n	8007618 <TIM_Base_SetConfig+0x40>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075f6:	d00f      	beq.n	8007618 <TIM_Base_SetConfig+0x40>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a3d      	ldr	r2, [pc, #244]	; (80076f0 <TIM_Base_SetConfig+0x118>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d00b      	beq.n	8007618 <TIM_Base_SetConfig+0x40>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a3c      	ldr	r2, [pc, #240]	; (80076f4 <TIM_Base_SetConfig+0x11c>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d007      	beq.n	8007618 <TIM_Base_SetConfig+0x40>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a3b      	ldr	r2, [pc, #236]	; (80076f8 <TIM_Base_SetConfig+0x120>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d003      	beq.n	8007618 <TIM_Base_SetConfig+0x40>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a3a      	ldr	r2, [pc, #232]	; (80076fc <TIM_Base_SetConfig+0x124>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d108      	bne.n	800762a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800761e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	4313      	orrs	r3, r2
 8007628:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4a2f      	ldr	r2, [pc, #188]	; (80076ec <TIM_Base_SetConfig+0x114>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d01f      	beq.n	8007672 <TIM_Base_SetConfig+0x9a>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007638:	d01b      	beq.n	8007672 <TIM_Base_SetConfig+0x9a>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a2c      	ldr	r2, [pc, #176]	; (80076f0 <TIM_Base_SetConfig+0x118>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d017      	beq.n	8007672 <TIM_Base_SetConfig+0x9a>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a2b      	ldr	r2, [pc, #172]	; (80076f4 <TIM_Base_SetConfig+0x11c>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d013      	beq.n	8007672 <TIM_Base_SetConfig+0x9a>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a2a      	ldr	r2, [pc, #168]	; (80076f8 <TIM_Base_SetConfig+0x120>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d00f      	beq.n	8007672 <TIM_Base_SetConfig+0x9a>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a29      	ldr	r2, [pc, #164]	; (80076fc <TIM_Base_SetConfig+0x124>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d00b      	beq.n	8007672 <TIM_Base_SetConfig+0x9a>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a28      	ldr	r2, [pc, #160]	; (8007700 <TIM_Base_SetConfig+0x128>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d007      	beq.n	8007672 <TIM_Base_SetConfig+0x9a>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a27      	ldr	r2, [pc, #156]	; (8007704 <TIM_Base_SetConfig+0x12c>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d003      	beq.n	8007672 <TIM_Base_SetConfig+0x9a>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a26      	ldr	r2, [pc, #152]	; (8007708 <TIM_Base_SetConfig+0x130>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d108      	bne.n	8007684 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007678:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	4313      	orrs	r3, r2
 8007682:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	4313      	orrs	r3, r2
 8007690:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	689a      	ldr	r2, [r3, #8]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a10      	ldr	r2, [pc, #64]	; (80076ec <TIM_Base_SetConfig+0x114>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d00f      	beq.n	80076d0 <TIM_Base_SetConfig+0xf8>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a12      	ldr	r2, [pc, #72]	; (80076fc <TIM_Base_SetConfig+0x124>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d00b      	beq.n	80076d0 <TIM_Base_SetConfig+0xf8>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a11      	ldr	r2, [pc, #68]	; (8007700 <TIM_Base_SetConfig+0x128>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d007      	beq.n	80076d0 <TIM_Base_SetConfig+0xf8>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a10      	ldr	r2, [pc, #64]	; (8007704 <TIM_Base_SetConfig+0x12c>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d003      	beq.n	80076d0 <TIM_Base_SetConfig+0xf8>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a0f      	ldr	r2, [pc, #60]	; (8007708 <TIM_Base_SetConfig+0x130>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d103      	bne.n	80076d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	691a      	ldr	r2, [r3, #16]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	615a      	str	r2, [r3, #20]
}
 80076de:	bf00      	nop
 80076e0:	3714      	adds	r7, #20
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	40010000 	.word	0x40010000
 80076f0:	40000400 	.word	0x40000400
 80076f4:	40000800 	.word	0x40000800
 80076f8:	40000c00 	.word	0x40000c00
 80076fc:	40010400 	.word	0x40010400
 8007700:	40014000 	.word	0x40014000
 8007704:	40014400 	.word	0x40014400
 8007708:	40014800 	.word	0x40014800

0800770c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800770c:	b480      	push	{r7}
 800770e:	b087      	sub	sp, #28
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6a1b      	ldr	r3, [r3, #32]
 800771c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6a1b      	ldr	r3, [r3, #32]
 8007722:	f023 0201 	bic.w	r2, r3, #1
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	699b      	ldr	r3, [r3, #24]
 800772e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007736:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	011b      	lsls	r3, r3, #4
 800773c:	693a      	ldr	r2, [r7, #16]
 800773e:	4313      	orrs	r3, r2
 8007740:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	f023 030a 	bic.w	r3, r3, #10
 8007748:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800774a:	697a      	ldr	r2, [r7, #20]
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	4313      	orrs	r3, r2
 8007750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	693a      	ldr	r2, [r7, #16]
 8007756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	621a      	str	r2, [r3, #32]
}
 800775e:	bf00      	nop
 8007760:	371c      	adds	r7, #28
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr

0800776a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800776a:	b480      	push	{r7}
 800776c:	b087      	sub	sp, #28
 800776e:	af00      	add	r7, sp, #0
 8007770:	60f8      	str	r0, [r7, #12]
 8007772:	60b9      	str	r1, [r7, #8]
 8007774:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	f023 0210 	bic.w	r2, r3, #16
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	699b      	ldr	r3, [r3, #24]
 8007786:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6a1b      	ldr	r3, [r3, #32]
 800778c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007794:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	031b      	lsls	r3, r3, #12
 800779a:	697a      	ldr	r2, [r7, #20]
 800779c:	4313      	orrs	r3, r2
 800779e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80077a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	011b      	lsls	r3, r3, #4
 80077ac:	693a      	ldr	r2, [r7, #16]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	697a      	ldr	r2, [r7, #20]
 80077b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	693a      	ldr	r2, [r7, #16]
 80077bc:	621a      	str	r2, [r3, #32]
}
 80077be:	bf00      	nop
 80077c0:	371c      	adds	r7, #28
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
	...

080077cc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	4b09      	ldr	r3, [pc, #36]	; (8007804 <TIM_ITRx_SetConfig+0x38>)
 80077e0:	4013      	ands	r3, r2
 80077e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077e4:	683a      	ldr	r2, [r7, #0]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	f043 0307 	orr.w	r3, r3, #7
 80077ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	609a      	str	r2, [r3, #8]
}
 80077f6:	bf00      	nop
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	ffcfff8f 	.word	0xffcfff8f

08007808 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007808:	b480      	push	{r7}
 800780a:	b087      	sub	sp, #28
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	607a      	str	r2, [r7, #4]
 8007814:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007822:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	021a      	lsls	r2, r3, #8
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	431a      	orrs	r2, r3
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	4313      	orrs	r3, r2
 8007830:	697a      	ldr	r2, [r7, #20]
 8007832:	4313      	orrs	r3, r2
 8007834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	697a      	ldr	r2, [r7, #20]
 800783a:	609a      	str	r2, [r3, #8]
}
 800783c:	bf00      	nop
 800783e:	371c      	adds	r7, #28
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007858:	2b01      	cmp	r3, #1
 800785a:	d101      	bne.n	8007860 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800785c:	2302      	movs	r3, #2
 800785e:	e06d      	b.n	800793c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2202      	movs	r2, #2
 800786c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a30      	ldr	r2, [pc, #192]	; (8007948 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d004      	beq.n	8007894 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a2f      	ldr	r2, [pc, #188]	; (800794c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d108      	bne.n	80078a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800789a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a20      	ldr	r2, [pc, #128]	; (8007948 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d022      	beq.n	8007910 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078d2:	d01d      	beq.n	8007910 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a1d      	ldr	r2, [pc, #116]	; (8007950 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d018      	beq.n	8007910 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a1c      	ldr	r2, [pc, #112]	; (8007954 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d013      	beq.n	8007910 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a1a      	ldr	r2, [pc, #104]	; (8007958 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d00e      	beq.n	8007910 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a15      	ldr	r2, [pc, #84]	; (800794c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d009      	beq.n	8007910 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a16      	ldr	r2, [pc, #88]	; (800795c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d004      	beq.n	8007910 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a15      	ldr	r2, [pc, #84]	; (8007960 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d10c      	bne.n	800792a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007916:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	68ba      	ldr	r2, [r7, #8]
 800791e:	4313      	orrs	r3, r2
 8007920:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68ba      	ldr	r2, [r7, #8]
 8007928:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2201      	movs	r2, #1
 800792e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3714      	adds	r7, #20
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr
 8007948:	40010000 	.word	0x40010000
 800794c:	40010400 	.word	0x40010400
 8007950:	40000400 	.word	0x40000400
 8007954:	40000800 	.word	0x40000800
 8007958:	40000c00 	.word	0x40000c00
 800795c:	40001800 	.word	0x40001800
 8007960:	40014000 	.word	0x40014000

08007964 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800796c:	bf00      	nop
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007980:	bf00      	nop
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007994:	bf00      	nop
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d101      	bne.n	80079b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e042      	b.n	8007a38 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d106      	bne.n	80079ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f7f9 fe09 	bl	80015dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2224      	movs	r2, #36	; 0x24
 80079ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f022 0201 	bic.w	r2, r2, #1
 80079e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 fd74 	bl	80084d0 <UART_SetConfig>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d101      	bne.n	80079f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	e022      	b.n	8007a38 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d002      	beq.n	8007a00 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f001 fad0 	bl	8008fa0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	685a      	ldr	r2, [r3, #4]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	689a      	ldr	r2, [r3, #8]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f042 0201 	orr.w	r2, r2, #1
 8007a2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f001 fb57 	bl	80090e4 <UART_CheckIdleState>
 8007a36:	4603      	mov	r3, r0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b08a      	sub	sp, #40	; 0x28
 8007a44:	af02      	add	r7, sp, #8
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	603b      	str	r3, [r7, #0]
 8007a4c:	4613      	mov	r3, r2
 8007a4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a56:	2b20      	cmp	r3, #32
 8007a58:	d17b      	bne.n	8007b52 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d002      	beq.n	8007a66 <HAL_UART_Transmit+0x26>
 8007a60:	88fb      	ldrh	r3, [r7, #6]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d101      	bne.n	8007a6a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e074      	b.n	8007b54 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2221      	movs	r2, #33	; 0x21
 8007a76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a7a:	f7fa f97b 	bl	8001d74 <HAL_GetTick>
 8007a7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	88fa      	ldrh	r2, [r7, #6]
 8007a84:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	88fa      	ldrh	r2, [r7, #6]
 8007a8c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a98:	d108      	bne.n	8007aac <HAL_UART_Transmit+0x6c>
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d104      	bne.n	8007aac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	61bb      	str	r3, [r7, #24]
 8007aaa:	e003      	b.n	8007ab4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007ab4:	e030      	b.n	8007b18 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	9300      	str	r3, [sp, #0]
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	2200      	movs	r2, #0
 8007abe:	2180      	movs	r1, #128	; 0x80
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f001 fbb9 	bl	8009238 <UART_WaitOnFlagUntilTimeout>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d005      	beq.n	8007ad8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2220      	movs	r2, #32
 8007ad0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	e03d      	b.n	8007b54 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d10b      	bne.n	8007af6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	881b      	ldrh	r3, [r3, #0]
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007aec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	3302      	adds	r3, #2
 8007af2:	61bb      	str	r3, [r7, #24]
 8007af4:	e007      	b.n	8007b06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	781a      	ldrb	r2, [r3, #0]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	3301      	adds	r3, #1
 8007b04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d1c8      	bne.n	8007ab6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	2140      	movs	r1, #64	; 0x40
 8007b2e:	68f8      	ldr	r0, [r7, #12]
 8007b30:	f001 fb82 	bl	8009238 <UART_WaitOnFlagUntilTimeout>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d005      	beq.n	8007b46 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2220      	movs	r2, #32
 8007b3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007b42:	2303      	movs	r3, #3
 8007b44:	e006      	b.n	8007b54 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2220      	movs	r2, #32
 8007b4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	e000      	b.n	8007b54 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007b52:	2302      	movs	r3, #2
  }
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3720      	adds	r7, #32
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b091      	sub	sp, #68	; 0x44
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	4613      	mov	r3, r2
 8007b68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b70:	2b20      	cmp	r3, #32
 8007b72:	d178      	bne.n	8007c66 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d002      	beq.n	8007b80 <HAL_UART_Transmit_IT+0x24>
 8007b7a:	88fb      	ldrh	r3, [r7, #6]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d101      	bne.n	8007b84 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	e071      	b.n	8007c68 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	68ba      	ldr	r2, [r7, #8]
 8007b88:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	88fa      	ldrh	r2, [r7, #6]
 8007b8e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	88fa      	ldrh	r2, [r7, #6]
 8007b96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2221      	movs	r2, #33	; 0x21
 8007bac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bb8:	d12a      	bne.n	8007c10 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bc2:	d107      	bne.n	8007bd4 <HAL_UART_Transmit_IT+0x78>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d103      	bne.n	8007bd4 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	4a29      	ldr	r2, [pc, #164]	; (8007c74 <HAL_UART_Transmit_IT+0x118>)
 8007bd0:	679a      	str	r2, [r3, #120]	; 0x78
 8007bd2:	e002      	b.n	8007bda <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	4a28      	ldr	r2, [pc, #160]	; (8007c78 <HAL_UART_Transmit_IT+0x11c>)
 8007bd8:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	3308      	adds	r3, #8
 8007be0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be4:	e853 3f00 	ldrex	r3, [r3]
 8007be8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007bf0:	63bb      	str	r3, [r7, #56]	; 0x38
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	3308      	adds	r3, #8
 8007bf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bfa:	637a      	str	r2, [r7, #52]	; 0x34
 8007bfc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c02:	e841 2300 	strex	r3, r2, [r1]
 8007c06:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1e5      	bne.n	8007bda <HAL_UART_Transmit_IT+0x7e>
 8007c0e:	e028      	b.n	8007c62 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c18:	d107      	bne.n	8007c2a <HAL_UART_Transmit_IT+0xce>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d103      	bne.n	8007c2a <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	4a15      	ldr	r2, [pc, #84]	; (8007c7c <HAL_UART_Transmit_IT+0x120>)
 8007c26:	679a      	str	r2, [r3, #120]	; 0x78
 8007c28:	e002      	b.n	8007c30 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	4a14      	ldr	r2, [pc, #80]	; (8007c80 <HAL_UART_Transmit_IT+0x124>)
 8007c2e:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	e853 3f00 	ldrex	r3, [r3]
 8007c3c:	613b      	str	r3, [r7, #16]
   return(result);
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c4e:	623b      	str	r3, [r7, #32]
 8007c50:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c52:	69f9      	ldr	r1, [r7, #28]
 8007c54:	6a3a      	ldr	r2, [r7, #32]
 8007c56:	e841 2300 	strex	r3, r2, [r1]
 8007c5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d1e6      	bne.n	8007c30 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8007c62:	2300      	movs	r3, #0
 8007c64:	e000      	b.n	8007c68 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007c66:	2302      	movs	r3, #2
  }
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3744      	adds	r7, #68	; 0x44
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr
 8007c74:	0800989f 	.word	0x0800989f
 8007c78:	080097bf 	.word	0x080097bf
 8007c7c:	080096fd 	.word	0x080096fd
 8007c80:	08009645 	.word	0x08009645

08007c84 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b08a      	sub	sp, #40	; 0x28
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	4613      	mov	r3, r2
 8007c90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c98:	2b20      	cmp	r3, #32
 8007c9a:	d137      	bne.n	8007d0c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d002      	beq.n	8007ca8 <HAL_UART_Receive_IT+0x24>
 8007ca2:	88fb      	ldrh	r3, [r7, #6]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d101      	bne.n	8007cac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e030      	b.n	8007d0e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a18      	ldr	r2, [pc, #96]	; (8007d18 <HAL_UART_Receive_IT+0x94>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d01f      	beq.n	8007cfc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d018      	beq.n	8007cfc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	e853 3f00 	ldrex	r3, [r3]
 8007cd6:	613b      	str	r3, [r7, #16]
   return(result);
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007cde:	627b      	str	r3, [r7, #36]	; 0x24
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce8:	623b      	str	r3, [r7, #32]
 8007cea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cec:	69f9      	ldr	r1, [r7, #28]
 8007cee:	6a3a      	ldr	r2, [r7, #32]
 8007cf0:	e841 2300 	strex	r3, r2, [r1]
 8007cf4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1e6      	bne.n	8007cca <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007cfc:	88fb      	ldrh	r3, [r7, #6]
 8007cfe:	461a      	mov	r2, r3
 8007d00:	68b9      	ldr	r1, [r7, #8]
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f001 fb00 	bl	8009308 <UART_Start_Receive_IT>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	e000      	b.n	8007d0e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007d0c:	2302      	movs	r3, #2
  }
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3728      	adds	r7, #40	; 0x28
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	58000c00 	.word	0x58000c00

08007d1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b0ba      	sub	sp, #232	; 0xe8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	69db      	ldr	r3, [r3, #28]
 8007d2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007d42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007d46:	f640 030f 	movw	r3, #2063	; 0x80f
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007d50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d11b      	bne.n	8007d90 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d5c:	f003 0320 	and.w	r3, r3, #32
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d015      	beq.n	8007d90 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d68:	f003 0320 	and.w	r3, r3, #32
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d105      	bne.n	8007d7c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007d70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d009      	beq.n	8007d90 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f000 8377 	beq.w	8008474 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	4798      	blx	r3
      }
      return;
 8007d8e:	e371      	b.n	8008474 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007d90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f000 8123 	beq.w	8007fe0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007d9a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007d9e:	4b8d      	ldr	r3, [pc, #564]	; (8007fd4 <HAL_UART_IRQHandler+0x2b8>)
 8007da0:	4013      	ands	r3, r2
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d106      	bne.n	8007db4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007da6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007daa:	4b8b      	ldr	r3, [pc, #556]	; (8007fd8 <HAL_UART_IRQHandler+0x2bc>)
 8007dac:	4013      	ands	r3, r2
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f000 8116 	beq.w	8007fe0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007db8:	f003 0301 	and.w	r3, r3, #1
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d011      	beq.n	8007de4 <HAL_UART_IRQHandler+0xc8>
 8007dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00b      	beq.n	8007de4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dda:	f043 0201 	orr.w	r2, r3, #1
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007de8:	f003 0302 	and.w	r3, r3, #2
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d011      	beq.n	8007e14 <HAL_UART_IRQHandler+0xf8>
 8007df0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007df4:	f003 0301 	and.w	r3, r3, #1
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00b      	beq.n	8007e14 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2202      	movs	r2, #2
 8007e02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e0a:	f043 0204 	orr.w	r2, r3, #4
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e18:	f003 0304 	and.w	r3, r3, #4
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d011      	beq.n	8007e44 <HAL_UART_IRQHandler+0x128>
 8007e20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e24:	f003 0301 	and.w	r3, r3, #1
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00b      	beq.n	8007e44 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2204      	movs	r2, #4
 8007e32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e3a:	f043 0202 	orr.w	r2, r3, #2
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e48:	f003 0308 	and.w	r3, r3, #8
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d017      	beq.n	8007e80 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e54:	f003 0320 	and.w	r3, r3, #32
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d105      	bne.n	8007e68 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007e5c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007e60:	4b5c      	ldr	r3, [pc, #368]	; (8007fd4 <HAL_UART_IRQHandler+0x2b8>)
 8007e62:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00b      	beq.n	8007e80 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2208      	movs	r2, #8
 8007e6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e76:	f043 0208 	orr.w	r2, r3, #8
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d012      	beq.n	8007eb2 <HAL_UART_IRQHandler+0x196>
 8007e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00c      	beq.n	8007eb2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ea0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ea8:	f043 0220 	orr.w	r2, r3, #32
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f000 82dd 	beq.w	8008478 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ec2:	f003 0320 	and.w	r3, r3, #32
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d013      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ece:	f003 0320 	and.w	r3, r3, #32
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d105      	bne.n	8007ee2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007ed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d007      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d003      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ef8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f06:	2b40      	cmp	r3, #64	; 0x40
 8007f08:	d005      	beq.n	8007f16 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007f0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d054      	beq.n	8007fc0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f001 fb18 	bl	800954c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f26:	2b40      	cmp	r3, #64	; 0x40
 8007f28:	d146      	bne.n	8007fb8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	3308      	adds	r3, #8
 8007f30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f38:	e853 3f00 	ldrex	r3, [r3]
 8007f3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007f40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	3308      	adds	r3, #8
 8007f52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007f56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007f5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007f62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007f66:	e841 2300 	strex	r3, r2, [r1]
 8007f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007f6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1d9      	bne.n	8007f2a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d017      	beq.n	8007fb0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f86:	4a15      	ldr	r2, [pc, #84]	; (8007fdc <HAL_UART_IRQHandler+0x2c0>)
 8007f88:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f90:	4618      	mov	r0, r3
 8007f92:	f7fa fb59 	bl	8002648 <HAL_DMA_Abort_IT>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d019      	beq.n	8007fd0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007faa:	4610      	mov	r0, r2
 8007fac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fae:	e00f      	b.n	8007fd0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 fa77 	bl	80084a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fb6:	e00b      	b.n	8007fd0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 fa73 	bl	80084a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fbe:	e007      	b.n	8007fd0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 fa6f 	bl	80084a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007fce:	e253      	b.n	8008478 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fd0:	bf00      	nop
    return;
 8007fd2:	e251      	b.n	8008478 <HAL_UART_IRQHandler+0x75c>
 8007fd4:	10000001 	.word	0x10000001
 8007fd8:	04000120 	.word	0x04000120
 8007fdc:	08009619 	.word	0x08009619

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	f040 81e7 	bne.w	80083b8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fee:	f003 0310 	and.w	r3, r3, #16
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	f000 81e0 	beq.w	80083b8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ffc:	f003 0310 	and.w	r3, r3, #16
 8008000:	2b00      	cmp	r3, #0
 8008002:	f000 81d9 	beq.w	80083b8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2210      	movs	r2, #16
 800800c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008018:	2b40      	cmp	r3, #64	; 0x40
 800801a:	f040 8151 	bne.w	80082c0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a96      	ldr	r2, [pc, #600]	; (8008280 <HAL_UART_IRQHandler+0x564>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d068      	beq.n	80080fe <HAL_UART_IRQHandler+0x3e2>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a93      	ldr	r2, [pc, #588]	; (8008284 <HAL_UART_IRQHandler+0x568>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d061      	beq.n	80080fe <HAL_UART_IRQHandler+0x3e2>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a91      	ldr	r2, [pc, #580]	; (8008288 <HAL_UART_IRQHandler+0x56c>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d05a      	beq.n	80080fe <HAL_UART_IRQHandler+0x3e2>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a8e      	ldr	r2, [pc, #568]	; (800828c <HAL_UART_IRQHandler+0x570>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d053      	beq.n	80080fe <HAL_UART_IRQHandler+0x3e2>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a8c      	ldr	r2, [pc, #560]	; (8008290 <HAL_UART_IRQHandler+0x574>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d04c      	beq.n	80080fe <HAL_UART_IRQHandler+0x3e2>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a89      	ldr	r2, [pc, #548]	; (8008294 <HAL_UART_IRQHandler+0x578>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d045      	beq.n	80080fe <HAL_UART_IRQHandler+0x3e2>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a87      	ldr	r2, [pc, #540]	; (8008298 <HAL_UART_IRQHandler+0x57c>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d03e      	beq.n	80080fe <HAL_UART_IRQHandler+0x3e2>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a84      	ldr	r2, [pc, #528]	; (800829c <HAL_UART_IRQHandler+0x580>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d037      	beq.n	80080fe <HAL_UART_IRQHandler+0x3e2>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a82      	ldr	r2, [pc, #520]	; (80082a0 <HAL_UART_IRQHandler+0x584>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d030      	beq.n	80080fe <HAL_UART_IRQHandler+0x3e2>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a7f      	ldr	r2, [pc, #508]	; (80082a4 <HAL_UART_IRQHandler+0x588>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d029      	beq.n	80080fe <HAL_UART_IRQHandler+0x3e2>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a7d      	ldr	r2, [pc, #500]	; (80082a8 <HAL_UART_IRQHandler+0x58c>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d022      	beq.n	80080fe <HAL_UART_IRQHandler+0x3e2>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a7a      	ldr	r2, [pc, #488]	; (80082ac <HAL_UART_IRQHandler+0x590>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d01b      	beq.n	80080fe <HAL_UART_IRQHandler+0x3e2>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a78      	ldr	r2, [pc, #480]	; (80082b0 <HAL_UART_IRQHandler+0x594>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d014      	beq.n	80080fe <HAL_UART_IRQHandler+0x3e2>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a75      	ldr	r2, [pc, #468]	; (80082b4 <HAL_UART_IRQHandler+0x598>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d00d      	beq.n	80080fe <HAL_UART_IRQHandler+0x3e2>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a73      	ldr	r2, [pc, #460]	; (80082b8 <HAL_UART_IRQHandler+0x59c>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d006      	beq.n	80080fe <HAL_UART_IRQHandler+0x3e2>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a70      	ldr	r2, [pc, #448]	; (80082bc <HAL_UART_IRQHandler+0x5a0>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d106      	bne.n	800810c <HAL_UART_IRQHandler+0x3f0>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	b29b      	uxth	r3, r3
 800810a:	e005      	b.n	8008118 <HAL_UART_IRQHandler+0x3fc>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	b29b      	uxth	r3, r3
 8008118:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800811c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008120:	2b00      	cmp	r3, #0
 8008122:	f000 81ab 	beq.w	800847c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800812c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008130:	429a      	cmp	r2, r3
 8008132:	f080 81a3 	bcs.w	800847c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800813c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008146:	69db      	ldr	r3, [r3, #28]
 8008148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800814c:	f000 8087 	beq.w	800825e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008158:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800815c:	e853 3f00 	ldrex	r3, [r3]
 8008160:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008164:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008168:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800816c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	461a      	mov	r2, r3
 8008176:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800817a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800817e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008182:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008186:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800818a:	e841 2300 	strex	r3, r2, [r1]
 800818e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008192:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1da      	bne.n	8008150 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	3308      	adds	r3, #8
 80081a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081a4:	e853 3f00 	ldrex	r3, [r3]
 80081a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80081aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081ac:	f023 0301 	bic.w	r3, r3, #1
 80081b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	3308      	adds	r3, #8
 80081ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80081be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80081c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80081c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80081ca:	e841 2300 	strex	r3, r2, [r1]
 80081ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80081d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1e1      	bne.n	800819a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	3308      	adds	r3, #8
 80081dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081e0:	e853 3f00 	ldrex	r3, [r3]
 80081e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80081e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	3308      	adds	r3, #8
 80081f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80081fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80081fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008200:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008202:	e841 2300 	strex	r3, r2, [r1]
 8008206:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008208:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1e3      	bne.n	80081d6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2220      	movs	r2, #32
 8008212:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008224:	e853 3f00 	ldrex	r3, [r3]
 8008228:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800822a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800822c:	f023 0310 	bic.w	r3, r3, #16
 8008230:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	461a      	mov	r2, r3
 800823a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800823e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008240:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008242:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008244:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008246:	e841 2300 	strex	r3, r2, [r1]
 800824a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800824c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1e4      	bne.n	800821c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008258:	4618      	mov	r0, r3
 800825a:	f7f9 fed7 	bl	800200c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2202      	movs	r2, #2
 8008262:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008270:	b29b      	uxth	r3, r3
 8008272:	1ad3      	subs	r3, r2, r3
 8008274:	b29b      	uxth	r3, r3
 8008276:	4619      	mov	r1, r3
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 f91d 	bl	80084b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800827e:	e0fd      	b.n	800847c <HAL_UART_IRQHandler+0x760>
 8008280:	40020010 	.word	0x40020010
 8008284:	40020028 	.word	0x40020028
 8008288:	40020040 	.word	0x40020040
 800828c:	40020058 	.word	0x40020058
 8008290:	40020070 	.word	0x40020070
 8008294:	40020088 	.word	0x40020088
 8008298:	400200a0 	.word	0x400200a0
 800829c:	400200b8 	.word	0x400200b8
 80082a0:	40020410 	.word	0x40020410
 80082a4:	40020428 	.word	0x40020428
 80082a8:	40020440 	.word	0x40020440
 80082ac:	40020458 	.word	0x40020458
 80082b0:	40020470 	.word	0x40020470
 80082b4:	40020488 	.word	0x40020488
 80082b8:	400204a0 	.word	0x400204a0
 80082bc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	1ad3      	subs	r3, r2, r3
 80082d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80082da:	b29b      	uxth	r3, r3
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f000 80cf 	beq.w	8008480 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80082e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	f000 80ca 	beq.w	8008480 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f4:	e853 3f00 	ldrex	r3, [r3]
 80082f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80082fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008300:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	461a      	mov	r2, r3
 800830a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800830e:	647b      	str	r3, [r7, #68]	; 0x44
 8008310:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008312:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008314:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008316:	e841 2300 	strex	r3, r2, [r1]
 800831a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800831c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1e4      	bne.n	80082ec <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	3308      	adds	r3, #8
 8008328:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832c:	e853 3f00 	ldrex	r3, [r3]
 8008330:	623b      	str	r3, [r7, #32]
   return(result);
 8008332:	6a3a      	ldr	r2, [r7, #32]
 8008334:	4b55      	ldr	r3, [pc, #340]	; (800848c <HAL_UART_IRQHandler+0x770>)
 8008336:	4013      	ands	r3, r2
 8008338:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	3308      	adds	r3, #8
 8008342:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008346:	633a      	str	r2, [r7, #48]	; 0x30
 8008348:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800834a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800834c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800834e:	e841 2300 	strex	r3, r2, [r1]
 8008352:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1e3      	bne.n	8008322 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2220      	movs	r2, #32
 800835e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	e853 3f00 	ldrex	r3, [r3]
 800837a:	60fb      	str	r3, [r7, #12]
   return(result);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f023 0310 	bic.w	r3, r3, #16
 8008382:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	461a      	mov	r2, r3
 800838c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008390:	61fb      	str	r3, [r7, #28]
 8008392:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008394:	69b9      	ldr	r1, [r7, #24]
 8008396:	69fa      	ldr	r2, [r7, #28]
 8008398:	e841 2300 	strex	r3, r2, [r1]
 800839c:	617b      	str	r3, [r7, #20]
   return(result);
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d1e4      	bne.n	800836e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2202      	movs	r2, #2
 80083a8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80083aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80083ae:	4619      	mov	r1, r3
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 f881 	bl	80084b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80083b6:	e063      	b.n	8008480 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80083b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00e      	beq.n	80083e2 <HAL_UART_IRQHandler+0x6c6>
 80083c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d008      	beq.n	80083e2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80083d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f002 f81c 	bl	800a418 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80083e0:	e051      	b.n	8008486 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80083e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d014      	beq.n	8008418 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80083ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d105      	bne.n	8008406 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80083fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008402:	2b00      	cmp	r3, #0
 8008404:	d008      	beq.n	8008418 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800840a:	2b00      	cmp	r3, #0
 800840c:	d03a      	beq.n	8008484 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	4798      	blx	r3
    }
    return;
 8008416:	e035      	b.n	8008484 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800841c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008420:	2b00      	cmp	r3, #0
 8008422:	d009      	beq.n	8008438 <HAL_UART_IRQHandler+0x71c>
 8008424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800842c:	2b00      	cmp	r3, #0
 800842e:	d003      	beq.n	8008438 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f001 faa9 	bl	8009988 <UART_EndTransmit_IT>
    return;
 8008436:	e026      	b.n	8008486 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800843c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008440:	2b00      	cmp	r3, #0
 8008442:	d009      	beq.n	8008458 <HAL_UART_IRQHandler+0x73c>
 8008444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008448:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800844c:	2b00      	cmp	r3, #0
 800844e:	d003      	beq.n	8008458 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f001 fff5 	bl	800a440 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008456:	e016      	b.n	8008486 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800845c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008460:	2b00      	cmp	r3, #0
 8008462:	d010      	beq.n	8008486 <HAL_UART_IRQHandler+0x76a>
 8008464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008468:	2b00      	cmp	r3, #0
 800846a:	da0c      	bge.n	8008486 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f001 ffdd 	bl	800a42c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008472:	e008      	b.n	8008486 <HAL_UART_IRQHandler+0x76a>
      return;
 8008474:	bf00      	nop
 8008476:	e006      	b.n	8008486 <HAL_UART_IRQHandler+0x76a>
    return;
 8008478:	bf00      	nop
 800847a:	e004      	b.n	8008486 <HAL_UART_IRQHandler+0x76a>
      return;
 800847c:	bf00      	nop
 800847e:	e002      	b.n	8008486 <HAL_UART_IRQHandler+0x76a>
      return;
 8008480:	bf00      	nop
 8008482:	e000      	b.n	8008486 <HAL_UART_IRQHandler+0x76a>
    return;
 8008484:	bf00      	nop
  }
}
 8008486:	37e8      	adds	r7, #232	; 0xe8
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	effffffe 	.word	0xeffffffe

08008490 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80084ac:	bf00      	nop
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	460b      	mov	r3, r1
 80084c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80084c4:	bf00      	nop
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084d4:	b092      	sub	sp, #72	; 0x48
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80084da:	2300      	movs	r3, #0
 80084dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	689a      	ldr	r2, [r3, #8]
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	691b      	ldr	r3, [r3, #16]
 80084e8:	431a      	orrs	r2, r3
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	695b      	ldr	r3, [r3, #20]
 80084ee:	431a      	orrs	r2, r3
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	69db      	ldr	r3, [r3, #28]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	4bbe      	ldr	r3, [pc, #760]	; (80087f8 <UART_SetConfig+0x328>)
 8008500:	4013      	ands	r3, r2
 8008502:	697a      	ldr	r2, [r7, #20]
 8008504:	6812      	ldr	r2, [r2, #0]
 8008506:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008508:	430b      	orrs	r3, r1
 800850a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	68da      	ldr	r2, [r3, #12]
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	430a      	orrs	r2, r1
 8008520:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	699b      	ldr	r3, [r3, #24]
 8008526:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4ab3      	ldr	r2, [pc, #716]	; (80087fc <UART_SetConfig+0x32c>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d004      	beq.n	800853c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	6a1b      	ldr	r3, [r3, #32]
 8008536:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008538:	4313      	orrs	r3, r2
 800853a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	689a      	ldr	r2, [r3, #8]
 8008542:	4baf      	ldr	r3, [pc, #700]	; (8008800 <UART_SetConfig+0x330>)
 8008544:	4013      	ands	r3, r2
 8008546:	697a      	ldr	r2, [r7, #20]
 8008548:	6812      	ldr	r2, [r2, #0]
 800854a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800854c:	430b      	orrs	r3, r1
 800854e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008556:	f023 010f 	bic.w	r1, r3, #15
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	430a      	orrs	r2, r1
 8008564:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4aa6      	ldr	r2, [pc, #664]	; (8008804 <UART_SetConfig+0x334>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d177      	bne.n	8008660 <UART_SetConfig+0x190>
 8008570:	4ba5      	ldr	r3, [pc, #660]	; (8008808 <UART_SetConfig+0x338>)
 8008572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008574:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008578:	2b28      	cmp	r3, #40	; 0x28
 800857a:	d86d      	bhi.n	8008658 <UART_SetConfig+0x188>
 800857c:	a201      	add	r2, pc, #4	; (adr r2, 8008584 <UART_SetConfig+0xb4>)
 800857e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008582:	bf00      	nop
 8008584:	08008629 	.word	0x08008629
 8008588:	08008659 	.word	0x08008659
 800858c:	08008659 	.word	0x08008659
 8008590:	08008659 	.word	0x08008659
 8008594:	08008659 	.word	0x08008659
 8008598:	08008659 	.word	0x08008659
 800859c:	08008659 	.word	0x08008659
 80085a0:	08008659 	.word	0x08008659
 80085a4:	08008631 	.word	0x08008631
 80085a8:	08008659 	.word	0x08008659
 80085ac:	08008659 	.word	0x08008659
 80085b0:	08008659 	.word	0x08008659
 80085b4:	08008659 	.word	0x08008659
 80085b8:	08008659 	.word	0x08008659
 80085bc:	08008659 	.word	0x08008659
 80085c0:	08008659 	.word	0x08008659
 80085c4:	08008639 	.word	0x08008639
 80085c8:	08008659 	.word	0x08008659
 80085cc:	08008659 	.word	0x08008659
 80085d0:	08008659 	.word	0x08008659
 80085d4:	08008659 	.word	0x08008659
 80085d8:	08008659 	.word	0x08008659
 80085dc:	08008659 	.word	0x08008659
 80085e0:	08008659 	.word	0x08008659
 80085e4:	08008641 	.word	0x08008641
 80085e8:	08008659 	.word	0x08008659
 80085ec:	08008659 	.word	0x08008659
 80085f0:	08008659 	.word	0x08008659
 80085f4:	08008659 	.word	0x08008659
 80085f8:	08008659 	.word	0x08008659
 80085fc:	08008659 	.word	0x08008659
 8008600:	08008659 	.word	0x08008659
 8008604:	08008649 	.word	0x08008649
 8008608:	08008659 	.word	0x08008659
 800860c:	08008659 	.word	0x08008659
 8008610:	08008659 	.word	0x08008659
 8008614:	08008659 	.word	0x08008659
 8008618:	08008659 	.word	0x08008659
 800861c:	08008659 	.word	0x08008659
 8008620:	08008659 	.word	0x08008659
 8008624:	08008651 	.word	0x08008651
 8008628:	2301      	movs	r3, #1
 800862a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800862e:	e222      	b.n	8008a76 <UART_SetConfig+0x5a6>
 8008630:	2304      	movs	r3, #4
 8008632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008636:	e21e      	b.n	8008a76 <UART_SetConfig+0x5a6>
 8008638:	2308      	movs	r3, #8
 800863a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800863e:	e21a      	b.n	8008a76 <UART_SetConfig+0x5a6>
 8008640:	2310      	movs	r3, #16
 8008642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008646:	e216      	b.n	8008a76 <UART_SetConfig+0x5a6>
 8008648:	2320      	movs	r3, #32
 800864a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800864e:	e212      	b.n	8008a76 <UART_SetConfig+0x5a6>
 8008650:	2340      	movs	r3, #64	; 0x40
 8008652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008656:	e20e      	b.n	8008a76 <UART_SetConfig+0x5a6>
 8008658:	2380      	movs	r3, #128	; 0x80
 800865a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800865e:	e20a      	b.n	8008a76 <UART_SetConfig+0x5a6>
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a69      	ldr	r2, [pc, #420]	; (800880c <UART_SetConfig+0x33c>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d130      	bne.n	80086cc <UART_SetConfig+0x1fc>
 800866a:	4b67      	ldr	r3, [pc, #412]	; (8008808 <UART_SetConfig+0x338>)
 800866c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800866e:	f003 0307 	and.w	r3, r3, #7
 8008672:	2b05      	cmp	r3, #5
 8008674:	d826      	bhi.n	80086c4 <UART_SetConfig+0x1f4>
 8008676:	a201      	add	r2, pc, #4	; (adr r2, 800867c <UART_SetConfig+0x1ac>)
 8008678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800867c:	08008695 	.word	0x08008695
 8008680:	0800869d 	.word	0x0800869d
 8008684:	080086a5 	.word	0x080086a5
 8008688:	080086ad 	.word	0x080086ad
 800868c:	080086b5 	.word	0x080086b5
 8008690:	080086bd 	.word	0x080086bd
 8008694:	2300      	movs	r3, #0
 8008696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800869a:	e1ec      	b.n	8008a76 <UART_SetConfig+0x5a6>
 800869c:	2304      	movs	r3, #4
 800869e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086a2:	e1e8      	b.n	8008a76 <UART_SetConfig+0x5a6>
 80086a4:	2308      	movs	r3, #8
 80086a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086aa:	e1e4      	b.n	8008a76 <UART_SetConfig+0x5a6>
 80086ac:	2310      	movs	r3, #16
 80086ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086b2:	e1e0      	b.n	8008a76 <UART_SetConfig+0x5a6>
 80086b4:	2320      	movs	r3, #32
 80086b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ba:	e1dc      	b.n	8008a76 <UART_SetConfig+0x5a6>
 80086bc:	2340      	movs	r3, #64	; 0x40
 80086be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086c2:	e1d8      	b.n	8008a76 <UART_SetConfig+0x5a6>
 80086c4:	2380      	movs	r3, #128	; 0x80
 80086c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ca:	e1d4      	b.n	8008a76 <UART_SetConfig+0x5a6>
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a4f      	ldr	r2, [pc, #316]	; (8008810 <UART_SetConfig+0x340>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d130      	bne.n	8008738 <UART_SetConfig+0x268>
 80086d6:	4b4c      	ldr	r3, [pc, #304]	; (8008808 <UART_SetConfig+0x338>)
 80086d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086da:	f003 0307 	and.w	r3, r3, #7
 80086de:	2b05      	cmp	r3, #5
 80086e0:	d826      	bhi.n	8008730 <UART_SetConfig+0x260>
 80086e2:	a201      	add	r2, pc, #4	; (adr r2, 80086e8 <UART_SetConfig+0x218>)
 80086e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e8:	08008701 	.word	0x08008701
 80086ec:	08008709 	.word	0x08008709
 80086f0:	08008711 	.word	0x08008711
 80086f4:	08008719 	.word	0x08008719
 80086f8:	08008721 	.word	0x08008721
 80086fc:	08008729 	.word	0x08008729
 8008700:	2300      	movs	r3, #0
 8008702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008706:	e1b6      	b.n	8008a76 <UART_SetConfig+0x5a6>
 8008708:	2304      	movs	r3, #4
 800870a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800870e:	e1b2      	b.n	8008a76 <UART_SetConfig+0x5a6>
 8008710:	2308      	movs	r3, #8
 8008712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008716:	e1ae      	b.n	8008a76 <UART_SetConfig+0x5a6>
 8008718:	2310      	movs	r3, #16
 800871a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800871e:	e1aa      	b.n	8008a76 <UART_SetConfig+0x5a6>
 8008720:	2320      	movs	r3, #32
 8008722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008726:	e1a6      	b.n	8008a76 <UART_SetConfig+0x5a6>
 8008728:	2340      	movs	r3, #64	; 0x40
 800872a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800872e:	e1a2      	b.n	8008a76 <UART_SetConfig+0x5a6>
 8008730:	2380      	movs	r3, #128	; 0x80
 8008732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008736:	e19e      	b.n	8008a76 <UART_SetConfig+0x5a6>
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a35      	ldr	r2, [pc, #212]	; (8008814 <UART_SetConfig+0x344>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d130      	bne.n	80087a4 <UART_SetConfig+0x2d4>
 8008742:	4b31      	ldr	r3, [pc, #196]	; (8008808 <UART_SetConfig+0x338>)
 8008744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008746:	f003 0307 	and.w	r3, r3, #7
 800874a:	2b05      	cmp	r3, #5
 800874c:	d826      	bhi.n	800879c <UART_SetConfig+0x2cc>
 800874e:	a201      	add	r2, pc, #4	; (adr r2, 8008754 <UART_SetConfig+0x284>)
 8008750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008754:	0800876d 	.word	0x0800876d
 8008758:	08008775 	.word	0x08008775
 800875c:	0800877d 	.word	0x0800877d
 8008760:	08008785 	.word	0x08008785
 8008764:	0800878d 	.word	0x0800878d
 8008768:	08008795 	.word	0x08008795
 800876c:	2300      	movs	r3, #0
 800876e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008772:	e180      	b.n	8008a76 <UART_SetConfig+0x5a6>
 8008774:	2304      	movs	r3, #4
 8008776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800877a:	e17c      	b.n	8008a76 <UART_SetConfig+0x5a6>
 800877c:	2308      	movs	r3, #8
 800877e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008782:	e178      	b.n	8008a76 <UART_SetConfig+0x5a6>
 8008784:	2310      	movs	r3, #16
 8008786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800878a:	e174      	b.n	8008a76 <UART_SetConfig+0x5a6>
 800878c:	2320      	movs	r3, #32
 800878e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008792:	e170      	b.n	8008a76 <UART_SetConfig+0x5a6>
 8008794:	2340      	movs	r3, #64	; 0x40
 8008796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800879a:	e16c      	b.n	8008a76 <UART_SetConfig+0x5a6>
 800879c:	2380      	movs	r3, #128	; 0x80
 800879e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087a2:	e168      	b.n	8008a76 <UART_SetConfig+0x5a6>
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a1b      	ldr	r2, [pc, #108]	; (8008818 <UART_SetConfig+0x348>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d142      	bne.n	8008834 <UART_SetConfig+0x364>
 80087ae:	4b16      	ldr	r3, [pc, #88]	; (8008808 <UART_SetConfig+0x338>)
 80087b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087b2:	f003 0307 	and.w	r3, r3, #7
 80087b6:	2b05      	cmp	r3, #5
 80087b8:	d838      	bhi.n	800882c <UART_SetConfig+0x35c>
 80087ba:	a201      	add	r2, pc, #4	; (adr r2, 80087c0 <UART_SetConfig+0x2f0>)
 80087bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c0:	080087d9 	.word	0x080087d9
 80087c4:	080087e1 	.word	0x080087e1
 80087c8:	080087e9 	.word	0x080087e9
 80087cc:	080087f1 	.word	0x080087f1
 80087d0:	0800881d 	.word	0x0800881d
 80087d4:	08008825 	.word	0x08008825
 80087d8:	2300      	movs	r3, #0
 80087da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087de:	e14a      	b.n	8008a76 <UART_SetConfig+0x5a6>
 80087e0:	2304      	movs	r3, #4
 80087e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087e6:	e146      	b.n	8008a76 <UART_SetConfig+0x5a6>
 80087e8:	2308      	movs	r3, #8
 80087ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ee:	e142      	b.n	8008a76 <UART_SetConfig+0x5a6>
 80087f0:	2310      	movs	r3, #16
 80087f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087f6:	e13e      	b.n	8008a76 <UART_SetConfig+0x5a6>
 80087f8:	cfff69f3 	.word	0xcfff69f3
 80087fc:	58000c00 	.word	0x58000c00
 8008800:	11fff4ff 	.word	0x11fff4ff
 8008804:	40011000 	.word	0x40011000
 8008808:	58024400 	.word	0x58024400
 800880c:	40004400 	.word	0x40004400
 8008810:	40004800 	.word	0x40004800
 8008814:	40004c00 	.word	0x40004c00
 8008818:	40005000 	.word	0x40005000
 800881c:	2320      	movs	r3, #32
 800881e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008822:	e128      	b.n	8008a76 <UART_SetConfig+0x5a6>
 8008824:	2340      	movs	r3, #64	; 0x40
 8008826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800882a:	e124      	b.n	8008a76 <UART_SetConfig+0x5a6>
 800882c:	2380      	movs	r3, #128	; 0x80
 800882e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008832:	e120      	b.n	8008a76 <UART_SetConfig+0x5a6>
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4acb      	ldr	r2, [pc, #812]	; (8008b68 <UART_SetConfig+0x698>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d176      	bne.n	800892c <UART_SetConfig+0x45c>
 800883e:	4bcb      	ldr	r3, [pc, #812]	; (8008b6c <UART_SetConfig+0x69c>)
 8008840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008842:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008846:	2b28      	cmp	r3, #40	; 0x28
 8008848:	d86c      	bhi.n	8008924 <UART_SetConfig+0x454>
 800884a:	a201      	add	r2, pc, #4	; (adr r2, 8008850 <UART_SetConfig+0x380>)
 800884c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008850:	080088f5 	.word	0x080088f5
 8008854:	08008925 	.word	0x08008925
 8008858:	08008925 	.word	0x08008925
 800885c:	08008925 	.word	0x08008925
 8008860:	08008925 	.word	0x08008925
 8008864:	08008925 	.word	0x08008925
 8008868:	08008925 	.word	0x08008925
 800886c:	08008925 	.word	0x08008925
 8008870:	080088fd 	.word	0x080088fd
 8008874:	08008925 	.word	0x08008925
 8008878:	08008925 	.word	0x08008925
 800887c:	08008925 	.word	0x08008925
 8008880:	08008925 	.word	0x08008925
 8008884:	08008925 	.word	0x08008925
 8008888:	08008925 	.word	0x08008925
 800888c:	08008925 	.word	0x08008925
 8008890:	08008905 	.word	0x08008905
 8008894:	08008925 	.word	0x08008925
 8008898:	08008925 	.word	0x08008925
 800889c:	08008925 	.word	0x08008925
 80088a0:	08008925 	.word	0x08008925
 80088a4:	08008925 	.word	0x08008925
 80088a8:	08008925 	.word	0x08008925
 80088ac:	08008925 	.word	0x08008925
 80088b0:	0800890d 	.word	0x0800890d
 80088b4:	08008925 	.word	0x08008925
 80088b8:	08008925 	.word	0x08008925
 80088bc:	08008925 	.word	0x08008925
 80088c0:	08008925 	.word	0x08008925
 80088c4:	08008925 	.word	0x08008925
 80088c8:	08008925 	.word	0x08008925
 80088cc:	08008925 	.word	0x08008925
 80088d0:	08008915 	.word	0x08008915
 80088d4:	08008925 	.word	0x08008925
 80088d8:	08008925 	.word	0x08008925
 80088dc:	08008925 	.word	0x08008925
 80088e0:	08008925 	.word	0x08008925
 80088e4:	08008925 	.word	0x08008925
 80088e8:	08008925 	.word	0x08008925
 80088ec:	08008925 	.word	0x08008925
 80088f0:	0800891d 	.word	0x0800891d
 80088f4:	2301      	movs	r3, #1
 80088f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088fa:	e0bc      	b.n	8008a76 <UART_SetConfig+0x5a6>
 80088fc:	2304      	movs	r3, #4
 80088fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008902:	e0b8      	b.n	8008a76 <UART_SetConfig+0x5a6>
 8008904:	2308      	movs	r3, #8
 8008906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800890a:	e0b4      	b.n	8008a76 <UART_SetConfig+0x5a6>
 800890c:	2310      	movs	r3, #16
 800890e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008912:	e0b0      	b.n	8008a76 <UART_SetConfig+0x5a6>
 8008914:	2320      	movs	r3, #32
 8008916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800891a:	e0ac      	b.n	8008a76 <UART_SetConfig+0x5a6>
 800891c:	2340      	movs	r3, #64	; 0x40
 800891e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008922:	e0a8      	b.n	8008a76 <UART_SetConfig+0x5a6>
 8008924:	2380      	movs	r3, #128	; 0x80
 8008926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800892a:	e0a4      	b.n	8008a76 <UART_SetConfig+0x5a6>
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a8f      	ldr	r2, [pc, #572]	; (8008b70 <UART_SetConfig+0x6a0>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d130      	bne.n	8008998 <UART_SetConfig+0x4c8>
 8008936:	4b8d      	ldr	r3, [pc, #564]	; (8008b6c <UART_SetConfig+0x69c>)
 8008938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800893a:	f003 0307 	and.w	r3, r3, #7
 800893e:	2b05      	cmp	r3, #5
 8008940:	d826      	bhi.n	8008990 <UART_SetConfig+0x4c0>
 8008942:	a201      	add	r2, pc, #4	; (adr r2, 8008948 <UART_SetConfig+0x478>)
 8008944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008948:	08008961 	.word	0x08008961
 800894c:	08008969 	.word	0x08008969
 8008950:	08008971 	.word	0x08008971
 8008954:	08008979 	.word	0x08008979
 8008958:	08008981 	.word	0x08008981
 800895c:	08008989 	.word	0x08008989
 8008960:	2300      	movs	r3, #0
 8008962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008966:	e086      	b.n	8008a76 <UART_SetConfig+0x5a6>
 8008968:	2304      	movs	r3, #4
 800896a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800896e:	e082      	b.n	8008a76 <UART_SetConfig+0x5a6>
 8008970:	2308      	movs	r3, #8
 8008972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008976:	e07e      	b.n	8008a76 <UART_SetConfig+0x5a6>
 8008978:	2310      	movs	r3, #16
 800897a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800897e:	e07a      	b.n	8008a76 <UART_SetConfig+0x5a6>
 8008980:	2320      	movs	r3, #32
 8008982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008986:	e076      	b.n	8008a76 <UART_SetConfig+0x5a6>
 8008988:	2340      	movs	r3, #64	; 0x40
 800898a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800898e:	e072      	b.n	8008a76 <UART_SetConfig+0x5a6>
 8008990:	2380      	movs	r3, #128	; 0x80
 8008992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008996:	e06e      	b.n	8008a76 <UART_SetConfig+0x5a6>
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a75      	ldr	r2, [pc, #468]	; (8008b74 <UART_SetConfig+0x6a4>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d130      	bne.n	8008a04 <UART_SetConfig+0x534>
 80089a2:	4b72      	ldr	r3, [pc, #456]	; (8008b6c <UART_SetConfig+0x69c>)
 80089a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089a6:	f003 0307 	and.w	r3, r3, #7
 80089aa:	2b05      	cmp	r3, #5
 80089ac:	d826      	bhi.n	80089fc <UART_SetConfig+0x52c>
 80089ae:	a201      	add	r2, pc, #4	; (adr r2, 80089b4 <UART_SetConfig+0x4e4>)
 80089b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b4:	080089cd 	.word	0x080089cd
 80089b8:	080089d5 	.word	0x080089d5
 80089bc:	080089dd 	.word	0x080089dd
 80089c0:	080089e5 	.word	0x080089e5
 80089c4:	080089ed 	.word	0x080089ed
 80089c8:	080089f5 	.word	0x080089f5
 80089cc:	2300      	movs	r3, #0
 80089ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089d2:	e050      	b.n	8008a76 <UART_SetConfig+0x5a6>
 80089d4:	2304      	movs	r3, #4
 80089d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089da:	e04c      	b.n	8008a76 <UART_SetConfig+0x5a6>
 80089dc:	2308      	movs	r3, #8
 80089de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089e2:	e048      	b.n	8008a76 <UART_SetConfig+0x5a6>
 80089e4:	2310      	movs	r3, #16
 80089e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ea:	e044      	b.n	8008a76 <UART_SetConfig+0x5a6>
 80089ec:	2320      	movs	r3, #32
 80089ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089f2:	e040      	b.n	8008a76 <UART_SetConfig+0x5a6>
 80089f4:	2340      	movs	r3, #64	; 0x40
 80089f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089fa:	e03c      	b.n	8008a76 <UART_SetConfig+0x5a6>
 80089fc:	2380      	movs	r3, #128	; 0x80
 80089fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a02:	e038      	b.n	8008a76 <UART_SetConfig+0x5a6>
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a5b      	ldr	r2, [pc, #364]	; (8008b78 <UART_SetConfig+0x6a8>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d130      	bne.n	8008a70 <UART_SetConfig+0x5a0>
 8008a0e:	4b57      	ldr	r3, [pc, #348]	; (8008b6c <UART_SetConfig+0x69c>)
 8008a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a12:	f003 0307 	and.w	r3, r3, #7
 8008a16:	2b05      	cmp	r3, #5
 8008a18:	d826      	bhi.n	8008a68 <UART_SetConfig+0x598>
 8008a1a:	a201      	add	r2, pc, #4	; (adr r2, 8008a20 <UART_SetConfig+0x550>)
 8008a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a20:	08008a39 	.word	0x08008a39
 8008a24:	08008a41 	.word	0x08008a41
 8008a28:	08008a49 	.word	0x08008a49
 8008a2c:	08008a51 	.word	0x08008a51
 8008a30:	08008a59 	.word	0x08008a59
 8008a34:	08008a61 	.word	0x08008a61
 8008a38:	2302      	movs	r3, #2
 8008a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a3e:	e01a      	b.n	8008a76 <UART_SetConfig+0x5a6>
 8008a40:	2304      	movs	r3, #4
 8008a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a46:	e016      	b.n	8008a76 <UART_SetConfig+0x5a6>
 8008a48:	2308      	movs	r3, #8
 8008a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a4e:	e012      	b.n	8008a76 <UART_SetConfig+0x5a6>
 8008a50:	2310      	movs	r3, #16
 8008a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a56:	e00e      	b.n	8008a76 <UART_SetConfig+0x5a6>
 8008a58:	2320      	movs	r3, #32
 8008a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a5e:	e00a      	b.n	8008a76 <UART_SetConfig+0x5a6>
 8008a60:	2340      	movs	r3, #64	; 0x40
 8008a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a66:	e006      	b.n	8008a76 <UART_SetConfig+0x5a6>
 8008a68:	2380      	movs	r3, #128	; 0x80
 8008a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a6e:	e002      	b.n	8008a76 <UART_SetConfig+0x5a6>
 8008a70:	2380      	movs	r3, #128	; 0x80
 8008a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a3f      	ldr	r2, [pc, #252]	; (8008b78 <UART_SetConfig+0x6a8>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	f040 80f8 	bne.w	8008c72 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a82:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008a86:	2b20      	cmp	r3, #32
 8008a88:	dc46      	bgt.n	8008b18 <UART_SetConfig+0x648>
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	f2c0 8082 	blt.w	8008b94 <UART_SetConfig+0x6c4>
 8008a90:	3b02      	subs	r3, #2
 8008a92:	2b1e      	cmp	r3, #30
 8008a94:	d87e      	bhi.n	8008b94 <UART_SetConfig+0x6c4>
 8008a96:	a201      	add	r2, pc, #4	; (adr r2, 8008a9c <UART_SetConfig+0x5cc>)
 8008a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a9c:	08008b1f 	.word	0x08008b1f
 8008aa0:	08008b95 	.word	0x08008b95
 8008aa4:	08008b27 	.word	0x08008b27
 8008aa8:	08008b95 	.word	0x08008b95
 8008aac:	08008b95 	.word	0x08008b95
 8008ab0:	08008b95 	.word	0x08008b95
 8008ab4:	08008b37 	.word	0x08008b37
 8008ab8:	08008b95 	.word	0x08008b95
 8008abc:	08008b95 	.word	0x08008b95
 8008ac0:	08008b95 	.word	0x08008b95
 8008ac4:	08008b95 	.word	0x08008b95
 8008ac8:	08008b95 	.word	0x08008b95
 8008acc:	08008b95 	.word	0x08008b95
 8008ad0:	08008b95 	.word	0x08008b95
 8008ad4:	08008b47 	.word	0x08008b47
 8008ad8:	08008b95 	.word	0x08008b95
 8008adc:	08008b95 	.word	0x08008b95
 8008ae0:	08008b95 	.word	0x08008b95
 8008ae4:	08008b95 	.word	0x08008b95
 8008ae8:	08008b95 	.word	0x08008b95
 8008aec:	08008b95 	.word	0x08008b95
 8008af0:	08008b95 	.word	0x08008b95
 8008af4:	08008b95 	.word	0x08008b95
 8008af8:	08008b95 	.word	0x08008b95
 8008afc:	08008b95 	.word	0x08008b95
 8008b00:	08008b95 	.word	0x08008b95
 8008b04:	08008b95 	.word	0x08008b95
 8008b08:	08008b95 	.word	0x08008b95
 8008b0c:	08008b95 	.word	0x08008b95
 8008b10:	08008b95 	.word	0x08008b95
 8008b14:	08008b87 	.word	0x08008b87
 8008b18:	2b40      	cmp	r3, #64	; 0x40
 8008b1a:	d037      	beq.n	8008b8c <UART_SetConfig+0x6bc>
 8008b1c:	e03a      	b.n	8008b94 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008b1e:	f7fd fdff 	bl	8006720 <HAL_RCCEx_GetD3PCLK1Freq>
 8008b22:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008b24:	e03c      	b.n	8008ba0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7fd fe0e 	bl	800674c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b34:	e034      	b.n	8008ba0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b36:	f107 0318 	add.w	r3, r7, #24
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fd ff5a 	bl	80069f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b44:	e02c      	b.n	8008ba0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b46:	4b09      	ldr	r3, [pc, #36]	; (8008b6c <UART_SetConfig+0x69c>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f003 0320 	and.w	r3, r3, #32
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d016      	beq.n	8008b80 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008b52:	4b06      	ldr	r3, [pc, #24]	; (8008b6c <UART_SetConfig+0x69c>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	08db      	lsrs	r3, r3, #3
 8008b58:	f003 0303 	and.w	r3, r3, #3
 8008b5c:	4a07      	ldr	r2, [pc, #28]	; (8008b7c <UART_SetConfig+0x6ac>)
 8008b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008b64:	e01c      	b.n	8008ba0 <UART_SetConfig+0x6d0>
 8008b66:	bf00      	nop
 8008b68:	40011400 	.word	0x40011400
 8008b6c:	58024400 	.word	0x58024400
 8008b70:	40007800 	.word	0x40007800
 8008b74:	40007c00 	.word	0x40007c00
 8008b78:	58000c00 	.word	0x58000c00
 8008b7c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008b80:	4b9d      	ldr	r3, [pc, #628]	; (8008df8 <UART_SetConfig+0x928>)
 8008b82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b84:	e00c      	b.n	8008ba0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008b86:	4b9d      	ldr	r3, [pc, #628]	; (8008dfc <UART_SetConfig+0x92c>)
 8008b88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b8a:	e009      	b.n	8008ba0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b92:	e005      	b.n	8008ba0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008b94:	2300      	movs	r3, #0
 8008b96:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008b9e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	f000 81de 	beq.w	8008f64 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bac:	4a94      	ldr	r2, [pc, #592]	; (8008e00 <UART_SetConfig+0x930>)
 8008bae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bba:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	685a      	ldr	r2, [r3, #4]
 8008bc0:	4613      	mov	r3, r2
 8008bc2:	005b      	lsls	r3, r3, #1
 8008bc4:	4413      	add	r3, r2
 8008bc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d305      	bcc.n	8008bd8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d903      	bls.n	8008be0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008bde:	e1c1      	b.n	8008f64 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008be2:	2200      	movs	r2, #0
 8008be4:	60bb      	str	r3, [r7, #8]
 8008be6:	60fa      	str	r2, [r7, #12]
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bec:	4a84      	ldr	r2, [pc, #528]	; (8008e00 <UART_SetConfig+0x930>)
 8008bee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	603b      	str	r3, [r7, #0]
 8008bf8:	607a      	str	r2, [r7, #4]
 8008bfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bfe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008c02:	f7f7 fd81 	bl	8000708 <__aeabi_uldivmod>
 8008c06:	4602      	mov	r2, r0
 8008c08:	460b      	mov	r3, r1
 8008c0a:	4610      	mov	r0, r2
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	f04f 0200 	mov.w	r2, #0
 8008c12:	f04f 0300 	mov.w	r3, #0
 8008c16:	020b      	lsls	r3, r1, #8
 8008c18:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008c1c:	0202      	lsls	r2, r0, #8
 8008c1e:	6979      	ldr	r1, [r7, #20]
 8008c20:	6849      	ldr	r1, [r1, #4]
 8008c22:	0849      	lsrs	r1, r1, #1
 8008c24:	2000      	movs	r0, #0
 8008c26:	460c      	mov	r4, r1
 8008c28:	4605      	mov	r5, r0
 8008c2a:	eb12 0804 	adds.w	r8, r2, r4
 8008c2e:	eb43 0905 	adc.w	r9, r3, r5
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	469a      	mov	sl, r3
 8008c3a:	4693      	mov	fp, r2
 8008c3c:	4652      	mov	r2, sl
 8008c3e:	465b      	mov	r3, fp
 8008c40:	4640      	mov	r0, r8
 8008c42:	4649      	mov	r1, r9
 8008c44:	f7f7 fd60 	bl	8000708 <__aeabi_uldivmod>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c56:	d308      	bcc.n	8008c6a <UART_SetConfig+0x79a>
 8008c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c5e:	d204      	bcs.n	8008c6a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c66:	60da      	str	r2, [r3, #12]
 8008c68:	e17c      	b.n	8008f64 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008c70:	e178      	b.n	8008f64 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	69db      	ldr	r3, [r3, #28]
 8008c76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c7a:	f040 80c5 	bne.w	8008e08 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008c7e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008c82:	2b20      	cmp	r3, #32
 8008c84:	dc48      	bgt.n	8008d18 <UART_SetConfig+0x848>
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	db7b      	blt.n	8008d82 <UART_SetConfig+0x8b2>
 8008c8a:	2b20      	cmp	r3, #32
 8008c8c:	d879      	bhi.n	8008d82 <UART_SetConfig+0x8b2>
 8008c8e:	a201      	add	r2, pc, #4	; (adr r2, 8008c94 <UART_SetConfig+0x7c4>)
 8008c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c94:	08008d1f 	.word	0x08008d1f
 8008c98:	08008d27 	.word	0x08008d27
 8008c9c:	08008d83 	.word	0x08008d83
 8008ca0:	08008d83 	.word	0x08008d83
 8008ca4:	08008d2f 	.word	0x08008d2f
 8008ca8:	08008d83 	.word	0x08008d83
 8008cac:	08008d83 	.word	0x08008d83
 8008cb0:	08008d83 	.word	0x08008d83
 8008cb4:	08008d3f 	.word	0x08008d3f
 8008cb8:	08008d83 	.word	0x08008d83
 8008cbc:	08008d83 	.word	0x08008d83
 8008cc0:	08008d83 	.word	0x08008d83
 8008cc4:	08008d83 	.word	0x08008d83
 8008cc8:	08008d83 	.word	0x08008d83
 8008ccc:	08008d83 	.word	0x08008d83
 8008cd0:	08008d83 	.word	0x08008d83
 8008cd4:	08008d4f 	.word	0x08008d4f
 8008cd8:	08008d83 	.word	0x08008d83
 8008cdc:	08008d83 	.word	0x08008d83
 8008ce0:	08008d83 	.word	0x08008d83
 8008ce4:	08008d83 	.word	0x08008d83
 8008ce8:	08008d83 	.word	0x08008d83
 8008cec:	08008d83 	.word	0x08008d83
 8008cf0:	08008d83 	.word	0x08008d83
 8008cf4:	08008d83 	.word	0x08008d83
 8008cf8:	08008d83 	.word	0x08008d83
 8008cfc:	08008d83 	.word	0x08008d83
 8008d00:	08008d83 	.word	0x08008d83
 8008d04:	08008d83 	.word	0x08008d83
 8008d08:	08008d83 	.word	0x08008d83
 8008d0c:	08008d83 	.word	0x08008d83
 8008d10:	08008d83 	.word	0x08008d83
 8008d14:	08008d75 	.word	0x08008d75
 8008d18:	2b40      	cmp	r3, #64	; 0x40
 8008d1a:	d02e      	beq.n	8008d7a <UART_SetConfig+0x8aa>
 8008d1c:	e031      	b.n	8008d82 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d1e:	f7fc fac9 	bl	80052b4 <HAL_RCC_GetPCLK1Freq>
 8008d22:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008d24:	e033      	b.n	8008d8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d26:	f7fc fadb 	bl	80052e0 <HAL_RCC_GetPCLK2Freq>
 8008d2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008d2c:	e02f      	b.n	8008d8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7fd fd0a 	bl	800674c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d3c:	e027      	b.n	8008d8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d3e:	f107 0318 	add.w	r3, r7, #24
 8008d42:	4618      	mov	r0, r3
 8008d44:	f7fd fe56 	bl	80069f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d4c:	e01f      	b.n	8008d8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d4e:	4b2d      	ldr	r3, [pc, #180]	; (8008e04 <UART_SetConfig+0x934>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f003 0320 	and.w	r3, r3, #32
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d009      	beq.n	8008d6e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008d5a:	4b2a      	ldr	r3, [pc, #168]	; (8008e04 <UART_SetConfig+0x934>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	08db      	lsrs	r3, r3, #3
 8008d60:	f003 0303 	and.w	r3, r3, #3
 8008d64:	4a24      	ldr	r2, [pc, #144]	; (8008df8 <UART_SetConfig+0x928>)
 8008d66:	fa22 f303 	lsr.w	r3, r2, r3
 8008d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008d6c:	e00f      	b.n	8008d8e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008d6e:	4b22      	ldr	r3, [pc, #136]	; (8008df8 <UART_SetConfig+0x928>)
 8008d70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d72:	e00c      	b.n	8008d8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008d74:	4b21      	ldr	r3, [pc, #132]	; (8008dfc <UART_SetConfig+0x92c>)
 8008d76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d78:	e009      	b.n	8008d8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d80:	e005      	b.n	8008d8e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008d82:	2300      	movs	r3, #0
 8008d84:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008d8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	f000 80e7 	beq.w	8008f64 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9a:	4a19      	ldr	r2, [pc, #100]	; (8008e00 <UART_SetConfig+0x930>)
 8008d9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008da0:	461a      	mov	r2, r3
 8008da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008da4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008da8:	005a      	lsls	r2, r3, #1
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	085b      	lsrs	r3, r3, #1
 8008db0:	441a      	add	r2, r3
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dba:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dbe:	2b0f      	cmp	r3, #15
 8008dc0:	d916      	bls.n	8008df0 <UART_SetConfig+0x920>
 8008dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dc8:	d212      	bcs.n	8008df0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	f023 030f 	bic.w	r3, r3, #15
 8008dd2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd6:	085b      	lsrs	r3, r3, #1
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	f003 0307 	and.w	r3, r3, #7
 8008dde:	b29a      	uxth	r2, r3
 8008de0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008de2:	4313      	orrs	r3, r2
 8008de4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008dec:	60da      	str	r2, [r3, #12]
 8008dee:	e0b9      	b.n	8008f64 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008df0:	2301      	movs	r3, #1
 8008df2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008df6:	e0b5      	b.n	8008f64 <UART_SetConfig+0xa94>
 8008df8:	03d09000 	.word	0x03d09000
 8008dfc:	003d0900 	.word	0x003d0900
 8008e00:	0800f498 	.word	0x0800f498
 8008e04:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e08:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008e0c:	2b20      	cmp	r3, #32
 8008e0e:	dc49      	bgt.n	8008ea4 <UART_SetConfig+0x9d4>
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	db7c      	blt.n	8008f0e <UART_SetConfig+0xa3e>
 8008e14:	2b20      	cmp	r3, #32
 8008e16:	d87a      	bhi.n	8008f0e <UART_SetConfig+0xa3e>
 8008e18:	a201      	add	r2, pc, #4	; (adr r2, 8008e20 <UART_SetConfig+0x950>)
 8008e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1e:	bf00      	nop
 8008e20:	08008eab 	.word	0x08008eab
 8008e24:	08008eb3 	.word	0x08008eb3
 8008e28:	08008f0f 	.word	0x08008f0f
 8008e2c:	08008f0f 	.word	0x08008f0f
 8008e30:	08008ebb 	.word	0x08008ebb
 8008e34:	08008f0f 	.word	0x08008f0f
 8008e38:	08008f0f 	.word	0x08008f0f
 8008e3c:	08008f0f 	.word	0x08008f0f
 8008e40:	08008ecb 	.word	0x08008ecb
 8008e44:	08008f0f 	.word	0x08008f0f
 8008e48:	08008f0f 	.word	0x08008f0f
 8008e4c:	08008f0f 	.word	0x08008f0f
 8008e50:	08008f0f 	.word	0x08008f0f
 8008e54:	08008f0f 	.word	0x08008f0f
 8008e58:	08008f0f 	.word	0x08008f0f
 8008e5c:	08008f0f 	.word	0x08008f0f
 8008e60:	08008edb 	.word	0x08008edb
 8008e64:	08008f0f 	.word	0x08008f0f
 8008e68:	08008f0f 	.word	0x08008f0f
 8008e6c:	08008f0f 	.word	0x08008f0f
 8008e70:	08008f0f 	.word	0x08008f0f
 8008e74:	08008f0f 	.word	0x08008f0f
 8008e78:	08008f0f 	.word	0x08008f0f
 8008e7c:	08008f0f 	.word	0x08008f0f
 8008e80:	08008f0f 	.word	0x08008f0f
 8008e84:	08008f0f 	.word	0x08008f0f
 8008e88:	08008f0f 	.word	0x08008f0f
 8008e8c:	08008f0f 	.word	0x08008f0f
 8008e90:	08008f0f 	.word	0x08008f0f
 8008e94:	08008f0f 	.word	0x08008f0f
 8008e98:	08008f0f 	.word	0x08008f0f
 8008e9c:	08008f0f 	.word	0x08008f0f
 8008ea0:	08008f01 	.word	0x08008f01
 8008ea4:	2b40      	cmp	r3, #64	; 0x40
 8008ea6:	d02e      	beq.n	8008f06 <UART_SetConfig+0xa36>
 8008ea8:	e031      	b.n	8008f0e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008eaa:	f7fc fa03 	bl	80052b4 <HAL_RCC_GetPCLK1Freq>
 8008eae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008eb0:	e033      	b.n	8008f1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008eb2:	f7fc fa15 	bl	80052e0 <HAL_RCC_GetPCLK2Freq>
 8008eb6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008eb8:	e02f      	b.n	8008f1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7fd fc44 	bl	800674c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ec8:	e027      	b.n	8008f1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008eca:	f107 0318 	add.w	r3, r7, #24
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7fd fd90 	bl	80069f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ed8:	e01f      	b.n	8008f1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008eda:	4b2d      	ldr	r3, [pc, #180]	; (8008f90 <UART_SetConfig+0xac0>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f003 0320 	and.w	r3, r3, #32
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d009      	beq.n	8008efa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ee6:	4b2a      	ldr	r3, [pc, #168]	; (8008f90 <UART_SetConfig+0xac0>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	08db      	lsrs	r3, r3, #3
 8008eec:	f003 0303 	and.w	r3, r3, #3
 8008ef0:	4a28      	ldr	r2, [pc, #160]	; (8008f94 <UART_SetConfig+0xac4>)
 8008ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ef8:	e00f      	b.n	8008f1a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008efa:	4b26      	ldr	r3, [pc, #152]	; (8008f94 <UART_SetConfig+0xac4>)
 8008efc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008efe:	e00c      	b.n	8008f1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008f00:	4b25      	ldr	r3, [pc, #148]	; (8008f98 <UART_SetConfig+0xac8>)
 8008f02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f04:	e009      	b.n	8008f1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f0c:	e005      	b.n	8008f1a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008f12:	2301      	movs	r3, #1
 8008f14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008f18:	bf00      	nop
    }

    if (pclk != 0U)
 8008f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d021      	beq.n	8008f64 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f24:	4a1d      	ldr	r2, [pc, #116]	; (8008f9c <UART_SetConfig+0xacc>)
 8008f26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	085b      	lsrs	r3, r3, #1
 8008f38:	441a      	add	r2, r3
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f42:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f46:	2b0f      	cmp	r3, #15
 8008f48:	d909      	bls.n	8008f5e <UART_SetConfig+0xa8e>
 8008f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f50:	d205      	bcs.n	8008f5e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f54:	b29a      	uxth	r2, r3
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	60da      	str	r2, [r3, #12]
 8008f5c:	e002      	b.n	8008f64 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	2200      	movs	r2, #0
 8008f78:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008f80:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3748      	adds	r7, #72	; 0x48
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f8e:	bf00      	nop
 8008f90:	58024400 	.word	0x58024400
 8008f94:	03d09000 	.word	0x03d09000
 8008f98:	003d0900 	.word	0x003d0900
 8008f9c:	0800f498 	.word	0x0800f498

08008fa0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fac:	f003 0301 	and.w	r3, r3, #1
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d00a      	beq.n	8008fca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	430a      	orrs	r2, r1
 8008fc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fce:	f003 0302 	and.w	r3, r3, #2
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00a      	beq.n	8008fec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	430a      	orrs	r2, r1
 8008fea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff0:	f003 0304 	and.w	r3, r3, #4
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d00a      	beq.n	800900e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	430a      	orrs	r2, r1
 800900c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009012:	f003 0308 	and.w	r3, r3, #8
 8009016:	2b00      	cmp	r3, #0
 8009018:	d00a      	beq.n	8009030 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	430a      	orrs	r2, r1
 800902e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009034:	f003 0310 	and.w	r3, r3, #16
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00a      	beq.n	8009052 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	430a      	orrs	r2, r1
 8009050:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009056:	f003 0320 	and.w	r3, r3, #32
 800905a:	2b00      	cmp	r3, #0
 800905c:	d00a      	beq.n	8009074 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	430a      	orrs	r2, r1
 8009072:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800907c:	2b00      	cmp	r3, #0
 800907e:	d01a      	beq.n	80090b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	430a      	orrs	r2, r1
 8009094:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800909a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800909e:	d10a      	bne.n	80090b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	430a      	orrs	r2, r1
 80090b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00a      	beq.n	80090d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	430a      	orrs	r2, r1
 80090d6:	605a      	str	r2, [r3, #4]
  }
}
 80090d8:	bf00      	nop
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b098      	sub	sp, #96	; 0x60
 80090e8:	af02      	add	r7, sp, #8
 80090ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80090f4:	f7f8 fe3e 	bl	8001d74 <HAL_GetTick>
 80090f8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 0308 	and.w	r3, r3, #8
 8009104:	2b08      	cmp	r3, #8
 8009106:	d12f      	bne.n	8009168 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009108:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800910c:	9300      	str	r3, [sp, #0]
 800910e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009110:	2200      	movs	r2, #0
 8009112:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 f88e 	bl	8009238 <UART_WaitOnFlagUntilTimeout>
 800911c:	4603      	mov	r3, r0
 800911e:	2b00      	cmp	r3, #0
 8009120:	d022      	beq.n	8009168 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800912a:	e853 3f00 	ldrex	r3, [r3]
 800912e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009132:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009136:	653b      	str	r3, [r7, #80]	; 0x50
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	461a      	mov	r2, r3
 800913e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009140:	647b      	str	r3, [r7, #68]	; 0x44
 8009142:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009144:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009146:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009148:	e841 2300 	strex	r3, r2, [r1]
 800914c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800914e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009150:	2b00      	cmp	r3, #0
 8009152:	d1e6      	bne.n	8009122 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2220      	movs	r2, #32
 8009158:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009164:	2303      	movs	r3, #3
 8009166:	e063      	b.n	8009230 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f003 0304 	and.w	r3, r3, #4
 8009172:	2b04      	cmp	r3, #4
 8009174:	d149      	bne.n	800920a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009176:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800917a:	9300      	str	r3, [sp, #0]
 800917c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800917e:	2200      	movs	r2, #0
 8009180:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 f857 	bl	8009238 <UART_WaitOnFlagUntilTimeout>
 800918a:	4603      	mov	r3, r0
 800918c:	2b00      	cmp	r3, #0
 800918e:	d03c      	beq.n	800920a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009198:	e853 3f00 	ldrex	r3, [r3]
 800919c:	623b      	str	r3, [r7, #32]
   return(result);
 800919e:	6a3b      	ldr	r3, [r7, #32]
 80091a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	461a      	mov	r2, r3
 80091ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091ae:	633b      	str	r3, [r7, #48]	; 0x30
 80091b0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091b6:	e841 2300 	strex	r3, r2, [r1]
 80091ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80091bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d1e6      	bne.n	8009190 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	3308      	adds	r3, #8
 80091c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	e853 3f00 	ldrex	r3, [r3]
 80091d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f023 0301 	bic.w	r3, r3, #1
 80091d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	3308      	adds	r3, #8
 80091e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091e2:	61fa      	str	r2, [r7, #28]
 80091e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e6:	69b9      	ldr	r1, [r7, #24]
 80091e8:	69fa      	ldr	r2, [r7, #28]
 80091ea:	e841 2300 	strex	r3, r2, [r1]
 80091ee:	617b      	str	r3, [r7, #20]
   return(result);
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d1e5      	bne.n	80091c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2220      	movs	r2, #32
 80091fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009206:	2303      	movs	r3, #3
 8009208:	e012      	b.n	8009230 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2220      	movs	r2, #32
 800920e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2220      	movs	r2, #32
 8009216:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800922e:	2300      	movs	r3, #0
}
 8009230:	4618      	mov	r0, r3
 8009232:	3758      	adds	r7, #88	; 0x58
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	603b      	str	r3, [r7, #0]
 8009244:	4613      	mov	r3, r2
 8009246:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009248:	e049      	b.n	80092de <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800924a:	69bb      	ldr	r3, [r7, #24]
 800924c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009250:	d045      	beq.n	80092de <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009252:	f7f8 fd8f 	bl	8001d74 <HAL_GetTick>
 8009256:	4602      	mov	r2, r0
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	1ad3      	subs	r3, r2, r3
 800925c:	69ba      	ldr	r2, [r7, #24]
 800925e:	429a      	cmp	r2, r3
 8009260:	d302      	bcc.n	8009268 <UART_WaitOnFlagUntilTimeout+0x30>
 8009262:	69bb      	ldr	r3, [r7, #24]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d101      	bne.n	800926c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009268:	2303      	movs	r3, #3
 800926a:	e048      	b.n	80092fe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f003 0304 	and.w	r3, r3, #4
 8009276:	2b00      	cmp	r3, #0
 8009278:	d031      	beq.n	80092de <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	69db      	ldr	r3, [r3, #28]
 8009280:	f003 0308 	and.w	r3, r3, #8
 8009284:	2b08      	cmp	r3, #8
 8009286:	d110      	bne.n	80092aa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2208      	movs	r2, #8
 800928e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009290:	68f8      	ldr	r0, [r7, #12]
 8009292:	f000 f95b 	bl	800954c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2208      	movs	r2, #8
 800929a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80092a6:	2301      	movs	r3, #1
 80092a8:	e029      	b.n	80092fe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	69db      	ldr	r3, [r3, #28]
 80092b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092b8:	d111      	bne.n	80092de <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80092c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f000 f941 	bl	800954c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2220      	movs	r2, #32
 80092ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2200      	movs	r2, #0
 80092d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80092da:	2303      	movs	r3, #3
 80092dc:	e00f      	b.n	80092fe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	69da      	ldr	r2, [r3, #28]
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	4013      	ands	r3, r2
 80092e8:	68ba      	ldr	r2, [r7, #8]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	bf0c      	ite	eq
 80092ee:	2301      	moveq	r3, #1
 80092f0:	2300      	movne	r3, #0
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	461a      	mov	r2, r3
 80092f6:	79fb      	ldrb	r3, [r7, #7]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d0a6      	beq.n	800924a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80092fc:	2300      	movs	r3, #0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3710      	adds	r7, #16
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
	...

08009308 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009308:	b480      	push	{r7}
 800930a:	b0a3      	sub	sp, #140	; 0x8c
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	4613      	mov	r3, r2
 8009314:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	68ba      	ldr	r2, [r7, #8]
 800931a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	88fa      	ldrh	r2, [r7, #6]
 8009320:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	88fa      	ldrh	r2, [r7, #6]
 8009328:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2200      	movs	r2, #0
 8009330:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800933a:	d10e      	bne.n	800935a <UART_Start_Receive_IT+0x52>
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	691b      	ldr	r3, [r3, #16]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d105      	bne.n	8009350 <UART_Start_Receive_IT+0x48>
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f240 12ff 	movw	r2, #511	; 0x1ff
 800934a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800934e:	e02d      	b.n	80093ac <UART_Start_Receive_IT+0xa4>
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	22ff      	movs	r2, #255	; 0xff
 8009354:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009358:	e028      	b.n	80093ac <UART_Start_Receive_IT+0xa4>
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d10d      	bne.n	800937e <UART_Start_Receive_IT+0x76>
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	691b      	ldr	r3, [r3, #16]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d104      	bne.n	8009374 <UART_Start_Receive_IT+0x6c>
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	22ff      	movs	r2, #255	; 0xff
 800936e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009372:	e01b      	b.n	80093ac <UART_Start_Receive_IT+0xa4>
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	227f      	movs	r2, #127	; 0x7f
 8009378:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800937c:	e016      	b.n	80093ac <UART_Start_Receive_IT+0xa4>
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009386:	d10d      	bne.n	80093a4 <UART_Start_Receive_IT+0x9c>
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	691b      	ldr	r3, [r3, #16]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d104      	bne.n	800939a <UART_Start_Receive_IT+0x92>
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	227f      	movs	r2, #127	; 0x7f
 8009394:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009398:	e008      	b.n	80093ac <UART_Start_Receive_IT+0xa4>
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	223f      	movs	r2, #63	; 0x3f
 800939e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80093a2:	e003      	b.n	80093ac <UART_Start_Receive_IT+0xa4>
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2200      	movs	r2, #0
 80093b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2222      	movs	r2, #34	; 0x22
 80093b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	3308      	adds	r3, #8
 80093c2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093c6:	e853 3f00 	ldrex	r3, [r3]
 80093ca:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80093cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80093ce:	f043 0301 	orr.w	r3, r3, #1
 80093d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	3308      	adds	r3, #8
 80093dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80093e0:	673a      	str	r2, [r7, #112]	; 0x70
 80093e2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80093e6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80093e8:	e841 2300 	strex	r3, r2, [r1]
 80093ec:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80093ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d1e3      	bne.n	80093bc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093fc:	d14f      	bne.n	800949e <UART_Start_Receive_IT+0x196>
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009404:	88fa      	ldrh	r2, [r7, #6]
 8009406:	429a      	cmp	r2, r3
 8009408:	d349      	bcc.n	800949e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	689b      	ldr	r3, [r3, #8]
 800940e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009412:	d107      	bne.n	8009424 <UART_Start_Receive_IT+0x11c>
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	691b      	ldr	r3, [r3, #16]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d103      	bne.n	8009424 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	4a47      	ldr	r2, [pc, #284]	; (800953c <UART_Start_Receive_IT+0x234>)
 8009420:	675a      	str	r2, [r3, #116]	; 0x74
 8009422:	e002      	b.n	800942a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	4a46      	ldr	r2, [pc, #280]	; (8009540 <UART_Start_Receive_IT+0x238>)
 8009428:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	691b      	ldr	r3, [r3, #16]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d01a      	beq.n	8009468 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800943a:	e853 3f00 	ldrex	r3, [r3]
 800943e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009446:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	461a      	mov	r2, r3
 8009450:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009454:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009456:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009458:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800945a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800945c:	e841 2300 	strex	r3, r2, [r1]
 8009460:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009462:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009464:	2b00      	cmp	r3, #0
 8009466:	d1e4      	bne.n	8009432 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	3308      	adds	r3, #8
 800946e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009472:	e853 3f00 	ldrex	r3, [r3]
 8009476:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800947e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	3308      	adds	r3, #8
 8009486:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009488:	64ba      	str	r2, [r7, #72]	; 0x48
 800948a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800948c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800948e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009490:	e841 2300 	strex	r3, r2, [r1]
 8009494:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009498:	2b00      	cmp	r3, #0
 800949a:	d1e5      	bne.n	8009468 <UART_Start_Receive_IT+0x160>
 800949c:	e046      	b.n	800952c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094a6:	d107      	bne.n	80094b8 <UART_Start_Receive_IT+0x1b0>
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	691b      	ldr	r3, [r3, #16]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d103      	bne.n	80094b8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	4a24      	ldr	r2, [pc, #144]	; (8009544 <UART_Start_Receive_IT+0x23c>)
 80094b4:	675a      	str	r2, [r3, #116]	; 0x74
 80094b6:	e002      	b.n	80094be <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	4a23      	ldr	r2, [pc, #140]	; (8009548 <UART_Start_Receive_IT+0x240>)
 80094bc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	691b      	ldr	r3, [r3, #16]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d019      	beq.n	80094fa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ce:	e853 3f00 	ldrex	r3, [r3]
 80094d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80094da:	677b      	str	r3, [r7, #116]	; 0x74
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	461a      	mov	r2, r3
 80094e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094e4:	637b      	str	r3, [r7, #52]	; 0x34
 80094e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80094ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094ec:	e841 2300 	strex	r3, r2, [r1]
 80094f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80094f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d1e6      	bne.n	80094c6 <UART_Start_Receive_IT+0x1be>
 80094f8:	e018      	b.n	800952c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	e853 3f00 	ldrex	r3, [r3]
 8009506:	613b      	str	r3, [r7, #16]
   return(result);
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	f043 0320 	orr.w	r3, r3, #32
 800950e:	67bb      	str	r3, [r7, #120]	; 0x78
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	461a      	mov	r2, r3
 8009516:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009518:	623b      	str	r3, [r7, #32]
 800951a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800951c:	69f9      	ldr	r1, [r7, #28]
 800951e:	6a3a      	ldr	r2, [r7, #32]
 8009520:	e841 2300 	strex	r3, r2, [r1]
 8009524:	61bb      	str	r3, [r7, #24]
   return(result);
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d1e6      	bne.n	80094fa <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800952c:	2300      	movs	r3, #0
}
 800952e:	4618      	mov	r0, r3
 8009530:	378c      	adds	r7, #140	; 0x8c
 8009532:	46bd      	mov	sp, r7
 8009534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop
 800953c:	0800a0b1 	.word	0x0800a0b1
 8009540:	08009d51 	.word	0x08009d51
 8009544:	08009b99 	.word	0x08009b99
 8009548:	080099e1 	.word	0x080099e1

0800954c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800954c:	b480      	push	{r7}
 800954e:	b095      	sub	sp, #84	; 0x54
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800955a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800955c:	e853 3f00 	ldrex	r3, [r3]
 8009560:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009564:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009568:	64fb      	str	r3, [r7, #76]	; 0x4c
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	461a      	mov	r2, r3
 8009570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009572:	643b      	str	r3, [r7, #64]	; 0x40
 8009574:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009576:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009578:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800957a:	e841 2300 	strex	r3, r2, [r1]
 800957e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009582:	2b00      	cmp	r3, #0
 8009584:	d1e6      	bne.n	8009554 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	3308      	adds	r3, #8
 800958c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958e:	6a3b      	ldr	r3, [r7, #32]
 8009590:	e853 3f00 	ldrex	r3, [r3]
 8009594:	61fb      	str	r3, [r7, #28]
   return(result);
 8009596:	69fa      	ldr	r2, [r7, #28]
 8009598:	4b1e      	ldr	r3, [pc, #120]	; (8009614 <UART_EndRxTransfer+0xc8>)
 800959a:	4013      	ands	r3, r2
 800959c:	64bb      	str	r3, [r7, #72]	; 0x48
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	3308      	adds	r3, #8
 80095a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80095a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095ae:	e841 2300 	strex	r3, r2, [r1]
 80095b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80095b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d1e5      	bne.n	8009586 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d118      	bne.n	80095f4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	e853 3f00 	ldrex	r3, [r3]
 80095ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	f023 0310 	bic.w	r3, r3, #16
 80095d6:	647b      	str	r3, [r7, #68]	; 0x44
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	461a      	mov	r2, r3
 80095de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095e0:	61bb      	str	r3, [r7, #24]
 80095e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e4:	6979      	ldr	r1, [r7, #20]
 80095e6:	69ba      	ldr	r2, [r7, #24]
 80095e8:	e841 2300 	strex	r3, r2, [r1]
 80095ec:	613b      	str	r3, [r7, #16]
   return(result);
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d1e6      	bne.n	80095c2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2220      	movs	r2, #32
 80095f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009608:	bf00      	nop
 800960a:	3754      	adds	r7, #84	; 0x54
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr
 8009614:	effffffe 	.word	0xeffffffe

08009618 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009624:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2200      	movs	r2, #0
 800962a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2200      	movs	r2, #0
 8009632:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009636:	68f8      	ldr	r0, [r7, #12]
 8009638:	f7fe ff34 	bl	80084a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800963c:	bf00      	nop
 800963e:	3710      	adds	r7, #16
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009644:	b480      	push	{r7}
 8009646:	b08f      	sub	sp, #60	; 0x3c
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009652:	2b21      	cmp	r3, #33	; 0x21
 8009654:	d14c      	bne.n	80096f0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800965c:	b29b      	uxth	r3, r3
 800965e:	2b00      	cmp	r3, #0
 8009660:	d132      	bne.n	80096c8 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009668:	6a3b      	ldr	r3, [r7, #32]
 800966a:	e853 3f00 	ldrex	r3, [r3]
 800966e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009670:	69fb      	ldr	r3, [r7, #28]
 8009672:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009676:	637b      	str	r3, [r7, #52]	; 0x34
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	461a      	mov	r2, r3
 800967e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009680:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009682:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009684:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009686:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009688:	e841 2300 	strex	r3, r2, [r1]
 800968c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800968e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009690:	2b00      	cmp	r3, #0
 8009692:	d1e6      	bne.n	8009662 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	e853 3f00 	ldrex	r3, [r3]
 80096a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096a8:	633b      	str	r3, [r7, #48]	; 0x30
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	461a      	mov	r2, r3
 80096b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b2:	61bb      	str	r3, [r7, #24]
 80096b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b6:	6979      	ldr	r1, [r7, #20]
 80096b8:	69ba      	ldr	r2, [r7, #24]
 80096ba:	e841 2300 	strex	r3, r2, [r1]
 80096be:	613b      	str	r3, [r7, #16]
   return(result);
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d1e6      	bne.n	8009694 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80096c6:	e013      	b.n	80096f0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096cc:	781a      	ldrb	r2, [r3, #0]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096d8:	1c5a      	adds	r2, r3, #1
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	3b01      	subs	r3, #1
 80096e8:	b29a      	uxth	r2, r3
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80096f0:	bf00      	nop
 80096f2:	373c      	adds	r7, #60	; 0x3c
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b091      	sub	sp, #68	; 0x44
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800970a:	2b21      	cmp	r3, #33	; 0x21
 800970c:	d151      	bne.n	80097b2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009714:	b29b      	uxth	r3, r3
 8009716:	2b00      	cmp	r3, #0
 8009718:	d132      	bne.n	8009780 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009722:	e853 3f00 	ldrex	r3, [r3]
 8009726:	623b      	str	r3, [r7, #32]
   return(result);
 8009728:	6a3b      	ldr	r3, [r7, #32]
 800972a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800972e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	461a      	mov	r2, r3
 8009736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009738:	633b      	str	r3, [r7, #48]	; 0x30
 800973a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800973e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009740:	e841 2300 	strex	r3, r2, [r1]
 8009744:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009748:	2b00      	cmp	r3, #0
 800974a:	d1e6      	bne.n	800971a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	e853 3f00 	ldrex	r3, [r3]
 8009758:	60fb      	str	r3, [r7, #12]
   return(result);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009760:	637b      	str	r3, [r7, #52]	; 0x34
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	461a      	mov	r2, r3
 8009768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800976a:	61fb      	str	r3, [r7, #28]
 800976c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800976e:	69b9      	ldr	r1, [r7, #24]
 8009770:	69fa      	ldr	r2, [r7, #28]
 8009772:	e841 2300 	strex	r3, r2, [r1]
 8009776:	617b      	str	r3, [r7, #20]
   return(result);
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d1e6      	bne.n	800974c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800977e:	e018      	b.n	80097b2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009784:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009788:	881b      	ldrh	r3, [r3, #0]
 800978a:	461a      	mov	r2, r3
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009794:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800979a:	1c9a      	adds	r2, r3, #2
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	3b01      	subs	r3, #1
 80097aa:	b29a      	uxth	r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80097b2:	bf00      	nop
 80097b4:	3744      	adds	r7, #68	; 0x44
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr

080097be <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80097be:	b480      	push	{r7}
 80097c0:	b091      	sub	sp, #68	; 0x44
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097cc:	2b21      	cmp	r3, #33	; 0x21
 80097ce:	d160      	bne.n	8009892 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80097d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80097d8:	e057      	b.n	800988a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d133      	bne.n	800984e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	3308      	adds	r3, #8
 80097ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f0:	e853 3f00 	ldrex	r3, [r3]
 80097f4:	623b      	str	r3, [r7, #32]
   return(result);
 80097f6:	6a3b      	ldr	r3, [r7, #32]
 80097f8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80097fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	3308      	adds	r3, #8
 8009804:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009806:	633a      	str	r2, [r7, #48]	; 0x30
 8009808:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800980a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800980c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800980e:	e841 2300 	strex	r3, r2, [r1]
 8009812:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009816:	2b00      	cmp	r3, #0
 8009818:	d1e5      	bne.n	80097e6 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	e853 3f00 	ldrex	r3, [r3]
 8009826:	60fb      	str	r3, [r7, #12]
   return(result);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800982e:	637b      	str	r3, [r7, #52]	; 0x34
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	461a      	mov	r2, r3
 8009836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009838:	61fb      	str	r3, [r7, #28]
 800983a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983c:	69b9      	ldr	r1, [r7, #24]
 800983e:	69fa      	ldr	r2, [r7, #28]
 8009840:	e841 2300 	strex	r3, r2, [r1]
 8009844:	617b      	str	r3, [r7, #20]
   return(result);
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d1e6      	bne.n	800981a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800984c:	e021      	b.n	8009892 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	69db      	ldr	r3, [r3, #28]
 8009854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009858:	2b00      	cmp	r3, #0
 800985a:	d013      	beq.n	8009884 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009860:	781a      	ldrb	r2, [r3, #0]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800986c:	1c5a      	adds	r2, r3, #1
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009878:	b29b      	uxth	r3, r3
 800987a:	3b01      	subs	r3, #1
 800987c:	b29a      	uxth	r2, r3
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009884:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009886:	3b01      	subs	r3, #1
 8009888:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800988a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800988c:	2b00      	cmp	r3, #0
 800988e:	d1a4      	bne.n	80097da <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009890:	e7ff      	b.n	8009892 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8009892:	bf00      	nop
 8009894:	3744      	adds	r7, #68	; 0x44
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr

0800989e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800989e:	b480      	push	{r7}
 80098a0:	b091      	sub	sp, #68	; 0x44
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098ac:	2b21      	cmp	r3, #33	; 0x21
 80098ae:	d165      	bne.n	800997c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80098b6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80098b8:	e05c      	b.n	8009974 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d133      	bne.n	800992e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	3308      	adds	r3, #8
 80098cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ce:	6a3b      	ldr	r3, [r7, #32]
 80098d0:	e853 3f00 	ldrex	r3, [r3]
 80098d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80098d6:	69fb      	ldr	r3, [r7, #28]
 80098d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80098dc:	637b      	str	r3, [r7, #52]	; 0x34
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	3308      	adds	r3, #8
 80098e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80098e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80098ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098ee:	e841 2300 	strex	r3, r2, [r1]
 80098f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80098f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d1e5      	bne.n	80098c6 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	e853 3f00 	ldrex	r3, [r3]
 8009906:	60bb      	str	r3, [r7, #8]
   return(result);
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800990e:	633b      	str	r3, [r7, #48]	; 0x30
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	461a      	mov	r2, r3
 8009916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009918:	61bb      	str	r3, [r7, #24]
 800991a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800991c:	6979      	ldr	r1, [r7, #20]
 800991e:	69ba      	ldr	r2, [r7, #24]
 8009920:	e841 2300 	strex	r3, r2, [r1]
 8009924:	613b      	str	r3, [r7, #16]
   return(result);
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d1e6      	bne.n	80098fa <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800992c:	e026      	b.n	800997c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	69db      	ldr	r3, [r3, #28]
 8009934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009938:	2b00      	cmp	r3, #0
 800993a:	d018      	beq.n	800996e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009940:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009944:	881b      	ldrh	r3, [r3, #0]
 8009946:	461a      	mov	r2, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009950:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009956:	1c9a      	adds	r2, r3, #2
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009962:	b29b      	uxth	r3, r3
 8009964:	3b01      	subs	r3, #1
 8009966:	b29a      	uxth	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800996e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009970:	3b01      	subs	r3, #1
 8009972:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009974:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009976:	2b00      	cmp	r3, #0
 8009978:	d19f      	bne.n	80098ba <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800997a:	e7ff      	b.n	800997c <UART_TxISR_16BIT_FIFOEN+0xde>
 800997c:	bf00      	nop
 800997e:	3744      	adds	r7, #68	; 0x44
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr

08009988 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b088      	sub	sp, #32
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	e853 3f00 	ldrex	r3, [r3]
 800999c:	60bb      	str	r3, [r7, #8]
   return(result);
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099a4:	61fb      	str	r3, [r7, #28]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	461a      	mov	r2, r3
 80099ac:	69fb      	ldr	r3, [r7, #28]
 80099ae:	61bb      	str	r3, [r7, #24]
 80099b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b2:	6979      	ldr	r1, [r7, #20]
 80099b4:	69ba      	ldr	r2, [r7, #24]
 80099b6:	e841 2300 	strex	r3, r2, [r1]
 80099ba:	613b      	str	r3, [r7, #16]
   return(result);
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d1e6      	bne.n	8009990 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2220      	movs	r2, #32
 80099c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2200      	movs	r2, #0
 80099ce:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f7fe fd5d 	bl	8008490 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099d6:	bf00      	nop
 80099d8:	3720      	adds	r7, #32
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
	...

080099e0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b09c      	sub	sp, #112	; 0x70
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80099ee:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099f8:	2b22      	cmp	r3, #34	; 0x22
 80099fa:	f040 80be 	bne.w	8009b7a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a04:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009a08:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009a0c:	b2d9      	uxtb	r1, r3
 8009a0e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009a12:	b2da      	uxtb	r2, r3
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a18:	400a      	ands	r2, r1
 8009a1a:	b2d2      	uxtb	r2, r2
 8009a1c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a22:	1c5a      	adds	r2, r3, #1
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	3b01      	subs	r3, #1
 8009a32:	b29a      	uxth	r2, r3
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	f040 80a1 	bne.w	8009b8a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a50:	e853 3f00 	ldrex	r3, [r3]
 8009a54:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	461a      	mov	r2, r3
 8009a64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009a66:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a68:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009a6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009a6e:	e841 2300 	strex	r3, r2, [r1]
 8009a72:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009a74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d1e6      	bne.n	8009a48 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	3308      	adds	r3, #8
 8009a80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a84:	e853 3f00 	ldrex	r3, [r3]
 8009a88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a8c:	f023 0301 	bic.w	r3, r3, #1
 8009a90:	667b      	str	r3, [r7, #100]	; 0x64
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	3308      	adds	r3, #8
 8009a98:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009a9a:	647a      	str	r2, [r7, #68]	; 0x44
 8009a9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009aa0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009aa2:	e841 2300 	strex	r3, r2, [r1]
 8009aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d1e5      	bne.n	8009a7a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2220      	movs	r2, #32
 8009ab2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4a33      	ldr	r2, [pc, #204]	; (8009b94 <UART_RxISR_8BIT+0x1b4>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d01f      	beq.n	8009b0c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d018      	beq.n	8009b0c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae2:	e853 3f00 	ldrex	r3, [r3]
 8009ae6:	623b      	str	r3, [r7, #32]
   return(result);
 8009ae8:	6a3b      	ldr	r3, [r7, #32]
 8009aea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009aee:	663b      	str	r3, [r7, #96]	; 0x60
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	461a      	mov	r2, r3
 8009af6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009af8:	633b      	str	r3, [r7, #48]	; 0x30
 8009afa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009afc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009afe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b00:	e841 2300 	strex	r3, r2, [r1]
 8009b04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d1e6      	bne.n	8009ada <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d12e      	bne.n	8009b72 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	e853 3f00 	ldrex	r3, [r3]
 8009b26:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f023 0310 	bic.w	r3, r3, #16
 8009b2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	461a      	mov	r2, r3
 8009b36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b38:	61fb      	str	r3, [r7, #28]
 8009b3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b3c:	69b9      	ldr	r1, [r7, #24]
 8009b3e:	69fa      	ldr	r2, [r7, #28]
 8009b40:	e841 2300 	strex	r3, r2, [r1]
 8009b44:	617b      	str	r3, [r7, #20]
   return(result);
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d1e6      	bne.n	8009b1a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	69db      	ldr	r3, [r3, #28]
 8009b52:	f003 0310 	and.w	r3, r3, #16
 8009b56:	2b10      	cmp	r3, #16
 8009b58:	d103      	bne.n	8009b62 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2210      	movs	r2, #16
 8009b60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009b68:	4619      	mov	r1, r3
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f7fe fca4 	bl	80084b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b70:	e00b      	b.n	8009b8a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f001 f984 	bl	800ae80 <HAL_UART_RxCpltCallback>
}
 8009b78:	e007      	b.n	8009b8a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	699a      	ldr	r2, [r3, #24]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f042 0208 	orr.w	r2, r2, #8
 8009b88:	619a      	str	r2, [r3, #24]
}
 8009b8a:	bf00      	nop
 8009b8c:	3770      	adds	r7, #112	; 0x70
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	58000c00 	.word	0x58000c00

08009b98 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b09c      	sub	sp, #112	; 0x70
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009ba6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bb0:	2b22      	cmp	r3, #34	; 0x22
 8009bb2:	f040 80be 	bne.w	8009d32 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bbc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bc4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009bc6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8009bca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009bce:	4013      	ands	r3, r2
 8009bd0:	b29a      	uxth	r2, r3
 8009bd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009bd4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bda:	1c9a      	adds	r2, r3, #2
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	3b01      	subs	r3, #1
 8009bea:	b29a      	uxth	r2, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	f040 80a1 	bne.w	8009d42 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c08:	e853 3f00 	ldrex	r3, [r3]
 8009c0c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c14:	667b      	str	r3, [r7, #100]	; 0x64
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c1e:	657b      	str	r3, [r7, #84]	; 0x54
 8009c20:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009c24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009c26:	e841 2300 	strex	r3, r2, [r1]
 8009c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d1e6      	bne.n	8009c00 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	3308      	adds	r3, #8
 8009c38:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c3c:	e853 3f00 	ldrex	r3, [r3]
 8009c40:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c44:	f023 0301 	bic.w	r3, r3, #1
 8009c48:	663b      	str	r3, [r7, #96]	; 0x60
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	3308      	adds	r3, #8
 8009c50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009c52:	643a      	str	r2, [r7, #64]	; 0x40
 8009c54:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009c58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c5a:	e841 2300 	strex	r3, r2, [r1]
 8009c5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d1e5      	bne.n	8009c32 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2220      	movs	r2, #32
 8009c6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2200      	movs	r2, #0
 8009c72:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a33      	ldr	r2, [pc, #204]	; (8009d4c <UART_RxISR_16BIT+0x1b4>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d01f      	beq.n	8009cc4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d018      	beq.n	8009cc4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c98:	6a3b      	ldr	r3, [r7, #32]
 8009c9a:	e853 3f00 	ldrex	r3, [r3]
 8009c9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ca0:	69fb      	ldr	r3, [r7, #28]
 8009ca2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	461a      	mov	r2, r3
 8009cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cb2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009cb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cb8:	e841 2300 	strex	r3, r2, [r1]
 8009cbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d1e6      	bne.n	8009c92 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d12e      	bne.n	8009d2a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	e853 3f00 	ldrex	r3, [r3]
 8009cde:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	f023 0310 	bic.w	r3, r3, #16
 8009ce6:	65bb      	str	r3, [r7, #88]	; 0x58
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	461a      	mov	r2, r3
 8009cee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009cf0:	61bb      	str	r3, [r7, #24]
 8009cf2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf4:	6979      	ldr	r1, [r7, #20]
 8009cf6:	69ba      	ldr	r2, [r7, #24]
 8009cf8:	e841 2300 	strex	r3, r2, [r1]
 8009cfc:	613b      	str	r3, [r7, #16]
   return(result);
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d1e6      	bne.n	8009cd2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	69db      	ldr	r3, [r3, #28]
 8009d0a:	f003 0310 	and.w	r3, r3, #16
 8009d0e:	2b10      	cmp	r3, #16
 8009d10:	d103      	bne.n	8009d1a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2210      	movs	r2, #16
 8009d18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d20:	4619      	mov	r1, r3
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f7fe fbc8 	bl	80084b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d28:	e00b      	b.n	8009d42 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f001 f8a8 	bl	800ae80 <HAL_UART_RxCpltCallback>
}
 8009d30:	e007      	b.n	8009d42 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	699a      	ldr	r2, [r3, #24]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f042 0208 	orr.w	r2, r2, #8
 8009d40:	619a      	str	r2, [r3, #24]
}
 8009d42:	bf00      	nop
 8009d44:	3770      	adds	r7, #112	; 0x70
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	58000c00 	.word	0x58000c00

08009d50 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b0ac      	sub	sp, #176	; 0xb0
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009d5e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	69db      	ldr	r3, [r3, #28]
 8009d68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	689b      	ldr	r3, [r3, #8]
 8009d7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d86:	2b22      	cmp	r3, #34	; 0x22
 8009d88:	f040 8180 	bne.w	800a08c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009d92:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009d96:	e123      	b.n	8009fe0 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d9e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009da2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8009da6:	b2d9      	uxtb	r1, r3
 8009da8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009dac:	b2da      	uxtb	r2, r3
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009db2:	400a      	ands	r2, r1
 8009db4:	b2d2      	uxtb	r2, r2
 8009db6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dbc:	1c5a      	adds	r2, r3, #1
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009dc8:	b29b      	uxth	r3, r3
 8009dca:	3b01      	subs	r3, #1
 8009dcc:	b29a      	uxth	r2, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	69db      	ldr	r3, [r3, #28]
 8009dda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009dde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009de2:	f003 0307 	and.w	r3, r3, #7
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d053      	beq.n	8009e92 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009dea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009dee:	f003 0301 	and.w	r3, r3, #1
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d011      	beq.n	8009e1a <UART_RxISR_8BIT_FIFOEN+0xca>
 8009df6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d00b      	beq.n	8009e1a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	2201      	movs	r2, #1
 8009e08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e10:	f043 0201 	orr.w	r2, r3, #1
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009e1e:	f003 0302 	and.w	r3, r3, #2
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d011      	beq.n	8009e4a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009e26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009e2a:	f003 0301 	and.w	r3, r3, #1
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d00b      	beq.n	8009e4a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	2202      	movs	r2, #2
 8009e38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e40:	f043 0204 	orr.w	r2, r3, #4
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009e4e:	f003 0304 	and.w	r3, r3, #4
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d011      	beq.n	8009e7a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009e56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009e5a:	f003 0301 	and.w	r3, r3, #1
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d00b      	beq.n	8009e7a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2204      	movs	r2, #4
 8009e68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e70:	f043 0202 	orr.w	r2, r3, #2
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d006      	beq.n	8009e92 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f7fe fb0d 	bl	80084a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	f040 80a0 	bne.w	8009fe0 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ea8:	e853 3f00 	ldrex	r3, [r3]
 8009eac:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8009eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009eb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ec2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009ec4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009ec8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009eca:	e841 2300 	strex	r3, r2, [r1]
 8009ece:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8009ed0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d1e4      	bne.n	8009ea0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	3308      	adds	r3, #8
 8009edc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ede:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ee0:	e853 3f00 	ldrex	r3, [r3]
 8009ee4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009ee6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ee8:	4b6e      	ldr	r3, [pc, #440]	; (800a0a4 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8009eea:	4013      	ands	r3, r2
 8009eec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	3308      	adds	r3, #8
 8009ef6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009efa:	66ba      	str	r2, [r7, #104]	; 0x68
 8009efc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009efe:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009f00:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009f02:	e841 2300 	strex	r3, r2, [r1]
 8009f06:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009f08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d1e3      	bne.n	8009ed6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2220      	movs	r2, #32
 8009f12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a60      	ldr	r2, [pc, #384]	; (800a0a8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d021      	beq.n	8009f70 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d01a      	beq.n	8009f70 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f42:	e853 3f00 	ldrex	r3, [r3]
 8009f46:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009f4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	461a      	mov	r2, r3
 8009f58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009f5c:	657b      	str	r3, [r7, #84]	; 0x54
 8009f5e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f60:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009f62:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f64:	e841 2300 	strex	r3, r2, [r1]
 8009f68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d1e4      	bne.n	8009f3a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d130      	bne.n	8009fda <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f86:	e853 3f00 	ldrex	r3, [r3]
 8009f8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8e:	f023 0310 	bic.w	r3, r3, #16
 8009f92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009fa0:	643b      	str	r3, [r7, #64]	; 0x40
 8009fa2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009fa6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009fa8:	e841 2300 	strex	r3, r2, [r1]
 8009fac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d1e4      	bne.n	8009f7e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	69db      	ldr	r3, [r3, #28]
 8009fba:	f003 0310 	and.w	r3, r3, #16
 8009fbe:	2b10      	cmp	r3, #16
 8009fc0:	d103      	bne.n	8009fca <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	2210      	movs	r2, #16
 8009fc8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f7fe fa70 	bl	80084b8 <HAL_UARTEx_RxEventCallback>
 8009fd8:	e002      	b.n	8009fe0 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f000 ff50 	bl	800ae80 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009fe0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d006      	beq.n	8009ff6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8009fe8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009fec:	f003 0320 	and.w	r3, r3, #32
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	f47f aed1 	bne.w	8009d98 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ffc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a000:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a004:	2b00      	cmp	r3, #0
 800a006:	d049      	beq.n	800a09c <UART_RxISR_8BIT_FIFOEN+0x34c>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a00e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800a012:	429a      	cmp	r2, r3
 800a014:	d242      	bcs.n	800a09c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	3308      	adds	r3, #8
 800a01c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a01e:	6a3b      	ldr	r3, [r7, #32]
 800a020:	e853 3f00 	ldrex	r3, [r3]
 800a024:	61fb      	str	r3, [r7, #28]
   return(result);
 800a026:	69fb      	ldr	r3, [r7, #28]
 800a028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a02c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	3308      	adds	r3, #8
 800a036:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a03a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a03c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a03e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a040:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a042:	e841 2300 	strex	r3, r2, [r1]
 800a046:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d1e3      	bne.n	800a016 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	4a16      	ldr	r2, [pc, #88]	; (800a0ac <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800a052:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	e853 3f00 	ldrex	r3, [r3]
 800a060:	60bb      	str	r3, [r7, #8]
   return(result);
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	f043 0320 	orr.w	r3, r3, #32
 800a068:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	461a      	mov	r2, r3
 800a072:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a076:	61bb      	str	r3, [r7, #24]
 800a078:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a07a:	6979      	ldr	r1, [r7, #20]
 800a07c:	69ba      	ldr	r2, [r7, #24]
 800a07e:	e841 2300 	strex	r3, r2, [r1]
 800a082:	613b      	str	r3, [r7, #16]
   return(result);
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d1e4      	bne.n	800a054 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a08a:	e007      	b.n	800a09c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	699a      	ldr	r2, [r3, #24]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f042 0208 	orr.w	r2, r2, #8
 800a09a:	619a      	str	r2, [r3, #24]
}
 800a09c:	bf00      	nop
 800a09e:	37b0      	adds	r7, #176	; 0xb0
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	effffffe 	.word	0xeffffffe
 800a0a8:	58000c00 	.word	0x58000c00
 800a0ac:	080099e1 	.word	0x080099e1

0800a0b0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b0ae      	sub	sp, #184	; 0xb8
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a0be:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	69db      	ldr	r3, [r3, #28]
 800a0c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0e6:	2b22      	cmp	r3, #34	; 0x22
 800a0e8:	f040 8184 	bne.w	800a3f4 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a0f2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a0f6:	e127      	b.n	800a348 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0fe:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a106:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800a10a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800a10e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800a112:	4013      	ands	r3, r2
 800a114:	b29a      	uxth	r2, r3
 800a116:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a11a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a120:	1c9a      	adds	r2, r3, #2
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	3b01      	subs	r3, #1
 800a130:	b29a      	uxth	r2, r3
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	69db      	ldr	r3, [r3, #28]
 800a13e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a142:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a146:	f003 0307 	and.w	r3, r3, #7
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d053      	beq.n	800a1f6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a14e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a152:	f003 0301 	and.w	r3, r3, #1
 800a156:	2b00      	cmp	r3, #0
 800a158:	d011      	beq.n	800a17e <UART_RxISR_16BIT_FIFOEN+0xce>
 800a15a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a15e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a162:	2b00      	cmp	r3, #0
 800a164:	d00b      	beq.n	800a17e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	2201      	movs	r2, #1
 800a16c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a174:	f043 0201 	orr.w	r2, r3, #1
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a17e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a182:	f003 0302 	and.w	r3, r3, #2
 800a186:	2b00      	cmp	r3, #0
 800a188:	d011      	beq.n	800a1ae <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a18a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a18e:	f003 0301 	and.w	r3, r3, #1
 800a192:	2b00      	cmp	r3, #0
 800a194:	d00b      	beq.n	800a1ae <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	2202      	movs	r2, #2
 800a19c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1a4:	f043 0204 	orr.w	r2, r3, #4
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a1ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a1b2:	f003 0304 	and.w	r3, r3, #4
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d011      	beq.n	800a1de <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a1ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a1be:	f003 0301 	and.w	r3, r3, #1
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d00b      	beq.n	800a1de <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2204      	movs	r2, #4
 800a1cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1d4:	f043 0202 	orr.w	r2, r3, #2
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d006      	beq.n	800a1f6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f7fe f95b 	bl	80084a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	f040 80a2 	bne.w	800a348 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a20a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a20c:	e853 3f00 	ldrex	r3, [r3]
 800a210:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a212:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a214:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a218:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	461a      	mov	r2, r3
 800a222:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a226:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a22a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a22c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a22e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a232:	e841 2300 	strex	r3, r2, [r1]
 800a236:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a238:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d1e2      	bne.n	800a204 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	3308      	adds	r3, #8
 800a244:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a246:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a248:	e853 3f00 	ldrex	r3, [r3]
 800a24c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a24e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a250:	4b6e      	ldr	r3, [pc, #440]	; (800a40c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800a252:	4013      	ands	r3, r2
 800a254:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	3308      	adds	r3, #8
 800a25e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a262:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a264:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a266:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a268:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a26a:	e841 2300 	strex	r3, r2, [r1]
 800a26e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a270:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a272:	2b00      	cmp	r3, #0
 800a274:	d1e3      	bne.n	800a23e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2220      	movs	r2, #32
 800a27a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2200      	movs	r2, #0
 800a288:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4a60      	ldr	r2, [pc, #384]	; (800a410 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d021      	beq.n	800a2d8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d01a      	beq.n	800a2d8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2aa:	e853 3f00 	ldrex	r3, [r3]
 800a2ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a2b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a2b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	461a      	mov	r2, r3
 800a2c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a2c4:	65bb      	str	r3, [r7, #88]	; 0x58
 800a2c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a2ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a2cc:	e841 2300 	strex	r3, r2, [r1]
 800a2d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a2d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d1e4      	bne.n	800a2a2 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d130      	bne.n	800a342 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ee:	e853 3f00 	ldrex	r3, [r3]
 800a2f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a2f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2f6:	f023 0310 	bic.w	r3, r3, #16
 800a2fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	461a      	mov	r2, r3
 800a304:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a308:	647b      	str	r3, [r7, #68]	; 0x44
 800a30a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a30c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a30e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a310:	e841 2300 	strex	r3, r2, [r1]
 800a314:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d1e4      	bne.n	800a2e6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	69db      	ldr	r3, [r3, #28]
 800a322:	f003 0310 	and.w	r3, r3, #16
 800a326:	2b10      	cmp	r3, #16
 800a328:	d103      	bne.n	800a332 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	2210      	movs	r2, #16
 800a330:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a338:	4619      	mov	r1, r3
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f7fe f8bc 	bl	80084b8 <HAL_UARTEx_RxEventCallback>
 800a340:	e002      	b.n	800a348 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 fd9c 	bl	800ae80 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a348:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d006      	beq.n	800a35e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800a350:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a354:	f003 0320 	and.w	r3, r3, #32
 800a358:	2b00      	cmp	r3, #0
 800a35a:	f47f aecd 	bne.w	800a0f8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a364:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a368:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d049      	beq.n	800a404 <UART_RxISR_16BIT_FIFOEN+0x354>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a376:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d242      	bcs.n	800a404 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	3308      	adds	r3, #8
 800a384:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a388:	e853 3f00 	ldrex	r3, [r3]
 800a38c:	623b      	str	r3, [r7, #32]
   return(result);
 800a38e:	6a3b      	ldr	r3, [r7, #32]
 800a390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a394:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	3308      	adds	r3, #8
 800a39e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a3a2:	633a      	str	r2, [r7, #48]	; 0x30
 800a3a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a3a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3aa:	e841 2300 	strex	r3, r2, [r1]
 800a3ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d1e3      	bne.n	800a37e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	4a16      	ldr	r2, [pc, #88]	; (800a414 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800a3ba:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	e853 3f00 	ldrex	r3, [r3]
 800a3c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f043 0320 	orr.w	r3, r3, #32
 800a3d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	461a      	mov	r2, r3
 800a3da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a3de:	61fb      	str	r3, [r7, #28]
 800a3e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e2:	69b9      	ldr	r1, [r7, #24]
 800a3e4:	69fa      	ldr	r2, [r7, #28]
 800a3e6:	e841 2300 	strex	r3, r2, [r1]
 800a3ea:	617b      	str	r3, [r7, #20]
   return(result);
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d1e4      	bne.n	800a3bc <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a3f2:	e007      	b.n	800a404 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	699a      	ldr	r2, [r3, #24]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f042 0208 	orr.w	r2, r2, #8
 800a402:	619a      	str	r2, [r3, #24]
}
 800a404:	bf00      	nop
 800a406:	37b8      	adds	r7, #184	; 0xb8
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	effffffe 	.word	0xeffffffe
 800a410:	58000c00 	.word	0x58000c00
 800a414:	08009b99 	.word	0x08009b99

0800a418 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a420:	bf00      	nop
 800a422:	370c      	adds	r7, #12
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr

0800a42c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a434:	bf00      	nop
 800a436:	370c      	adds	r7, #12
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr

0800a440 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a440:	b480      	push	{r7}
 800a442:	b083      	sub	sp, #12
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a448:	bf00      	nop
 800a44a:	370c      	adds	r7, #12
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr

0800a454 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a454:	b480      	push	{r7}
 800a456:	b085      	sub	sp, #20
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a462:	2b01      	cmp	r3, #1
 800a464:	d101      	bne.n	800a46a <HAL_UARTEx_DisableFifoMode+0x16>
 800a466:	2302      	movs	r3, #2
 800a468:	e027      	b.n	800a4ba <HAL_UARTEx_DisableFifoMode+0x66>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2201      	movs	r2, #1
 800a46e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2224      	movs	r2, #36	; 0x24
 800a476:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f022 0201 	bic.w	r2, r2, #1
 800a490:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a498:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2200      	movs	r2, #0
 800a49e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	68fa      	ldr	r2, [r7, #12]
 800a4a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2220      	movs	r2, #32
 800a4ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a4b8:	2300      	movs	r3, #0
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3714      	adds	r7, #20
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c4:	4770      	bx	lr

0800a4c6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b084      	sub	sp, #16
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
 800a4ce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d101      	bne.n	800a4de <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a4da:	2302      	movs	r3, #2
 800a4dc:	e02d      	b.n	800a53a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2224      	movs	r2, #36	; 0x24
 800a4ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f022 0201 	bic.w	r2, r2, #1
 800a504:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	689b      	ldr	r3, [r3, #8]
 800a50c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	683a      	ldr	r2, [r7, #0]
 800a516:	430a      	orrs	r2, r1
 800a518:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 f850 	bl	800a5c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	68fa      	ldr	r2, [r7, #12]
 800a526:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2220      	movs	r2, #32
 800a52c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2200      	movs	r2, #0
 800a534:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a538:	2300      	movs	r3, #0
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3710      	adds	r7, #16
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}

0800a542 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a542:	b580      	push	{r7, lr}
 800a544:	b084      	sub	sp, #16
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
 800a54a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a552:	2b01      	cmp	r3, #1
 800a554:	d101      	bne.n	800a55a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a556:	2302      	movs	r3, #2
 800a558:	e02d      	b.n	800a5b6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2201      	movs	r2, #1
 800a55e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2224      	movs	r2, #36	; 0x24
 800a566:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f022 0201 	bic.w	r2, r2, #1
 800a580:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	683a      	ldr	r2, [r7, #0]
 800a592:	430a      	orrs	r2, r1
 800a594:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f000 f812 	bl	800a5c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	68fa      	ldr	r2, [r7, #12]
 800a5a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2220      	movs	r2, #32
 800a5a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a5b4:	2300      	movs	r3, #0
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3710      	adds	r7, #16
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
	...

0800a5c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b085      	sub	sp, #20
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d108      	bne.n	800a5e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a5e0:	e031      	b.n	800a646 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a5e2:	2310      	movs	r3, #16
 800a5e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a5e6:	2310      	movs	r3, #16
 800a5e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	689b      	ldr	r3, [r3, #8]
 800a5f0:	0e5b      	lsrs	r3, r3, #25
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	f003 0307 	and.w	r3, r3, #7
 800a5f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	0f5b      	lsrs	r3, r3, #29
 800a602:	b2db      	uxtb	r3, r3
 800a604:	f003 0307 	and.w	r3, r3, #7
 800a608:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a60a:	7bbb      	ldrb	r3, [r7, #14]
 800a60c:	7b3a      	ldrb	r2, [r7, #12]
 800a60e:	4911      	ldr	r1, [pc, #68]	; (800a654 <UARTEx_SetNbDataToProcess+0x94>)
 800a610:	5c8a      	ldrb	r2, [r1, r2]
 800a612:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a616:	7b3a      	ldrb	r2, [r7, #12]
 800a618:	490f      	ldr	r1, [pc, #60]	; (800a658 <UARTEx_SetNbDataToProcess+0x98>)
 800a61a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a61c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a620:	b29a      	uxth	r2, r3
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a628:	7bfb      	ldrb	r3, [r7, #15]
 800a62a:	7b7a      	ldrb	r2, [r7, #13]
 800a62c:	4909      	ldr	r1, [pc, #36]	; (800a654 <UARTEx_SetNbDataToProcess+0x94>)
 800a62e:	5c8a      	ldrb	r2, [r1, r2]
 800a630:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a634:	7b7a      	ldrb	r2, [r7, #13]
 800a636:	4908      	ldr	r1, [pc, #32]	; (800a658 <UARTEx_SetNbDataToProcess+0x98>)
 800a638:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a63a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a63e:	b29a      	uxth	r2, r3
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a646:	bf00      	nop
 800a648:	3714      	adds	r7, #20
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr
 800a652:	bf00      	nop
 800a654:	0800f4b0 	.word	0x0800f4b0
 800a658:	0800f4b8 	.word	0x0800f4b8

0800a65c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d121      	bne.n	800a6b2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	4b27      	ldr	r3, [pc, #156]	; (800a710 <FMC_SDRAM_Init+0xb4>)
 800a674:	4013      	ands	r3, r2
 800a676:	683a      	ldr	r2, [r7, #0]
 800a678:	6851      	ldr	r1, [r2, #4]
 800a67a:	683a      	ldr	r2, [r7, #0]
 800a67c:	6892      	ldr	r2, [r2, #8]
 800a67e:	4311      	orrs	r1, r2
 800a680:	683a      	ldr	r2, [r7, #0]
 800a682:	68d2      	ldr	r2, [r2, #12]
 800a684:	4311      	orrs	r1, r2
 800a686:	683a      	ldr	r2, [r7, #0]
 800a688:	6912      	ldr	r2, [r2, #16]
 800a68a:	4311      	orrs	r1, r2
 800a68c:	683a      	ldr	r2, [r7, #0]
 800a68e:	6952      	ldr	r2, [r2, #20]
 800a690:	4311      	orrs	r1, r2
 800a692:	683a      	ldr	r2, [r7, #0]
 800a694:	6992      	ldr	r2, [r2, #24]
 800a696:	4311      	orrs	r1, r2
 800a698:	683a      	ldr	r2, [r7, #0]
 800a69a:	69d2      	ldr	r2, [r2, #28]
 800a69c:	4311      	orrs	r1, r2
 800a69e:	683a      	ldr	r2, [r7, #0]
 800a6a0:	6a12      	ldr	r2, [r2, #32]
 800a6a2:	4311      	orrs	r1, r2
 800a6a4:	683a      	ldr	r2, [r7, #0]
 800a6a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a6a8:	430a      	orrs	r2, r1
 800a6aa:	431a      	orrs	r2, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	601a      	str	r2, [r3, #0]
 800a6b0:	e026      	b.n	800a700 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	69d9      	ldr	r1, [r3, #28]
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	6a1b      	ldr	r3, [r3, #32]
 800a6c2:	4319      	orrs	r1, r3
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c8:	430b      	orrs	r3, r1
 800a6ca:	431a      	orrs	r2, r3
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	685a      	ldr	r2, [r3, #4]
 800a6d4:	4b0e      	ldr	r3, [pc, #56]	; (800a710 <FMC_SDRAM_Init+0xb4>)
 800a6d6:	4013      	ands	r3, r2
 800a6d8:	683a      	ldr	r2, [r7, #0]
 800a6da:	6851      	ldr	r1, [r2, #4]
 800a6dc:	683a      	ldr	r2, [r7, #0]
 800a6de:	6892      	ldr	r2, [r2, #8]
 800a6e0:	4311      	orrs	r1, r2
 800a6e2:	683a      	ldr	r2, [r7, #0]
 800a6e4:	68d2      	ldr	r2, [r2, #12]
 800a6e6:	4311      	orrs	r1, r2
 800a6e8:	683a      	ldr	r2, [r7, #0]
 800a6ea:	6912      	ldr	r2, [r2, #16]
 800a6ec:	4311      	orrs	r1, r2
 800a6ee:	683a      	ldr	r2, [r7, #0]
 800a6f0:	6952      	ldr	r2, [r2, #20]
 800a6f2:	4311      	orrs	r1, r2
 800a6f4:	683a      	ldr	r2, [r7, #0]
 800a6f6:	6992      	ldr	r2, [r2, #24]
 800a6f8:	430a      	orrs	r2, r1
 800a6fa:	431a      	orrs	r2, r3
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a700:	2300      	movs	r3, #0
}
 800a702:	4618      	mov	r0, r3
 800a704:	370c      	adds	r7, #12
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr
 800a70e:	bf00      	nop
 800a710:	ffff8000 	.word	0xffff8000

0800a714 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a714:	b480      	push	{r7}
 800a716:	b085      	sub	sp, #20
 800a718:	af00      	add	r7, sp, #0
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	60b9      	str	r1, [r7, #8]
 800a71e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d128      	bne.n	800a778 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	689b      	ldr	r3, [r3, #8]
 800a72a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	1e59      	subs	r1, r3, #1
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	3b01      	subs	r3, #1
 800a73a:	011b      	lsls	r3, r3, #4
 800a73c:	4319      	orrs	r1, r3
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	689b      	ldr	r3, [r3, #8]
 800a742:	3b01      	subs	r3, #1
 800a744:	021b      	lsls	r3, r3, #8
 800a746:	4319      	orrs	r1, r3
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	68db      	ldr	r3, [r3, #12]
 800a74c:	3b01      	subs	r3, #1
 800a74e:	031b      	lsls	r3, r3, #12
 800a750:	4319      	orrs	r1, r3
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	691b      	ldr	r3, [r3, #16]
 800a756:	3b01      	subs	r3, #1
 800a758:	041b      	lsls	r3, r3, #16
 800a75a:	4319      	orrs	r1, r3
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	695b      	ldr	r3, [r3, #20]
 800a760:	3b01      	subs	r3, #1
 800a762:	051b      	lsls	r3, r3, #20
 800a764:	4319      	orrs	r1, r3
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	699b      	ldr	r3, [r3, #24]
 800a76a:	3b01      	subs	r3, #1
 800a76c:	061b      	lsls	r3, r3, #24
 800a76e:	430b      	orrs	r3, r1
 800a770:	431a      	orrs	r2, r3
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	609a      	str	r2, [r3, #8]
 800a776:	e02d      	b.n	800a7d4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	689a      	ldr	r2, [r3, #8]
 800a77c:	4b19      	ldr	r3, [pc, #100]	; (800a7e4 <FMC_SDRAM_Timing_Init+0xd0>)
 800a77e:	4013      	ands	r3, r2
 800a780:	68ba      	ldr	r2, [r7, #8]
 800a782:	68d2      	ldr	r2, [r2, #12]
 800a784:	3a01      	subs	r2, #1
 800a786:	0311      	lsls	r1, r2, #12
 800a788:	68ba      	ldr	r2, [r7, #8]
 800a78a:	6952      	ldr	r2, [r2, #20]
 800a78c:	3a01      	subs	r2, #1
 800a78e:	0512      	lsls	r2, r2, #20
 800a790:	430a      	orrs	r2, r1
 800a792:	431a      	orrs	r2, r3
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	1e59      	subs	r1, r3, #1
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	3b01      	subs	r3, #1
 800a7ac:	011b      	lsls	r3, r3, #4
 800a7ae:	4319      	orrs	r1, r3
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	3b01      	subs	r3, #1
 800a7b6:	021b      	lsls	r3, r3, #8
 800a7b8:	4319      	orrs	r1, r3
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	691b      	ldr	r3, [r3, #16]
 800a7be:	3b01      	subs	r3, #1
 800a7c0:	041b      	lsls	r3, r3, #16
 800a7c2:	4319      	orrs	r1, r3
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	699b      	ldr	r3, [r3, #24]
 800a7c8:	3b01      	subs	r3, #1
 800a7ca:	061b      	lsls	r3, r3, #24
 800a7cc:	430b      	orrs	r3, r1
 800a7ce:	431a      	orrs	r2, r3
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800a7d4:	2300      	movs	r3, #0
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3714      	adds	r7, #20
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e0:	4770      	bx	lr
 800a7e2:	bf00      	nop
 800a7e4:	ff0f0fff 	.word	0xff0f0fff

0800a7e8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b085      	sub	sp, #20
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	60f8      	str	r0, [r7, #12]
 800a7f0:	60b9      	str	r1, [r7, #8]
 800a7f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	691a      	ldr	r2, [r3, #16]
 800a7f8:	4b0c      	ldr	r3, [pc, #48]	; (800a82c <FMC_SDRAM_SendCommand+0x44>)
 800a7fa:	4013      	ands	r3, r2
 800a7fc:	68ba      	ldr	r2, [r7, #8]
 800a7fe:	6811      	ldr	r1, [r2, #0]
 800a800:	68ba      	ldr	r2, [r7, #8]
 800a802:	6852      	ldr	r2, [r2, #4]
 800a804:	4311      	orrs	r1, r2
 800a806:	68ba      	ldr	r2, [r7, #8]
 800a808:	6892      	ldr	r2, [r2, #8]
 800a80a:	3a01      	subs	r2, #1
 800a80c:	0152      	lsls	r2, r2, #5
 800a80e:	4311      	orrs	r1, r2
 800a810:	68ba      	ldr	r2, [r7, #8]
 800a812:	68d2      	ldr	r2, [r2, #12]
 800a814:	0252      	lsls	r2, r2, #9
 800a816:	430a      	orrs	r2, r1
 800a818:	431a      	orrs	r2, r3
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800a81e:	2300      	movs	r3, #0
}
 800a820:	4618      	mov	r0, r3
 800a822:	3714      	adds	r7, #20
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr
 800a82c:	ffc00000 	.word	0xffc00000

0800a830 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a830:	b480      	push	{r7}
 800a832:	b083      	sub	sp, #12
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	695a      	ldr	r2, [r3, #20]
 800a83e:	4b07      	ldr	r3, [pc, #28]	; (800a85c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800a840:	4013      	ands	r3, r2
 800a842:	683a      	ldr	r2, [r7, #0]
 800a844:	0052      	lsls	r2, r2, #1
 800a846:	431a      	orrs	r2, r3
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a84c:	2300      	movs	r3, #0
}
 800a84e:	4618      	mov	r0, r3
 800a850:	370c      	adds	r7, #12
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	ffffc001 	.word	0xffffc001

0800a860 <spi_flash_read_picture>:

}

//读取一张图片
void spi_flash_read_picture(uint16_t* p_Buffer,uint32_t Read_Addr)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b084      	sub	sp, #16
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]
	uint32_t i;
	for(i=0;i<300;i=i+1) //一张图片300页
 800a86a:	2300      	movs	r3, #0
 800a86c:	60fb      	str	r3, [r7, #12]
 800a86e:	e012      	b.n	800a896 <spi_flash_read_picture+0x36>
	{
		W25QXX_Read((uint8_t*)p_Buffer+i*4096,Read_Addr+4096*i,4096);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	031b      	lsls	r3, r3, #12
 800a874:	687a      	ldr	r2, [r7, #4]
 800a876:	18d0      	adds	r0, r2, r3
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	031a      	lsls	r2, r3, #12
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	4413      	add	r3, r2
 800a880:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a884:	4619      	mov	r1, r3
 800a886:	f000 fa55 	bl	800ad34 <W25QXX_Read>
		HAL_Delay(1);
 800a88a:	2001      	movs	r0, #1
 800a88c:	f7f7 fa7e 	bl	8001d8c <HAL_Delay>
	for(i=0;i<300;i=i+1) //一张图片300页
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	3301      	adds	r3, #1
 800a894:	60fb      	str	r3, [r7, #12]
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a89c:	d3e8      	bcc.n	800a870 <spi_flash_read_picture+0x10>
	}

}
 800a89e:	bf00      	nop
 800a8a0:	bf00      	nop
 800a8a2:	3710      	adds	r7, #16
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <test_picture_show>:
//		}
}


void test_picture_show(void)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af02      	add	r7, sp, #8

		spi_flash_read_picture(picture_rd,PICTURE_1_ADDR);
 800a8ae:	2100      	movs	r1, #0
 800a8b0:	4832      	ldr	r0, [pc, #200]	; (800a97c <test_picture_show+0xd4>)
 800a8b2:	f7ff ffd5 	bl	800a860 <spi_flash_read_picture>
		HAL_DMA2D_Start_IT(&hdma2d,(uint32_t)picture_rd,(uint32_t)0xc0000000,1024,600);
 800a8b6:	4931      	ldr	r1, [pc, #196]	; (800a97c <test_picture_show+0xd4>)
 800a8b8:	f44f 7316 	mov.w	r3, #600	; 0x258
 800a8bc:	9300      	str	r3, [sp, #0]
 800a8be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8c2:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800a8c6:	482e      	ldr	r0, [pc, #184]	; (800a980 <test_picture_show+0xd8>)
 800a8c8:	f7f8 f968 	bl	8002b9c <HAL_DMA2D_Start_IT>
        HAL_Delay(1000);
 800a8cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a8d0:	f7f7 fa5c 	bl	8001d8c <HAL_Delay>

		spi_flash_read_picture(picture_rd,PICTURE_2_ADDR);
 800a8d4:	f44f 1196 	mov.w	r1, #1228800	; 0x12c000
 800a8d8:	4828      	ldr	r0, [pc, #160]	; (800a97c <test_picture_show+0xd4>)
 800a8da:	f7ff ffc1 	bl	800a860 <spi_flash_read_picture>
		HAL_DMA2D_Start_IT(&hdma2d,(uint32_t)picture_rd,(uint32_t)0xc0000000,1024,600);
 800a8de:	4927      	ldr	r1, [pc, #156]	; (800a97c <test_picture_show+0xd4>)
 800a8e0:	f44f 7316 	mov.w	r3, #600	; 0x258
 800a8e4:	9300      	str	r3, [sp, #0]
 800a8e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8ea:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800a8ee:	4824      	ldr	r0, [pc, #144]	; (800a980 <test_picture_show+0xd8>)
 800a8f0:	f7f8 f954 	bl	8002b9c <HAL_DMA2D_Start_IT>
		HAL_Delay(1000);
 800a8f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a8f8:	f7f7 fa48 	bl	8001d8c <HAL_Delay>

		spi_flash_read_picture(picture_rd,PICTURE_3_ADDR);
 800a8fc:	f44f 1116 	mov.w	r1, #2457600	; 0x258000
 800a900:	481e      	ldr	r0, [pc, #120]	; (800a97c <test_picture_show+0xd4>)
 800a902:	f7ff ffad 	bl	800a860 <spi_flash_read_picture>
		HAL_DMA2D_Start_IT(&hdma2d,(uint32_t)picture_rd,(uint32_t)0xc0000000,1024,600);
 800a906:	491d      	ldr	r1, [pc, #116]	; (800a97c <test_picture_show+0xd4>)
 800a908:	f44f 7316 	mov.w	r3, #600	; 0x258
 800a90c:	9300      	str	r3, [sp, #0]
 800a90e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a912:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800a916:	481a      	ldr	r0, [pc, #104]	; (800a980 <test_picture_show+0xd8>)
 800a918:	f7f8 f940 	bl	8002b9c <HAL_DMA2D_Start_IT>
		HAL_Delay(1000);
 800a91c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a920:	f7f7 fa34 	bl	8001d8c <HAL_Delay>

		spi_flash_read_picture(picture_rd,PICTURE_4_ADDR);
 800a924:	f44f 1161 	mov.w	r1, #3686400	; 0x384000
 800a928:	4814      	ldr	r0, [pc, #80]	; (800a97c <test_picture_show+0xd4>)
 800a92a:	f7ff ff99 	bl	800a860 <spi_flash_read_picture>
		HAL_DMA2D_Start_IT(&hdma2d,(uint32_t)picture_rd,(uint32_t)0xc0000000,1024,600);
 800a92e:	4913      	ldr	r1, [pc, #76]	; (800a97c <test_picture_show+0xd4>)
 800a930:	f44f 7316 	mov.w	r3, #600	; 0x258
 800a934:	9300      	str	r3, [sp, #0]
 800a936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a93a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800a93e:	4810      	ldr	r0, [pc, #64]	; (800a980 <test_picture_show+0xd8>)
 800a940:	f7f8 f92c 	bl	8002b9c <HAL_DMA2D_Start_IT>
		HAL_Delay(1000);
 800a944:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a948:	f7f7 fa20 	bl	8001d8c <HAL_Delay>

		spi_flash_read_picture(picture_rd,PICTURE_5_ADDR);
 800a94c:	f44f 0196 	mov.w	r1, #4915200	; 0x4b0000
 800a950:	480a      	ldr	r0, [pc, #40]	; (800a97c <test_picture_show+0xd4>)
 800a952:	f7ff ff85 	bl	800a860 <spi_flash_read_picture>
		HAL_DMA2D_Start_IT(&hdma2d,(uint32_t)picture_rd,(uint32_t)0xc0000000,1024,600);
 800a956:	4909      	ldr	r1, [pc, #36]	; (800a97c <test_picture_show+0xd4>)
 800a958:	f44f 7316 	mov.w	r3, #600	; 0x258
 800a95c:	9300      	str	r3, [sp, #0]
 800a95e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a962:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800a966:	4806      	ldr	r0, [pc, #24]	; (800a980 <test_picture_show+0xd8>)
 800a968:	f7f8 f918 	bl	8002b9c <HAL_DMA2D_Start_IT>
		HAL_Delay(1000);
 800a96c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a970:	f7f7 fa0c 	bl	8001d8c <HAL_Delay>

}
 800a974:	bf00      	nop
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop
 800a97c:	c0800000 	.word	0xc0800000
 800a980:	240001f4 	.word	0x240001f4

0800a984 <QSPI_Send_CMD>:
//	addressMode:地址模式; QSPI_ADDRESS_NONE,QSPI_ADDRESS_1_LINE,QSPI_ADDRESS_2_LINE,QSPI_ADDRESS_4_LINE
//	addressSize:地址长度;QSPI_ADDRESS_8_BITS,QSPI_ADDRESS_16_BITS,QSPI_ADDRESS_24_BITS,QSPI_ADDRESS_32_BITS
//	dataMode:数据模式; QSPI_DATA_NONE,QSPI_DATA_1_LINE,QSPI_DATA_2_LINE,QSPI_DATA_4_LINE

void QSPI_Send_CMD(uint32_t instruction,uint32_t address,uint32_t dummyCycles,uint32_t instructionMode,uint32_t addressMode,uint32_t addressSize,uint32_t dataMode)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b092      	sub	sp, #72	; 0x48
 800a988:	af00      	add	r7, sp, #0
 800a98a:	60f8      	str	r0, [r7, #12]
 800a98c:	60b9      	str	r1, [r7, #8]
 800a98e:	607a      	str	r2, [r7, #4]
 800a990:	603b      	str	r3, [r7, #0]
    QSPI_CommandTypeDef Cmdhandler;

    Cmdhandler.Instruction=instruction;                 	//指令
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	613b      	str	r3, [r7, #16]
    Cmdhandler.Address=address;                            	//地址
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	617b      	str	r3, [r7, #20]
    Cmdhandler.DummyCycles=dummyCycles;                     //设置空指令周期数
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	627b      	str	r3, [r7, #36]	; 0x24
    Cmdhandler.InstructionMode=instructionMode;				//指令模式
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	62bb      	str	r3, [r7, #40]	; 0x28
    Cmdhandler.AddressMode=addressMode;   					//地址模式
 800a9a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    Cmdhandler.AddressSize=addressSize;   					//地址长度
 800a9a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9a8:	61fb      	str	r3, [r7, #28]
    Cmdhandler.DataMode=dataMode;             				//数据模式
 800a9aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a9ac:	637b      	str	r3, [r7, #52]	; 0x34
    Cmdhandler.SIOOMode=QSPI_SIOO_INST_EVERY_CMD;       	//每次都发送指令
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	647b      	str	r3, [r7, #68]	; 0x44
    Cmdhandler.AlternateByteMode=QSPI_ALTERNATE_BYTES_NONE; //无交替字节
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	633b      	str	r3, [r7, #48]	; 0x30
    Cmdhandler.DdrMode=QSPI_DDR_MODE_DISABLE;           	//关闭DDR模式
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    Cmdhandler.DdrHoldHalfCycle=QSPI_DDR_HHC_ANALOG_DELAY;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	643b      	str	r3, [r7, #64]	; 0x40

    HAL_QSPI_Command(&hqspi,&Cmdhandler,5000);
 800a9be:	f107 0310 	add.w	r3, r7, #16
 800a9c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	4803      	ldr	r0, [pc, #12]	; (800a9d8 <QSPI_Send_CMD+0x54>)
 800a9ca:	f7f9 f961 	bl	8003c90 <HAL_QSPI_Command>
}
 800a9ce:	bf00      	nop
 800a9d0:	3748      	adds	r7, #72	; 0x48
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop
 800a9d8:	24000304 	.word	0x24000304

0800a9dc <QSPI_Receive>:
//buf:接收数据缓冲区首地址
//datalen:要传输的数据长度
//返回值:0,正常
//    其他,错误代码
uint8_t QSPI_Receive(uint8_t* buf,uint32_t datalen)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b082      	sub	sp, #8
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	6039      	str	r1, [r7, #0]
	hqspi.Instance->DLR=datalen-1;                           //配置数据长度
 800a9e6:	4b0a      	ldr	r3, [pc, #40]	; (800aa10 <QSPI_Receive+0x34>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	683a      	ldr	r2, [r7, #0]
 800a9ec:	3a01      	subs	r2, #1
 800a9ee:	611a      	str	r2, [r3, #16]
    if(HAL_QSPI_Receive(&hqspi,buf,5000)==HAL_OK) return 0;  //接收数据
 800a9f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9f4:	6879      	ldr	r1, [r7, #4]
 800a9f6:	4806      	ldr	r0, [pc, #24]	; (800aa10 <QSPI_Receive+0x34>)
 800a9f8:	f7f9 fa3a 	bl	8003e70 <HAL_QSPI_Receive>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d101      	bne.n	800aa06 <QSPI_Receive+0x2a>
 800aa02:	2300      	movs	r3, #0
 800aa04:	e000      	b.n	800aa08 <QSPI_Receive+0x2c>
    else return 1;
 800aa06:	2301      	movs	r3, #1
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3708      	adds	r7, #8
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}
 800aa10:	24000304 	.word	0x24000304

0800aa14 <QSPI_Transmit>:
//buf:发送数据缓冲区首地址
//datalen:要传输的数据长度
//返回值:0,正常
//    其他,错误代码
uint8_t QSPI_Transmit(uint8_t* buf,uint32_t datalen)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b082      	sub	sp, #8
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
	hqspi.Instance->DLR=datalen-1;                            //配置数据长度
 800aa1e:	4b0a      	ldr	r3, [pc, #40]	; (800aa48 <QSPI_Transmit+0x34>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	683a      	ldr	r2, [r7, #0]
 800aa24:	3a01      	subs	r2, #1
 800aa26:	611a      	str	r2, [r3, #16]
    if(HAL_QSPI_Transmit(&hqspi,buf,5000)==HAL_OK) return 0;  //发送数据
 800aa28:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa2c:	6879      	ldr	r1, [r7, #4]
 800aa2e:	4806      	ldr	r0, [pc, #24]	; (800aa48 <QSPI_Transmit+0x34>)
 800aa30:	f7f9 f98c 	bl	8003d4c <HAL_QSPI_Transmit>
 800aa34:	4603      	mov	r3, r0
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d101      	bne.n	800aa3e <QSPI_Transmit+0x2a>
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	e000      	b.n	800aa40 <QSPI_Transmit+0x2c>
    else return 1;
 800aa3e:	2301      	movs	r3, #1
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3708      	adds	r7, #8
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}
 800aa48:	24000304 	.word	0x24000304

0800aa4c <W25QXX_ReadSR>:
//BIT7      6    5    4   3   2   1   0
//HOLD/RST  DRV1 DRV0 (R) (R) WPS ADP ADS
//regno:状态寄存器号，范:1~3
//返回值:状态寄存器值
uint8_t W25QXX_ReadSR(uint8_t regno)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b088      	sub	sp, #32
 800aa50:	af04      	add	r7, sp, #16
 800aa52:	4603      	mov	r3, r0
 800aa54:	71fb      	strb	r3, [r7, #7]
	uint8_t byte=0,command=0;
 800aa56:	2300      	movs	r3, #0
 800aa58:	73bb      	strb	r3, [r7, #14]
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	73fb      	strb	r3, [r7, #15]
    switch(regno)
 800aa5e:	79fb      	ldrb	r3, [r7, #7]
 800aa60:	2b03      	cmp	r3, #3
 800aa62:	d00c      	beq.n	800aa7e <W25QXX_ReadSR+0x32>
 800aa64:	2b03      	cmp	r3, #3
 800aa66:	dc0d      	bgt.n	800aa84 <W25QXX_ReadSR+0x38>
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d002      	beq.n	800aa72 <W25QXX_ReadSR+0x26>
 800aa6c:	2b02      	cmp	r3, #2
 800aa6e:	d003      	beq.n	800aa78 <W25QXX_ReadSR+0x2c>
 800aa70:	e008      	b.n	800aa84 <W25QXX_ReadSR+0x38>
    {
        case 1:
            command=W25X_ReadStatusReg1;    //读状态寄存器1指令
 800aa72:	2305      	movs	r3, #5
 800aa74:	73fb      	strb	r3, [r7, #15]
            break;
 800aa76:	e008      	b.n	800aa8a <W25QXX_ReadSR+0x3e>
        case 2:
            command=W25X_ReadStatusReg2;    //读状态寄存器2指令
 800aa78:	2335      	movs	r3, #53	; 0x35
 800aa7a:	73fb      	strb	r3, [r7, #15]
            break;
 800aa7c:	e005      	b.n	800aa8a <W25QXX_ReadSR+0x3e>
        case 3:
            command=W25X_ReadStatusReg3;    //读状态寄存器3指令
 800aa7e:	2315      	movs	r3, #21
 800aa80:	73fb      	strb	r3, [r7, #15]
            break;
 800aa82:	e002      	b.n	800aa8a <W25QXX_ReadSR+0x3e>
        default:
            command=W25X_ReadStatusReg1;
 800aa84:	2305      	movs	r3, #5
 800aa86:	73fb      	strb	r3, [r7, #15]
            break;
 800aa88:	bf00      	nop
    }
	if(W25QXX_QPI_MODE)QSPI_Send_CMD(command,0,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_NONE,QSPI_ADDRESS_8_BITS,QSPI_DATA_4_LINES);	//QPI,写command指令,地址为0,4线传数据_8位地址_无地址_4线传输指令,无空周期,1个字节数据
 800aa8a:	4b16      	ldr	r3, [pc, #88]	; (800aae4 <W25QXX_ReadSR+0x98>)
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d00e      	beq.n	800aab0 <W25QXX_ReadSR+0x64>
 800aa92:	7bf8      	ldrb	r0, [r7, #15]
 800aa94:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800aa98:	9302      	str	r3, [sp, #8]
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	9301      	str	r3, [sp, #4]
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	9300      	str	r3, [sp, #0]
 800aaa2:	f44f 7340 	mov.w	r3, #768	; 0x300
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	2100      	movs	r1, #0
 800aaaa:	f7ff ff6b 	bl	800a984 <QSPI_Send_CMD>
 800aaae:	e00d      	b.n	800aacc <W25QXX_ReadSR+0x80>
	else QSPI_Send_CMD(command,0,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_NONE,QSPI_ADDRESS_8_BITS,QSPI_DATA_1_LINE);				//SPI,写command指令,地址为0,单线传数据_8位地址_无地址_单线传输指令,无空周期,1个字节数据
 800aab0:	7bf8      	ldrb	r0, [r7, #15]
 800aab2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aab6:	9302      	str	r3, [sp, #8]
 800aab8:	2300      	movs	r3, #0
 800aaba:	9301      	str	r3, [sp, #4]
 800aabc:	2300      	movs	r3, #0
 800aabe:	9300      	str	r3, [sp, #0]
 800aac0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aac4:	2200      	movs	r2, #0
 800aac6:	2100      	movs	r1, #0
 800aac8:	f7ff ff5c 	bl	800a984 <QSPI_Send_CMD>
	QSPI_Receive(&byte,1);
 800aacc:	f107 030e 	add.w	r3, r7, #14
 800aad0:	2101      	movs	r1, #1
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7ff ff82 	bl	800a9dc <QSPI_Receive>
	return byte;
 800aad8:	7bbb      	ldrb	r3, [r7, #14]
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3710      	adds	r7, #16
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop
 800aae4:	24000504 	.word	0x24000504

0800aae8 <W25QXX_Write_SR>:

//写W25QXX状态寄存器
void W25QXX_Write_SR(uint8_t regno,uint8_t sr)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b088      	sub	sp, #32
 800aaec:	af04      	add	r7, sp, #16
 800aaee:	4603      	mov	r3, r0
 800aaf0:	460a      	mov	r2, r1
 800aaf2:	71fb      	strb	r3, [r7, #7]
 800aaf4:	4613      	mov	r3, r2
 800aaf6:	71bb      	strb	r3, [r7, #6]
    uint8_t command=0;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	73fb      	strb	r3, [r7, #15]
    switch(regno)
 800aafc:	79fb      	ldrb	r3, [r7, #7]
 800aafe:	2b03      	cmp	r3, #3
 800ab00:	d00c      	beq.n	800ab1c <W25QXX_Write_SR+0x34>
 800ab02:	2b03      	cmp	r3, #3
 800ab04:	dc0d      	bgt.n	800ab22 <W25QXX_Write_SR+0x3a>
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	d002      	beq.n	800ab10 <W25QXX_Write_SR+0x28>
 800ab0a:	2b02      	cmp	r3, #2
 800ab0c:	d003      	beq.n	800ab16 <W25QXX_Write_SR+0x2e>
 800ab0e:	e008      	b.n	800ab22 <W25QXX_Write_SR+0x3a>
    {
        case 1:
            command=W25X_WriteStatusReg1;    //写状态寄存器1指令
 800ab10:	2301      	movs	r3, #1
 800ab12:	73fb      	strb	r3, [r7, #15]
            break;
 800ab14:	e008      	b.n	800ab28 <W25QXX_Write_SR+0x40>
        case 2:
            command=W25X_WriteStatusReg2;    //写状态寄存器2指令
 800ab16:	2331      	movs	r3, #49	; 0x31
 800ab18:	73fb      	strb	r3, [r7, #15]
            break;
 800ab1a:	e005      	b.n	800ab28 <W25QXX_Write_SR+0x40>
        case 3:
            command=W25X_WriteStatusReg3;    //写状态寄存器3指令
 800ab1c:	2311      	movs	r3, #17
 800ab1e:	73fb      	strb	r3, [r7, #15]
            break;
 800ab20:	e002      	b.n	800ab28 <W25QXX_Write_SR+0x40>
        default:
            command=W25X_WriteStatusReg1;
 800ab22:	2301      	movs	r3, #1
 800ab24:	73fb      	strb	r3, [r7, #15]
            break;
 800ab26:	bf00      	nop
    }
	if(W25QXX_QPI_MODE)QSPI_Send_CMD(command,0,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_NONE,QSPI_ADDRESS_8_BITS,QSPI_DATA_4_LINES);	//QPI,写command指令,地址为0,4线传数据_8位地址_无地址_4线传输指令,无空周期,1个字节数据
 800ab28:	4b14      	ldr	r3, [pc, #80]	; (800ab7c <W25QXX_Write_SR+0x94>)
 800ab2a:	781b      	ldrb	r3, [r3, #0]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d00e      	beq.n	800ab4e <W25QXX_Write_SR+0x66>
 800ab30:	7bf8      	ldrb	r0, [r7, #15]
 800ab32:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800ab36:	9302      	str	r3, [sp, #8]
 800ab38:	2300      	movs	r3, #0
 800ab3a:	9301      	str	r3, [sp, #4]
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	9300      	str	r3, [sp, #0]
 800ab40:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ab44:	2200      	movs	r2, #0
 800ab46:	2100      	movs	r1, #0
 800ab48:	f7ff ff1c 	bl	800a984 <QSPI_Send_CMD>
 800ab4c:	e00d      	b.n	800ab6a <W25QXX_Write_SR+0x82>
	else QSPI_Send_CMD(command,0,0, QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_NONE,QSPI_ADDRESS_8_BITS,QSPI_DATA_1_LINE);				//SPI,写command指令,地址为0,单线传数据_8位地址_无地址_单线传输指令,无空周期,1个字节数据
 800ab4e:	7bf8      	ldrb	r0, [r7, #15]
 800ab50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ab54:	9302      	str	r3, [sp, #8]
 800ab56:	2300      	movs	r3, #0
 800ab58:	9301      	str	r3, [sp, #4]
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	9300      	str	r3, [sp, #0]
 800ab5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab62:	2200      	movs	r2, #0
 800ab64:	2100      	movs	r1, #0
 800ab66:	f7ff ff0d 	bl	800a984 <QSPI_Send_CMD>
	QSPI_Transmit(&sr,1);
 800ab6a:	1dbb      	adds	r3, r7, #6
 800ab6c:	2101      	movs	r1, #1
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7ff ff50 	bl	800aa14 <QSPI_Transmit>
}
 800ab74:	bf00      	nop
 800ab76:	3710      	adds	r7, #16
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}
 800ab7c:	24000504 	.word	0x24000504

0800ab80 <W25QXX_Qspi_Enable>:

//W25QXX进入QSPI模式
void W25QXX_Qspi_Enable(void)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b086      	sub	sp, #24
 800ab84:	af04      	add	r7, sp, #16
	uint8_t stareg2;
	stareg2=W25QXX_ReadSR(2);		//先读出状态寄存器2的原始值
 800ab86:	2002      	movs	r0, #2
 800ab88:	f7ff ff60 	bl	800aa4c <W25QXX_ReadSR>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	71fb      	strb	r3, [r7, #7]
	if((stareg2&0X02)==0)			//QE位未使能
 800ab90:	79fb      	ldrb	r3, [r7, #7]
 800ab92:	f003 0302 	and.w	r3, r3, #2
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d10a      	bne.n	800abb0 <W25QXX_Qspi_Enable+0x30>
	{
		W25QXX_Write_Enable();		//写使能
 800ab9a:	f000 f81f 	bl	800abdc <W25QXX_Write_Enable>
		stareg2|=1<<1;				//使能QE位
 800ab9e:	79fb      	ldrb	r3, [r7, #7]
 800aba0:	f043 0302 	orr.w	r3, r3, #2
 800aba4:	71fb      	strb	r3, [r7, #7]
		W25QXX_Write_SR(2,stareg2);	//写状态寄存器2
 800aba6:	79fb      	ldrb	r3, [r7, #7]
 800aba8:	4619      	mov	r1, r3
 800abaa:	2002      	movs	r0, #2
 800abac:	f7ff ff9c 	bl	800aae8 <W25QXX_Write_SR>
	}
	QSPI_Send_CMD(W25X_EnterQPIMode,0,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_NONE,QSPI_ADDRESS_8_BITS,QSPI_DATA_NONE);//写command指令,地址为0,无数据_8位地址_无地址_单线传输指令,无空周期,0个字节数据
 800abb0:	2300      	movs	r3, #0
 800abb2:	9302      	str	r3, [sp, #8]
 800abb4:	2300      	movs	r3, #0
 800abb6:	9301      	str	r3, [sp, #4]
 800abb8:	2300      	movs	r3, #0
 800abba:	9300      	str	r3, [sp, #0]
 800abbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abc0:	2200      	movs	r2, #0
 800abc2:	2100      	movs	r1, #0
 800abc4:	2038      	movs	r0, #56	; 0x38
 800abc6:	f7ff fedd 	bl	800a984 <QSPI_Send_CMD>
	W25QXX_QPI_MODE=1;				//标记QSPI模式
 800abca:	4b03      	ldr	r3, [pc, #12]	; (800abd8 <W25QXX_Qspi_Enable+0x58>)
 800abcc:	2201      	movs	r2, #1
 800abce:	701a      	strb	r2, [r3, #0]
}
 800abd0:	bf00      	nop
 800abd2:	3708      	adds	r7, #8
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}
 800abd8:	24000504 	.word	0x24000504

0800abdc <W25QXX_Write_Enable>:

//W25QXX写使能
//将S1寄存器的WEL置位
void W25QXX_Write_Enable(void)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b084      	sub	sp, #16
 800abe0:	af04      	add	r7, sp, #16
	if(W25QXX_QPI_MODE)QSPI_Send_CMD(W25X_WriteEnable,0,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_NONE,QSPI_ADDRESS_8_BITS,QSPI_DATA_NONE);	//QPI,写使能指令,地址为0,无数据_8位地址_无地址_4线传输指令,无空周期,0个字节数据
 800abe2:	4b11      	ldr	r3, [pc, #68]	; (800ac28 <W25QXX_Write_Enable+0x4c>)
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d00d      	beq.n	800ac06 <W25QXX_Write_Enable+0x2a>
 800abea:	2300      	movs	r3, #0
 800abec:	9302      	str	r3, [sp, #8]
 800abee:	2300      	movs	r3, #0
 800abf0:	9301      	str	r3, [sp, #4]
 800abf2:	2300      	movs	r3, #0
 800abf4:	9300      	str	r3, [sp, #0]
 800abf6:	f44f 7340 	mov.w	r3, #768	; 0x300
 800abfa:	2200      	movs	r2, #0
 800abfc:	2100      	movs	r1, #0
 800abfe:	2006      	movs	r0, #6
 800ac00:	f7ff fec0 	bl	800a984 <QSPI_Send_CMD>
	else QSPI_Send_CMD(W25X_WriteEnable,0,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_NONE,QSPI_ADDRESS_8_BITS,QSPI_DATA_NONE);				//SPI,写使能指令,地址为0,无数据_8位地址_无地址_单线传输指令,无空周期,0个字节数据
}
 800ac04:	e00c      	b.n	800ac20 <W25QXX_Write_Enable+0x44>
	else QSPI_Send_CMD(W25X_WriteEnable,0,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_NONE,QSPI_ADDRESS_8_BITS,QSPI_DATA_NONE);				//SPI,写使能指令,地址为0,无数据_8位地址_无地址_单线传输指令,无空周期,0个字节数据
 800ac06:	2300      	movs	r3, #0
 800ac08:	9302      	str	r3, [sp, #8]
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	9301      	str	r3, [sp, #4]
 800ac0e:	2300      	movs	r3, #0
 800ac10:	9300      	str	r3, [sp, #0]
 800ac12:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac16:	2200      	movs	r2, #0
 800ac18:	2100      	movs	r1, #0
 800ac1a:	2006      	movs	r0, #6
 800ac1c:	f7ff feb2 	bl	800a984 <QSPI_Send_CMD>
}
 800ac20:	bf00      	nop
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop
 800ac28:	24000504 	.word	0x24000504

0800ac2c <W25QXX_ReadID>:
//0XEF15,表示芯片型号为W25Q32
//0XEF16,表示芯片型号为W25Q64
//0XEF17,表示芯片型号为W25Q128
//0XEF18,表示芯片型号为W25Q256
uint16_t W25QXX_ReadID(void)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b086      	sub	sp, #24
 800ac30:	af04      	add	r7, sp, #16
	uint8_t temp[2];
	uint16_t deviceid;
	if(W25QXX_QPI_MODE)QSPI_Send_CMD(W25X_ManufactDeviceID,0,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_4_LINES,QSPI_ADDRESS_24_BITS,QSPI_DATA_4_LINES);//QPI,读id,地址为0,4线传输数据_24位地址_4线传输地址_4线传输指令,无空周期,2个字节数据
 800ac32:	4b1b      	ldr	r3, [pc, #108]	; (800aca0 <W25QXX_ReadID+0x74>)
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d010      	beq.n	800ac5c <W25QXX_ReadID+0x30>
 800ac3a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800ac3e:	9302      	str	r3, [sp, #8]
 800ac40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ac44:	9301      	str	r3, [sp, #4]
 800ac46:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ac4a:	9300      	str	r3, [sp, #0]
 800ac4c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ac50:	2200      	movs	r2, #0
 800ac52:	2100      	movs	r1, #0
 800ac54:	2090      	movs	r0, #144	; 0x90
 800ac56:	f7ff fe95 	bl	800a984 <QSPI_Send_CMD>
 800ac5a:	e00f      	b.n	800ac7c <W25QXX_ReadID+0x50>
	else QSPI_Send_CMD(W25X_ManufactDeviceID,0,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_1_LINE,QSPI_ADDRESS_24_BITS,QSPI_DATA_1_LINE);			//SPI,读id,地址为0,单线传输数据_24位地址_单线传输地址_单线传输指令,无空周期,2个字节数据
 800ac5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ac60:	9302      	str	r3, [sp, #8]
 800ac62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ac66:	9301      	str	r3, [sp, #4]
 800ac68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac6c:	9300      	str	r3, [sp, #0]
 800ac6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac72:	2200      	movs	r2, #0
 800ac74:	2100      	movs	r1, #0
 800ac76:	2090      	movs	r0, #144	; 0x90
 800ac78:	f7ff fe84 	bl	800a984 <QSPI_Send_CMD>
	QSPI_Receive(temp,2);
 800ac7c:	1d3b      	adds	r3, r7, #4
 800ac7e:	2102      	movs	r1, #2
 800ac80:	4618      	mov	r0, r3
 800ac82:	f7ff feab 	bl	800a9dc <QSPI_Receive>
	deviceid=(temp[0]<<8)|temp[1];
 800ac86:	793b      	ldrb	r3, [r7, #4]
 800ac88:	021b      	lsls	r3, r3, #8
 800ac8a:	b21a      	sxth	r2, r3
 800ac8c:	797b      	ldrb	r3, [r7, #5]
 800ac8e:	b21b      	sxth	r3, r3
 800ac90:	4313      	orrs	r3, r2
 800ac92:	b21b      	sxth	r3, r3
 800ac94:	80fb      	strh	r3, [r7, #6]
	return deviceid;
 800ac96:	88fb      	ldrh	r3, [r7, #6]
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3708      	adds	r7, #8
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}
 800aca0:	24000504 	.word	0x24000504

0800aca4 <W25QXX_Init>:

//初始化SPI FLASH的IO口
void W25QXX_Init(void)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b086      	sub	sp, #24
 800aca8:	af04      	add	r7, sp, #16
    uint8_t temp;
//	QSPI_Init();					//初始化QSPI
 	W25QXX_Qspi_Enable();			//使能QSPI模式
 800acaa:	f7ff ff69 	bl	800ab80 <W25QXX_Qspi_Enable>
	W25QXX_TYPE=W25QXX_ReadID();	//读取FLASH ID.
 800acae:	f7ff ffbd 	bl	800ac2c <W25QXX_ReadID>
 800acb2:	4603      	mov	r3, r0
 800acb4:	461a      	mov	r2, r3
 800acb6:	4b1e      	ldr	r3, [pc, #120]	; (800ad30 <W25QXX_Init+0x8c>)
 800acb8:	801a      	strh	r2, [r3, #0]
//	printf("ID:%x\r\n",W25QXX_TYPE);
	if(W25QXX_TYPE==W25Q256)        //SPI FLASH为W25Q256
 800acba:	4b1d      	ldr	r3, [pc, #116]	; (800ad30 <W25QXX_Init+0x8c>)
 800acbc:	881b      	ldrh	r3, [r3, #0]
 800acbe:	f64e 7218 	movw	r2, #61208	; 0xef18
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d12f      	bne.n	800ad26 <W25QXX_Init+0x82>
    {
        temp=W25QXX_ReadSR(3);      //读取状态寄存器3，判断地址模式
 800acc6:	2003      	movs	r0, #3
 800acc8:	f7ff fec0 	bl	800aa4c <W25QXX_ReadSR>
 800accc:	4603      	mov	r3, r0
 800acce:	71fb      	strb	r3, [r7, #7]
        if((temp&0X01)==0)			//如果不是4字节地址模式,则进入4字节地址模式
 800acd0:	79fb      	ldrb	r3, [r7, #7]
 800acd2:	f003 0301 	and.w	r3, r3, #1
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d10e      	bne.n	800acf8 <W25QXX_Init+0x54>
		{
			W25QXX_Write_Enable();	//写使能
 800acda:	f7ff ff7f 	bl	800abdc <W25QXX_Write_Enable>
			QSPI_Send_CMD(W25X_Enable4ByteAddr,0,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_NONE,QSPI_ADDRESS_8_BITS,QSPI_DATA_NONE);//QPI,使能4字节地址指令,地址为0,无数据_8位地址_无地址_4线传输指令,无空周期,0个字节数据
 800acde:	2300      	movs	r3, #0
 800ace0:	9302      	str	r3, [sp, #8]
 800ace2:	2300      	movs	r3, #0
 800ace4:	9301      	str	r3, [sp, #4]
 800ace6:	2300      	movs	r3, #0
 800ace8:	9300      	str	r3, [sp, #0]
 800acea:	f44f 7340 	mov.w	r3, #768	; 0x300
 800acee:	2200      	movs	r2, #0
 800acf0:	2100      	movs	r1, #0
 800acf2:	20b7      	movs	r0, #183	; 0xb7
 800acf4:	f7ff fe46 	bl	800a984 <QSPI_Send_CMD>
		}
		W25QXX_Write_Enable();		//写使能
 800acf8:	f7ff ff70 	bl	800abdc <W25QXX_Write_Enable>
		QSPI_Send_CMD(W25X_SetReadParam,0,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_NONE,QSPI_ADDRESS_8_BITS,QSPI_DATA_4_LINES); 		//QPI,设置读参数指令,地址为0,4线传数据_8位地址_无地址_4线传输指令,无空周期,1个字节数据
 800acfc:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800ad00:	9302      	str	r3, [sp, #8]
 800ad02:	2300      	movs	r3, #0
 800ad04:	9301      	str	r3, [sp, #4]
 800ad06:	2300      	movs	r3, #0
 800ad08:	9300      	str	r3, [sp, #0]
 800ad0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ad0e:	2200      	movs	r2, #0
 800ad10:	2100      	movs	r1, #0
 800ad12:	20c0      	movs	r0, #192	; 0xc0
 800ad14:	f7ff fe36 	bl	800a984 <QSPI_Send_CMD>
		temp=3<<4;					//设置P4&P5=11,8个dummy clocks,104M
 800ad18:	2330      	movs	r3, #48	; 0x30
 800ad1a:	71fb      	strb	r3, [r7, #7]
		QSPI_Transmit(&temp,1);		//发送1个字节
 800ad1c:	1dfb      	adds	r3, r7, #7
 800ad1e:	2101      	movs	r1, #1
 800ad20:	4618      	mov	r0, r3
 800ad22:	f7ff fe77 	bl	800aa14 <QSPI_Transmit>
    }
}
 800ad26:	bf00      	nop
 800ad28:	3708      	adds	r7, #8
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	2400000e 	.word	0x2400000e

0800ad34 <W25QXX_Read>:
//在指定地址开始读取指定长度的数据
//pBuffer:数据存储区
//ReadAddr:开始读取的地址(最大32bit)
//NumByteToRead:要读取的字节数(最大65535)
void W25QXX_Read(uint8_t* pBuffer,uint32_t ReadAddr,uint16_t NumByteToRead)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b088      	sub	sp, #32
 800ad38:	af04      	add	r7, sp, #16
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	4613      	mov	r3, r2
 800ad40:	80fb      	strh	r3, [r7, #6]
	QSPI_Send_CMD(W25X_FastReadData,ReadAddr,8,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_4_LINES,QSPI_ADDRESS_32_BITS,QSPI_DATA_4_LINES);	//QPI,快速读数据,地址为ReadAddr,4线传输数据_32位地址_4线传输地址_4线传输指令,8空周期,NumByteToRead个数据
 800ad42:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800ad46:	9302      	str	r3, [sp, #8]
 800ad48:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800ad4c:	9301      	str	r3, [sp, #4]
 800ad4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ad52:	9300      	str	r3, [sp, #0]
 800ad54:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ad58:	2208      	movs	r2, #8
 800ad5a:	68b9      	ldr	r1, [r7, #8]
 800ad5c:	200b      	movs	r0, #11
 800ad5e:	f7ff fe11 	bl	800a984 <QSPI_Send_CMD>
	QSPI_Receive(pBuffer,NumByteToRead);
 800ad62:	88fb      	ldrh	r3, [r7, #6]
 800ad64:	4619      	mov	r1, r3
 800ad66:	68f8      	ldr	r0, [r7, #12]
 800ad68:	f7ff fe38 	bl	800a9dc <QSPI_Receive>
}
 800ad6c:	bf00      	nop
 800ad6e:	3710      	adds	r7, #16
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <SDRAM_SendCommand>:




static int SDRAM_SendCommand(uint32_t CommandMode, uint32_t Bank, uint32_t RefreshNum, uint32_t RegVal)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b08a      	sub	sp, #40	; 0x28
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	60f8      	str	r0, [r7, #12]
 800ad7c:	60b9      	str	r1, [r7, #8]
 800ad7e:	607a      	str	r2, [r7, #4]
 800ad80:	603b      	str	r3, [r7, #0]
    uint32_t CommandTarget;
    FMC_SDRAM_CommandTypeDef Command;

    if (Bank == 1) {
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	d102      	bne.n	800ad8e <SDRAM_SendCommand+0x1a>
        CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800ad88:	2310      	movs	r3, #16
 800ad8a:	627b      	str	r3, [r7, #36]	; 0x24
 800ad8c:	e004      	b.n	800ad98 <SDRAM_SendCommand+0x24>
    } else if (Bank == 2) {
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	2b02      	cmp	r3, #2
 800ad92:	d101      	bne.n	800ad98 <SDRAM_SendCommand+0x24>
        CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 800ad94:	2308      	movs	r3, #8
 800ad96:	627b      	str	r3, [r7, #36]	; 0x24
    }

    Command.CommandMode = CommandMode;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	617b      	str	r3, [r7, #20]
    Command.CommandTarget = CommandTarget;
 800ad9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9e:	61bb      	str	r3, [r7, #24]
    Command.AutoRefreshNumber = RefreshNum;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	61fb      	str	r3, [r7, #28]
    Command.ModeRegisterDefinition = RegVal;
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	623b      	str	r3, [r7, #32]

    if (HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000) != HAL_OK) {
 800ada8:	f107 0314 	add.w	r3, r7, #20
 800adac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800adb0:	4619      	mov	r1, r3
 800adb2:	4807      	ldr	r0, [pc, #28]	; (800add0 <SDRAM_SendCommand+0x5c>)
 800adb4:	f7fc f912 	bl	8006fdc <HAL_SDRAM_SendCommand>
 800adb8:	4603      	mov	r3, r0
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d002      	beq.n	800adc4 <SDRAM_SendCommand+0x50>
        return -1;
 800adbe:	f04f 33ff 	mov.w	r3, #4294967295
 800adc2:	e000      	b.n	800adc6 <SDRAM_SendCommand+0x52>
    }

    return 0;
 800adc4:	2300      	movs	r3, #0
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3728      	adds	r7, #40	; 0x28
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	240004c4 	.word	0x240004c4

0800add4 <SDRAM_Init>:



void SDRAM_Init(void)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b082      	sub	sp, #8
 800add8:	af00      	add	r7, sp, #0
    uint32_t temp;

    /* 1. 时钟使能命令 */
    SDRAM_SendCommand(FMC_SDRAM_CMD_CLK_ENABLE, 1, 1, 0);
 800adda:	2300      	movs	r3, #0
 800addc:	2201      	movs	r2, #1
 800adde:	2101      	movs	r1, #1
 800ade0:	2001      	movs	r0, #1
 800ade2:	f7ff ffc7 	bl	800ad74 <SDRAM_SendCommand>

    /* 2. 延时，至少100us */
    HAL_Delay(1);
 800ade6:	2001      	movs	r0, #1
 800ade8:	f7f6 ffd0 	bl	8001d8c <HAL_Delay>

    /* 3. SDRAM全部预充电命令 */
    SDRAM_SendCommand(FMC_SDRAM_CMD_PALL, 1, 1, 0);
 800adec:	2300      	movs	r3, #0
 800adee:	2201      	movs	r2, #1
 800adf0:	2101      	movs	r1, #1
 800adf2:	2002      	movs	r0, #2
 800adf4:	f7ff ffbe 	bl	800ad74 <SDRAM_SendCommand>

    /* 4. 自动刷新命令 */
    SDRAM_SendCommand(FMC_SDRAM_CMD_AUTOREFRESH_MODE, 1, 8, 0);
 800adf8:	2300      	movs	r3, #0
 800adfa:	2208      	movs	r2, #8
 800adfc:	2101      	movs	r1, #1
 800adfe:	2003      	movs	r0, #3
 800ae00:	f7ff ffb8 	bl	800ad74 <SDRAM_SendCommand>

    /* 5. 配置SDRAM模式寄存器 */
    temp = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1            |          //设置突发长度：1
 800ae04:	f44f 730c 	mov.w	r3, #560	; 0x230
 800ae08:	607b      	str	r3, [r7, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL     |          //设置突发类型：连续
                     SDRAM_MODEREG_CAS_LATENCY_3             |          //设置CL值：3
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD   |          //设置操作模式：标准
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;              //设置突发写模式：单点访问
    SDRAM_SendCommand(FMC_SDRAM_CMD_LOAD_MODE, 1, 1, temp);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	2101      	movs	r1, #1
 800ae10:	2004      	movs	r0, #4
 800ae12:	f7ff ffaf 	bl	800ad74 <SDRAM_SendCommand>
    /*
        SDRAM refresh period / Number of rows）*SDRAM时钟速度 – 20
      = 64000(64 ms) / 4096 *108MHz - 20
      = 1667.5 取值1668
    */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, 1668);
 800ae16:	f240 6184 	movw	r1, #1668	; 0x684
 800ae1a:	4803      	ldr	r0, [pc, #12]	; (800ae28 <SDRAM_Init+0x54>)
 800ae1c:	f7fc f913 	bl	8007046 <HAL_SDRAM_ProgramRefreshRate>
}
 800ae20:	bf00      	nop
 800ae22:	3708      	adds	r7, #8
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}
 800ae28:	240004c4 	.word	0x240004c4

0800ae2c <_write>:
  HAL_UART_Receive(&huart1, &ch, 1, 0xffff);
  return ch;
}


int _write(int32_t file, uint8_t *ptr, int32_t len) {
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b084      	sub	sp, #16
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, ptr, len, HAL_MAX_DELAY);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	b29a      	uxth	r2, r3
 800ae3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ae40:	68b9      	ldr	r1, [r7, #8]
 800ae42:	4804      	ldr	r0, [pc, #16]	; (800ae54 <_write+0x28>)
 800ae44:	f7fc fdfc 	bl	8007a40 <HAL_UART_Transmit>
  return len;
 800ae48:	687b      	ldr	r3, [r7, #4]
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3710      	adds	r7, #16
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}
 800ae52:	bf00      	nop
 800ae54:	2400039c 	.word	0x2400039c

0800ae58 <log_com_uart_init>:

void log_com_uart_init(void)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	af00      	add	r7, sp, #0

  HAL_UART_Transmit_IT(&huart1, (uint8_t *)StaMessages, sizeof(StaMessages));
 800ae5c:	2204      	movs	r2, #4
 800ae5e:	4905      	ldr	r1, [pc, #20]	; (800ae74 <log_com_uart_init+0x1c>)
 800ae60:	4805      	ldr	r0, [pc, #20]	; (800ae78 <log_com_uart_init+0x20>)
 800ae62:	f7fc fe7b 	bl	8007b5c <HAL_UART_Transmit_IT>
  HAL_UART_Receive_IT(&huart1, (uint8_t *)uart1_RxBuffer, 1); // 调用中断接收函数，接收长度设为1，接收一个字节进一次中断
 800ae66:	2201      	movs	r2, #1
 800ae68:	4904      	ldr	r1, [pc, #16]	; (800ae7c <log_com_uart_init+0x24>)
 800ae6a:	4803      	ldr	r0, [pc, #12]	; (800ae78 <log_com_uart_init+0x20>)
 800ae6c:	f7fc ff0a 	bl	8007c84 <HAL_UART_Receive_IT>
}
 800ae70:	bf00      	nop
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	24000508 	.word	0x24000508
 800ae78:	2400039c 	.word	0x2400039c
 800ae7c:	2400050c 	.word	0x2400050c

0800ae80 <HAL_UART_RxCpltCallback>:
  HAL_UART_Transmit_IT(&huart2, (uint8_t *)StaMessages, sizeof(StaMessages));
  HAL_UART_Receive_IT(&huart2, (uint8_t *)uart2_RxBuffer, 1); // 调用中断接收函数，接收长度设为1，接收一个字节进一次中断
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b082      	sub	sp, #8
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
  if(huart->Instance == USART1)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4a11      	ldr	r2, [pc, #68]	; (800aed4 <HAL_UART_RxCpltCallback+0x54>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d10b      	bne.n	800aeaa <HAL_UART_RxCpltCallback+0x2a>
  {
	  HAL_UART_Transmit(&huart1, (uint8_t *)uart1_RxBuffer, 1, 0xFFFF); // 发送接收到的数据
 800ae92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ae96:	2201      	movs	r2, #1
 800ae98:	490f      	ldr	r1, [pc, #60]	; (800aed8 <HAL_UART_RxCpltCallback+0x58>)
 800ae9a:	4810      	ldr	r0, [pc, #64]	; (800aedc <HAL_UART_RxCpltCallback+0x5c>)
 800ae9c:	f7fc fdd0 	bl	8007a40 <HAL_UART_Transmit>
	  HAL_UART_Receive_IT(&huart1, (uint8_t *)uart1_RxBuffer, 1);       // 再开启接收中断（因为里面中断只会触发一次，因此需要再次开启）
 800aea0:	2201      	movs	r2, #1
 800aea2:	490d      	ldr	r1, [pc, #52]	; (800aed8 <HAL_UART_RxCpltCallback+0x58>)
 800aea4:	480d      	ldr	r0, [pc, #52]	; (800aedc <HAL_UART_RxCpltCallback+0x5c>)
 800aea6:	f7fc feed 	bl	8007c84 <HAL_UART_Receive_IT>
  }
  if(huart->Instance == USART2)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a0c      	ldr	r2, [pc, #48]	; (800aee0 <HAL_UART_RxCpltCallback+0x60>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d10b      	bne.n	800aecc <HAL_UART_RxCpltCallback+0x4c>
  {
	  HAL_UART_Transmit(&huart2, (uint8_t *)uart2_RxBuffer, 1, 0xFFFF); // 发送接收到的数据
 800aeb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aeb8:	2201      	movs	r2, #1
 800aeba:	490a      	ldr	r1, [pc, #40]	; (800aee4 <HAL_UART_RxCpltCallback+0x64>)
 800aebc:	480a      	ldr	r0, [pc, #40]	; (800aee8 <HAL_UART_RxCpltCallback+0x68>)
 800aebe:	f7fc fdbf 	bl	8007a40 <HAL_UART_Transmit>
	  HAL_UART_Receive_IT(&huart2, (uint8_t *)uart2_RxBuffer, 1);       // 再开启接收中断（因为里面中断只会触发一次，因此需要再次开启）
 800aec2:	2201      	movs	r2, #1
 800aec4:	4907      	ldr	r1, [pc, #28]	; (800aee4 <HAL_UART_RxCpltCallback+0x64>)
 800aec6:	4808      	ldr	r0, [pc, #32]	; (800aee8 <HAL_UART_RxCpltCallback+0x68>)
 800aec8:	f7fc fedc 	bl	8007c84 <HAL_UART_Receive_IT>
  }

}
 800aecc:	bf00      	nop
 800aece:	3708      	adds	r7, #8
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	40011000 	.word	0x40011000
 800aed8:	2400050c 	.word	0x2400050c
 800aedc:	2400039c 	.word	0x2400039c
 800aee0:	40004400 	.word	0x40004400
 800aee4:	24000520 	.word	0x24000520
 800aee8:	24000430 	.word	0x24000430

0800aeec <__cvt>:
 800aeec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aeee:	ed2d 8b02 	vpush	{d8}
 800aef2:	eeb0 8b40 	vmov.f64	d8, d0
 800aef6:	b085      	sub	sp, #20
 800aef8:	4617      	mov	r7, r2
 800aefa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800aefc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800aefe:	ee18 2a90 	vmov	r2, s17
 800af02:	f025 0520 	bic.w	r5, r5, #32
 800af06:	2a00      	cmp	r2, #0
 800af08:	bfb6      	itet	lt
 800af0a:	222d      	movlt	r2, #45	; 0x2d
 800af0c:	2200      	movge	r2, #0
 800af0e:	eeb1 8b40 	vneglt.f64	d8, d0
 800af12:	2d46      	cmp	r5, #70	; 0x46
 800af14:	460c      	mov	r4, r1
 800af16:	701a      	strb	r2, [r3, #0]
 800af18:	d004      	beq.n	800af24 <__cvt+0x38>
 800af1a:	2d45      	cmp	r5, #69	; 0x45
 800af1c:	d100      	bne.n	800af20 <__cvt+0x34>
 800af1e:	3401      	adds	r4, #1
 800af20:	2102      	movs	r1, #2
 800af22:	e000      	b.n	800af26 <__cvt+0x3a>
 800af24:	2103      	movs	r1, #3
 800af26:	ab03      	add	r3, sp, #12
 800af28:	9301      	str	r3, [sp, #4]
 800af2a:	ab02      	add	r3, sp, #8
 800af2c:	9300      	str	r3, [sp, #0]
 800af2e:	4622      	mov	r2, r4
 800af30:	4633      	mov	r3, r6
 800af32:	eeb0 0b48 	vmov.f64	d0, d8
 800af36:	f001 f8cf 	bl	800c0d8 <_dtoa_r>
 800af3a:	2d47      	cmp	r5, #71	; 0x47
 800af3c:	d101      	bne.n	800af42 <__cvt+0x56>
 800af3e:	07fb      	lsls	r3, r7, #31
 800af40:	d51a      	bpl.n	800af78 <__cvt+0x8c>
 800af42:	2d46      	cmp	r5, #70	; 0x46
 800af44:	eb00 0204 	add.w	r2, r0, r4
 800af48:	d10c      	bne.n	800af64 <__cvt+0x78>
 800af4a:	7803      	ldrb	r3, [r0, #0]
 800af4c:	2b30      	cmp	r3, #48	; 0x30
 800af4e:	d107      	bne.n	800af60 <__cvt+0x74>
 800af50:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800af54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af58:	bf1c      	itt	ne
 800af5a:	f1c4 0401 	rsbne	r4, r4, #1
 800af5e:	6034      	strne	r4, [r6, #0]
 800af60:	6833      	ldr	r3, [r6, #0]
 800af62:	441a      	add	r2, r3
 800af64:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800af68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af6c:	bf08      	it	eq
 800af6e:	9203      	streq	r2, [sp, #12]
 800af70:	2130      	movs	r1, #48	; 0x30
 800af72:	9b03      	ldr	r3, [sp, #12]
 800af74:	4293      	cmp	r3, r2
 800af76:	d307      	bcc.n	800af88 <__cvt+0x9c>
 800af78:	9b03      	ldr	r3, [sp, #12]
 800af7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af7c:	1a1b      	subs	r3, r3, r0
 800af7e:	6013      	str	r3, [r2, #0]
 800af80:	b005      	add	sp, #20
 800af82:	ecbd 8b02 	vpop	{d8}
 800af86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af88:	1c5c      	adds	r4, r3, #1
 800af8a:	9403      	str	r4, [sp, #12]
 800af8c:	7019      	strb	r1, [r3, #0]
 800af8e:	e7f0      	b.n	800af72 <__cvt+0x86>

0800af90 <__exponent>:
 800af90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af92:	4603      	mov	r3, r0
 800af94:	2900      	cmp	r1, #0
 800af96:	bfb8      	it	lt
 800af98:	4249      	neglt	r1, r1
 800af9a:	f803 2b02 	strb.w	r2, [r3], #2
 800af9e:	bfb4      	ite	lt
 800afa0:	222d      	movlt	r2, #45	; 0x2d
 800afa2:	222b      	movge	r2, #43	; 0x2b
 800afa4:	2909      	cmp	r1, #9
 800afa6:	7042      	strb	r2, [r0, #1]
 800afa8:	dd2a      	ble.n	800b000 <__exponent+0x70>
 800afaa:	f10d 0207 	add.w	r2, sp, #7
 800afae:	4617      	mov	r7, r2
 800afb0:	260a      	movs	r6, #10
 800afb2:	4694      	mov	ip, r2
 800afb4:	fb91 f5f6 	sdiv	r5, r1, r6
 800afb8:	fb06 1415 	mls	r4, r6, r5, r1
 800afbc:	3430      	adds	r4, #48	; 0x30
 800afbe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800afc2:	460c      	mov	r4, r1
 800afc4:	2c63      	cmp	r4, #99	; 0x63
 800afc6:	f102 32ff 	add.w	r2, r2, #4294967295
 800afca:	4629      	mov	r1, r5
 800afcc:	dcf1      	bgt.n	800afb2 <__exponent+0x22>
 800afce:	3130      	adds	r1, #48	; 0x30
 800afd0:	f1ac 0402 	sub.w	r4, ip, #2
 800afd4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800afd8:	1c41      	adds	r1, r0, #1
 800afda:	4622      	mov	r2, r4
 800afdc:	42ba      	cmp	r2, r7
 800afde:	d30a      	bcc.n	800aff6 <__exponent+0x66>
 800afe0:	f10d 0209 	add.w	r2, sp, #9
 800afe4:	eba2 020c 	sub.w	r2, r2, ip
 800afe8:	42bc      	cmp	r4, r7
 800afea:	bf88      	it	hi
 800afec:	2200      	movhi	r2, #0
 800afee:	4413      	add	r3, r2
 800aff0:	1a18      	subs	r0, r3, r0
 800aff2:	b003      	add	sp, #12
 800aff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aff6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800affa:	f801 5f01 	strb.w	r5, [r1, #1]!
 800affe:	e7ed      	b.n	800afdc <__exponent+0x4c>
 800b000:	2330      	movs	r3, #48	; 0x30
 800b002:	3130      	adds	r1, #48	; 0x30
 800b004:	7083      	strb	r3, [r0, #2]
 800b006:	70c1      	strb	r1, [r0, #3]
 800b008:	1d03      	adds	r3, r0, #4
 800b00a:	e7f1      	b.n	800aff0 <__exponent+0x60>
 800b00c:	0000      	movs	r0, r0
	...

0800b010 <_printf_float>:
 800b010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b014:	b08b      	sub	sp, #44	; 0x2c
 800b016:	460c      	mov	r4, r1
 800b018:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800b01c:	4616      	mov	r6, r2
 800b01e:	461f      	mov	r7, r3
 800b020:	4605      	mov	r5, r0
 800b022:	f000 ff53 	bl	800becc <_localeconv_r>
 800b026:	f8d0 b000 	ldr.w	fp, [r0]
 800b02a:	4658      	mov	r0, fp
 800b02c:	f7f5 f9a8 	bl	8000380 <strlen>
 800b030:	2300      	movs	r3, #0
 800b032:	9308      	str	r3, [sp, #32]
 800b034:	f8d8 3000 	ldr.w	r3, [r8]
 800b038:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b03c:	6822      	ldr	r2, [r4, #0]
 800b03e:	3307      	adds	r3, #7
 800b040:	f023 0307 	bic.w	r3, r3, #7
 800b044:	f103 0108 	add.w	r1, r3, #8
 800b048:	f8c8 1000 	str.w	r1, [r8]
 800b04c:	ed93 0b00 	vldr	d0, [r3]
 800b050:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800b2b0 <_printf_float+0x2a0>
 800b054:	eeb0 7bc0 	vabs.f64	d7, d0
 800b058:	eeb4 7b46 	vcmp.f64	d7, d6
 800b05c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b060:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800b064:	4682      	mov	sl, r0
 800b066:	dd24      	ble.n	800b0b2 <_printf_float+0xa2>
 800b068:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b06c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b070:	d502      	bpl.n	800b078 <_printf_float+0x68>
 800b072:	232d      	movs	r3, #45	; 0x2d
 800b074:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b078:	498f      	ldr	r1, [pc, #572]	; (800b2b8 <_printf_float+0x2a8>)
 800b07a:	4b90      	ldr	r3, [pc, #576]	; (800b2bc <_printf_float+0x2ac>)
 800b07c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b080:	bf94      	ite	ls
 800b082:	4688      	movls	r8, r1
 800b084:	4698      	movhi	r8, r3
 800b086:	2303      	movs	r3, #3
 800b088:	6123      	str	r3, [r4, #16]
 800b08a:	f022 0204 	bic.w	r2, r2, #4
 800b08e:	2300      	movs	r3, #0
 800b090:	6022      	str	r2, [r4, #0]
 800b092:	9304      	str	r3, [sp, #16]
 800b094:	9700      	str	r7, [sp, #0]
 800b096:	4633      	mov	r3, r6
 800b098:	aa09      	add	r2, sp, #36	; 0x24
 800b09a:	4621      	mov	r1, r4
 800b09c:	4628      	mov	r0, r5
 800b09e:	f000 f9d1 	bl	800b444 <_printf_common>
 800b0a2:	3001      	adds	r0, #1
 800b0a4:	f040 808a 	bne.w	800b1bc <_printf_float+0x1ac>
 800b0a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b0ac:	b00b      	add	sp, #44	; 0x2c
 800b0ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0b2:	eeb4 0b40 	vcmp.f64	d0, d0
 800b0b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0ba:	d709      	bvc.n	800b0d0 <_printf_float+0xc0>
 800b0bc:	ee10 3a90 	vmov	r3, s1
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	bfbc      	itt	lt
 800b0c4:	232d      	movlt	r3, #45	; 0x2d
 800b0c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b0ca:	497d      	ldr	r1, [pc, #500]	; (800b2c0 <_printf_float+0x2b0>)
 800b0cc:	4b7d      	ldr	r3, [pc, #500]	; (800b2c4 <_printf_float+0x2b4>)
 800b0ce:	e7d5      	b.n	800b07c <_printf_float+0x6c>
 800b0d0:	6863      	ldr	r3, [r4, #4]
 800b0d2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b0d6:	9104      	str	r1, [sp, #16]
 800b0d8:	1c59      	adds	r1, r3, #1
 800b0da:	d13c      	bne.n	800b156 <_printf_float+0x146>
 800b0dc:	2306      	movs	r3, #6
 800b0de:	6063      	str	r3, [r4, #4]
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	9303      	str	r3, [sp, #12]
 800b0e4:	ab08      	add	r3, sp, #32
 800b0e6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800b0ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b0ee:	ab07      	add	r3, sp, #28
 800b0f0:	6861      	ldr	r1, [r4, #4]
 800b0f2:	9300      	str	r3, [sp, #0]
 800b0f4:	6022      	str	r2, [r4, #0]
 800b0f6:	f10d 031b 	add.w	r3, sp, #27
 800b0fa:	4628      	mov	r0, r5
 800b0fc:	f7ff fef6 	bl	800aeec <__cvt>
 800b100:	9b04      	ldr	r3, [sp, #16]
 800b102:	9907      	ldr	r1, [sp, #28]
 800b104:	2b47      	cmp	r3, #71	; 0x47
 800b106:	4680      	mov	r8, r0
 800b108:	d108      	bne.n	800b11c <_printf_float+0x10c>
 800b10a:	1cc8      	adds	r0, r1, #3
 800b10c:	db02      	blt.n	800b114 <_printf_float+0x104>
 800b10e:	6863      	ldr	r3, [r4, #4]
 800b110:	4299      	cmp	r1, r3
 800b112:	dd41      	ble.n	800b198 <_printf_float+0x188>
 800b114:	f1a9 0902 	sub.w	r9, r9, #2
 800b118:	fa5f f989 	uxtb.w	r9, r9
 800b11c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b120:	d820      	bhi.n	800b164 <_printf_float+0x154>
 800b122:	3901      	subs	r1, #1
 800b124:	464a      	mov	r2, r9
 800b126:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b12a:	9107      	str	r1, [sp, #28]
 800b12c:	f7ff ff30 	bl	800af90 <__exponent>
 800b130:	9a08      	ldr	r2, [sp, #32]
 800b132:	9004      	str	r0, [sp, #16]
 800b134:	1813      	adds	r3, r2, r0
 800b136:	2a01      	cmp	r2, #1
 800b138:	6123      	str	r3, [r4, #16]
 800b13a:	dc02      	bgt.n	800b142 <_printf_float+0x132>
 800b13c:	6822      	ldr	r2, [r4, #0]
 800b13e:	07d2      	lsls	r2, r2, #31
 800b140:	d501      	bpl.n	800b146 <_printf_float+0x136>
 800b142:	3301      	adds	r3, #1
 800b144:	6123      	str	r3, [r4, #16]
 800b146:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d0a2      	beq.n	800b094 <_printf_float+0x84>
 800b14e:	232d      	movs	r3, #45	; 0x2d
 800b150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b154:	e79e      	b.n	800b094 <_printf_float+0x84>
 800b156:	9904      	ldr	r1, [sp, #16]
 800b158:	2947      	cmp	r1, #71	; 0x47
 800b15a:	d1c1      	bne.n	800b0e0 <_printf_float+0xd0>
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d1bf      	bne.n	800b0e0 <_printf_float+0xd0>
 800b160:	2301      	movs	r3, #1
 800b162:	e7bc      	b.n	800b0de <_printf_float+0xce>
 800b164:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b168:	d118      	bne.n	800b19c <_printf_float+0x18c>
 800b16a:	2900      	cmp	r1, #0
 800b16c:	6863      	ldr	r3, [r4, #4]
 800b16e:	dd0b      	ble.n	800b188 <_printf_float+0x178>
 800b170:	6121      	str	r1, [r4, #16]
 800b172:	b913      	cbnz	r3, 800b17a <_printf_float+0x16a>
 800b174:	6822      	ldr	r2, [r4, #0]
 800b176:	07d0      	lsls	r0, r2, #31
 800b178:	d502      	bpl.n	800b180 <_printf_float+0x170>
 800b17a:	3301      	adds	r3, #1
 800b17c:	440b      	add	r3, r1
 800b17e:	6123      	str	r3, [r4, #16]
 800b180:	2300      	movs	r3, #0
 800b182:	65a1      	str	r1, [r4, #88]	; 0x58
 800b184:	9304      	str	r3, [sp, #16]
 800b186:	e7de      	b.n	800b146 <_printf_float+0x136>
 800b188:	b913      	cbnz	r3, 800b190 <_printf_float+0x180>
 800b18a:	6822      	ldr	r2, [r4, #0]
 800b18c:	07d2      	lsls	r2, r2, #31
 800b18e:	d501      	bpl.n	800b194 <_printf_float+0x184>
 800b190:	3302      	adds	r3, #2
 800b192:	e7f4      	b.n	800b17e <_printf_float+0x16e>
 800b194:	2301      	movs	r3, #1
 800b196:	e7f2      	b.n	800b17e <_printf_float+0x16e>
 800b198:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b19c:	9b08      	ldr	r3, [sp, #32]
 800b19e:	4299      	cmp	r1, r3
 800b1a0:	db05      	blt.n	800b1ae <_printf_float+0x19e>
 800b1a2:	6823      	ldr	r3, [r4, #0]
 800b1a4:	6121      	str	r1, [r4, #16]
 800b1a6:	07d8      	lsls	r0, r3, #31
 800b1a8:	d5ea      	bpl.n	800b180 <_printf_float+0x170>
 800b1aa:	1c4b      	adds	r3, r1, #1
 800b1ac:	e7e7      	b.n	800b17e <_printf_float+0x16e>
 800b1ae:	2900      	cmp	r1, #0
 800b1b0:	bfd4      	ite	le
 800b1b2:	f1c1 0202 	rsble	r2, r1, #2
 800b1b6:	2201      	movgt	r2, #1
 800b1b8:	4413      	add	r3, r2
 800b1ba:	e7e0      	b.n	800b17e <_printf_float+0x16e>
 800b1bc:	6823      	ldr	r3, [r4, #0]
 800b1be:	055a      	lsls	r2, r3, #21
 800b1c0:	d407      	bmi.n	800b1d2 <_printf_float+0x1c2>
 800b1c2:	6923      	ldr	r3, [r4, #16]
 800b1c4:	4642      	mov	r2, r8
 800b1c6:	4631      	mov	r1, r6
 800b1c8:	4628      	mov	r0, r5
 800b1ca:	47b8      	blx	r7
 800b1cc:	3001      	adds	r0, #1
 800b1ce:	d12a      	bne.n	800b226 <_printf_float+0x216>
 800b1d0:	e76a      	b.n	800b0a8 <_printf_float+0x98>
 800b1d2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b1d6:	f240 80e0 	bls.w	800b39a <_printf_float+0x38a>
 800b1da:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b1de:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b1e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1e6:	d133      	bne.n	800b250 <_printf_float+0x240>
 800b1e8:	4a37      	ldr	r2, [pc, #220]	; (800b2c8 <_printf_float+0x2b8>)
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	4631      	mov	r1, r6
 800b1ee:	4628      	mov	r0, r5
 800b1f0:	47b8      	blx	r7
 800b1f2:	3001      	adds	r0, #1
 800b1f4:	f43f af58 	beq.w	800b0a8 <_printf_float+0x98>
 800b1f8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	db02      	blt.n	800b206 <_printf_float+0x1f6>
 800b200:	6823      	ldr	r3, [r4, #0]
 800b202:	07d8      	lsls	r0, r3, #31
 800b204:	d50f      	bpl.n	800b226 <_printf_float+0x216>
 800b206:	4653      	mov	r3, sl
 800b208:	465a      	mov	r2, fp
 800b20a:	4631      	mov	r1, r6
 800b20c:	4628      	mov	r0, r5
 800b20e:	47b8      	blx	r7
 800b210:	3001      	adds	r0, #1
 800b212:	f43f af49 	beq.w	800b0a8 <_printf_float+0x98>
 800b216:	f04f 0800 	mov.w	r8, #0
 800b21a:	f104 091a 	add.w	r9, r4, #26
 800b21e:	9b08      	ldr	r3, [sp, #32]
 800b220:	3b01      	subs	r3, #1
 800b222:	4543      	cmp	r3, r8
 800b224:	dc09      	bgt.n	800b23a <_printf_float+0x22a>
 800b226:	6823      	ldr	r3, [r4, #0]
 800b228:	079b      	lsls	r3, r3, #30
 800b22a:	f100 8106 	bmi.w	800b43a <_printf_float+0x42a>
 800b22e:	68e0      	ldr	r0, [r4, #12]
 800b230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b232:	4298      	cmp	r0, r3
 800b234:	bfb8      	it	lt
 800b236:	4618      	movlt	r0, r3
 800b238:	e738      	b.n	800b0ac <_printf_float+0x9c>
 800b23a:	2301      	movs	r3, #1
 800b23c:	464a      	mov	r2, r9
 800b23e:	4631      	mov	r1, r6
 800b240:	4628      	mov	r0, r5
 800b242:	47b8      	blx	r7
 800b244:	3001      	adds	r0, #1
 800b246:	f43f af2f 	beq.w	800b0a8 <_printf_float+0x98>
 800b24a:	f108 0801 	add.w	r8, r8, #1
 800b24e:	e7e6      	b.n	800b21e <_printf_float+0x20e>
 800b250:	9b07      	ldr	r3, [sp, #28]
 800b252:	2b00      	cmp	r3, #0
 800b254:	dc3a      	bgt.n	800b2cc <_printf_float+0x2bc>
 800b256:	4a1c      	ldr	r2, [pc, #112]	; (800b2c8 <_printf_float+0x2b8>)
 800b258:	2301      	movs	r3, #1
 800b25a:	4631      	mov	r1, r6
 800b25c:	4628      	mov	r0, r5
 800b25e:	47b8      	blx	r7
 800b260:	3001      	adds	r0, #1
 800b262:	f43f af21 	beq.w	800b0a8 <_printf_float+0x98>
 800b266:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800b26a:	4313      	orrs	r3, r2
 800b26c:	d102      	bne.n	800b274 <_printf_float+0x264>
 800b26e:	6823      	ldr	r3, [r4, #0]
 800b270:	07d9      	lsls	r1, r3, #31
 800b272:	d5d8      	bpl.n	800b226 <_printf_float+0x216>
 800b274:	4653      	mov	r3, sl
 800b276:	465a      	mov	r2, fp
 800b278:	4631      	mov	r1, r6
 800b27a:	4628      	mov	r0, r5
 800b27c:	47b8      	blx	r7
 800b27e:	3001      	adds	r0, #1
 800b280:	f43f af12 	beq.w	800b0a8 <_printf_float+0x98>
 800b284:	f04f 0900 	mov.w	r9, #0
 800b288:	f104 0a1a 	add.w	sl, r4, #26
 800b28c:	9b07      	ldr	r3, [sp, #28]
 800b28e:	425b      	negs	r3, r3
 800b290:	454b      	cmp	r3, r9
 800b292:	dc01      	bgt.n	800b298 <_printf_float+0x288>
 800b294:	9b08      	ldr	r3, [sp, #32]
 800b296:	e795      	b.n	800b1c4 <_printf_float+0x1b4>
 800b298:	2301      	movs	r3, #1
 800b29a:	4652      	mov	r2, sl
 800b29c:	4631      	mov	r1, r6
 800b29e:	4628      	mov	r0, r5
 800b2a0:	47b8      	blx	r7
 800b2a2:	3001      	adds	r0, #1
 800b2a4:	f43f af00 	beq.w	800b0a8 <_printf_float+0x98>
 800b2a8:	f109 0901 	add.w	r9, r9, #1
 800b2ac:	e7ee      	b.n	800b28c <_printf_float+0x27c>
 800b2ae:	bf00      	nop
 800b2b0:	ffffffff 	.word	0xffffffff
 800b2b4:	7fefffff 	.word	0x7fefffff
 800b2b8:	0800f4c0 	.word	0x0800f4c0
 800b2bc:	0800f4c4 	.word	0x0800f4c4
 800b2c0:	0800f4c8 	.word	0x0800f4c8
 800b2c4:	0800f4cc 	.word	0x0800f4cc
 800b2c8:	0800f4d0 	.word	0x0800f4d0
 800b2cc:	9a08      	ldr	r2, [sp, #32]
 800b2ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	bfa8      	it	ge
 800b2d4:	461a      	movge	r2, r3
 800b2d6:	2a00      	cmp	r2, #0
 800b2d8:	4691      	mov	r9, r2
 800b2da:	dc38      	bgt.n	800b34e <_printf_float+0x33e>
 800b2dc:	2300      	movs	r3, #0
 800b2de:	9305      	str	r3, [sp, #20]
 800b2e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b2e4:	f104 021a 	add.w	r2, r4, #26
 800b2e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b2ea:	9905      	ldr	r1, [sp, #20]
 800b2ec:	9304      	str	r3, [sp, #16]
 800b2ee:	eba3 0309 	sub.w	r3, r3, r9
 800b2f2:	428b      	cmp	r3, r1
 800b2f4:	dc33      	bgt.n	800b35e <_printf_float+0x34e>
 800b2f6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	db3c      	blt.n	800b378 <_printf_float+0x368>
 800b2fe:	6823      	ldr	r3, [r4, #0]
 800b300:	07da      	lsls	r2, r3, #31
 800b302:	d439      	bmi.n	800b378 <_printf_float+0x368>
 800b304:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800b308:	eba2 0903 	sub.w	r9, r2, r3
 800b30c:	9b04      	ldr	r3, [sp, #16]
 800b30e:	1ad2      	subs	r2, r2, r3
 800b310:	4591      	cmp	r9, r2
 800b312:	bfa8      	it	ge
 800b314:	4691      	movge	r9, r2
 800b316:	f1b9 0f00 	cmp.w	r9, #0
 800b31a:	dc35      	bgt.n	800b388 <_printf_float+0x378>
 800b31c:	f04f 0800 	mov.w	r8, #0
 800b320:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b324:	f104 0a1a 	add.w	sl, r4, #26
 800b328:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b32c:	1a9b      	subs	r3, r3, r2
 800b32e:	eba3 0309 	sub.w	r3, r3, r9
 800b332:	4543      	cmp	r3, r8
 800b334:	f77f af77 	ble.w	800b226 <_printf_float+0x216>
 800b338:	2301      	movs	r3, #1
 800b33a:	4652      	mov	r2, sl
 800b33c:	4631      	mov	r1, r6
 800b33e:	4628      	mov	r0, r5
 800b340:	47b8      	blx	r7
 800b342:	3001      	adds	r0, #1
 800b344:	f43f aeb0 	beq.w	800b0a8 <_printf_float+0x98>
 800b348:	f108 0801 	add.w	r8, r8, #1
 800b34c:	e7ec      	b.n	800b328 <_printf_float+0x318>
 800b34e:	4613      	mov	r3, r2
 800b350:	4631      	mov	r1, r6
 800b352:	4642      	mov	r2, r8
 800b354:	4628      	mov	r0, r5
 800b356:	47b8      	blx	r7
 800b358:	3001      	adds	r0, #1
 800b35a:	d1bf      	bne.n	800b2dc <_printf_float+0x2cc>
 800b35c:	e6a4      	b.n	800b0a8 <_printf_float+0x98>
 800b35e:	2301      	movs	r3, #1
 800b360:	4631      	mov	r1, r6
 800b362:	4628      	mov	r0, r5
 800b364:	9204      	str	r2, [sp, #16]
 800b366:	47b8      	blx	r7
 800b368:	3001      	adds	r0, #1
 800b36a:	f43f ae9d 	beq.w	800b0a8 <_printf_float+0x98>
 800b36e:	9b05      	ldr	r3, [sp, #20]
 800b370:	9a04      	ldr	r2, [sp, #16]
 800b372:	3301      	adds	r3, #1
 800b374:	9305      	str	r3, [sp, #20]
 800b376:	e7b7      	b.n	800b2e8 <_printf_float+0x2d8>
 800b378:	4653      	mov	r3, sl
 800b37a:	465a      	mov	r2, fp
 800b37c:	4631      	mov	r1, r6
 800b37e:	4628      	mov	r0, r5
 800b380:	47b8      	blx	r7
 800b382:	3001      	adds	r0, #1
 800b384:	d1be      	bne.n	800b304 <_printf_float+0x2f4>
 800b386:	e68f      	b.n	800b0a8 <_printf_float+0x98>
 800b388:	9a04      	ldr	r2, [sp, #16]
 800b38a:	464b      	mov	r3, r9
 800b38c:	4442      	add	r2, r8
 800b38e:	4631      	mov	r1, r6
 800b390:	4628      	mov	r0, r5
 800b392:	47b8      	blx	r7
 800b394:	3001      	adds	r0, #1
 800b396:	d1c1      	bne.n	800b31c <_printf_float+0x30c>
 800b398:	e686      	b.n	800b0a8 <_printf_float+0x98>
 800b39a:	9a08      	ldr	r2, [sp, #32]
 800b39c:	2a01      	cmp	r2, #1
 800b39e:	dc01      	bgt.n	800b3a4 <_printf_float+0x394>
 800b3a0:	07db      	lsls	r3, r3, #31
 800b3a2:	d537      	bpl.n	800b414 <_printf_float+0x404>
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	4642      	mov	r2, r8
 800b3a8:	4631      	mov	r1, r6
 800b3aa:	4628      	mov	r0, r5
 800b3ac:	47b8      	blx	r7
 800b3ae:	3001      	adds	r0, #1
 800b3b0:	f43f ae7a 	beq.w	800b0a8 <_printf_float+0x98>
 800b3b4:	4653      	mov	r3, sl
 800b3b6:	465a      	mov	r2, fp
 800b3b8:	4631      	mov	r1, r6
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	47b8      	blx	r7
 800b3be:	3001      	adds	r0, #1
 800b3c0:	f43f ae72 	beq.w	800b0a8 <_printf_float+0x98>
 800b3c4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b3c8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b3cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3d0:	9b08      	ldr	r3, [sp, #32]
 800b3d2:	d01a      	beq.n	800b40a <_printf_float+0x3fa>
 800b3d4:	3b01      	subs	r3, #1
 800b3d6:	f108 0201 	add.w	r2, r8, #1
 800b3da:	4631      	mov	r1, r6
 800b3dc:	4628      	mov	r0, r5
 800b3de:	47b8      	blx	r7
 800b3e0:	3001      	adds	r0, #1
 800b3e2:	d10e      	bne.n	800b402 <_printf_float+0x3f2>
 800b3e4:	e660      	b.n	800b0a8 <_printf_float+0x98>
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	464a      	mov	r2, r9
 800b3ea:	4631      	mov	r1, r6
 800b3ec:	4628      	mov	r0, r5
 800b3ee:	47b8      	blx	r7
 800b3f0:	3001      	adds	r0, #1
 800b3f2:	f43f ae59 	beq.w	800b0a8 <_printf_float+0x98>
 800b3f6:	f108 0801 	add.w	r8, r8, #1
 800b3fa:	9b08      	ldr	r3, [sp, #32]
 800b3fc:	3b01      	subs	r3, #1
 800b3fe:	4543      	cmp	r3, r8
 800b400:	dcf1      	bgt.n	800b3e6 <_printf_float+0x3d6>
 800b402:	9b04      	ldr	r3, [sp, #16]
 800b404:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b408:	e6dd      	b.n	800b1c6 <_printf_float+0x1b6>
 800b40a:	f04f 0800 	mov.w	r8, #0
 800b40e:	f104 091a 	add.w	r9, r4, #26
 800b412:	e7f2      	b.n	800b3fa <_printf_float+0x3ea>
 800b414:	2301      	movs	r3, #1
 800b416:	4642      	mov	r2, r8
 800b418:	e7df      	b.n	800b3da <_printf_float+0x3ca>
 800b41a:	2301      	movs	r3, #1
 800b41c:	464a      	mov	r2, r9
 800b41e:	4631      	mov	r1, r6
 800b420:	4628      	mov	r0, r5
 800b422:	47b8      	blx	r7
 800b424:	3001      	adds	r0, #1
 800b426:	f43f ae3f 	beq.w	800b0a8 <_printf_float+0x98>
 800b42a:	f108 0801 	add.w	r8, r8, #1
 800b42e:	68e3      	ldr	r3, [r4, #12]
 800b430:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b432:	1a5b      	subs	r3, r3, r1
 800b434:	4543      	cmp	r3, r8
 800b436:	dcf0      	bgt.n	800b41a <_printf_float+0x40a>
 800b438:	e6f9      	b.n	800b22e <_printf_float+0x21e>
 800b43a:	f04f 0800 	mov.w	r8, #0
 800b43e:	f104 0919 	add.w	r9, r4, #25
 800b442:	e7f4      	b.n	800b42e <_printf_float+0x41e>

0800b444 <_printf_common>:
 800b444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b448:	4616      	mov	r6, r2
 800b44a:	4699      	mov	r9, r3
 800b44c:	688a      	ldr	r2, [r1, #8]
 800b44e:	690b      	ldr	r3, [r1, #16]
 800b450:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b454:	4293      	cmp	r3, r2
 800b456:	bfb8      	it	lt
 800b458:	4613      	movlt	r3, r2
 800b45a:	6033      	str	r3, [r6, #0]
 800b45c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b460:	4607      	mov	r7, r0
 800b462:	460c      	mov	r4, r1
 800b464:	b10a      	cbz	r2, 800b46a <_printf_common+0x26>
 800b466:	3301      	adds	r3, #1
 800b468:	6033      	str	r3, [r6, #0]
 800b46a:	6823      	ldr	r3, [r4, #0]
 800b46c:	0699      	lsls	r1, r3, #26
 800b46e:	bf42      	ittt	mi
 800b470:	6833      	ldrmi	r3, [r6, #0]
 800b472:	3302      	addmi	r3, #2
 800b474:	6033      	strmi	r3, [r6, #0]
 800b476:	6825      	ldr	r5, [r4, #0]
 800b478:	f015 0506 	ands.w	r5, r5, #6
 800b47c:	d106      	bne.n	800b48c <_printf_common+0x48>
 800b47e:	f104 0a19 	add.w	sl, r4, #25
 800b482:	68e3      	ldr	r3, [r4, #12]
 800b484:	6832      	ldr	r2, [r6, #0]
 800b486:	1a9b      	subs	r3, r3, r2
 800b488:	42ab      	cmp	r3, r5
 800b48a:	dc26      	bgt.n	800b4da <_printf_common+0x96>
 800b48c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b490:	1e13      	subs	r3, r2, #0
 800b492:	6822      	ldr	r2, [r4, #0]
 800b494:	bf18      	it	ne
 800b496:	2301      	movne	r3, #1
 800b498:	0692      	lsls	r2, r2, #26
 800b49a:	d42b      	bmi.n	800b4f4 <_printf_common+0xb0>
 800b49c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4a0:	4649      	mov	r1, r9
 800b4a2:	4638      	mov	r0, r7
 800b4a4:	47c0      	blx	r8
 800b4a6:	3001      	adds	r0, #1
 800b4a8:	d01e      	beq.n	800b4e8 <_printf_common+0xa4>
 800b4aa:	6823      	ldr	r3, [r4, #0]
 800b4ac:	6922      	ldr	r2, [r4, #16]
 800b4ae:	f003 0306 	and.w	r3, r3, #6
 800b4b2:	2b04      	cmp	r3, #4
 800b4b4:	bf02      	ittt	eq
 800b4b6:	68e5      	ldreq	r5, [r4, #12]
 800b4b8:	6833      	ldreq	r3, [r6, #0]
 800b4ba:	1aed      	subeq	r5, r5, r3
 800b4bc:	68a3      	ldr	r3, [r4, #8]
 800b4be:	bf0c      	ite	eq
 800b4c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b4c4:	2500      	movne	r5, #0
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	bfc4      	itt	gt
 800b4ca:	1a9b      	subgt	r3, r3, r2
 800b4cc:	18ed      	addgt	r5, r5, r3
 800b4ce:	2600      	movs	r6, #0
 800b4d0:	341a      	adds	r4, #26
 800b4d2:	42b5      	cmp	r5, r6
 800b4d4:	d11a      	bne.n	800b50c <_printf_common+0xc8>
 800b4d6:	2000      	movs	r0, #0
 800b4d8:	e008      	b.n	800b4ec <_printf_common+0xa8>
 800b4da:	2301      	movs	r3, #1
 800b4dc:	4652      	mov	r2, sl
 800b4de:	4649      	mov	r1, r9
 800b4e0:	4638      	mov	r0, r7
 800b4e2:	47c0      	blx	r8
 800b4e4:	3001      	adds	r0, #1
 800b4e6:	d103      	bne.n	800b4f0 <_printf_common+0xac>
 800b4e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4f0:	3501      	adds	r5, #1
 800b4f2:	e7c6      	b.n	800b482 <_printf_common+0x3e>
 800b4f4:	18e1      	adds	r1, r4, r3
 800b4f6:	1c5a      	adds	r2, r3, #1
 800b4f8:	2030      	movs	r0, #48	; 0x30
 800b4fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b4fe:	4422      	add	r2, r4
 800b500:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b504:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b508:	3302      	adds	r3, #2
 800b50a:	e7c7      	b.n	800b49c <_printf_common+0x58>
 800b50c:	2301      	movs	r3, #1
 800b50e:	4622      	mov	r2, r4
 800b510:	4649      	mov	r1, r9
 800b512:	4638      	mov	r0, r7
 800b514:	47c0      	blx	r8
 800b516:	3001      	adds	r0, #1
 800b518:	d0e6      	beq.n	800b4e8 <_printf_common+0xa4>
 800b51a:	3601      	adds	r6, #1
 800b51c:	e7d9      	b.n	800b4d2 <_printf_common+0x8e>
	...

0800b520 <_printf_i>:
 800b520:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b524:	7e0f      	ldrb	r7, [r1, #24]
 800b526:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b528:	2f78      	cmp	r7, #120	; 0x78
 800b52a:	4691      	mov	r9, r2
 800b52c:	4680      	mov	r8, r0
 800b52e:	460c      	mov	r4, r1
 800b530:	469a      	mov	sl, r3
 800b532:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b536:	d807      	bhi.n	800b548 <_printf_i+0x28>
 800b538:	2f62      	cmp	r7, #98	; 0x62
 800b53a:	d80a      	bhi.n	800b552 <_printf_i+0x32>
 800b53c:	2f00      	cmp	r7, #0
 800b53e:	f000 80d4 	beq.w	800b6ea <_printf_i+0x1ca>
 800b542:	2f58      	cmp	r7, #88	; 0x58
 800b544:	f000 80c0 	beq.w	800b6c8 <_printf_i+0x1a8>
 800b548:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b54c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b550:	e03a      	b.n	800b5c8 <_printf_i+0xa8>
 800b552:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b556:	2b15      	cmp	r3, #21
 800b558:	d8f6      	bhi.n	800b548 <_printf_i+0x28>
 800b55a:	a101      	add	r1, pc, #4	; (adr r1, 800b560 <_printf_i+0x40>)
 800b55c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b560:	0800b5b9 	.word	0x0800b5b9
 800b564:	0800b5cd 	.word	0x0800b5cd
 800b568:	0800b549 	.word	0x0800b549
 800b56c:	0800b549 	.word	0x0800b549
 800b570:	0800b549 	.word	0x0800b549
 800b574:	0800b549 	.word	0x0800b549
 800b578:	0800b5cd 	.word	0x0800b5cd
 800b57c:	0800b549 	.word	0x0800b549
 800b580:	0800b549 	.word	0x0800b549
 800b584:	0800b549 	.word	0x0800b549
 800b588:	0800b549 	.word	0x0800b549
 800b58c:	0800b6d1 	.word	0x0800b6d1
 800b590:	0800b5f9 	.word	0x0800b5f9
 800b594:	0800b68b 	.word	0x0800b68b
 800b598:	0800b549 	.word	0x0800b549
 800b59c:	0800b549 	.word	0x0800b549
 800b5a0:	0800b6f3 	.word	0x0800b6f3
 800b5a4:	0800b549 	.word	0x0800b549
 800b5a8:	0800b5f9 	.word	0x0800b5f9
 800b5ac:	0800b549 	.word	0x0800b549
 800b5b0:	0800b549 	.word	0x0800b549
 800b5b4:	0800b693 	.word	0x0800b693
 800b5b8:	682b      	ldr	r3, [r5, #0]
 800b5ba:	1d1a      	adds	r2, r3, #4
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	602a      	str	r2, [r5, #0]
 800b5c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b5c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	e09f      	b.n	800b70c <_printf_i+0x1ec>
 800b5cc:	6820      	ldr	r0, [r4, #0]
 800b5ce:	682b      	ldr	r3, [r5, #0]
 800b5d0:	0607      	lsls	r7, r0, #24
 800b5d2:	f103 0104 	add.w	r1, r3, #4
 800b5d6:	6029      	str	r1, [r5, #0]
 800b5d8:	d501      	bpl.n	800b5de <_printf_i+0xbe>
 800b5da:	681e      	ldr	r6, [r3, #0]
 800b5dc:	e003      	b.n	800b5e6 <_printf_i+0xc6>
 800b5de:	0646      	lsls	r6, r0, #25
 800b5e0:	d5fb      	bpl.n	800b5da <_printf_i+0xba>
 800b5e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b5e6:	2e00      	cmp	r6, #0
 800b5e8:	da03      	bge.n	800b5f2 <_printf_i+0xd2>
 800b5ea:	232d      	movs	r3, #45	; 0x2d
 800b5ec:	4276      	negs	r6, r6
 800b5ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5f2:	485a      	ldr	r0, [pc, #360]	; (800b75c <_printf_i+0x23c>)
 800b5f4:	230a      	movs	r3, #10
 800b5f6:	e012      	b.n	800b61e <_printf_i+0xfe>
 800b5f8:	682b      	ldr	r3, [r5, #0]
 800b5fa:	6820      	ldr	r0, [r4, #0]
 800b5fc:	1d19      	adds	r1, r3, #4
 800b5fe:	6029      	str	r1, [r5, #0]
 800b600:	0605      	lsls	r5, r0, #24
 800b602:	d501      	bpl.n	800b608 <_printf_i+0xe8>
 800b604:	681e      	ldr	r6, [r3, #0]
 800b606:	e002      	b.n	800b60e <_printf_i+0xee>
 800b608:	0641      	lsls	r1, r0, #25
 800b60a:	d5fb      	bpl.n	800b604 <_printf_i+0xe4>
 800b60c:	881e      	ldrh	r6, [r3, #0]
 800b60e:	4853      	ldr	r0, [pc, #332]	; (800b75c <_printf_i+0x23c>)
 800b610:	2f6f      	cmp	r7, #111	; 0x6f
 800b612:	bf0c      	ite	eq
 800b614:	2308      	moveq	r3, #8
 800b616:	230a      	movne	r3, #10
 800b618:	2100      	movs	r1, #0
 800b61a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b61e:	6865      	ldr	r5, [r4, #4]
 800b620:	60a5      	str	r5, [r4, #8]
 800b622:	2d00      	cmp	r5, #0
 800b624:	bfa2      	ittt	ge
 800b626:	6821      	ldrge	r1, [r4, #0]
 800b628:	f021 0104 	bicge.w	r1, r1, #4
 800b62c:	6021      	strge	r1, [r4, #0]
 800b62e:	b90e      	cbnz	r6, 800b634 <_printf_i+0x114>
 800b630:	2d00      	cmp	r5, #0
 800b632:	d04b      	beq.n	800b6cc <_printf_i+0x1ac>
 800b634:	4615      	mov	r5, r2
 800b636:	fbb6 f1f3 	udiv	r1, r6, r3
 800b63a:	fb03 6711 	mls	r7, r3, r1, r6
 800b63e:	5dc7      	ldrb	r7, [r0, r7]
 800b640:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b644:	4637      	mov	r7, r6
 800b646:	42bb      	cmp	r3, r7
 800b648:	460e      	mov	r6, r1
 800b64a:	d9f4      	bls.n	800b636 <_printf_i+0x116>
 800b64c:	2b08      	cmp	r3, #8
 800b64e:	d10b      	bne.n	800b668 <_printf_i+0x148>
 800b650:	6823      	ldr	r3, [r4, #0]
 800b652:	07de      	lsls	r6, r3, #31
 800b654:	d508      	bpl.n	800b668 <_printf_i+0x148>
 800b656:	6923      	ldr	r3, [r4, #16]
 800b658:	6861      	ldr	r1, [r4, #4]
 800b65a:	4299      	cmp	r1, r3
 800b65c:	bfde      	ittt	le
 800b65e:	2330      	movle	r3, #48	; 0x30
 800b660:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b664:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b668:	1b52      	subs	r2, r2, r5
 800b66a:	6122      	str	r2, [r4, #16]
 800b66c:	f8cd a000 	str.w	sl, [sp]
 800b670:	464b      	mov	r3, r9
 800b672:	aa03      	add	r2, sp, #12
 800b674:	4621      	mov	r1, r4
 800b676:	4640      	mov	r0, r8
 800b678:	f7ff fee4 	bl	800b444 <_printf_common>
 800b67c:	3001      	adds	r0, #1
 800b67e:	d14a      	bne.n	800b716 <_printf_i+0x1f6>
 800b680:	f04f 30ff 	mov.w	r0, #4294967295
 800b684:	b004      	add	sp, #16
 800b686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b68a:	6823      	ldr	r3, [r4, #0]
 800b68c:	f043 0320 	orr.w	r3, r3, #32
 800b690:	6023      	str	r3, [r4, #0]
 800b692:	4833      	ldr	r0, [pc, #204]	; (800b760 <_printf_i+0x240>)
 800b694:	2778      	movs	r7, #120	; 0x78
 800b696:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b69a:	6823      	ldr	r3, [r4, #0]
 800b69c:	6829      	ldr	r1, [r5, #0]
 800b69e:	061f      	lsls	r7, r3, #24
 800b6a0:	f851 6b04 	ldr.w	r6, [r1], #4
 800b6a4:	d402      	bmi.n	800b6ac <_printf_i+0x18c>
 800b6a6:	065f      	lsls	r7, r3, #25
 800b6a8:	bf48      	it	mi
 800b6aa:	b2b6      	uxthmi	r6, r6
 800b6ac:	07df      	lsls	r7, r3, #31
 800b6ae:	bf48      	it	mi
 800b6b0:	f043 0320 	orrmi.w	r3, r3, #32
 800b6b4:	6029      	str	r1, [r5, #0]
 800b6b6:	bf48      	it	mi
 800b6b8:	6023      	strmi	r3, [r4, #0]
 800b6ba:	b91e      	cbnz	r6, 800b6c4 <_printf_i+0x1a4>
 800b6bc:	6823      	ldr	r3, [r4, #0]
 800b6be:	f023 0320 	bic.w	r3, r3, #32
 800b6c2:	6023      	str	r3, [r4, #0]
 800b6c4:	2310      	movs	r3, #16
 800b6c6:	e7a7      	b.n	800b618 <_printf_i+0xf8>
 800b6c8:	4824      	ldr	r0, [pc, #144]	; (800b75c <_printf_i+0x23c>)
 800b6ca:	e7e4      	b.n	800b696 <_printf_i+0x176>
 800b6cc:	4615      	mov	r5, r2
 800b6ce:	e7bd      	b.n	800b64c <_printf_i+0x12c>
 800b6d0:	682b      	ldr	r3, [r5, #0]
 800b6d2:	6826      	ldr	r6, [r4, #0]
 800b6d4:	6961      	ldr	r1, [r4, #20]
 800b6d6:	1d18      	adds	r0, r3, #4
 800b6d8:	6028      	str	r0, [r5, #0]
 800b6da:	0635      	lsls	r5, r6, #24
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	d501      	bpl.n	800b6e4 <_printf_i+0x1c4>
 800b6e0:	6019      	str	r1, [r3, #0]
 800b6e2:	e002      	b.n	800b6ea <_printf_i+0x1ca>
 800b6e4:	0670      	lsls	r0, r6, #25
 800b6e6:	d5fb      	bpl.n	800b6e0 <_printf_i+0x1c0>
 800b6e8:	8019      	strh	r1, [r3, #0]
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	6123      	str	r3, [r4, #16]
 800b6ee:	4615      	mov	r5, r2
 800b6f0:	e7bc      	b.n	800b66c <_printf_i+0x14c>
 800b6f2:	682b      	ldr	r3, [r5, #0]
 800b6f4:	1d1a      	adds	r2, r3, #4
 800b6f6:	602a      	str	r2, [r5, #0]
 800b6f8:	681d      	ldr	r5, [r3, #0]
 800b6fa:	6862      	ldr	r2, [r4, #4]
 800b6fc:	2100      	movs	r1, #0
 800b6fe:	4628      	mov	r0, r5
 800b700:	f7f4 fdee 	bl	80002e0 <memchr>
 800b704:	b108      	cbz	r0, 800b70a <_printf_i+0x1ea>
 800b706:	1b40      	subs	r0, r0, r5
 800b708:	6060      	str	r0, [r4, #4]
 800b70a:	6863      	ldr	r3, [r4, #4]
 800b70c:	6123      	str	r3, [r4, #16]
 800b70e:	2300      	movs	r3, #0
 800b710:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b714:	e7aa      	b.n	800b66c <_printf_i+0x14c>
 800b716:	6923      	ldr	r3, [r4, #16]
 800b718:	462a      	mov	r2, r5
 800b71a:	4649      	mov	r1, r9
 800b71c:	4640      	mov	r0, r8
 800b71e:	47d0      	blx	sl
 800b720:	3001      	adds	r0, #1
 800b722:	d0ad      	beq.n	800b680 <_printf_i+0x160>
 800b724:	6823      	ldr	r3, [r4, #0]
 800b726:	079b      	lsls	r3, r3, #30
 800b728:	d413      	bmi.n	800b752 <_printf_i+0x232>
 800b72a:	68e0      	ldr	r0, [r4, #12]
 800b72c:	9b03      	ldr	r3, [sp, #12]
 800b72e:	4298      	cmp	r0, r3
 800b730:	bfb8      	it	lt
 800b732:	4618      	movlt	r0, r3
 800b734:	e7a6      	b.n	800b684 <_printf_i+0x164>
 800b736:	2301      	movs	r3, #1
 800b738:	4632      	mov	r2, r6
 800b73a:	4649      	mov	r1, r9
 800b73c:	4640      	mov	r0, r8
 800b73e:	47d0      	blx	sl
 800b740:	3001      	adds	r0, #1
 800b742:	d09d      	beq.n	800b680 <_printf_i+0x160>
 800b744:	3501      	adds	r5, #1
 800b746:	68e3      	ldr	r3, [r4, #12]
 800b748:	9903      	ldr	r1, [sp, #12]
 800b74a:	1a5b      	subs	r3, r3, r1
 800b74c:	42ab      	cmp	r3, r5
 800b74e:	dcf2      	bgt.n	800b736 <_printf_i+0x216>
 800b750:	e7eb      	b.n	800b72a <_printf_i+0x20a>
 800b752:	2500      	movs	r5, #0
 800b754:	f104 0619 	add.w	r6, r4, #25
 800b758:	e7f5      	b.n	800b746 <_printf_i+0x226>
 800b75a:	bf00      	nop
 800b75c:	0800f4d2 	.word	0x0800f4d2
 800b760:	0800f4e3 	.word	0x0800f4e3

0800b764 <_scanf_float>:
 800b764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b768:	b087      	sub	sp, #28
 800b76a:	4617      	mov	r7, r2
 800b76c:	9303      	str	r3, [sp, #12]
 800b76e:	688b      	ldr	r3, [r1, #8]
 800b770:	1e5a      	subs	r2, r3, #1
 800b772:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b776:	bf83      	ittte	hi
 800b778:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b77c:	195b      	addhi	r3, r3, r5
 800b77e:	9302      	strhi	r3, [sp, #8]
 800b780:	2300      	movls	r3, #0
 800b782:	bf86      	itte	hi
 800b784:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b788:	608b      	strhi	r3, [r1, #8]
 800b78a:	9302      	strls	r3, [sp, #8]
 800b78c:	680b      	ldr	r3, [r1, #0]
 800b78e:	468b      	mov	fp, r1
 800b790:	2500      	movs	r5, #0
 800b792:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b796:	f84b 3b1c 	str.w	r3, [fp], #28
 800b79a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b79e:	4680      	mov	r8, r0
 800b7a0:	460c      	mov	r4, r1
 800b7a2:	465e      	mov	r6, fp
 800b7a4:	46aa      	mov	sl, r5
 800b7a6:	46a9      	mov	r9, r5
 800b7a8:	9501      	str	r5, [sp, #4]
 800b7aa:	68a2      	ldr	r2, [r4, #8]
 800b7ac:	b152      	cbz	r2, 800b7c4 <_scanf_float+0x60>
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	2b4e      	cmp	r3, #78	; 0x4e
 800b7b4:	d864      	bhi.n	800b880 <_scanf_float+0x11c>
 800b7b6:	2b40      	cmp	r3, #64	; 0x40
 800b7b8:	d83c      	bhi.n	800b834 <_scanf_float+0xd0>
 800b7ba:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b7be:	b2c8      	uxtb	r0, r1
 800b7c0:	280e      	cmp	r0, #14
 800b7c2:	d93a      	bls.n	800b83a <_scanf_float+0xd6>
 800b7c4:	f1b9 0f00 	cmp.w	r9, #0
 800b7c8:	d003      	beq.n	800b7d2 <_scanf_float+0x6e>
 800b7ca:	6823      	ldr	r3, [r4, #0]
 800b7cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b7d0:	6023      	str	r3, [r4, #0]
 800b7d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b7d6:	f1ba 0f01 	cmp.w	sl, #1
 800b7da:	f200 8113 	bhi.w	800ba04 <_scanf_float+0x2a0>
 800b7de:	455e      	cmp	r6, fp
 800b7e0:	f200 8105 	bhi.w	800b9ee <_scanf_float+0x28a>
 800b7e4:	2501      	movs	r5, #1
 800b7e6:	4628      	mov	r0, r5
 800b7e8:	b007      	add	sp, #28
 800b7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ee:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b7f2:	2a0d      	cmp	r2, #13
 800b7f4:	d8e6      	bhi.n	800b7c4 <_scanf_float+0x60>
 800b7f6:	a101      	add	r1, pc, #4	; (adr r1, 800b7fc <_scanf_float+0x98>)
 800b7f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b7fc:	0800b93b 	.word	0x0800b93b
 800b800:	0800b7c5 	.word	0x0800b7c5
 800b804:	0800b7c5 	.word	0x0800b7c5
 800b808:	0800b7c5 	.word	0x0800b7c5
 800b80c:	0800b99b 	.word	0x0800b99b
 800b810:	0800b973 	.word	0x0800b973
 800b814:	0800b7c5 	.word	0x0800b7c5
 800b818:	0800b7c5 	.word	0x0800b7c5
 800b81c:	0800b949 	.word	0x0800b949
 800b820:	0800b7c5 	.word	0x0800b7c5
 800b824:	0800b7c5 	.word	0x0800b7c5
 800b828:	0800b7c5 	.word	0x0800b7c5
 800b82c:	0800b7c5 	.word	0x0800b7c5
 800b830:	0800b901 	.word	0x0800b901
 800b834:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b838:	e7db      	b.n	800b7f2 <_scanf_float+0x8e>
 800b83a:	290e      	cmp	r1, #14
 800b83c:	d8c2      	bhi.n	800b7c4 <_scanf_float+0x60>
 800b83e:	a001      	add	r0, pc, #4	; (adr r0, 800b844 <_scanf_float+0xe0>)
 800b840:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b844:	0800b8f3 	.word	0x0800b8f3
 800b848:	0800b7c5 	.word	0x0800b7c5
 800b84c:	0800b8f3 	.word	0x0800b8f3
 800b850:	0800b987 	.word	0x0800b987
 800b854:	0800b7c5 	.word	0x0800b7c5
 800b858:	0800b8a1 	.word	0x0800b8a1
 800b85c:	0800b8dd 	.word	0x0800b8dd
 800b860:	0800b8dd 	.word	0x0800b8dd
 800b864:	0800b8dd 	.word	0x0800b8dd
 800b868:	0800b8dd 	.word	0x0800b8dd
 800b86c:	0800b8dd 	.word	0x0800b8dd
 800b870:	0800b8dd 	.word	0x0800b8dd
 800b874:	0800b8dd 	.word	0x0800b8dd
 800b878:	0800b8dd 	.word	0x0800b8dd
 800b87c:	0800b8dd 	.word	0x0800b8dd
 800b880:	2b6e      	cmp	r3, #110	; 0x6e
 800b882:	d809      	bhi.n	800b898 <_scanf_float+0x134>
 800b884:	2b60      	cmp	r3, #96	; 0x60
 800b886:	d8b2      	bhi.n	800b7ee <_scanf_float+0x8a>
 800b888:	2b54      	cmp	r3, #84	; 0x54
 800b88a:	d077      	beq.n	800b97c <_scanf_float+0x218>
 800b88c:	2b59      	cmp	r3, #89	; 0x59
 800b88e:	d199      	bne.n	800b7c4 <_scanf_float+0x60>
 800b890:	2d07      	cmp	r5, #7
 800b892:	d197      	bne.n	800b7c4 <_scanf_float+0x60>
 800b894:	2508      	movs	r5, #8
 800b896:	e029      	b.n	800b8ec <_scanf_float+0x188>
 800b898:	2b74      	cmp	r3, #116	; 0x74
 800b89a:	d06f      	beq.n	800b97c <_scanf_float+0x218>
 800b89c:	2b79      	cmp	r3, #121	; 0x79
 800b89e:	e7f6      	b.n	800b88e <_scanf_float+0x12a>
 800b8a0:	6821      	ldr	r1, [r4, #0]
 800b8a2:	05c8      	lsls	r0, r1, #23
 800b8a4:	d51a      	bpl.n	800b8dc <_scanf_float+0x178>
 800b8a6:	9b02      	ldr	r3, [sp, #8]
 800b8a8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b8ac:	6021      	str	r1, [r4, #0]
 800b8ae:	f109 0901 	add.w	r9, r9, #1
 800b8b2:	b11b      	cbz	r3, 800b8bc <_scanf_float+0x158>
 800b8b4:	3b01      	subs	r3, #1
 800b8b6:	3201      	adds	r2, #1
 800b8b8:	9302      	str	r3, [sp, #8]
 800b8ba:	60a2      	str	r2, [r4, #8]
 800b8bc:	68a3      	ldr	r3, [r4, #8]
 800b8be:	3b01      	subs	r3, #1
 800b8c0:	60a3      	str	r3, [r4, #8]
 800b8c2:	6923      	ldr	r3, [r4, #16]
 800b8c4:	3301      	adds	r3, #1
 800b8c6:	6123      	str	r3, [r4, #16]
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	3b01      	subs	r3, #1
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	607b      	str	r3, [r7, #4]
 800b8d0:	f340 8084 	ble.w	800b9dc <_scanf_float+0x278>
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	603b      	str	r3, [r7, #0]
 800b8da:	e766      	b.n	800b7aa <_scanf_float+0x46>
 800b8dc:	eb1a 0f05 	cmn.w	sl, r5
 800b8e0:	f47f af70 	bne.w	800b7c4 <_scanf_float+0x60>
 800b8e4:	6822      	ldr	r2, [r4, #0]
 800b8e6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b8ea:	6022      	str	r2, [r4, #0]
 800b8ec:	f806 3b01 	strb.w	r3, [r6], #1
 800b8f0:	e7e4      	b.n	800b8bc <_scanf_float+0x158>
 800b8f2:	6822      	ldr	r2, [r4, #0]
 800b8f4:	0610      	lsls	r0, r2, #24
 800b8f6:	f57f af65 	bpl.w	800b7c4 <_scanf_float+0x60>
 800b8fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b8fe:	e7f4      	b.n	800b8ea <_scanf_float+0x186>
 800b900:	f1ba 0f00 	cmp.w	sl, #0
 800b904:	d10e      	bne.n	800b924 <_scanf_float+0x1c0>
 800b906:	f1b9 0f00 	cmp.w	r9, #0
 800b90a:	d10e      	bne.n	800b92a <_scanf_float+0x1c6>
 800b90c:	6822      	ldr	r2, [r4, #0]
 800b90e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b912:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b916:	d108      	bne.n	800b92a <_scanf_float+0x1c6>
 800b918:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b91c:	6022      	str	r2, [r4, #0]
 800b91e:	f04f 0a01 	mov.w	sl, #1
 800b922:	e7e3      	b.n	800b8ec <_scanf_float+0x188>
 800b924:	f1ba 0f02 	cmp.w	sl, #2
 800b928:	d055      	beq.n	800b9d6 <_scanf_float+0x272>
 800b92a:	2d01      	cmp	r5, #1
 800b92c:	d002      	beq.n	800b934 <_scanf_float+0x1d0>
 800b92e:	2d04      	cmp	r5, #4
 800b930:	f47f af48 	bne.w	800b7c4 <_scanf_float+0x60>
 800b934:	3501      	adds	r5, #1
 800b936:	b2ed      	uxtb	r5, r5
 800b938:	e7d8      	b.n	800b8ec <_scanf_float+0x188>
 800b93a:	f1ba 0f01 	cmp.w	sl, #1
 800b93e:	f47f af41 	bne.w	800b7c4 <_scanf_float+0x60>
 800b942:	f04f 0a02 	mov.w	sl, #2
 800b946:	e7d1      	b.n	800b8ec <_scanf_float+0x188>
 800b948:	b97d      	cbnz	r5, 800b96a <_scanf_float+0x206>
 800b94a:	f1b9 0f00 	cmp.w	r9, #0
 800b94e:	f47f af3c 	bne.w	800b7ca <_scanf_float+0x66>
 800b952:	6822      	ldr	r2, [r4, #0]
 800b954:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b958:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b95c:	f47f af39 	bne.w	800b7d2 <_scanf_float+0x6e>
 800b960:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b964:	6022      	str	r2, [r4, #0]
 800b966:	2501      	movs	r5, #1
 800b968:	e7c0      	b.n	800b8ec <_scanf_float+0x188>
 800b96a:	2d03      	cmp	r5, #3
 800b96c:	d0e2      	beq.n	800b934 <_scanf_float+0x1d0>
 800b96e:	2d05      	cmp	r5, #5
 800b970:	e7de      	b.n	800b930 <_scanf_float+0x1cc>
 800b972:	2d02      	cmp	r5, #2
 800b974:	f47f af26 	bne.w	800b7c4 <_scanf_float+0x60>
 800b978:	2503      	movs	r5, #3
 800b97a:	e7b7      	b.n	800b8ec <_scanf_float+0x188>
 800b97c:	2d06      	cmp	r5, #6
 800b97e:	f47f af21 	bne.w	800b7c4 <_scanf_float+0x60>
 800b982:	2507      	movs	r5, #7
 800b984:	e7b2      	b.n	800b8ec <_scanf_float+0x188>
 800b986:	6822      	ldr	r2, [r4, #0]
 800b988:	0591      	lsls	r1, r2, #22
 800b98a:	f57f af1b 	bpl.w	800b7c4 <_scanf_float+0x60>
 800b98e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b992:	6022      	str	r2, [r4, #0]
 800b994:	f8cd 9004 	str.w	r9, [sp, #4]
 800b998:	e7a8      	b.n	800b8ec <_scanf_float+0x188>
 800b99a:	6822      	ldr	r2, [r4, #0]
 800b99c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b9a0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b9a4:	d006      	beq.n	800b9b4 <_scanf_float+0x250>
 800b9a6:	0550      	lsls	r0, r2, #21
 800b9a8:	f57f af0c 	bpl.w	800b7c4 <_scanf_float+0x60>
 800b9ac:	f1b9 0f00 	cmp.w	r9, #0
 800b9b0:	f43f af0f 	beq.w	800b7d2 <_scanf_float+0x6e>
 800b9b4:	0591      	lsls	r1, r2, #22
 800b9b6:	bf58      	it	pl
 800b9b8:	9901      	ldrpl	r1, [sp, #4]
 800b9ba:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b9be:	bf58      	it	pl
 800b9c0:	eba9 0101 	subpl.w	r1, r9, r1
 800b9c4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b9c8:	bf58      	it	pl
 800b9ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b9ce:	6022      	str	r2, [r4, #0]
 800b9d0:	f04f 0900 	mov.w	r9, #0
 800b9d4:	e78a      	b.n	800b8ec <_scanf_float+0x188>
 800b9d6:	f04f 0a03 	mov.w	sl, #3
 800b9da:	e787      	b.n	800b8ec <_scanf_float+0x188>
 800b9dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b9e0:	4639      	mov	r1, r7
 800b9e2:	4640      	mov	r0, r8
 800b9e4:	4798      	blx	r3
 800b9e6:	2800      	cmp	r0, #0
 800b9e8:	f43f aedf 	beq.w	800b7aa <_scanf_float+0x46>
 800b9ec:	e6ea      	b.n	800b7c4 <_scanf_float+0x60>
 800b9ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b9f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b9f6:	463a      	mov	r2, r7
 800b9f8:	4640      	mov	r0, r8
 800b9fa:	4798      	blx	r3
 800b9fc:	6923      	ldr	r3, [r4, #16]
 800b9fe:	3b01      	subs	r3, #1
 800ba00:	6123      	str	r3, [r4, #16]
 800ba02:	e6ec      	b.n	800b7de <_scanf_float+0x7a>
 800ba04:	1e6b      	subs	r3, r5, #1
 800ba06:	2b06      	cmp	r3, #6
 800ba08:	d825      	bhi.n	800ba56 <_scanf_float+0x2f2>
 800ba0a:	2d02      	cmp	r5, #2
 800ba0c:	d836      	bhi.n	800ba7c <_scanf_float+0x318>
 800ba0e:	455e      	cmp	r6, fp
 800ba10:	f67f aee8 	bls.w	800b7e4 <_scanf_float+0x80>
 800ba14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba18:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ba1c:	463a      	mov	r2, r7
 800ba1e:	4640      	mov	r0, r8
 800ba20:	4798      	blx	r3
 800ba22:	6923      	ldr	r3, [r4, #16]
 800ba24:	3b01      	subs	r3, #1
 800ba26:	6123      	str	r3, [r4, #16]
 800ba28:	e7f1      	b.n	800ba0e <_scanf_float+0x2aa>
 800ba2a:	9802      	ldr	r0, [sp, #8]
 800ba2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba30:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ba34:	9002      	str	r0, [sp, #8]
 800ba36:	463a      	mov	r2, r7
 800ba38:	4640      	mov	r0, r8
 800ba3a:	4798      	blx	r3
 800ba3c:	6923      	ldr	r3, [r4, #16]
 800ba3e:	3b01      	subs	r3, #1
 800ba40:	6123      	str	r3, [r4, #16]
 800ba42:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ba46:	fa5f fa8a 	uxtb.w	sl, sl
 800ba4a:	f1ba 0f02 	cmp.w	sl, #2
 800ba4e:	d1ec      	bne.n	800ba2a <_scanf_float+0x2c6>
 800ba50:	3d03      	subs	r5, #3
 800ba52:	b2ed      	uxtb	r5, r5
 800ba54:	1b76      	subs	r6, r6, r5
 800ba56:	6823      	ldr	r3, [r4, #0]
 800ba58:	05da      	lsls	r2, r3, #23
 800ba5a:	d52f      	bpl.n	800babc <_scanf_float+0x358>
 800ba5c:	055b      	lsls	r3, r3, #21
 800ba5e:	d510      	bpl.n	800ba82 <_scanf_float+0x31e>
 800ba60:	455e      	cmp	r6, fp
 800ba62:	f67f aebf 	bls.w	800b7e4 <_scanf_float+0x80>
 800ba66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ba6e:	463a      	mov	r2, r7
 800ba70:	4640      	mov	r0, r8
 800ba72:	4798      	blx	r3
 800ba74:	6923      	ldr	r3, [r4, #16]
 800ba76:	3b01      	subs	r3, #1
 800ba78:	6123      	str	r3, [r4, #16]
 800ba7a:	e7f1      	b.n	800ba60 <_scanf_float+0x2fc>
 800ba7c:	46aa      	mov	sl, r5
 800ba7e:	9602      	str	r6, [sp, #8]
 800ba80:	e7df      	b.n	800ba42 <_scanf_float+0x2de>
 800ba82:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ba86:	6923      	ldr	r3, [r4, #16]
 800ba88:	2965      	cmp	r1, #101	; 0x65
 800ba8a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ba8e:	f106 35ff 	add.w	r5, r6, #4294967295
 800ba92:	6123      	str	r3, [r4, #16]
 800ba94:	d00c      	beq.n	800bab0 <_scanf_float+0x34c>
 800ba96:	2945      	cmp	r1, #69	; 0x45
 800ba98:	d00a      	beq.n	800bab0 <_scanf_float+0x34c>
 800ba9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba9e:	463a      	mov	r2, r7
 800baa0:	4640      	mov	r0, r8
 800baa2:	4798      	blx	r3
 800baa4:	6923      	ldr	r3, [r4, #16]
 800baa6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800baaa:	3b01      	subs	r3, #1
 800baac:	1eb5      	subs	r5, r6, #2
 800baae:	6123      	str	r3, [r4, #16]
 800bab0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bab4:	463a      	mov	r2, r7
 800bab6:	4640      	mov	r0, r8
 800bab8:	4798      	blx	r3
 800baba:	462e      	mov	r6, r5
 800babc:	6825      	ldr	r5, [r4, #0]
 800babe:	f015 0510 	ands.w	r5, r5, #16
 800bac2:	d14d      	bne.n	800bb60 <_scanf_float+0x3fc>
 800bac4:	7035      	strb	r5, [r6, #0]
 800bac6:	6823      	ldr	r3, [r4, #0]
 800bac8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bacc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bad0:	d11a      	bne.n	800bb08 <_scanf_float+0x3a4>
 800bad2:	9b01      	ldr	r3, [sp, #4]
 800bad4:	454b      	cmp	r3, r9
 800bad6:	eba3 0209 	sub.w	r2, r3, r9
 800bada:	d122      	bne.n	800bb22 <_scanf_float+0x3be>
 800badc:	2200      	movs	r2, #0
 800bade:	4659      	mov	r1, fp
 800bae0:	4640      	mov	r0, r8
 800bae2:	f002 fbdb 	bl	800e29c <_strtod_r>
 800bae6:	9b03      	ldr	r3, [sp, #12]
 800bae8:	6821      	ldr	r1, [r4, #0]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f011 0f02 	tst.w	r1, #2
 800baf0:	f103 0204 	add.w	r2, r3, #4
 800baf4:	d020      	beq.n	800bb38 <_scanf_float+0x3d4>
 800baf6:	9903      	ldr	r1, [sp, #12]
 800baf8:	600a      	str	r2, [r1, #0]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	ed83 0b00 	vstr	d0, [r3]
 800bb00:	68e3      	ldr	r3, [r4, #12]
 800bb02:	3301      	adds	r3, #1
 800bb04:	60e3      	str	r3, [r4, #12]
 800bb06:	e66e      	b.n	800b7e6 <_scanf_float+0x82>
 800bb08:	9b04      	ldr	r3, [sp, #16]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d0e6      	beq.n	800badc <_scanf_float+0x378>
 800bb0e:	9905      	ldr	r1, [sp, #20]
 800bb10:	230a      	movs	r3, #10
 800bb12:	462a      	mov	r2, r5
 800bb14:	3101      	adds	r1, #1
 800bb16:	4640      	mov	r0, r8
 800bb18:	f002 fc48 	bl	800e3ac <_strtol_r>
 800bb1c:	9b04      	ldr	r3, [sp, #16]
 800bb1e:	9e05      	ldr	r6, [sp, #20]
 800bb20:	1ac2      	subs	r2, r0, r3
 800bb22:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800bb26:	429e      	cmp	r6, r3
 800bb28:	bf28      	it	cs
 800bb2a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800bb2e:	490d      	ldr	r1, [pc, #52]	; (800bb64 <_scanf_float+0x400>)
 800bb30:	4630      	mov	r0, r6
 800bb32:	f000 f8cb 	bl	800bccc <siprintf>
 800bb36:	e7d1      	b.n	800badc <_scanf_float+0x378>
 800bb38:	f011 0f04 	tst.w	r1, #4
 800bb3c:	9903      	ldr	r1, [sp, #12]
 800bb3e:	600a      	str	r2, [r1, #0]
 800bb40:	d1db      	bne.n	800bafa <_scanf_float+0x396>
 800bb42:	eeb4 0b40 	vcmp.f64	d0, d0
 800bb46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb4a:	681e      	ldr	r6, [r3, #0]
 800bb4c:	d705      	bvc.n	800bb5a <_scanf_float+0x3f6>
 800bb4e:	4806      	ldr	r0, [pc, #24]	; (800bb68 <_scanf_float+0x404>)
 800bb50:	f000 fa32 	bl	800bfb8 <nanf>
 800bb54:	ed86 0a00 	vstr	s0, [r6]
 800bb58:	e7d2      	b.n	800bb00 <_scanf_float+0x39c>
 800bb5a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800bb5e:	e7f9      	b.n	800bb54 <_scanf_float+0x3f0>
 800bb60:	2500      	movs	r5, #0
 800bb62:	e640      	b.n	800b7e6 <_scanf_float+0x82>
 800bb64:	0800f4f4 	.word	0x0800f4f4
 800bb68:	0800f885 	.word	0x0800f885

0800bb6c <std>:
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	b510      	push	{r4, lr}
 800bb70:	4604      	mov	r4, r0
 800bb72:	e9c0 3300 	strd	r3, r3, [r0]
 800bb76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb7a:	6083      	str	r3, [r0, #8]
 800bb7c:	8181      	strh	r1, [r0, #12]
 800bb7e:	6643      	str	r3, [r0, #100]	; 0x64
 800bb80:	81c2      	strh	r2, [r0, #14]
 800bb82:	6183      	str	r3, [r0, #24]
 800bb84:	4619      	mov	r1, r3
 800bb86:	2208      	movs	r2, #8
 800bb88:	305c      	adds	r0, #92	; 0x5c
 800bb8a:	f000 f997 	bl	800bebc <memset>
 800bb8e:	4b05      	ldr	r3, [pc, #20]	; (800bba4 <std+0x38>)
 800bb90:	6263      	str	r3, [r4, #36]	; 0x24
 800bb92:	4b05      	ldr	r3, [pc, #20]	; (800bba8 <std+0x3c>)
 800bb94:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb96:	4b05      	ldr	r3, [pc, #20]	; (800bbac <std+0x40>)
 800bb98:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb9a:	4b05      	ldr	r3, [pc, #20]	; (800bbb0 <std+0x44>)
 800bb9c:	6224      	str	r4, [r4, #32]
 800bb9e:	6323      	str	r3, [r4, #48]	; 0x30
 800bba0:	bd10      	pop	{r4, pc}
 800bba2:	bf00      	nop
 800bba4:	0800bd0d 	.word	0x0800bd0d
 800bba8:	0800bd2f 	.word	0x0800bd2f
 800bbac:	0800bd67 	.word	0x0800bd67
 800bbb0:	0800bd8b 	.word	0x0800bd8b

0800bbb4 <stdio_exit_handler>:
 800bbb4:	4a02      	ldr	r2, [pc, #8]	; (800bbc0 <stdio_exit_handler+0xc>)
 800bbb6:	4903      	ldr	r1, [pc, #12]	; (800bbc4 <stdio_exit_handler+0x10>)
 800bbb8:	4803      	ldr	r0, [pc, #12]	; (800bbc8 <stdio_exit_handler+0x14>)
 800bbba:	f000 b869 	b.w	800bc90 <_fwalk_sglue>
 800bbbe:	bf00      	nop
 800bbc0:	24000010 	.word	0x24000010
 800bbc4:	0800e76d 	.word	0x0800e76d
 800bbc8:	2400001c 	.word	0x2400001c

0800bbcc <cleanup_stdio>:
 800bbcc:	6841      	ldr	r1, [r0, #4]
 800bbce:	4b0c      	ldr	r3, [pc, #48]	; (800bc00 <cleanup_stdio+0x34>)
 800bbd0:	4299      	cmp	r1, r3
 800bbd2:	b510      	push	{r4, lr}
 800bbd4:	4604      	mov	r4, r0
 800bbd6:	d001      	beq.n	800bbdc <cleanup_stdio+0x10>
 800bbd8:	f002 fdc8 	bl	800e76c <_fflush_r>
 800bbdc:	68a1      	ldr	r1, [r4, #8]
 800bbde:	4b09      	ldr	r3, [pc, #36]	; (800bc04 <cleanup_stdio+0x38>)
 800bbe0:	4299      	cmp	r1, r3
 800bbe2:	d002      	beq.n	800bbea <cleanup_stdio+0x1e>
 800bbe4:	4620      	mov	r0, r4
 800bbe6:	f002 fdc1 	bl	800e76c <_fflush_r>
 800bbea:	68e1      	ldr	r1, [r4, #12]
 800bbec:	4b06      	ldr	r3, [pc, #24]	; (800bc08 <cleanup_stdio+0x3c>)
 800bbee:	4299      	cmp	r1, r3
 800bbf0:	d004      	beq.n	800bbfc <cleanup_stdio+0x30>
 800bbf2:	4620      	mov	r0, r4
 800bbf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbf8:	f002 bdb8 	b.w	800e76c <_fflush_r>
 800bbfc:	bd10      	pop	{r4, pc}
 800bbfe:	bf00      	nop
 800bc00:	24000534 	.word	0x24000534
 800bc04:	2400059c 	.word	0x2400059c
 800bc08:	24000604 	.word	0x24000604

0800bc0c <global_stdio_init.part.0>:
 800bc0c:	b510      	push	{r4, lr}
 800bc0e:	4b0b      	ldr	r3, [pc, #44]	; (800bc3c <global_stdio_init.part.0+0x30>)
 800bc10:	4c0b      	ldr	r4, [pc, #44]	; (800bc40 <global_stdio_init.part.0+0x34>)
 800bc12:	4a0c      	ldr	r2, [pc, #48]	; (800bc44 <global_stdio_init.part.0+0x38>)
 800bc14:	601a      	str	r2, [r3, #0]
 800bc16:	4620      	mov	r0, r4
 800bc18:	2200      	movs	r2, #0
 800bc1a:	2104      	movs	r1, #4
 800bc1c:	f7ff ffa6 	bl	800bb6c <std>
 800bc20:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bc24:	2201      	movs	r2, #1
 800bc26:	2109      	movs	r1, #9
 800bc28:	f7ff ffa0 	bl	800bb6c <std>
 800bc2c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bc30:	2202      	movs	r2, #2
 800bc32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc36:	2112      	movs	r1, #18
 800bc38:	f7ff bf98 	b.w	800bb6c <std>
 800bc3c:	2400066c 	.word	0x2400066c
 800bc40:	24000534 	.word	0x24000534
 800bc44:	0800bbb5 	.word	0x0800bbb5

0800bc48 <__sfp_lock_acquire>:
 800bc48:	4801      	ldr	r0, [pc, #4]	; (800bc50 <__sfp_lock_acquire+0x8>)
 800bc4a:	f000 b9b3 	b.w	800bfb4 <__retarget_lock_acquire_recursive>
 800bc4e:	bf00      	nop
 800bc50:	24000675 	.word	0x24000675

0800bc54 <__sfp_lock_release>:
 800bc54:	4801      	ldr	r0, [pc, #4]	; (800bc5c <__sfp_lock_release+0x8>)
 800bc56:	f000 b9ae 	b.w	800bfb6 <__retarget_lock_release_recursive>
 800bc5a:	bf00      	nop
 800bc5c:	24000675 	.word	0x24000675

0800bc60 <__sinit>:
 800bc60:	b510      	push	{r4, lr}
 800bc62:	4604      	mov	r4, r0
 800bc64:	f7ff fff0 	bl	800bc48 <__sfp_lock_acquire>
 800bc68:	6a23      	ldr	r3, [r4, #32]
 800bc6a:	b11b      	cbz	r3, 800bc74 <__sinit+0x14>
 800bc6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc70:	f7ff bff0 	b.w	800bc54 <__sfp_lock_release>
 800bc74:	4b04      	ldr	r3, [pc, #16]	; (800bc88 <__sinit+0x28>)
 800bc76:	6223      	str	r3, [r4, #32]
 800bc78:	4b04      	ldr	r3, [pc, #16]	; (800bc8c <__sinit+0x2c>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d1f5      	bne.n	800bc6c <__sinit+0xc>
 800bc80:	f7ff ffc4 	bl	800bc0c <global_stdio_init.part.0>
 800bc84:	e7f2      	b.n	800bc6c <__sinit+0xc>
 800bc86:	bf00      	nop
 800bc88:	0800bbcd 	.word	0x0800bbcd
 800bc8c:	2400066c 	.word	0x2400066c

0800bc90 <_fwalk_sglue>:
 800bc90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc94:	4607      	mov	r7, r0
 800bc96:	4688      	mov	r8, r1
 800bc98:	4614      	mov	r4, r2
 800bc9a:	2600      	movs	r6, #0
 800bc9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bca0:	f1b9 0901 	subs.w	r9, r9, #1
 800bca4:	d505      	bpl.n	800bcb2 <_fwalk_sglue+0x22>
 800bca6:	6824      	ldr	r4, [r4, #0]
 800bca8:	2c00      	cmp	r4, #0
 800bcaa:	d1f7      	bne.n	800bc9c <_fwalk_sglue+0xc>
 800bcac:	4630      	mov	r0, r6
 800bcae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcb2:	89ab      	ldrh	r3, [r5, #12]
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	d907      	bls.n	800bcc8 <_fwalk_sglue+0x38>
 800bcb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bcbc:	3301      	adds	r3, #1
 800bcbe:	d003      	beq.n	800bcc8 <_fwalk_sglue+0x38>
 800bcc0:	4629      	mov	r1, r5
 800bcc2:	4638      	mov	r0, r7
 800bcc4:	47c0      	blx	r8
 800bcc6:	4306      	orrs	r6, r0
 800bcc8:	3568      	adds	r5, #104	; 0x68
 800bcca:	e7e9      	b.n	800bca0 <_fwalk_sglue+0x10>

0800bccc <siprintf>:
 800bccc:	b40e      	push	{r1, r2, r3}
 800bcce:	b500      	push	{lr}
 800bcd0:	b09c      	sub	sp, #112	; 0x70
 800bcd2:	ab1d      	add	r3, sp, #116	; 0x74
 800bcd4:	9002      	str	r0, [sp, #8]
 800bcd6:	9006      	str	r0, [sp, #24]
 800bcd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bcdc:	4809      	ldr	r0, [pc, #36]	; (800bd04 <siprintf+0x38>)
 800bcde:	9107      	str	r1, [sp, #28]
 800bce0:	9104      	str	r1, [sp, #16]
 800bce2:	4909      	ldr	r1, [pc, #36]	; (800bd08 <siprintf+0x3c>)
 800bce4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bce8:	9105      	str	r1, [sp, #20]
 800bcea:	6800      	ldr	r0, [r0, #0]
 800bcec:	9301      	str	r3, [sp, #4]
 800bcee:	a902      	add	r1, sp, #8
 800bcf0:	f002 fbb8 	bl	800e464 <_svfiprintf_r>
 800bcf4:	9b02      	ldr	r3, [sp, #8]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	701a      	strb	r2, [r3, #0]
 800bcfa:	b01c      	add	sp, #112	; 0x70
 800bcfc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd00:	b003      	add	sp, #12
 800bd02:	4770      	bx	lr
 800bd04:	24000068 	.word	0x24000068
 800bd08:	ffff0208 	.word	0xffff0208

0800bd0c <__sread>:
 800bd0c:	b510      	push	{r4, lr}
 800bd0e:	460c      	mov	r4, r1
 800bd10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd14:	f000 f900 	bl	800bf18 <_read_r>
 800bd18:	2800      	cmp	r0, #0
 800bd1a:	bfab      	itete	ge
 800bd1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bd1e:	89a3      	ldrhlt	r3, [r4, #12]
 800bd20:	181b      	addge	r3, r3, r0
 800bd22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bd26:	bfac      	ite	ge
 800bd28:	6563      	strge	r3, [r4, #84]	; 0x54
 800bd2a:	81a3      	strhlt	r3, [r4, #12]
 800bd2c:	bd10      	pop	{r4, pc}

0800bd2e <__swrite>:
 800bd2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd32:	461f      	mov	r7, r3
 800bd34:	898b      	ldrh	r3, [r1, #12]
 800bd36:	05db      	lsls	r3, r3, #23
 800bd38:	4605      	mov	r5, r0
 800bd3a:	460c      	mov	r4, r1
 800bd3c:	4616      	mov	r6, r2
 800bd3e:	d505      	bpl.n	800bd4c <__swrite+0x1e>
 800bd40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd44:	2302      	movs	r3, #2
 800bd46:	2200      	movs	r2, #0
 800bd48:	f000 f8d4 	bl	800bef4 <_lseek_r>
 800bd4c:	89a3      	ldrh	r3, [r4, #12]
 800bd4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd56:	81a3      	strh	r3, [r4, #12]
 800bd58:	4632      	mov	r2, r6
 800bd5a:	463b      	mov	r3, r7
 800bd5c:	4628      	mov	r0, r5
 800bd5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd62:	f000 b8eb 	b.w	800bf3c <_write_r>

0800bd66 <__sseek>:
 800bd66:	b510      	push	{r4, lr}
 800bd68:	460c      	mov	r4, r1
 800bd6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd6e:	f000 f8c1 	bl	800bef4 <_lseek_r>
 800bd72:	1c43      	adds	r3, r0, #1
 800bd74:	89a3      	ldrh	r3, [r4, #12]
 800bd76:	bf15      	itete	ne
 800bd78:	6560      	strne	r0, [r4, #84]	; 0x54
 800bd7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bd7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bd82:	81a3      	strheq	r3, [r4, #12]
 800bd84:	bf18      	it	ne
 800bd86:	81a3      	strhne	r3, [r4, #12]
 800bd88:	bd10      	pop	{r4, pc}

0800bd8a <__sclose>:
 800bd8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd8e:	f000 b8a1 	b.w	800bed4 <_close_r>

0800bd92 <__swbuf_r>:
 800bd92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd94:	460e      	mov	r6, r1
 800bd96:	4614      	mov	r4, r2
 800bd98:	4605      	mov	r5, r0
 800bd9a:	b118      	cbz	r0, 800bda4 <__swbuf_r+0x12>
 800bd9c:	6a03      	ldr	r3, [r0, #32]
 800bd9e:	b90b      	cbnz	r3, 800bda4 <__swbuf_r+0x12>
 800bda0:	f7ff ff5e 	bl	800bc60 <__sinit>
 800bda4:	69a3      	ldr	r3, [r4, #24]
 800bda6:	60a3      	str	r3, [r4, #8]
 800bda8:	89a3      	ldrh	r3, [r4, #12]
 800bdaa:	071a      	lsls	r2, r3, #28
 800bdac:	d525      	bpl.n	800bdfa <__swbuf_r+0x68>
 800bdae:	6923      	ldr	r3, [r4, #16]
 800bdb0:	b31b      	cbz	r3, 800bdfa <__swbuf_r+0x68>
 800bdb2:	6823      	ldr	r3, [r4, #0]
 800bdb4:	6922      	ldr	r2, [r4, #16]
 800bdb6:	1a98      	subs	r0, r3, r2
 800bdb8:	6963      	ldr	r3, [r4, #20]
 800bdba:	b2f6      	uxtb	r6, r6
 800bdbc:	4283      	cmp	r3, r0
 800bdbe:	4637      	mov	r7, r6
 800bdc0:	dc04      	bgt.n	800bdcc <__swbuf_r+0x3a>
 800bdc2:	4621      	mov	r1, r4
 800bdc4:	4628      	mov	r0, r5
 800bdc6:	f002 fcd1 	bl	800e76c <_fflush_r>
 800bdca:	b9e0      	cbnz	r0, 800be06 <__swbuf_r+0x74>
 800bdcc:	68a3      	ldr	r3, [r4, #8]
 800bdce:	3b01      	subs	r3, #1
 800bdd0:	60a3      	str	r3, [r4, #8]
 800bdd2:	6823      	ldr	r3, [r4, #0]
 800bdd4:	1c5a      	adds	r2, r3, #1
 800bdd6:	6022      	str	r2, [r4, #0]
 800bdd8:	701e      	strb	r6, [r3, #0]
 800bdda:	6962      	ldr	r2, [r4, #20]
 800bddc:	1c43      	adds	r3, r0, #1
 800bdde:	429a      	cmp	r2, r3
 800bde0:	d004      	beq.n	800bdec <__swbuf_r+0x5a>
 800bde2:	89a3      	ldrh	r3, [r4, #12]
 800bde4:	07db      	lsls	r3, r3, #31
 800bde6:	d506      	bpl.n	800bdf6 <__swbuf_r+0x64>
 800bde8:	2e0a      	cmp	r6, #10
 800bdea:	d104      	bne.n	800bdf6 <__swbuf_r+0x64>
 800bdec:	4621      	mov	r1, r4
 800bdee:	4628      	mov	r0, r5
 800bdf0:	f002 fcbc 	bl	800e76c <_fflush_r>
 800bdf4:	b938      	cbnz	r0, 800be06 <__swbuf_r+0x74>
 800bdf6:	4638      	mov	r0, r7
 800bdf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdfa:	4621      	mov	r1, r4
 800bdfc:	4628      	mov	r0, r5
 800bdfe:	f000 f805 	bl	800be0c <__swsetup_r>
 800be02:	2800      	cmp	r0, #0
 800be04:	d0d5      	beq.n	800bdb2 <__swbuf_r+0x20>
 800be06:	f04f 37ff 	mov.w	r7, #4294967295
 800be0a:	e7f4      	b.n	800bdf6 <__swbuf_r+0x64>

0800be0c <__swsetup_r>:
 800be0c:	b538      	push	{r3, r4, r5, lr}
 800be0e:	4b2a      	ldr	r3, [pc, #168]	; (800beb8 <__swsetup_r+0xac>)
 800be10:	4605      	mov	r5, r0
 800be12:	6818      	ldr	r0, [r3, #0]
 800be14:	460c      	mov	r4, r1
 800be16:	b118      	cbz	r0, 800be20 <__swsetup_r+0x14>
 800be18:	6a03      	ldr	r3, [r0, #32]
 800be1a:	b90b      	cbnz	r3, 800be20 <__swsetup_r+0x14>
 800be1c:	f7ff ff20 	bl	800bc60 <__sinit>
 800be20:	89a3      	ldrh	r3, [r4, #12]
 800be22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be26:	0718      	lsls	r0, r3, #28
 800be28:	d422      	bmi.n	800be70 <__swsetup_r+0x64>
 800be2a:	06d9      	lsls	r1, r3, #27
 800be2c:	d407      	bmi.n	800be3e <__swsetup_r+0x32>
 800be2e:	2309      	movs	r3, #9
 800be30:	602b      	str	r3, [r5, #0]
 800be32:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800be36:	81a3      	strh	r3, [r4, #12]
 800be38:	f04f 30ff 	mov.w	r0, #4294967295
 800be3c:	e034      	b.n	800bea8 <__swsetup_r+0x9c>
 800be3e:	0758      	lsls	r0, r3, #29
 800be40:	d512      	bpl.n	800be68 <__swsetup_r+0x5c>
 800be42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be44:	b141      	cbz	r1, 800be58 <__swsetup_r+0x4c>
 800be46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be4a:	4299      	cmp	r1, r3
 800be4c:	d002      	beq.n	800be54 <__swsetup_r+0x48>
 800be4e:	4628      	mov	r0, r5
 800be50:	f000 feae 	bl	800cbb0 <_free_r>
 800be54:	2300      	movs	r3, #0
 800be56:	6363      	str	r3, [r4, #52]	; 0x34
 800be58:	89a3      	ldrh	r3, [r4, #12]
 800be5a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800be5e:	81a3      	strh	r3, [r4, #12]
 800be60:	2300      	movs	r3, #0
 800be62:	6063      	str	r3, [r4, #4]
 800be64:	6923      	ldr	r3, [r4, #16]
 800be66:	6023      	str	r3, [r4, #0]
 800be68:	89a3      	ldrh	r3, [r4, #12]
 800be6a:	f043 0308 	orr.w	r3, r3, #8
 800be6e:	81a3      	strh	r3, [r4, #12]
 800be70:	6923      	ldr	r3, [r4, #16]
 800be72:	b94b      	cbnz	r3, 800be88 <__swsetup_r+0x7c>
 800be74:	89a3      	ldrh	r3, [r4, #12]
 800be76:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800be7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be7e:	d003      	beq.n	800be88 <__swsetup_r+0x7c>
 800be80:	4621      	mov	r1, r4
 800be82:	4628      	mov	r0, r5
 800be84:	f002 fcc0 	bl	800e808 <__smakebuf_r>
 800be88:	89a0      	ldrh	r0, [r4, #12]
 800be8a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be8e:	f010 0301 	ands.w	r3, r0, #1
 800be92:	d00a      	beq.n	800beaa <__swsetup_r+0x9e>
 800be94:	2300      	movs	r3, #0
 800be96:	60a3      	str	r3, [r4, #8]
 800be98:	6963      	ldr	r3, [r4, #20]
 800be9a:	425b      	negs	r3, r3
 800be9c:	61a3      	str	r3, [r4, #24]
 800be9e:	6923      	ldr	r3, [r4, #16]
 800bea0:	b943      	cbnz	r3, 800beb4 <__swsetup_r+0xa8>
 800bea2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bea6:	d1c4      	bne.n	800be32 <__swsetup_r+0x26>
 800bea8:	bd38      	pop	{r3, r4, r5, pc}
 800beaa:	0781      	lsls	r1, r0, #30
 800beac:	bf58      	it	pl
 800beae:	6963      	ldrpl	r3, [r4, #20]
 800beb0:	60a3      	str	r3, [r4, #8]
 800beb2:	e7f4      	b.n	800be9e <__swsetup_r+0x92>
 800beb4:	2000      	movs	r0, #0
 800beb6:	e7f7      	b.n	800bea8 <__swsetup_r+0x9c>
 800beb8:	24000068 	.word	0x24000068

0800bebc <memset>:
 800bebc:	4402      	add	r2, r0
 800bebe:	4603      	mov	r3, r0
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d100      	bne.n	800bec6 <memset+0xa>
 800bec4:	4770      	bx	lr
 800bec6:	f803 1b01 	strb.w	r1, [r3], #1
 800beca:	e7f9      	b.n	800bec0 <memset+0x4>

0800becc <_localeconv_r>:
 800becc:	4800      	ldr	r0, [pc, #0]	; (800bed0 <_localeconv_r+0x4>)
 800bece:	4770      	bx	lr
 800bed0:	2400015c 	.word	0x2400015c

0800bed4 <_close_r>:
 800bed4:	b538      	push	{r3, r4, r5, lr}
 800bed6:	4d06      	ldr	r5, [pc, #24]	; (800bef0 <_close_r+0x1c>)
 800bed8:	2300      	movs	r3, #0
 800beda:	4604      	mov	r4, r0
 800bedc:	4608      	mov	r0, r1
 800bede:	602b      	str	r3, [r5, #0]
 800bee0:	f7f5 fda5 	bl	8001a2e <_close>
 800bee4:	1c43      	adds	r3, r0, #1
 800bee6:	d102      	bne.n	800beee <_close_r+0x1a>
 800bee8:	682b      	ldr	r3, [r5, #0]
 800beea:	b103      	cbz	r3, 800beee <_close_r+0x1a>
 800beec:	6023      	str	r3, [r4, #0]
 800beee:	bd38      	pop	{r3, r4, r5, pc}
 800bef0:	24000670 	.word	0x24000670

0800bef4 <_lseek_r>:
 800bef4:	b538      	push	{r3, r4, r5, lr}
 800bef6:	4d07      	ldr	r5, [pc, #28]	; (800bf14 <_lseek_r+0x20>)
 800bef8:	4604      	mov	r4, r0
 800befa:	4608      	mov	r0, r1
 800befc:	4611      	mov	r1, r2
 800befe:	2200      	movs	r2, #0
 800bf00:	602a      	str	r2, [r5, #0]
 800bf02:	461a      	mov	r2, r3
 800bf04:	f7f5 fdba 	bl	8001a7c <_lseek>
 800bf08:	1c43      	adds	r3, r0, #1
 800bf0a:	d102      	bne.n	800bf12 <_lseek_r+0x1e>
 800bf0c:	682b      	ldr	r3, [r5, #0]
 800bf0e:	b103      	cbz	r3, 800bf12 <_lseek_r+0x1e>
 800bf10:	6023      	str	r3, [r4, #0]
 800bf12:	bd38      	pop	{r3, r4, r5, pc}
 800bf14:	24000670 	.word	0x24000670

0800bf18 <_read_r>:
 800bf18:	b538      	push	{r3, r4, r5, lr}
 800bf1a:	4d07      	ldr	r5, [pc, #28]	; (800bf38 <_read_r+0x20>)
 800bf1c:	4604      	mov	r4, r0
 800bf1e:	4608      	mov	r0, r1
 800bf20:	4611      	mov	r1, r2
 800bf22:	2200      	movs	r2, #0
 800bf24:	602a      	str	r2, [r5, #0]
 800bf26:	461a      	mov	r2, r3
 800bf28:	f7f5 fd64 	bl	80019f4 <_read>
 800bf2c:	1c43      	adds	r3, r0, #1
 800bf2e:	d102      	bne.n	800bf36 <_read_r+0x1e>
 800bf30:	682b      	ldr	r3, [r5, #0]
 800bf32:	b103      	cbz	r3, 800bf36 <_read_r+0x1e>
 800bf34:	6023      	str	r3, [r4, #0]
 800bf36:	bd38      	pop	{r3, r4, r5, pc}
 800bf38:	24000670 	.word	0x24000670

0800bf3c <_write_r>:
 800bf3c:	b538      	push	{r3, r4, r5, lr}
 800bf3e:	4d07      	ldr	r5, [pc, #28]	; (800bf5c <_write_r+0x20>)
 800bf40:	4604      	mov	r4, r0
 800bf42:	4608      	mov	r0, r1
 800bf44:	4611      	mov	r1, r2
 800bf46:	2200      	movs	r2, #0
 800bf48:	602a      	str	r2, [r5, #0]
 800bf4a:	461a      	mov	r2, r3
 800bf4c:	f7fe ff6e 	bl	800ae2c <_write>
 800bf50:	1c43      	adds	r3, r0, #1
 800bf52:	d102      	bne.n	800bf5a <_write_r+0x1e>
 800bf54:	682b      	ldr	r3, [r5, #0]
 800bf56:	b103      	cbz	r3, 800bf5a <_write_r+0x1e>
 800bf58:	6023      	str	r3, [r4, #0]
 800bf5a:	bd38      	pop	{r3, r4, r5, pc}
 800bf5c:	24000670 	.word	0x24000670

0800bf60 <__errno>:
 800bf60:	4b01      	ldr	r3, [pc, #4]	; (800bf68 <__errno+0x8>)
 800bf62:	6818      	ldr	r0, [r3, #0]
 800bf64:	4770      	bx	lr
 800bf66:	bf00      	nop
 800bf68:	24000068 	.word	0x24000068

0800bf6c <__libc_init_array>:
 800bf6c:	b570      	push	{r4, r5, r6, lr}
 800bf6e:	4d0d      	ldr	r5, [pc, #52]	; (800bfa4 <__libc_init_array+0x38>)
 800bf70:	4c0d      	ldr	r4, [pc, #52]	; (800bfa8 <__libc_init_array+0x3c>)
 800bf72:	1b64      	subs	r4, r4, r5
 800bf74:	10a4      	asrs	r4, r4, #2
 800bf76:	2600      	movs	r6, #0
 800bf78:	42a6      	cmp	r6, r4
 800bf7a:	d109      	bne.n	800bf90 <__libc_init_array+0x24>
 800bf7c:	4d0b      	ldr	r5, [pc, #44]	; (800bfac <__libc_init_array+0x40>)
 800bf7e:	4c0c      	ldr	r4, [pc, #48]	; (800bfb0 <__libc_init_array+0x44>)
 800bf80:	f003 fa74 	bl	800f46c <_init>
 800bf84:	1b64      	subs	r4, r4, r5
 800bf86:	10a4      	asrs	r4, r4, #2
 800bf88:	2600      	movs	r6, #0
 800bf8a:	42a6      	cmp	r6, r4
 800bf8c:	d105      	bne.n	800bf9a <__libc_init_array+0x2e>
 800bf8e:	bd70      	pop	{r4, r5, r6, pc}
 800bf90:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf94:	4798      	blx	r3
 800bf96:	3601      	adds	r6, #1
 800bf98:	e7ee      	b.n	800bf78 <__libc_init_array+0xc>
 800bf9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf9e:	4798      	blx	r3
 800bfa0:	3601      	adds	r6, #1
 800bfa2:	e7f2      	b.n	800bf8a <__libc_init_array+0x1e>
 800bfa4:	0800f8f0 	.word	0x0800f8f0
 800bfa8:	0800f8f0 	.word	0x0800f8f0
 800bfac:	0800f8f0 	.word	0x0800f8f0
 800bfb0:	0800f8f4 	.word	0x0800f8f4

0800bfb4 <__retarget_lock_acquire_recursive>:
 800bfb4:	4770      	bx	lr

0800bfb6 <__retarget_lock_release_recursive>:
 800bfb6:	4770      	bx	lr

0800bfb8 <nanf>:
 800bfb8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bfc0 <nanf+0x8>
 800bfbc:	4770      	bx	lr
 800bfbe:	bf00      	nop
 800bfc0:	7fc00000 	.word	0x7fc00000

0800bfc4 <quorem>:
 800bfc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfc8:	6903      	ldr	r3, [r0, #16]
 800bfca:	690c      	ldr	r4, [r1, #16]
 800bfcc:	42a3      	cmp	r3, r4
 800bfce:	4607      	mov	r7, r0
 800bfd0:	db7e      	blt.n	800c0d0 <quorem+0x10c>
 800bfd2:	3c01      	subs	r4, #1
 800bfd4:	f101 0814 	add.w	r8, r1, #20
 800bfd8:	f100 0514 	add.w	r5, r0, #20
 800bfdc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bfe0:	9301      	str	r3, [sp, #4]
 800bfe2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bfe6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bfea:	3301      	adds	r3, #1
 800bfec:	429a      	cmp	r2, r3
 800bfee:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bff2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bff6:	fbb2 f6f3 	udiv	r6, r2, r3
 800bffa:	d331      	bcc.n	800c060 <quorem+0x9c>
 800bffc:	f04f 0e00 	mov.w	lr, #0
 800c000:	4640      	mov	r0, r8
 800c002:	46ac      	mov	ip, r5
 800c004:	46f2      	mov	sl, lr
 800c006:	f850 2b04 	ldr.w	r2, [r0], #4
 800c00a:	b293      	uxth	r3, r2
 800c00c:	fb06 e303 	mla	r3, r6, r3, lr
 800c010:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c014:	0c1a      	lsrs	r2, r3, #16
 800c016:	b29b      	uxth	r3, r3
 800c018:	ebaa 0303 	sub.w	r3, sl, r3
 800c01c:	f8dc a000 	ldr.w	sl, [ip]
 800c020:	fa13 f38a 	uxtah	r3, r3, sl
 800c024:	fb06 220e 	mla	r2, r6, lr, r2
 800c028:	9300      	str	r3, [sp, #0]
 800c02a:	9b00      	ldr	r3, [sp, #0]
 800c02c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c030:	b292      	uxth	r2, r2
 800c032:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c036:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c03a:	f8bd 3000 	ldrh.w	r3, [sp]
 800c03e:	4581      	cmp	r9, r0
 800c040:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c044:	f84c 3b04 	str.w	r3, [ip], #4
 800c048:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c04c:	d2db      	bcs.n	800c006 <quorem+0x42>
 800c04e:	f855 300b 	ldr.w	r3, [r5, fp]
 800c052:	b92b      	cbnz	r3, 800c060 <quorem+0x9c>
 800c054:	9b01      	ldr	r3, [sp, #4]
 800c056:	3b04      	subs	r3, #4
 800c058:	429d      	cmp	r5, r3
 800c05a:	461a      	mov	r2, r3
 800c05c:	d32c      	bcc.n	800c0b8 <quorem+0xf4>
 800c05e:	613c      	str	r4, [r7, #16]
 800c060:	4638      	mov	r0, r7
 800c062:	f001 f96b 	bl	800d33c <__mcmp>
 800c066:	2800      	cmp	r0, #0
 800c068:	db22      	blt.n	800c0b0 <quorem+0xec>
 800c06a:	3601      	adds	r6, #1
 800c06c:	4629      	mov	r1, r5
 800c06e:	2000      	movs	r0, #0
 800c070:	f858 2b04 	ldr.w	r2, [r8], #4
 800c074:	f8d1 c000 	ldr.w	ip, [r1]
 800c078:	b293      	uxth	r3, r2
 800c07a:	1ac3      	subs	r3, r0, r3
 800c07c:	0c12      	lsrs	r2, r2, #16
 800c07e:	fa13 f38c 	uxtah	r3, r3, ip
 800c082:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c086:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c08a:	b29b      	uxth	r3, r3
 800c08c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c090:	45c1      	cmp	r9, r8
 800c092:	f841 3b04 	str.w	r3, [r1], #4
 800c096:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c09a:	d2e9      	bcs.n	800c070 <quorem+0xac>
 800c09c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c0a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c0a4:	b922      	cbnz	r2, 800c0b0 <quorem+0xec>
 800c0a6:	3b04      	subs	r3, #4
 800c0a8:	429d      	cmp	r5, r3
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	d30a      	bcc.n	800c0c4 <quorem+0x100>
 800c0ae:	613c      	str	r4, [r7, #16]
 800c0b0:	4630      	mov	r0, r6
 800c0b2:	b003      	add	sp, #12
 800c0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0b8:	6812      	ldr	r2, [r2, #0]
 800c0ba:	3b04      	subs	r3, #4
 800c0bc:	2a00      	cmp	r2, #0
 800c0be:	d1ce      	bne.n	800c05e <quorem+0x9a>
 800c0c0:	3c01      	subs	r4, #1
 800c0c2:	e7c9      	b.n	800c058 <quorem+0x94>
 800c0c4:	6812      	ldr	r2, [r2, #0]
 800c0c6:	3b04      	subs	r3, #4
 800c0c8:	2a00      	cmp	r2, #0
 800c0ca:	d1f0      	bne.n	800c0ae <quorem+0xea>
 800c0cc:	3c01      	subs	r4, #1
 800c0ce:	e7eb      	b.n	800c0a8 <quorem+0xe4>
 800c0d0:	2000      	movs	r0, #0
 800c0d2:	e7ee      	b.n	800c0b2 <quorem+0xee>
 800c0d4:	0000      	movs	r0, r0
	...

0800c0d8 <_dtoa_r>:
 800c0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0dc:	ed2d 8b02 	vpush	{d8}
 800c0e0:	69c5      	ldr	r5, [r0, #28]
 800c0e2:	b091      	sub	sp, #68	; 0x44
 800c0e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c0e8:	ec59 8b10 	vmov	r8, r9, d0
 800c0ec:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800c0ee:	9106      	str	r1, [sp, #24]
 800c0f0:	4606      	mov	r6, r0
 800c0f2:	9208      	str	r2, [sp, #32]
 800c0f4:	930c      	str	r3, [sp, #48]	; 0x30
 800c0f6:	b975      	cbnz	r5, 800c116 <_dtoa_r+0x3e>
 800c0f8:	2010      	movs	r0, #16
 800c0fa:	f000 fda5 	bl	800cc48 <malloc>
 800c0fe:	4602      	mov	r2, r0
 800c100:	61f0      	str	r0, [r6, #28]
 800c102:	b920      	cbnz	r0, 800c10e <_dtoa_r+0x36>
 800c104:	4ba6      	ldr	r3, [pc, #664]	; (800c3a0 <_dtoa_r+0x2c8>)
 800c106:	21ef      	movs	r1, #239	; 0xef
 800c108:	48a6      	ldr	r0, [pc, #664]	; (800c3a4 <_dtoa_r+0x2cc>)
 800c10a:	f002 fc2d 	bl	800e968 <__assert_func>
 800c10e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c112:	6005      	str	r5, [r0, #0]
 800c114:	60c5      	str	r5, [r0, #12]
 800c116:	69f3      	ldr	r3, [r6, #28]
 800c118:	6819      	ldr	r1, [r3, #0]
 800c11a:	b151      	cbz	r1, 800c132 <_dtoa_r+0x5a>
 800c11c:	685a      	ldr	r2, [r3, #4]
 800c11e:	604a      	str	r2, [r1, #4]
 800c120:	2301      	movs	r3, #1
 800c122:	4093      	lsls	r3, r2
 800c124:	608b      	str	r3, [r1, #8]
 800c126:	4630      	mov	r0, r6
 800c128:	f000 fe82 	bl	800ce30 <_Bfree>
 800c12c:	69f3      	ldr	r3, [r6, #28]
 800c12e:	2200      	movs	r2, #0
 800c130:	601a      	str	r2, [r3, #0]
 800c132:	f1b9 0300 	subs.w	r3, r9, #0
 800c136:	bfbb      	ittet	lt
 800c138:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c13c:	9303      	strlt	r3, [sp, #12]
 800c13e:	2300      	movge	r3, #0
 800c140:	2201      	movlt	r2, #1
 800c142:	bfac      	ite	ge
 800c144:	6023      	strge	r3, [r4, #0]
 800c146:	6022      	strlt	r2, [r4, #0]
 800c148:	4b97      	ldr	r3, [pc, #604]	; (800c3a8 <_dtoa_r+0x2d0>)
 800c14a:	9c03      	ldr	r4, [sp, #12]
 800c14c:	43a3      	bics	r3, r4
 800c14e:	d11c      	bne.n	800c18a <_dtoa_r+0xb2>
 800c150:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c152:	f242 730f 	movw	r3, #9999	; 0x270f
 800c156:	6013      	str	r3, [r2, #0]
 800c158:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800c15c:	ea53 0308 	orrs.w	r3, r3, r8
 800c160:	f000 84fb 	beq.w	800cb5a <_dtoa_r+0xa82>
 800c164:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c166:	b963      	cbnz	r3, 800c182 <_dtoa_r+0xaa>
 800c168:	4b90      	ldr	r3, [pc, #576]	; (800c3ac <_dtoa_r+0x2d4>)
 800c16a:	e020      	b.n	800c1ae <_dtoa_r+0xd6>
 800c16c:	4b90      	ldr	r3, [pc, #576]	; (800c3b0 <_dtoa_r+0x2d8>)
 800c16e:	9301      	str	r3, [sp, #4]
 800c170:	3308      	adds	r3, #8
 800c172:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c174:	6013      	str	r3, [r2, #0]
 800c176:	9801      	ldr	r0, [sp, #4]
 800c178:	b011      	add	sp, #68	; 0x44
 800c17a:	ecbd 8b02 	vpop	{d8}
 800c17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c182:	4b8a      	ldr	r3, [pc, #552]	; (800c3ac <_dtoa_r+0x2d4>)
 800c184:	9301      	str	r3, [sp, #4]
 800c186:	3303      	adds	r3, #3
 800c188:	e7f3      	b.n	800c172 <_dtoa_r+0x9a>
 800c18a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800c18e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c196:	d10c      	bne.n	800c1b2 <_dtoa_r+0xda>
 800c198:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c19a:	2301      	movs	r3, #1
 800c19c:	6013      	str	r3, [r2, #0]
 800c19e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	f000 84d7 	beq.w	800cb54 <_dtoa_r+0xa7c>
 800c1a6:	4b83      	ldr	r3, [pc, #524]	; (800c3b4 <_dtoa_r+0x2dc>)
 800c1a8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c1aa:	6013      	str	r3, [r2, #0]
 800c1ac:	3b01      	subs	r3, #1
 800c1ae:	9301      	str	r3, [sp, #4]
 800c1b0:	e7e1      	b.n	800c176 <_dtoa_r+0x9e>
 800c1b2:	aa0e      	add	r2, sp, #56	; 0x38
 800c1b4:	a90f      	add	r1, sp, #60	; 0x3c
 800c1b6:	4630      	mov	r0, r6
 800c1b8:	eeb0 0b48 	vmov.f64	d0, d8
 800c1bc:	f001 f9d4 	bl	800d568 <__d2b>
 800c1c0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800c1c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c1c6:	4605      	mov	r5, r0
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d046      	beq.n	800c25a <_dtoa_r+0x182>
 800c1cc:	eeb0 7b48 	vmov.f64	d7, d8
 800c1d0:	ee18 1a90 	vmov	r1, s17
 800c1d4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c1d8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800c1dc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800c1e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c1e4:	2000      	movs	r0, #0
 800c1e6:	ee07 1a90 	vmov	s15, r1
 800c1ea:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800c1ee:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800c388 <_dtoa_r+0x2b0>
 800c1f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c1f6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800c390 <_dtoa_r+0x2b8>
 800c1fa:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c1fe:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800c398 <_dtoa_r+0x2c0>
 800c202:	ee07 3a90 	vmov	s15, r3
 800c206:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800c20a:	eeb0 7b46 	vmov.f64	d7, d6
 800c20e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800c212:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800c216:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c21a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c21e:	ee16 ba90 	vmov	fp, s13
 800c222:	9009      	str	r0, [sp, #36]	; 0x24
 800c224:	d508      	bpl.n	800c238 <_dtoa_r+0x160>
 800c226:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800c22a:	eeb4 6b47 	vcmp.f64	d6, d7
 800c22e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c232:	bf18      	it	ne
 800c234:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800c238:	f1bb 0f16 	cmp.w	fp, #22
 800c23c:	d82b      	bhi.n	800c296 <_dtoa_r+0x1be>
 800c23e:	495e      	ldr	r1, [pc, #376]	; (800c3b8 <_dtoa_r+0x2e0>)
 800c240:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800c244:	ed91 7b00 	vldr	d7, [r1]
 800c248:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c24c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c250:	d501      	bpl.n	800c256 <_dtoa_r+0x17e>
 800c252:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c256:	2100      	movs	r1, #0
 800c258:	e01e      	b.n	800c298 <_dtoa_r+0x1c0>
 800c25a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c25c:	4413      	add	r3, r2
 800c25e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800c262:	2920      	cmp	r1, #32
 800c264:	bfc1      	itttt	gt
 800c266:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800c26a:	408c      	lslgt	r4, r1
 800c26c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800c270:	fa28 f101 	lsrgt.w	r1, r8, r1
 800c274:	bfd6      	itet	le
 800c276:	f1c1 0120 	rsble	r1, r1, #32
 800c27a:	4321      	orrgt	r1, r4
 800c27c:	fa08 f101 	lslle.w	r1, r8, r1
 800c280:	ee07 1a90 	vmov	s15, r1
 800c284:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c288:	3b01      	subs	r3, #1
 800c28a:	ee17 1a90 	vmov	r1, s15
 800c28e:	2001      	movs	r0, #1
 800c290:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800c294:	e7a7      	b.n	800c1e6 <_dtoa_r+0x10e>
 800c296:	2101      	movs	r1, #1
 800c298:	1ad2      	subs	r2, r2, r3
 800c29a:	1e53      	subs	r3, r2, #1
 800c29c:	9305      	str	r3, [sp, #20]
 800c29e:	bf45      	ittet	mi
 800c2a0:	f1c2 0301 	rsbmi	r3, r2, #1
 800c2a4:	9304      	strmi	r3, [sp, #16]
 800c2a6:	2300      	movpl	r3, #0
 800c2a8:	2300      	movmi	r3, #0
 800c2aa:	bf4c      	ite	mi
 800c2ac:	9305      	strmi	r3, [sp, #20]
 800c2ae:	9304      	strpl	r3, [sp, #16]
 800c2b0:	f1bb 0f00 	cmp.w	fp, #0
 800c2b4:	910b      	str	r1, [sp, #44]	; 0x2c
 800c2b6:	db18      	blt.n	800c2ea <_dtoa_r+0x212>
 800c2b8:	9b05      	ldr	r3, [sp, #20]
 800c2ba:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800c2be:	445b      	add	r3, fp
 800c2c0:	9305      	str	r3, [sp, #20]
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	9a06      	ldr	r2, [sp, #24]
 800c2c6:	2a09      	cmp	r2, #9
 800c2c8:	d848      	bhi.n	800c35c <_dtoa_r+0x284>
 800c2ca:	2a05      	cmp	r2, #5
 800c2cc:	bfc4      	itt	gt
 800c2ce:	3a04      	subgt	r2, #4
 800c2d0:	9206      	strgt	r2, [sp, #24]
 800c2d2:	9a06      	ldr	r2, [sp, #24]
 800c2d4:	f1a2 0202 	sub.w	r2, r2, #2
 800c2d8:	bfcc      	ite	gt
 800c2da:	2400      	movgt	r4, #0
 800c2dc:	2401      	movle	r4, #1
 800c2de:	2a03      	cmp	r2, #3
 800c2e0:	d847      	bhi.n	800c372 <_dtoa_r+0x29a>
 800c2e2:	e8df f002 	tbb	[pc, r2]
 800c2e6:	2d0b      	.short	0x2d0b
 800c2e8:	392b      	.short	0x392b
 800c2ea:	9b04      	ldr	r3, [sp, #16]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	eba3 030b 	sub.w	r3, r3, fp
 800c2f2:	9304      	str	r3, [sp, #16]
 800c2f4:	920a      	str	r2, [sp, #40]	; 0x28
 800c2f6:	f1cb 0300 	rsb	r3, fp, #0
 800c2fa:	e7e3      	b.n	800c2c4 <_dtoa_r+0x1ec>
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	9207      	str	r2, [sp, #28]
 800c300:	9a08      	ldr	r2, [sp, #32]
 800c302:	2a00      	cmp	r2, #0
 800c304:	dc38      	bgt.n	800c378 <_dtoa_r+0x2a0>
 800c306:	f04f 0a01 	mov.w	sl, #1
 800c30a:	46d1      	mov	r9, sl
 800c30c:	4652      	mov	r2, sl
 800c30e:	f8cd a020 	str.w	sl, [sp, #32]
 800c312:	69f7      	ldr	r7, [r6, #28]
 800c314:	2100      	movs	r1, #0
 800c316:	2004      	movs	r0, #4
 800c318:	f100 0c14 	add.w	ip, r0, #20
 800c31c:	4594      	cmp	ip, r2
 800c31e:	d930      	bls.n	800c382 <_dtoa_r+0x2aa>
 800c320:	6079      	str	r1, [r7, #4]
 800c322:	4630      	mov	r0, r6
 800c324:	930d      	str	r3, [sp, #52]	; 0x34
 800c326:	f000 fd43 	bl	800cdb0 <_Balloc>
 800c32a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c32c:	9001      	str	r0, [sp, #4]
 800c32e:	4602      	mov	r2, r0
 800c330:	2800      	cmp	r0, #0
 800c332:	d145      	bne.n	800c3c0 <_dtoa_r+0x2e8>
 800c334:	4b21      	ldr	r3, [pc, #132]	; (800c3bc <_dtoa_r+0x2e4>)
 800c336:	f240 11af 	movw	r1, #431	; 0x1af
 800c33a:	e6e5      	b.n	800c108 <_dtoa_r+0x30>
 800c33c:	2201      	movs	r2, #1
 800c33e:	e7de      	b.n	800c2fe <_dtoa_r+0x226>
 800c340:	2200      	movs	r2, #0
 800c342:	9207      	str	r2, [sp, #28]
 800c344:	9a08      	ldr	r2, [sp, #32]
 800c346:	eb0b 0a02 	add.w	sl, fp, r2
 800c34a:	f10a 0901 	add.w	r9, sl, #1
 800c34e:	464a      	mov	r2, r9
 800c350:	2a01      	cmp	r2, #1
 800c352:	bfb8      	it	lt
 800c354:	2201      	movlt	r2, #1
 800c356:	e7dc      	b.n	800c312 <_dtoa_r+0x23a>
 800c358:	2201      	movs	r2, #1
 800c35a:	e7f2      	b.n	800c342 <_dtoa_r+0x26a>
 800c35c:	2401      	movs	r4, #1
 800c35e:	2200      	movs	r2, #0
 800c360:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800c364:	f04f 3aff 	mov.w	sl, #4294967295
 800c368:	2100      	movs	r1, #0
 800c36a:	46d1      	mov	r9, sl
 800c36c:	2212      	movs	r2, #18
 800c36e:	9108      	str	r1, [sp, #32]
 800c370:	e7cf      	b.n	800c312 <_dtoa_r+0x23a>
 800c372:	2201      	movs	r2, #1
 800c374:	9207      	str	r2, [sp, #28]
 800c376:	e7f5      	b.n	800c364 <_dtoa_r+0x28c>
 800c378:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c37c:	46d1      	mov	r9, sl
 800c37e:	4652      	mov	r2, sl
 800c380:	e7c7      	b.n	800c312 <_dtoa_r+0x23a>
 800c382:	3101      	adds	r1, #1
 800c384:	0040      	lsls	r0, r0, #1
 800c386:	e7c7      	b.n	800c318 <_dtoa_r+0x240>
 800c388:	636f4361 	.word	0x636f4361
 800c38c:	3fd287a7 	.word	0x3fd287a7
 800c390:	8b60c8b3 	.word	0x8b60c8b3
 800c394:	3fc68a28 	.word	0x3fc68a28
 800c398:	509f79fb 	.word	0x509f79fb
 800c39c:	3fd34413 	.word	0x3fd34413
 800c3a0:	0800f506 	.word	0x0800f506
 800c3a4:	0800f51d 	.word	0x0800f51d
 800c3a8:	7ff00000 	.word	0x7ff00000
 800c3ac:	0800f502 	.word	0x0800f502
 800c3b0:	0800f4f9 	.word	0x0800f4f9
 800c3b4:	0800f4d1 	.word	0x0800f4d1
 800c3b8:	0800f608 	.word	0x0800f608
 800c3bc:	0800f575 	.word	0x0800f575
 800c3c0:	69f2      	ldr	r2, [r6, #28]
 800c3c2:	9901      	ldr	r1, [sp, #4]
 800c3c4:	6011      	str	r1, [r2, #0]
 800c3c6:	f1b9 0f0e 	cmp.w	r9, #14
 800c3ca:	d86c      	bhi.n	800c4a6 <_dtoa_r+0x3ce>
 800c3cc:	2c00      	cmp	r4, #0
 800c3ce:	d06a      	beq.n	800c4a6 <_dtoa_r+0x3ce>
 800c3d0:	f1bb 0f00 	cmp.w	fp, #0
 800c3d4:	f340 80a0 	ble.w	800c518 <_dtoa_r+0x440>
 800c3d8:	4ac1      	ldr	r2, [pc, #772]	; (800c6e0 <_dtoa_r+0x608>)
 800c3da:	f00b 010f 	and.w	r1, fp, #15
 800c3de:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c3e2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c3e6:	ed92 7b00 	vldr	d7, [r2]
 800c3ea:	ea4f 122b 	mov.w	r2, fp, asr #4
 800c3ee:	f000 8087 	beq.w	800c500 <_dtoa_r+0x428>
 800c3f2:	49bc      	ldr	r1, [pc, #752]	; (800c6e4 <_dtoa_r+0x60c>)
 800c3f4:	ed91 6b08 	vldr	d6, [r1, #32]
 800c3f8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800c3fc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c400:	f002 020f 	and.w	r2, r2, #15
 800c404:	2103      	movs	r1, #3
 800c406:	48b7      	ldr	r0, [pc, #732]	; (800c6e4 <_dtoa_r+0x60c>)
 800c408:	2a00      	cmp	r2, #0
 800c40a:	d17b      	bne.n	800c504 <_dtoa_r+0x42c>
 800c40c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c410:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c414:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c418:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c41a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c41e:	2a00      	cmp	r2, #0
 800c420:	f000 80a0 	beq.w	800c564 <_dtoa_r+0x48c>
 800c424:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c428:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c42c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c430:	f140 8098 	bpl.w	800c564 <_dtoa_r+0x48c>
 800c434:	f1b9 0f00 	cmp.w	r9, #0
 800c438:	f000 8094 	beq.w	800c564 <_dtoa_r+0x48c>
 800c43c:	f1ba 0f00 	cmp.w	sl, #0
 800c440:	dd2f      	ble.n	800c4a2 <_dtoa_r+0x3ca>
 800c442:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800c446:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c44a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c44e:	f10b 32ff 	add.w	r2, fp, #4294967295
 800c452:	3101      	adds	r1, #1
 800c454:	4654      	mov	r4, sl
 800c456:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c45a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800c45e:	ee07 1a90 	vmov	s15, r1
 800c462:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c466:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c46a:	ee15 7a90 	vmov	r7, s11
 800c46e:	ec51 0b15 	vmov	r0, r1, d5
 800c472:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800c476:	2c00      	cmp	r4, #0
 800c478:	d177      	bne.n	800c56a <_dtoa_r+0x492>
 800c47a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c47e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c482:	ec41 0b17 	vmov	d7, r0, r1
 800c486:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c48a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c48e:	f300 826a 	bgt.w	800c966 <_dtoa_r+0x88e>
 800c492:	eeb1 7b47 	vneg.f64	d7, d7
 800c496:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c49e:	f100 8260 	bmi.w	800c962 <_dtoa_r+0x88a>
 800c4a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c4a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c4a8:	2a00      	cmp	r2, #0
 800c4aa:	f2c0 811d 	blt.w	800c6e8 <_dtoa_r+0x610>
 800c4ae:	f1bb 0f0e 	cmp.w	fp, #14
 800c4b2:	f300 8119 	bgt.w	800c6e8 <_dtoa_r+0x610>
 800c4b6:	4b8a      	ldr	r3, [pc, #552]	; (800c6e0 <_dtoa_r+0x608>)
 800c4b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c4bc:	ed93 6b00 	vldr	d6, [r3]
 800c4c0:	9b08      	ldr	r3, [sp, #32]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	f280 80b7 	bge.w	800c636 <_dtoa_r+0x55e>
 800c4c8:	f1b9 0f00 	cmp.w	r9, #0
 800c4cc:	f300 80b3 	bgt.w	800c636 <_dtoa_r+0x55e>
 800c4d0:	f040 8246 	bne.w	800c960 <_dtoa_r+0x888>
 800c4d4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c4d8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c4dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c4e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c4e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4e8:	464c      	mov	r4, r9
 800c4ea:	464f      	mov	r7, r9
 800c4ec:	f280 821c 	bge.w	800c928 <_dtoa_r+0x850>
 800c4f0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c4f4:	2331      	movs	r3, #49	; 0x31
 800c4f6:	f808 3b01 	strb.w	r3, [r8], #1
 800c4fa:	f10b 0b01 	add.w	fp, fp, #1
 800c4fe:	e218      	b.n	800c932 <_dtoa_r+0x85a>
 800c500:	2102      	movs	r1, #2
 800c502:	e780      	b.n	800c406 <_dtoa_r+0x32e>
 800c504:	07d4      	lsls	r4, r2, #31
 800c506:	d504      	bpl.n	800c512 <_dtoa_r+0x43a>
 800c508:	ed90 6b00 	vldr	d6, [r0]
 800c50c:	3101      	adds	r1, #1
 800c50e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c512:	1052      	asrs	r2, r2, #1
 800c514:	3008      	adds	r0, #8
 800c516:	e777      	b.n	800c408 <_dtoa_r+0x330>
 800c518:	d022      	beq.n	800c560 <_dtoa_r+0x488>
 800c51a:	f1cb 0200 	rsb	r2, fp, #0
 800c51e:	4970      	ldr	r1, [pc, #448]	; (800c6e0 <_dtoa_r+0x608>)
 800c520:	f002 000f 	and.w	r0, r2, #15
 800c524:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c528:	ed91 7b00 	vldr	d7, [r1]
 800c52c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800c530:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c534:	486b      	ldr	r0, [pc, #428]	; (800c6e4 <_dtoa_r+0x60c>)
 800c536:	1112      	asrs	r2, r2, #4
 800c538:	2400      	movs	r4, #0
 800c53a:	2102      	movs	r1, #2
 800c53c:	b92a      	cbnz	r2, 800c54a <_dtoa_r+0x472>
 800c53e:	2c00      	cmp	r4, #0
 800c540:	f43f af6a 	beq.w	800c418 <_dtoa_r+0x340>
 800c544:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c548:	e766      	b.n	800c418 <_dtoa_r+0x340>
 800c54a:	07d7      	lsls	r7, r2, #31
 800c54c:	d505      	bpl.n	800c55a <_dtoa_r+0x482>
 800c54e:	ed90 6b00 	vldr	d6, [r0]
 800c552:	3101      	adds	r1, #1
 800c554:	2401      	movs	r4, #1
 800c556:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c55a:	1052      	asrs	r2, r2, #1
 800c55c:	3008      	adds	r0, #8
 800c55e:	e7ed      	b.n	800c53c <_dtoa_r+0x464>
 800c560:	2102      	movs	r1, #2
 800c562:	e759      	b.n	800c418 <_dtoa_r+0x340>
 800c564:	465a      	mov	r2, fp
 800c566:	464c      	mov	r4, r9
 800c568:	e775      	b.n	800c456 <_dtoa_r+0x37e>
 800c56a:	ec41 0b17 	vmov	d7, r0, r1
 800c56e:	495c      	ldr	r1, [pc, #368]	; (800c6e0 <_dtoa_r+0x608>)
 800c570:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800c574:	ed11 4b02 	vldr	d4, [r1, #-8]
 800c578:	9901      	ldr	r1, [sp, #4]
 800c57a:	440c      	add	r4, r1
 800c57c:	9907      	ldr	r1, [sp, #28]
 800c57e:	b351      	cbz	r1, 800c5d6 <_dtoa_r+0x4fe>
 800c580:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800c584:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800c588:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c58c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c590:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c594:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c598:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c59c:	ee14 1a90 	vmov	r1, s9
 800c5a0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c5a4:	3130      	adds	r1, #48	; 0x30
 800c5a6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c5aa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c5ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5b2:	f808 1b01 	strb.w	r1, [r8], #1
 800c5b6:	d439      	bmi.n	800c62c <_dtoa_r+0x554>
 800c5b8:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c5bc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c5c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5c4:	d472      	bmi.n	800c6ac <_dtoa_r+0x5d4>
 800c5c6:	45a0      	cmp	r8, r4
 800c5c8:	f43f af6b 	beq.w	800c4a2 <_dtoa_r+0x3ca>
 800c5cc:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c5d0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c5d4:	e7e0      	b.n	800c598 <_dtoa_r+0x4c0>
 800c5d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c5da:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c5de:	4620      	mov	r0, r4
 800c5e0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c5e4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c5e8:	ee14 1a90 	vmov	r1, s9
 800c5ec:	3130      	adds	r1, #48	; 0x30
 800c5ee:	f808 1b01 	strb.w	r1, [r8], #1
 800c5f2:	45a0      	cmp	r8, r4
 800c5f4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c5f8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c5fc:	d118      	bne.n	800c630 <_dtoa_r+0x558>
 800c5fe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c602:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c606:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c60a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c60e:	dc4d      	bgt.n	800c6ac <_dtoa_r+0x5d4>
 800c610:	ee35 5b47 	vsub.f64	d5, d5, d7
 800c614:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800c618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c61c:	f57f af41 	bpl.w	800c4a2 <_dtoa_r+0x3ca>
 800c620:	4680      	mov	r8, r0
 800c622:	3801      	subs	r0, #1
 800c624:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800c628:	2b30      	cmp	r3, #48	; 0x30
 800c62a:	d0f9      	beq.n	800c620 <_dtoa_r+0x548>
 800c62c:	4693      	mov	fp, r2
 800c62e:	e02a      	b.n	800c686 <_dtoa_r+0x5ae>
 800c630:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c634:	e7d6      	b.n	800c5e4 <_dtoa_r+0x50c>
 800c636:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c63a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800c63e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c642:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c646:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c64a:	ee15 3a10 	vmov	r3, s10
 800c64e:	3330      	adds	r3, #48	; 0x30
 800c650:	f808 3b01 	strb.w	r3, [r8], #1
 800c654:	9b01      	ldr	r3, [sp, #4]
 800c656:	eba8 0303 	sub.w	r3, r8, r3
 800c65a:	4599      	cmp	r9, r3
 800c65c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c660:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c664:	d133      	bne.n	800c6ce <_dtoa_r+0x5f6>
 800c666:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c66a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c66e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c672:	dc1a      	bgt.n	800c6aa <_dtoa_r+0x5d2>
 800c674:	eeb4 7b46 	vcmp.f64	d7, d6
 800c678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c67c:	d103      	bne.n	800c686 <_dtoa_r+0x5ae>
 800c67e:	ee15 3a10 	vmov	r3, s10
 800c682:	07d9      	lsls	r1, r3, #31
 800c684:	d411      	bmi.n	800c6aa <_dtoa_r+0x5d2>
 800c686:	4629      	mov	r1, r5
 800c688:	4630      	mov	r0, r6
 800c68a:	f000 fbd1 	bl	800ce30 <_Bfree>
 800c68e:	2300      	movs	r3, #0
 800c690:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c692:	f888 3000 	strb.w	r3, [r8]
 800c696:	f10b 0301 	add.w	r3, fp, #1
 800c69a:	6013      	str	r3, [r2, #0]
 800c69c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	f43f ad69 	beq.w	800c176 <_dtoa_r+0x9e>
 800c6a4:	f8c3 8000 	str.w	r8, [r3]
 800c6a8:	e565      	b.n	800c176 <_dtoa_r+0x9e>
 800c6aa:	465a      	mov	r2, fp
 800c6ac:	4643      	mov	r3, r8
 800c6ae:	4698      	mov	r8, r3
 800c6b0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800c6b4:	2939      	cmp	r1, #57	; 0x39
 800c6b6:	d106      	bne.n	800c6c6 <_dtoa_r+0x5ee>
 800c6b8:	9901      	ldr	r1, [sp, #4]
 800c6ba:	4299      	cmp	r1, r3
 800c6bc:	d1f7      	bne.n	800c6ae <_dtoa_r+0x5d6>
 800c6be:	9801      	ldr	r0, [sp, #4]
 800c6c0:	2130      	movs	r1, #48	; 0x30
 800c6c2:	3201      	adds	r2, #1
 800c6c4:	7001      	strb	r1, [r0, #0]
 800c6c6:	7819      	ldrb	r1, [r3, #0]
 800c6c8:	3101      	adds	r1, #1
 800c6ca:	7019      	strb	r1, [r3, #0]
 800c6cc:	e7ae      	b.n	800c62c <_dtoa_r+0x554>
 800c6ce:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c6d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c6d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6da:	d1b2      	bne.n	800c642 <_dtoa_r+0x56a>
 800c6dc:	e7d3      	b.n	800c686 <_dtoa_r+0x5ae>
 800c6de:	bf00      	nop
 800c6e0:	0800f608 	.word	0x0800f608
 800c6e4:	0800f5e0 	.word	0x0800f5e0
 800c6e8:	9907      	ldr	r1, [sp, #28]
 800c6ea:	2900      	cmp	r1, #0
 800c6ec:	f000 80d0 	beq.w	800c890 <_dtoa_r+0x7b8>
 800c6f0:	9906      	ldr	r1, [sp, #24]
 800c6f2:	2901      	cmp	r1, #1
 800c6f4:	f300 80b4 	bgt.w	800c860 <_dtoa_r+0x788>
 800c6f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c6fa:	2900      	cmp	r1, #0
 800c6fc:	f000 80ac 	beq.w	800c858 <_dtoa_r+0x780>
 800c700:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c704:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c708:	461c      	mov	r4, r3
 800c70a:	9309      	str	r3, [sp, #36]	; 0x24
 800c70c:	9b04      	ldr	r3, [sp, #16]
 800c70e:	4413      	add	r3, r2
 800c710:	9304      	str	r3, [sp, #16]
 800c712:	9b05      	ldr	r3, [sp, #20]
 800c714:	2101      	movs	r1, #1
 800c716:	4413      	add	r3, r2
 800c718:	4630      	mov	r0, r6
 800c71a:	9305      	str	r3, [sp, #20]
 800c71c:	f000 fc88 	bl	800d030 <__i2b>
 800c720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c722:	4607      	mov	r7, r0
 800c724:	f1b8 0f00 	cmp.w	r8, #0
 800c728:	d00d      	beq.n	800c746 <_dtoa_r+0x66e>
 800c72a:	9a05      	ldr	r2, [sp, #20]
 800c72c:	2a00      	cmp	r2, #0
 800c72e:	dd0a      	ble.n	800c746 <_dtoa_r+0x66e>
 800c730:	4542      	cmp	r2, r8
 800c732:	9904      	ldr	r1, [sp, #16]
 800c734:	bfa8      	it	ge
 800c736:	4642      	movge	r2, r8
 800c738:	1a89      	subs	r1, r1, r2
 800c73a:	9104      	str	r1, [sp, #16]
 800c73c:	9905      	ldr	r1, [sp, #20]
 800c73e:	eba8 0802 	sub.w	r8, r8, r2
 800c742:	1a8a      	subs	r2, r1, r2
 800c744:	9205      	str	r2, [sp, #20]
 800c746:	b303      	cbz	r3, 800c78a <_dtoa_r+0x6b2>
 800c748:	9a07      	ldr	r2, [sp, #28]
 800c74a:	2a00      	cmp	r2, #0
 800c74c:	f000 80a5 	beq.w	800c89a <_dtoa_r+0x7c2>
 800c750:	2c00      	cmp	r4, #0
 800c752:	dd13      	ble.n	800c77c <_dtoa_r+0x6a4>
 800c754:	4639      	mov	r1, r7
 800c756:	4622      	mov	r2, r4
 800c758:	4630      	mov	r0, r6
 800c75a:	930d      	str	r3, [sp, #52]	; 0x34
 800c75c:	f000 fd28 	bl	800d1b0 <__pow5mult>
 800c760:	462a      	mov	r2, r5
 800c762:	4601      	mov	r1, r0
 800c764:	4607      	mov	r7, r0
 800c766:	4630      	mov	r0, r6
 800c768:	f000 fc78 	bl	800d05c <__multiply>
 800c76c:	4629      	mov	r1, r5
 800c76e:	9009      	str	r0, [sp, #36]	; 0x24
 800c770:	4630      	mov	r0, r6
 800c772:	f000 fb5d 	bl	800ce30 <_Bfree>
 800c776:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c778:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c77a:	4615      	mov	r5, r2
 800c77c:	1b1a      	subs	r2, r3, r4
 800c77e:	d004      	beq.n	800c78a <_dtoa_r+0x6b2>
 800c780:	4629      	mov	r1, r5
 800c782:	4630      	mov	r0, r6
 800c784:	f000 fd14 	bl	800d1b0 <__pow5mult>
 800c788:	4605      	mov	r5, r0
 800c78a:	2101      	movs	r1, #1
 800c78c:	4630      	mov	r0, r6
 800c78e:	f000 fc4f 	bl	800d030 <__i2b>
 800c792:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c794:	2b00      	cmp	r3, #0
 800c796:	4604      	mov	r4, r0
 800c798:	f340 8081 	ble.w	800c89e <_dtoa_r+0x7c6>
 800c79c:	461a      	mov	r2, r3
 800c79e:	4601      	mov	r1, r0
 800c7a0:	4630      	mov	r0, r6
 800c7a2:	f000 fd05 	bl	800d1b0 <__pow5mult>
 800c7a6:	9b06      	ldr	r3, [sp, #24]
 800c7a8:	2b01      	cmp	r3, #1
 800c7aa:	4604      	mov	r4, r0
 800c7ac:	dd7a      	ble.n	800c8a4 <_dtoa_r+0x7cc>
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	9309      	str	r3, [sp, #36]	; 0x24
 800c7b2:	6922      	ldr	r2, [r4, #16]
 800c7b4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c7b8:	6910      	ldr	r0, [r2, #16]
 800c7ba:	f000 fbeb 	bl	800cf94 <__hi0bits>
 800c7be:	f1c0 0020 	rsb	r0, r0, #32
 800c7c2:	9b05      	ldr	r3, [sp, #20]
 800c7c4:	4418      	add	r0, r3
 800c7c6:	f010 001f 	ands.w	r0, r0, #31
 800c7ca:	f000 8093 	beq.w	800c8f4 <_dtoa_r+0x81c>
 800c7ce:	f1c0 0220 	rsb	r2, r0, #32
 800c7d2:	2a04      	cmp	r2, #4
 800c7d4:	f340 8085 	ble.w	800c8e2 <_dtoa_r+0x80a>
 800c7d8:	9b04      	ldr	r3, [sp, #16]
 800c7da:	f1c0 001c 	rsb	r0, r0, #28
 800c7de:	4403      	add	r3, r0
 800c7e0:	9304      	str	r3, [sp, #16]
 800c7e2:	9b05      	ldr	r3, [sp, #20]
 800c7e4:	4480      	add	r8, r0
 800c7e6:	4403      	add	r3, r0
 800c7e8:	9305      	str	r3, [sp, #20]
 800c7ea:	9b04      	ldr	r3, [sp, #16]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	dd05      	ble.n	800c7fc <_dtoa_r+0x724>
 800c7f0:	4629      	mov	r1, r5
 800c7f2:	461a      	mov	r2, r3
 800c7f4:	4630      	mov	r0, r6
 800c7f6:	f000 fd35 	bl	800d264 <__lshift>
 800c7fa:	4605      	mov	r5, r0
 800c7fc:	9b05      	ldr	r3, [sp, #20]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	dd05      	ble.n	800c80e <_dtoa_r+0x736>
 800c802:	4621      	mov	r1, r4
 800c804:	461a      	mov	r2, r3
 800c806:	4630      	mov	r0, r6
 800c808:	f000 fd2c 	bl	800d264 <__lshift>
 800c80c:	4604      	mov	r4, r0
 800c80e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c810:	2b00      	cmp	r3, #0
 800c812:	d071      	beq.n	800c8f8 <_dtoa_r+0x820>
 800c814:	4621      	mov	r1, r4
 800c816:	4628      	mov	r0, r5
 800c818:	f000 fd90 	bl	800d33c <__mcmp>
 800c81c:	2800      	cmp	r0, #0
 800c81e:	da6b      	bge.n	800c8f8 <_dtoa_r+0x820>
 800c820:	2300      	movs	r3, #0
 800c822:	4629      	mov	r1, r5
 800c824:	220a      	movs	r2, #10
 800c826:	4630      	mov	r0, r6
 800c828:	f000 fb24 	bl	800ce74 <__multadd>
 800c82c:	9b07      	ldr	r3, [sp, #28]
 800c82e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c832:	4605      	mov	r5, r0
 800c834:	2b00      	cmp	r3, #0
 800c836:	f000 8197 	beq.w	800cb68 <_dtoa_r+0xa90>
 800c83a:	4639      	mov	r1, r7
 800c83c:	2300      	movs	r3, #0
 800c83e:	220a      	movs	r2, #10
 800c840:	4630      	mov	r0, r6
 800c842:	f000 fb17 	bl	800ce74 <__multadd>
 800c846:	f1ba 0f00 	cmp.w	sl, #0
 800c84a:	4607      	mov	r7, r0
 800c84c:	f300 8093 	bgt.w	800c976 <_dtoa_r+0x89e>
 800c850:	9b06      	ldr	r3, [sp, #24]
 800c852:	2b02      	cmp	r3, #2
 800c854:	dc57      	bgt.n	800c906 <_dtoa_r+0x82e>
 800c856:	e08e      	b.n	800c976 <_dtoa_r+0x89e>
 800c858:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c85a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c85e:	e751      	b.n	800c704 <_dtoa_r+0x62c>
 800c860:	f109 34ff 	add.w	r4, r9, #4294967295
 800c864:	42a3      	cmp	r3, r4
 800c866:	bfbf      	itttt	lt
 800c868:	1ae2      	sublt	r2, r4, r3
 800c86a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c86c:	189b      	addlt	r3, r3, r2
 800c86e:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c870:	bfae      	itee	ge
 800c872:	1b1c      	subge	r4, r3, r4
 800c874:	4623      	movlt	r3, r4
 800c876:	2400      	movlt	r4, #0
 800c878:	f1b9 0f00 	cmp.w	r9, #0
 800c87c:	bfb5      	itete	lt
 800c87e:	9a04      	ldrlt	r2, [sp, #16]
 800c880:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800c884:	eba2 0809 	sublt.w	r8, r2, r9
 800c888:	464a      	movge	r2, r9
 800c88a:	bfb8      	it	lt
 800c88c:	2200      	movlt	r2, #0
 800c88e:	e73c      	b.n	800c70a <_dtoa_r+0x632>
 800c890:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c894:	9f07      	ldr	r7, [sp, #28]
 800c896:	461c      	mov	r4, r3
 800c898:	e744      	b.n	800c724 <_dtoa_r+0x64c>
 800c89a:	461a      	mov	r2, r3
 800c89c:	e770      	b.n	800c780 <_dtoa_r+0x6a8>
 800c89e:	9b06      	ldr	r3, [sp, #24]
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	dc18      	bgt.n	800c8d6 <_dtoa_r+0x7fe>
 800c8a4:	9b02      	ldr	r3, [sp, #8]
 800c8a6:	b9b3      	cbnz	r3, 800c8d6 <_dtoa_r+0x7fe>
 800c8a8:	9b03      	ldr	r3, [sp, #12]
 800c8aa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c8ae:	b9a2      	cbnz	r2, 800c8da <_dtoa_r+0x802>
 800c8b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c8b4:	0d12      	lsrs	r2, r2, #20
 800c8b6:	0512      	lsls	r2, r2, #20
 800c8b8:	b18a      	cbz	r2, 800c8de <_dtoa_r+0x806>
 800c8ba:	9b04      	ldr	r3, [sp, #16]
 800c8bc:	3301      	adds	r3, #1
 800c8be:	9304      	str	r3, [sp, #16]
 800c8c0:	9b05      	ldr	r3, [sp, #20]
 800c8c2:	3301      	adds	r3, #1
 800c8c4:	9305      	str	r3, [sp, #20]
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	9309      	str	r3, [sp, #36]	; 0x24
 800c8ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	f47f af70 	bne.w	800c7b2 <_dtoa_r+0x6da>
 800c8d2:	2001      	movs	r0, #1
 800c8d4:	e775      	b.n	800c7c2 <_dtoa_r+0x6ea>
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	e7f6      	b.n	800c8c8 <_dtoa_r+0x7f0>
 800c8da:	9b02      	ldr	r3, [sp, #8]
 800c8dc:	e7f4      	b.n	800c8c8 <_dtoa_r+0x7f0>
 800c8de:	9209      	str	r2, [sp, #36]	; 0x24
 800c8e0:	e7f3      	b.n	800c8ca <_dtoa_r+0x7f2>
 800c8e2:	d082      	beq.n	800c7ea <_dtoa_r+0x712>
 800c8e4:	9b04      	ldr	r3, [sp, #16]
 800c8e6:	321c      	adds	r2, #28
 800c8e8:	4413      	add	r3, r2
 800c8ea:	9304      	str	r3, [sp, #16]
 800c8ec:	9b05      	ldr	r3, [sp, #20]
 800c8ee:	4490      	add	r8, r2
 800c8f0:	4413      	add	r3, r2
 800c8f2:	e779      	b.n	800c7e8 <_dtoa_r+0x710>
 800c8f4:	4602      	mov	r2, r0
 800c8f6:	e7f5      	b.n	800c8e4 <_dtoa_r+0x80c>
 800c8f8:	f1b9 0f00 	cmp.w	r9, #0
 800c8fc:	dc36      	bgt.n	800c96c <_dtoa_r+0x894>
 800c8fe:	9b06      	ldr	r3, [sp, #24]
 800c900:	2b02      	cmp	r3, #2
 800c902:	dd33      	ble.n	800c96c <_dtoa_r+0x894>
 800c904:	46ca      	mov	sl, r9
 800c906:	f1ba 0f00 	cmp.w	sl, #0
 800c90a:	d10d      	bne.n	800c928 <_dtoa_r+0x850>
 800c90c:	4621      	mov	r1, r4
 800c90e:	4653      	mov	r3, sl
 800c910:	2205      	movs	r2, #5
 800c912:	4630      	mov	r0, r6
 800c914:	f000 faae 	bl	800ce74 <__multadd>
 800c918:	4601      	mov	r1, r0
 800c91a:	4604      	mov	r4, r0
 800c91c:	4628      	mov	r0, r5
 800c91e:	f000 fd0d 	bl	800d33c <__mcmp>
 800c922:	2800      	cmp	r0, #0
 800c924:	f73f ade4 	bgt.w	800c4f0 <_dtoa_r+0x418>
 800c928:	9b08      	ldr	r3, [sp, #32]
 800c92a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c92e:	ea6f 0b03 	mvn.w	fp, r3
 800c932:	f04f 0900 	mov.w	r9, #0
 800c936:	4621      	mov	r1, r4
 800c938:	4630      	mov	r0, r6
 800c93a:	f000 fa79 	bl	800ce30 <_Bfree>
 800c93e:	2f00      	cmp	r7, #0
 800c940:	f43f aea1 	beq.w	800c686 <_dtoa_r+0x5ae>
 800c944:	f1b9 0f00 	cmp.w	r9, #0
 800c948:	d005      	beq.n	800c956 <_dtoa_r+0x87e>
 800c94a:	45b9      	cmp	r9, r7
 800c94c:	d003      	beq.n	800c956 <_dtoa_r+0x87e>
 800c94e:	4649      	mov	r1, r9
 800c950:	4630      	mov	r0, r6
 800c952:	f000 fa6d 	bl	800ce30 <_Bfree>
 800c956:	4639      	mov	r1, r7
 800c958:	4630      	mov	r0, r6
 800c95a:	f000 fa69 	bl	800ce30 <_Bfree>
 800c95e:	e692      	b.n	800c686 <_dtoa_r+0x5ae>
 800c960:	2400      	movs	r4, #0
 800c962:	4627      	mov	r7, r4
 800c964:	e7e0      	b.n	800c928 <_dtoa_r+0x850>
 800c966:	4693      	mov	fp, r2
 800c968:	4627      	mov	r7, r4
 800c96a:	e5c1      	b.n	800c4f0 <_dtoa_r+0x418>
 800c96c:	9b07      	ldr	r3, [sp, #28]
 800c96e:	46ca      	mov	sl, r9
 800c970:	2b00      	cmp	r3, #0
 800c972:	f000 8100 	beq.w	800cb76 <_dtoa_r+0xa9e>
 800c976:	f1b8 0f00 	cmp.w	r8, #0
 800c97a:	dd05      	ble.n	800c988 <_dtoa_r+0x8b0>
 800c97c:	4639      	mov	r1, r7
 800c97e:	4642      	mov	r2, r8
 800c980:	4630      	mov	r0, r6
 800c982:	f000 fc6f 	bl	800d264 <__lshift>
 800c986:	4607      	mov	r7, r0
 800c988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d05d      	beq.n	800ca4a <_dtoa_r+0x972>
 800c98e:	6879      	ldr	r1, [r7, #4]
 800c990:	4630      	mov	r0, r6
 800c992:	f000 fa0d 	bl	800cdb0 <_Balloc>
 800c996:	4680      	mov	r8, r0
 800c998:	b928      	cbnz	r0, 800c9a6 <_dtoa_r+0x8ce>
 800c99a:	4b82      	ldr	r3, [pc, #520]	; (800cba4 <_dtoa_r+0xacc>)
 800c99c:	4602      	mov	r2, r0
 800c99e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c9a2:	f7ff bbb1 	b.w	800c108 <_dtoa_r+0x30>
 800c9a6:	693a      	ldr	r2, [r7, #16]
 800c9a8:	3202      	adds	r2, #2
 800c9aa:	0092      	lsls	r2, r2, #2
 800c9ac:	f107 010c 	add.w	r1, r7, #12
 800c9b0:	300c      	adds	r0, #12
 800c9b2:	f001 ffc3 	bl	800e93c <memcpy>
 800c9b6:	2201      	movs	r2, #1
 800c9b8:	4641      	mov	r1, r8
 800c9ba:	4630      	mov	r0, r6
 800c9bc:	f000 fc52 	bl	800d264 <__lshift>
 800c9c0:	9b01      	ldr	r3, [sp, #4]
 800c9c2:	3301      	adds	r3, #1
 800c9c4:	9304      	str	r3, [sp, #16]
 800c9c6:	9b01      	ldr	r3, [sp, #4]
 800c9c8:	4453      	add	r3, sl
 800c9ca:	9308      	str	r3, [sp, #32]
 800c9cc:	9b02      	ldr	r3, [sp, #8]
 800c9ce:	f003 0301 	and.w	r3, r3, #1
 800c9d2:	46b9      	mov	r9, r7
 800c9d4:	9307      	str	r3, [sp, #28]
 800c9d6:	4607      	mov	r7, r0
 800c9d8:	9b04      	ldr	r3, [sp, #16]
 800c9da:	4621      	mov	r1, r4
 800c9dc:	3b01      	subs	r3, #1
 800c9de:	4628      	mov	r0, r5
 800c9e0:	9302      	str	r3, [sp, #8]
 800c9e2:	f7ff faef 	bl	800bfc4 <quorem>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	3330      	adds	r3, #48	; 0x30
 800c9ea:	9005      	str	r0, [sp, #20]
 800c9ec:	4649      	mov	r1, r9
 800c9ee:	4628      	mov	r0, r5
 800c9f0:	9309      	str	r3, [sp, #36]	; 0x24
 800c9f2:	f000 fca3 	bl	800d33c <__mcmp>
 800c9f6:	463a      	mov	r2, r7
 800c9f8:	4682      	mov	sl, r0
 800c9fa:	4621      	mov	r1, r4
 800c9fc:	4630      	mov	r0, r6
 800c9fe:	f000 fcb9 	bl	800d374 <__mdiff>
 800ca02:	68c2      	ldr	r2, [r0, #12]
 800ca04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca06:	4680      	mov	r8, r0
 800ca08:	bb0a      	cbnz	r2, 800ca4e <_dtoa_r+0x976>
 800ca0a:	4601      	mov	r1, r0
 800ca0c:	4628      	mov	r0, r5
 800ca0e:	f000 fc95 	bl	800d33c <__mcmp>
 800ca12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca14:	4602      	mov	r2, r0
 800ca16:	4641      	mov	r1, r8
 800ca18:	4630      	mov	r0, r6
 800ca1a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800ca1e:	f000 fa07 	bl	800ce30 <_Bfree>
 800ca22:	9b06      	ldr	r3, [sp, #24]
 800ca24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca26:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ca2a:	ea43 0102 	orr.w	r1, r3, r2
 800ca2e:	9b07      	ldr	r3, [sp, #28]
 800ca30:	4319      	orrs	r1, r3
 800ca32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca34:	d10d      	bne.n	800ca52 <_dtoa_r+0x97a>
 800ca36:	2b39      	cmp	r3, #57	; 0x39
 800ca38:	d029      	beq.n	800ca8e <_dtoa_r+0x9b6>
 800ca3a:	f1ba 0f00 	cmp.w	sl, #0
 800ca3e:	dd01      	ble.n	800ca44 <_dtoa_r+0x96c>
 800ca40:	9b05      	ldr	r3, [sp, #20]
 800ca42:	3331      	adds	r3, #49	; 0x31
 800ca44:	9a02      	ldr	r2, [sp, #8]
 800ca46:	7013      	strb	r3, [r2, #0]
 800ca48:	e775      	b.n	800c936 <_dtoa_r+0x85e>
 800ca4a:	4638      	mov	r0, r7
 800ca4c:	e7b8      	b.n	800c9c0 <_dtoa_r+0x8e8>
 800ca4e:	2201      	movs	r2, #1
 800ca50:	e7e1      	b.n	800ca16 <_dtoa_r+0x93e>
 800ca52:	f1ba 0f00 	cmp.w	sl, #0
 800ca56:	db06      	blt.n	800ca66 <_dtoa_r+0x98e>
 800ca58:	9906      	ldr	r1, [sp, #24]
 800ca5a:	ea41 0a0a 	orr.w	sl, r1, sl
 800ca5e:	9907      	ldr	r1, [sp, #28]
 800ca60:	ea5a 0a01 	orrs.w	sl, sl, r1
 800ca64:	d120      	bne.n	800caa8 <_dtoa_r+0x9d0>
 800ca66:	2a00      	cmp	r2, #0
 800ca68:	ddec      	ble.n	800ca44 <_dtoa_r+0x96c>
 800ca6a:	4629      	mov	r1, r5
 800ca6c:	2201      	movs	r2, #1
 800ca6e:	4630      	mov	r0, r6
 800ca70:	9304      	str	r3, [sp, #16]
 800ca72:	f000 fbf7 	bl	800d264 <__lshift>
 800ca76:	4621      	mov	r1, r4
 800ca78:	4605      	mov	r5, r0
 800ca7a:	f000 fc5f 	bl	800d33c <__mcmp>
 800ca7e:	2800      	cmp	r0, #0
 800ca80:	9b04      	ldr	r3, [sp, #16]
 800ca82:	dc02      	bgt.n	800ca8a <_dtoa_r+0x9b2>
 800ca84:	d1de      	bne.n	800ca44 <_dtoa_r+0x96c>
 800ca86:	07da      	lsls	r2, r3, #31
 800ca88:	d5dc      	bpl.n	800ca44 <_dtoa_r+0x96c>
 800ca8a:	2b39      	cmp	r3, #57	; 0x39
 800ca8c:	d1d8      	bne.n	800ca40 <_dtoa_r+0x968>
 800ca8e:	9a02      	ldr	r2, [sp, #8]
 800ca90:	2339      	movs	r3, #57	; 0x39
 800ca92:	7013      	strb	r3, [r2, #0]
 800ca94:	4643      	mov	r3, r8
 800ca96:	4698      	mov	r8, r3
 800ca98:	3b01      	subs	r3, #1
 800ca9a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800ca9e:	2a39      	cmp	r2, #57	; 0x39
 800caa0:	d051      	beq.n	800cb46 <_dtoa_r+0xa6e>
 800caa2:	3201      	adds	r2, #1
 800caa4:	701a      	strb	r2, [r3, #0]
 800caa6:	e746      	b.n	800c936 <_dtoa_r+0x85e>
 800caa8:	2a00      	cmp	r2, #0
 800caaa:	dd03      	ble.n	800cab4 <_dtoa_r+0x9dc>
 800caac:	2b39      	cmp	r3, #57	; 0x39
 800caae:	d0ee      	beq.n	800ca8e <_dtoa_r+0x9b6>
 800cab0:	3301      	adds	r3, #1
 800cab2:	e7c7      	b.n	800ca44 <_dtoa_r+0x96c>
 800cab4:	9a04      	ldr	r2, [sp, #16]
 800cab6:	9908      	ldr	r1, [sp, #32]
 800cab8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cabc:	428a      	cmp	r2, r1
 800cabe:	d02b      	beq.n	800cb18 <_dtoa_r+0xa40>
 800cac0:	4629      	mov	r1, r5
 800cac2:	2300      	movs	r3, #0
 800cac4:	220a      	movs	r2, #10
 800cac6:	4630      	mov	r0, r6
 800cac8:	f000 f9d4 	bl	800ce74 <__multadd>
 800cacc:	45b9      	cmp	r9, r7
 800cace:	4605      	mov	r5, r0
 800cad0:	f04f 0300 	mov.w	r3, #0
 800cad4:	f04f 020a 	mov.w	r2, #10
 800cad8:	4649      	mov	r1, r9
 800cada:	4630      	mov	r0, r6
 800cadc:	d107      	bne.n	800caee <_dtoa_r+0xa16>
 800cade:	f000 f9c9 	bl	800ce74 <__multadd>
 800cae2:	4681      	mov	r9, r0
 800cae4:	4607      	mov	r7, r0
 800cae6:	9b04      	ldr	r3, [sp, #16]
 800cae8:	3301      	adds	r3, #1
 800caea:	9304      	str	r3, [sp, #16]
 800caec:	e774      	b.n	800c9d8 <_dtoa_r+0x900>
 800caee:	f000 f9c1 	bl	800ce74 <__multadd>
 800caf2:	4639      	mov	r1, r7
 800caf4:	4681      	mov	r9, r0
 800caf6:	2300      	movs	r3, #0
 800caf8:	220a      	movs	r2, #10
 800cafa:	4630      	mov	r0, r6
 800cafc:	f000 f9ba 	bl	800ce74 <__multadd>
 800cb00:	4607      	mov	r7, r0
 800cb02:	e7f0      	b.n	800cae6 <_dtoa_r+0xa0e>
 800cb04:	f1ba 0f00 	cmp.w	sl, #0
 800cb08:	9a01      	ldr	r2, [sp, #4]
 800cb0a:	bfcc      	ite	gt
 800cb0c:	46d0      	movgt	r8, sl
 800cb0e:	f04f 0801 	movle.w	r8, #1
 800cb12:	4490      	add	r8, r2
 800cb14:	f04f 0900 	mov.w	r9, #0
 800cb18:	4629      	mov	r1, r5
 800cb1a:	2201      	movs	r2, #1
 800cb1c:	4630      	mov	r0, r6
 800cb1e:	9302      	str	r3, [sp, #8]
 800cb20:	f000 fba0 	bl	800d264 <__lshift>
 800cb24:	4621      	mov	r1, r4
 800cb26:	4605      	mov	r5, r0
 800cb28:	f000 fc08 	bl	800d33c <__mcmp>
 800cb2c:	2800      	cmp	r0, #0
 800cb2e:	dcb1      	bgt.n	800ca94 <_dtoa_r+0x9bc>
 800cb30:	d102      	bne.n	800cb38 <_dtoa_r+0xa60>
 800cb32:	9b02      	ldr	r3, [sp, #8]
 800cb34:	07db      	lsls	r3, r3, #31
 800cb36:	d4ad      	bmi.n	800ca94 <_dtoa_r+0x9bc>
 800cb38:	4643      	mov	r3, r8
 800cb3a:	4698      	mov	r8, r3
 800cb3c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb40:	2a30      	cmp	r2, #48	; 0x30
 800cb42:	d0fa      	beq.n	800cb3a <_dtoa_r+0xa62>
 800cb44:	e6f7      	b.n	800c936 <_dtoa_r+0x85e>
 800cb46:	9a01      	ldr	r2, [sp, #4]
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d1a4      	bne.n	800ca96 <_dtoa_r+0x9be>
 800cb4c:	f10b 0b01 	add.w	fp, fp, #1
 800cb50:	2331      	movs	r3, #49	; 0x31
 800cb52:	e778      	b.n	800ca46 <_dtoa_r+0x96e>
 800cb54:	4b14      	ldr	r3, [pc, #80]	; (800cba8 <_dtoa_r+0xad0>)
 800cb56:	f7ff bb2a 	b.w	800c1ae <_dtoa_r+0xd6>
 800cb5a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	f47f ab05 	bne.w	800c16c <_dtoa_r+0x94>
 800cb62:	4b12      	ldr	r3, [pc, #72]	; (800cbac <_dtoa_r+0xad4>)
 800cb64:	f7ff bb23 	b.w	800c1ae <_dtoa_r+0xd6>
 800cb68:	f1ba 0f00 	cmp.w	sl, #0
 800cb6c:	dc03      	bgt.n	800cb76 <_dtoa_r+0xa9e>
 800cb6e:	9b06      	ldr	r3, [sp, #24]
 800cb70:	2b02      	cmp	r3, #2
 800cb72:	f73f aec8 	bgt.w	800c906 <_dtoa_r+0x82e>
 800cb76:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cb7a:	4621      	mov	r1, r4
 800cb7c:	4628      	mov	r0, r5
 800cb7e:	f7ff fa21 	bl	800bfc4 <quorem>
 800cb82:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800cb86:	f808 3b01 	strb.w	r3, [r8], #1
 800cb8a:	9a01      	ldr	r2, [sp, #4]
 800cb8c:	eba8 0202 	sub.w	r2, r8, r2
 800cb90:	4592      	cmp	sl, r2
 800cb92:	ddb7      	ble.n	800cb04 <_dtoa_r+0xa2c>
 800cb94:	4629      	mov	r1, r5
 800cb96:	2300      	movs	r3, #0
 800cb98:	220a      	movs	r2, #10
 800cb9a:	4630      	mov	r0, r6
 800cb9c:	f000 f96a 	bl	800ce74 <__multadd>
 800cba0:	4605      	mov	r5, r0
 800cba2:	e7ea      	b.n	800cb7a <_dtoa_r+0xaa2>
 800cba4:	0800f575 	.word	0x0800f575
 800cba8:	0800f4d0 	.word	0x0800f4d0
 800cbac:	0800f4f9 	.word	0x0800f4f9

0800cbb0 <_free_r>:
 800cbb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cbb2:	2900      	cmp	r1, #0
 800cbb4:	d044      	beq.n	800cc40 <_free_r+0x90>
 800cbb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbba:	9001      	str	r0, [sp, #4]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	f1a1 0404 	sub.w	r4, r1, #4
 800cbc2:	bfb8      	it	lt
 800cbc4:	18e4      	addlt	r4, r4, r3
 800cbc6:	f000 f8e7 	bl	800cd98 <__malloc_lock>
 800cbca:	4a1e      	ldr	r2, [pc, #120]	; (800cc44 <_free_r+0x94>)
 800cbcc:	9801      	ldr	r0, [sp, #4]
 800cbce:	6813      	ldr	r3, [r2, #0]
 800cbd0:	b933      	cbnz	r3, 800cbe0 <_free_r+0x30>
 800cbd2:	6063      	str	r3, [r4, #4]
 800cbd4:	6014      	str	r4, [r2, #0]
 800cbd6:	b003      	add	sp, #12
 800cbd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cbdc:	f000 b8e2 	b.w	800cda4 <__malloc_unlock>
 800cbe0:	42a3      	cmp	r3, r4
 800cbe2:	d908      	bls.n	800cbf6 <_free_r+0x46>
 800cbe4:	6825      	ldr	r5, [r4, #0]
 800cbe6:	1961      	adds	r1, r4, r5
 800cbe8:	428b      	cmp	r3, r1
 800cbea:	bf01      	itttt	eq
 800cbec:	6819      	ldreq	r1, [r3, #0]
 800cbee:	685b      	ldreq	r3, [r3, #4]
 800cbf0:	1949      	addeq	r1, r1, r5
 800cbf2:	6021      	streq	r1, [r4, #0]
 800cbf4:	e7ed      	b.n	800cbd2 <_free_r+0x22>
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	685b      	ldr	r3, [r3, #4]
 800cbfa:	b10b      	cbz	r3, 800cc00 <_free_r+0x50>
 800cbfc:	42a3      	cmp	r3, r4
 800cbfe:	d9fa      	bls.n	800cbf6 <_free_r+0x46>
 800cc00:	6811      	ldr	r1, [r2, #0]
 800cc02:	1855      	adds	r5, r2, r1
 800cc04:	42a5      	cmp	r5, r4
 800cc06:	d10b      	bne.n	800cc20 <_free_r+0x70>
 800cc08:	6824      	ldr	r4, [r4, #0]
 800cc0a:	4421      	add	r1, r4
 800cc0c:	1854      	adds	r4, r2, r1
 800cc0e:	42a3      	cmp	r3, r4
 800cc10:	6011      	str	r1, [r2, #0]
 800cc12:	d1e0      	bne.n	800cbd6 <_free_r+0x26>
 800cc14:	681c      	ldr	r4, [r3, #0]
 800cc16:	685b      	ldr	r3, [r3, #4]
 800cc18:	6053      	str	r3, [r2, #4]
 800cc1a:	440c      	add	r4, r1
 800cc1c:	6014      	str	r4, [r2, #0]
 800cc1e:	e7da      	b.n	800cbd6 <_free_r+0x26>
 800cc20:	d902      	bls.n	800cc28 <_free_r+0x78>
 800cc22:	230c      	movs	r3, #12
 800cc24:	6003      	str	r3, [r0, #0]
 800cc26:	e7d6      	b.n	800cbd6 <_free_r+0x26>
 800cc28:	6825      	ldr	r5, [r4, #0]
 800cc2a:	1961      	adds	r1, r4, r5
 800cc2c:	428b      	cmp	r3, r1
 800cc2e:	bf04      	itt	eq
 800cc30:	6819      	ldreq	r1, [r3, #0]
 800cc32:	685b      	ldreq	r3, [r3, #4]
 800cc34:	6063      	str	r3, [r4, #4]
 800cc36:	bf04      	itt	eq
 800cc38:	1949      	addeq	r1, r1, r5
 800cc3a:	6021      	streq	r1, [r4, #0]
 800cc3c:	6054      	str	r4, [r2, #4]
 800cc3e:	e7ca      	b.n	800cbd6 <_free_r+0x26>
 800cc40:	b003      	add	sp, #12
 800cc42:	bd30      	pop	{r4, r5, pc}
 800cc44:	24000678 	.word	0x24000678

0800cc48 <malloc>:
 800cc48:	4b02      	ldr	r3, [pc, #8]	; (800cc54 <malloc+0xc>)
 800cc4a:	4601      	mov	r1, r0
 800cc4c:	6818      	ldr	r0, [r3, #0]
 800cc4e:	f000 b823 	b.w	800cc98 <_malloc_r>
 800cc52:	bf00      	nop
 800cc54:	24000068 	.word	0x24000068

0800cc58 <sbrk_aligned>:
 800cc58:	b570      	push	{r4, r5, r6, lr}
 800cc5a:	4e0e      	ldr	r6, [pc, #56]	; (800cc94 <sbrk_aligned+0x3c>)
 800cc5c:	460c      	mov	r4, r1
 800cc5e:	6831      	ldr	r1, [r6, #0]
 800cc60:	4605      	mov	r5, r0
 800cc62:	b911      	cbnz	r1, 800cc6a <sbrk_aligned+0x12>
 800cc64:	f001 fe5a 	bl	800e91c <_sbrk_r>
 800cc68:	6030      	str	r0, [r6, #0]
 800cc6a:	4621      	mov	r1, r4
 800cc6c:	4628      	mov	r0, r5
 800cc6e:	f001 fe55 	bl	800e91c <_sbrk_r>
 800cc72:	1c43      	adds	r3, r0, #1
 800cc74:	d00a      	beq.n	800cc8c <sbrk_aligned+0x34>
 800cc76:	1cc4      	adds	r4, r0, #3
 800cc78:	f024 0403 	bic.w	r4, r4, #3
 800cc7c:	42a0      	cmp	r0, r4
 800cc7e:	d007      	beq.n	800cc90 <sbrk_aligned+0x38>
 800cc80:	1a21      	subs	r1, r4, r0
 800cc82:	4628      	mov	r0, r5
 800cc84:	f001 fe4a 	bl	800e91c <_sbrk_r>
 800cc88:	3001      	adds	r0, #1
 800cc8a:	d101      	bne.n	800cc90 <sbrk_aligned+0x38>
 800cc8c:	f04f 34ff 	mov.w	r4, #4294967295
 800cc90:	4620      	mov	r0, r4
 800cc92:	bd70      	pop	{r4, r5, r6, pc}
 800cc94:	2400067c 	.word	0x2400067c

0800cc98 <_malloc_r>:
 800cc98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc9c:	1ccd      	adds	r5, r1, #3
 800cc9e:	f025 0503 	bic.w	r5, r5, #3
 800cca2:	3508      	adds	r5, #8
 800cca4:	2d0c      	cmp	r5, #12
 800cca6:	bf38      	it	cc
 800cca8:	250c      	movcc	r5, #12
 800ccaa:	2d00      	cmp	r5, #0
 800ccac:	4607      	mov	r7, r0
 800ccae:	db01      	blt.n	800ccb4 <_malloc_r+0x1c>
 800ccb0:	42a9      	cmp	r1, r5
 800ccb2:	d905      	bls.n	800ccc0 <_malloc_r+0x28>
 800ccb4:	230c      	movs	r3, #12
 800ccb6:	603b      	str	r3, [r7, #0]
 800ccb8:	2600      	movs	r6, #0
 800ccba:	4630      	mov	r0, r6
 800ccbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccc0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cd94 <_malloc_r+0xfc>
 800ccc4:	f000 f868 	bl	800cd98 <__malloc_lock>
 800ccc8:	f8d8 3000 	ldr.w	r3, [r8]
 800cccc:	461c      	mov	r4, r3
 800ccce:	bb5c      	cbnz	r4, 800cd28 <_malloc_r+0x90>
 800ccd0:	4629      	mov	r1, r5
 800ccd2:	4638      	mov	r0, r7
 800ccd4:	f7ff ffc0 	bl	800cc58 <sbrk_aligned>
 800ccd8:	1c43      	adds	r3, r0, #1
 800ccda:	4604      	mov	r4, r0
 800ccdc:	d155      	bne.n	800cd8a <_malloc_r+0xf2>
 800ccde:	f8d8 4000 	ldr.w	r4, [r8]
 800cce2:	4626      	mov	r6, r4
 800cce4:	2e00      	cmp	r6, #0
 800cce6:	d145      	bne.n	800cd74 <_malloc_r+0xdc>
 800cce8:	2c00      	cmp	r4, #0
 800ccea:	d048      	beq.n	800cd7e <_malloc_r+0xe6>
 800ccec:	6823      	ldr	r3, [r4, #0]
 800ccee:	4631      	mov	r1, r6
 800ccf0:	4638      	mov	r0, r7
 800ccf2:	eb04 0903 	add.w	r9, r4, r3
 800ccf6:	f001 fe11 	bl	800e91c <_sbrk_r>
 800ccfa:	4581      	cmp	r9, r0
 800ccfc:	d13f      	bne.n	800cd7e <_malloc_r+0xe6>
 800ccfe:	6821      	ldr	r1, [r4, #0]
 800cd00:	1a6d      	subs	r5, r5, r1
 800cd02:	4629      	mov	r1, r5
 800cd04:	4638      	mov	r0, r7
 800cd06:	f7ff ffa7 	bl	800cc58 <sbrk_aligned>
 800cd0a:	3001      	adds	r0, #1
 800cd0c:	d037      	beq.n	800cd7e <_malloc_r+0xe6>
 800cd0e:	6823      	ldr	r3, [r4, #0]
 800cd10:	442b      	add	r3, r5
 800cd12:	6023      	str	r3, [r4, #0]
 800cd14:	f8d8 3000 	ldr.w	r3, [r8]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d038      	beq.n	800cd8e <_malloc_r+0xf6>
 800cd1c:	685a      	ldr	r2, [r3, #4]
 800cd1e:	42a2      	cmp	r2, r4
 800cd20:	d12b      	bne.n	800cd7a <_malloc_r+0xe2>
 800cd22:	2200      	movs	r2, #0
 800cd24:	605a      	str	r2, [r3, #4]
 800cd26:	e00f      	b.n	800cd48 <_malloc_r+0xb0>
 800cd28:	6822      	ldr	r2, [r4, #0]
 800cd2a:	1b52      	subs	r2, r2, r5
 800cd2c:	d41f      	bmi.n	800cd6e <_malloc_r+0xd6>
 800cd2e:	2a0b      	cmp	r2, #11
 800cd30:	d917      	bls.n	800cd62 <_malloc_r+0xca>
 800cd32:	1961      	adds	r1, r4, r5
 800cd34:	42a3      	cmp	r3, r4
 800cd36:	6025      	str	r5, [r4, #0]
 800cd38:	bf18      	it	ne
 800cd3a:	6059      	strne	r1, [r3, #4]
 800cd3c:	6863      	ldr	r3, [r4, #4]
 800cd3e:	bf08      	it	eq
 800cd40:	f8c8 1000 	streq.w	r1, [r8]
 800cd44:	5162      	str	r2, [r4, r5]
 800cd46:	604b      	str	r3, [r1, #4]
 800cd48:	4638      	mov	r0, r7
 800cd4a:	f104 060b 	add.w	r6, r4, #11
 800cd4e:	f000 f829 	bl	800cda4 <__malloc_unlock>
 800cd52:	f026 0607 	bic.w	r6, r6, #7
 800cd56:	1d23      	adds	r3, r4, #4
 800cd58:	1af2      	subs	r2, r6, r3
 800cd5a:	d0ae      	beq.n	800ccba <_malloc_r+0x22>
 800cd5c:	1b9b      	subs	r3, r3, r6
 800cd5e:	50a3      	str	r3, [r4, r2]
 800cd60:	e7ab      	b.n	800ccba <_malloc_r+0x22>
 800cd62:	42a3      	cmp	r3, r4
 800cd64:	6862      	ldr	r2, [r4, #4]
 800cd66:	d1dd      	bne.n	800cd24 <_malloc_r+0x8c>
 800cd68:	f8c8 2000 	str.w	r2, [r8]
 800cd6c:	e7ec      	b.n	800cd48 <_malloc_r+0xb0>
 800cd6e:	4623      	mov	r3, r4
 800cd70:	6864      	ldr	r4, [r4, #4]
 800cd72:	e7ac      	b.n	800ccce <_malloc_r+0x36>
 800cd74:	4634      	mov	r4, r6
 800cd76:	6876      	ldr	r6, [r6, #4]
 800cd78:	e7b4      	b.n	800cce4 <_malloc_r+0x4c>
 800cd7a:	4613      	mov	r3, r2
 800cd7c:	e7cc      	b.n	800cd18 <_malloc_r+0x80>
 800cd7e:	230c      	movs	r3, #12
 800cd80:	603b      	str	r3, [r7, #0]
 800cd82:	4638      	mov	r0, r7
 800cd84:	f000 f80e 	bl	800cda4 <__malloc_unlock>
 800cd88:	e797      	b.n	800ccba <_malloc_r+0x22>
 800cd8a:	6025      	str	r5, [r4, #0]
 800cd8c:	e7dc      	b.n	800cd48 <_malloc_r+0xb0>
 800cd8e:	605b      	str	r3, [r3, #4]
 800cd90:	deff      	udf	#255	; 0xff
 800cd92:	bf00      	nop
 800cd94:	24000678 	.word	0x24000678

0800cd98 <__malloc_lock>:
 800cd98:	4801      	ldr	r0, [pc, #4]	; (800cda0 <__malloc_lock+0x8>)
 800cd9a:	f7ff b90b 	b.w	800bfb4 <__retarget_lock_acquire_recursive>
 800cd9e:	bf00      	nop
 800cda0:	24000674 	.word	0x24000674

0800cda4 <__malloc_unlock>:
 800cda4:	4801      	ldr	r0, [pc, #4]	; (800cdac <__malloc_unlock+0x8>)
 800cda6:	f7ff b906 	b.w	800bfb6 <__retarget_lock_release_recursive>
 800cdaa:	bf00      	nop
 800cdac:	24000674 	.word	0x24000674

0800cdb0 <_Balloc>:
 800cdb0:	b570      	push	{r4, r5, r6, lr}
 800cdb2:	69c6      	ldr	r6, [r0, #28]
 800cdb4:	4604      	mov	r4, r0
 800cdb6:	460d      	mov	r5, r1
 800cdb8:	b976      	cbnz	r6, 800cdd8 <_Balloc+0x28>
 800cdba:	2010      	movs	r0, #16
 800cdbc:	f7ff ff44 	bl	800cc48 <malloc>
 800cdc0:	4602      	mov	r2, r0
 800cdc2:	61e0      	str	r0, [r4, #28]
 800cdc4:	b920      	cbnz	r0, 800cdd0 <_Balloc+0x20>
 800cdc6:	4b18      	ldr	r3, [pc, #96]	; (800ce28 <_Balloc+0x78>)
 800cdc8:	4818      	ldr	r0, [pc, #96]	; (800ce2c <_Balloc+0x7c>)
 800cdca:	216b      	movs	r1, #107	; 0x6b
 800cdcc:	f001 fdcc 	bl	800e968 <__assert_func>
 800cdd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cdd4:	6006      	str	r6, [r0, #0]
 800cdd6:	60c6      	str	r6, [r0, #12]
 800cdd8:	69e6      	ldr	r6, [r4, #28]
 800cdda:	68f3      	ldr	r3, [r6, #12]
 800cddc:	b183      	cbz	r3, 800ce00 <_Balloc+0x50>
 800cdde:	69e3      	ldr	r3, [r4, #28]
 800cde0:	68db      	ldr	r3, [r3, #12]
 800cde2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cde6:	b9b8      	cbnz	r0, 800ce18 <_Balloc+0x68>
 800cde8:	2101      	movs	r1, #1
 800cdea:	fa01 f605 	lsl.w	r6, r1, r5
 800cdee:	1d72      	adds	r2, r6, #5
 800cdf0:	0092      	lsls	r2, r2, #2
 800cdf2:	4620      	mov	r0, r4
 800cdf4:	f001 fdd6 	bl	800e9a4 <_calloc_r>
 800cdf8:	b160      	cbz	r0, 800ce14 <_Balloc+0x64>
 800cdfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cdfe:	e00e      	b.n	800ce1e <_Balloc+0x6e>
 800ce00:	2221      	movs	r2, #33	; 0x21
 800ce02:	2104      	movs	r1, #4
 800ce04:	4620      	mov	r0, r4
 800ce06:	f001 fdcd 	bl	800e9a4 <_calloc_r>
 800ce0a:	69e3      	ldr	r3, [r4, #28]
 800ce0c:	60f0      	str	r0, [r6, #12]
 800ce0e:	68db      	ldr	r3, [r3, #12]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d1e4      	bne.n	800cdde <_Balloc+0x2e>
 800ce14:	2000      	movs	r0, #0
 800ce16:	bd70      	pop	{r4, r5, r6, pc}
 800ce18:	6802      	ldr	r2, [r0, #0]
 800ce1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ce1e:	2300      	movs	r3, #0
 800ce20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ce24:	e7f7      	b.n	800ce16 <_Balloc+0x66>
 800ce26:	bf00      	nop
 800ce28:	0800f506 	.word	0x0800f506
 800ce2c:	0800f586 	.word	0x0800f586

0800ce30 <_Bfree>:
 800ce30:	b570      	push	{r4, r5, r6, lr}
 800ce32:	69c6      	ldr	r6, [r0, #28]
 800ce34:	4605      	mov	r5, r0
 800ce36:	460c      	mov	r4, r1
 800ce38:	b976      	cbnz	r6, 800ce58 <_Bfree+0x28>
 800ce3a:	2010      	movs	r0, #16
 800ce3c:	f7ff ff04 	bl	800cc48 <malloc>
 800ce40:	4602      	mov	r2, r0
 800ce42:	61e8      	str	r0, [r5, #28]
 800ce44:	b920      	cbnz	r0, 800ce50 <_Bfree+0x20>
 800ce46:	4b09      	ldr	r3, [pc, #36]	; (800ce6c <_Bfree+0x3c>)
 800ce48:	4809      	ldr	r0, [pc, #36]	; (800ce70 <_Bfree+0x40>)
 800ce4a:	218f      	movs	r1, #143	; 0x8f
 800ce4c:	f001 fd8c 	bl	800e968 <__assert_func>
 800ce50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce54:	6006      	str	r6, [r0, #0]
 800ce56:	60c6      	str	r6, [r0, #12]
 800ce58:	b13c      	cbz	r4, 800ce6a <_Bfree+0x3a>
 800ce5a:	69eb      	ldr	r3, [r5, #28]
 800ce5c:	6862      	ldr	r2, [r4, #4]
 800ce5e:	68db      	ldr	r3, [r3, #12]
 800ce60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ce64:	6021      	str	r1, [r4, #0]
 800ce66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ce6a:	bd70      	pop	{r4, r5, r6, pc}
 800ce6c:	0800f506 	.word	0x0800f506
 800ce70:	0800f586 	.word	0x0800f586

0800ce74 <__multadd>:
 800ce74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce78:	690d      	ldr	r5, [r1, #16]
 800ce7a:	4607      	mov	r7, r0
 800ce7c:	460c      	mov	r4, r1
 800ce7e:	461e      	mov	r6, r3
 800ce80:	f101 0c14 	add.w	ip, r1, #20
 800ce84:	2000      	movs	r0, #0
 800ce86:	f8dc 3000 	ldr.w	r3, [ip]
 800ce8a:	b299      	uxth	r1, r3
 800ce8c:	fb02 6101 	mla	r1, r2, r1, r6
 800ce90:	0c1e      	lsrs	r6, r3, #16
 800ce92:	0c0b      	lsrs	r3, r1, #16
 800ce94:	fb02 3306 	mla	r3, r2, r6, r3
 800ce98:	b289      	uxth	r1, r1
 800ce9a:	3001      	adds	r0, #1
 800ce9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cea0:	4285      	cmp	r5, r0
 800cea2:	f84c 1b04 	str.w	r1, [ip], #4
 800cea6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ceaa:	dcec      	bgt.n	800ce86 <__multadd+0x12>
 800ceac:	b30e      	cbz	r6, 800cef2 <__multadd+0x7e>
 800ceae:	68a3      	ldr	r3, [r4, #8]
 800ceb0:	42ab      	cmp	r3, r5
 800ceb2:	dc19      	bgt.n	800cee8 <__multadd+0x74>
 800ceb4:	6861      	ldr	r1, [r4, #4]
 800ceb6:	4638      	mov	r0, r7
 800ceb8:	3101      	adds	r1, #1
 800ceba:	f7ff ff79 	bl	800cdb0 <_Balloc>
 800cebe:	4680      	mov	r8, r0
 800cec0:	b928      	cbnz	r0, 800cece <__multadd+0x5a>
 800cec2:	4602      	mov	r2, r0
 800cec4:	4b0c      	ldr	r3, [pc, #48]	; (800cef8 <__multadd+0x84>)
 800cec6:	480d      	ldr	r0, [pc, #52]	; (800cefc <__multadd+0x88>)
 800cec8:	21ba      	movs	r1, #186	; 0xba
 800ceca:	f001 fd4d 	bl	800e968 <__assert_func>
 800cece:	6922      	ldr	r2, [r4, #16]
 800ced0:	3202      	adds	r2, #2
 800ced2:	f104 010c 	add.w	r1, r4, #12
 800ced6:	0092      	lsls	r2, r2, #2
 800ced8:	300c      	adds	r0, #12
 800ceda:	f001 fd2f 	bl	800e93c <memcpy>
 800cede:	4621      	mov	r1, r4
 800cee0:	4638      	mov	r0, r7
 800cee2:	f7ff ffa5 	bl	800ce30 <_Bfree>
 800cee6:	4644      	mov	r4, r8
 800cee8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ceec:	3501      	adds	r5, #1
 800ceee:	615e      	str	r6, [r3, #20]
 800cef0:	6125      	str	r5, [r4, #16]
 800cef2:	4620      	mov	r0, r4
 800cef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cef8:	0800f575 	.word	0x0800f575
 800cefc:	0800f586 	.word	0x0800f586

0800cf00 <__s2b>:
 800cf00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf04:	460c      	mov	r4, r1
 800cf06:	4615      	mov	r5, r2
 800cf08:	461f      	mov	r7, r3
 800cf0a:	2209      	movs	r2, #9
 800cf0c:	3308      	adds	r3, #8
 800cf0e:	4606      	mov	r6, r0
 800cf10:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf14:	2100      	movs	r1, #0
 800cf16:	2201      	movs	r2, #1
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	db09      	blt.n	800cf30 <__s2b+0x30>
 800cf1c:	4630      	mov	r0, r6
 800cf1e:	f7ff ff47 	bl	800cdb0 <_Balloc>
 800cf22:	b940      	cbnz	r0, 800cf36 <__s2b+0x36>
 800cf24:	4602      	mov	r2, r0
 800cf26:	4b19      	ldr	r3, [pc, #100]	; (800cf8c <__s2b+0x8c>)
 800cf28:	4819      	ldr	r0, [pc, #100]	; (800cf90 <__s2b+0x90>)
 800cf2a:	21d3      	movs	r1, #211	; 0xd3
 800cf2c:	f001 fd1c 	bl	800e968 <__assert_func>
 800cf30:	0052      	lsls	r2, r2, #1
 800cf32:	3101      	adds	r1, #1
 800cf34:	e7f0      	b.n	800cf18 <__s2b+0x18>
 800cf36:	9b08      	ldr	r3, [sp, #32]
 800cf38:	6143      	str	r3, [r0, #20]
 800cf3a:	2d09      	cmp	r5, #9
 800cf3c:	f04f 0301 	mov.w	r3, #1
 800cf40:	6103      	str	r3, [r0, #16]
 800cf42:	dd16      	ble.n	800cf72 <__s2b+0x72>
 800cf44:	f104 0909 	add.w	r9, r4, #9
 800cf48:	46c8      	mov	r8, r9
 800cf4a:	442c      	add	r4, r5
 800cf4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cf50:	4601      	mov	r1, r0
 800cf52:	3b30      	subs	r3, #48	; 0x30
 800cf54:	220a      	movs	r2, #10
 800cf56:	4630      	mov	r0, r6
 800cf58:	f7ff ff8c 	bl	800ce74 <__multadd>
 800cf5c:	45a0      	cmp	r8, r4
 800cf5e:	d1f5      	bne.n	800cf4c <__s2b+0x4c>
 800cf60:	f1a5 0408 	sub.w	r4, r5, #8
 800cf64:	444c      	add	r4, r9
 800cf66:	1b2d      	subs	r5, r5, r4
 800cf68:	1963      	adds	r3, r4, r5
 800cf6a:	42bb      	cmp	r3, r7
 800cf6c:	db04      	blt.n	800cf78 <__s2b+0x78>
 800cf6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf72:	340a      	adds	r4, #10
 800cf74:	2509      	movs	r5, #9
 800cf76:	e7f6      	b.n	800cf66 <__s2b+0x66>
 800cf78:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cf7c:	4601      	mov	r1, r0
 800cf7e:	3b30      	subs	r3, #48	; 0x30
 800cf80:	220a      	movs	r2, #10
 800cf82:	4630      	mov	r0, r6
 800cf84:	f7ff ff76 	bl	800ce74 <__multadd>
 800cf88:	e7ee      	b.n	800cf68 <__s2b+0x68>
 800cf8a:	bf00      	nop
 800cf8c:	0800f575 	.word	0x0800f575
 800cf90:	0800f586 	.word	0x0800f586

0800cf94 <__hi0bits>:
 800cf94:	0c03      	lsrs	r3, r0, #16
 800cf96:	041b      	lsls	r3, r3, #16
 800cf98:	b9d3      	cbnz	r3, 800cfd0 <__hi0bits+0x3c>
 800cf9a:	0400      	lsls	r0, r0, #16
 800cf9c:	2310      	movs	r3, #16
 800cf9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cfa2:	bf04      	itt	eq
 800cfa4:	0200      	lsleq	r0, r0, #8
 800cfa6:	3308      	addeq	r3, #8
 800cfa8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cfac:	bf04      	itt	eq
 800cfae:	0100      	lsleq	r0, r0, #4
 800cfb0:	3304      	addeq	r3, #4
 800cfb2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cfb6:	bf04      	itt	eq
 800cfb8:	0080      	lsleq	r0, r0, #2
 800cfba:	3302      	addeq	r3, #2
 800cfbc:	2800      	cmp	r0, #0
 800cfbe:	db05      	blt.n	800cfcc <__hi0bits+0x38>
 800cfc0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cfc4:	f103 0301 	add.w	r3, r3, #1
 800cfc8:	bf08      	it	eq
 800cfca:	2320      	moveq	r3, #32
 800cfcc:	4618      	mov	r0, r3
 800cfce:	4770      	bx	lr
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	e7e4      	b.n	800cf9e <__hi0bits+0xa>

0800cfd4 <__lo0bits>:
 800cfd4:	6803      	ldr	r3, [r0, #0]
 800cfd6:	f013 0207 	ands.w	r2, r3, #7
 800cfda:	d00c      	beq.n	800cff6 <__lo0bits+0x22>
 800cfdc:	07d9      	lsls	r1, r3, #31
 800cfde:	d422      	bmi.n	800d026 <__lo0bits+0x52>
 800cfe0:	079a      	lsls	r2, r3, #30
 800cfe2:	bf49      	itett	mi
 800cfe4:	085b      	lsrmi	r3, r3, #1
 800cfe6:	089b      	lsrpl	r3, r3, #2
 800cfe8:	6003      	strmi	r3, [r0, #0]
 800cfea:	2201      	movmi	r2, #1
 800cfec:	bf5c      	itt	pl
 800cfee:	6003      	strpl	r3, [r0, #0]
 800cff0:	2202      	movpl	r2, #2
 800cff2:	4610      	mov	r0, r2
 800cff4:	4770      	bx	lr
 800cff6:	b299      	uxth	r1, r3
 800cff8:	b909      	cbnz	r1, 800cffe <__lo0bits+0x2a>
 800cffa:	0c1b      	lsrs	r3, r3, #16
 800cffc:	2210      	movs	r2, #16
 800cffe:	b2d9      	uxtb	r1, r3
 800d000:	b909      	cbnz	r1, 800d006 <__lo0bits+0x32>
 800d002:	3208      	adds	r2, #8
 800d004:	0a1b      	lsrs	r3, r3, #8
 800d006:	0719      	lsls	r1, r3, #28
 800d008:	bf04      	itt	eq
 800d00a:	091b      	lsreq	r3, r3, #4
 800d00c:	3204      	addeq	r2, #4
 800d00e:	0799      	lsls	r1, r3, #30
 800d010:	bf04      	itt	eq
 800d012:	089b      	lsreq	r3, r3, #2
 800d014:	3202      	addeq	r2, #2
 800d016:	07d9      	lsls	r1, r3, #31
 800d018:	d403      	bmi.n	800d022 <__lo0bits+0x4e>
 800d01a:	085b      	lsrs	r3, r3, #1
 800d01c:	f102 0201 	add.w	r2, r2, #1
 800d020:	d003      	beq.n	800d02a <__lo0bits+0x56>
 800d022:	6003      	str	r3, [r0, #0]
 800d024:	e7e5      	b.n	800cff2 <__lo0bits+0x1e>
 800d026:	2200      	movs	r2, #0
 800d028:	e7e3      	b.n	800cff2 <__lo0bits+0x1e>
 800d02a:	2220      	movs	r2, #32
 800d02c:	e7e1      	b.n	800cff2 <__lo0bits+0x1e>
	...

0800d030 <__i2b>:
 800d030:	b510      	push	{r4, lr}
 800d032:	460c      	mov	r4, r1
 800d034:	2101      	movs	r1, #1
 800d036:	f7ff febb 	bl	800cdb0 <_Balloc>
 800d03a:	4602      	mov	r2, r0
 800d03c:	b928      	cbnz	r0, 800d04a <__i2b+0x1a>
 800d03e:	4b05      	ldr	r3, [pc, #20]	; (800d054 <__i2b+0x24>)
 800d040:	4805      	ldr	r0, [pc, #20]	; (800d058 <__i2b+0x28>)
 800d042:	f240 1145 	movw	r1, #325	; 0x145
 800d046:	f001 fc8f 	bl	800e968 <__assert_func>
 800d04a:	2301      	movs	r3, #1
 800d04c:	6144      	str	r4, [r0, #20]
 800d04e:	6103      	str	r3, [r0, #16]
 800d050:	bd10      	pop	{r4, pc}
 800d052:	bf00      	nop
 800d054:	0800f575 	.word	0x0800f575
 800d058:	0800f586 	.word	0x0800f586

0800d05c <__multiply>:
 800d05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d060:	4691      	mov	r9, r2
 800d062:	690a      	ldr	r2, [r1, #16]
 800d064:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d068:	429a      	cmp	r2, r3
 800d06a:	bfb8      	it	lt
 800d06c:	460b      	movlt	r3, r1
 800d06e:	460c      	mov	r4, r1
 800d070:	bfbc      	itt	lt
 800d072:	464c      	movlt	r4, r9
 800d074:	4699      	movlt	r9, r3
 800d076:	6927      	ldr	r7, [r4, #16]
 800d078:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d07c:	68a3      	ldr	r3, [r4, #8]
 800d07e:	6861      	ldr	r1, [r4, #4]
 800d080:	eb07 060a 	add.w	r6, r7, sl
 800d084:	42b3      	cmp	r3, r6
 800d086:	b085      	sub	sp, #20
 800d088:	bfb8      	it	lt
 800d08a:	3101      	addlt	r1, #1
 800d08c:	f7ff fe90 	bl	800cdb0 <_Balloc>
 800d090:	b930      	cbnz	r0, 800d0a0 <__multiply+0x44>
 800d092:	4602      	mov	r2, r0
 800d094:	4b44      	ldr	r3, [pc, #272]	; (800d1a8 <__multiply+0x14c>)
 800d096:	4845      	ldr	r0, [pc, #276]	; (800d1ac <__multiply+0x150>)
 800d098:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d09c:	f001 fc64 	bl	800e968 <__assert_func>
 800d0a0:	f100 0514 	add.w	r5, r0, #20
 800d0a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d0a8:	462b      	mov	r3, r5
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	4543      	cmp	r3, r8
 800d0ae:	d321      	bcc.n	800d0f4 <__multiply+0x98>
 800d0b0:	f104 0314 	add.w	r3, r4, #20
 800d0b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d0b8:	f109 0314 	add.w	r3, r9, #20
 800d0bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d0c0:	9202      	str	r2, [sp, #8]
 800d0c2:	1b3a      	subs	r2, r7, r4
 800d0c4:	3a15      	subs	r2, #21
 800d0c6:	f022 0203 	bic.w	r2, r2, #3
 800d0ca:	3204      	adds	r2, #4
 800d0cc:	f104 0115 	add.w	r1, r4, #21
 800d0d0:	428f      	cmp	r7, r1
 800d0d2:	bf38      	it	cc
 800d0d4:	2204      	movcc	r2, #4
 800d0d6:	9201      	str	r2, [sp, #4]
 800d0d8:	9a02      	ldr	r2, [sp, #8]
 800d0da:	9303      	str	r3, [sp, #12]
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d80c      	bhi.n	800d0fa <__multiply+0x9e>
 800d0e0:	2e00      	cmp	r6, #0
 800d0e2:	dd03      	ble.n	800d0ec <__multiply+0x90>
 800d0e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d05b      	beq.n	800d1a4 <__multiply+0x148>
 800d0ec:	6106      	str	r6, [r0, #16]
 800d0ee:	b005      	add	sp, #20
 800d0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0f4:	f843 2b04 	str.w	r2, [r3], #4
 800d0f8:	e7d8      	b.n	800d0ac <__multiply+0x50>
 800d0fa:	f8b3 a000 	ldrh.w	sl, [r3]
 800d0fe:	f1ba 0f00 	cmp.w	sl, #0
 800d102:	d024      	beq.n	800d14e <__multiply+0xf2>
 800d104:	f104 0e14 	add.w	lr, r4, #20
 800d108:	46a9      	mov	r9, r5
 800d10a:	f04f 0c00 	mov.w	ip, #0
 800d10e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d112:	f8d9 1000 	ldr.w	r1, [r9]
 800d116:	fa1f fb82 	uxth.w	fp, r2
 800d11a:	b289      	uxth	r1, r1
 800d11c:	fb0a 110b 	mla	r1, sl, fp, r1
 800d120:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d124:	f8d9 2000 	ldr.w	r2, [r9]
 800d128:	4461      	add	r1, ip
 800d12a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d12e:	fb0a c20b 	mla	r2, sl, fp, ip
 800d132:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d136:	b289      	uxth	r1, r1
 800d138:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d13c:	4577      	cmp	r7, lr
 800d13e:	f849 1b04 	str.w	r1, [r9], #4
 800d142:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d146:	d8e2      	bhi.n	800d10e <__multiply+0xb2>
 800d148:	9a01      	ldr	r2, [sp, #4]
 800d14a:	f845 c002 	str.w	ip, [r5, r2]
 800d14e:	9a03      	ldr	r2, [sp, #12]
 800d150:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d154:	3304      	adds	r3, #4
 800d156:	f1b9 0f00 	cmp.w	r9, #0
 800d15a:	d021      	beq.n	800d1a0 <__multiply+0x144>
 800d15c:	6829      	ldr	r1, [r5, #0]
 800d15e:	f104 0c14 	add.w	ip, r4, #20
 800d162:	46ae      	mov	lr, r5
 800d164:	f04f 0a00 	mov.w	sl, #0
 800d168:	f8bc b000 	ldrh.w	fp, [ip]
 800d16c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d170:	fb09 220b 	mla	r2, r9, fp, r2
 800d174:	4452      	add	r2, sl
 800d176:	b289      	uxth	r1, r1
 800d178:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d17c:	f84e 1b04 	str.w	r1, [lr], #4
 800d180:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d184:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d188:	f8be 1000 	ldrh.w	r1, [lr]
 800d18c:	fb09 110a 	mla	r1, r9, sl, r1
 800d190:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d194:	4567      	cmp	r7, ip
 800d196:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d19a:	d8e5      	bhi.n	800d168 <__multiply+0x10c>
 800d19c:	9a01      	ldr	r2, [sp, #4]
 800d19e:	50a9      	str	r1, [r5, r2]
 800d1a0:	3504      	adds	r5, #4
 800d1a2:	e799      	b.n	800d0d8 <__multiply+0x7c>
 800d1a4:	3e01      	subs	r6, #1
 800d1a6:	e79b      	b.n	800d0e0 <__multiply+0x84>
 800d1a8:	0800f575 	.word	0x0800f575
 800d1ac:	0800f586 	.word	0x0800f586

0800d1b0 <__pow5mult>:
 800d1b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1b4:	4615      	mov	r5, r2
 800d1b6:	f012 0203 	ands.w	r2, r2, #3
 800d1ba:	4606      	mov	r6, r0
 800d1bc:	460f      	mov	r7, r1
 800d1be:	d007      	beq.n	800d1d0 <__pow5mult+0x20>
 800d1c0:	4c25      	ldr	r4, [pc, #148]	; (800d258 <__pow5mult+0xa8>)
 800d1c2:	3a01      	subs	r2, #1
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d1ca:	f7ff fe53 	bl	800ce74 <__multadd>
 800d1ce:	4607      	mov	r7, r0
 800d1d0:	10ad      	asrs	r5, r5, #2
 800d1d2:	d03d      	beq.n	800d250 <__pow5mult+0xa0>
 800d1d4:	69f4      	ldr	r4, [r6, #28]
 800d1d6:	b97c      	cbnz	r4, 800d1f8 <__pow5mult+0x48>
 800d1d8:	2010      	movs	r0, #16
 800d1da:	f7ff fd35 	bl	800cc48 <malloc>
 800d1de:	4602      	mov	r2, r0
 800d1e0:	61f0      	str	r0, [r6, #28]
 800d1e2:	b928      	cbnz	r0, 800d1f0 <__pow5mult+0x40>
 800d1e4:	4b1d      	ldr	r3, [pc, #116]	; (800d25c <__pow5mult+0xac>)
 800d1e6:	481e      	ldr	r0, [pc, #120]	; (800d260 <__pow5mult+0xb0>)
 800d1e8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d1ec:	f001 fbbc 	bl	800e968 <__assert_func>
 800d1f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d1f4:	6004      	str	r4, [r0, #0]
 800d1f6:	60c4      	str	r4, [r0, #12]
 800d1f8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d1fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d200:	b94c      	cbnz	r4, 800d216 <__pow5mult+0x66>
 800d202:	f240 2171 	movw	r1, #625	; 0x271
 800d206:	4630      	mov	r0, r6
 800d208:	f7ff ff12 	bl	800d030 <__i2b>
 800d20c:	2300      	movs	r3, #0
 800d20e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d212:	4604      	mov	r4, r0
 800d214:	6003      	str	r3, [r0, #0]
 800d216:	f04f 0900 	mov.w	r9, #0
 800d21a:	07eb      	lsls	r3, r5, #31
 800d21c:	d50a      	bpl.n	800d234 <__pow5mult+0x84>
 800d21e:	4639      	mov	r1, r7
 800d220:	4622      	mov	r2, r4
 800d222:	4630      	mov	r0, r6
 800d224:	f7ff ff1a 	bl	800d05c <__multiply>
 800d228:	4639      	mov	r1, r7
 800d22a:	4680      	mov	r8, r0
 800d22c:	4630      	mov	r0, r6
 800d22e:	f7ff fdff 	bl	800ce30 <_Bfree>
 800d232:	4647      	mov	r7, r8
 800d234:	106d      	asrs	r5, r5, #1
 800d236:	d00b      	beq.n	800d250 <__pow5mult+0xa0>
 800d238:	6820      	ldr	r0, [r4, #0]
 800d23a:	b938      	cbnz	r0, 800d24c <__pow5mult+0x9c>
 800d23c:	4622      	mov	r2, r4
 800d23e:	4621      	mov	r1, r4
 800d240:	4630      	mov	r0, r6
 800d242:	f7ff ff0b 	bl	800d05c <__multiply>
 800d246:	6020      	str	r0, [r4, #0]
 800d248:	f8c0 9000 	str.w	r9, [r0]
 800d24c:	4604      	mov	r4, r0
 800d24e:	e7e4      	b.n	800d21a <__pow5mult+0x6a>
 800d250:	4638      	mov	r0, r7
 800d252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d256:	bf00      	nop
 800d258:	0800f6d0 	.word	0x0800f6d0
 800d25c:	0800f506 	.word	0x0800f506
 800d260:	0800f586 	.word	0x0800f586

0800d264 <__lshift>:
 800d264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d268:	460c      	mov	r4, r1
 800d26a:	6849      	ldr	r1, [r1, #4]
 800d26c:	6923      	ldr	r3, [r4, #16]
 800d26e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d272:	68a3      	ldr	r3, [r4, #8]
 800d274:	4607      	mov	r7, r0
 800d276:	4691      	mov	r9, r2
 800d278:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d27c:	f108 0601 	add.w	r6, r8, #1
 800d280:	42b3      	cmp	r3, r6
 800d282:	db0b      	blt.n	800d29c <__lshift+0x38>
 800d284:	4638      	mov	r0, r7
 800d286:	f7ff fd93 	bl	800cdb0 <_Balloc>
 800d28a:	4605      	mov	r5, r0
 800d28c:	b948      	cbnz	r0, 800d2a2 <__lshift+0x3e>
 800d28e:	4602      	mov	r2, r0
 800d290:	4b28      	ldr	r3, [pc, #160]	; (800d334 <__lshift+0xd0>)
 800d292:	4829      	ldr	r0, [pc, #164]	; (800d338 <__lshift+0xd4>)
 800d294:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d298:	f001 fb66 	bl	800e968 <__assert_func>
 800d29c:	3101      	adds	r1, #1
 800d29e:	005b      	lsls	r3, r3, #1
 800d2a0:	e7ee      	b.n	800d280 <__lshift+0x1c>
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	f100 0114 	add.w	r1, r0, #20
 800d2a8:	f100 0210 	add.w	r2, r0, #16
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	4553      	cmp	r3, sl
 800d2b0:	db33      	blt.n	800d31a <__lshift+0xb6>
 800d2b2:	6920      	ldr	r0, [r4, #16]
 800d2b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d2b8:	f104 0314 	add.w	r3, r4, #20
 800d2bc:	f019 091f 	ands.w	r9, r9, #31
 800d2c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d2c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d2c8:	d02b      	beq.n	800d322 <__lshift+0xbe>
 800d2ca:	f1c9 0e20 	rsb	lr, r9, #32
 800d2ce:	468a      	mov	sl, r1
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	6818      	ldr	r0, [r3, #0]
 800d2d4:	fa00 f009 	lsl.w	r0, r0, r9
 800d2d8:	4310      	orrs	r0, r2
 800d2da:	f84a 0b04 	str.w	r0, [sl], #4
 800d2de:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2e2:	459c      	cmp	ip, r3
 800d2e4:	fa22 f20e 	lsr.w	r2, r2, lr
 800d2e8:	d8f3      	bhi.n	800d2d2 <__lshift+0x6e>
 800d2ea:	ebac 0304 	sub.w	r3, ip, r4
 800d2ee:	3b15      	subs	r3, #21
 800d2f0:	f023 0303 	bic.w	r3, r3, #3
 800d2f4:	3304      	adds	r3, #4
 800d2f6:	f104 0015 	add.w	r0, r4, #21
 800d2fa:	4584      	cmp	ip, r0
 800d2fc:	bf38      	it	cc
 800d2fe:	2304      	movcc	r3, #4
 800d300:	50ca      	str	r2, [r1, r3]
 800d302:	b10a      	cbz	r2, 800d308 <__lshift+0xa4>
 800d304:	f108 0602 	add.w	r6, r8, #2
 800d308:	3e01      	subs	r6, #1
 800d30a:	4638      	mov	r0, r7
 800d30c:	612e      	str	r6, [r5, #16]
 800d30e:	4621      	mov	r1, r4
 800d310:	f7ff fd8e 	bl	800ce30 <_Bfree>
 800d314:	4628      	mov	r0, r5
 800d316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d31a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d31e:	3301      	adds	r3, #1
 800d320:	e7c5      	b.n	800d2ae <__lshift+0x4a>
 800d322:	3904      	subs	r1, #4
 800d324:	f853 2b04 	ldr.w	r2, [r3], #4
 800d328:	f841 2f04 	str.w	r2, [r1, #4]!
 800d32c:	459c      	cmp	ip, r3
 800d32e:	d8f9      	bhi.n	800d324 <__lshift+0xc0>
 800d330:	e7ea      	b.n	800d308 <__lshift+0xa4>
 800d332:	bf00      	nop
 800d334:	0800f575 	.word	0x0800f575
 800d338:	0800f586 	.word	0x0800f586

0800d33c <__mcmp>:
 800d33c:	b530      	push	{r4, r5, lr}
 800d33e:	6902      	ldr	r2, [r0, #16]
 800d340:	690c      	ldr	r4, [r1, #16]
 800d342:	1b12      	subs	r2, r2, r4
 800d344:	d10e      	bne.n	800d364 <__mcmp+0x28>
 800d346:	f100 0314 	add.w	r3, r0, #20
 800d34a:	3114      	adds	r1, #20
 800d34c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d350:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d354:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d358:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d35c:	42a5      	cmp	r5, r4
 800d35e:	d003      	beq.n	800d368 <__mcmp+0x2c>
 800d360:	d305      	bcc.n	800d36e <__mcmp+0x32>
 800d362:	2201      	movs	r2, #1
 800d364:	4610      	mov	r0, r2
 800d366:	bd30      	pop	{r4, r5, pc}
 800d368:	4283      	cmp	r3, r0
 800d36a:	d3f3      	bcc.n	800d354 <__mcmp+0x18>
 800d36c:	e7fa      	b.n	800d364 <__mcmp+0x28>
 800d36e:	f04f 32ff 	mov.w	r2, #4294967295
 800d372:	e7f7      	b.n	800d364 <__mcmp+0x28>

0800d374 <__mdiff>:
 800d374:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d378:	460c      	mov	r4, r1
 800d37a:	4606      	mov	r6, r0
 800d37c:	4611      	mov	r1, r2
 800d37e:	4620      	mov	r0, r4
 800d380:	4690      	mov	r8, r2
 800d382:	f7ff ffdb 	bl	800d33c <__mcmp>
 800d386:	1e05      	subs	r5, r0, #0
 800d388:	d110      	bne.n	800d3ac <__mdiff+0x38>
 800d38a:	4629      	mov	r1, r5
 800d38c:	4630      	mov	r0, r6
 800d38e:	f7ff fd0f 	bl	800cdb0 <_Balloc>
 800d392:	b930      	cbnz	r0, 800d3a2 <__mdiff+0x2e>
 800d394:	4b3a      	ldr	r3, [pc, #232]	; (800d480 <__mdiff+0x10c>)
 800d396:	4602      	mov	r2, r0
 800d398:	f240 2137 	movw	r1, #567	; 0x237
 800d39c:	4839      	ldr	r0, [pc, #228]	; (800d484 <__mdiff+0x110>)
 800d39e:	f001 fae3 	bl	800e968 <__assert_func>
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d3a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3ac:	bfa4      	itt	ge
 800d3ae:	4643      	movge	r3, r8
 800d3b0:	46a0      	movge	r8, r4
 800d3b2:	4630      	mov	r0, r6
 800d3b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d3b8:	bfa6      	itte	ge
 800d3ba:	461c      	movge	r4, r3
 800d3bc:	2500      	movge	r5, #0
 800d3be:	2501      	movlt	r5, #1
 800d3c0:	f7ff fcf6 	bl	800cdb0 <_Balloc>
 800d3c4:	b920      	cbnz	r0, 800d3d0 <__mdiff+0x5c>
 800d3c6:	4b2e      	ldr	r3, [pc, #184]	; (800d480 <__mdiff+0x10c>)
 800d3c8:	4602      	mov	r2, r0
 800d3ca:	f240 2145 	movw	r1, #581	; 0x245
 800d3ce:	e7e5      	b.n	800d39c <__mdiff+0x28>
 800d3d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d3d4:	6926      	ldr	r6, [r4, #16]
 800d3d6:	60c5      	str	r5, [r0, #12]
 800d3d8:	f104 0914 	add.w	r9, r4, #20
 800d3dc:	f108 0514 	add.w	r5, r8, #20
 800d3e0:	f100 0e14 	add.w	lr, r0, #20
 800d3e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d3e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d3ec:	f108 0210 	add.w	r2, r8, #16
 800d3f0:	46f2      	mov	sl, lr
 800d3f2:	2100      	movs	r1, #0
 800d3f4:	f859 3b04 	ldr.w	r3, [r9], #4
 800d3f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d3fc:	fa11 f88b 	uxtah	r8, r1, fp
 800d400:	b299      	uxth	r1, r3
 800d402:	0c1b      	lsrs	r3, r3, #16
 800d404:	eba8 0801 	sub.w	r8, r8, r1
 800d408:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d40c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d410:	fa1f f888 	uxth.w	r8, r8
 800d414:	1419      	asrs	r1, r3, #16
 800d416:	454e      	cmp	r6, r9
 800d418:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d41c:	f84a 3b04 	str.w	r3, [sl], #4
 800d420:	d8e8      	bhi.n	800d3f4 <__mdiff+0x80>
 800d422:	1b33      	subs	r3, r6, r4
 800d424:	3b15      	subs	r3, #21
 800d426:	f023 0303 	bic.w	r3, r3, #3
 800d42a:	3304      	adds	r3, #4
 800d42c:	3415      	adds	r4, #21
 800d42e:	42a6      	cmp	r6, r4
 800d430:	bf38      	it	cc
 800d432:	2304      	movcc	r3, #4
 800d434:	441d      	add	r5, r3
 800d436:	4473      	add	r3, lr
 800d438:	469e      	mov	lr, r3
 800d43a:	462e      	mov	r6, r5
 800d43c:	4566      	cmp	r6, ip
 800d43e:	d30e      	bcc.n	800d45e <__mdiff+0xea>
 800d440:	f10c 0203 	add.w	r2, ip, #3
 800d444:	1b52      	subs	r2, r2, r5
 800d446:	f022 0203 	bic.w	r2, r2, #3
 800d44a:	3d03      	subs	r5, #3
 800d44c:	45ac      	cmp	ip, r5
 800d44e:	bf38      	it	cc
 800d450:	2200      	movcc	r2, #0
 800d452:	4413      	add	r3, r2
 800d454:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d458:	b17a      	cbz	r2, 800d47a <__mdiff+0x106>
 800d45a:	6107      	str	r7, [r0, #16]
 800d45c:	e7a4      	b.n	800d3a8 <__mdiff+0x34>
 800d45e:	f856 8b04 	ldr.w	r8, [r6], #4
 800d462:	fa11 f288 	uxtah	r2, r1, r8
 800d466:	1414      	asrs	r4, r2, #16
 800d468:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d46c:	b292      	uxth	r2, r2
 800d46e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d472:	f84e 2b04 	str.w	r2, [lr], #4
 800d476:	1421      	asrs	r1, r4, #16
 800d478:	e7e0      	b.n	800d43c <__mdiff+0xc8>
 800d47a:	3f01      	subs	r7, #1
 800d47c:	e7ea      	b.n	800d454 <__mdiff+0xe0>
 800d47e:	bf00      	nop
 800d480:	0800f575 	.word	0x0800f575
 800d484:	0800f586 	.word	0x0800f586

0800d488 <__ulp>:
 800d488:	b082      	sub	sp, #8
 800d48a:	ed8d 0b00 	vstr	d0, [sp]
 800d48e:	9a01      	ldr	r2, [sp, #4]
 800d490:	4b0f      	ldr	r3, [pc, #60]	; (800d4d0 <__ulp+0x48>)
 800d492:	4013      	ands	r3, r2
 800d494:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d498:	2b00      	cmp	r3, #0
 800d49a:	dc08      	bgt.n	800d4ae <__ulp+0x26>
 800d49c:	425b      	negs	r3, r3
 800d49e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d4a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d4a6:	da04      	bge.n	800d4b2 <__ulp+0x2a>
 800d4a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d4ac:	4113      	asrs	r3, r2
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	e008      	b.n	800d4c4 <__ulp+0x3c>
 800d4b2:	f1a2 0314 	sub.w	r3, r2, #20
 800d4b6:	2b1e      	cmp	r3, #30
 800d4b8:	bfda      	itte	le
 800d4ba:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d4be:	40da      	lsrle	r2, r3
 800d4c0:	2201      	movgt	r2, #1
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	4619      	mov	r1, r3
 800d4c6:	4610      	mov	r0, r2
 800d4c8:	ec41 0b10 	vmov	d0, r0, r1
 800d4cc:	b002      	add	sp, #8
 800d4ce:	4770      	bx	lr
 800d4d0:	7ff00000 	.word	0x7ff00000

0800d4d4 <__b2d>:
 800d4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4d8:	6906      	ldr	r6, [r0, #16]
 800d4da:	f100 0814 	add.w	r8, r0, #20
 800d4de:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d4e2:	1f37      	subs	r7, r6, #4
 800d4e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d4e8:	4610      	mov	r0, r2
 800d4ea:	f7ff fd53 	bl	800cf94 <__hi0bits>
 800d4ee:	f1c0 0320 	rsb	r3, r0, #32
 800d4f2:	280a      	cmp	r0, #10
 800d4f4:	600b      	str	r3, [r1, #0]
 800d4f6:	491b      	ldr	r1, [pc, #108]	; (800d564 <__b2d+0x90>)
 800d4f8:	dc15      	bgt.n	800d526 <__b2d+0x52>
 800d4fa:	f1c0 0c0b 	rsb	ip, r0, #11
 800d4fe:	fa22 f30c 	lsr.w	r3, r2, ip
 800d502:	45b8      	cmp	r8, r7
 800d504:	ea43 0501 	orr.w	r5, r3, r1
 800d508:	bf34      	ite	cc
 800d50a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d50e:	2300      	movcs	r3, #0
 800d510:	3015      	adds	r0, #21
 800d512:	fa02 f000 	lsl.w	r0, r2, r0
 800d516:	fa23 f30c 	lsr.w	r3, r3, ip
 800d51a:	4303      	orrs	r3, r0
 800d51c:	461c      	mov	r4, r3
 800d51e:	ec45 4b10 	vmov	d0, r4, r5
 800d522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d526:	45b8      	cmp	r8, r7
 800d528:	bf3a      	itte	cc
 800d52a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d52e:	f1a6 0708 	subcc.w	r7, r6, #8
 800d532:	2300      	movcs	r3, #0
 800d534:	380b      	subs	r0, #11
 800d536:	d012      	beq.n	800d55e <__b2d+0x8a>
 800d538:	f1c0 0120 	rsb	r1, r0, #32
 800d53c:	fa23 f401 	lsr.w	r4, r3, r1
 800d540:	4082      	lsls	r2, r0
 800d542:	4322      	orrs	r2, r4
 800d544:	4547      	cmp	r7, r8
 800d546:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800d54a:	bf8c      	ite	hi
 800d54c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d550:	2200      	movls	r2, #0
 800d552:	4083      	lsls	r3, r0
 800d554:	40ca      	lsrs	r2, r1
 800d556:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d55a:	4313      	orrs	r3, r2
 800d55c:	e7de      	b.n	800d51c <__b2d+0x48>
 800d55e:	ea42 0501 	orr.w	r5, r2, r1
 800d562:	e7db      	b.n	800d51c <__b2d+0x48>
 800d564:	3ff00000 	.word	0x3ff00000

0800d568 <__d2b>:
 800d568:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d56c:	460f      	mov	r7, r1
 800d56e:	2101      	movs	r1, #1
 800d570:	ec59 8b10 	vmov	r8, r9, d0
 800d574:	4616      	mov	r6, r2
 800d576:	f7ff fc1b 	bl	800cdb0 <_Balloc>
 800d57a:	4604      	mov	r4, r0
 800d57c:	b930      	cbnz	r0, 800d58c <__d2b+0x24>
 800d57e:	4602      	mov	r2, r0
 800d580:	4b24      	ldr	r3, [pc, #144]	; (800d614 <__d2b+0xac>)
 800d582:	4825      	ldr	r0, [pc, #148]	; (800d618 <__d2b+0xb0>)
 800d584:	f240 310f 	movw	r1, #783	; 0x30f
 800d588:	f001 f9ee 	bl	800e968 <__assert_func>
 800d58c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d590:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d594:	bb2d      	cbnz	r5, 800d5e2 <__d2b+0x7a>
 800d596:	9301      	str	r3, [sp, #4]
 800d598:	f1b8 0300 	subs.w	r3, r8, #0
 800d59c:	d026      	beq.n	800d5ec <__d2b+0x84>
 800d59e:	4668      	mov	r0, sp
 800d5a0:	9300      	str	r3, [sp, #0]
 800d5a2:	f7ff fd17 	bl	800cfd4 <__lo0bits>
 800d5a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d5aa:	b1e8      	cbz	r0, 800d5e8 <__d2b+0x80>
 800d5ac:	f1c0 0320 	rsb	r3, r0, #32
 800d5b0:	fa02 f303 	lsl.w	r3, r2, r3
 800d5b4:	430b      	orrs	r3, r1
 800d5b6:	40c2      	lsrs	r2, r0
 800d5b8:	6163      	str	r3, [r4, #20]
 800d5ba:	9201      	str	r2, [sp, #4]
 800d5bc:	9b01      	ldr	r3, [sp, #4]
 800d5be:	61a3      	str	r3, [r4, #24]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	bf14      	ite	ne
 800d5c4:	2202      	movne	r2, #2
 800d5c6:	2201      	moveq	r2, #1
 800d5c8:	6122      	str	r2, [r4, #16]
 800d5ca:	b1bd      	cbz	r5, 800d5fc <__d2b+0x94>
 800d5cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d5d0:	4405      	add	r5, r0
 800d5d2:	603d      	str	r5, [r7, #0]
 800d5d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d5d8:	6030      	str	r0, [r6, #0]
 800d5da:	4620      	mov	r0, r4
 800d5dc:	b003      	add	sp, #12
 800d5de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d5e6:	e7d6      	b.n	800d596 <__d2b+0x2e>
 800d5e8:	6161      	str	r1, [r4, #20]
 800d5ea:	e7e7      	b.n	800d5bc <__d2b+0x54>
 800d5ec:	a801      	add	r0, sp, #4
 800d5ee:	f7ff fcf1 	bl	800cfd4 <__lo0bits>
 800d5f2:	9b01      	ldr	r3, [sp, #4]
 800d5f4:	6163      	str	r3, [r4, #20]
 800d5f6:	3020      	adds	r0, #32
 800d5f8:	2201      	movs	r2, #1
 800d5fa:	e7e5      	b.n	800d5c8 <__d2b+0x60>
 800d5fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d600:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d604:	6038      	str	r0, [r7, #0]
 800d606:	6918      	ldr	r0, [r3, #16]
 800d608:	f7ff fcc4 	bl	800cf94 <__hi0bits>
 800d60c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d610:	e7e2      	b.n	800d5d8 <__d2b+0x70>
 800d612:	bf00      	nop
 800d614:	0800f575 	.word	0x0800f575
 800d618:	0800f586 	.word	0x0800f586

0800d61c <__ratio>:
 800d61c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d620:	4688      	mov	r8, r1
 800d622:	4669      	mov	r1, sp
 800d624:	4681      	mov	r9, r0
 800d626:	f7ff ff55 	bl	800d4d4 <__b2d>
 800d62a:	a901      	add	r1, sp, #4
 800d62c:	4640      	mov	r0, r8
 800d62e:	ec55 4b10 	vmov	r4, r5, d0
 800d632:	ee10 aa10 	vmov	sl, s0
 800d636:	f7ff ff4d 	bl	800d4d4 <__b2d>
 800d63a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d63e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800d642:	1ad2      	subs	r2, r2, r3
 800d644:	e9dd 3100 	ldrd	r3, r1, [sp]
 800d648:	1a5b      	subs	r3, r3, r1
 800d64a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800d64e:	ec57 6b10 	vmov	r6, r7, d0
 800d652:	2b00      	cmp	r3, #0
 800d654:	bfd6      	itet	le
 800d656:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d65a:	462a      	movgt	r2, r5
 800d65c:	463a      	movle	r2, r7
 800d65e:	46ab      	mov	fp, r5
 800d660:	bfd6      	itet	le
 800d662:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800d666:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d66a:	ee00 3a90 	vmovle	s1, r3
 800d66e:	ec4b ab17 	vmov	d7, sl, fp
 800d672:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800d676:	b003      	add	sp, #12
 800d678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d67c <__copybits>:
 800d67c:	3901      	subs	r1, #1
 800d67e:	b570      	push	{r4, r5, r6, lr}
 800d680:	1149      	asrs	r1, r1, #5
 800d682:	6914      	ldr	r4, [r2, #16]
 800d684:	3101      	adds	r1, #1
 800d686:	f102 0314 	add.w	r3, r2, #20
 800d68a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d68e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d692:	1f05      	subs	r5, r0, #4
 800d694:	42a3      	cmp	r3, r4
 800d696:	d30c      	bcc.n	800d6b2 <__copybits+0x36>
 800d698:	1aa3      	subs	r3, r4, r2
 800d69a:	3b11      	subs	r3, #17
 800d69c:	f023 0303 	bic.w	r3, r3, #3
 800d6a0:	3211      	adds	r2, #17
 800d6a2:	42a2      	cmp	r2, r4
 800d6a4:	bf88      	it	hi
 800d6a6:	2300      	movhi	r3, #0
 800d6a8:	4418      	add	r0, r3
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	4288      	cmp	r0, r1
 800d6ae:	d305      	bcc.n	800d6bc <__copybits+0x40>
 800d6b0:	bd70      	pop	{r4, r5, r6, pc}
 800d6b2:	f853 6b04 	ldr.w	r6, [r3], #4
 800d6b6:	f845 6f04 	str.w	r6, [r5, #4]!
 800d6ba:	e7eb      	b.n	800d694 <__copybits+0x18>
 800d6bc:	f840 3b04 	str.w	r3, [r0], #4
 800d6c0:	e7f4      	b.n	800d6ac <__copybits+0x30>

0800d6c2 <__any_on>:
 800d6c2:	f100 0214 	add.w	r2, r0, #20
 800d6c6:	6900      	ldr	r0, [r0, #16]
 800d6c8:	114b      	asrs	r3, r1, #5
 800d6ca:	4298      	cmp	r0, r3
 800d6cc:	b510      	push	{r4, lr}
 800d6ce:	db11      	blt.n	800d6f4 <__any_on+0x32>
 800d6d0:	dd0a      	ble.n	800d6e8 <__any_on+0x26>
 800d6d2:	f011 011f 	ands.w	r1, r1, #31
 800d6d6:	d007      	beq.n	800d6e8 <__any_on+0x26>
 800d6d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d6dc:	fa24 f001 	lsr.w	r0, r4, r1
 800d6e0:	fa00 f101 	lsl.w	r1, r0, r1
 800d6e4:	428c      	cmp	r4, r1
 800d6e6:	d10b      	bne.n	800d700 <__any_on+0x3e>
 800d6e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d803      	bhi.n	800d6f8 <__any_on+0x36>
 800d6f0:	2000      	movs	r0, #0
 800d6f2:	bd10      	pop	{r4, pc}
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	e7f7      	b.n	800d6e8 <__any_on+0x26>
 800d6f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d6fc:	2900      	cmp	r1, #0
 800d6fe:	d0f5      	beq.n	800d6ec <__any_on+0x2a>
 800d700:	2001      	movs	r0, #1
 800d702:	e7f6      	b.n	800d6f2 <__any_on+0x30>

0800d704 <sulp>:
 800d704:	b570      	push	{r4, r5, r6, lr}
 800d706:	4604      	mov	r4, r0
 800d708:	460d      	mov	r5, r1
 800d70a:	4616      	mov	r6, r2
 800d70c:	ec45 4b10 	vmov	d0, r4, r5
 800d710:	f7ff feba 	bl	800d488 <__ulp>
 800d714:	b17e      	cbz	r6, 800d736 <sulp+0x32>
 800d716:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d71a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d71e:	2b00      	cmp	r3, #0
 800d720:	dd09      	ble.n	800d736 <sulp+0x32>
 800d722:	051b      	lsls	r3, r3, #20
 800d724:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800d728:	2000      	movs	r0, #0
 800d72a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800d72e:	ec41 0b17 	vmov	d7, r0, r1
 800d732:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d736:	bd70      	pop	{r4, r5, r6, pc}

0800d738 <_strtod_l>:
 800d738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d73c:	ed2d 8b0e 	vpush	{d8-d14}
 800d740:	b097      	sub	sp, #92	; 0x5c
 800d742:	4604      	mov	r4, r0
 800d744:	920d      	str	r2, [sp, #52]	; 0x34
 800d746:	2200      	movs	r2, #0
 800d748:	9212      	str	r2, [sp, #72]	; 0x48
 800d74a:	468a      	mov	sl, r1
 800d74c:	f04f 0800 	mov.w	r8, #0
 800d750:	f04f 0900 	mov.w	r9, #0
 800d754:	460a      	mov	r2, r1
 800d756:	9211      	str	r2, [sp, #68]	; 0x44
 800d758:	7811      	ldrb	r1, [r2, #0]
 800d75a:	292b      	cmp	r1, #43	; 0x2b
 800d75c:	d04c      	beq.n	800d7f8 <_strtod_l+0xc0>
 800d75e:	d839      	bhi.n	800d7d4 <_strtod_l+0x9c>
 800d760:	290d      	cmp	r1, #13
 800d762:	d833      	bhi.n	800d7cc <_strtod_l+0x94>
 800d764:	2908      	cmp	r1, #8
 800d766:	d833      	bhi.n	800d7d0 <_strtod_l+0x98>
 800d768:	2900      	cmp	r1, #0
 800d76a:	d03c      	beq.n	800d7e6 <_strtod_l+0xae>
 800d76c:	2200      	movs	r2, #0
 800d76e:	9208      	str	r2, [sp, #32]
 800d770:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800d772:	7832      	ldrb	r2, [r6, #0]
 800d774:	2a30      	cmp	r2, #48	; 0x30
 800d776:	f040 80b8 	bne.w	800d8ea <_strtod_l+0x1b2>
 800d77a:	7872      	ldrb	r2, [r6, #1]
 800d77c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800d780:	2a58      	cmp	r2, #88	; 0x58
 800d782:	d170      	bne.n	800d866 <_strtod_l+0x12e>
 800d784:	9302      	str	r3, [sp, #8]
 800d786:	9b08      	ldr	r3, [sp, #32]
 800d788:	9301      	str	r3, [sp, #4]
 800d78a:	ab12      	add	r3, sp, #72	; 0x48
 800d78c:	9300      	str	r3, [sp, #0]
 800d78e:	4a91      	ldr	r2, [pc, #580]	; (800d9d4 <_strtod_l+0x29c>)
 800d790:	ab13      	add	r3, sp, #76	; 0x4c
 800d792:	a911      	add	r1, sp, #68	; 0x44
 800d794:	4620      	mov	r0, r4
 800d796:	f001 f983 	bl	800eaa0 <__gethex>
 800d79a:	f010 070f 	ands.w	r7, r0, #15
 800d79e:	4605      	mov	r5, r0
 800d7a0:	d005      	beq.n	800d7ae <_strtod_l+0x76>
 800d7a2:	2f06      	cmp	r7, #6
 800d7a4:	d12a      	bne.n	800d7fc <_strtod_l+0xc4>
 800d7a6:	3601      	adds	r6, #1
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	9611      	str	r6, [sp, #68]	; 0x44
 800d7ac:	9308      	str	r3, [sp, #32]
 800d7ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	f040 8555 	bne.w	800e260 <_strtod_l+0xb28>
 800d7b6:	9b08      	ldr	r3, [sp, #32]
 800d7b8:	ec49 8b10 	vmov	d0, r8, r9
 800d7bc:	b1cb      	cbz	r3, 800d7f2 <_strtod_l+0xba>
 800d7be:	eeb1 0b40 	vneg.f64	d0, d0
 800d7c2:	b017      	add	sp, #92	; 0x5c
 800d7c4:	ecbd 8b0e 	vpop	{d8-d14}
 800d7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7cc:	2920      	cmp	r1, #32
 800d7ce:	d1cd      	bne.n	800d76c <_strtod_l+0x34>
 800d7d0:	3201      	adds	r2, #1
 800d7d2:	e7c0      	b.n	800d756 <_strtod_l+0x1e>
 800d7d4:	292d      	cmp	r1, #45	; 0x2d
 800d7d6:	d1c9      	bne.n	800d76c <_strtod_l+0x34>
 800d7d8:	2101      	movs	r1, #1
 800d7da:	9108      	str	r1, [sp, #32]
 800d7dc:	1c51      	adds	r1, r2, #1
 800d7de:	9111      	str	r1, [sp, #68]	; 0x44
 800d7e0:	7852      	ldrb	r2, [r2, #1]
 800d7e2:	2a00      	cmp	r2, #0
 800d7e4:	d1c4      	bne.n	800d770 <_strtod_l+0x38>
 800d7e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d7e8:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	f040 8535 	bne.w	800e25c <_strtod_l+0xb24>
 800d7f2:	ec49 8b10 	vmov	d0, r8, r9
 800d7f6:	e7e4      	b.n	800d7c2 <_strtod_l+0x8a>
 800d7f8:	2100      	movs	r1, #0
 800d7fa:	e7ee      	b.n	800d7da <_strtod_l+0xa2>
 800d7fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d7fe:	b13a      	cbz	r2, 800d810 <_strtod_l+0xd8>
 800d800:	2135      	movs	r1, #53	; 0x35
 800d802:	a814      	add	r0, sp, #80	; 0x50
 800d804:	f7ff ff3a 	bl	800d67c <__copybits>
 800d808:	9912      	ldr	r1, [sp, #72]	; 0x48
 800d80a:	4620      	mov	r0, r4
 800d80c:	f7ff fb10 	bl	800ce30 <_Bfree>
 800d810:	1e7b      	subs	r3, r7, #1
 800d812:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d814:	2b04      	cmp	r3, #4
 800d816:	d806      	bhi.n	800d826 <_strtod_l+0xee>
 800d818:	e8df f003 	tbb	[pc, r3]
 800d81c:	201d0314 	.word	0x201d0314
 800d820:	14          	.byte	0x14
 800d821:	00          	.byte	0x00
 800d822:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800d826:	05eb      	lsls	r3, r5, #23
 800d828:	bf48      	it	mi
 800d82a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800d82e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d832:	0d1b      	lsrs	r3, r3, #20
 800d834:	051b      	lsls	r3, r3, #20
 800d836:	2b00      	cmp	r3, #0
 800d838:	d1b9      	bne.n	800d7ae <_strtod_l+0x76>
 800d83a:	f7fe fb91 	bl	800bf60 <__errno>
 800d83e:	2322      	movs	r3, #34	; 0x22
 800d840:	6003      	str	r3, [r0, #0]
 800d842:	e7b4      	b.n	800d7ae <_strtod_l+0x76>
 800d844:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800d848:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d84c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d850:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800d854:	e7e7      	b.n	800d826 <_strtod_l+0xee>
 800d856:	f8df 9184 	ldr.w	r9, [pc, #388]	; 800d9dc <_strtod_l+0x2a4>
 800d85a:	e7e4      	b.n	800d826 <_strtod_l+0xee>
 800d85c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800d860:	f04f 38ff 	mov.w	r8, #4294967295
 800d864:	e7df      	b.n	800d826 <_strtod_l+0xee>
 800d866:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d868:	1c5a      	adds	r2, r3, #1
 800d86a:	9211      	str	r2, [sp, #68]	; 0x44
 800d86c:	785b      	ldrb	r3, [r3, #1]
 800d86e:	2b30      	cmp	r3, #48	; 0x30
 800d870:	d0f9      	beq.n	800d866 <_strtod_l+0x12e>
 800d872:	2b00      	cmp	r3, #0
 800d874:	d09b      	beq.n	800d7ae <_strtod_l+0x76>
 800d876:	2301      	movs	r3, #1
 800d878:	9306      	str	r3, [sp, #24]
 800d87a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d87c:	9309      	str	r3, [sp, #36]	; 0x24
 800d87e:	2300      	movs	r3, #0
 800d880:	9305      	str	r3, [sp, #20]
 800d882:	9307      	str	r3, [sp, #28]
 800d884:	461e      	mov	r6, r3
 800d886:	220a      	movs	r2, #10
 800d888:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d88a:	7805      	ldrb	r5, [r0, #0]
 800d88c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800d890:	b2d9      	uxtb	r1, r3
 800d892:	2909      	cmp	r1, #9
 800d894:	d92b      	bls.n	800d8ee <_strtod_l+0x1b6>
 800d896:	4950      	ldr	r1, [pc, #320]	; (800d9d8 <_strtod_l+0x2a0>)
 800d898:	2201      	movs	r2, #1
 800d89a:	f001 f80b 	bl	800e8b4 <strncmp>
 800d89e:	2800      	cmp	r0, #0
 800d8a0:	d035      	beq.n	800d90e <_strtod_l+0x1d6>
 800d8a2:	2000      	movs	r0, #0
 800d8a4:	462a      	mov	r2, r5
 800d8a6:	4633      	mov	r3, r6
 800d8a8:	4683      	mov	fp, r0
 800d8aa:	4601      	mov	r1, r0
 800d8ac:	2a65      	cmp	r2, #101	; 0x65
 800d8ae:	d001      	beq.n	800d8b4 <_strtod_l+0x17c>
 800d8b0:	2a45      	cmp	r2, #69	; 0x45
 800d8b2:	d118      	bne.n	800d8e6 <_strtod_l+0x1ae>
 800d8b4:	b91b      	cbnz	r3, 800d8be <_strtod_l+0x186>
 800d8b6:	9b06      	ldr	r3, [sp, #24]
 800d8b8:	4303      	orrs	r3, r0
 800d8ba:	d094      	beq.n	800d7e6 <_strtod_l+0xae>
 800d8bc:	2300      	movs	r3, #0
 800d8be:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800d8c2:	f10a 0201 	add.w	r2, sl, #1
 800d8c6:	9211      	str	r2, [sp, #68]	; 0x44
 800d8c8:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800d8cc:	2a2b      	cmp	r2, #43	; 0x2b
 800d8ce:	d075      	beq.n	800d9bc <_strtod_l+0x284>
 800d8d0:	2a2d      	cmp	r2, #45	; 0x2d
 800d8d2:	d07b      	beq.n	800d9cc <_strtod_l+0x294>
 800d8d4:	f04f 0e00 	mov.w	lr, #0
 800d8d8:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800d8dc:	2d09      	cmp	r5, #9
 800d8de:	f240 8083 	bls.w	800d9e8 <_strtod_l+0x2b0>
 800d8e2:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800d8e6:	2500      	movs	r5, #0
 800d8e8:	e09e      	b.n	800da28 <_strtod_l+0x2f0>
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	e7c4      	b.n	800d878 <_strtod_l+0x140>
 800d8ee:	2e08      	cmp	r6, #8
 800d8f0:	bfd5      	itete	le
 800d8f2:	9907      	ldrle	r1, [sp, #28]
 800d8f4:	9905      	ldrgt	r1, [sp, #20]
 800d8f6:	fb02 3301 	mlale	r3, r2, r1, r3
 800d8fa:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d8fe:	f100 0001 	add.w	r0, r0, #1
 800d902:	bfd4      	ite	le
 800d904:	9307      	strle	r3, [sp, #28]
 800d906:	9305      	strgt	r3, [sp, #20]
 800d908:	3601      	adds	r6, #1
 800d90a:	9011      	str	r0, [sp, #68]	; 0x44
 800d90c:	e7bc      	b.n	800d888 <_strtod_l+0x150>
 800d90e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d910:	1c5a      	adds	r2, r3, #1
 800d912:	9211      	str	r2, [sp, #68]	; 0x44
 800d914:	785a      	ldrb	r2, [r3, #1]
 800d916:	b3ae      	cbz	r6, 800d984 <_strtod_l+0x24c>
 800d918:	4683      	mov	fp, r0
 800d91a:	4633      	mov	r3, r6
 800d91c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d920:	2909      	cmp	r1, #9
 800d922:	d912      	bls.n	800d94a <_strtod_l+0x212>
 800d924:	2101      	movs	r1, #1
 800d926:	e7c1      	b.n	800d8ac <_strtod_l+0x174>
 800d928:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d92a:	1c5a      	adds	r2, r3, #1
 800d92c:	9211      	str	r2, [sp, #68]	; 0x44
 800d92e:	785a      	ldrb	r2, [r3, #1]
 800d930:	3001      	adds	r0, #1
 800d932:	2a30      	cmp	r2, #48	; 0x30
 800d934:	d0f8      	beq.n	800d928 <_strtod_l+0x1f0>
 800d936:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d93a:	2b08      	cmp	r3, #8
 800d93c:	f200 8495 	bhi.w	800e26a <_strtod_l+0xb32>
 800d940:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d942:	9309      	str	r3, [sp, #36]	; 0x24
 800d944:	4683      	mov	fp, r0
 800d946:	2000      	movs	r0, #0
 800d948:	4603      	mov	r3, r0
 800d94a:	3a30      	subs	r2, #48	; 0x30
 800d94c:	f100 0101 	add.w	r1, r0, #1
 800d950:	d012      	beq.n	800d978 <_strtod_l+0x240>
 800d952:	448b      	add	fp, r1
 800d954:	eb00 0c03 	add.w	ip, r0, r3
 800d958:	4619      	mov	r1, r3
 800d95a:	250a      	movs	r5, #10
 800d95c:	4561      	cmp	r1, ip
 800d95e:	d113      	bne.n	800d988 <_strtod_l+0x250>
 800d960:	1819      	adds	r1, r3, r0
 800d962:	2908      	cmp	r1, #8
 800d964:	f103 0301 	add.w	r3, r3, #1
 800d968:	4403      	add	r3, r0
 800d96a:	dc1b      	bgt.n	800d9a4 <_strtod_l+0x26c>
 800d96c:	9807      	ldr	r0, [sp, #28]
 800d96e:	210a      	movs	r1, #10
 800d970:	fb01 2200 	mla	r2, r1, r0, r2
 800d974:	9207      	str	r2, [sp, #28]
 800d976:	2100      	movs	r1, #0
 800d978:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d97a:	1c50      	adds	r0, r2, #1
 800d97c:	9011      	str	r0, [sp, #68]	; 0x44
 800d97e:	7852      	ldrb	r2, [r2, #1]
 800d980:	4608      	mov	r0, r1
 800d982:	e7cb      	b.n	800d91c <_strtod_l+0x1e4>
 800d984:	4630      	mov	r0, r6
 800d986:	e7d4      	b.n	800d932 <_strtod_l+0x1fa>
 800d988:	2908      	cmp	r1, #8
 800d98a:	f101 0101 	add.w	r1, r1, #1
 800d98e:	dc03      	bgt.n	800d998 <_strtod_l+0x260>
 800d990:	9f07      	ldr	r7, [sp, #28]
 800d992:	436f      	muls	r7, r5
 800d994:	9707      	str	r7, [sp, #28]
 800d996:	e7e1      	b.n	800d95c <_strtod_l+0x224>
 800d998:	2910      	cmp	r1, #16
 800d99a:	bfde      	ittt	le
 800d99c:	9f05      	ldrle	r7, [sp, #20]
 800d99e:	436f      	mulle	r7, r5
 800d9a0:	9705      	strle	r7, [sp, #20]
 800d9a2:	e7db      	b.n	800d95c <_strtod_l+0x224>
 800d9a4:	2b10      	cmp	r3, #16
 800d9a6:	bfdf      	itttt	le
 800d9a8:	9805      	ldrle	r0, [sp, #20]
 800d9aa:	210a      	movle	r1, #10
 800d9ac:	fb01 2200 	mlale	r2, r1, r0, r2
 800d9b0:	9205      	strle	r2, [sp, #20]
 800d9b2:	e7e0      	b.n	800d976 <_strtod_l+0x23e>
 800d9b4:	f04f 0b00 	mov.w	fp, #0
 800d9b8:	2101      	movs	r1, #1
 800d9ba:	e77c      	b.n	800d8b6 <_strtod_l+0x17e>
 800d9bc:	f04f 0e00 	mov.w	lr, #0
 800d9c0:	f10a 0202 	add.w	r2, sl, #2
 800d9c4:	9211      	str	r2, [sp, #68]	; 0x44
 800d9c6:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800d9ca:	e785      	b.n	800d8d8 <_strtod_l+0x1a0>
 800d9cc:	f04f 0e01 	mov.w	lr, #1
 800d9d0:	e7f6      	b.n	800d9c0 <_strtod_l+0x288>
 800d9d2:	bf00      	nop
 800d9d4:	0800f6e0 	.word	0x0800f6e0
 800d9d8:	0800f6dc 	.word	0x0800f6dc
 800d9dc:	7ff00000 	.word	0x7ff00000
 800d9e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d9e2:	1c55      	adds	r5, r2, #1
 800d9e4:	9511      	str	r5, [sp, #68]	; 0x44
 800d9e6:	7852      	ldrb	r2, [r2, #1]
 800d9e8:	2a30      	cmp	r2, #48	; 0x30
 800d9ea:	d0f9      	beq.n	800d9e0 <_strtod_l+0x2a8>
 800d9ec:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800d9f0:	2d08      	cmp	r5, #8
 800d9f2:	f63f af78 	bhi.w	800d8e6 <_strtod_l+0x1ae>
 800d9f6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800d9fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d9fc:	920a      	str	r2, [sp, #40]	; 0x28
 800d9fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800da00:	1c55      	adds	r5, r2, #1
 800da02:	9511      	str	r5, [sp, #68]	; 0x44
 800da04:	7852      	ldrb	r2, [r2, #1]
 800da06:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800da0a:	2f09      	cmp	r7, #9
 800da0c:	d937      	bls.n	800da7e <_strtod_l+0x346>
 800da0e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800da10:	1bed      	subs	r5, r5, r7
 800da12:	2d08      	cmp	r5, #8
 800da14:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800da18:	dc02      	bgt.n	800da20 <_strtod_l+0x2e8>
 800da1a:	4565      	cmp	r5, ip
 800da1c:	bfa8      	it	ge
 800da1e:	4665      	movge	r5, ip
 800da20:	f1be 0f00 	cmp.w	lr, #0
 800da24:	d000      	beq.n	800da28 <_strtod_l+0x2f0>
 800da26:	426d      	negs	r5, r5
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d14d      	bne.n	800dac8 <_strtod_l+0x390>
 800da2c:	9b06      	ldr	r3, [sp, #24]
 800da2e:	4303      	orrs	r3, r0
 800da30:	f47f aebd 	bne.w	800d7ae <_strtod_l+0x76>
 800da34:	2900      	cmp	r1, #0
 800da36:	f47f aed6 	bne.w	800d7e6 <_strtod_l+0xae>
 800da3a:	2a69      	cmp	r2, #105	; 0x69
 800da3c:	d027      	beq.n	800da8e <_strtod_l+0x356>
 800da3e:	dc24      	bgt.n	800da8a <_strtod_l+0x352>
 800da40:	2a49      	cmp	r2, #73	; 0x49
 800da42:	d024      	beq.n	800da8e <_strtod_l+0x356>
 800da44:	2a4e      	cmp	r2, #78	; 0x4e
 800da46:	f47f aece 	bne.w	800d7e6 <_strtod_l+0xae>
 800da4a:	4995      	ldr	r1, [pc, #596]	; (800dca0 <_strtod_l+0x568>)
 800da4c:	a811      	add	r0, sp, #68	; 0x44
 800da4e:	f001 fa67 	bl	800ef20 <__match>
 800da52:	2800      	cmp	r0, #0
 800da54:	f43f aec7 	beq.w	800d7e6 <_strtod_l+0xae>
 800da58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	2b28      	cmp	r3, #40	; 0x28
 800da5e:	d12d      	bne.n	800dabc <_strtod_l+0x384>
 800da60:	4990      	ldr	r1, [pc, #576]	; (800dca4 <_strtod_l+0x56c>)
 800da62:	aa14      	add	r2, sp, #80	; 0x50
 800da64:	a811      	add	r0, sp, #68	; 0x44
 800da66:	f001 fa6f 	bl	800ef48 <__hexnan>
 800da6a:	2805      	cmp	r0, #5
 800da6c:	d126      	bne.n	800dabc <_strtod_l+0x384>
 800da6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800da70:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800da74:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800da78:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800da7c:	e697      	b.n	800d7ae <_strtod_l+0x76>
 800da7e:	250a      	movs	r5, #10
 800da80:	fb05 2c0c 	mla	ip, r5, ip, r2
 800da84:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800da88:	e7b9      	b.n	800d9fe <_strtod_l+0x2c6>
 800da8a:	2a6e      	cmp	r2, #110	; 0x6e
 800da8c:	e7db      	b.n	800da46 <_strtod_l+0x30e>
 800da8e:	4986      	ldr	r1, [pc, #536]	; (800dca8 <_strtod_l+0x570>)
 800da90:	a811      	add	r0, sp, #68	; 0x44
 800da92:	f001 fa45 	bl	800ef20 <__match>
 800da96:	2800      	cmp	r0, #0
 800da98:	f43f aea5 	beq.w	800d7e6 <_strtod_l+0xae>
 800da9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800da9e:	4983      	ldr	r1, [pc, #524]	; (800dcac <_strtod_l+0x574>)
 800daa0:	3b01      	subs	r3, #1
 800daa2:	a811      	add	r0, sp, #68	; 0x44
 800daa4:	9311      	str	r3, [sp, #68]	; 0x44
 800daa6:	f001 fa3b 	bl	800ef20 <__match>
 800daaa:	b910      	cbnz	r0, 800dab2 <_strtod_l+0x37a>
 800daac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800daae:	3301      	adds	r3, #1
 800dab0:	9311      	str	r3, [sp, #68]	; 0x44
 800dab2:	f8df 920c 	ldr.w	r9, [pc, #524]	; 800dcc0 <_strtod_l+0x588>
 800dab6:	f04f 0800 	mov.w	r8, #0
 800daba:	e678      	b.n	800d7ae <_strtod_l+0x76>
 800dabc:	487c      	ldr	r0, [pc, #496]	; (800dcb0 <_strtod_l+0x578>)
 800dabe:	f000 ff4b 	bl	800e958 <nan>
 800dac2:	ec59 8b10 	vmov	r8, r9, d0
 800dac6:	e672      	b.n	800d7ae <_strtod_l+0x76>
 800dac8:	eddd 7a07 	vldr	s15, [sp, #28]
 800dacc:	eba5 020b 	sub.w	r2, r5, fp
 800dad0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800dad4:	2e00      	cmp	r6, #0
 800dad6:	bf08      	it	eq
 800dad8:	461e      	moveq	r6, r3
 800dada:	2b10      	cmp	r3, #16
 800dadc:	9206      	str	r2, [sp, #24]
 800dade:	461a      	mov	r2, r3
 800dae0:	bfa8      	it	ge
 800dae2:	2210      	movge	r2, #16
 800dae4:	2b09      	cmp	r3, #9
 800dae6:	ec59 8b17 	vmov	r8, r9, d7
 800daea:	dd0c      	ble.n	800db06 <_strtod_l+0x3ce>
 800daec:	4971      	ldr	r1, [pc, #452]	; (800dcb4 <_strtod_l+0x57c>)
 800daee:	eddd 6a05 	vldr	s13, [sp, #20]
 800daf2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800daf6:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800dafa:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800dafe:	eea7 6b05 	vfma.f64	d6, d7, d5
 800db02:	ec59 8b16 	vmov	r8, r9, d6
 800db06:	2b0f      	cmp	r3, #15
 800db08:	dc37      	bgt.n	800db7a <_strtod_l+0x442>
 800db0a:	9906      	ldr	r1, [sp, #24]
 800db0c:	2900      	cmp	r1, #0
 800db0e:	f43f ae4e 	beq.w	800d7ae <_strtod_l+0x76>
 800db12:	dd23      	ble.n	800db5c <_strtod_l+0x424>
 800db14:	2916      	cmp	r1, #22
 800db16:	dc0b      	bgt.n	800db30 <_strtod_l+0x3f8>
 800db18:	4b66      	ldr	r3, [pc, #408]	; (800dcb4 <_strtod_l+0x57c>)
 800db1a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800db1e:	ed93 7b00 	vldr	d7, [r3]
 800db22:	ec49 8b16 	vmov	d6, r8, r9
 800db26:	ee27 7b06 	vmul.f64	d7, d7, d6
 800db2a:	ec59 8b17 	vmov	r8, r9, d7
 800db2e:	e63e      	b.n	800d7ae <_strtod_l+0x76>
 800db30:	9806      	ldr	r0, [sp, #24]
 800db32:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800db36:	4281      	cmp	r1, r0
 800db38:	db1f      	blt.n	800db7a <_strtod_l+0x442>
 800db3a:	4a5e      	ldr	r2, [pc, #376]	; (800dcb4 <_strtod_l+0x57c>)
 800db3c:	f1c3 030f 	rsb	r3, r3, #15
 800db40:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800db44:	ed91 7b00 	vldr	d7, [r1]
 800db48:	ec49 8b16 	vmov	d6, r8, r9
 800db4c:	1ac3      	subs	r3, r0, r3
 800db4e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800db52:	ee27 7b06 	vmul.f64	d7, d7, d6
 800db56:	ed92 6b00 	vldr	d6, [r2]
 800db5a:	e7e4      	b.n	800db26 <_strtod_l+0x3ee>
 800db5c:	9906      	ldr	r1, [sp, #24]
 800db5e:	3116      	adds	r1, #22
 800db60:	db0b      	blt.n	800db7a <_strtod_l+0x442>
 800db62:	4b54      	ldr	r3, [pc, #336]	; (800dcb4 <_strtod_l+0x57c>)
 800db64:	ebab 0505 	sub.w	r5, fp, r5
 800db68:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800db6c:	ed95 7b00 	vldr	d7, [r5]
 800db70:	ec49 8b16 	vmov	d6, r8, r9
 800db74:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800db78:	e7d7      	b.n	800db2a <_strtod_l+0x3f2>
 800db7a:	9906      	ldr	r1, [sp, #24]
 800db7c:	1a9a      	subs	r2, r3, r2
 800db7e:	440a      	add	r2, r1
 800db80:	2a00      	cmp	r2, #0
 800db82:	dd6e      	ble.n	800dc62 <_strtod_l+0x52a>
 800db84:	f012 000f 	ands.w	r0, r2, #15
 800db88:	d00a      	beq.n	800dba0 <_strtod_l+0x468>
 800db8a:	494a      	ldr	r1, [pc, #296]	; (800dcb4 <_strtod_l+0x57c>)
 800db8c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800db90:	ed91 7b00 	vldr	d7, [r1]
 800db94:	ec49 8b16 	vmov	d6, r8, r9
 800db98:	ee27 7b06 	vmul.f64	d7, d7, d6
 800db9c:	ec59 8b17 	vmov	r8, r9, d7
 800dba0:	f032 020f 	bics.w	r2, r2, #15
 800dba4:	d04e      	beq.n	800dc44 <_strtod_l+0x50c>
 800dba6:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800dbaa:	dd22      	ble.n	800dbf2 <_strtod_l+0x4ba>
 800dbac:	2500      	movs	r5, #0
 800dbae:	462e      	mov	r6, r5
 800dbb0:	9507      	str	r5, [sp, #28]
 800dbb2:	462f      	mov	r7, r5
 800dbb4:	2322      	movs	r3, #34	; 0x22
 800dbb6:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800dcc0 <_strtod_l+0x588>
 800dbba:	6023      	str	r3, [r4, #0]
 800dbbc:	f04f 0800 	mov.w	r8, #0
 800dbc0:	9b07      	ldr	r3, [sp, #28]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	f43f adf3 	beq.w	800d7ae <_strtod_l+0x76>
 800dbc8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800dbca:	4620      	mov	r0, r4
 800dbcc:	f7ff f930 	bl	800ce30 <_Bfree>
 800dbd0:	4639      	mov	r1, r7
 800dbd2:	4620      	mov	r0, r4
 800dbd4:	f7ff f92c 	bl	800ce30 <_Bfree>
 800dbd8:	4631      	mov	r1, r6
 800dbda:	4620      	mov	r0, r4
 800dbdc:	f7ff f928 	bl	800ce30 <_Bfree>
 800dbe0:	9907      	ldr	r1, [sp, #28]
 800dbe2:	4620      	mov	r0, r4
 800dbe4:	f7ff f924 	bl	800ce30 <_Bfree>
 800dbe8:	4629      	mov	r1, r5
 800dbea:	4620      	mov	r0, r4
 800dbec:	f7ff f920 	bl	800ce30 <_Bfree>
 800dbf0:	e5dd      	b.n	800d7ae <_strtod_l+0x76>
 800dbf2:	2000      	movs	r0, #0
 800dbf4:	ec49 8b17 	vmov	d7, r8, r9
 800dbf8:	4f2f      	ldr	r7, [pc, #188]	; (800dcb8 <_strtod_l+0x580>)
 800dbfa:	1112      	asrs	r2, r2, #4
 800dbfc:	4601      	mov	r1, r0
 800dbfe:	2a01      	cmp	r2, #1
 800dc00:	dc23      	bgt.n	800dc4a <_strtod_l+0x512>
 800dc02:	b108      	cbz	r0, 800dc08 <_strtod_l+0x4d0>
 800dc04:	ec59 8b17 	vmov	r8, r9, d7
 800dc08:	4a2b      	ldr	r2, [pc, #172]	; (800dcb8 <_strtod_l+0x580>)
 800dc0a:	482c      	ldr	r0, [pc, #176]	; (800dcbc <_strtod_l+0x584>)
 800dc0c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800dc10:	ed92 7b00 	vldr	d7, [r2]
 800dc14:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800dc18:	ec49 8b16 	vmov	d6, r8, r9
 800dc1c:	4a28      	ldr	r2, [pc, #160]	; (800dcc0 <_strtod_l+0x588>)
 800dc1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dc22:	ee17 1a90 	vmov	r1, s15
 800dc26:	400a      	ands	r2, r1
 800dc28:	4282      	cmp	r2, r0
 800dc2a:	ec59 8b17 	vmov	r8, r9, d7
 800dc2e:	d8bd      	bhi.n	800dbac <_strtod_l+0x474>
 800dc30:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800dc34:	4282      	cmp	r2, r0
 800dc36:	bf86      	itte	hi
 800dc38:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 800dcc4 <_strtod_l+0x58c>
 800dc3c:	f04f 38ff 	movhi.w	r8, #4294967295
 800dc40:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800dc44:	2200      	movs	r2, #0
 800dc46:	9205      	str	r2, [sp, #20]
 800dc48:	e076      	b.n	800dd38 <_strtod_l+0x600>
 800dc4a:	f012 0f01 	tst.w	r2, #1
 800dc4e:	d004      	beq.n	800dc5a <_strtod_l+0x522>
 800dc50:	ed97 6b00 	vldr	d6, [r7]
 800dc54:	2001      	movs	r0, #1
 800dc56:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dc5a:	3101      	adds	r1, #1
 800dc5c:	1052      	asrs	r2, r2, #1
 800dc5e:	3708      	adds	r7, #8
 800dc60:	e7cd      	b.n	800dbfe <_strtod_l+0x4c6>
 800dc62:	d0ef      	beq.n	800dc44 <_strtod_l+0x50c>
 800dc64:	4252      	negs	r2, r2
 800dc66:	f012 000f 	ands.w	r0, r2, #15
 800dc6a:	d00a      	beq.n	800dc82 <_strtod_l+0x54a>
 800dc6c:	4911      	ldr	r1, [pc, #68]	; (800dcb4 <_strtod_l+0x57c>)
 800dc6e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800dc72:	ed91 7b00 	vldr	d7, [r1]
 800dc76:	ec49 8b16 	vmov	d6, r8, r9
 800dc7a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800dc7e:	ec59 8b17 	vmov	r8, r9, d7
 800dc82:	1112      	asrs	r2, r2, #4
 800dc84:	d0de      	beq.n	800dc44 <_strtod_l+0x50c>
 800dc86:	2a1f      	cmp	r2, #31
 800dc88:	dd1e      	ble.n	800dcc8 <_strtod_l+0x590>
 800dc8a:	2500      	movs	r5, #0
 800dc8c:	462e      	mov	r6, r5
 800dc8e:	9507      	str	r5, [sp, #28]
 800dc90:	462f      	mov	r7, r5
 800dc92:	2322      	movs	r3, #34	; 0x22
 800dc94:	f04f 0800 	mov.w	r8, #0
 800dc98:	f04f 0900 	mov.w	r9, #0
 800dc9c:	6023      	str	r3, [r4, #0]
 800dc9e:	e78f      	b.n	800dbc0 <_strtod_l+0x488>
 800dca0:	0800f4cd 	.word	0x0800f4cd
 800dca4:	0800f6f4 	.word	0x0800f6f4
 800dca8:	0800f4c5 	.word	0x0800f4c5
 800dcac:	0800f4fc 	.word	0x0800f4fc
 800dcb0:	0800f885 	.word	0x0800f885
 800dcb4:	0800f608 	.word	0x0800f608
 800dcb8:	0800f5e0 	.word	0x0800f5e0
 800dcbc:	7ca00000 	.word	0x7ca00000
 800dcc0:	7ff00000 	.word	0x7ff00000
 800dcc4:	7fefffff 	.word	0x7fefffff
 800dcc8:	f012 0110 	ands.w	r1, r2, #16
 800dccc:	bf18      	it	ne
 800dcce:	216a      	movne	r1, #106	; 0x6a
 800dcd0:	9105      	str	r1, [sp, #20]
 800dcd2:	ec49 8b17 	vmov	d7, r8, r9
 800dcd6:	49be      	ldr	r1, [pc, #760]	; (800dfd0 <_strtod_l+0x898>)
 800dcd8:	2000      	movs	r0, #0
 800dcda:	07d7      	lsls	r7, r2, #31
 800dcdc:	d504      	bpl.n	800dce8 <_strtod_l+0x5b0>
 800dcde:	ed91 6b00 	vldr	d6, [r1]
 800dce2:	2001      	movs	r0, #1
 800dce4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dce8:	1052      	asrs	r2, r2, #1
 800dcea:	f101 0108 	add.w	r1, r1, #8
 800dcee:	d1f4      	bne.n	800dcda <_strtod_l+0x5a2>
 800dcf0:	b108      	cbz	r0, 800dcf6 <_strtod_l+0x5be>
 800dcf2:	ec59 8b17 	vmov	r8, r9, d7
 800dcf6:	9a05      	ldr	r2, [sp, #20]
 800dcf8:	b1ba      	cbz	r2, 800dd2a <_strtod_l+0x5f2>
 800dcfa:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800dcfe:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800dd02:	2a00      	cmp	r2, #0
 800dd04:	4648      	mov	r0, r9
 800dd06:	dd10      	ble.n	800dd2a <_strtod_l+0x5f2>
 800dd08:	2a1f      	cmp	r2, #31
 800dd0a:	f340 812c 	ble.w	800df66 <_strtod_l+0x82e>
 800dd0e:	2a34      	cmp	r2, #52	; 0x34
 800dd10:	bfde      	ittt	le
 800dd12:	f04f 32ff 	movle.w	r2, #4294967295
 800dd16:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800dd1a:	408a      	lslle	r2, r1
 800dd1c:	f04f 0800 	mov.w	r8, #0
 800dd20:	bfcc      	ite	gt
 800dd22:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800dd26:	ea02 0900 	andle.w	r9, r2, r0
 800dd2a:	ec49 8b17 	vmov	d7, r8, r9
 800dd2e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dd32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd36:	d0a8      	beq.n	800dc8a <_strtod_l+0x552>
 800dd38:	9a07      	ldr	r2, [sp, #28]
 800dd3a:	9200      	str	r2, [sp, #0]
 800dd3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dd3e:	4632      	mov	r2, r6
 800dd40:	4620      	mov	r0, r4
 800dd42:	f7ff f8dd 	bl	800cf00 <__s2b>
 800dd46:	9007      	str	r0, [sp, #28]
 800dd48:	2800      	cmp	r0, #0
 800dd4a:	f43f af2f 	beq.w	800dbac <_strtod_l+0x474>
 800dd4e:	9a06      	ldr	r2, [sp, #24]
 800dd50:	2a00      	cmp	r2, #0
 800dd52:	ebab 0305 	sub.w	r3, fp, r5
 800dd56:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800dfb0 <_strtod_l+0x878>
 800dd5a:	bfa8      	it	ge
 800dd5c:	2300      	movge	r3, #0
 800dd5e:	ed9f ab96 	vldr	d10, [pc, #600]	; 800dfb8 <_strtod_l+0x880>
 800dd62:	ed9f bb97 	vldr	d11, [pc, #604]	; 800dfc0 <_strtod_l+0x888>
 800dd66:	9309      	str	r3, [sp, #36]	; 0x24
 800dd68:	2500      	movs	r5, #0
 800dd6a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800dd6e:	930c      	str	r3, [sp, #48]	; 0x30
 800dd70:	462e      	mov	r6, r5
 800dd72:	9b07      	ldr	r3, [sp, #28]
 800dd74:	4620      	mov	r0, r4
 800dd76:	6859      	ldr	r1, [r3, #4]
 800dd78:	f7ff f81a 	bl	800cdb0 <_Balloc>
 800dd7c:	4607      	mov	r7, r0
 800dd7e:	2800      	cmp	r0, #0
 800dd80:	f43f af18 	beq.w	800dbb4 <_strtod_l+0x47c>
 800dd84:	9b07      	ldr	r3, [sp, #28]
 800dd86:	691a      	ldr	r2, [r3, #16]
 800dd88:	3202      	adds	r2, #2
 800dd8a:	f103 010c 	add.w	r1, r3, #12
 800dd8e:	0092      	lsls	r2, r2, #2
 800dd90:	300c      	adds	r0, #12
 800dd92:	f000 fdd3 	bl	800e93c <memcpy>
 800dd96:	ec49 8b10 	vmov	d0, r8, r9
 800dd9a:	aa14      	add	r2, sp, #80	; 0x50
 800dd9c:	a913      	add	r1, sp, #76	; 0x4c
 800dd9e:	4620      	mov	r0, r4
 800dda0:	f7ff fbe2 	bl	800d568 <__d2b>
 800dda4:	ec49 8b18 	vmov	d8, r8, r9
 800dda8:	9012      	str	r0, [sp, #72]	; 0x48
 800ddaa:	2800      	cmp	r0, #0
 800ddac:	f43f af02 	beq.w	800dbb4 <_strtod_l+0x47c>
 800ddb0:	2101      	movs	r1, #1
 800ddb2:	4620      	mov	r0, r4
 800ddb4:	f7ff f93c 	bl	800d030 <__i2b>
 800ddb8:	4606      	mov	r6, r0
 800ddba:	2800      	cmp	r0, #0
 800ddbc:	f43f aefa 	beq.w	800dbb4 <_strtod_l+0x47c>
 800ddc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ddc2:	9914      	ldr	r1, [sp, #80]	; 0x50
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	bfab      	itete	ge
 800ddc8:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800ddca:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800ddcc:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800ddd0:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800ddd4:	bfac      	ite	ge
 800ddd6:	eb03 0b02 	addge.w	fp, r3, r2
 800ddda:	eba2 0a03 	sublt.w	sl, r2, r3
 800ddde:	9a05      	ldr	r2, [sp, #20]
 800dde0:	1a9b      	subs	r3, r3, r2
 800dde2:	440b      	add	r3, r1
 800dde4:	4a7b      	ldr	r2, [pc, #492]	; (800dfd4 <_strtod_l+0x89c>)
 800dde6:	3b01      	subs	r3, #1
 800dde8:	4293      	cmp	r3, r2
 800ddea:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800ddee:	f280 80cd 	bge.w	800df8c <_strtod_l+0x854>
 800ddf2:	1ad2      	subs	r2, r2, r3
 800ddf4:	2a1f      	cmp	r2, #31
 800ddf6:	eba1 0102 	sub.w	r1, r1, r2
 800ddfa:	f04f 0001 	mov.w	r0, #1
 800ddfe:	f300 80b9 	bgt.w	800df74 <_strtod_l+0x83c>
 800de02:	fa00 f302 	lsl.w	r3, r0, r2
 800de06:	930b      	str	r3, [sp, #44]	; 0x2c
 800de08:	2300      	movs	r3, #0
 800de0a:	930a      	str	r3, [sp, #40]	; 0x28
 800de0c:	eb0b 0301 	add.w	r3, fp, r1
 800de10:	9a05      	ldr	r2, [sp, #20]
 800de12:	459b      	cmp	fp, r3
 800de14:	448a      	add	sl, r1
 800de16:	4492      	add	sl, r2
 800de18:	465a      	mov	r2, fp
 800de1a:	bfa8      	it	ge
 800de1c:	461a      	movge	r2, r3
 800de1e:	4552      	cmp	r2, sl
 800de20:	bfa8      	it	ge
 800de22:	4652      	movge	r2, sl
 800de24:	2a00      	cmp	r2, #0
 800de26:	bfc2      	ittt	gt
 800de28:	1a9b      	subgt	r3, r3, r2
 800de2a:	ebaa 0a02 	subgt.w	sl, sl, r2
 800de2e:	ebab 0b02 	subgt.w	fp, fp, r2
 800de32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de34:	2a00      	cmp	r2, #0
 800de36:	dd18      	ble.n	800de6a <_strtod_l+0x732>
 800de38:	4631      	mov	r1, r6
 800de3a:	4620      	mov	r0, r4
 800de3c:	930f      	str	r3, [sp, #60]	; 0x3c
 800de3e:	f7ff f9b7 	bl	800d1b0 <__pow5mult>
 800de42:	4606      	mov	r6, r0
 800de44:	2800      	cmp	r0, #0
 800de46:	f43f aeb5 	beq.w	800dbb4 <_strtod_l+0x47c>
 800de4a:	4601      	mov	r1, r0
 800de4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800de4e:	4620      	mov	r0, r4
 800de50:	f7ff f904 	bl	800d05c <__multiply>
 800de54:	900e      	str	r0, [sp, #56]	; 0x38
 800de56:	2800      	cmp	r0, #0
 800de58:	f43f aeac 	beq.w	800dbb4 <_strtod_l+0x47c>
 800de5c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800de5e:	4620      	mov	r0, r4
 800de60:	f7fe ffe6 	bl	800ce30 <_Bfree>
 800de64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de68:	9212      	str	r2, [sp, #72]	; 0x48
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	f300 8093 	bgt.w	800df96 <_strtod_l+0x85e>
 800de70:	9b06      	ldr	r3, [sp, #24]
 800de72:	2b00      	cmp	r3, #0
 800de74:	dd08      	ble.n	800de88 <_strtod_l+0x750>
 800de76:	4639      	mov	r1, r7
 800de78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800de7a:	4620      	mov	r0, r4
 800de7c:	f7ff f998 	bl	800d1b0 <__pow5mult>
 800de80:	4607      	mov	r7, r0
 800de82:	2800      	cmp	r0, #0
 800de84:	f43f ae96 	beq.w	800dbb4 <_strtod_l+0x47c>
 800de88:	f1ba 0f00 	cmp.w	sl, #0
 800de8c:	dd08      	ble.n	800dea0 <_strtod_l+0x768>
 800de8e:	4639      	mov	r1, r7
 800de90:	4652      	mov	r2, sl
 800de92:	4620      	mov	r0, r4
 800de94:	f7ff f9e6 	bl	800d264 <__lshift>
 800de98:	4607      	mov	r7, r0
 800de9a:	2800      	cmp	r0, #0
 800de9c:	f43f ae8a 	beq.w	800dbb4 <_strtod_l+0x47c>
 800dea0:	f1bb 0f00 	cmp.w	fp, #0
 800dea4:	dd08      	ble.n	800deb8 <_strtod_l+0x780>
 800dea6:	4631      	mov	r1, r6
 800dea8:	465a      	mov	r2, fp
 800deaa:	4620      	mov	r0, r4
 800deac:	f7ff f9da 	bl	800d264 <__lshift>
 800deb0:	4606      	mov	r6, r0
 800deb2:	2800      	cmp	r0, #0
 800deb4:	f43f ae7e 	beq.w	800dbb4 <_strtod_l+0x47c>
 800deb8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800deba:	463a      	mov	r2, r7
 800debc:	4620      	mov	r0, r4
 800debe:	f7ff fa59 	bl	800d374 <__mdiff>
 800dec2:	4605      	mov	r5, r0
 800dec4:	2800      	cmp	r0, #0
 800dec6:	f43f ae75 	beq.w	800dbb4 <_strtod_l+0x47c>
 800deca:	2300      	movs	r3, #0
 800decc:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800ded0:	60c3      	str	r3, [r0, #12]
 800ded2:	4631      	mov	r1, r6
 800ded4:	f7ff fa32 	bl	800d33c <__mcmp>
 800ded8:	2800      	cmp	r0, #0
 800deda:	da7f      	bge.n	800dfdc <_strtod_l+0x8a4>
 800dedc:	ea5a 0a08 	orrs.w	sl, sl, r8
 800dee0:	f040 80a5 	bne.w	800e02e <_strtod_l+0x8f6>
 800dee4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dee8:	2b00      	cmp	r3, #0
 800deea:	f040 80a0 	bne.w	800e02e <_strtod_l+0x8f6>
 800deee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800def2:	0d1b      	lsrs	r3, r3, #20
 800def4:	051b      	lsls	r3, r3, #20
 800def6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800defa:	f240 8098 	bls.w	800e02e <_strtod_l+0x8f6>
 800defe:	696b      	ldr	r3, [r5, #20]
 800df00:	b91b      	cbnz	r3, 800df0a <_strtod_l+0x7d2>
 800df02:	692b      	ldr	r3, [r5, #16]
 800df04:	2b01      	cmp	r3, #1
 800df06:	f340 8092 	ble.w	800e02e <_strtod_l+0x8f6>
 800df0a:	4629      	mov	r1, r5
 800df0c:	2201      	movs	r2, #1
 800df0e:	4620      	mov	r0, r4
 800df10:	f7ff f9a8 	bl	800d264 <__lshift>
 800df14:	4631      	mov	r1, r6
 800df16:	4605      	mov	r5, r0
 800df18:	f7ff fa10 	bl	800d33c <__mcmp>
 800df1c:	2800      	cmp	r0, #0
 800df1e:	f340 8086 	ble.w	800e02e <_strtod_l+0x8f6>
 800df22:	9905      	ldr	r1, [sp, #20]
 800df24:	4a2c      	ldr	r2, [pc, #176]	; (800dfd8 <_strtod_l+0x8a0>)
 800df26:	464b      	mov	r3, r9
 800df28:	2900      	cmp	r1, #0
 800df2a:	f000 809f 	beq.w	800e06c <_strtod_l+0x934>
 800df2e:	ea02 0109 	and.w	r1, r2, r9
 800df32:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800df36:	f300 8099 	bgt.w	800e06c <_strtod_l+0x934>
 800df3a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800df3e:	f77f aea8 	ble.w	800dc92 <_strtod_l+0x55a>
 800df42:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800dfc8 <_strtod_l+0x890>
 800df46:	ec49 8b16 	vmov	d6, r8, r9
 800df4a:	4b23      	ldr	r3, [pc, #140]	; (800dfd8 <_strtod_l+0x8a0>)
 800df4c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800df50:	ee17 2a90 	vmov	r2, s15
 800df54:	4013      	ands	r3, r2
 800df56:	ec59 8b17 	vmov	r8, r9, d7
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	f47f ae34 	bne.w	800dbc8 <_strtod_l+0x490>
 800df60:	2322      	movs	r3, #34	; 0x22
 800df62:	6023      	str	r3, [r4, #0]
 800df64:	e630      	b.n	800dbc8 <_strtod_l+0x490>
 800df66:	f04f 31ff 	mov.w	r1, #4294967295
 800df6a:	fa01 f202 	lsl.w	r2, r1, r2
 800df6e:	ea02 0808 	and.w	r8, r2, r8
 800df72:	e6da      	b.n	800dd2a <_strtod_l+0x5f2>
 800df74:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800df78:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800df7c:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800df80:	33e2      	adds	r3, #226	; 0xe2
 800df82:	fa00 f303 	lsl.w	r3, r0, r3
 800df86:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800df8a:	e73f      	b.n	800de0c <_strtod_l+0x6d4>
 800df8c:	2200      	movs	r2, #0
 800df8e:	2301      	movs	r3, #1
 800df90:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800df94:	e73a      	b.n	800de0c <_strtod_l+0x6d4>
 800df96:	9912      	ldr	r1, [sp, #72]	; 0x48
 800df98:	461a      	mov	r2, r3
 800df9a:	4620      	mov	r0, r4
 800df9c:	f7ff f962 	bl	800d264 <__lshift>
 800dfa0:	9012      	str	r0, [sp, #72]	; 0x48
 800dfa2:	2800      	cmp	r0, #0
 800dfa4:	f47f af64 	bne.w	800de70 <_strtod_l+0x738>
 800dfa8:	e604      	b.n	800dbb4 <_strtod_l+0x47c>
 800dfaa:	bf00      	nop
 800dfac:	f3af 8000 	nop.w
 800dfb0:	94a03595 	.word	0x94a03595
 800dfb4:	3fcfffff 	.word	0x3fcfffff
 800dfb8:	94a03595 	.word	0x94a03595
 800dfbc:	3fdfffff 	.word	0x3fdfffff
 800dfc0:	35afe535 	.word	0x35afe535
 800dfc4:	3fe00000 	.word	0x3fe00000
 800dfc8:	00000000 	.word	0x00000000
 800dfcc:	39500000 	.word	0x39500000
 800dfd0:	0800f708 	.word	0x0800f708
 800dfd4:	fffffc02 	.word	0xfffffc02
 800dfd8:	7ff00000 	.word	0x7ff00000
 800dfdc:	46cb      	mov	fp, r9
 800dfde:	d15f      	bne.n	800e0a0 <_strtod_l+0x968>
 800dfe0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dfe4:	f1ba 0f00 	cmp.w	sl, #0
 800dfe8:	d02a      	beq.n	800e040 <_strtod_l+0x908>
 800dfea:	4aa7      	ldr	r2, [pc, #668]	; (800e288 <_strtod_l+0xb50>)
 800dfec:	4293      	cmp	r3, r2
 800dfee:	d12b      	bne.n	800e048 <_strtod_l+0x910>
 800dff0:	9b05      	ldr	r3, [sp, #20]
 800dff2:	4642      	mov	r2, r8
 800dff4:	b1fb      	cbz	r3, 800e036 <_strtod_l+0x8fe>
 800dff6:	4ba5      	ldr	r3, [pc, #660]	; (800e28c <_strtod_l+0xb54>)
 800dff8:	ea09 0303 	and.w	r3, r9, r3
 800dffc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e000:	f04f 31ff 	mov.w	r1, #4294967295
 800e004:	d81a      	bhi.n	800e03c <_strtod_l+0x904>
 800e006:	0d1b      	lsrs	r3, r3, #20
 800e008:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e00c:	fa01 f303 	lsl.w	r3, r1, r3
 800e010:	429a      	cmp	r2, r3
 800e012:	d119      	bne.n	800e048 <_strtod_l+0x910>
 800e014:	4b9e      	ldr	r3, [pc, #632]	; (800e290 <_strtod_l+0xb58>)
 800e016:	459b      	cmp	fp, r3
 800e018:	d102      	bne.n	800e020 <_strtod_l+0x8e8>
 800e01a:	3201      	adds	r2, #1
 800e01c:	f43f adca 	beq.w	800dbb4 <_strtod_l+0x47c>
 800e020:	4b9a      	ldr	r3, [pc, #616]	; (800e28c <_strtod_l+0xb54>)
 800e022:	ea0b 0303 	and.w	r3, fp, r3
 800e026:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800e02a:	f04f 0800 	mov.w	r8, #0
 800e02e:	9b05      	ldr	r3, [sp, #20]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d186      	bne.n	800df42 <_strtod_l+0x80a>
 800e034:	e5c8      	b.n	800dbc8 <_strtod_l+0x490>
 800e036:	f04f 33ff 	mov.w	r3, #4294967295
 800e03a:	e7e9      	b.n	800e010 <_strtod_l+0x8d8>
 800e03c:	460b      	mov	r3, r1
 800e03e:	e7e7      	b.n	800e010 <_strtod_l+0x8d8>
 800e040:	ea53 0308 	orrs.w	r3, r3, r8
 800e044:	f43f af6d 	beq.w	800df22 <_strtod_l+0x7ea>
 800e048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e04a:	b1cb      	cbz	r3, 800e080 <_strtod_l+0x948>
 800e04c:	ea13 0f0b 	tst.w	r3, fp
 800e050:	d0ed      	beq.n	800e02e <_strtod_l+0x8f6>
 800e052:	9a05      	ldr	r2, [sp, #20]
 800e054:	4640      	mov	r0, r8
 800e056:	4649      	mov	r1, r9
 800e058:	f1ba 0f00 	cmp.w	sl, #0
 800e05c:	d014      	beq.n	800e088 <_strtod_l+0x950>
 800e05e:	f7ff fb51 	bl	800d704 <sulp>
 800e062:	ee38 7b00 	vadd.f64	d7, d8, d0
 800e066:	ec59 8b17 	vmov	r8, r9, d7
 800e06a:	e7e0      	b.n	800e02e <_strtod_l+0x8f6>
 800e06c:	4013      	ands	r3, r2
 800e06e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e072:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800e076:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800e07a:	f04f 38ff 	mov.w	r8, #4294967295
 800e07e:	e7d6      	b.n	800e02e <_strtod_l+0x8f6>
 800e080:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e082:	ea13 0f08 	tst.w	r3, r8
 800e086:	e7e3      	b.n	800e050 <_strtod_l+0x918>
 800e088:	f7ff fb3c 	bl	800d704 <sulp>
 800e08c:	ee38 0b40 	vsub.f64	d0, d8, d0
 800e090:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e098:	ec59 8b10 	vmov	r8, r9, d0
 800e09c:	d1c7      	bne.n	800e02e <_strtod_l+0x8f6>
 800e09e:	e5f8      	b.n	800dc92 <_strtod_l+0x55a>
 800e0a0:	4631      	mov	r1, r6
 800e0a2:	4628      	mov	r0, r5
 800e0a4:	f7ff faba 	bl	800d61c <__ratio>
 800e0a8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800e0ac:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e0b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0b4:	d85f      	bhi.n	800e176 <_strtod_l+0xa3e>
 800e0b6:	f1ba 0f00 	cmp.w	sl, #0
 800e0ba:	d166      	bne.n	800e18a <_strtod_l+0xa52>
 800e0bc:	f1b8 0f00 	cmp.w	r8, #0
 800e0c0:	d14d      	bne.n	800e15e <_strtod_l+0xa26>
 800e0c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e0c6:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d162      	bne.n	800e194 <_strtod_l+0xa5c>
 800e0ce:	eeb4 0bcd 	vcmpe.f64	d0, d13
 800e0d2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800e0d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0da:	d401      	bmi.n	800e0e0 <_strtod_l+0x9a8>
 800e0dc:	ee20 db0d 	vmul.f64	d13, d0, d13
 800e0e0:	eeb1 cb4d 	vneg.f64	d12, d13
 800e0e4:	4869      	ldr	r0, [pc, #420]	; (800e28c <_strtod_l+0xb54>)
 800e0e6:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 800e298 <_strtod_l+0xb60>
 800e0ea:	ea0b 0100 	and.w	r1, fp, r0
 800e0ee:	4561      	cmp	r1, ip
 800e0f0:	ec53 2b1c 	vmov	r2, r3, d12
 800e0f4:	d17a      	bne.n	800e1ec <_strtod_l+0xab4>
 800e0f6:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800e0fa:	ec49 8b10 	vmov	d0, r8, r9
 800e0fe:	910a      	str	r1, [sp, #40]	; 0x28
 800e100:	f7ff f9c2 	bl	800d488 <__ulp>
 800e104:	ec49 8b1e 	vmov	d14, r8, r9
 800e108:	4860      	ldr	r0, [pc, #384]	; (800e28c <_strtod_l+0xb54>)
 800e10a:	eea0 eb0c 	vfma.f64	d14, d0, d12
 800e10e:	ee1e 3a90 	vmov	r3, s29
 800e112:	4a60      	ldr	r2, [pc, #384]	; (800e294 <_strtod_l+0xb5c>)
 800e114:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e116:	4018      	ands	r0, r3
 800e118:	4290      	cmp	r0, r2
 800e11a:	ec59 8b1e 	vmov	r8, r9, d14
 800e11e:	d93c      	bls.n	800e19a <_strtod_l+0xa62>
 800e120:	ee18 2a90 	vmov	r2, s17
 800e124:	4b5a      	ldr	r3, [pc, #360]	; (800e290 <_strtod_l+0xb58>)
 800e126:	429a      	cmp	r2, r3
 800e128:	d104      	bne.n	800e134 <_strtod_l+0x9fc>
 800e12a:	ee18 3a10 	vmov	r3, s16
 800e12e:	3301      	adds	r3, #1
 800e130:	f43f ad40 	beq.w	800dbb4 <_strtod_l+0x47c>
 800e134:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800e290 <_strtod_l+0xb58>
 800e138:	f04f 38ff 	mov.w	r8, #4294967295
 800e13c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e13e:	4620      	mov	r0, r4
 800e140:	f7fe fe76 	bl	800ce30 <_Bfree>
 800e144:	4639      	mov	r1, r7
 800e146:	4620      	mov	r0, r4
 800e148:	f7fe fe72 	bl	800ce30 <_Bfree>
 800e14c:	4631      	mov	r1, r6
 800e14e:	4620      	mov	r0, r4
 800e150:	f7fe fe6e 	bl	800ce30 <_Bfree>
 800e154:	4629      	mov	r1, r5
 800e156:	4620      	mov	r0, r4
 800e158:	f7fe fe6a 	bl	800ce30 <_Bfree>
 800e15c:	e609      	b.n	800dd72 <_strtod_l+0x63a>
 800e15e:	f1b8 0f01 	cmp.w	r8, #1
 800e162:	d103      	bne.n	800e16c <_strtod_l+0xa34>
 800e164:	f1b9 0f00 	cmp.w	r9, #0
 800e168:	f43f ad93 	beq.w	800dc92 <_strtod_l+0x55a>
 800e16c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800e170:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800e174:	e7b6      	b.n	800e0e4 <_strtod_l+0x9ac>
 800e176:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800e17a:	ee20 db0d 	vmul.f64	d13, d0, d13
 800e17e:	f1ba 0f00 	cmp.w	sl, #0
 800e182:	d0ad      	beq.n	800e0e0 <_strtod_l+0x9a8>
 800e184:	eeb0 cb4d 	vmov.f64	d12, d13
 800e188:	e7ac      	b.n	800e0e4 <_strtod_l+0x9ac>
 800e18a:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 800e18e:	eeb0 db4c 	vmov.f64	d13, d12
 800e192:	e7a7      	b.n	800e0e4 <_strtod_l+0x9ac>
 800e194:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800e198:	e7a4      	b.n	800e0e4 <_strtod_l+0x9ac>
 800e19a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800e19e:	9b05      	ldr	r3, [sp, #20]
 800e1a0:	46cb      	mov	fp, r9
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d1ca      	bne.n	800e13c <_strtod_l+0xa04>
 800e1a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e1aa:	0d1b      	lsrs	r3, r3, #20
 800e1ac:	051b      	lsls	r3, r3, #20
 800e1ae:	4299      	cmp	r1, r3
 800e1b0:	d1c4      	bne.n	800e13c <_strtod_l+0xa04>
 800e1b2:	ec51 0b1d 	vmov	r0, r1, d13
 800e1b6:	f7f2 fabf 	bl	8000738 <__aeabi_d2lz>
 800e1ba:	f7f2 fa77 	bl	80006ac <__aeabi_l2d>
 800e1be:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 800e1c2:	ec41 0b17 	vmov	d7, r0, r1
 800e1c6:	ea4b 0b08 	orr.w	fp, fp, r8
 800e1ca:	ea5b 0b0a 	orrs.w	fp, fp, sl
 800e1ce:	ee3d db47 	vsub.f64	d13, d13, d7
 800e1d2:	d03c      	beq.n	800e24e <_strtod_l+0xb16>
 800e1d4:	eeb4 dbca 	vcmpe.f64	d13, d10
 800e1d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1dc:	f53f acf4 	bmi.w	800dbc8 <_strtod_l+0x490>
 800e1e0:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800e1e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1e8:	dda8      	ble.n	800e13c <_strtod_l+0xa04>
 800e1ea:	e4ed      	b.n	800dbc8 <_strtod_l+0x490>
 800e1ec:	9805      	ldr	r0, [sp, #20]
 800e1ee:	b1f0      	cbz	r0, 800e22e <_strtod_l+0xaf6>
 800e1f0:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800e1f4:	d81b      	bhi.n	800e22e <_strtod_l+0xaf6>
 800e1f6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800e280 <_strtod_l+0xb48>
 800e1fa:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800e1fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e202:	d811      	bhi.n	800e228 <_strtod_l+0xaf0>
 800e204:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800e208:	ee1d 3a10 	vmov	r3, s26
 800e20c:	2b01      	cmp	r3, #1
 800e20e:	bf38      	it	cc
 800e210:	2301      	movcc	r3, #1
 800e212:	ee0d 3a10 	vmov	s26, r3
 800e216:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800e21a:	f1ba 0f00 	cmp.w	sl, #0
 800e21e:	d113      	bne.n	800e248 <_strtod_l+0xb10>
 800e220:	eeb1 7b4d 	vneg.f64	d7, d13
 800e224:	ec53 2b17 	vmov	r2, r3, d7
 800e228:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800e22c:	1a43      	subs	r3, r0, r1
 800e22e:	eeb0 0b48 	vmov.f64	d0, d8
 800e232:	ec43 2b1c 	vmov	d12, r2, r3
 800e236:	910a      	str	r1, [sp, #40]	; 0x28
 800e238:	f7ff f926 	bl	800d488 <__ulp>
 800e23c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e23e:	eeac 8b00 	vfma.f64	d8, d12, d0
 800e242:	ec59 8b18 	vmov	r8, r9, d8
 800e246:	e7aa      	b.n	800e19e <_strtod_l+0xa66>
 800e248:	eeb0 7b4d 	vmov.f64	d7, d13
 800e24c:	e7ea      	b.n	800e224 <_strtod_l+0xaec>
 800e24e:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800e252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e256:	f57f af71 	bpl.w	800e13c <_strtod_l+0xa04>
 800e25a:	e4b5      	b.n	800dbc8 <_strtod_l+0x490>
 800e25c:	2300      	movs	r3, #0
 800e25e:	9308      	str	r3, [sp, #32]
 800e260:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e262:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e264:	6013      	str	r3, [r2, #0]
 800e266:	f7ff baa6 	b.w	800d7b6 <_strtod_l+0x7e>
 800e26a:	2a65      	cmp	r2, #101	; 0x65
 800e26c:	f43f aba2 	beq.w	800d9b4 <_strtod_l+0x27c>
 800e270:	2a45      	cmp	r2, #69	; 0x45
 800e272:	f43f ab9f 	beq.w	800d9b4 <_strtod_l+0x27c>
 800e276:	2101      	movs	r1, #1
 800e278:	f7ff bbd8 	b.w	800da2c <_strtod_l+0x2f4>
 800e27c:	f3af 8000 	nop.w
 800e280:	ffc00000 	.word	0xffc00000
 800e284:	41dfffff 	.word	0x41dfffff
 800e288:	000fffff 	.word	0x000fffff
 800e28c:	7ff00000 	.word	0x7ff00000
 800e290:	7fefffff 	.word	0x7fefffff
 800e294:	7c9fffff 	.word	0x7c9fffff
 800e298:	7fe00000 	.word	0x7fe00000

0800e29c <_strtod_r>:
 800e29c:	4b01      	ldr	r3, [pc, #4]	; (800e2a4 <_strtod_r+0x8>)
 800e29e:	f7ff ba4b 	b.w	800d738 <_strtod_l>
 800e2a2:	bf00      	nop
 800e2a4:	2400006c 	.word	0x2400006c

0800e2a8 <_strtol_l.constprop.0>:
 800e2a8:	2b01      	cmp	r3, #1
 800e2aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2ae:	d001      	beq.n	800e2b4 <_strtol_l.constprop.0+0xc>
 800e2b0:	2b24      	cmp	r3, #36	; 0x24
 800e2b2:	d906      	bls.n	800e2c2 <_strtol_l.constprop.0+0x1a>
 800e2b4:	f7fd fe54 	bl	800bf60 <__errno>
 800e2b8:	2316      	movs	r3, #22
 800e2ba:	6003      	str	r3, [r0, #0]
 800e2bc:	2000      	movs	r0, #0
 800e2be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2c2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e3a8 <_strtol_l.constprop.0+0x100>
 800e2c6:	460d      	mov	r5, r1
 800e2c8:	462e      	mov	r6, r5
 800e2ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e2ce:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800e2d2:	f017 0708 	ands.w	r7, r7, #8
 800e2d6:	d1f7      	bne.n	800e2c8 <_strtol_l.constprop.0+0x20>
 800e2d8:	2c2d      	cmp	r4, #45	; 0x2d
 800e2da:	d132      	bne.n	800e342 <_strtol_l.constprop.0+0x9a>
 800e2dc:	782c      	ldrb	r4, [r5, #0]
 800e2de:	2701      	movs	r7, #1
 800e2e0:	1cb5      	adds	r5, r6, #2
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d05b      	beq.n	800e39e <_strtol_l.constprop.0+0xf6>
 800e2e6:	2b10      	cmp	r3, #16
 800e2e8:	d109      	bne.n	800e2fe <_strtol_l.constprop.0+0x56>
 800e2ea:	2c30      	cmp	r4, #48	; 0x30
 800e2ec:	d107      	bne.n	800e2fe <_strtol_l.constprop.0+0x56>
 800e2ee:	782c      	ldrb	r4, [r5, #0]
 800e2f0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e2f4:	2c58      	cmp	r4, #88	; 0x58
 800e2f6:	d14d      	bne.n	800e394 <_strtol_l.constprop.0+0xec>
 800e2f8:	786c      	ldrb	r4, [r5, #1]
 800e2fa:	2310      	movs	r3, #16
 800e2fc:	3502      	adds	r5, #2
 800e2fe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e302:	f108 38ff 	add.w	r8, r8, #4294967295
 800e306:	f04f 0e00 	mov.w	lr, #0
 800e30a:	fbb8 f9f3 	udiv	r9, r8, r3
 800e30e:	4676      	mov	r6, lr
 800e310:	fb03 8a19 	mls	sl, r3, r9, r8
 800e314:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e318:	f1bc 0f09 	cmp.w	ip, #9
 800e31c:	d816      	bhi.n	800e34c <_strtol_l.constprop.0+0xa4>
 800e31e:	4664      	mov	r4, ip
 800e320:	42a3      	cmp	r3, r4
 800e322:	dd24      	ble.n	800e36e <_strtol_l.constprop.0+0xc6>
 800e324:	f1be 3fff 	cmp.w	lr, #4294967295
 800e328:	d008      	beq.n	800e33c <_strtol_l.constprop.0+0x94>
 800e32a:	45b1      	cmp	r9, r6
 800e32c:	d31c      	bcc.n	800e368 <_strtol_l.constprop.0+0xc0>
 800e32e:	d101      	bne.n	800e334 <_strtol_l.constprop.0+0x8c>
 800e330:	45a2      	cmp	sl, r4
 800e332:	db19      	blt.n	800e368 <_strtol_l.constprop.0+0xc0>
 800e334:	fb06 4603 	mla	r6, r6, r3, r4
 800e338:	f04f 0e01 	mov.w	lr, #1
 800e33c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e340:	e7e8      	b.n	800e314 <_strtol_l.constprop.0+0x6c>
 800e342:	2c2b      	cmp	r4, #43	; 0x2b
 800e344:	bf04      	itt	eq
 800e346:	782c      	ldrbeq	r4, [r5, #0]
 800e348:	1cb5      	addeq	r5, r6, #2
 800e34a:	e7ca      	b.n	800e2e2 <_strtol_l.constprop.0+0x3a>
 800e34c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e350:	f1bc 0f19 	cmp.w	ip, #25
 800e354:	d801      	bhi.n	800e35a <_strtol_l.constprop.0+0xb2>
 800e356:	3c37      	subs	r4, #55	; 0x37
 800e358:	e7e2      	b.n	800e320 <_strtol_l.constprop.0+0x78>
 800e35a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e35e:	f1bc 0f19 	cmp.w	ip, #25
 800e362:	d804      	bhi.n	800e36e <_strtol_l.constprop.0+0xc6>
 800e364:	3c57      	subs	r4, #87	; 0x57
 800e366:	e7db      	b.n	800e320 <_strtol_l.constprop.0+0x78>
 800e368:	f04f 3eff 	mov.w	lr, #4294967295
 800e36c:	e7e6      	b.n	800e33c <_strtol_l.constprop.0+0x94>
 800e36e:	f1be 3fff 	cmp.w	lr, #4294967295
 800e372:	d105      	bne.n	800e380 <_strtol_l.constprop.0+0xd8>
 800e374:	2322      	movs	r3, #34	; 0x22
 800e376:	6003      	str	r3, [r0, #0]
 800e378:	4646      	mov	r6, r8
 800e37a:	b942      	cbnz	r2, 800e38e <_strtol_l.constprop.0+0xe6>
 800e37c:	4630      	mov	r0, r6
 800e37e:	e79e      	b.n	800e2be <_strtol_l.constprop.0+0x16>
 800e380:	b107      	cbz	r7, 800e384 <_strtol_l.constprop.0+0xdc>
 800e382:	4276      	negs	r6, r6
 800e384:	2a00      	cmp	r2, #0
 800e386:	d0f9      	beq.n	800e37c <_strtol_l.constprop.0+0xd4>
 800e388:	f1be 0f00 	cmp.w	lr, #0
 800e38c:	d000      	beq.n	800e390 <_strtol_l.constprop.0+0xe8>
 800e38e:	1e69      	subs	r1, r5, #1
 800e390:	6011      	str	r1, [r2, #0]
 800e392:	e7f3      	b.n	800e37c <_strtol_l.constprop.0+0xd4>
 800e394:	2430      	movs	r4, #48	; 0x30
 800e396:	2b00      	cmp	r3, #0
 800e398:	d1b1      	bne.n	800e2fe <_strtol_l.constprop.0+0x56>
 800e39a:	2308      	movs	r3, #8
 800e39c:	e7af      	b.n	800e2fe <_strtol_l.constprop.0+0x56>
 800e39e:	2c30      	cmp	r4, #48	; 0x30
 800e3a0:	d0a5      	beq.n	800e2ee <_strtol_l.constprop.0+0x46>
 800e3a2:	230a      	movs	r3, #10
 800e3a4:	e7ab      	b.n	800e2fe <_strtol_l.constprop.0+0x56>
 800e3a6:	bf00      	nop
 800e3a8:	0800f731 	.word	0x0800f731

0800e3ac <_strtol_r>:
 800e3ac:	f7ff bf7c 	b.w	800e2a8 <_strtol_l.constprop.0>

0800e3b0 <__ssputs_r>:
 800e3b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3b4:	688e      	ldr	r6, [r1, #8]
 800e3b6:	461f      	mov	r7, r3
 800e3b8:	42be      	cmp	r6, r7
 800e3ba:	680b      	ldr	r3, [r1, #0]
 800e3bc:	4682      	mov	sl, r0
 800e3be:	460c      	mov	r4, r1
 800e3c0:	4690      	mov	r8, r2
 800e3c2:	d82c      	bhi.n	800e41e <__ssputs_r+0x6e>
 800e3c4:	898a      	ldrh	r2, [r1, #12]
 800e3c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e3ca:	d026      	beq.n	800e41a <__ssputs_r+0x6a>
 800e3cc:	6965      	ldr	r5, [r4, #20]
 800e3ce:	6909      	ldr	r1, [r1, #16]
 800e3d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e3d4:	eba3 0901 	sub.w	r9, r3, r1
 800e3d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e3dc:	1c7b      	adds	r3, r7, #1
 800e3de:	444b      	add	r3, r9
 800e3e0:	106d      	asrs	r5, r5, #1
 800e3e2:	429d      	cmp	r5, r3
 800e3e4:	bf38      	it	cc
 800e3e6:	461d      	movcc	r5, r3
 800e3e8:	0553      	lsls	r3, r2, #21
 800e3ea:	d527      	bpl.n	800e43c <__ssputs_r+0x8c>
 800e3ec:	4629      	mov	r1, r5
 800e3ee:	f7fe fc53 	bl	800cc98 <_malloc_r>
 800e3f2:	4606      	mov	r6, r0
 800e3f4:	b360      	cbz	r0, 800e450 <__ssputs_r+0xa0>
 800e3f6:	6921      	ldr	r1, [r4, #16]
 800e3f8:	464a      	mov	r2, r9
 800e3fa:	f000 fa9f 	bl	800e93c <memcpy>
 800e3fe:	89a3      	ldrh	r3, [r4, #12]
 800e400:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e408:	81a3      	strh	r3, [r4, #12]
 800e40a:	6126      	str	r6, [r4, #16]
 800e40c:	6165      	str	r5, [r4, #20]
 800e40e:	444e      	add	r6, r9
 800e410:	eba5 0509 	sub.w	r5, r5, r9
 800e414:	6026      	str	r6, [r4, #0]
 800e416:	60a5      	str	r5, [r4, #8]
 800e418:	463e      	mov	r6, r7
 800e41a:	42be      	cmp	r6, r7
 800e41c:	d900      	bls.n	800e420 <__ssputs_r+0x70>
 800e41e:	463e      	mov	r6, r7
 800e420:	6820      	ldr	r0, [r4, #0]
 800e422:	4632      	mov	r2, r6
 800e424:	4641      	mov	r1, r8
 800e426:	f000 fa2b 	bl	800e880 <memmove>
 800e42a:	68a3      	ldr	r3, [r4, #8]
 800e42c:	1b9b      	subs	r3, r3, r6
 800e42e:	60a3      	str	r3, [r4, #8]
 800e430:	6823      	ldr	r3, [r4, #0]
 800e432:	4433      	add	r3, r6
 800e434:	6023      	str	r3, [r4, #0]
 800e436:	2000      	movs	r0, #0
 800e438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e43c:	462a      	mov	r2, r5
 800e43e:	f000 fe30 	bl	800f0a2 <_realloc_r>
 800e442:	4606      	mov	r6, r0
 800e444:	2800      	cmp	r0, #0
 800e446:	d1e0      	bne.n	800e40a <__ssputs_r+0x5a>
 800e448:	6921      	ldr	r1, [r4, #16]
 800e44a:	4650      	mov	r0, sl
 800e44c:	f7fe fbb0 	bl	800cbb0 <_free_r>
 800e450:	230c      	movs	r3, #12
 800e452:	f8ca 3000 	str.w	r3, [sl]
 800e456:	89a3      	ldrh	r3, [r4, #12]
 800e458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e45c:	81a3      	strh	r3, [r4, #12]
 800e45e:	f04f 30ff 	mov.w	r0, #4294967295
 800e462:	e7e9      	b.n	800e438 <__ssputs_r+0x88>

0800e464 <_svfiprintf_r>:
 800e464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e468:	4698      	mov	r8, r3
 800e46a:	898b      	ldrh	r3, [r1, #12]
 800e46c:	061b      	lsls	r3, r3, #24
 800e46e:	b09d      	sub	sp, #116	; 0x74
 800e470:	4607      	mov	r7, r0
 800e472:	460d      	mov	r5, r1
 800e474:	4614      	mov	r4, r2
 800e476:	d50e      	bpl.n	800e496 <_svfiprintf_r+0x32>
 800e478:	690b      	ldr	r3, [r1, #16]
 800e47a:	b963      	cbnz	r3, 800e496 <_svfiprintf_r+0x32>
 800e47c:	2140      	movs	r1, #64	; 0x40
 800e47e:	f7fe fc0b 	bl	800cc98 <_malloc_r>
 800e482:	6028      	str	r0, [r5, #0]
 800e484:	6128      	str	r0, [r5, #16]
 800e486:	b920      	cbnz	r0, 800e492 <_svfiprintf_r+0x2e>
 800e488:	230c      	movs	r3, #12
 800e48a:	603b      	str	r3, [r7, #0]
 800e48c:	f04f 30ff 	mov.w	r0, #4294967295
 800e490:	e0d0      	b.n	800e634 <_svfiprintf_r+0x1d0>
 800e492:	2340      	movs	r3, #64	; 0x40
 800e494:	616b      	str	r3, [r5, #20]
 800e496:	2300      	movs	r3, #0
 800e498:	9309      	str	r3, [sp, #36]	; 0x24
 800e49a:	2320      	movs	r3, #32
 800e49c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e4a0:	f8cd 800c 	str.w	r8, [sp, #12]
 800e4a4:	2330      	movs	r3, #48	; 0x30
 800e4a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e64c <_svfiprintf_r+0x1e8>
 800e4aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e4ae:	f04f 0901 	mov.w	r9, #1
 800e4b2:	4623      	mov	r3, r4
 800e4b4:	469a      	mov	sl, r3
 800e4b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4ba:	b10a      	cbz	r2, 800e4c0 <_svfiprintf_r+0x5c>
 800e4bc:	2a25      	cmp	r2, #37	; 0x25
 800e4be:	d1f9      	bne.n	800e4b4 <_svfiprintf_r+0x50>
 800e4c0:	ebba 0b04 	subs.w	fp, sl, r4
 800e4c4:	d00b      	beq.n	800e4de <_svfiprintf_r+0x7a>
 800e4c6:	465b      	mov	r3, fp
 800e4c8:	4622      	mov	r2, r4
 800e4ca:	4629      	mov	r1, r5
 800e4cc:	4638      	mov	r0, r7
 800e4ce:	f7ff ff6f 	bl	800e3b0 <__ssputs_r>
 800e4d2:	3001      	adds	r0, #1
 800e4d4:	f000 80a9 	beq.w	800e62a <_svfiprintf_r+0x1c6>
 800e4d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e4da:	445a      	add	r2, fp
 800e4dc:	9209      	str	r2, [sp, #36]	; 0x24
 800e4de:	f89a 3000 	ldrb.w	r3, [sl]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	f000 80a1 	beq.w	800e62a <_svfiprintf_r+0x1c6>
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	f04f 32ff 	mov.w	r2, #4294967295
 800e4ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e4f2:	f10a 0a01 	add.w	sl, sl, #1
 800e4f6:	9304      	str	r3, [sp, #16]
 800e4f8:	9307      	str	r3, [sp, #28]
 800e4fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e4fe:	931a      	str	r3, [sp, #104]	; 0x68
 800e500:	4654      	mov	r4, sl
 800e502:	2205      	movs	r2, #5
 800e504:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e508:	4850      	ldr	r0, [pc, #320]	; (800e64c <_svfiprintf_r+0x1e8>)
 800e50a:	f7f1 fee9 	bl	80002e0 <memchr>
 800e50e:	9a04      	ldr	r2, [sp, #16]
 800e510:	b9d8      	cbnz	r0, 800e54a <_svfiprintf_r+0xe6>
 800e512:	06d0      	lsls	r0, r2, #27
 800e514:	bf44      	itt	mi
 800e516:	2320      	movmi	r3, #32
 800e518:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e51c:	0711      	lsls	r1, r2, #28
 800e51e:	bf44      	itt	mi
 800e520:	232b      	movmi	r3, #43	; 0x2b
 800e522:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e526:	f89a 3000 	ldrb.w	r3, [sl]
 800e52a:	2b2a      	cmp	r3, #42	; 0x2a
 800e52c:	d015      	beq.n	800e55a <_svfiprintf_r+0xf6>
 800e52e:	9a07      	ldr	r2, [sp, #28]
 800e530:	4654      	mov	r4, sl
 800e532:	2000      	movs	r0, #0
 800e534:	f04f 0c0a 	mov.w	ip, #10
 800e538:	4621      	mov	r1, r4
 800e53a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e53e:	3b30      	subs	r3, #48	; 0x30
 800e540:	2b09      	cmp	r3, #9
 800e542:	d94d      	bls.n	800e5e0 <_svfiprintf_r+0x17c>
 800e544:	b1b0      	cbz	r0, 800e574 <_svfiprintf_r+0x110>
 800e546:	9207      	str	r2, [sp, #28]
 800e548:	e014      	b.n	800e574 <_svfiprintf_r+0x110>
 800e54a:	eba0 0308 	sub.w	r3, r0, r8
 800e54e:	fa09 f303 	lsl.w	r3, r9, r3
 800e552:	4313      	orrs	r3, r2
 800e554:	9304      	str	r3, [sp, #16]
 800e556:	46a2      	mov	sl, r4
 800e558:	e7d2      	b.n	800e500 <_svfiprintf_r+0x9c>
 800e55a:	9b03      	ldr	r3, [sp, #12]
 800e55c:	1d19      	adds	r1, r3, #4
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	9103      	str	r1, [sp, #12]
 800e562:	2b00      	cmp	r3, #0
 800e564:	bfbb      	ittet	lt
 800e566:	425b      	neglt	r3, r3
 800e568:	f042 0202 	orrlt.w	r2, r2, #2
 800e56c:	9307      	strge	r3, [sp, #28]
 800e56e:	9307      	strlt	r3, [sp, #28]
 800e570:	bfb8      	it	lt
 800e572:	9204      	strlt	r2, [sp, #16]
 800e574:	7823      	ldrb	r3, [r4, #0]
 800e576:	2b2e      	cmp	r3, #46	; 0x2e
 800e578:	d10c      	bne.n	800e594 <_svfiprintf_r+0x130>
 800e57a:	7863      	ldrb	r3, [r4, #1]
 800e57c:	2b2a      	cmp	r3, #42	; 0x2a
 800e57e:	d134      	bne.n	800e5ea <_svfiprintf_r+0x186>
 800e580:	9b03      	ldr	r3, [sp, #12]
 800e582:	1d1a      	adds	r2, r3, #4
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	9203      	str	r2, [sp, #12]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	bfb8      	it	lt
 800e58c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e590:	3402      	adds	r4, #2
 800e592:	9305      	str	r3, [sp, #20]
 800e594:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e65c <_svfiprintf_r+0x1f8>
 800e598:	7821      	ldrb	r1, [r4, #0]
 800e59a:	2203      	movs	r2, #3
 800e59c:	4650      	mov	r0, sl
 800e59e:	f7f1 fe9f 	bl	80002e0 <memchr>
 800e5a2:	b138      	cbz	r0, 800e5b4 <_svfiprintf_r+0x150>
 800e5a4:	9b04      	ldr	r3, [sp, #16]
 800e5a6:	eba0 000a 	sub.w	r0, r0, sl
 800e5aa:	2240      	movs	r2, #64	; 0x40
 800e5ac:	4082      	lsls	r2, r0
 800e5ae:	4313      	orrs	r3, r2
 800e5b0:	3401      	adds	r4, #1
 800e5b2:	9304      	str	r3, [sp, #16]
 800e5b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5b8:	4825      	ldr	r0, [pc, #148]	; (800e650 <_svfiprintf_r+0x1ec>)
 800e5ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e5be:	2206      	movs	r2, #6
 800e5c0:	f7f1 fe8e 	bl	80002e0 <memchr>
 800e5c4:	2800      	cmp	r0, #0
 800e5c6:	d038      	beq.n	800e63a <_svfiprintf_r+0x1d6>
 800e5c8:	4b22      	ldr	r3, [pc, #136]	; (800e654 <_svfiprintf_r+0x1f0>)
 800e5ca:	bb1b      	cbnz	r3, 800e614 <_svfiprintf_r+0x1b0>
 800e5cc:	9b03      	ldr	r3, [sp, #12]
 800e5ce:	3307      	adds	r3, #7
 800e5d0:	f023 0307 	bic.w	r3, r3, #7
 800e5d4:	3308      	adds	r3, #8
 800e5d6:	9303      	str	r3, [sp, #12]
 800e5d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5da:	4433      	add	r3, r6
 800e5dc:	9309      	str	r3, [sp, #36]	; 0x24
 800e5de:	e768      	b.n	800e4b2 <_svfiprintf_r+0x4e>
 800e5e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e5e4:	460c      	mov	r4, r1
 800e5e6:	2001      	movs	r0, #1
 800e5e8:	e7a6      	b.n	800e538 <_svfiprintf_r+0xd4>
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	3401      	adds	r4, #1
 800e5ee:	9305      	str	r3, [sp, #20]
 800e5f0:	4619      	mov	r1, r3
 800e5f2:	f04f 0c0a 	mov.w	ip, #10
 800e5f6:	4620      	mov	r0, r4
 800e5f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5fc:	3a30      	subs	r2, #48	; 0x30
 800e5fe:	2a09      	cmp	r2, #9
 800e600:	d903      	bls.n	800e60a <_svfiprintf_r+0x1a6>
 800e602:	2b00      	cmp	r3, #0
 800e604:	d0c6      	beq.n	800e594 <_svfiprintf_r+0x130>
 800e606:	9105      	str	r1, [sp, #20]
 800e608:	e7c4      	b.n	800e594 <_svfiprintf_r+0x130>
 800e60a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e60e:	4604      	mov	r4, r0
 800e610:	2301      	movs	r3, #1
 800e612:	e7f0      	b.n	800e5f6 <_svfiprintf_r+0x192>
 800e614:	ab03      	add	r3, sp, #12
 800e616:	9300      	str	r3, [sp, #0]
 800e618:	462a      	mov	r2, r5
 800e61a:	4b0f      	ldr	r3, [pc, #60]	; (800e658 <_svfiprintf_r+0x1f4>)
 800e61c:	a904      	add	r1, sp, #16
 800e61e:	4638      	mov	r0, r7
 800e620:	f7fc fcf6 	bl	800b010 <_printf_float>
 800e624:	1c42      	adds	r2, r0, #1
 800e626:	4606      	mov	r6, r0
 800e628:	d1d6      	bne.n	800e5d8 <_svfiprintf_r+0x174>
 800e62a:	89ab      	ldrh	r3, [r5, #12]
 800e62c:	065b      	lsls	r3, r3, #25
 800e62e:	f53f af2d 	bmi.w	800e48c <_svfiprintf_r+0x28>
 800e632:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e634:	b01d      	add	sp, #116	; 0x74
 800e636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e63a:	ab03      	add	r3, sp, #12
 800e63c:	9300      	str	r3, [sp, #0]
 800e63e:	462a      	mov	r2, r5
 800e640:	4b05      	ldr	r3, [pc, #20]	; (800e658 <_svfiprintf_r+0x1f4>)
 800e642:	a904      	add	r1, sp, #16
 800e644:	4638      	mov	r0, r7
 800e646:	f7fc ff6b 	bl	800b520 <_printf_i>
 800e64a:	e7eb      	b.n	800e624 <_svfiprintf_r+0x1c0>
 800e64c:	0800f831 	.word	0x0800f831
 800e650:	0800f83b 	.word	0x0800f83b
 800e654:	0800b011 	.word	0x0800b011
 800e658:	0800e3b1 	.word	0x0800e3b1
 800e65c:	0800f837 	.word	0x0800f837

0800e660 <__sflush_r>:
 800e660:	898a      	ldrh	r2, [r1, #12]
 800e662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e666:	4605      	mov	r5, r0
 800e668:	0710      	lsls	r0, r2, #28
 800e66a:	460c      	mov	r4, r1
 800e66c:	d458      	bmi.n	800e720 <__sflush_r+0xc0>
 800e66e:	684b      	ldr	r3, [r1, #4]
 800e670:	2b00      	cmp	r3, #0
 800e672:	dc05      	bgt.n	800e680 <__sflush_r+0x20>
 800e674:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e676:	2b00      	cmp	r3, #0
 800e678:	dc02      	bgt.n	800e680 <__sflush_r+0x20>
 800e67a:	2000      	movs	r0, #0
 800e67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e680:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e682:	2e00      	cmp	r6, #0
 800e684:	d0f9      	beq.n	800e67a <__sflush_r+0x1a>
 800e686:	2300      	movs	r3, #0
 800e688:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e68c:	682f      	ldr	r7, [r5, #0]
 800e68e:	6a21      	ldr	r1, [r4, #32]
 800e690:	602b      	str	r3, [r5, #0]
 800e692:	d032      	beq.n	800e6fa <__sflush_r+0x9a>
 800e694:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e696:	89a3      	ldrh	r3, [r4, #12]
 800e698:	075a      	lsls	r2, r3, #29
 800e69a:	d505      	bpl.n	800e6a8 <__sflush_r+0x48>
 800e69c:	6863      	ldr	r3, [r4, #4]
 800e69e:	1ac0      	subs	r0, r0, r3
 800e6a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e6a2:	b10b      	cbz	r3, 800e6a8 <__sflush_r+0x48>
 800e6a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e6a6:	1ac0      	subs	r0, r0, r3
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	4602      	mov	r2, r0
 800e6ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e6ae:	6a21      	ldr	r1, [r4, #32]
 800e6b0:	4628      	mov	r0, r5
 800e6b2:	47b0      	blx	r6
 800e6b4:	1c43      	adds	r3, r0, #1
 800e6b6:	89a3      	ldrh	r3, [r4, #12]
 800e6b8:	d106      	bne.n	800e6c8 <__sflush_r+0x68>
 800e6ba:	6829      	ldr	r1, [r5, #0]
 800e6bc:	291d      	cmp	r1, #29
 800e6be:	d82b      	bhi.n	800e718 <__sflush_r+0xb8>
 800e6c0:	4a29      	ldr	r2, [pc, #164]	; (800e768 <__sflush_r+0x108>)
 800e6c2:	410a      	asrs	r2, r1
 800e6c4:	07d6      	lsls	r6, r2, #31
 800e6c6:	d427      	bmi.n	800e718 <__sflush_r+0xb8>
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	6062      	str	r2, [r4, #4]
 800e6cc:	04d9      	lsls	r1, r3, #19
 800e6ce:	6922      	ldr	r2, [r4, #16]
 800e6d0:	6022      	str	r2, [r4, #0]
 800e6d2:	d504      	bpl.n	800e6de <__sflush_r+0x7e>
 800e6d4:	1c42      	adds	r2, r0, #1
 800e6d6:	d101      	bne.n	800e6dc <__sflush_r+0x7c>
 800e6d8:	682b      	ldr	r3, [r5, #0]
 800e6da:	b903      	cbnz	r3, 800e6de <__sflush_r+0x7e>
 800e6dc:	6560      	str	r0, [r4, #84]	; 0x54
 800e6de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e6e0:	602f      	str	r7, [r5, #0]
 800e6e2:	2900      	cmp	r1, #0
 800e6e4:	d0c9      	beq.n	800e67a <__sflush_r+0x1a>
 800e6e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e6ea:	4299      	cmp	r1, r3
 800e6ec:	d002      	beq.n	800e6f4 <__sflush_r+0x94>
 800e6ee:	4628      	mov	r0, r5
 800e6f0:	f7fe fa5e 	bl	800cbb0 <_free_r>
 800e6f4:	2000      	movs	r0, #0
 800e6f6:	6360      	str	r0, [r4, #52]	; 0x34
 800e6f8:	e7c0      	b.n	800e67c <__sflush_r+0x1c>
 800e6fa:	2301      	movs	r3, #1
 800e6fc:	4628      	mov	r0, r5
 800e6fe:	47b0      	blx	r6
 800e700:	1c41      	adds	r1, r0, #1
 800e702:	d1c8      	bne.n	800e696 <__sflush_r+0x36>
 800e704:	682b      	ldr	r3, [r5, #0]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d0c5      	beq.n	800e696 <__sflush_r+0x36>
 800e70a:	2b1d      	cmp	r3, #29
 800e70c:	d001      	beq.n	800e712 <__sflush_r+0xb2>
 800e70e:	2b16      	cmp	r3, #22
 800e710:	d101      	bne.n	800e716 <__sflush_r+0xb6>
 800e712:	602f      	str	r7, [r5, #0]
 800e714:	e7b1      	b.n	800e67a <__sflush_r+0x1a>
 800e716:	89a3      	ldrh	r3, [r4, #12]
 800e718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e71c:	81a3      	strh	r3, [r4, #12]
 800e71e:	e7ad      	b.n	800e67c <__sflush_r+0x1c>
 800e720:	690f      	ldr	r7, [r1, #16]
 800e722:	2f00      	cmp	r7, #0
 800e724:	d0a9      	beq.n	800e67a <__sflush_r+0x1a>
 800e726:	0793      	lsls	r3, r2, #30
 800e728:	680e      	ldr	r6, [r1, #0]
 800e72a:	bf08      	it	eq
 800e72c:	694b      	ldreq	r3, [r1, #20]
 800e72e:	600f      	str	r7, [r1, #0]
 800e730:	bf18      	it	ne
 800e732:	2300      	movne	r3, #0
 800e734:	eba6 0807 	sub.w	r8, r6, r7
 800e738:	608b      	str	r3, [r1, #8]
 800e73a:	f1b8 0f00 	cmp.w	r8, #0
 800e73e:	dd9c      	ble.n	800e67a <__sflush_r+0x1a>
 800e740:	6a21      	ldr	r1, [r4, #32]
 800e742:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e744:	4643      	mov	r3, r8
 800e746:	463a      	mov	r2, r7
 800e748:	4628      	mov	r0, r5
 800e74a:	47b0      	blx	r6
 800e74c:	2800      	cmp	r0, #0
 800e74e:	dc06      	bgt.n	800e75e <__sflush_r+0xfe>
 800e750:	89a3      	ldrh	r3, [r4, #12]
 800e752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e756:	81a3      	strh	r3, [r4, #12]
 800e758:	f04f 30ff 	mov.w	r0, #4294967295
 800e75c:	e78e      	b.n	800e67c <__sflush_r+0x1c>
 800e75e:	4407      	add	r7, r0
 800e760:	eba8 0800 	sub.w	r8, r8, r0
 800e764:	e7e9      	b.n	800e73a <__sflush_r+0xda>
 800e766:	bf00      	nop
 800e768:	dfbffffe 	.word	0xdfbffffe

0800e76c <_fflush_r>:
 800e76c:	b538      	push	{r3, r4, r5, lr}
 800e76e:	690b      	ldr	r3, [r1, #16]
 800e770:	4605      	mov	r5, r0
 800e772:	460c      	mov	r4, r1
 800e774:	b913      	cbnz	r3, 800e77c <_fflush_r+0x10>
 800e776:	2500      	movs	r5, #0
 800e778:	4628      	mov	r0, r5
 800e77a:	bd38      	pop	{r3, r4, r5, pc}
 800e77c:	b118      	cbz	r0, 800e786 <_fflush_r+0x1a>
 800e77e:	6a03      	ldr	r3, [r0, #32]
 800e780:	b90b      	cbnz	r3, 800e786 <_fflush_r+0x1a>
 800e782:	f7fd fa6d 	bl	800bc60 <__sinit>
 800e786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d0f3      	beq.n	800e776 <_fflush_r+0xa>
 800e78e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e790:	07d0      	lsls	r0, r2, #31
 800e792:	d404      	bmi.n	800e79e <_fflush_r+0x32>
 800e794:	0599      	lsls	r1, r3, #22
 800e796:	d402      	bmi.n	800e79e <_fflush_r+0x32>
 800e798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e79a:	f7fd fc0b 	bl	800bfb4 <__retarget_lock_acquire_recursive>
 800e79e:	4628      	mov	r0, r5
 800e7a0:	4621      	mov	r1, r4
 800e7a2:	f7ff ff5d 	bl	800e660 <__sflush_r>
 800e7a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e7a8:	07da      	lsls	r2, r3, #31
 800e7aa:	4605      	mov	r5, r0
 800e7ac:	d4e4      	bmi.n	800e778 <_fflush_r+0xc>
 800e7ae:	89a3      	ldrh	r3, [r4, #12]
 800e7b0:	059b      	lsls	r3, r3, #22
 800e7b2:	d4e1      	bmi.n	800e778 <_fflush_r+0xc>
 800e7b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7b6:	f7fd fbfe 	bl	800bfb6 <__retarget_lock_release_recursive>
 800e7ba:	e7dd      	b.n	800e778 <_fflush_r+0xc>

0800e7bc <__swhatbuf_r>:
 800e7bc:	b570      	push	{r4, r5, r6, lr}
 800e7be:	460c      	mov	r4, r1
 800e7c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7c4:	2900      	cmp	r1, #0
 800e7c6:	b096      	sub	sp, #88	; 0x58
 800e7c8:	4615      	mov	r5, r2
 800e7ca:	461e      	mov	r6, r3
 800e7cc:	da0d      	bge.n	800e7ea <__swhatbuf_r+0x2e>
 800e7ce:	89a3      	ldrh	r3, [r4, #12]
 800e7d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e7d4:	f04f 0100 	mov.w	r1, #0
 800e7d8:	bf0c      	ite	eq
 800e7da:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e7de:	2340      	movne	r3, #64	; 0x40
 800e7e0:	2000      	movs	r0, #0
 800e7e2:	6031      	str	r1, [r6, #0]
 800e7e4:	602b      	str	r3, [r5, #0]
 800e7e6:	b016      	add	sp, #88	; 0x58
 800e7e8:	bd70      	pop	{r4, r5, r6, pc}
 800e7ea:	466a      	mov	r2, sp
 800e7ec:	f000 f874 	bl	800e8d8 <_fstat_r>
 800e7f0:	2800      	cmp	r0, #0
 800e7f2:	dbec      	blt.n	800e7ce <__swhatbuf_r+0x12>
 800e7f4:	9901      	ldr	r1, [sp, #4]
 800e7f6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e7fa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e7fe:	4259      	negs	r1, r3
 800e800:	4159      	adcs	r1, r3
 800e802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e806:	e7eb      	b.n	800e7e0 <__swhatbuf_r+0x24>

0800e808 <__smakebuf_r>:
 800e808:	898b      	ldrh	r3, [r1, #12]
 800e80a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e80c:	079d      	lsls	r5, r3, #30
 800e80e:	4606      	mov	r6, r0
 800e810:	460c      	mov	r4, r1
 800e812:	d507      	bpl.n	800e824 <__smakebuf_r+0x1c>
 800e814:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e818:	6023      	str	r3, [r4, #0]
 800e81a:	6123      	str	r3, [r4, #16]
 800e81c:	2301      	movs	r3, #1
 800e81e:	6163      	str	r3, [r4, #20]
 800e820:	b002      	add	sp, #8
 800e822:	bd70      	pop	{r4, r5, r6, pc}
 800e824:	ab01      	add	r3, sp, #4
 800e826:	466a      	mov	r2, sp
 800e828:	f7ff ffc8 	bl	800e7bc <__swhatbuf_r>
 800e82c:	9900      	ldr	r1, [sp, #0]
 800e82e:	4605      	mov	r5, r0
 800e830:	4630      	mov	r0, r6
 800e832:	f7fe fa31 	bl	800cc98 <_malloc_r>
 800e836:	b948      	cbnz	r0, 800e84c <__smakebuf_r+0x44>
 800e838:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e83c:	059a      	lsls	r2, r3, #22
 800e83e:	d4ef      	bmi.n	800e820 <__smakebuf_r+0x18>
 800e840:	f023 0303 	bic.w	r3, r3, #3
 800e844:	f043 0302 	orr.w	r3, r3, #2
 800e848:	81a3      	strh	r3, [r4, #12]
 800e84a:	e7e3      	b.n	800e814 <__smakebuf_r+0xc>
 800e84c:	89a3      	ldrh	r3, [r4, #12]
 800e84e:	6020      	str	r0, [r4, #0]
 800e850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e854:	81a3      	strh	r3, [r4, #12]
 800e856:	9b00      	ldr	r3, [sp, #0]
 800e858:	6163      	str	r3, [r4, #20]
 800e85a:	9b01      	ldr	r3, [sp, #4]
 800e85c:	6120      	str	r0, [r4, #16]
 800e85e:	b15b      	cbz	r3, 800e878 <__smakebuf_r+0x70>
 800e860:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e864:	4630      	mov	r0, r6
 800e866:	f000 f849 	bl	800e8fc <_isatty_r>
 800e86a:	b128      	cbz	r0, 800e878 <__smakebuf_r+0x70>
 800e86c:	89a3      	ldrh	r3, [r4, #12]
 800e86e:	f023 0303 	bic.w	r3, r3, #3
 800e872:	f043 0301 	orr.w	r3, r3, #1
 800e876:	81a3      	strh	r3, [r4, #12]
 800e878:	89a3      	ldrh	r3, [r4, #12]
 800e87a:	431d      	orrs	r5, r3
 800e87c:	81a5      	strh	r5, [r4, #12]
 800e87e:	e7cf      	b.n	800e820 <__smakebuf_r+0x18>

0800e880 <memmove>:
 800e880:	4288      	cmp	r0, r1
 800e882:	b510      	push	{r4, lr}
 800e884:	eb01 0402 	add.w	r4, r1, r2
 800e888:	d902      	bls.n	800e890 <memmove+0x10>
 800e88a:	4284      	cmp	r4, r0
 800e88c:	4623      	mov	r3, r4
 800e88e:	d807      	bhi.n	800e8a0 <memmove+0x20>
 800e890:	1e43      	subs	r3, r0, #1
 800e892:	42a1      	cmp	r1, r4
 800e894:	d008      	beq.n	800e8a8 <memmove+0x28>
 800e896:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e89a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e89e:	e7f8      	b.n	800e892 <memmove+0x12>
 800e8a0:	4402      	add	r2, r0
 800e8a2:	4601      	mov	r1, r0
 800e8a4:	428a      	cmp	r2, r1
 800e8a6:	d100      	bne.n	800e8aa <memmove+0x2a>
 800e8a8:	bd10      	pop	{r4, pc}
 800e8aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e8ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e8b2:	e7f7      	b.n	800e8a4 <memmove+0x24>

0800e8b4 <strncmp>:
 800e8b4:	b510      	push	{r4, lr}
 800e8b6:	b16a      	cbz	r2, 800e8d4 <strncmp+0x20>
 800e8b8:	3901      	subs	r1, #1
 800e8ba:	1884      	adds	r4, r0, r2
 800e8bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8c0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e8c4:	429a      	cmp	r2, r3
 800e8c6:	d103      	bne.n	800e8d0 <strncmp+0x1c>
 800e8c8:	42a0      	cmp	r0, r4
 800e8ca:	d001      	beq.n	800e8d0 <strncmp+0x1c>
 800e8cc:	2a00      	cmp	r2, #0
 800e8ce:	d1f5      	bne.n	800e8bc <strncmp+0x8>
 800e8d0:	1ad0      	subs	r0, r2, r3
 800e8d2:	bd10      	pop	{r4, pc}
 800e8d4:	4610      	mov	r0, r2
 800e8d6:	e7fc      	b.n	800e8d2 <strncmp+0x1e>

0800e8d8 <_fstat_r>:
 800e8d8:	b538      	push	{r3, r4, r5, lr}
 800e8da:	4d07      	ldr	r5, [pc, #28]	; (800e8f8 <_fstat_r+0x20>)
 800e8dc:	2300      	movs	r3, #0
 800e8de:	4604      	mov	r4, r0
 800e8e0:	4608      	mov	r0, r1
 800e8e2:	4611      	mov	r1, r2
 800e8e4:	602b      	str	r3, [r5, #0]
 800e8e6:	f7f3 f8ae 	bl	8001a46 <_fstat>
 800e8ea:	1c43      	adds	r3, r0, #1
 800e8ec:	d102      	bne.n	800e8f4 <_fstat_r+0x1c>
 800e8ee:	682b      	ldr	r3, [r5, #0]
 800e8f0:	b103      	cbz	r3, 800e8f4 <_fstat_r+0x1c>
 800e8f2:	6023      	str	r3, [r4, #0]
 800e8f4:	bd38      	pop	{r3, r4, r5, pc}
 800e8f6:	bf00      	nop
 800e8f8:	24000670 	.word	0x24000670

0800e8fc <_isatty_r>:
 800e8fc:	b538      	push	{r3, r4, r5, lr}
 800e8fe:	4d06      	ldr	r5, [pc, #24]	; (800e918 <_isatty_r+0x1c>)
 800e900:	2300      	movs	r3, #0
 800e902:	4604      	mov	r4, r0
 800e904:	4608      	mov	r0, r1
 800e906:	602b      	str	r3, [r5, #0]
 800e908:	f7f3 f8ad 	bl	8001a66 <_isatty>
 800e90c:	1c43      	adds	r3, r0, #1
 800e90e:	d102      	bne.n	800e916 <_isatty_r+0x1a>
 800e910:	682b      	ldr	r3, [r5, #0]
 800e912:	b103      	cbz	r3, 800e916 <_isatty_r+0x1a>
 800e914:	6023      	str	r3, [r4, #0]
 800e916:	bd38      	pop	{r3, r4, r5, pc}
 800e918:	24000670 	.word	0x24000670

0800e91c <_sbrk_r>:
 800e91c:	b538      	push	{r3, r4, r5, lr}
 800e91e:	4d06      	ldr	r5, [pc, #24]	; (800e938 <_sbrk_r+0x1c>)
 800e920:	2300      	movs	r3, #0
 800e922:	4604      	mov	r4, r0
 800e924:	4608      	mov	r0, r1
 800e926:	602b      	str	r3, [r5, #0]
 800e928:	f7f3 f8b6 	bl	8001a98 <_sbrk>
 800e92c:	1c43      	adds	r3, r0, #1
 800e92e:	d102      	bne.n	800e936 <_sbrk_r+0x1a>
 800e930:	682b      	ldr	r3, [r5, #0]
 800e932:	b103      	cbz	r3, 800e936 <_sbrk_r+0x1a>
 800e934:	6023      	str	r3, [r4, #0]
 800e936:	bd38      	pop	{r3, r4, r5, pc}
 800e938:	24000670 	.word	0x24000670

0800e93c <memcpy>:
 800e93c:	440a      	add	r2, r1
 800e93e:	4291      	cmp	r1, r2
 800e940:	f100 33ff 	add.w	r3, r0, #4294967295
 800e944:	d100      	bne.n	800e948 <memcpy+0xc>
 800e946:	4770      	bx	lr
 800e948:	b510      	push	{r4, lr}
 800e94a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e94e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e952:	4291      	cmp	r1, r2
 800e954:	d1f9      	bne.n	800e94a <memcpy+0xe>
 800e956:	bd10      	pop	{r4, pc}

0800e958 <nan>:
 800e958:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e960 <nan+0x8>
 800e95c:	4770      	bx	lr
 800e95e:	bf00      	nop
 800e960:	00000000 	.word	0x00000000
 800e964:	7ff80000 	.word	0x7ff80000

0800e968 <__assert_func>:
 800e968:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e96a:	4614      	mov	r4, r2
 800e96c:	461a      	mov	r2, r3
 800e96e:	4b09      	ldr	r3, [pc, #36]	; (800e994 <__assert_func+0x2c>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	4605      	mov	r5, r0
 800e974:	68d8      	ldr	r0, [r3, #12]
 800e976:	b14c      	cbz	r4, 800e98c <__assert_func+0x24>
 800e978:	4b07      	ldr	r3, [pc, #28]	; (800e998 <__assert_func+0x30>)
 800e97a:	9100      	str	r1, [sp, #0]
 800e97c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e980:	4906      	ldr	r1, [pc, #24]	; (800e99c <__assert_func+0x34>)
 800e982:	462b      	mov	r3, r5
 800e984:	f000 fbca 	bl	800f11c <fiprintf>
 800e988:	f000 fbda 	bl	800f140 <abort>
 800e98c:	4b04      	ldr	r3, [pc, #16]	; (800e9a0 <__assert_func+0x38>)
 800e98e:	461c      	mov	r4, r3
 800e990:	e7f3      	b.n	800e97a <__assert_func+0x12>
 800e992:	bf00      	nop
 800e994:	24000068 	.word	0x24000068
 800e998:	0800f84a 	.word	0x0800f84a
 800e99c:	0800f857 	.word	0x0800f857
 800e9a0:	0800f885 	.word	0x0800f885

0800e9a4 <_calloc_r>:
 800e9a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e9a6:	fba1 2402 	umull	r2, r4, r1, r2
 800e9aa:	b94c      	cbnz	r4, 800e9c0 <_calloc_r+0x1c>
 800e9ac:	4611      	mov	r1, r2
 800e9ae:	9201      	str	r2, [sp, #4]
 800e9b0:	f7fe f972 	bl	800cc98 <_malloc_r>
 800e9b4:	9a01      	ldr	r2, [sp, #4]
 800e9b6:	4605      	mov	r5, r0
 800e9b8:	b930      	cbnz	r0, 800e9c8 <_calloc_r+0x24>
 800e9ba:	4628      	mov	r0, r5
 800e9bc:	b003      	add	sp, #12
 800e9be:	bd30      	pop	{r4, r5, pc}
 800e9c0:	220c      	movs	r2, #12
 800e9c2:	6002      	str	r2, [r0, #0]
 800e9c4:	2500      	movs	r5, #0
 800e9c6:	e7f8      	b.n	800e9ba <_calloc_r+0x16>
 800e9c8:	4621      	mov	r1, r4
 800e9ca:	f7fd fa77 	bl	800bebc <memset>
 800e9ce:	e7f4      	b.n	800e9ba <_calloc_r+0x16>

0800e9d0 <rshift>:
 800e9d0:	6903      	ldr	r3, [r0, #16]
 800e9d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e9d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e9da:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e9de:	f100 0414 	add.w	r4, r0, #20
 800e9e2:	dd45      	ble.n	800ea70 <rshift+0xa0>
 800e9e4:	f011 011f 	ands.w	r1, r1, #31
 800e9e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e9ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e9f0:	d10c      	bne.n	800ea0c <rshift+0x3c>
 800e9f2:	f100 0710 	add.w	r7, r0, #16
 800e9f6:	4629      	mov	r1, r5
 800e9f8:	42b1      	cmp	r1, r6
 800e9fa:	d334      	bcc.n	800ea66 <rshift+0x96>
 800e9fc:	1a9b      	subs	r3, r3, r2
 800e9fe:	009b      	lsls	r3, r3, #2
 800ea00:	1eea      	subs	r2, r5, #3
 800ea02:	4296      	cmp	r6, r2
 800ea04:	bf38      	it	cc
 800ea06:	2300      	movcc	r3, #0
 800ea08:	4423      	add	r3, r4
 800ea0a:	e015      	b.n	800ea38 <rshift+0x68>
 800ea0c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ea10:	f1c1 0820 	rsb	r8, r1, #32
 800ea14:	40cf      	lsrs	r7, r1
 800ea16:	f105 0e04 	add.w	lr, r5, #4
 800ea1a:	46a1      	mov	r9, r4
 800ea1c:	4576      	cmp	r6, lr
 800ea1e:	46f4      	mov	ip, lr
 800ea20:	d815      	bhi.n	800ea4e <rshift+0x7e>
 800ea22:	1a9a      	subs	r2, r3, r2
 800ea24:	0092      	lsls	r2, r2, #2
 800ea26:	3a04      	subs	r2, #4
 800ea28:	3501      	adds	r5, #1
 800ea2a:	42ae      	cmp	r6, r5
 800ea2c:	bf38      	it	cc
 800ea2e:	2200      	movcc	r2, #0
 800ea30:	18a3      	adds	r3, r4, r2
 800ea32:	50a7      	str	r7, [r4, r2]
 800ea34:	b107      	cbz	r7, 800ea38 <rshift+0x68>
 800ea36:	3304      	adds	r3, #4
 800ea38:	1b1a      	subs	r2, r3, r4
 800ea3a:	42a3      	cmp	r3, r4
 800ea3c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ea40:	bf08      	it	eq
 800ea42:	2300      	moveq	r3, #0
 800ea44:	6102      	str	r2, [r0, #16]
 800ea46:	bf08      	it	eq
 800ea48:	6143      	streq	r3, [r0, #20]
 800ea4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea4e:	f8dc c000 	ldr.w	ip, [ip]
 800ea52:	fa0c fc08 	lsl.w	ip, ip, r8
 800ea56:	ea4c 0707 	orr.w	r7, ip, r7
 800ea5a:	f849 7b04 	str.w	r7, [r9], #4
 800ea5e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ea62:	40cf      	lsrs	r7, r1
 800ea64:	e7da      	b.n	800ea1c <rshift+0x4c>
 800ea66:	f851 cb04 	ldr.w	ip, [r1], #4
 800ea6a:	f847 cf04 	str.w	ip, [r7, #4]!
 800ea6e:	e7c3      	b.n	800e9f8 <rshift+0x28>
 800ea70:	4623      	mov	r3, r4
 800ea72:	e7e1      	b.n	800ea38 <rshift+0x68>

0800ea74 <__hexdig_fun>:
 800ea74:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ea78:	2b09      	cmp	r3, #9
 800ea7a:	d802      	bhi.n	800ea82 <__hexdig_fun+0xe>
 800ea7c:	3820      	subs	r0, #32
 800ea7e:	b2c0      	uxtb	r0, r0
 800ea80:	4770      	bx	lr
 800ea82:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ea86:	2b05      	cmp	r3, #5
 800ea88:	d801      	bhi.n	800ea8e <__hexdig_fun+0x1a>
 800ea8a:	3847      	subs	r0, #71	; 0x47
 800ea8c:	e7f7      	b.n	800ea7e <__hexdig_fun+0xa>
 800ea8e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ea92:	2b05      	cmp	r3, #5
 800ea94:	d801      	bhi.n	800ea9a <__hexdig_fun+0x26>
 800ea96:	3827      	subs	r0, #39	; 0x27
 800ea98:	e7f1      	b.n	800ea7e <__hexdig_fun+0xa>
 800ea9a:	2000      	movs	r0, #0
 800ea9c:	4770      	bx	lr
	...

0800eaa0 <__gethex>:
 800eaa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaa4:	4617      	mov	r7, r2
 800eaa6:	680a      	ldr	r2, [r1, #0]
 800eaa8:	b085      	sub	sp, #20
 800eaaa:	f102 0b02 	add.w	fp, r2, #2
 800eaae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800eab2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800eab6:	4681      	mov	r9, r0
 800eab8:	468a      	mov	sl, r1
 800eaba:	9302      	str	r3, [sp, #8]
 800eabc:	32fe      	adds	r2, #254	; 0xfe
 800eabe:	eb02 030b 	add.w	r3, r2, fp
 800eac2:	46d8      	mov	r8, fp
 800eac4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800eac8:	9301      	str	r3, [sp, #4]
 800eaca:	2830      	cmp	r0, #48	; 0x30
 800eacc:	d0f7      	beq.n	800eabe <__gethex+0x1e>
 800eace:	f7ff ffd1 	bl	800ea74 <__hexdig_fun>
 800ead2:	4604      	mov	r4, r0
 800ead4:	2800      	cmp	r0, #0
 800ead6:	d138      	bne.n	800eb4a <__gethex+0xaa>
 800ead8:	49a7      	ldr	r1, [pc, #668]	; (800ed78 <__gethex+0x2d8>)
 800eada:	2201      	movs	r2, #1
 800eadc:	4640      	mov	r0, r8
 800eade:	f7ff fee9 	bl	800e8b4 <strncmp>
 800eae2:	4606      	mov	r6, r0
 800eae4:	2800      	cmp	r0, #0
 800eae6:	d169      	bne.n	800ebbc <__gethex+0x11c>
 800eae8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800eaec:	465d      	mov	r5, fp
 800eaee:	f7ff ffc1 	bl	800ea74 <__hexdig_fun>
 800eaf2:	2800      	cmp	r0, #0
 800eaf4:	d064      	beq.n	800ebc0 <__gethex+0x120>
 800eaf6:	465a      	mov	r2, fp
 800eaf8:	7810      	ldrb	r0, [r2, #0]
 800eafa:	2830      	cmp	r0, #48	; 0x30
 800eafc:	4690      	mov	r8, r2
 800eafe:	f102 0201 	add.w	r2, r2, #1
 800eb02:	d0f9      	beq.n	800eaf8 <__gethex+0x58>
 800eb04:	f7ff ffb6 	bl	800ea74 <__hexdig_fun>
 800eb08:	2301      	movs	r3, #1
 800eb0a:	fab0 f480 	clz	r4, r0
 800eb0e:	0964      	lsrs	r4, r4, #5
 800eb10:	465e      	mov	r6, fp
 800eb12:	9301      	str	r3, [sp, #4]
 800eb14:	4642      	mov	r2, r8
 800eb16:	4615      	mov	r5, r2
 800eb18:	3201      	adds	r2, #1
 800eb1a:	7828      	ldrb	r0, [r5, #0]
 800eb1c:	f7ff ffaa 	bl	800ea74 <__hexdig_fun>
 800eb20:	2800      	cmp	r0, #0
 800eb22:	d1f8      	bne.n	800eb16 <__gethex+0x76>
 800eb24:	4994      	ldr	r1, [pc, #592]	; (800ed78 <__gethex+0x2d8>)
 800eb26:	2201      	movs	r2, #1
 800eb28:	4628      	mov	r0, r5
 800eb2a:	f7ff fec3 	bl	800e8b4 <strncmp>
 800eb2e:	b978      	cbnz	r0, 800eb50 <__gethex+0xb0>
 800eb30:	b946      	cbnz	r6, 800eb44 <__gethex+0xa4>
 800eb32:	1c6e      	adds	r6, r5, #1
 800eb34:	4632      	mov	r2, r6
 800eb36:	4615      	mov	r5, r2
 800eb38:	3201      	adds	r2, #1
 800eb3a:	7828      	ldrb	r0, [r5, #0]
 800eb3c:	f7ff ff9a 	bl	800ea74 <__hexdig_fun>
 800eb40:	2800      	cmp	r0, #0
 800eb42:	d1f8      	bne.n	800eb36 <__gethex+0x96>
 800eb44:	1b73      	subs	r3, r6, r5
 800eb46:	009e      	lsls	r6, r3, #2
 800eb48:	e004      	b.n	800eb54 <__gethex+0xb4>
 800eb4a:	2400      	movs	r4, #0
 800eb4c:	4626      	mov	r6, r4
 800eb4e:	e7e1      	b.n	800eb14 <__gethex+0x74>
 800eb50:	2e00      	cmp	r6, #0
 800eb52:	d1f7      	bne.n	800eb44 <__gethex+0xa4>
 800eb54:	782b      	ldrb	r3, [r5, #0]
 800eb56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800eb5a:	2b50      	cmp	r3, #80	; 0x50
 800eb5c:	d13d      	bne.n	800ebda <__gethex+0x13a>
 800eb5e:	786b      	ldrb	r3, [r5, #1]
 800eb60:	2b2b      	cmp	r3, #43	; 0x2b
 800eb62:	d02f      	beq.n	800ebc4 <__gethex+0x124>
 800eb64:	2b2d      	cmp	r3, #45	; 0x2d
 800eb66:	d031      	beq.n	800ebcc <__gethex+0x12c>
 800eb68:	1c69      	adds	r1, r5, #1
 800eb6a:	f04f 0b00 	mov.w	fp, #0
 800eb6e:	7808      	ldrb	r0, [r1, #0]
 800eb70:	f7ff ff80 	bl	800ea74 <__hexdig_fun>
 800eb74:	1e42      	subs	r2, r0, #1
 800eb76:	b2d2      	uxtb	r2, r2
 800eb78:	2a18      	cmp	r2, #24
 800eb7a:	d82e      	bhi.n	800ebda <__gethex+0x13a>
 800eb7c:	f1a0 0210 	sub.w	r2, r0, #16
 800eb80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800eb84:	f7ff ff76 	bl	800ea74 <__hexdig_fun>
 800eb88:	f100 3cff 	add.w	ip, r0, #4294967295
 800eb8c:	fa5f fc8c 	uxtb.w	ip, ip
 800eb90:	f1bc 0f18 	cmp.w	ip, #24
 800eb94:	d91d      	bls.n	800ebd2 <__gethex+0x132>
 800eb96:	f1bb 0f00 	cmp.w	fp, #0
 800eb9a:	d000      	beq.n	800eb9e <__gethex+0xfe>
 800eb9c:	4252      	negs	r2, r2
 800eb9e:	4416      	add	r6, r2
 800eba0:	f8ca 1000 	str.w	r1, [sl]
 800eba4:	b1dc      	cbz	r4, 800ebde <__gethex+0x13e>
 800eba6:	9b01      	ldr	r3, [sp, #4]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	bf14      	ite	ne
 800ebac:	f04f 0800 	movne.w	r8, #0
 800ebb0:	f04f 0806 	moveq.w	r8, #6
 800ebb4:	4640      	mov	r0, r8
 800ebb6:	b005      	add	sp, #20
 800ebb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebbc:	4645      	mov	r5, r8
 800ebbe:	4626      	mov	r6, r4
 800ebc0:	2401      	movs	r4, #1
 800ebc2:	e7c7      	b.n	800eb54 <__gethex+0xb4>
 800ebc4:	f04f 0b00 	mov.w	fp, #0
 800ebc8:	1ca9      	adds	r1, r5, #2
 800ebca:	e7d0      	b.n	800eb6e <__gethex+0xce>
 800ebcc:	f04f 0b01 	mov.w	fp, #1
 800ebd0:	e7fa      	b.n	800ebc8 <__gethex+0x128>
 800ebd2:	230a      	movs	r3, #10
 800ebd4:	fb03 0002 	mla	r0, r3, r2, r0
 800ebd8:	e7d0      	b.n	800eb7c <__gethex+0xdc>
 800ebda:	4629      	mov	r1, r5
 800ebdc:	e7e0      	b.n	800eba0 <__gethex+0x100>
 800ebde:	eba5 0308 	sub.w	r3, r5, r8
 800ebe2:	3b01      	subs	r3, #1
 800ebe4:	4621      	mov	r1, r4
 800ebe6:	2b07      	cmp	r3, #7
 800ebe8:	dc0a      	bgt.n	800ec00 <__gethex+0x160>
 800ebea:	4648      	mov	r0, r9
 800ebec:	f7fe f8e0 	bl	800cdb0 <_Balloc>
 800ebf0:	4604      	mov	r4, r0
 800ebf2:	b940      	cbnz	r0, 800ec06 <__gethex+0x166>
 800ebf4:	4b61      	ldr	r3, [pc, #388]	; (800ed7c <__gethex+0x2dc>)
 800ebf6:	4602      	mov	r2, r0
 800ebf8:	21e4      	movs	r1, #228	; 0xe4
 800ebfa:	4861      	ldr	r0, [pc, #388]	; (800ed80 <__gethex+0x2e0>)
 800ebfc:	f7ff feb4 	bl	800e968 <__assert_func>
 800ec00:	3101      	adds	r1, #1
 800ec02:	105b      	asrs	r3, r3, #1
 800ec04:	e7ef      	b.n	800ebe6 <__gethex+0x146>
 800ec06:	f100 0a14 	add.w	sl, r0, #20
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	495a      	ldr	r1, [pc, #360]	; (800ed78 <__gethex+0x2d8>)
 800ec0e:	f8cd a004 	str.w	sl, [sp, #4]
 800ec12:	469b      	mov	fp, r3
 800ec14:	45a8      	cmp	r8, r5
 800ec16:	d342      	bcc.n	800ec9e <__gethex+0x1fe>
 800ec18:	9801      	ldr	r0, [sp, #4]
 800ec1a:	f840 bb04 	str.w	fp, [r0], #4
 800ec1e:	eba0 000a 	sub.w	r0, r0, sl
 800ec22:	1080      	asrs	r0, r0, #2
 800ec24:	6120      	str	r0, [r4, #16]
 800ec26:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800ec2a:	4658      	mov	r0, fp
 800ec2c:	f7fe f9b2 	bl	800cf94 <__hi0bits>
 800ec30:	683d      	ldr	r5, [r7, #0]
 800ec32:	eba8 0000 	sub.w	r0, r8, r0
 800ec36:	42a8      	cmp	r0, r5
 800ec38:	dd59      	ble.n	800ecee <__gethex+0x24e>
 800ec3a:	eba0 0805 	sub.w	r8, r0, r5
 800ec3e:	4641      	mov	r1, r8
 800ec40:	4620      	mov	r0, r4
 800ec42:	f7fe fd3e 	bl	800d6c2 <__any_on>
 800ec46:	4683      	mov	fp, r0
 800ec48:	b1b8      	cbz	r0, 800ec7a <__gethex+0x1da>
 800ec4a:	f108 33ff 	add.w	r3, r8, #4294967295
 800ec4e:	1159      	asrs	r1, r3, #5
 800ec50:	f003 021f 	and.w	r2, r3, #31
 800ec54:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ec58:	f04f 0b01 	mov.w	fp, #1
 800ec5c:	fa0b f202 	lsl.w	r2, fp, r2
 800ec60:	420a      	tst	r2, r1
 800ec62:	d00a      	beq.n	800ec7a <__gethex+0x1da>
 800ec64:	455b      	cmp	r3, fp
 800ec66:	dd06      	ble.n	800ec76 <__gethex+0x1d6>
 800ec68:	f1a8 0102 	sub.w	r1, r8, #2
 800ec6c:	4620      	mov	r0, r4
 800ec6e:	f7fe fd28 	bl	800d6c2 <__any_on>
 800ec72:	2800      	cmp	r0, #0
 800ec74:	d138      	bne.n	800ece8 <__gethex+0x248>
 800ec76:	f04f 0b02 	mov.w	fp, #2
 800ec7a:	4641      	mov	r1, r8
 800ec7c:	4620      	mov	r0, r4
 800ec7e:	f7ff fea7 	bl	800e9d0 <rshift>
 800ec82:	4446      	add	r6, r8
 800ec84:	68bb      	ldr	r3, [r7, #8]
 800ec86:	42b3      	cmp	r3, r6
 800ec88:	da41      	bge.n	800ed0e <__gethex+0x26e>
 800ec8a:	4621      	mov	r1, r4
 800ec8c:	4648      	mov	r0, r9
 800ec8e:	f7fe f8cf 	bl	800ce30 <_Bfree>
 800ec92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ec94:	2300      	movs	r3, #0
 800ec96:	6013      	str	r3, [r2, #0]
 800ec98:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800ec9c:	e78a      	b.n	800ebb4 <__gethex+0x114>
 800ec9e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800eca2:	2a2e      	cmp	r2, #46	; 0x2e
 800eca4:	d014      	beq.n	800ecd0 <__gethex+0x230>
 800eca6:	2b20      	cmp	r3, #32
 800eca8:	d106      	bne.n	800ecb8 <__gethex+0x218>
 800ecaa:	9b01      	ldr	r3, [sp, #4]
 800ecac:	f843 bb04 	str.w	fp, [r3], #4
 800ecb0:	f04f 0b00 	mov.w	fp, #0
 800ecb4:	9301      	str	r3, [sp, #4]
 800ecb6:	465b      	mov	r3, fp
 800ecb8:	7828      	ldrb	r0, [r5, #0]
 800ecba:	9303      	str	r3, [sp, #12]
 800ecbc:	f7ff feda 	bl	800ea74 <__hexdig_fun>
 800ecc0:	9b03      	ldr	r3, [sp, #12]
 800ecc2:	f000 000f 	and.w	r0, r0, #15
 800ecc6:	4098      	lsls	r0, r3
 800ecc8:	ea4b 0b00 	orr.w	fp, fp, r0
 800eccc:	3304      	adds	r3, #4
 800ecce:	e7a1      	b.n	800ec14 <__gethex+0x174>
 800ecd0:	45a8      	cmp	r8, r5
 800ecd2:	d8e8      	bhi.n	800eca6 <__gethex+0x206>
 800ecd4:	2201      	movs	r2, #1
 800ecd6:	4628      	mov	r0, r5
 800ecd8:	9303      	str	r3, [sp, #12]
 800ecda:	f7ff fdeb 	bl	800e8b4 <strncmp>
 800ecde:	4926      	ldr	r1, [pc, #152]	; (800ed78 <__gethex+0x2d8>)
 800ece0:	9b03      	ldr	r3, [sp, #12]
 800ece2:	2800      	cmp	r0, #0
 800ece4:	d1df      	bne.n	800eca6 <__gethex+0x206>
 800ece6:	e795      	b.n	800ec14 <__gethex+0x174>
 800ece8:	f04f 0b03 	mov.w	fp, #3
 800ecec:	e7c5      	b.n	800ec7a <__gethex+0x1da>
 800ecee:	da0b      	bge.n	800ed08 <__gethex+0x268>
 800ecf0:	eba5 0800 	sub.w	r8, r5, r0
 800ecf4:	4621      	mov	r1, r4
 800ecf6:	4642      	mov	r2, r8
 800ecf8:	4648      	mov	r0, r9
 800ecfa:	f7fe fab3 	bl	800d264 <__lshift>
 800ecfe:	eba6 0608 	sub.w	r6, r6, r8
 800ed02:	4604      	mov	r4, r0
 800ed04:	f100 0a14 	add.w	sl, r0, #20
 800ed08:	f04f 0b00 	mov.w	fp, #0
 800ed0c:	e7ba      	b.n	800ec84 <__gethex+0x1e4>
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	42b3      	cmp	r3, r6
 800ed12:	dd73      	ble.n	800edfc <__gethex+0x35c>
 800ed14:	1b9e      	subs	r6, r3, r6
 800ed16:	42b5      	cmp	r5, r6
 800ed18:	dc34      	bgt.n	800ed84 <__gethex+0x2e4>
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	2b02      	cmp	r3, #2
 800ed1e:	d023      	beq.n	800ed68 <__gethex+0x2c8>
 800ed20:	2b03      	cmp	r3, #3
 800ed22:	d025      	beq.n	800ed70 <__gethex+0x2d0>
 800ed24:	2b01      	cmp	r3, #1
 800ed26:	d115      	bne.n	800ed54 <__gethex+0x2b4>
 800ed28:	42b5      	cmp	r5, r6
 800ed2a:	d113      	bne.n	800ed54 <__gethex+0x2b4>
 800ed2c:	2d01      	cmp	r5, #1
 800ed2e:	d10b      	bne.n	800ed48 <__gethex+0x2a8>
 800ed30:	9a02      	ldr	r2, [sp, #8]
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6013      	str	r3, [r2, #0]
 800ed36:	2301      	movs	r3, #1
 800ed38:	6123      	str	r3, [r4, #16]
 800ed3a:	f8ca 3000 	str.w	r3, [sl]
 800ed3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed40:	f04f 0862 	mov.w	r8, #98	; 0x62
 800ed44:	601c      	str	r4, [r3, #0]
 800ed46:	e735      	b.n	800ebb4 <__gethex+0x114>
 800ed48:	1e69      	subs	r1, r5, #1
 800ed4a:	4620      	mov	r0, r4
 800ed4c:	f7fe fcb9 	bl	800d6c2 <__any_on>
 800ed50:	2800      	cmp	r0, #0
 800ed52:	d1ed      	bne.n	800ed30 <__gethex+0x290>
 800ed54:	4621      	mov	r1, r4
 800ed56:	4648      	mov	r0, r9
 800ed58:	f7fe f86a 	bl	800ce30 <_Bfree>
 800ed5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ed5e:	2300      	movs	r3, #0
 800ed60:	6013      	str	r3, [r2, #0]
 800ed62:	f04f 0850 	mov.w	r8, #80	; 0x50
 800ed66:	e725      	b.n	800ebb4 <__gethex+0x114>
 800ed68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d1f2      	bne.n	800ed54 <__gethex+0x2b4>
 800ed6e:	e7df      	b.n	800ed30 <__gethex+0x290>
 800ed70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d1dc      	bne.n	800ed30 <__gethex+0x290>
 800ed76:	e7ed      	b.n	800ed54 <__gethex+0x2b4>
 800ed78:	0800f6dc 	.word	0x0800f6dc
 800ed7c:	0800f575 	.word	0x0800f575
 800ed80:	0800f886 	.word	0x0800f886
 800ed84:	f106 38ff 	add.w	r8, r6, #4294967295
 800ed88:	f1bb 0f00 	cmp.w	fp, #0
 800ed8c:	d133      	bne.n	800edf6 <__gethex+0x356>
 800ed8e:	f1b8 0f00 	cmp.w	r8, #0
 800ed92:	d004      	beq.n	800ed9e <__gethex+0x2fe>
 800ed94:	4641      	mov	r1, r8
 800ed96:	4620      	mov	r0, r4
 800ed98:	f7fe fc93 	bl	800d6c2 <__any_on>
 800ed9c:	4683      	mov	fp, r0
 800ed9e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800eda2:	2301      	movs	r3, #1
 800eda4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800eda8:	f008 081f 	and.w	r8, r8, #31
 800edac:	fa03 f308 	lsl.w	r3, r3, r8
 800edb0:	4213      	tst	r3, r2
 800edb2:	4631      	mov	r1, r6
 800edb4:	4620      	mov	r0, r4
 800edb6:	bf18      	it	ne
 800edb8:	f04b 0b02 	orrne.w	fp, fp, #2
 800edbc:	1bad      	subs	r5, r5, r6
 800edbe:	f7ff fe07 	bl	800e9d0 <rshift>
 800edc2:	687e      	ldr	r6, [r7, #4]
 800edc4:	f04f 0802 	mov.w	r8, #2
 800edc8:	f1bb 0f00 	cmp.w	fp, #0
 800edcc:	d04a      	beq.n	800ee64 <__gethex+0x3c4>
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	2b02      	cmp	r3, #2
 800edd2:	d016      	beq.n	800ee02 <__gethex+0x362>
 800edd4:	2b03      	cmp	r3, #3
 800edd6:	d018      	beq.n	800ee0a <__gethex+0x36a>
 800edd8:	2b01      	cmp	r3, #1
 800edda:	d109      	bne.n	800edf0 <__gethex+0x350>
 800eddc:	f01b 0f02 	tst.w	fp, #2
 800ede0:	d006      	beq.n	800edf0 <__gethex+0x350>
 800ede2:	f8da 3000 	ldr.w	r3, [sl]
 800ede6:	ea4b 0b03 	orr.w	fp, fp, r3
 800edea:	f01b 0f01 	tst.w	fp, #1
 800edee:	d10f      	bne.n	800ee10 <__gethex+0x370>
 800edf0:	f048 0810 	orr.w	r8, r8, #16
 800edf4:	e036      	b.n	800ee64 <__gethex+0x3c4>
 800edf6:	f04f 0b01 	mov.w	fp, #1
 800edfa:	e7d0      	b.n	800ed9e <__gethex+0x2fe>
 800edfc:	f04f 0801 	mov.w	r8, #1
 800ee00:	e7e2      	b.n	800edc8 <__gethex+0x328>
 800ee02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ee04:	f1c3 0301 	rsb	r3, r3, #1
 800ee08:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d0ef      	beq.n	800edf0 <__gethex+0x350>
 800ee10:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ee14:	f104 0214 	add.w	r2, r4, #20
 800ee18:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800ee1c:	9301      	str	r3, [sp, #4]
 800ee1e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800ee22:	2300      	movs	r3, #0
 800ee24:	4694      	mov	ip, r2
 800ee26:	f852 1b04 	ldr.w	r1, [r2], #4
 800ee2a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800ee2e:	d01e      	beq.n	800ee6e <__gethex+0x3ce>
 800ee30:	3101      	adds	r1, #1
 800ee32:	f8cc 1000 	str.w	r1, [ip]
 800ee36:	f1b8 0f02 	cmp.w	r8, #2
 800ee3a:	f104 0214 	add.w	r2, r4, #20
 800ee3e:	d13d      	bne.n	800eebc <__gethex+0x41c>
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	3b01      	subs	r3, #1
 800ee44:	42ab      	cmp	r3, r5
 800ee46:	d10b      	bne.n	800ee60 <__gethex+0x3c0>
 800ee48:	1169      	asrs	r1, r5, #5
 800ee4a:	2301      	movs	r3, #1
 800ee4c:	f005 051f 	and.w	r5, r5, #31
 800ee50:	fa03 f505 	lsl.w	r5, r3, r5
 800ee54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ee58:	421d      	tst	r5, r3
 800ee5a:	bf18      	it	ne
 800ee5c:	f04f 0801 	movne.w	r8, #1
 800ee60:	f048 0820 	orr.w	r8, r8, #32
 800ee64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ee66:	601c      	str	r4, [r3, #0]
 800ee68:	9b02      	ldr	r3, [sp, #8]
 800ee6a:	601e      	str	r6, [r3, #0]
 800ee6c:	e6a2      	b.n	800ebb4 <__gethex+0x114>
 800ee6e:	4290      	cmp	r0, r2
 800ee70:	f842 3c04 	str.w	r3, [r2, #-4]
 800ee74:	d8d6      	bhi.n	800ee24 <__gethex+0x384>
 800ee76:	68a2      	ldr	r2, [r4, #8]
 800ee78:	4593      	cmp	fp, r2
 800ee7a:	db17      	blt.n	800eeac <__gethex+0x40c>
 800ee7c:	6861      	ldr	r1, [r4, #4]
 800ee7e:	4648      	mov	r0, r9
 800ee80:	3101      	adds	r1, #1
 800ee82:	f7fd ff95 	bl	800cdb0 <_Balloc>
 800ee86:	4682      	mov	sl, r0
 800ee88:	b918      	cbnz	r0, 800ee92 <__gethex+0x3f2>
 800ee8a:	4b1b      	ldr	r3, [pc, #108]	; (800eef8 <__gethex+0x458>)
 800ee8c:	4602      	mov	r2, r0
 800ee8e:	2184      	movs	r1, #132	; 0x84
 800ee90:	e6b3      	b.n	800ebfa <__gethex+0x15a>
 800ee92:	6922      	ldr	r2, [r4, #16]
 800ee94:	3202      	adds	r2, #2
 800ee96:	f104 010c 	add.w	r1, r4, #12
 800ee9a:	0092      	lsls	r2, r2, #2
 800ee9c:	300c      	adds	r0, #12
 800ee9e:	f7ff fd4d 	bl	800e93c <memcpy>
 800eea2:	4621      	mov	r1, r4
 800eea4:	4648      	mov	r0, r9
 800eea6:	f7fd ffc3 	bl	800ce30 <_Bfree>
 800eeaa:	4654      	mov	r4, sl
 800eeac:	6922      	ldr	r2, [r4, #16]
 800eeae:	1c51      	adds	r1, r2, #1
 800eeb0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800eeb4:	6121      	str	r1, [r4, #16]
 800eeb6:	2101      	movs	r1, #1
 800eeb8:	6151      	str	r1, [r2, #20]
 800eeba:	e7bc      	b.n	800ee36 <__gethex+0x396>
 800eebc:	6921      	ldr	r1, [r4, #16]
 800eebe:	4559      	cmp	r1, fp
 800eec0:	dd0b      	ble.n	800eeda <__gethex+0x43a>
 800eec2:	2101      	movs	r1, #1
 800eec4:	4620      	mov	r0, r4
 800eec6:	f7ff fd83 	bl	800e9d0 <rshift>
 800eeca:	68bb      	ldr	r3, [r7, #8]
 800eecc:	3601      	adds	r6, #1
 800eece:	42b3      	cmp	r3, r6
 800eed0:	f6ff aedb 	blt.w	800ec8a <__gethex+0x1ea>
 800eed4:	f04f 0801 	mov.w	r8, #1
 800eed8:	e7c2      	b.n	800ee60 <__gethex+0x3c0>
 800eeda:	f015 051f 	ands.w	r5, r5, #31
 800eede:	d0f9      	beq.n	800eed4 <__gethex+0x434>
 800eee0:	9b01      	ldr	r3, [sp, #4]
 800eee2:	441a      	add	r2, r3
 800eee4:	f1c5 0520 	rsb	r5, r5, #32
 800eee8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800eeec:	f7fe f852 	bl	800cf94 <__hi0bits>
 800eef0:	42a8      	cmp	r0, r5
 800eef2:	dbe6      	blt.n	800eec2 <__gethex+0x422>
 800eef4:	e7ee      	b.n	800eed4 <__gethex+0x434>
 800eef6:	bf00      	nop
 800eef8:	0800f575 	.word	0x0800f575

0800eefc <L_shift>:
 800eefc:	f1c2 0208 	rsb	r2, r2, #8
 800ef00:	0092      	lsls	r2, r2, #2
 800ef02:	b570      	push	{r4, r5, r6, lr}
 800ef04:	f1c2 0620 	rsb	r6, r2, #32
 800ef08:	6843      	ldr	r3, [r0, #4]
 800ef0a:	6804      	ldr	r4, [r0, #0]
 800ef0c:	fa03 f506 	lsl.w	r5, r3, r6
 800ef10:	432c      	orrs	r4, r5
 800ef12:	40d3      	lsrs	r3, r2
 800ef14:	6004      	str	r4, [r0, #0]
 800ef16:	f840 3f04 	str.w	r3, [r0, #4]!
 800ef1a:	4288      	cmp	r0, r1
 800ef1c:	d3f4      	bcc.n	800ef08 <L_shift+0xc>
 800ef1e:	bd70      	pop	{r4, r5, r6, pc}

0800ef20 <__match>:
 800ef20:	b530      	push	{r4, r5, lr}
 800ef22:	6803      	ldr	r3, [r0, #0]
 800ef24:	3301      	adds	r3, #1
 800ef26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef2a:	b914      	cbnz	r4, 800ef32 <__match+0x12>
 800ef2c:	6003      	str	r3, [r0, #0]
 800ef2e:	2001      	movs	r0, #1
 800ef30:	bd30      	pop	{r4, r5, pc}
 800ef32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef36:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ef3a:	2d19      	cmp	r5, #25
 800ef3c:	bf98      	it	ls
 800ef3e:	3220      	addls	r2, #32
 800ef40:	42a2      	cmp	r2, r4
 800ef42:	d0f0      	beq.n	800ef26 <__match+0x6>
 800ef44:	2000      	movs	r0, #0
 800ef46:	e7f3      	b.n	800ef30 <__match+0x10>

0800ef48 <__hexnan>:
 800ef48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef4c:	680b      	ldr	r3, [r1, #0]
 800ef4e:	6801      	ldr	r1, [r0, #0]
 800ef50:	115e      	asrs	r6, r3, #5
 800ef52:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ef56:	f013 031f 	ands.w	r3, r3, #31
 800ef5a:	b087      	sub	sp, #28
 800ef5c:	bf18      	it	ne
 800ef5e:	3604      	addne	r6, #4
 800ef60:	2500      	movs	r5, #0
 800ef62:	1f37      	subs	r7, r6, #4
 800ef64:	4682      	mov	sl, r0
 800ef66:	4690      	mov	r8, r2
 800ef68:	9301      	str	r3, [sp, #4]
 800ef6a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ef6e:	46b9      	mov	r9, r7
 800ef70:	463c      	mov	r4, r7
 800ef72:	9502      	str	r5, [sp, #8]
 800ef74:	46ab      	mov	fp, r5
 800ef76:	784a      	ldrb	r2, [r1, #1]
 800ef78:	1c4b      	adds	r3, r1, #1
 800ef7a:	9303      	str	r3, [sp, #12]
 800ef7c:	b342      	cbz	r2, 800efd0 <__hexnan+0x88>
 800ef7e:	4610      	mov	r0, r2
 800ef80:	9105      	str	r1, [sp, #20]
 800ef82:	9204      	str	r2, [sp, #16]
 800ef84:	f7ff fd76 	bl	800ea74 <__hexdig_fun>
 800ef88:	2800      	cmp	r0, #0
 800ef8a:	d14f      	bne.n	800f02c <__hexnan+0xe4>
 800ef8c:	9a04      	ldr	r2, [sp, #16]
 800ef8e:	9905      	ldr	r1, [sp, #20]
 800ef90:	2a20      	cmp	r2, #32
 800ef92:	d818      	bhi.n	800efc6 <__hexnan+0x7e>
 800ef94:	9b02      	ldr	r3, [sp, #8]
 800ef96:	459b      	cmp	fp, r3
 800ef98:	dd13      	ble.n	800efc2 <__hexnan+0x7a>
 800ef9a:	454c      	cmp	r4, r9
 800ef9c:	d206      	bcs.n	800efac <__hexnan+0x64>
 800ef9e:	2d07      	cmp	r5, #7
 800efa0:	dc04      	bgt.n	800efac <__hexnan+0x64>
 800efa2:	462a      	mov	r2, r5
 800efa4:	4649      	mov	r1, r9
 800efa6:	4620      	mov	r0, r4
 800efa8:	f7ff ffa8 	bl	800eefc <L_shift>
 800efac:	4544      	cmp	r4, r8
 800efae:	d950      	bls.n	800f052 <__hexnan+0x10a>
 800efb0:	2300      	movs	r3, #0
 800efb2:	f1a4 0904 	sub.w	r9, r4, #4
 800efb6:	f844 3c04 	str.w	r3, [r4, #-4]
 800efba:	f8cd b008 	str.w	fp, [sp, #8]
 800efbe:	464c      	mov	r4, r9
 800efc0:	461d      	mov	r5, r3
 800efc2:	9903      	ldr	r1, [sp, #12]
 800efc4:	e7d7      	b.n	800ef76 <__hexnan+0x2e>
 800efc6:	2a29      	cmp	r2, #41	; 0x29
 800efc8:	d155      	bne.n	800f076 <__hexnan+0x12e>
 800efca:	3102      	adds	r1, #2
 800efcc:	f8ca 1000 	str.w	r1, [sl]
 800efd0:	f1bb 0f00 	cmp.w	fp, #0
 800efd4:	d04f      	beq.n	800f076 <__hexnan+0x12e>
 800efd6:	454c      	cmp	r4, r9
 800efd8:	d206      	bcs.n	800efe8 <__hexnan+0xa0>
 800efda:	2d07      	cmp	r5, #7
 800efdc:	dc04      	bgt.n	800efe8 <__hexnan+0xa0>
 800efde:	462a      	mov	r2, r5
 800efe0:	4649      	mov	r1, r9
 800efe2:	4620      	mov	r0, r4
 800efe4:	f7ff ff8a 	bl	800eefc <L_shift>
 800efe8:	4544      	cmp	r4, r8
 800efea:	d934      	bls.n	800f056 <__hexnan+0x10e>
 800efec:	f1a8 0204 	sub.w	r2, r8, #4
 800eff0:	4623      	mov	r3, r4
 800eff2:	f853 1b04 	ldr.w	r1, [r3], #4
 800eff6:	f842 1f04 	str.w	r1, [r2, #4]!
 800effa:	429f      	cmp	r7, r3
 800effc:	d2f9      	bcs.n	800eff2 <__hexnan+0xaa>
 800effe:	1b3b      	subs	r3, r7, r4
 800f000:	f023 0303 	bic.w	r3, r3, #3
 800f004:	3304      	adds	r3, #4
 800f006:	3e03      	subs	r6, #3
 800f008:	3401      	adds	r4, #1
 800f00a:	42a6      	cmp	r6, r4
 800f00c:	bf38      	it	cc
 800f00e:	2304      	movcc	r3, #4
 800f010:	4443      	add	r3, r8
 800f012:	2200      	movs	r2, #0
 800f014:	f843 2b04 	str.w	r2, [r3], #4
 800f018:	429f      	cmp	r7, r3
 800f01a:	d2fb      	bcs.n	800f014 <__hexnan+0xcc>
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	b91b      	cbnz	r3, 800f028 <__hexnan+0xe0>
 800f020:	4547      	cmp	r7, r8
 800f022:	d126      	bne.n	800f072 <__hexnan+0x12a>
 800f024:	2301      	movs	r3, #1
 800f026:	603b      	str	r3, [r7, #0]
 800f028:	2005      	movs	r0, #5
 800f02a:	e025      	b.n	800f078 <__hexnan+0x130>
 800f02c:	3501      	adds	r5, #1
 800f02e:	2d08      	cmp	r5, #8
 800f030:	f10b 0b01 	add.w	fp, fp, #1
 800f034:	dd06      	ble.n	800f044 <__hexnan+0xfc>
 800f036:	4544      	cmp	r4, r8
 800f038:	d9c3      	bls.n	800efc2 <__hexnan+0x7a>
 800f03a:	2300      	movs	r3, #0
 800f03c:	f844 3c04 	str.w	r3, [r4, #-4]
 800f040:	2501      	movs	r5, #1
 800f042:	3c04      	subs	r4, #4
 800f044:	6822      	ldr	r2, [r4, #0]
 800f046:	f000 000f 	and.w	r0, r0, #15
 800f04a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f04e:	6020      	str	r0, [r4, #0]
 800f050:	e7b7      	b.n	800efc2 <__hexnan+0x7a>
 800f052:	2508      	movs	r5, #8
 800f054:	e7b5      	b.n	800efc2 <__hexnan+0x7a>
 800f056:	9b01      	ldr	r3, [sp, #4]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d0df      	beq.n	800f01c <__hexnan+0xd4>
 800f05c:	f1c3 0320 	rsb	r3, r3, #32
 800f060:	f04f 32ff 	mov.w	r2, #4294967295
 800f064:	40da      	lsrs	r2, r3
 800f066:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f06a:	4013      	ands	r3, r2
 800f06c:	f846 3c04 	str.w	r3, [r6, #-4]
 800f070:	e7d4      	b.n	800f01c <__hexnan+0xd4>
 800f072:	3f04      	subs	r7, #4
 800f074:	e7d2      	b.n	800f01c <__hexnan+0xd4>
 800f076:	2004      	movs	r0, #4
 800f078:	b007      	add	sp, #28
 800f07a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f07e <__ascii_mbtowc>:
 800f07e:	b082      	sub	sp, #8
 800f080:	b901      	cbnz	r1, 800f084 <__ascii_mbtowc+0x6>
 800f082:	a901      	add	r1, sp, #4
 800f084:	b142      	cbz	r2, 800f098 <__ascii_mbtowc+0x1a>
 800f086:	b14b      	cbz	r3, 800f09c <__ascii_mbtowc+0x1e>
 800f088:	7813      	ldrb	r3, [r2, #0]
 800f08a:	600b      	str	r3, [r1, #0]
 800f08c:	7812      	ldrb	r2, [r2, #0]
 800f08e:	1e10      	subs	r0, r2, #0
 800f090:	bf18      	it	ne
 800f092:	2001      	movne	r0, #1
 800f094:	b002      	add	sp, #8
 800f096:	4770      	bx	lr
 800f098:	4610      	mov	r0, r2
 800f09a:	e7fb      	b.n	800f094 <__ascii_mbtowc+0x16>
 800f09c:	f06f 0001 	mvn.w	r0, #1
 800f0a0:	e7f8      	b.n	800f094 <__ascii_mbtowc+0x16>

0800f0a2 <_realloc_r>:
 800f0a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0a6:	4680      	mov	r8, r0
 800f0a8:	4614      	mov	r4, r2
 800f0aa:	460e      	mov	r6, r1
 800f0ac:	b921      	cbnz	r1, 800f0b8 <_realloc_r+0x16>
 800f0ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0b2:	4611      	mov	r1, r2
 800f0b4:	f7fd bdf0 	b.w	800cc98 <_malloc_r>
 800f0b8:	b92a      	cbnz	r2, 800f0c6 <_realloc_r+0x24>
 800f0ba:	f7fd fd79 	bl	800cbb0 <_free_r>
 800f0be:	4625      	mov	r5, r4
 800f0c0:	4628      	mov	r0, r5
 800f0c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0c6:	f000 f842 	bl	800f14e <_malloc_usable_size_r>
 800f0ca:	4284      	cmp	r4, r0
 800f0cc:	4607      	mov	r7, r0
 800f0ce:	d802      	bhi.n	800f0d6 <_realloc_r+0x34>
 800f0d0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f0d4:	d812      	bhi.n	800f0fc <_realloc_r+0x5a>
 800f0d6:	4621      	mov	r1, r4
 800f0d8:	4640      	mov	r0, r8
 800f0da:	f7fd fddd 	bl	800cc98 <_malloc_r>
 800f0de:	4605      	mov	r5, r0
 800f0e0:	2800      	cmp	r0, #0
 800f0e2:	d0ed      	beq.n	800f0c0 <_realloc_r+0x1e>
 800f0e4:	42bc      	cmp	r4, r7
 800f0e6:	4622      	mov	r2, r4
 800f0e8:	4631      	mov	r1, r6
 800f0ea:	bf28      	it	cs
 800f0ec:	463a      	movcs	r2, r7
 800f0ee:	f7ff fc25 	bl	800e93c <memcpy>
 800f0f2:	4631      	mov	r1, r6
 800f0f4:	4640      	mov	r0, r8
 800f0f6:	f7fd fd5b 	bl	800cbb0 <_free_r>
 800f0fa:	e7e1      	b.n	800f0c0 <_realloc_r+0x1e>
 800f0fc:	4635      	mov	r5, r6
 800f0fe:	e7df      	b.n	800f0c0 <_realloc_r+0x1e>

0800f100 <__ascii_wctomb>:
 800f100:	b149      	cbz	r1, 800f116 <__ascii_wctomb+0x16>
 800f102:	2aff      	cmp	r2, #255	; 0xff
 800f104:	bf85      	ittet	hi
 800f106:	238a      	movhi	r3, #138	; 0x8a
 800f108:	6003      	strhi	r3, [r0, #0]
 800f10a:	700a      	strbls	r2, [r1, #0]
 800f10c:	f04f 30ff 	movhi.w	r0, #4294967295
 800f110:	bf98      	it	ls
 800f112:	2001      	movls	r0, #1
 800f114:	4770      	bx	lr
 800f116:	4608      	mov	r0, r1
 800f118:	4770      	bx	lr
	...

0800f11c <fiprintf>:
 800f11c:	b40e      	push	{r1, r2, r3}
 800f11e:	b503      	push	{r0, r1, lr}
 800f120:	4601      	mov	r1, r0
 800f122:	ab03      	add	r3, sp, #12
 800f124:	4805      	ldr	r0, [pc, #20]	; (800f13c <fiprintf+0x20>)
 800f126:	f853 2b04 	ldr.w	r2, [r3], #4
 800f12a:	6800      	ldr	r0, [r0, #0]
 800f12c:	9301      	str	r3, [sp, #4]
 800f12e:	f000 f83f 	bl	800f1b0 <_vfiprintf_r>
 800f132:	b002      	add	sp, #8
 800f134:	f85d eb04 	ldr.w	lr, [sp], #4
 800f138:	b003      	add	sp, #12
 800f13a:	4770      	bx	lr
 800f13c:	24000068 	.word	0x24000068

0800f140 <abort>:
 800f140:	b508      	push	{r3, lr}
 800f142:	2006      	movs	r0, #6
 800f144:	f000 f976 	bl	800f434 <raise>
 800f148:	2001      	movs	r0, #1
 800f14a:	f7f2 fc49 	bl	80019e0 <_exit>

0800f14e <_malloc_usable_size_r>:
 800f14e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f152:	1f18      	subs	r0, r3, #4
 800f154:	2b00      	cmp	r3, #0
 800f156:	bfbc      	itt	lt
 800f158:	580b      	ldrlt	r3, [r1, r0]
 800f15a:	18c0      	addlt	r0, r0, r3
 800f15c:	4770      	bx	lr

0800f15e <__sfputc_r>:
 800f15e:	6893      	ldr	r3, [r2, #8]
 800f160:	3b01      	subs	r3, #1
 800f162:	2b00      	cmp	r3, #0
 800f164:	b410      	push	{r4}
 800f166:	6093      	str	r3, [r2, #8]
 800f168:	da08      	bge.n	800f17c <__sfputc_r+0x1e>
 800f16a:	6994      	ldr	r4, [r2, #24]
 800f16c:	42a3      	cmp	r3, r4
 800f16e:	db01      	blt.n	800f174 <__sfputc_r+0x16>
 800f170:	290a      	cmp	r1, #10
 800f172:	d103      	bne.n	800f17c <__sfputc_r+0x1e>
 800f174:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f178:	f7fc be0b 	b.w	800bd92 <__swbuf_r>
 800f17c:	6813      	ldr	r3, [r2, #0]
 800f17e:	1c58      	adds	r0, r3, #1
 800f180:	6010      	str	r0, [r2, #0]
 800f182:	7019      	strb	r1, [r3, #0]
 800f184:	4608      	mov	r0, r1
 800f186:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f18a:	4770      	bx	lr

0800f18c <__sfputs_r>:
 800f18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f18e:	4606      	mov	r6, r0
 800f190:	460f      	mov	r7, r1
 800f192:	4614      	mov	r4, r2
 800f194:	18d5      	adds	r5, r2, r3
 800f196:	42ac      	cmp	r4, r5
 800f198:	d101      	bne.n	800f19e <__sfputs_r+0x12>
 800f19a:	2000      	movs	r0, #0
 800f19c:	e007      	b.n	800f1ae <__sfputs_r+0x22>
 800f19e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1a2:	463a      	mov	r2, r7
 800f1a4:	4630      	mov	r0, r6
 800f1a6:	f7ff ffda 	bl	800f15e <__sfputc_r>
 800f1aa:	1c43      	adds	r3, r0, #1
 800f1ac:	d1f3      	bne.n	800f196 <__sfputs_r+0xa>
 800f1ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f1b0 <_vfiprintf_r>:
 800f1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1b4:	460d      	mov	r5, r1
 800f1b6:	b09d      	sub	sp, #116	; 0x74
 800f1b8:	4614      	mov	r4, r2
 800f1ba:	4698      	mov	r8, r3
 800f1bc:	4606      	mov	r6, r0
 800f1be:	b118      	cbz	r0, 800f1c8 <_vfiprintf_r+0x18>
 800f1c0:	6a03      	ldr	r3, [r0, #32]
 800f1c2:	b90b      	cbnz	r3, 800f1c8 <_vfiprintf_r+0x18>
 800f1c4:	f7fc fd4c 	bl	800bc60 <__sinit>
 800f1c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f1ca:	07d9      	lsls	r1, r3, #31
 800f1cc:	d405      	bmi.n	800f1da <_vfiprintf_r+0x2a>
 800f1ce:	89ab      	ldrh	r3, [r5, #12]
 800f1d0:	059a      	lsls	r2, r3, #22
 800f1d2:	d402      	bmi.n	800f1da <_vfiprintf_r+0x2a>
 800f1d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f1d6:	f7fc feed 	bl	800bfb4 <__retarget_lock_acquire_recursive>
 800f1da:	89ab      	ldrh	r3, [r5, #12]
 800f1dc:	071b      	lsls	r3, r3, #28
 800f1de:	d501      	bpl.n	800f1e4 <_vfiprintf_r+0x34>
 800f1e0:	692b      	ldr	r3, [r5, #16]
 800f1e2:	b99b      	cbnz	r3, 800f20c <_vfiprintf_r+0x5c>
 800f1e4:	4629      	mov	r1, r5
 800f1e6:	4630      	mov	r0, r6
 800f1e8:	f7fc fe10 	bl	800be0c <__swsetup_r>
 800f1ec:	b170      	cbz	r0, 800f20c <_vfiprintf_r+0x5c>
 800f1ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f1f0:	07dc      	lsls	r4, r3, #31
 800f1f2:	d504      	bpl.n	800f1fe <_vfiprintf_r+0x4e>
 800f1f4:	f04f 30ff 	mov.w	r0, #4294967295
 800f1f8:	b01d      	add	sp, #116	; 0x74
 800f1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1fe:	89ab      	ldrh	r3, [r5, #12]
 800f200:	0598      	lsls	r0, r3, #22
 800f202:	d4f7      	bmi.n	800f1f4 <_vfiprintf_r+0x44>
 800f204:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f206:	f7fc fed6 	bl	800bfb6 <__retarget_lock_release_recursive>
 800f20a:	e7f3      	b.n	800f1f4 <_vfiprintf_r+0x44>
 800f20c:	2300      	movs	r3, #0
 800f20e:	9309      	str	r3, [sp, #36]	; 0x24
 800f210:	2320      	movs	r3, #32
 800f212:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f216:	f8cd 800c 	str.w	r8, [sp, #12]
 800f21a:	2330      	movs	r3, #48	; 0x30
 800f21c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f3d0 <_vfiprintf_r+0x220>
 800f220:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f224:	f04f 0901 	mov.w	r9, #1
 800f228:	4623      	mov	r3, r4
 800f22a:	469a      	mov	sl, r3
 800f22c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f230:	b10a      	cbz	r2, 800f236 <_vfiprintf_r+0x86>
 800f232:	2a25      	cmp	r2, #37	; 0x25
 800f234:	d1f9      	bne.n	800f22a <_vfiprintf_r+0x7a>
 800f236:	ebba 0b04 	subs.w	fp, sl, r4
 800f23a:	d00b      	beq.n	800f254 <_vfiprintf_r+0xa4>
 800f23c:	465b      	mov	r3, fp
 800f23e:	4622      	mov	r2, r4
 800f240:	4629      	mov	r1, r5
 800f242:	4630      	mov	r0, r6
 800f244:	f7ff ffa2 	bl	800f18c <__sfputs_r>
 800f248:	3001      	adds	r0, #1
 800f24a:	f000 80a9 	beq.w	800f3a0 <_vfiprintf_r+0x1f0>
 800f24e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f250:	445a      	add	r2, fp
 800f252:	9209      	str	r2, [sp, #36]	; 0x24
 800f254:	f89a 3000 	ldrb.w	r3, [sl]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	f000 80a1 	beq.w	800f3a0 <_vfiprintf_r+0x1f0>
 800f25e:	2300      	movs	r3, #0
 800f260:	f04f 32ff 	mov.w	r2, #4294967295
 800f264:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f268:	f10a 0a01 	add.w	sl, sl, #1
 800f26c:	9304      	str	r3, [sp, #16]
 800f26e:	9307      	str	r3, [sp, #28]
 800f270:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f274:	931a      	str	r3, [sp, #104]	; 0x68
 800f276:	4654      	mov	r4, sl
 800f278:	2205      	movs	r2, #5
 800f27a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f27e:	4854      	ldr	r0, [pc, #336]	; (800f3d0 <_vfiprintf_r+0x220>)
 800f280:	f7f1 f82e 	bl	80002e0 <memchr>
 800f284:	9a04      	ldr	r2, [sp, #16]
 800f286:	b9d8      	cbnz	r0, 800f2c0 <_vfiprintf_r+0x110>
 800f288:	06d1      	lsls	r1, r2, #27
 800f28a:	bf44      	itt	mi
 800f28c:	2320      	movmi	r3, #32
 800f28e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f292:	0713      	lsls	r3, r2, #28
 800f294:	bf44      	itt	mi
 800f296:	232b      	movmi	r3, #43	; 0x2b
 800f298:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f29c:	f89a 3000 	ldrb.w	r3, [sl]
 800f2a0:	2b2a      	cmp	r3, #42	; 0x2a
 800f2a2:	d015      	beq.n	800f2d0 <_vfiprintf_r+0x120>
 800f2a4:	9a07      	ldr	r2, [sp, #28]
 800f2a6:	4654      	mov	r4, sl
 800f2a8:	2000      	movs	r0, #0
 800f2aa:	f04f 0c0a 	mov.w	ip, #10
 800f2ae:	4621      	mov	r1, r4
 800f2b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f2b4:	3b30      	subs	r3, #48	; 0x30
 800f2b6:	2b09      	cmp	r3, #9
 800f2b8:	d94d      	bls.n	800f356 <_vfiprintf_r+0x1a6>
 800f2ba:	b1b0      	cbz	r0, 800f2ea <_vfiprintf_r+0x13a>
 800f2bc:	9207      	str	r2, [sp, #28]
 800f2be:	e014      	b.n	800f2ea <_vfiprintf_r+0x13a>
 800f2c0:	eba0 0308 	sub.w	r3, r0, r8
 800f2c4:	fa09 f303 	lsl.w	r3, r9, r3
 800f2c8:	4313      	orrs	r3, r2
 800f2ca:	9304      	str	r3, [sp, #16]
 800f2cc:	46a2      	mov	sl, r4
 800f2ce:	e7d2      	b.n	800f276 <_vfiprintf_r+0xc6>
 800f2d0:	9b03      	ldr	r3, [sp, #12]
 800f2d2:	1d19      	adds	r1, r3, #4
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	9103      	str	r1, [sp, #12]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	bfbb      	ittet	lt
 800f2dc:	425b      	neglt	r3, r3
 800f2de:	f042 0202 	orrlt.w	r2, r2, #2
 800f2e2:	9307      	strge	r3, [sp, #28]
 800f2e4:	9307      	strlt	r3, [sp, #28]
 800f2e6:	bfb8      	it	lt
 800f2e8:	9204      	strlt	r2, [sp, #16]
 800f2ea:	7823      	ldrb	r3, [r4, #0]
 800f2ec:	2b2e      	cmp	r3, #46	; 0x2e
 800f2ee:	d10c      	bne.n	800f30a <_vfiprintf_r+0x15a>
 800f2f0:	7863      	ldrb	r3, [r4, #1]
 800f2f2:	2b2a      	cmp	r3, #42	; 0x2a
 800f2f4:	d134      	bne.n	800f360 <_vfiprintf_r+0x1b0>
 800f2f6:	9b03      	ldr	r3, [sp, #12]
 800f2f8:	1d1a      	adds	r2, r3, #4
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	9203      	str	r2, [sp, #12]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	bfb8      	it	lt
 800f302:	f04f 33ff 	movlt.w	r3, #4294967295
 800f306:	3402      	adds	r4, #2
 800f308:	9305      	str	r3, [sp, #20]
 800f30a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f3e0 <_vfiprintf_r+0x230>
 800f30e:	7821      	ldrb	r1, [r4, #0]
 800f310:	2203      	movs	r2, #3
 800f312:	4650      	mov	r0, sl
 800f314:	f7f0 ffe4 	bl	80002e0 <memchr>
 800f318:	b138      	cbz	r0, 800f32a <_vfiprintf_r+0x17a>
 800f31a:	9b04      	ldr	r3, [sp, #16]
 800f31c:	eba0 000a 	sub.w	r0, r0, sl
 800f320:	2240      	movs	r2, #64	; 0x40
 800f322:	4082      	lsls	r2, r0
 800f324:	4313      	orrs	r3, r2
 800f326:	3401      	adds	r4, #1
 800f328:	9304      	str	r3, [sp, #16]
 800f32a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f32e:	4829      	ldr	r0, [pc, #164]	; (800f3d4 <_vfiprintf_r+0x224>)
 800f330:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f334:	2206      	movs	r2, #6
 800f336:	f7f0 ffd3 	bl	80002e0 <memchr>
 800f33a:	2800      	cmp	r0, #0
 800f33c:	d03f      	beq.n	800f3be <_vfiprintf_r+0x20e>
 800f33e:	4b26      	ldr	r3, [pc, #152]	; (800f3d8 <_vfiprintf_r+0x228>)
 800f340:	bb1b      	cbnz	r3, 800f38a <_vfiprintf_r+0x1da>
 800f342:	9b03      	ldr	r3, [sp, #12]
 800f344:	3307      	adds	r3, #7
 800f346:	f023 0307 	bic.w	r3, r3, #7
 800f34a:	3308      	adds	r3, #8
 800f34c:	9303      	str	r3, [sp, #12]
 800f34e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f350:	443b      	add	r3, r7
 800f352:	9309      	str	r3, [sp, #36]	; 0x24
 800f354:	e768      	b.n	800f228 <_vfiprintf_r+0x78>
 800f356:	fb0c 3202 	mla	r2, ip, r2, r3
 800f35a:	460c      	mov	r4, r1
 800f35c:	2001      	movs	r0, #1
 800f35e:	e7a6      	b.n	800f2ae <_vfiprintf_r+0xfe>
 800f360:	2300      	movs	r3, #0
 800f362:	3401      	adds	r4, #1
 800f364:	9305      	str	r3, [sp, #20]
 800f366:	4619      	mov	r1, r3
 800f368:	f04f 0c0a 	mov.w	ip, #10
 800f36c:	4620      	mov	r0, r4
 800f36e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f372:	3a30      	subs	r2, #48	; 0x30
 800f374:	2a09      	cmp	r2, #9
 800f376:	d903      	bls.n	800f380 <_vfiprintf_r+0x1d0>
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d0c6      	beq.n	800f30a <_vfiprintf_r+0x15a>
 800f37c:	9105      	str	r1, [sp, #20]
 800f37e:	e7c4      	b.n	800f30a <_vfiprintf_r+0x15a>
 800f380:	fb0c 2101 	mla	r1, ip, r1, r2
 800f384:	4604      	mov	r4, r0
 800f386:	2301      	movs	r3, #1
 800f388:	e7f0      	b.n	800f36c <_vfiprintf_r+0x1bc>
 800f38a:	ab03      	add	r3, sp, #12
 800f38c:	9300      	str	r3, [sp, #0]
 800f38e:	462a      	mov	r2, r5
 800f390:	4b12      	ldr	r3, [pc, #72]	; (800f3dc <_vfiprintf_r+0x22c>)
 800f392:	a904      	add	r1, sp, #16
 800f394:	4630      	mov	r0, r6
 800f396:	f7fb fe3b 	bl	800b010 <_printf_float>
 800f39a:	4607      	mov	r7, r0
 800f39c:	1c78      	adds	r0, r7, #1
 800f39e:	d1d6      	bne.n	800f34e <_vfiprintf_r+0x19e>
 800f3a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f3a2:	07d9      	lsls	r1, r3, #31
 800f3a4:	d405      	bmi.n	800f3b2 <_vfiprintf_r+0x202>
 800f3a6:	89ab      	ldrh	r3, [r5, #12]
 800f3a8:	059a      	lsls	r2, r3, #22
 800f3aa:	d402      	bmi.n	800f3b2 <_vfiprintf_r+0x202>
 800f3ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f3ae:	f7fc fe02 	bl	800bfb6 <__retarget_lock_release_recursive>
 800f3b2:	89ab      	ldrh	r3, [r5, #12]
 800f3b4:	065b      	lsls	r3, r3, #25
 800f3b6:	f53f af1d 	bmi.w	800f1f4 <_vfiprintf_r+0x44>
 800f3ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f3bc:	e71c      	b.n	800f1f8 <_vfiprintf_r+0x48>
 800f3be:	ab03      	add	r3, sp, #12
 800f3c0:	9300      	str	r3, [sp, #0]
 800f3c2:	462a      	mov	r2, r5
 800f3c4:	4b05      	ldr	r3, [pc, #20]	; (800f3dc <_vfiprintf_r+0x22c>)
 800f3c6:	a904      	add	r1, sp, #16
 800f3c8:	4630      	mov	r0, r6
 800f3ca:	f7fc f8a9 	bl	800b520 <_printf_i>
 800f3ce:	e7e4      	b.n	800f39a <_vfiprintf_r+0x1ea>
 800f3d0:	0800f831 	.word	0x0800f831
 800f3d4:	0800f83b 	.word	0x0800f83b
 800f3d8:	0800b011 	.word	0x0800b011
 800f3dc:	0800f18d 	.word	0x0800f18d
 800f3e0:	0800f837 	.word	0x0800f837

0800f3e4 <_raise_r>:
 800f3e4:	291f      	cmp	r1, #31
 800f3e6:	b538      	push	{r3, r4, r5, lr}
 800f3e8:	4604      	mov	r4, r0
 800f3ea:	460d      	mov	r5, r1
 800f3ec:	d904      	bls.n	800f3f8 <_raise_r+0x14>
 800f3ee:	2316      	movs	r3, #22
 800f3f0:	6003      	str	r3, [r0, #0]
 800f3f2:	f04f 30ff 	mov.w	r0, #4294967295
 800f3f6:	bd38      	pop	{r3, r4, r5, pc}
 800f3f8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f3fa:	b112      	cbz	r2, 800f402 <_raise_r+0x1e>
 800f3fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f400:	b94b      	cbnz	r3, 800f416 <_raise_r+0x32>
 800f402:	4620      	mov	r0, r4
 800f404:	f000 f830 	bl	800f468 <_getpid_r>
 800f408:	462a      	mov	r2, r5
 800f40a:	4601      	mov	r1, r0
 800f40c:	4620      	mov	r0, r4
 800f40e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f412:	f000 b817 	b.w	800f444 <_kill_r>
 800f416:	2b01      	cmp	r3, #1
 800f418:	d00a      	beq.n	800f430 <_raise_r+0x4c>
 800f41a:	1c59      	adds	r1, r3, #1
 800f41c:	d103      	bne.n	800f426 <_raise_r+0x42>
 800f41e:	2316      	movs	r3, #22
 800f420:	6003      	str	r3, [r0, #0]
 800f422:	2001      	movs	r0, #1
 800f424:	e7e7      	b.n	800f3f6 <_raise_r+0x12>
 800f426:	2400      	movs	r4, #0
 800f428:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f42c:	4628      	mov	r0, r5
 800f42e:	4798      	blx	r3
 800f430:	2000      	movs	r0, #0
 800f432:	e7e0      	b.n	800f3f6 <_raise_r+0x12>

0800f434 <raise>:
 800f434:	4b02      	ldr	r3, [pc, #8]	; (800f440 <raise+0xc>)
 800f436:	4601      	mov	r1, r0
 800f438:	6818      	ldr	r0, [r3, #0]
 800f43a:	f7ff bfd3 	b.w	800f3e4 <_raise_r>
 800f43e:	bf00      	nop
 800f440:	24000068 	.word	0x24000068

0800f444 <_kill_r>:
 800f444:	b538      	push	{r3, r4, r5, lr}
 800f446:	4d07      	ldr	r5, [pc, #28]	; (800f464 <_kill_r+0x20>)
 800f448:	2300      	movs	r3, #0
 800f44a:	4604      	mov	r4, r0
 800f44c:	4608      	mov	r0, r1
 800f44e:	4611      	mov	r1, r2
 800f450:	602b      	str	r3, [r5, #0]
 800f452:	f7f2 fab5 	bl	80019c0 <_kill>
 800f456:	1c43      	adds	r3, r0, #1
 800f458:	d102      	bne.n	800f460 <_kill_r+0x1c>
 800f45a:	682b      	ldr	r3, [r5, #0]
 800f45c:	b103      	cbz	r3, 800f460 <_kill_r+0x1c>
 800f45e:	6023      	str	r3, [r4, #0]
 800f460:	bd38      	pop	{r3, r4, r5, pc}
 800f462:	bf00      	nop
 800f464:	24000670 	.word	0x24000670

0800f468 <_getpid_r>:
 800f468:	f7f2 baa2 	b.w	80019b0 <_getpid>

0800f46c <_init>:
 800f46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f46e:	bf00      	nop
 800f470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f472:	bc08      	pop	{r3}
 800f474:	469e      	mov	lr, r3
 800f476:	4770      	bx	lr

0800f478 <_fini>:
 800f478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f47a:	bf00      	nop
 800f47c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f47e:	bc08      	pop	{r3}
 800f480:	469e      	mov	lr, r3
 800f482:	4770      	bx	lr
