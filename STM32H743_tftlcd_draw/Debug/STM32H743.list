
STM32H743.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .sram_data1   00000000  c0000000  c0000000  000301dc  2**0
                  CONTENTS
  1 .sram_data2   00000000  c0200000  c0200000  000301dc  2**0
                  CONTENTS
  2 .sram_data3   00000000  c0800000  c0800000  000301dc  2**0
                  CONTENTS
  3 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .text         0000fcfc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       00000460  0800ffa0  0800ffa0  0001ffa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM          00000008  08010400  08010400  00020400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .init_array   00000004  08010408  08010408  00020408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801040c  0801040c  0002040c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000001dc  24000000  08010410  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000004d4  240001dc  080105ec  000301dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  240006b0  080105ec  000306b0  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0003020a  2**0
                  CONTENTS, READONLY
 14 .debug_info   00021407  00000000  00000000  0003024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004381  00000000  00000000  00051654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000019b8  00000000  00000000  000559d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000013e0  00000000  00000000  00057390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003be47  00000000  00000000  00058770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00024bac  00000000  00000000  000945b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0016f570  00000000  00000000  000b9163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007f38  00000000  00000000  002286d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  0023060c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001dc 	.word	0x240001dc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ff84 	.word	0x0800ff84

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e0 	.word	0x240001e0
 80002dc:	0800ff84 	.word	0x0800ff84

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a8 	b.w	8000a70 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9e08      	ldr	r6, [sp, #32]
 80007ae:	460d      	mov	r5, r1
 80007b0:	4604      	mov	r4, r0
 80007b2:	460f      	mov	r7, r1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d14a      	bne.n	800084e <__udivmoddi4+0xa6>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4694      	mov	ip, r2
 80007bc:	d965      	bls.n	800088a <__udivmoddi4+0xe2>
 80007be:	fab2 f382 	clz	r3, r2
 80007c2:	b143      	cbz	r3, 80007d6 <__udivmoddi4+0x2e>
 80007c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007c8:	f1c3 0220 	rsb	r2, r3, #32
 80007cc:	409f      	lsls	r7, r3
 80007ce:	fa20 f202 	lsr.w	r2, r0, r2
 80007d2:	4317      	orrs	r7, r2
 80007d4:	409c      	lsls	r4, r3
 80007d6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80007da:	fa1f f58c 	uxth.w	r5, ip
 80007de:	fbb7 f1fe 	udiv	r1, r7, lr
 80007e2:	0c22      	lsrs	r2, r4, #16
 80007e4:	fb0e 7711 	mls	r7, lr, r1, r7
 80007e8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80007ec:	fb01 f005 	mul.w	r0, r1, r5
 80007f0:	4290      	cmp	r0, r2
 80007f2:	d90a      	bls.n	800080a <__udivmoddi4+0x62>
 80007f4:	eb1c 0202 	adds.w	r2, ip, r2
 80007f8:	f101 37ff 	add.w	r7, r1, #4294967295
 80007fc:	f080 811c 	bcs.w	8000a38 <__udivmoddi4+0x290>
 8000800:	4290      	cmp	r0, r2
 8000802:	f240 8119 	bls.w	8000a38 <__udivmoddi4+0x290>
 8000806:	3902      	subs	r1, #2
 8000808:	4462      	add	r2, ip
 800080a:	1a12      	subs	r2, r2, r0
 800080c:	b2a4      	uxth	r4, r4
 800080e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000812:	fb0e 2210 	mls	r2, lr, r0, r2
 8000816:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800081a:	fb00 f505 	mul.w	r5, r0, r5
 800081e:	42a5      	cmp	r5, r4
 8000820:	d90a      	bls.n	8000838 <__udivmoddi4+0x90>
 8000822:	eb1c 0404 	adds.w	r4, ip, r4
 8000826:	f100 32ff 	add.w	r2, r0, #4294967295
 800082a:	f080 8107 	bcs.w	8000a3c <__udivmoddi4+0x294>
 800082e:	42a5      	cmp	r5, r4
 8000830:	f240 8104 	bls.w	8000a3c <__udivmoddi4+0x294>
 8000834:	4464      	add	r4, ip
 8000836:	3802      	subs	r0, #2
 8000838:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800083c:	1b64      	subs	r4, r4, r5
 800083e:	2100      	movs	r1, #0
 8000840:	b11e      	cbz	r6, 800084a <__udivmoddi4+0xa2>
 8000842:	40dc      	lsrs	r4, r3
 8000844:	2300      	movs	r3, #0
 8000846:	e9c6 4300 	strd	r4, r3, [r6]
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	428b      	cmp	r3, r1
 8000850:	d908      	bls.n	8000864 <__udivmoddi4+0xbc>
 8000852:	2e00      	cmp	r6, #0
 8000854:	f000 80ed 	beq.w	8000a32 <__udivmoddi4+0x28a>
 8000858:	2100      	movs	r1, #0
 800085a:	e9c6 0500 	strd	r0, r5, [r6]
 800085e:	4608      	mov	r0, r1
 8000860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000864:	fab3 f183 	clz	r1, r3
 8000868:	2900      	cmp	r1, #0
 800086a:	d149      	bne.n	8000900 <__udivmoddi4+0x158>
 800086c:	42ab      	cmp	r3, r5
 800086e:	d302      	bcc.n	8000876 <__udivmoddi4+0xce>
 8000870:	4282      	cmp	r2, r0
 8000872:	f200 80f8 	bhi.w	8000a66 <__udivmoddi4+0x2be>
 8000876:	1a84      	subs	r4, r0, r2
 8000878:	eb65 0203 	sbc.w	r2, r5, r3
 800087c:	2001      	movs	r0, #1
 800087e:	4617      	mov	r7, r2
 8000880:	2e00      	cmp	r6, #0
 8000882:	d0e2      	beq.n	800084a <__udivmoddi4+0xa2>
 8000884:	e9c6 4700 	strd	r4, r7, [r6]
 8000888:	e7df      	b.n	800084a <__udivmoddi4+0xa2>
 800088a:	b902      	cbnz	r2, 800088e <__udivmoddi4+0xe6>
 800088c:	deff      	udf	#255	; 0xff
 800088e:	fab2 f382 	clz	r3, r2
 8000892:	2b00      	cmp	r3, #0
 8000894:	f040 8090 	bne.w	80009b8 <__udivmoddi4+0x210>
 8000898:	1a8a      	subs	r2, r1, r2
 800089a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800089e:	fa1f fe8c 	uxth.w	lr, ip
 80008a2:	2101      	movs	r1, #1
 80008a4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008a8:	fb07 2015 	mls	r0, r7, r5, r2
 80008ac:	0c22      	lsrs	r2, r4, #16
 80008ae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008b2:	fb0e f005 	mul.w	r0, lr, r5
 80008b6:	4290      	cmp	r0, r2
 80008b8:	d908      	bls.n	80008cc <__udivmoddi4+0x124>
 80008ba:	eb1c 0202 	adds.w	r2, ip, r2
 80008be:	f105 38ff 	add.w	r8, r5, #4294967295
 80008c2:	d202      	bcs.n	80008ca <__udivmoddi4+0x122>
 80008c4:	4290      	cmp	r0, r2
 80008c6:	f200 80cb 	bhi.w	8000a60 <__udivmoddi4+0x2b8>
 80008ca:	4645      	mov	r5, r8
 80008cc:	1a12      	subs	r2, r2, r0
 80008ce:	b2a4      	uxth	r4, r4
 80008d0:	fbb2 f0f7 	udiv	r0, r2, r7
 80008d4:	fb07 2210 	mls	r2, r7, r0, r2
 80008d8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008dc:	fb0e fe00 	mul.w	lr, lr, r0
 80008e0:	45a6      	cmp	lr, r4
 80008e2:	d908      	bls.n	80008f6 <__udivmoddi4+0x14e>
 80008e4:	eb1c 0404 	adds.w	r4, ip, r4
 80008e8:	f100 32ff 	add.w	r2, r0, #4294967295
 80008ec:	d202      	bcs.n	80008f4 <__udivmoddi4+0x14c>
 80008ee:	45a6      	cmp	lr, r4
 80008f0:	f200 80bb 	bhi.w	8000a6a <__udivmoddi4+0x2c2>
 80008f4:	4610      	mov	r0, r2
 80008f6:	eba4 040e 	sub.w	r4, r4, lr
 80008fa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80008fe:	e79f      	b.n	8000840 <__udivmoddi4+0x98>
 8000900:	f1c1 0720 	rsb	r7, r1, #32
 8000904:	408b      	lsls	r3, r1
 8000906:	fa22 fc07 	lsr.w	ip, r2, r7
 800090a:	ea4c 0c03 	orr.w	ip, ip, r3
 800090e:	fa05 f401 	lsl.w	r4, r5, r1
 8000912:	fa20 f307 	lsr.w	r3, r0, r7
 8000916:	40fd      	lsrs	r5, r7
 8000918:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800091c:	4323      	orrs	r3, r4
 800091e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000922:	fa1f fe8c 	uxth.w	lr, ip
 8000926:	fb09 5518 	mls	r5, r9, r8, r5
 800092a:	0c1c      	lsrs	r4, r3, #16
 800092c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000930:	fb08 f50e 	mul.w	r5, r8, lr
 8000934:	42a5      	cmp	r5, r4
 8000936:	fa02 f201 	lsl.w	r2, r2, r1
 800093a:	fa00 f001 	lsl.w	r0, r0, r1
 800093e:	d90b      	bls.n	8000958 <__udivmoddi4+0x1b0>
 8000940:	eb1c 0404 	adds.w	r4, ip, r4
 8000944:	f108 3aff 	add.w	sl, r8, #4294967295
 8000948:	f080 8088 	bcs.w	8000a5c <__udivmoddi4+0x2b4>
 800094c:	42a5      	cmp	r5, r4
 800094e:	f240 8085 	bls.w	8000a5c <__udivmoddi4+0x2b4>
 8000952:	f1a8 0802 	sub.w	r8, r8, #2
 8000956:	4464      	add	r4, ip
 8000958:	1b64      	subs	r4, r4, r5
 800095a:	b29d      	uxth	r5, r3
 800095c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000960:	fb09 4413 	mls	r4, r9, r3, r4
 8000964:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000968:	fb03 fe0e 	mul.w	lr, r3, lr
 800096c:	45a6      	cmp	lr, r4
 800096e:	d908      	bls.n	8000982 <__udivmoddi4+0x1da>
 8000970:	eb1c 0404 	adds.w	r4, ip, r4
 8000974:	f103 35ff 	add.w	r5, r3, #4294967295
 8000978:	d26c      	bcs.n	8000a54 <__udivmoddi4+0x2ac>
 800097a:	45a6      	cmp	lr, r4
 800097c:	d96a      	bls.n	8000a54 <__udivmoddi4+0x2ac>
 800097e:	3b02      	subs	r3, #2
 8000980:	4464      	add	r4, ip
 8000982:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000986:	fba3 9502 	umull	r9, r5, r3, r2
 800098a:	eba4 040e 	sub.w	r4, r4, lr
 800098e:	42ac      	cmp	r4, r5
 8000990:	46c8      	mov	r8, r9
 8000992:	46ae      	mov	lr, r5
 8000994:	d356      	bcc.n	8000a44 <__udivmoddi4+0x29c>
 8000996:	d053      	beq.n	8000a40 <__udivmoddi4+0x298>
 8000998:	b156      	cbz	r6, 80009b0 <__udivmoddi4+0x208>
 800099a:	ebb0 0208 	subs.w	r2, r0, r8
 800099e:	eb64 040e 	sbc.w	r4, r4, lr
 80009a2:	fa04 f707 	lsl.w	r7, r4, r7
 80009a6:	40ca      	lsrs	r2, r1
 80009a8:	40cc      	lsrs	r4, r1
 80009aa:	4317      	orrs	r7, r2
 80009ac:	e9c6 7400 	strd	r7, r4, [r6]
 80009b0:	4618      	mov	r0, r3
 80009b2:	2100      	movs	r1, #0
 80009b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b8:	f1c3 0120 	rsb	r1, r3, #32
 80009bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80009c0:	fa20 f201 	lsr.w	r2, r0, r1
 80009c4:	fa25 f101 	lsr.w	r1, r5, r1
 80009c8:	409d      	lsls	r5, r3
 80009ca:	432a      	orrs	r2, r5
 80009cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d0:	fa1f fe8c 	uxth.w	lr, ip
 80009d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009d8:	fb07 1510 	mls	r5, r7, r0, r1
 80009dc:	0c11      	lsrs	r1, r2, #16
 80009de:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80009e2:	fb00 f50e 	mul.w	r5, r0, lr
 80009e6:	428d      	cmp	r5, r1
 80009e8:	fa04 f403 	lsl.w	r4, r4, r3
 80009ec:	d908      	bls.n	8000a00 <__udivmoddi4+0x258>
 80009ee:	eb1c 0101 	adds.w	r1, ip, r1
 80009f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80009f6:	d22f      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 80009f8:	428d      	cmp	r5, r1
 80009fa:	d92d      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 80009fc:	3802      	subs	r0, #2
 80009fe:	4461      	add	r1, ip
 8000a00:	1b49      	subs	r1, r1, r5
 8000a02:	b292      	uxth	r2, r2
 8000a04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a08:	fb07 1115 	mls	r1, r7, r5, r1
 8000a0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a10:	fb05 f10e 	mul.w	r1, r5, lr
 8000a14:	4291      	cmp	r1, r2
 8000a16:	d908      	bls.n	8000a2a <__udivmoddi4+0x282>
 8000a18:	eb1c 0202 	adds.w	r2, ip, r2
 8000a1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a20:	d216      	bcs.n	8000a50 <__udivmoddi4+0x2a8>
 8000a22:	4291      	cmp	r1, r2
 8000a24:	d914      	bls.n	8000a50 <__udivmoddi4+0x2a8>
 8000a26:	3d02      	subs	r5, #2
 8000a28:	4462      	add	r2, ip
 8000a2a:	1a52      	subs	r2, r2, r1
 8000a2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a30:	e738      	b.n	80008a4 <__udivmoddi4+0xfc>
 8000a32:	4631      	mov	r1, r6
 8000a34:	4630      	mov	r0, r6
 8000a36:	e708      	b.n	800084a <__udivmoddi4+0xa2>
 8000a38:	4639      	mov	r1, r7
 8000a3a:	e6e6      	b.n	800080a <__udivmoddi4+0x62>
 8000a3c:	4610      	mov	r0, r2
 8000a3e:	e6fb      	b.n	8000838 <__udivmoddi4+0x90>
 8000a40:	4548      	cmp	r0, r9
 8000a42:	d2a9      	bcs.n	8000998 <__udivmoddi4+0x1f0>
 8000a44:	ebb9 0802 	subs.w	r8, r9, r2
 8000a48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	e7a3      	b.n	8000998 <__udivmoddi4+0x1f0>
 8000a50:	4645      	mov	r5, r8
 8000a52:	e7ea      	b.n	8000a2a <__udivmoddi4+0x282>
 8000a54:	462b      	mov	r3, r5
 8000a56:	e794      	b.n	8000982 <__udivmoddi4+0x1da>
 8000a58:	4640      	mov	r0, r8
 8000a5a:	e7d1      	b.n	8000a00 <__udivmoddi4+0x258>
 8000a5c:	46d0      	mov	r8, sl
 8000a5e:	e77b      	b.n	8000958 <__udivmoddi4+0x1b0>
 8000a60:	3d02      	subs	r5, #2
 8000a62:	4462      	add	r2, ip
 8000a64:	e732      	b.n	80008cc <__udivmoddi4+0x124>
 8000a66:	4608      	mov	r0, r1
 8000a68:	e70a      	b.n	8000880 <__udivmoddi4+0xd8>
 8000a6a:	4464      	add	r4, ip
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	e742      	b.n	80008f6 <__udivmoddi4+0x14e>

08000a70 <__aeabi_idiv0>:
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a78:	f001 f944 	bl	8001d04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a7c:	f000 f824 	bl	8000ac8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a80:	f000 fabe 	bl	8001000 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000a84:	f000 f982 	bl	8000d8c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000a88:	f000 f9ce 	bl	8000e28 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a8c:	f000 fa1a 	bl	8000ec4 <MX_USART2_UART_Init>
  MX_FMC_Init();
 8000a90:	f000 fa64 	bl	8000f5c <MX_FMC_Init>
  MX_LTDC_Init();
 8000a94:	f000 f8cc 	bl	8000c30 <MX_LTDC_Init>
  MX_DMA2D_Init();
 8000a98:	f000 f890 	bl	8000bbc <MX_DMA2D_Init>
  MX_QUADSPI_Init();
 8000a9c:	f000 f94a 	bl	8000d34 <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */
  log_com_uart_init();
 8000aa0:	f00a ff68 	bl	800b974 <log_com_uart_init>
  user_delay_init(400);
 8000aa4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000aa8:	f00a feba 	bl	800b820 <user_delay_init>
//  printf("STM32H743 SDRAM Test \r\n");

  SDRAM_Init();
 8000aac:	f00a fb68 	bl	800b180 <SDRAM_Init>
//      printf("SDRAM Test success\r\n");
//  } else {
//      printf("SDRAM Test fail\r\n");
//  }

  W25QXX_Init();
 8000ab0:	f00a fa68 	bl	800af84 <W25QXX_Init>
  touch_init();
 8000ab4:	f00a fea2 	bl	800b7fc <touch_init>
  TFTLCD_clear(WHITE);
 8000ab8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000abc:	f009 fe8a 	bl	800a7d4 <TFTLCD_clear>
//	  HAL_Delay(1000);
//	  test_spi_flash();
//	  test_picture_show();
//	  TFTLCD_test();
//	  touch_test();
	  tft_lcd_draw();
 8000ac0:	f00a f80a 	bl	800aad8 <tft_lcd_draw>
 8000ac4:	e7fc      	b.n	8000ac0 <main+0x4c>
	...

08000ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b09c      	sub	sp, #112	; 0x70
 8000acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad2:	224c      	movs	r2, #76	; 0x4c
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f00b ff7c 	bl	800c9d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	2220      	movs	r2, #32
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f00b ff76 	bl	800c9d4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ae8:	2002      	movs	r0, #2
 8000aea:	f002 ffa7 	bl	8003a3c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aee:	2300      	movs	r3, #0
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	4b30      	ldr	r3, [pc, #192]	; (8000bb4 <SystemClock_Config+0xec>)
 8000af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af6:	4a2f      	ldr	r2, [pc, #188]	; (8000bb4 <SystemClock_Config+0xec>)
 8000af8:	f023 0301 	bic.w	r3, r3, #1
 8000afc:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000afe:	4b2d      	ldr	r3, [pc, #180]	; (8000bb4 <SystemClock_Config+0xec>)
 8000b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	4b2b      	ldr	r3, [pc, #172]	; (8000bb8 <SystemClock_Config+0xf0>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	4a2a      	ldr	r2, [pc, #168]	; (8000bb8 <SystemClock_Config+0xf0>)
 8000b0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b12:	6193      	str	r3, [r2, #24]
 8000b14:	4b28      	ldr	r3, [pc, #160]	; (8000bb8 <SystemClock_Config+0xf0>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b20:	bf00      	nop
 8000b22:	4b25      	ldr	r3, [pc, #148]	; (8000bb8 <SystemClock_Config+0xf0>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b2e:	d1f8      	bne.n	8000b22 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b30:	2301      	movs	r3, #1
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b38:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000b42:	2302      	movs	r3, #2
 8000b44:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000b46:	2340      	movs	r3, #64	; 0x40
 8000b48:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b52:	2302      	movs	r3, #2
 8000b54:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b56:	230c      	movs	r3, #12
 8000b58:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b66:	4618      	mov	r0, r3
 8000b68:	f003 fb6e 	bl	8004248 <HAL_RCC_OscConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b72:	f000 fb61 	bl	8001238 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b76:	233f      	movs	r3, #63	; 0x3f
 8000b78:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b82:	2308      	movs	r3, #8
 8000b84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b86:	2340      	movs	r3, #64	; 0x40
 8000b88:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b8a:	2340      	movs	r3, #64	; 0x40
 8000b8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b92:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b94:	2340      	movs	r3, #64	; 0x40
 8000b96:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	2102      	movs	r1, #2
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f003 ffad 	bl	8004afc <HAL_RCC_ClockConfig>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000ba8:	f000 fb46 	bl	8001238 <Error_Handler>
  }
}
 8000bac:	bf00      	nop
 8000bae:	3770      	adds	r7, #112	; 0x70
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	58000400 	.word	0x58000400
 8000bb8:	58024800 	.word	0x58024800

08000bbc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000bc0:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <MX_DMA2D_Init+0x6c>)
 8000bc2:	4a1a      	ldr	r2, [pc, #104]	; (8000c2c <MX_DMA2D_Init+0x70>)
 8000bc4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000bc6:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <MX_DMA2D_Init+0x6c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000bcc:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <MX_DMA2D_Init+0x6c>)
 8000bce:	2202      	movs	r2, #2
 8000bd0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <MX_DMA2D_Init+0x6c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000bd8:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <MX_DMA2D_Init+0x6c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000bde:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <MX_DMA2D_Init+0x6c>)
 8000be0:	2202      	movs	r2, #2
 8000be2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000be4:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <MX_DMA2D_Init+0x6c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <MX_DMA2D_Init+0x6c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000bf0:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <MX_DMA2D_Init+0x6c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <MX_DMA2D_Init+0x6c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <MX_DMA2D_Init+0x6c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000c02:	4809      	ldr	r0, [pc, #36]	; (8000c28 <MX_DMA2D_Init+0x6c>)
 8000c04:	f001 ffac 	bl	8002b60 <HAL_DMA2D_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000c0e:	f000 fb13 	bl	8001238 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000c12:	2101      	movs	r1, #1
 8000c14:	4804      	ldr	r0, [pc, #16]	; (8000c28 <MX_DMA2D_Init+0x6c>)
 8000c16:	f002 f917 	bl	8002e48 <HAL_DMA2D_ConfigLayer>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8000c20:	f000 fb0a 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	240001f8 	.word	0x240001f8
 8000c2c:	52001000 	.word	0x52001000

08000c30 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08e      	sub	sp, #56	; 0x38
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	2234      	movs	r2, #52	; 0x34
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f00b fec9 	bl	800c9d4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000c42:	4b3a      	ldr	r3, [pc, #232]	; (8000d2c <MX_LTDC_Init+0xfc>)
 8000c44:	4a3a      	ldr	r2, [pc, #232]	; (8000d30 <MX_LTDC_Init+0x100>)
 8000c46:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c48:	4b38      	ldr	r3, [pc, #224]	; (8000d2c <MX_LTDC_Init+0xfc>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000c4e:	4b37      	ldr	r3, [pc, #220]	; (8000d2c <MX_LTDC_Init+0xfc>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c54:	4b35      	ldr	r3, [pc, #212]	; (8000d2c <MX_LTDC_Init+0xfc>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c5a:	4b34      	ldr	r3, [pc, #208]	; (8000d2c <MX_LTDC_Init+0xfc>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 19;
 8000c60:	4b32      	ldr	r3, [pc, #200]	; (8000d2c <MX_LTDC_Init+0xfc>)
 8000c62:	2213      	movs	r2, #19
 8000c64:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 2;
 8000c66:	4b31      	ldr	r3, [pc, #196]	; (8000d2c <MX_LTDC_Init+0xfc>)
 8000c68:	2202      	movs	r2, #2
 8000c6a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 159;
 8000c6c:	4b2f      	ldr	r3, [pc, #188]	; (8000d2c <MX_LTDC_Init+0xfc>)
 8000c6e:	229f      	movs	r2, #159	; 0x9f
 8000c70:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 22;
 8000c72:	4b2e      	ldr	r3, [pc, #184]	; (8000d2c <MX_LTDC_Init+0xfc>)
 8000c74:	2216      	movs	r2, #22
 8000c76:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 1183;
 8000c78:	4b2c      	ldr	r3, [pc, #176]	; (8000d2c <MX_LTDC_Init+0xfc>)
 8000c7a:	f240 429f 	movw	r2, #1183	; 0x49f
 8000c7e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 622;
 8000c80:	4b2a      	ldr	r3, [pc, #168]	; (8000d2c <MX_LTDC_Init+0xfc>)
 8000c82:	f240 226e 	movw	r2, #622	; 0x26e
 8000c86:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 1343;
 8000c88:	4b28      	ldr	r3, [pc, #160]	; (8000d2c <MX_LTDC_Init+0xfc>)
 8000c8a:	f240 523f 	movw	r2, #1343	; 0x53f
 8000c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 634;
 8000c90:	4b26      	ldr	r3, [pc, #152]	; (8000d2c <MX_LTDC_Init+0xfc>)
 8000c92:	f240 227a 	movw	r2, #634	; 0x27a
 8000c96:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000c98:	4b24      	ldr	r3, [pc, #144]	; (8000d2c <MX_LTDC_Init+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000ca0:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <MX_LTDC_Init+0xfc>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000ca8:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <MX_LTDC_Init+0xfc>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000cb0:	481e      	ldr	r0, [pc, #120]	; (8000d2c <MX_LTDC_Init+0xfc>)
 8000cb2:	f002 fb59 	bl	8003368 <HAL_LTDC_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000cbc:	f000 fabc 	bl	8001238 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 1024;
 8000cc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cc8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 600;
 8000cce:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000cd2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000cd8:	23ff      	movs	r3, #255	; 0xff
 8000cda:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000ce0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ce4:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000ce6:	2305      	movs	r3, #5
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000cea:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 1024;
 8000cf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 600;
 8000cf6:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000cfa:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	2200      	movs	r2, #0
 8000d12:	4619      	mov	r1, r3
 8000d14:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_LTDC_Init+0xfc>)
 8000d16:	f002 fcb9 	bl	800368c <HAL_LTDC_ConfigLayer>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000d20:	f000 fa8a 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000d24:	bf00      	nop
 8000d26:	3738      	adds	r7, #56	; 0x38
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	24000260 	.word	0x24000260
 8000d30:	50001000 	.word	0x50001000

08000d34 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <MX_QUADSPI_Init+0x50>)
 8000d3a:	4a13      	ldr	r2, [pc, #76]	; (8000d88 <MX_QUADSPI_Init+0x54>)
 8000d3c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_QUADSPI_Init+0x50>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <MX_QUADSPI_Init+0x50>)
 8000d46:	2204      	movs	r2, #4
 8000d48:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_QUADSPI_Init+0x50>)
 8000d4c:	2210      	movs	r2, #16
 8000d4e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <MX_QUADSPI_Init+0x50>)
 8000d52:	2218      	movs	r2, #24
 8000d54:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <MX_QUADSPI_Init+0x50>)
 8000d58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d5c:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <MX_QUADSPI_Init+0x50>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000d64:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <MX_QUADSPI_Init+0x50>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <MX_QUADSPI_Init+0x50>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000d70:	4804      	ldr	r0, [pc, #16]	; (8000d84 <MX_QUADSPI_Init+0x50>)
 8000d72:	f002 fe9d 	bl	8003ab0 <HAL_QSPI_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000d7c:	f000 fa5c 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	24000308 	.word	0x24000308
 8000d88:	52005000 	.word	0x52005000

08000d8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d92:	f107 0310 	add.w	r3, r7, #16
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000daa:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <MX_TIM3_Init+0x94>)
 8000dac:	4a1d      	ldr	r2, [pc, #116]	; (8000e24 <MX_TIM3_Init+0x98>)
 8000dae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000db0:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <MX_TIM3_Init+0x94>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db6:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <MX_TIM3_Init+0x94>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000dbc:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <MX_TIM3_Init+0x94>)
 8000dbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dc2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc4:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <MX_TIM3_Init+0x94>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <MX_TIM3_Init+0x94>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dd0:	4813      	ldr	r0, [pc, #76]	; (8000e20 <MX_TIM3_Init+0x94>)
 8000dd2:	f006 f8e4 	bl	8006f9e <HAL_TIM_Base_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000ddc:	f000 fa2c 	bl	8001238 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000de6:	f107 0310 	add.w	r3, r7, #16
 8000dea:	4619      	mov	r1, r3
 8000dec:	480c      	ldr	r0, [pc, #48]	; (8000e20 <MX_TIM3_Init+0x94>)
 8000dee:	f006 fa4d 	bl	800728c <HAL_TIM_ConfigClockSource>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000df8:	f000 fa1e 	bl	8001238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	4619      	mov	r1, r3
 8000e08:	4805      	ldr	r0, [pc, #20]	; (8000e20 <MX_TIM3_Init+0x94>)
 8000e0a:	f006 fca1 	bl	8007750 <HAL_TIMEx_MasterConfigSynchronization>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000e14:	f000 fa10 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	3720      	adds	r7, #32
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	24000354 	.word	0x24000354
 8000e24:	40000400 	.word	0x40000400

08000e28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e2c:	4b22      	ldr	r3, [pc, #136]	; (8000eb8 <MX_USART1_UART_Init+0x90>)
 8000e2e:	4a23      	ldr	r2, [pc, #140]	; (8000ebc <MX_USART1_UART_Init+0x94>)
 8000e30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8000e32:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <MX_USART1_UART_Init+0x90>)
 8000e34:	4a22      	ldr	r2, [pc, #136]	; (8000ec0 <MX_USART1_UART_Init+0x98>)
 8000e36:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e38:	4b1f      	ldr	r3, [pc, #124]	; (8000eb8 <MX_USART1_UART_Init+0x90>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e3e:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <MX_USART1_UART_Init+0x90>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e44:	4b1c      	ldr	r3, [pc, #112]	; (8000eb8 <MX_USART1_UART_Init+0x90>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e4a:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <MX_USART1_UART_Init+0x90>)
 8000e4c:	220c      	movs	r2, #12
 8000e4e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e50:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <MX_USART1_UART_Init+0x90>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e56:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <MX_USART1_UART_Init+0x90>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e5c:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <MX_USART1_UART_Init+0x90>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <MX_USART1_UART_Init+0x90>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e68:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <MX_USART1_UART_Init+0x90>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e6e:	4812      	ldr	r0, [pc, #72]	; (8000eb8 <MX_USART1_UART_Init+0x90>)
 8000e70:	f006 fd1a 	bl	80078a8 <HAL_UART_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8000e7a:	f000 f9dd 	bl	8001238 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e7e:	2100      	movs	r1, #0
 8000e80:	480d      	ldr	r0, [pc, #52]	; (8000eb8 <MX_USART1_UART_Init+0x90>)
 8000e82:	f009 faa4 	bl	800a3ce <HAL_UARTEx_SetTxFifoThreshold>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8000e8c:	f000 f9d4 	bl	8001238 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e90:	2100      	movs	r1, #0
 8000e92:	4809      	ldr	r0, [pc, #36]	; (8000eb8 <MX_USART1_UART_Init+0x90>)
 8000e94:	f009 fad9 	bl	800a44a <HAL_UARTEx_SetRxFifoThreshold>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000e9e:	f000 f9cb 	bl	8001238 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <MX_USART1_UART_Init+0x90>)
 8000ea4:	f009 fa5a 	bl	800a35c <HAL_UARTEx_DisableFifoMode>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000eae:	f000 f9c3 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	240003a0 	.word	0x240003a0
 8000ebc:	40011000 	.word	0x40011000
 8000ec0:	001e8480 	.word	0x001e8480

08000ec4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ec8:	4b22      	ldr	r3, [pc, #136]	; (8000f54 <MX_USART2_UART_Init+0x90>)
 8000eca:	4a23      	ldr	r2, [pc, #140]	; (8000f58 <MX_USART2_UART_Init+0x94>)
 8000ecc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ece:	4b21      	ldr	r3, [pc, #132]	; (8000f54 <MX_USART2_UART_Init+0x90>)
 8000ed0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ed4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed6:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <MX_USART2_UART_Init+0x90>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000edc:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <MX_USART2_UART_Init+0x90>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ee2:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <MX_USART2_UART_Init+0x90>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <MX_USART2_UART_Init+0x90>)
 8000eea:	220c      	movs	r2, #12
 8000eec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eee:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <MX_USART2_UART_Init+0x90>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef4:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <MX_USART2_UART_Init+0x90>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000efa:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <MX_USART2_UART_Init+0x90>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f00:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <MX_USART2_UART_Init+0x90>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f06:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <MX_USART2_UART_Init+0x90>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f0c:	4811      	ldr	r0, [pc, #68]	; (8000f54 <MX_USART2_UART_Init+0x90>)
 8000f0e:	f006 fccb 	bl	80078a8 <HAL_UART_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000f18:	f000 f98e 	bl	8001238 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	480d      	ldr	r0, [pc, #52]	; (8000f54 <MX_USART2_UART_Init+0x90>)
 8000f20:	f009 fa55 	bl	800a3ce <HAL_UARTEx_SetTxFifoThreshold>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000f2a:	f000 f985 	bl	8001238 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4808      	ldr	r0, [pc, #32]	; (8000f54 <MX_USART2_UART_Init+0x90>)
 8000f32:	f009 fa8a 	bl	800a44a <HAL_UARTEx_SetRxFifoThreshold>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000f3c:	f000 f97c 	bl	8001238 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000f40:	4804      	ldr	r0, [pc, #16]	; (8000f54 <MX_USART2_UART_Init+0x90>)
 8000f42:	f009 fa0b 	bl	800a35c <HAL_UARTEx_DisableFifoMode>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000f4c:	f000 f974 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	24000434 	.word	0x24000434
 8000f58:	40004400 	.word	0x40004400

08000f5c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
 8000f70:	615a      	str	r2, [r3, #20]
 8000f72:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f74:	4b20      	ldr	r3, [pc, #128]	; (8000ff8 <MX_FMC_Init+0x9c>)
 8000f76:	4a21      	ldr	r2, [pc, #132]	; (8000ffc <MX_FMC_Init+0xa0>)
 8000f78:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000f7a:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <MX_FMC_Init+0x9c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000f80:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <MX_FMC_Init+0x9c>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000f86:	4b1c      	ldr	r3, [pc, #112]	; (8000ff8 <MX_FMC_Init+0x9c>)
 8000f88:	2208      	movs	r2, #8
 8000f8a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000f8c:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <MX_FMC_Init+0x9c>)
 8000f8e:	2210      	movs	r2, #16
 8000f90:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000f92:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <MX_FMC_Init+0x9c>)
 8000f94:	2240      	movs	r2, #64	; 0x40
 8000f96:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000f98:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <MX_FMC_Init+0x9c>)
 8000f9a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000f9e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000fa0:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <MX_FMC_Init+0x9c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000fa6:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <MX_FMC_Init+0x9c>)
 8000fa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fac:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000fae:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <MX_FMC_Init+0x9c>)
 8000fb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fb4:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <MX_FMC_Init+0x9c>)
 8000fb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fbc:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 8;
 8000fc2:	2308      	movs	r3, #8
 8000fc4:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 6;
 8000fc6:	2306      	movs	r3, #6
 8000fc8:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8000fca:	2306      	movs	r3, #6
 8000fcc:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 6;
 8000fce:	2306      	movs	r3, #6
 8000fd0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4806      	ldr	r0, [pc, #24]	; (8000ff8 <MX_FMC_Init+0x9c>)
 8000fe0:	f005 ff44 	bl	8006e6c <HAL_SDRAM_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_FMC_Init+0x92>
  {
    Error_Handler( );
 8000fea:	f000 f925 	bl	8001238 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000fee:	bf00      	nop
 8000ff0:	3720      	adds	r7, #32
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	240004c8 	.word	0x240004c8
 8000ffc:	52004140 	.word	0x52004140

08001000 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08e      	sub	sp, #56	; 0x38
 8001004:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001016:	4b83      	ldr	r3, [pc, #524]	; (8001224 <MX_GPIO_Init+0x224>)
 8001018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101c:	4a81      	ldr	r2, [pc, #516]	; (8001224 <MX_GPIO_Init+0x224>)
 800101e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001022:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001026:	4b7f      	ldr	r3, [pc, #508]	; (8001224 <MX_GPIO_Init+0x224>)
 8001028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001030:	623b      	str	r3, [r7, #32]
 8001032:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001034:	4b7b      	ldr	r3, [pc, #492]	; (8001224 <MX_GPIO_Init+0x224>)
 8001036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103a:	4a7a      	ldr	r2, [pc, #488]	; (8001224 <MX_GPIO_Init+0x224>)
 800103c:	f043 0304 	orr.w	r3, r3, #4
 8001040:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001044:	4b77      	ldr	r3, [pc, #476]	; (8001224 <MX_GPIO_Init+0x224>)
 8001046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104a:	f003 0304 	and.w	r3, r3, #4
 800104e:	61fb      	str	r3, [r7, #28]
 8001050:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001052:	4b74      	ldr	r3, [pc, #464]	; (8001224 <MX_GPIO_Init+0x224>)
 8001054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001058:	4a72      	ldr	r2, [pc, #456]	; (8001224 <MX_GPIO_Init+0x224>)
 800105a:	f043 0320 	orr.w	r3, r3, #32
 800105e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001062:	4b70      	ldr	r3, [pc, #448]	; (8001224 <MX_GPIO_Init+0x224>)
 8001064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001068:	f003 0320 	and.w	r3, r3, #32
 800106c:	61bb      	str	r3, [r7, #24]
 800106e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001070:	4b6c      	ldr	r3, [pc, #432]	; (8001224 <MX_GPIO_Init+0x224>)
 8001072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001076:	4a6b      	ldr	r2, [pc, #428]	; (8001224 <MX_GPIO_Init+0x224>)
 8001078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800107c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001080:	4b68      	ldr	r3, [pc, #416]	; (8001224 <MX_GPIO_Init+0x224>)
 8001082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	4b65      	ldr	r3, [pc, #404]	; (8001224 <MX_GPIO_Init+0x224>)
 8001090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001094:	4a63      	ldr	r2, [pc, #396]	; (8001224 <MX_GPIO_Init+0x224>)
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800109e:	4b61      	ldr	r3, [pc, #388]	; (8001224 <MX_GPIO_Init+0x224>)
 80010a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ac:	4b5d      	ldr	r3, [pc, #372]	; (8001224 <MX_GPIO_Init+0x224>)
 80010ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b2:	4a5c      	ldr	r2, [pc, #368]	; (8001224 <MX_GPIO_Init+0x224>)
 80010b4:	f043 0302 	orr.w	r3, r3, #2
 80010b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010bc:	4b59      	ldr	r3, [pc, #356]	; (8001224 <MX_GPIO_Init+0x224>)
 80010be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ca:	4b56      	ldr	r3, [pc, #344]	; (8001224 <MX_GPIO_Init+0x224>)
 80010cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d0:	4a54      	ldr	r2, [pc, #336]	; (8001224 <MX_GPIO_Init+0x224>)
 80010d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010da:	4b52      	ldr	r3, [pc, #328]	; (8001224 <MX_GPIO_Init+0x224>)
 80010dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010e8:	4b4e      	ldr	r3, [pc, #312]	; (8001224 <MX_GPIO_Init+0x224>)
 80010ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ee:	4a4d      	ldr	r2, [pc, #308]	; (8001224 <MX_GPIO_Init+0x224>)
 80010f0:	f043 0310 	orr.w	r3, r3, #16
 80010f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010f8:	4b4a      	ldr	r3, [pc, #296]	; (8001224 <MX_GPIO_Init+0x224>)
 80010fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fe:	f003 0310 	and.w	r3, r3, #16
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001106:	4b47      	ldr	r3, [pc, #284]	; (8001224 <MX_GPIO_Init+0x224>)
 8001108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110c:	4a45      	ldr	r2, [pc, #276]	; (8001224 <MX_GPIO_Init+0x224>)
 800110e:	f043 0308 	orr.w	r3, r3, #8
 8001112:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001116:	4b43      	ldr	r3, [pc, #268]	; (8001224 <MX_GPIO_Init+0x224>)
 8001118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111c:	f003 0308 	and.w	r3, r3, #8
 8001120:	603b      	str	r3, [r7, #0]
 8001122:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, TP_CS_Pin|TP_SDA_Pin, GPIO_PIN_SET);
 8001124:	2201      	movs	r2, #1
 8001126:	f44f 7184 	mov.w	r1, #264	; 0x108
 800112a:	483f      	ldr	r0, [pc, #252]	; (8001228 <MX_GPIO_Init+0x228>)
 800112c:	f002 f902 	bl	8003334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED0_Pin|LCD_BL_Pin, GPIO_PIN_SET);
 8001130:	2201      	movs	r2, #1
 8001132:	2123      	movs	r1, #35	; 0x23
 8001134:	483d      	ldr	r0, [pc, #244]	; (800122c <MX_GPIO_Init+0x22c>)
 8001136:	f002 f8fd 	bl	8003334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_SCK_GPIO_Port, TP_SCK_Pin, GPIO_PIN_SET);
 800113a:	2201      	movs	r2, #1
 800113c:	2140      	movs	r1, #64	; 0x40
 800113e:	483c      	ldr	r0, [pc, #240]	; (8001230 <MX_GPIO_Init+0x230>)
 8001140:	f002 f8f8 	bl	8003334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TP_CS_Pin */
  GPIO_InitStruct.Pin = TP_CS_Pin;
 8001144:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114a:	2301      	movs	r3, #1
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800114e:	2301      	movs	r3, #1
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TP_CS_GPIO_Port, &GPIO_InitStruct);
 8001156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115a:	4619      	mov	r1, r3
 800115c:	4832      	ldr	r0, [pc, #200]	; (8001228 <MX_GPIO_Init+0x228>)
 800115e:	f001 ff21 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY2_Pin */
  GPIO_InitStruct.Pin = KEY2_Pin;
 8001162:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001168:	2300      	movs	r3, #0
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800116c:	2301      	movs	r3, #1
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KEY2_GPIO_Port, &GPIO_InitStruct);
 8001170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001174:	4619      	mov	r1, r3
 8001176:	482f      	ldr	r0, [pc, #188]	; (8001234 <MX_GPIO_Init+0x234>)
 8001178:	f001 ff14 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY1_Pin KEY0_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY0_Pin;
 800117c:	230c      	movs	r3, #12
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001180:	2300      	movs	r3, #0
 8001182:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001184:	2301      	movs	r3, #1
 8001186:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118c:	4619      	mov	r1, r3
 800118e:	4828      	ldr	r0, [pc, #160]	; (8001230 <MX_GPIO_Init+0x230>)
 8001190:	f001 ff08 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED0_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED0_Pin;
 8001194:	2303      	movs	r3, #3
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001198:	2301      	movs	r3, #1
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800119c:	2301      	movs	r3, #1
 800119e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a0:	2302      	movs	r3, #2
 80011a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a8:	4619      	mov	r1, r3
 80011aa:	4820      	ldr	r0, [pc, #128]	; (800122c <MX_GPIO_Init+0x22c>)
 80011ac:	f001 fefa 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_SCK_Pin */
  GPIO_InitStruct.Pin = TP_SCK_Pin;
 80011b0:	2340      	movs	r3, #64	; 0x40
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b4:	2301      	movs	r3, #1
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b8:	2301      	movs	r3, #1
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011bc:	2302      	movs	r3, #2
 80011be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TP_SCK_GPIO_Port, &GPIO_InitStruct);
 80011c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c4:	4619      	mov	r1, r3
 80011c6:	481a      	ldr	r0, [pc, #104]	; (8001230 <MX_GPIO_Init+0x230>)
 80011c8:	f001 feec 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_PEN_Pin */
  GPIO_InitStruct.Pin = TP_PEN_Pin;
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TP_PEN_GPIO_Port, &GPIO_InitStruct);
 80011d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011dc:	4619      	mov	r1, r3
 80011de:	4814      	ldr	r0, [pc, #80]	; (8001230 <MX_GPIO_Init+0x230>)
 80011e0:	f001 fee0 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_SDA_Pin */
  GPIO_InitStruct.Pin = TP_SDA_Pin;
 80011e4:	2308      	movs	r3, #8
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80011e8:	2311      	movs	r3, #17
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TP_SDA_GPIO_Port, &GPIO_InitStruct);
 80011f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f8:	4619      	mov	r1, r3
 80011fa:	480b      	ldr	r0, [pc, #44]	; (8001228 <MX_GPIO_Init+0x228>)
 80011fc:	f001 fed2 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8001200:	2320      	movs	r3, #32
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001204:	2301      	movs	r3, #1
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8001210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001214:	4619      	mov	r1, r3
 8001216:	4805      	ldr	r0, [pc, #20]	; (800122c <MX_GPIO_Init+0x22c>)
 8001218:	f001 fec4 	bl	8002fa4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800121c:	bf00      	nop
 800121e:	3738      	adds	r7, #56	; 0x38
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	58024400 	.word	0x58024400
 8001228:	58022000 	.word	0x58022000
 800122c:	58020400 	.word	0x58020400
 8001230:	58021c00 	.word	0x58021c00
 8001234:	58020800 	.word	0x58020800

08001238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800123c:	b672      	cpsid	i
}
 800123e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001240:	e7fe      	b.n	8001240 <Error_Handler+0x8>
	...

08001244 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124a:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <HAL_MspInit+0x30>)
 800124c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001250:	4a08      	ldr	r2, [pc, #32]	; (8001274 <HAL_MspInit+0x30>)
 8001252:	f043 0302 	orr.w	r3, r3, #2
 8001256:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_MspInit+0x30>)
 800125c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	58024400 	.word	0x58024400

08001278 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0e      	ldr	r2, [pc, #56]	; (80012c0 <HAL_DMA2D_MspInit+0x48>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d116      	bne.n	80012b8 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800128a:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <HAL_DMA2D_MspInit+0x4c>)
 800128c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001290:	4a0c      	ldr	r2, [pc, #48]	; (80012c4 <HAL_DMA2D_MspInit+0x4c>)
 8001292:	f043 0310 	orr.w	r3, r3, #16
 8001296:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800129a:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <HAL_DMA2D_MspInit+0x4c>)
 800129c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80012a0:	f003 0310 	and.w	r3, r3, #16
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2100      	movs	r1, #0
 80012ac:	205a      	movs	r0, #90	; 0x5a
 80012ae:	f000 fea2 	bl	8001ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80012b2:	205a      	movs	r0, #90	; 0x5a
 80012b4:	f000 feb9 	bl	800202a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80012b8:	bf00      	nop
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	52001000 	.word	0x52001000
 80012c4:	58024400 	.word	0x58024400

080012c8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b0be      	sub	sp, #248	; 0xf8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012e0:	f107 0320 	add.w	r3, r7, #32
 80012e4:	22c0      	movs	r2, #192	; 0xc0
 80012e6:	2100      	movs	r1, #0
 80012e8:	4618      	mov	r0, r3
 80012ea:	f00b fb73 	bl	800c9d4 <memset>
  if(hltdc->Instance==LTDC)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a6a      	ldr	r2, [pc, #424]	; (800149c <HAL_LTDC_MspInit+0x1d4>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	f040 80cd 	bne.w	8001494 <HAL_LTDC_MspInit+0x1cc>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80012fa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80012fe:	f04f 0300 	mov.w	r3, #0
 8001302:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8001306:	2320      	movs	r3, #32
 8001308:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 800130a:	23c0      	movs	r3, #192	; 0xc0
 800130c:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800130e:	2302      	movs	r3, #2
 8001310:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001312:	2302      	movs	r3, #2
 8001314:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 3;
 8001316:	2303      	movs	r3, #3
 8001318:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800131a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800131e:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001320:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001324:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800132a:	f107 0320 	add.w	r3, r7, #32
 800132e:	4618      	mov	r0, r3
 8001330:	f003 ff70 	bl	8005214 <HAL_RCCEx_PeriphCLKConfig>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 800133a:	f7ff ff7d 	bl	8001238 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800133e:	4b58      	ldr	r3, [pc, #352]	; (80014a0 <HAL_LTDC_MspInit+0x1d8>)
 8001340:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001344:	4a56      	ldr	r2, [pc, #344]	; (80014a0 <HAL_LTDC_MspInit+0x1d8>)
 8001346:	f043 0308 	orr.w	r3, r3, #8
 800134a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800134e:	4b54      	ldr	r3, [pc, #336]	; (80014a0 <HAL_LTDC_MspInit+0x1d8>)
 8001350:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001354:	f003 0308 	and.w	r3, r3, #8
 8001358:	61fb      	str	r3, [r7, #28]
 800135a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800135c:	4b50      	ldr	r3, [pc, #320]	; (80014a0 <HAL_LTDC_MspInit+0x1d8>)
 800135e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001362:	4a4f      	ldr	r2, [pc, #316]	; (80014a0 <HAL_LTDC_MspInit+0x1d8>)
 8001364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001368:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800136c:	4b4c      	ldr	r3, [pc, #304]	; (80014a0 <HAL_LTDC_MspInit+0x1d8>)
 800136e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001376:	61bb      	str	r3, [r7, #24]
 8001378:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800137a:	4b49      	ldr	r3, [pc, #292]	; (80014a0 <HAL_LTDC_MspInit+0x1d8>)
 800137c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001380:	4a47      	ldr	r2, [pc, #284]	; (80014a0 <HAL_LTDC_MspInit+0x1d8>)
 8001382:	f043 0320 	orr.w	r3, r3, #32
 8001386:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800138a:	4b45      	ldr	r3, [pc, #276]	; (80014a0 <HAL_LTDC_MspInit+0x1d8>)
 800138c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001390:	f003 0320 	and.w	r3, r3, #32
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001398:	4b41      	ldr	r3, [pc, #260]	; (80014a0 <HAL_LTDC_MspInit+0x1d8>)
 800139a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800139e:	4a40      	ldr	r2, [pc, #256]	; (80014a0 <HAL_LTDC_MspInit+0x1d8>)
 80013a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013a8:	4b3d      	ldr	r3, [pc, #244]	; (80014a0 <HAL_LTDC_MspInit+0x1d8>)
 80013aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013b6:	4b3a      	ldr	r3, [pc, #232]	; (80014a0 <HAL_LTDC_MspInit+0x1d8>)
 80013b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013bc:	4a38      	ldr	r2, [pc, #224]	; (80014a0 <HAL_LTDC_MspInit+0x1d8>)
 80013be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013c6:	4b36      	ldr	r3, [pc, #216]	; (80014a0 <HAL_LTDC_MspInit+0x1d8>)
 80013c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]
    PI4     ------> LTDC_B4
    PI5     ------> LTDC_B5
    PI6     ------> LTDC_B6
    PI7     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1
 80013d4:	f240 63f7 	movw	r3, #1783	; 0x6f7
 80013d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013dc:	2302      	movs	r3, #2
 80013de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e8:	2303      	movs	r3, #3
 80013ea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013ee:	230e      	movs	r3, #14
 80013f0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013f4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80013f8:	4619      	mov	r1, r3
 80013fa:	482a      	ldr	r0, [pc, #168]	; (80014a4 <HAL_LTDC_MspInit+0x1dc>)
 80013fc:	f001 fdd2 	bl	8002fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001400:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001404:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800141a:	230e      	movs	r3, #14
 800141c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001420:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001424:	4619      	mov	r1, r3
 8001426:	4820      	ldr	r0, [pc, #128]	; (80014a8 <HAL_LTDC_MspInit+0x1e0>)
 8001428:	f001 fdbc 	bl	8002fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 800142c:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8001430:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001440:	2303      	movs	r3, #3
 8001442:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001446:	230e      	movs	r3, #14
 8001448:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800144c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001450:	4619      	mov	r1, r3
 8001452:	4816      	ldr	r0, [pc, #88]	; (80014ac <HAL_LTDC_MspInit+0x1e4>)
 8001454:	f001 fda6 	bl	8002fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8001458:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800145c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001460:	2302      	movs	r3, #2
 8001462:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146c:	2303      	movs	r3, #3
 800146e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001472:	230e      	movs	r3, #14
 8001474:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001478:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800147c:	4619      	mov	r1, r3
 800147e:	480c      	ldr	r0, [pc, #48]	; (80014b0 <HAL_LTDC_MspInit+0x1e8>)
 8001480:	f001 fd90 	bl	8002fa4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 1, 0);
 8001484:	2200      	movs	r2, #0
 8001486:	2101      	movs	r1, #1
 8001488:	2058      	movs	r0, #88	; 0x58
 800148a:	f000 fdb4 	bl	8001ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800148e:	2058      	movs	r0, #88	; 0x58
 8001490:	f000 fdcb 	bl	800202a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001494:	bf00      	nop
 8001496:	37f8      	adds	r7, #248	; 0xf8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	50001000 	.word	0x50001000
 80014a0:	58024400 	.word	0x58024400
 80014a4:	58022000 	.word	0x58022000
 80014a8:	58021400 	.word	0x58021400
 80014ac:	58021c00 	.word	0x58021c00
 80014b0:	58021800 	.word	0x58021800

080014b4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b0bc      	sub	sp, #240	; 0xf0
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014cc:	f107 0318 	add.w	r3, r7, #24
 80014d0:	22c0      	movs	r2, #192	; 0xc0
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f00b fa7d 	bl	800c9d4 <memset>
  if(hqspi->Instance==QUADSPI)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a4e      	ldr	r2, [pc, #312]	; (8001618 <HAL_QSPI_MspInit+0x164>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	f040 8094 	bne.w	800160e <HAL_QSPI_MspInit+0x15a>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80014e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014ea:	f04f 0300 	mov.w	r3, #0
 80014ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80014f2:	2300      	movs	r3, #0
 80014f4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014f6:	f107 0318 	add.w	r3, r7, #24
 80014fa:	4618      	mov	r0, r3
 80014fc:	f003 fe8a 	bl	8005214 <HAL_RCCEx_PeriphCLKConfig>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8001506:	f7ff fe97 	bl	8001238 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800150a:	4b44      	ldr	r3, [pc, #272]	; (800161c <HAL_QSPI_MspInit+0x168>)
 800150c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001510:	4a42      	ldr	r2, [pc, #264]	; (800161c <HAL_QSPI_MspInit+0x168>)
 8001512:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001516:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800151a:	4b40      	ldr	r3, [pc, #256]	; (800161c <HAL_QSPI_MspInit+0x168>)
 800151c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001520:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001528:	4b3c      	ldr	r3, [pc, #240]	; (800161c <HAL_QSPI_MspInit+0x168>)
 800152a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152e:	4a3b      	ldr	r2, [pc, #236]	; (800161c <HAL_QSPI_MspInit+0x168>)
 8001530:	f043 0320 	orr.w	r3, r3, #32
 8001534:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001538:	4b38      	ldr	r3, [pc, #224]	; (800161c <HAL_QSPI_MspInit+0x168>)
 800153a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153e:	f003 0320 	and.w	r3, r3, #32
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001546:	4b35      	ldr	r3, [pc, #212]	; (800161c <HAL_QSPI_MspInit+0x168>)
 8001548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154c:	4a33      	ldr	r2, [pc, #204]	; (800161c <HAL_QSPI_MspInit+0x168>)
 800154e:	f043 0302 	orr.w	r3, r3, #2
 8001552:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001556:	4b31      	ldr	r3, [pc, #196]	; (800161c <HAL_QSPI_MspInit+0x168>)
 8001558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	68fb      	ldr	r3, [r7, #12]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001564:	23c0      	movs	r3, #192	; 0xc0
 8001566:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001576:	2303      	movs	r3, #3
 8001578:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800157c:	2309      	movs	r3, #9
 800157e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001582:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001586:	4619      	mov	r1, r3
 8001588:	4825      	ldr	r0, [pc, #148]	; (8001620 <HAL_QSPI_MspInit+0x16c>)
 800158a:	f001 fd0b 	bl	8002fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800158e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001592:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001596:	2302      	movs	r3, #2
 8001598:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a2:	2303      	movs	r3, #3
 80015a4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80015a8:	230a      	movs	r3, #10
 80015aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015ae:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015b2:	4619      	mov	r1, r3
 80015b4:	481a      	ldr	r0, [pc, #104]	; (8001620 <HAL_QSPI_MspInit+0x16c>)
 80015b6:	f001 fcf5 	bl	8002fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015ba:	2304      	movs	r3, #4
 80015bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015cc:	2303      	movs	r3, #3
 80015ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80015d2:	2309      	movs	r3, #9
 80015d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015dc:	4619      	mov	r1, r3
 80015de:	4811      	ldr	r0, [pc, #68]	; (8001624 <HAL_QSPI_MspInit+0x170>)
 80015e0:	f001 fce0 	bl	8002fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015e4:	2340      	movs	r3, #64	; 0x40
 80015e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	2302      	movs	r3, #2
 80015ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f6:	2303      	movs	r3, #3
 80015f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80015fc:	230a      	movs	r3, #10
 80015fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001602:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001606:	4619      	mov	r1, r3
 8001608:	4806      	ldr	r0, [pc, #24]	; (8001624 <HAL_QSPI_MspInit+0x170>)
 800160a:	f001 fccb 	bl	8002fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800160e:	bf00      	nop
 8001610:	37f0      	adds	r7, #240	; 0xf0
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	52005000 	.word	0x52005000
 800161c:	58024400 	.word	0x58024400
 8001620:	58021400 	.word	0x58021400
 8001624:	58020400 	.word	0x58020400

08001628 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <HAL_TIM_Base_MspInit+0x48>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d116      	bne.n	8001668 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <HAL_TIM_Base_MspInit+0x4c>)
 800163c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001640:	4a0c      	ldr	r2, [pc, #48]	; (8001674 <HAL_TIM_Base_MspInit+0x4c>)
 8001642:	f043 0302 	orr.w	r3, r3, #2
 8001646:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <HAL_TIM_Base_MspInit+0x4c>)
 800164c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8001658:	2200      	movs	r2, #0
 800165a:	2101      	movs	r1, #1
 800165c:	201d      	movs	r0, #29
 800165e:	f000 fcca 	bl	8001ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001662:	201d      	movs	r0, #29
 8001664:	f000 fce1 	bl	800202a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40000400 	.word	0x40000400
 8001674:	58024400 	.word	0x58024400

08001678 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b0bc      	sub	sp, #240	; 0xf0
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001690:	f107 0318 	add.w	r3, r7, #24
 8001694:	22c0      	movs	r2, #192	; 0xc0
 8001696:	2100      	movs	r1, #0
 8001698:	4618      	mov	r0, r3
 800169a:	f00b f99b 	bl	800c9d4 <memset>
  if(huart->Instance==USART1)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a55      	ldr	r2, [pc, #340]	; (80017f8 <HAL_UART_MspInit+0x180>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d14f      	bne.n	8001748 <HAL_UART_MspInit+0xd0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80016a8:	f04f 0201 	mov.w	r2, #1
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ba:	f107 0318 	add.w	r3, r7, #24
 80016be:	4618      	mov	r0, r3
 80016c0:	f003 fda8 	bl	8005214 <HAL_RCCEx_PeriphCLKConfig>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80016ca:	f7ff fdb5 	bl	8001238 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016ce:	4b4b      	ldr	r3, [pc, #300]	; (80017fc <HAL_UART_MspInit+0x184>)
 80016d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016d4:	4a49      	ldr	r2, [pc, #292]	; (80017fc <HAL_UART_MspInit+0x184>)
 80016d6:	f043 0310 	orr.w	r3, r3, #16
 80016da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80016de:	4b47      	ldr	r3, [pc, #284]	; (80017fc <HAL_UART_MspInit+0x184>)
 80016e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016e4:	f003 0310 	and.w	r3, r3, #16
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ec:	4b43      	ldr	r3, [pc, #268]	; (80017fc <HAL_UART_MspInit+0x184>)
 80016ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f2:	4a42      	ldr	r2, [pc, #264]	; (80017fc <HAL_UART_MspInit+0x184>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016fc:	4b3f      	ldr	r3, [pc, #252]	; (80017fc <HAL_UART_MspInit+0x184>)
 80016fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800170a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800170e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001712:	2302      	movs	r3, #2
 8001714:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2300      	movs	r3, #0
 8001720:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001724:	2307      	movs	r3, #7
 8001726:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800172e:	4619      	mov	r1, r3
 8001730:	4833      	ldr	r0, [pc, #204]	; (8001800 <HAL_UART_MspInit+0x188>)
 8001732:	f001 fc37 	bl	8002fa4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	2101      	movs	r1, #1
 800173a:	2025      	movs	r0, #37	; 0x25
 800173c:	f000 fc5b 	bl	8001ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001740:	2025      	movs	r0, #37	; 0x25
 8001742:	f000 fc72 	bl	800202a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001746:	e052      	b.n	80017ee <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART2)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a2d      	ldr	r2, [pc, #180]	; (8001804 <HAL_UART_MspInit+0x18c>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d14d      	bne.n	80017ee <HAL_UART_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001752:	f04f 0202 	mov.w	r2, #2
 8001756:	f04f 0300 	mov.w	r3, #0
 800175a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800175e:	2300      	movs	r3, #0
 8001760:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001764:	f107 0318 	add.w	r3, r7, #24
 8001768:	4618      	mov	r0, r3
 800176a:	f003 fd53 	bl	8005214 <HAL_RCCEx_PeriphCLKConfig>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <HAL_UART_MspInit+0x100>
      Error_Handler();
 8001774:	f7ff fd60 	bl	8001238 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001778:	4b20      	ldr	r3, [pc, #128]	; (80017fc <HAL_UART_MspInit+0x184>)
 800177a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800177e:	4a1f      	ldr	r2, [pc, #124]	; (80017fc <HAL_UART_MspInit+0x184>)
 8001780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001784:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001788:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <HAL_UART_MspInit+0x184>)
 800178a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800178e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	4b19      	ldr	r3, [pc, #100]	; (80017fc <HAL_UART_MspInit+0x184>)
 8001798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800179c:	4a17      	ldr	r2, [pc, #92]	; (80017fc <HAL_UART_MspInit+0x184>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <HAL_UART_MspInit+0x184>)
 80017a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017b4:	230c      	movs	r3, #12
 80017b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	2302      	movs	r3, #2
 80017bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017cc:	2307      	movs	r3, #7
 80017ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017d6:	4619      	mov	r1, r3
 80017d8:	4809      	ldr	r0, [pc, #36]	; (8001800 <HAL_UART_MspInit+0x188>)
 80017da:	f001 fbe3 	bl	8002fa4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	2100      	movs	r1, #0
 80017e2:	2026      	movs	r0, #38	; 0x26
 80017e4:	f000 fc07 	bl	8001ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017e8:	2026      	movs	r0, #38	; 0x26
 80017ea:	f000 fc1e 	bl	800202a <HAL_NVIC_EnableIRQ>
}
 80017ee:	bf00      	nop
 80017f0:	37f0      	adds	r7, #240	; 0xf0
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40011000 	.word	0x40011000
 80017fc:	58024400 	.word	0x58024400
 8001800:	58020000 	.word	0x58020000
 8001804:	40004400 	.word	0x40004400

08001808 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001808:	b580      	push	{r7, lr}
 800180a:	b0b8      	sub	sp, #224	; 0xe0
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800180e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]
 800181c:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800181e:	4b51      	ldr	r3, [pc, #324]	; (8001964 <HAL_FMC_MspInit+0x15c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	f040 8099 	bne.w	800195a <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 8001828:	4b4e      	ldr	r3, [pc, #312]	; (8001964 <HAL_FMC_MspInit+0x15c>)
 800182a:	2201      	movs	r2, #1
 800182c:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800182e:	f107 0308 	add.w	r3, r7, #8
 8001832:	22c0      	movs	r2, #192	; 0xc0
 8001834:	2100      	movs	r1, #0
 8001836:	4618      	mov	r0, r3
 8001838:	f00b f8cc 	bl	800c9d4 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800183c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001840:	f04f 0300 	mov.w	r3, #0
 8001844:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8001848:	2300      	movs	r3, #0
 800184a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800184c:	f107 0308 	add.w	r3, r7, #8
 8001850:	4618      	mov	r0, r3
 8001852:	f003 fcdf 	bl	8005214 <HAL_RCCEx_PeriphCLKConfig>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 800185c:	f7ff fcec 	bl	8001238 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001860:	4b41      	ldr	r3, [pc, #260]	; (8001968 <HAL_FMC_MspInit+0x160>)
 8001862:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001866:	4a40      	ldr	r2, [pc, #256]	; (8001968 <HAL_FMC_MspInit+0x160>)
 8001868:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800186c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001870:	4b3d      	ldr	r3, [pc, #244]	; (8001968 <HAL_FMC_MspInit+0x160>)
 8001872:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001876:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800187e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001882:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001892:	2303      	movs	r3, #3
 8001894:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001898:	230c      	movs	r3, #12
 800189a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800189e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018a2:	4619      	mov	r1, r3
 80018a4:	4831      	ldr	r0, [pc, #196]	; (800196c <HAL_FMC_MspInit+0x164>)
 80018a6:	f001 fb7d 	bl	8002fa4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80018aa:	230d      	movs	r3, #13
 80018ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b0:	2302      	movs	r3, #2
 80018b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018bc:	2303      	movs	r3, #3
 80018be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018c2:	230c      	movs	r3, #12
 80018c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018cc:	4619      	mov	r1, r3
 80018ce:	4828      	ldr	r0, [pc, #160]	; (8001970 <HAL_FMC_MspInit+0x168>)
 80018d0:	f001 fb68 	bl	8002fa4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 80018d4:	f248 1337 	movw	r3, #33079	; 0x8137
 80018d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e8:	2303      	movs	r3, #3
 80018ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018ee:	230c      	movs	r3, #12
 80018f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018f8:	4619      	mov	r1, r3
 80018fa:	481e      	ldr	r0, [pc, #120]	; (8001974 <HAL_FMC_MspInit+0x16c>)
 80018fc:	f001 fb52 	bl	8002fa4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001900:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001904:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	2302      	movs	r3, #2
 800190a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001914:	2303      	movs	r3, #3
 8001916:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800191a:	230c      	movs	r3, #12
 800191c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001920:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001924:	4619      	mov	r1, r3
 8001926:	4814      	ldr	r0, [pc, #80]	; (8001978 <HAL_FMC_MspInit+0x170>)
 8001928:	f001 fb3c 	bl	8002fa4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800192c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001930:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001940:	2303      	movs	r3, #3
 8001942:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001946:	230c      	movs	r3, #12
 8001948:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800194c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001950:	4619      	mov	r1, r3
 8001952:	480a      	ldr	r0, [pc, #40]	; (800197c <HAL_FMC_MspInit+0x174>)
 8001954:	f001 fb26 	bl	8002fa4 <HAL_GPIO_Init>
 8001958:	e000      	b.n	800195c <HAL_FMC_MspInit+0x154>
    return;
 800195a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800195c:	37e0      	adds	r7, #224	; 0xe0
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	240004fc 	.word	0x240004fc
 8001968:	58024400 	.word	0x58024400
 800196c:	58021400 	.word	0x58021400
 8001970:	58020800 	.word	0x58020800
 8001974:	58021800 	.word	0x58021800
 8001978:	58021000 	.word	0x58021000
 800197c:	58020c00 	.word	0x58020c00

08001980 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001988:	f7ff ff3e 	bl	8001808 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001998:	e7fe      	b.n	8001998 <NMI_Handler+0x4>

0800199a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800199e:	e7fe      	b.n	800199e <HardFault_Handler+0x4>

080019a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <MemManage_Handler+0x4>

080019a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019aa:	e7fe      	b.n	80019aa <BusFault_Handler+0x4>

080019ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <UsageFault_Handler+0x4>

080019b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019e0:	f000 fa02 	bl	8001de8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019ec:	4802      	ldr	r0, [pc, #8]	; (80019f8 <TIM3_IRQHandler+0x10>)
 80019ee:	f005 fb2d 	bl	800704c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	24000354 	.word	0x24000354

080019fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a00:	4802      	ldr	r0, [pc, #8]	; (8001a0c <USART1_IRQHandler+0x10>)
 8001a02:	f006 f90f 	bl	8007c24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	240003a0 	.word	0x240003a0

08001a10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a14:	4802      	ldr	r0, [pc, #8]	; (8001a20 <USART2_IRQHandler+0x10>)
 8001a16:	f006 f905 	bl	8007c24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	24000434 	.word	0x24000434

08001a24 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001a28:	4802      	ldr	r0, [pc, #8]	; (8001a34 <LTDC_IRQHandler+0x10>)
 8001a2a:	f001 fd6d 	bl	8003508 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	24000260 	.word	0x24000260

08001a38 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001a3c:	4802      	ldr	r0, [pc, #8]	; (8001a48 <DMA2D_IRQHandler+0x10>)
 8001a3e:	f001 f8f3 	bl	8002c28 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	240001f8 	.word	0x240001f8

08001a4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return 1;
 8001a50:	2301      	movs	r3, #1
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <_kill>:

int _kill(int pid, int sig)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a66:	f00b f807 	bl	800ca78 <__errno>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2216      	movs	r2, #22
 8001a6e:	601a      	str	r2, [r3, #0]
  return -1;
 8001a70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <_exit>:

void _exit (int status)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a84:	f04f 31ff 	mov.w	r1, #4294967295
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff ffe7 	bl	8001a5c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a8e:	e7fe      	b.n	8001a8e <_exit+0x12>

08001a90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	e00a      	b.n	8001ab8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aa2:	f3af 8000 	nop.w
 8001aa6:	4601      	mov	r1, r0
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	1c5a      	adds	r2, r3, #1
 8001aac:	60ba      	str	r2, [r7, #8]
 8001aae:	b2ca      	uxtb	r2, r1
 8001ab0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	697a      	ldr	r2, [r7, #20]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	dbf0      	blt.n	8001aa2 <_read+0x12>
  }

  return len;
 8001ac0:	687b      	ldr	r3, [r7, #4]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <_close>:
  }
  return len;
}

int _close(int file)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ad2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001af2:	605a      	str	r2, [r3, #4]
  return 0;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <_isatty>:

int _isatty(int file)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b0a:	2301      	movs	r3, #1
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b3c:	4a14      	ldr	r2, [pc, #80]	; (8001b90 <_sbrk+0x5c>)
 8001b3e:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <_sbrk+0x60>)
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b48:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <_sbrk+0x64>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d102      	bne.n	8001b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <_sbrk+0x64>)
 8001b52:	4a12      	ldr	r2, [pc, #72]	; (8001b9c <_sbrk+0x68>)
 8001b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b56:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <_sbrk+0x64>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d207      	bcs.n	8001b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b64:	f00a ff88 	bl	800ca78 <__errno>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b72:	e009      	b.n	8001b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b74:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <_sbrk+0x64>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b7a:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <_sbrk+0x64>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	4a05      	ldr	r2, [pc, #20]	; (8001b98 <_sbrk+0x64>)
 8001b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b86:	68fb      	ldr	r3, [r7, #12]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	24080000 	.word	0x24080000
 8001b94:	00000400 	.word	0x00000400
 8001b98:	24000500 	.word	0x24000500
 8001b9c:	240006b0 	.word	0x240006b0

08001ba0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ba4:	4b37      	ldr	r3, [pc, #220]	; (8001c84 <SystemInit+0xe4>)
 8001ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001baa:	4a36      	ldr	r2, [pc, #216]	; (8001c84 <SystemInit+0xe4>)
 8001bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bb4:	4b34      	ldr	r3, [pc, #208]	; (8001c88 <SystemInit+0xe8>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	2b06      	cmp	r3, #6
 8001bbe:	d807      	bhi.n	8001bd0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bc0:	4b31      	ldr	r3, [pc, #196]	; (8001c88 <SystemInit+0xe8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f023 030f 	bic.w	r3, r3, #15
 8001bc8:	4a2f      	ldr	r2, [pc, #188]	; (8001c88 <SystemInit+0xe8>)
 8001bca:	f043 0307 	orr.w	r3, r3, #7
 8001bce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001bd0:	4b2e      	ldr	r3, [pc, #184]	; (8001c8c <SystemInit+0xec>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a2d      	ldr	r2, [pc, #180]	; (8001c8c <SystemInit+0xec>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001bdc:	4b2b      	ldr	r3, [pc, #172]	; (8001c8c <SystemInit+0xec>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001be2:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <SystemInit+0xec>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	4929      	ldr	r1, [pc, #164]	; (8001c8c <SystemInit+0xec>)
 8001be8:	4b29      	ldr	r3, [pc, #164]	; (8001c90 <SystemInit+0xf0>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bee:	4b26      	ldr	r3, [pc, #152]	; (8001c88 <SystemInit+0xe8>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0308 	and.w	r3, r3, #8
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d007      	beq.n	8001c0a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bfa:	4b23      	ldr	r3, [pc, #140]	; (8001c88 <SystemInit+0xe8>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f023 030f 	bic.w	r3, r3, #15
 8001c02:	4a21      	ldr	r2, [pc, #132]	; (8001c88 <SystemInit+0xe8>)
 8001c04:	f043 0307 	orr.w	r3, r3, #7
 8001c08:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001c0a:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <SystemInit+0xec>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001c10:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <SystemInit+0xec>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001c16:	4b1d      	ldr	r3, [pc, #116]	; (8001c8c <SystemInit+0xec>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <SystemInit+0xec>)
 8001c1e:	4a1d      	ldr	r2, [pc, #116]	; (8001c94 <SystemInit+0xf4>)
 8001c20:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001c22:	4b1a      	ldr	r3, [pc, #104]	; (8001c8c <SystemInit+0xec>)
 8001c24:	4a1c      	ldr	r2, [pc, #112]	; (8001c98 <SystemInit+0xf8>)
 8001c26:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001c28:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <SystemInit+0xec>)
 8001c2a:	4a1c      	ldr	r2, [pc, #112]	; (8001c9c <SystemInit+0xfc>)
 8001c2c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001c2e:	4b17      	ldr	r3, [pc, #92]	; (8001c8c <SystemInit+0xec>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001c34:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <SystemInit+0xec>)
 8001c36:	4a19      	ldr	r2, [pc, #100]	; (8001c9c <SystemInit+0xfc>)
 8001c38:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001c3a:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <SystemInit+0xec>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <SystemInit+0xec>)
 8001c42:	4a16      	ldr	r2, [pc, #88]	; (8001c9c <SystemInit+0xfc>)
 8001c44:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001c46:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <SystemInit+0xec>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <SystemInit+0xec>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a0e      	ldr	r2, [pc, #56]	; (8001c8c <SystemInit+0xec>)
 8001c52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c56:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <SystemInit+0xec>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <SystemInit+0x100>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	4b10      	ldr	r3, [pc, #64]	; (8001ca4 <SystemInit+0x104>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c6a:	d202      	bcs.n	8001c72 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001c6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <SystemInit+0x108>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c72:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <SystemInit+0x10c>)
 8001c74:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001c78:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001c7a:	bf00      	nop
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000ed00 	.word	0xe000ed00
 8001c88:	52002000 	.word	0x52002000
 8001c8c:	58024400 	.word	0x58024400
 8001c90:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c94:	02020200 	.word	0x02020200
 8001c98:	01ff0000 	.word	0x01ff0000
 8001c9c:	01010280 	.word	0x01010280
 8001ca0:	5c001000 	.word	0x5c001000
 8001ca4:	ffff0000 	.word	0xffff0000
 8001ca8:	51008108 	.word	0x51008108
 8001cac:	52004000 	.word	0x52004000

08001cb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ce8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cb4:	f7ff ff74 	bl	8001ba0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cb8:	480c      	ldr	r0, [pc, #48]	; (8001cec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cba:	490d      	ldr	r1, [pc, #52]	; (8001cf0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cbc:	4a0d      	ldr	r2, [pc, #52]	; (8001cf4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc0:	e002      	b.n	8001cc8 <LoopCopyDataInit>

08001cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cc6:	3304      	adds	r3, #4

08001cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ccc:	d3f9      	bcc.n	8001cc2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cce:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cd0:	4c0a      	ldr	r4, [pc, #40]	; (8001cfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd4:	e001      	b.n	8001cda <LoopFillZerobss>

08001cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd8:	3204      	adds	r2, #4

08001cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cdc:	d3fb      	bcc.n	8001cd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cde:	f00a fed1 	bl	800ca84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ce2:	f7fe fec7 	bl	8000a74 <main>
  bx  lr
 8001ce6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ce8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001cec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001cf0:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8001cf4:	08010410 	.word	0x08010410
  ldr r2, =_sbss
 8001cf8:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 8001cfc:	240006b0 	.word	0x240006b0

08001d00 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d00:	e7fe      	b.n	8001d00 <ADC3_IRQHandler>
	...

08001d04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d0a:	2003      	movs	r0, #3
 8001d0c:	f000 f968 	bl	8001fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d10:	f003 f8aa 	bl	8004e68 <HAL_RCC_GetSysClockFreq>
 8001d14:	4602      	mov	r2, r0
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <HAL_Init+0x68>)
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	0a1b      	lsrs	r3, r3, #8
 8001d1c:	f003 030f 	and.w	r3, r3, #15
 8001d20:	4913      	ldr	r1, [pc, #76]	; (8001d70 <HAL_Init+0x6c>)
 8001d22:	5ccb      	ldrb	r3, [r1, r3]
 8001d24:	f003 031f 	and.w	r3, r3, #31
 8001d28:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d2e:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <HAL_Init+0x68>)
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	4a0e      	ldr	r2, [pc, #56]	; (8001d70 <HAL_Init+0x6c>)
 8001d38:	5cd3      	ldrb	r3, [r2, r3]
 8001d3a:	f003 031f 	and.w	r3, r3, #31
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	fa22 f303 	lsr.w	r3, r2, r3
 8001d44:	4a0b      	ldr	r2, [pc, #44]	; (8001d74 <HAL_Init+0x70>)
 8001d46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d48:	4a0b      	ldr	r2, [pc, #44]	; (8001d78 <HAL_Init+0x74>)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d4e:	200f      	movs	r0, #15
 8001d50:	f000 f814 	bl	8001d7c <HAL_InitTick>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e002      	b.n	8001d64 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d5e:	f7ff fa71 	bl	8001244 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	58024400 	.word	0x58024400
 8001d70:	0800ffa0 	.word	0x0800ffa0
 8001d74:	24000004 	.word	0x24000004
 8001d78:	24000000 	.word	0x24000000

08001d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001d84:	4b15      	ldr	r3, [pc, #84]	; (8001ddc <HAL_InitTick+0x60>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e021      	b.n	8001dd4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d90:	4b13      	ldr	r3, [pc, #76]	; (8001de0 <HAL_InitTick+0x64>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <HAL_InitTick+0x60>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	4619      	mov	r1, r3
 8001d9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 f94d 	bl	8002046 <HAL_SYSTICK_Config>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e00e      	b.n	8001dd4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b0f      	cmp	r3, #15
 8001dba:	d80a      	bhi.n	8001dd2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc4:	f000 f917 	bl	8001ff6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dc8:	4a06      	ldr	r2, [pc, #24]	; (8001de4 <HAL_InitTick+0x68>)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	e000      	b.n	8001dd4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	2400000c 	.word	0x2400000c
 8001de0:	24000000 	.word	0x24000000
 8001de4:	24000008 	.word	0x24000008

08001de8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <HAL_IncTick+0x20>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	461a      	mov	r2, r3
 8001df2:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <HAL_IncTick+0x24>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4413      	add	r3, r2
 8001df8:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <HAL_IncTick+0x24>)
 8001dfa:	6013      	str	r3, [r2, #0]
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	2400000c 	.word	0x2400000c
 8001e0c:	24000504 	.word	0x24000504

08001e10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return uwTick;
 8001e14:	4b03      	ldr	r3, [pc, #12]	; (8001e24 <HAL_GetTick+0x14>)
 8001e16:	681b      	ldr	r3, [r3, #0]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	24000504 	.word	0x24000504

08001e28 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001e2c:	4b03      	ldr	r3, [pc, #12]	; (8001e3c <HAL_GetREVID+0x14>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	0c1b      	lsrs	r3, r3, #16
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	5c001000 	.word	0x5c001000

08001e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <__NVIC_SetPriorityGrouping+0x40>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <__NVIC_SetPriorityGrouping+0x44>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e6e:	4a04      	ldr	r2, [pc, #16]	; (8001e80 <__NVIC_SetPriorityGrouping+0x40>)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	60d3      	str	r3, [r2, #12]
}
 8001e74:	bf00      	nop
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000ed00 	.word	0xe000ed00
 8001e84:	05fa0000 	.word	0x05fa0000

08001e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e8c:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	0a1b      	lsrs	r3, r3, #8
 8001e92:	f003 0307 	and.w	r3, r3, #7
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001eae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	db0b      	blt.n	8001ece <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eb6:	88fb      	ldrh	r3, [r7, #6]
 8001eb8:	f003 021f 	and.w	r2, r3, #31
 8001ebc:	4907      	ldr	r1, [pc, #28]	; (8001edc <__NVIC_EnableIRQ+0x38>)
 8001ebe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ec2:	095b      	lsrs	r3, r3, #5
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	e000e100 	.word	0xe000e100

08001ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	6039      	str	r1, [r7, #0]
 8001eea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001eec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	db0a      	blt.n	8001f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	490c      	ldr	r1, [pc, #48]	; (8001f2c <__NVIC_SetPriority+0x4c>)
 8001efa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001efe:	0112      	lsls	r2, r2, #4
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	440b      	add	r3, r1
 8001f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f08:	e00a      	b.n	8001f20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	4908      	ldr	r1, [pc, #32]	; (8001f30 <__NVIC_SetPriority+0x50>)
 8001f10:	88fb      	ldrh	r3, [r7, #6]
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	3b04      	subs	r3, #4
 8001f18:	0112      	lsls	r2, r2, #4
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	761a      	strb	r2, [r3, #24]
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	e000e100 	.word	0xe000e100
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b089      	sub	sp, #36	; 0x24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f1c3 0307 	rsb	r3, r3, #7
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	bf28      	it	cs
 8001f52:	2304      	movcs	r3, #4
 8001f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	2b06      	cmp	r3, #6
 8001f5c:	d902      	bls.n	8001f64 <NVIC_EncodePriority+0x30>
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3b03      	subs	r3, #3
 8001f62:	e000      	b.n	8001f66 <NVIC_EncodePriority+0x32>
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f68:	f04f 32ff 	mov.w	r2, #4294967295
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43da      	mvns	r2, r3
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	401a      	ands	r2, r3
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	fa01 f303 	lsl.w	r3, r1, r3
 8001f86:	43d9      	mvns	r1, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f8c:	4313      	orrs	r3, r2
         );
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3724      	adds	r7, #36	; 0x24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
	...

08001f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fac:	d301      	bcc.n	8001fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e00f      	b.n	8001fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <SysTick_Config+0x40>)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fba:	210f      	movs	r1, #15
 8001fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc0:	f7ff ff8e 	bl	8001ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fc4:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <SysTick_Config+0x40>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fca:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <SysTick_Config+0x40>)
 8001fcc:	2207      	movs	r2, #7
 8001fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	e000e010 	.word	0xe000e010

08001fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff ff29 	bl	8001e40 <__NVIC_SetPriorityGrouping>
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b086      	sub	sp, #24
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	607a      	str	r2, [r7, #4]
 8002002:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002004:	f7ff ff40 	bl	8001e88 <__NVIC_GetPriorityGrouping>
 8002008:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	68b9      	ldr	r1, [r7, #8]
 800200e:	6978      	ldr	r0, [r7, #20]
 8002010:	f7ff ff90 	bl	8001f34 <NVIC_EncodePriority>
 8002014:	4602      	mov	r2, r0
 8002016:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800201a:	4611      	mov	r1, r2
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff5f 	bl	8001ee0 <__NVIC_SetPriority>
}
 8002022:	bf00      	nop
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	4603      	mov	r3, r0
 8002032:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002034:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff ff33 	bl	8001ea4 <__NVIC_EnableIRQ>
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff ffa4 	bl	8001f9c <SysTick_Config>
 8002054:	4603      	mov	r3, r0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b04      	cmp	r3, #4
 800206c:	d106      	bne.n	800207c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800206e:	4b09      	ldr	r3, [pc, #36]	; (8002094 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a08      	ldr	r2, [pc, #32]	; (8002094 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002074:	f043 0304 	orr.w	r3, r3, #4
 8002078:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800207a:	e005      	b.n	8002088 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a04      	ldr	r2, [pc, #16]	; (8002094 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002082:	f023 0304 	bic.w	r3, r3, #4
 8002086:	6013      	str	r3, [r2, #0]
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000e010 	.word	0xe000e010

08002098 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80020a0:	f7ff feb6 	bl	8001e10 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e2dc      	b.n	800266a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d008      	beq.n	80020ce <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2280      	movs	r2, #128	; 0x80
 80020c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e2cd      	b.n	800266a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a76      	ldr	r2, [pc, #472]	; (80022ac <HAL_DMA_Abort+0x214>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d04a      	beq.n	800216e <HAL_DMA_Abort+0xd6>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a74      	ldr	r2, [pc, #464]	; (80022b0 <HAL_DMA_Abort+0x218>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d045      	beq.n	800216e <HAL_DMA_Abort+0xd6>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a73      	ldr	r2, [pc, #460]	; (80022b4 <HAL_DMA_Abort+0x21c>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d040      	beq.n	800216e <HAL_DMA_Abort+0xd6>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a71      	ldr	r2, [pc, #452]	; (80022b8 <HAL_DMA_Abort+0x220>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d03b      	beq.n	800216e <HAL_DMA_Abort+0xd6>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a70      	ldr	r2, [pc, #448]	; (80022bc <HAL_DMA_Abort+0x224>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d036      	beq.n	800216e <HAL_DMA_Abort+0xd6>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a6e      	ldr	r2, [pc, #440]	; (80022c0 <HAL_DMA_Abort+0x228>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d031      	beq.n	800216e <HAL_DMA_Abort+0xd6>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a6d      	ldr	r2, [pc, #436]	; (80022c4 <HAL_DMA_Abort+0x22c>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d02c      	beq.n	800216e <HAL_DMA_Abort+0xd6>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a6b      	ldr	r2, [pc, #428]	; (80022c8 <HAL_DMA_Abort+0x230>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d027      	beq.n	800216e <HAL_DMA_Abort+0xd6>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a6a      	ldr	r2, [pc, #424]	; (80022cc <HAL_DMA_Abort+0x234>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d022      	beq.n	800216e <HAL_DMA_Abort+0xd6>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a68      	ldr	r2, [pc, #416]	; (80022d0 <HAL_DMA_Abort+0x238>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d01d      	beq.n	800216e <HAL_DMA_Abort+0xd6>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a67      	ldr	r2, [pc, #412]	; (80022d4 <HAL_DMA_Abort+0x23c>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d018      	beq.n	800216e <HAL_DMA_Abort+0xd6>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a65      	ldr	r2, [pc, #404]	; (80022d8 <HAL_DMA_Abort+0x240>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d013      	beq.n	800216e <HAL_DMA_Abort+0xd6>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a64      	ldr	r2, [pc, #400]	; (80022dc <HAL_DMA_Abort+0x244>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d00e      	beq.n	800216e <HAL_DMA_Abort+0xd6>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a62      	ldr	r2, [pc, #392]	; (80022e0 <HAL_DMA_Abort+0x248>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d009      	beq.n	800216e <HAL_DMA_Abort+0xd6>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a61      	ldr	r2, [pc, #388]	; (80022e4 <HAL_DMA_Abort+0x24c>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d004      	beq.n	800216e <HAL_DMA_Abort+0xd6>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a5f      	ldr	r2, [pc, #380]	; (80022e8 <HAL_DMA_Abort+0x250>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d101      	bne.n	8002172 <HAL_DMA_Abort+0xda>
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <HAL_DMA_Abort+0xdc>
 8002172:	2300      	movs	r3, #0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d013      	beq.n	80021a0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 021e 	bic.w	r2, r2, #30
 8002186:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	695a      	ldr	r2, [r3, #20]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002196:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	e00a      	b.n	80021b6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 020e 	bic.w	r2, r2, #14
 80021ae:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a3c      	ldr	r2, [pc, #240]	; (80022ac <HAL_DMA_Abort+0x214>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d072      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a3a      	ldr	r2, [pc, #232]	; (80022b0 <HAL_DMA_Abort+0x218>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d06d      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a39      	ldr	r2, [pc, #228]	; (80022b4 <HAL_DMA_Abort+0x21c>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d068      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a37      	ldr	r2, [pc, #220]	; (80022b8 <HAL_DMA_Abort+0x220>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d063      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a36      	ldr	r2, [pc, #216]	; (80022bc <HAL_DMA_Abort+0x224>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d05e      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a34      	ldr	r2, [pc, #208]	; (80022c0 <HAL_DMA_Abort+0x228>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d059      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a33      	ldr	r2, [pc, #204]	; (80022c4 <HAL_DMA_Abort+0x22c>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d054      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a31      	ldr	r2, [pc, #196]	; (80022c8 <HAL_DMA_Abort+0x230>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d04f      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a30      	ldr	r2, [pc, #192]	; (80022cc <HAL_DMA_Abort+0x234>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d04a      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a2e      	ldr	r2, [pc, #184]	; (80022d0 <HAL_DMA_Abort+0x238>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d045      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a2d      	ldr	r2, [pc, #180]	; (80022d4 <HAL_DMA_Abort+0x23c>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d040      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a2b      	ldr	r2, [pc, #172]	; (80022d8 <HAL_DMA_Abort+0x240>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d03b      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a2a      	ldr	r2, [pc, #168]	; (80022dc <HAL_DMA_Abort+0x244>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d036      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a28      	ldr	r2, [pc, #160]	; (80022e0 <HAL_DMA_Abort+0x248>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d031      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a27      	ldr	r2, [pc, #156]	; (80022e4 <HAL_DMA_Abort+0x24c>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d02c      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a25      	ldr	r2, [pc, #148]	; (80022e8 <HAL_DMA_Abort+0x250>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d027      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a24      	ldr	r2, [pc, #144]	; (80022ec <HAL_DMA_Abort+0x254>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d022      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a22      	ldr	r2, [pc, #136]	; (80022f0 <HAL_DMA_Abort+0x258>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d01d      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a21      	ldr	r2, [pc, #132]	; (80022f4 <HAL_DMA_Abort+0x25c>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d018      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a1f      	ldr	r2, [pc, #124]	; (80022f8 <HAL_DMA_Abort+0x260>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d013      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a1e      	ldr	r2, [pc, #120]	; (80022fc <HAL_DMA_Abort+0x264>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d00e      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a1c      	ldr	r2, [pc, #112]	; (8002300 <HAL_DMA_Abort+0x268>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d009      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a1b      	ldr	r2, [pc, #108]	; (8002304 <HAL_DMA_Abort+0x26c>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d004      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a19      	ldr	r2, [pc, #100]	; (8002308 <HAL_DMA_Abort+0x270>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d132      	bne.n	800230c <HAL_DMA_Abort+0x274>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e031      	b.n	800230e <HAL_DMA_Abort+0x276>
 80022aa:	bf00      	nop
 80022ac:	40020010 	.word	0x40020010
 80022b0:	40020028 	.word	0x40020028
 80022b4:	40020040 	.word	0x40020040
 80022b8:	40020058 	.word	0x40020058
 80022bc:	40020070 	.word	0x40020070
 80022c0:	40020088 	.word	0x40020088
 80022c4:	400200a0 	.word	0x400200a0
 80022c8:	400200b8 	.word	0x400200b8
 80022cc:	40020410 	.word	0x40020410
 80022d0:	40020428 	.word	0x40020428
 80022d4:	40020440 	.word	0x40020440
 80022d8:	40020458 	.word	0x40020458
 80022dc:	40020470 	.word	0x40020470
 80022e0:	40020488 	.word	0x40020488
 80022e4:	400204a0 	.word	0x400204a0
 80022e8:	400204b8 	.word	0x400204b8
 80022ec:	58025408 	.word	0x58025408
 80022f0:	5802541c 	.word	0x5802541c
 80022f4:	58025430 	.word	0x58025430
 80022f8:	58025444 	.word	0x58025444
 80022fc:	58025458 	.word	0x58025458
 8002300:	5802546c 	.word	0x5802546c
 8002304:	58025480 	.word	0x58025480
 8002308:	58025494 	.word	0x58025494
 800230c:	2300      	movs	r3, #0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d007      	beq.n	8002322 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800231c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002320:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a6d      	ldr	r2, [pc, #436]	; (80024dc <HAL_DMA_Abort+0x444>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d04a      	beq.n	80023c2 <HAL_DMA_Abort+0x32a>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a6b      	ldr	r2, [pc, #428]	; (80024e0 <HAL_DMA_Abort+0x448>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d045      	beq.n	80023c2 <HAL_DMA_Abort+0x32a>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a6a      	ldr	r2, [pc, #424]	; (80024e4 <HAL_DMA_Abort+0x44c>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d040      	beq.n	80023c2 <HAL_DMA_Abort+0x32a>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a68      	ldr	r2, [pc, #416]	; (80024e8 <HAL_DMA_Abort+0x450>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d03b      	beq.n	80023c2 <HAL_DMA_Abort+0x32a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a67      	ldr	r2, [pc, #412]	; (80024ec <HAL_DMA_Abort+0x454>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d036      	beq.n	80023c2 <HAL_DMA_Abort+0x32a>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a65      	ldr	r2, [pc, #404]	; (80024f0 <HAL_DMA_Abort+0x458>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d031      	beq.n	80023c2 <HAL_DMA_Abort+0x32a>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a64      	ldr	r2, [pc, #400]	; (80024f4 <HAL_DMA_Abort+0x45c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d02c      	beq.n	80023c2 <HAL_DMA_Abort+0x32a>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a62      	ldr	r2, [pc, #392]	; (80024f8 <HAL_DMA_Abort+0x460>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d027      	beq.n	80023c2 <HAL_DMA_Abort+0x32a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a61      	ldr	r2, [pc, #388]	; (80024fc <HAL_DMA_Abort+0x464>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d022      	beq.n	80023c2 <HAL_DMA_Abort+0x32a>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a5f      	ldr	r2, [pc, #380]	; (8002500 <HAL_DMA_Abort+0x468>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d01d      	beq.n	80023c2 <HAL_DMA_Abort+0x32a>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a5e      	ldr	r2, [pc, #376]	; (8002504 <HAL_DMA_Abort+0x46c>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d018      	beq.n	80023c2 <HAL_DMA_Abort+0x32a>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a5c      	ldr	r2, [pc, #368]	; (8002508 <HAL_DMA_Abort+0x470>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d013      	beq.n	80023c2 <HAL_DMA_Abort+0x32a>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a5b      	ldr	r2, [pc, #364]	; (800250c <HAL_DMA_Abort+0x474>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d00e      	beq.n	80023c2 <HAL_DMA_Abort+0x32a>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a59      	ldr	r2, [pc, #356]	; (8002510 <HAL_DMA_Abort+0x478>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d009      	beq.n	80023c2 <HAL_DMA_Abort+0x32a>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a58      	ldr	r2, [pc, #352]	; (8002514 <HAL_DMA_Abort+0x47c>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d004      	beq.n	80023c2 <HAL_DMA_Abort+0x32a>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a56      	ldr	r2, [pc, #344]	; (8002518 <HAL_DMA_Abort+0x480>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d108      	bne.n	80023d4 <HAL_DMA_Abort+0x33c>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0201 	bic.w	r2, r2, #1
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	e007      	b.n	80023e4 <HAL_DMA_Abort+0x34c>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0201 	bic.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80023e4:	e013      	b.n	800240e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023e6:	f7ff fd13 	bl	8001e10 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b05      	cmp	r3, #5
 80023f2:	d90c      	bls.n	800240e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2220      	movs	r2, #32
 80023f8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2203      	movs	r2, #3
 80023fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e12d      	b.n	800266a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1e5      	bne.n	80023e6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a2f      	ldr	r2, [pc, #188]	; (80024dc <HAL_DMA_Abort+0x444>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d04a      	beq.n	80024ba <HAL_DMA_Abort+0x422>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a2d      	ldr	r2, [pc, #180]	; (80024e0 <HAL_DMA_Abort+0x448>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d045      	beq.n	80024ba <HAL_DMA_Abort+0x422>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a2c      	ldr	r2, [pc, #176]	; (80024e4 <HAL_DMA_Abort+0x44c>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d040      	beq.n	80024ba <HAL_DMA_Abort+0x422>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a2a      	ldr	r2, [pc, #168]	; (80024e8 <HAL_DMA_Abort+0x450>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d03b      	beq.n	80024ba <HAL_DMA_Abort+0x422>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a29      	ldr	r2, [pc, #164]	; (80024ec <HAL_DMA_Abort+0x454>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d036      	beq.n	80024ba <HAL_DMA_Abort+0x422>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a27      	ldr	r2, [pc, #156]	; (80024f0 <HAL_DMA_Abort+0x458>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d031      	beq.n	80024ba <HAL_DMA_Abort+0x422>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a26      	ldr	r2, [pc, #152]	; (80024f4 <HAL_DMA_Abort+0x45c>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d02c      	beq.n	80024ba <HAL_DMA_Abort+0x422>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a24      	ldr	r2, [pc, #144]	; (80024f8 <HAL_DMA_Abort+0x460>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d027      	beq.n	80024ba <HAL_DMA_Abort+0x422>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a23      	ldr	r2, [pc, #140]	; (80024fc <HAL_DMA_Abort+0x464>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d022      	beq.n	80024ba <HAL_DMA_Abort+0x422>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a21      	ldr	r2, [pc, #132]	; (8002500 <HAL_DMA_Abort+0x468>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d01d      	beq.n	80024ba <HAL_DMA_Abort+0x422>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a20      	ldr	r2, [pc, #128]	; (8002504 <HAL_DMA_Abort+0x46c>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d018      	beq.n	80024ba <HAL_DMA_Abort+0x422>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a1e      	ldr	r2, [pc, #120]	; (8002508 <HAL_DMA_Abort+0x470>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d013      	beq.n	80024ba <HAL_DMA_Abort+0x422>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a1d      	ldr	r2, [pc, #116]	; (800250c <HAL_DMA_Abort+0x474>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d00e      	beq.n	80024ba <HAL_DMA_Abort+0x422>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a1b      	ldr	r2, [pc, #108]	; (8002510 <HAL_DMA_Abort+0x478>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d009      	beq.n	80024ba <HAL_DMA_Abort+0x422>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a1a      	ldr	r2, [pc, #104]	; (8002514 <HAL_DMA_Abort+0x47c>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d004      	beq.n	80024ba <HAL_DMA_Abort+0x422>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a18      	ldr	r2, [pc, #96]	; (8002518 <HAL_DMA_Abort+0x480>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d101      	bne.n	80024be <HAL_DMA_Abort+0x426>
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <HAL_DMA_Abort+0x428>
 80024be:	2300      	movs	r3, #0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d02b      	beq.n	800251c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ce:	f003 031f 	and.w	r3, r3, #31
 80024d2:	223f      	movs	r2, #63	; 0x3f
 80024d4:	409a      	lsls	r2, r3
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	609a      	str	r2, [r3, #8]
 80024da:	e02a      	b.n	8002532 <HAL_DMA_Abort+0x49a>
 80024dc:	40020010 	.word	0x40020010
 80024e0:	40020028 	.word	0x40020028
 80024e4:	40020040 	.word	0x40020040
 80024e8:	40020058 	.word	0x40020058
 80024ec:	40020070 	.word	0x40020070
 80024f0:	40020088 	.word	0x40020088
 80024f4:	400200a0 	.word	0x400200a0
 80024f8:	400200b8 	.word	0x400200b8
 80024fc:	40020410 	.word	0x40020410
 8002500:	40020428 	.word	0x40020428
 8002504:	40020440 	.word	0x40020440
 8002508:	40020458 	.word	0x40020458
 800250c:	40020470 	.word	0x40020470
 8002510:	40020488 	.word	0x40020488
 8002514:	400204a0 	.word	0x400204a0
 8002518:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002520:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002526:	f003 031f 	and.w	r3, r3, #31
 800252a:	2201      	movs	r2, #1
 800252c:	409a      	lsls	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a4f      	ldr	r2, [pc, #316]	; (8002674 <HAL_DMA_Abort+0x5dc>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d072      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a4d      	ldr	r2, [pc, #308]	; (8002678 <HAL_DMA_Abort+0x5e0>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d06d      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a4c      	ldr	r2, [pc, #304]	; (800267c <HAL_DMA_Abort+0x5e4>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d068      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a4a      	ldr	r2, [pc, #296]	; (8002680 <HAL_DMA_Abort+0x5e8>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d063      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a49      	ldr	r2, [pc, #292]	; (8002684 <HAL_DMA_Abort+0x5ec>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d05e      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a47      	ldr	r2, [pc, #284]	; (8002688 <HAL_DMA_Abort+0x5f0>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d059      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a46      	ldr	r2, [pc, #280]	; (800268c <HAL_DMA_Abort+0x5f4>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d054      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a44      	ldr	r2, [pc, #272]	; (8002690 <HAL_DMA_Abort+0x5f8>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d04f      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a43      	ldr	r2, [pc, #268]	; (8002694 <HAL_DMA_Abort+0x5fc>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d04a      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a41      	ldr	r2, [pc, #260]	; (8002698 <HAL_DMA_Abort+0x600>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d045      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a40      	ldr	r2, [pc, #256]	; (800269c <HAL_DMA_Abort+0x604>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d040      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a3e      	ldr	r2, [pc, #248]	; (80026a0 <HAL_DMA_Abort+0x608>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d03b      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a3d      	ldr	r2, [pc, #244]	; (80026a4 <HAL_DMA_Abort+0x60c>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d036      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a3b      	ldr	r2, [pc, #236]	; (80026a8 <HAL_DMA_Abort+0x610>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d031      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a3a      	ldr	r2, [pc, #232]	; (80026ac <HAL_DMA_Abort+0x614>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d02c      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a38      	ldr	r2, [pc, #224]	; (80026b0 <HAL_DMA_Abort+0x618>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d027      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a37      	ldr	r2, [pc, #220]	; (80026b4 <HAL_DMA_Abort+0x61c>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d022      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a35      	ldr	r2, [pc, #212]	; (80026b8 <HAL_DMA_Abort+0x620>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d01d      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a34      	ldr	r2, [pc, #208]	; (80026bc <HAL_DMA_Abort+0x624>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d018      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a32      	ldr	r2, [pc, #200]	; (80026c0 <HAL_DMA_Abort+0x628>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d013      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a31      	ldr	r2, [pc, #196]	; (80026c4 <HAL_DMA_Abort+0x62c>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d00e      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a2f      	ldr	r2, [pc, #188]	; (80026c8 <HAL_DMA_Abort+0x630>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d009      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a2e      	ldr	r2, [pc, #184]	; (80026cc <HAL_DMA_Abort+0x634>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d004      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a2c      	ldr	r2, [pc, #176]	; (80026d0 <HAL_DMA_Abort+0x638>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d101      	bne.n	8002626 <HAL_DMA_Abort+0x58e>
 8002622:	2301      	movs	r3, #1
 8002624:	e000      	b.n	8002628 <HAL_DMA_Abort+0x590>
 8002626:	2300      	movs	r3, #0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d015      	beq.n	8002658 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002634:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00c      	beq.n	8002658 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002648:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800264c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002656:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40020010 	.word	0x40020010
 8002678:	40020028 	.word	0x40020028
 800267c:	40020040 	.word	0x40020040
 8002680:	40020058 	.word	0x40020058
 8002684:	40020070 	.word	0x40020070
 8002688:	40020088 	.word	0x40020088
 800268c:	400200a0 	.word	0x400200a0
 8002690:	400200b8 	.word	0x400200b8
 8002694:	40020410 	.word	0x40020410
 8002698:	40020428 	.word	0x40020428
 800269c:	40020440 	.word	0x40020440
 80026a0:	40020458 	.word	0x40020458
 80026a4:	40020470 	.word	0x40020470
 80026a8:	40020488 	.word	0x40020488
 80026ac:	400204a0 	.word	0x400204a0
 80026b0:	400204b8 	.word	0x400204b8
 80026b4:	58025408 	.word	0x58025408
 80026b8:	5802541c 	.word	0x5802541c
 80026bc:	58025430 	.word	0x58025430
 80026c0:	58025444 	.word	0x58025444
 80026c4:	58025458 	.word	0x58025458
 80026c8:	5802546c 	.word	0x5802546c
 80026cc:	58025480 	.word	0x58025480
 80026d0:	58025494 	.word	0x58025494

080026d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e237      	b.n	8002b56 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d004      	beq.n	80026fc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2280      	movs	r2, #128	; 0x80
 80026f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e22c      	b.n	8002b56 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a5c      	ldr	r2, [pc, #368]	; (8002874 <HAL_DMA_Abort_IT+0x1a0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d04a      	beq.n	800279c <HAL_DMA_Abort_IT+0xc8>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a5b      	ldr	r2, [pc, #364]	; (8002878 <HAL_DMA_Abort_IT+0x1a4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d045      	beq.n	800279c <HAL_DMA_Abort_IT+0xc8>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a59      	ldr	r2, [pc, #356]	; (800287c <HAL_DMA_Abort_IT+0x1a8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d040      	beq.n	800279c <HAL_DMA_Abort_IT+0xc8>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a58      	ldr	r2, [pc, #352]	; (8002880 <HAL_DMA_Abort_IT+0x1ac>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d03b      	beq.n	800279c <HAL_DMA_Abort_IT+0xc8>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a56      	ldr	r2, [pc, #344]	; (8002884 <HAL_DMA_Abort_IT+0x1b0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d036      	beq.n	800279c <HAL_DMA_Abort_IT+0xc8>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a55      	ldr	r2, [pc, #340]	; (8002888 <HAL_DMA_Abort_IT+0x1b4>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d031      	beq.n	800279c <HAL_DMA_Abort_IT+0xc8>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a53      	ldr	r2, [pc, #332]	; (800288c <HAL_DMA_Abort_IT+0x1b8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d02c      	beq.n	800279c <HAL_DMA_Abort_IT+0xc8>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a52      	ldr	r2, [pc, #328]	; (8002890 <HAL_DMA_Abort_IT+0x1bc>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d027      	beq.n	800279c <HAL_DMA_Abort_IT+0xc8>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a50      	ldr	r2, [pc, #320]	; (8002894 <HAL_DMA_Abort_IT+0x1c0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d022      	beq.n	800279c <HAL_DMA_Abort_IT+0xc8>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a4f      	ldr	r2, [pc, #316]	; (8002898 <HAL_DMA_Abort_IT+0x1c4>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d01d      	beq.n	800279c <HAL_DMA_Abort_IT+0xc8>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a4d      	ldr	r2, [pc, #308]	; (800289c <HAL_DMA_Abort_IT+0x1c8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d018      	beq.n	800279c <HAL_DMA_Abort_IT+0xc8>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a4c      	ldr	r2, [pc, #304]	; (80028a0 <HAL_DMA_Abort_IT+0x1cc>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d013      	beq.n	800279c <HAL_DMA_Abort_IT+0xc8>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a4a      	ldr	r2, [pc, #296]	; (80028a4 <HAL_DMA_Abort_IT+0x1d0>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d00e      	beq.n	800279c <HAL_DMA_Abort_IT+0xc8>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a49      	ldr	r2, [pc, #292]	; (80028a8 <HAL_DMA_Abort_IT+0x1d4>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d009      	beq.n	800279c <HAL_DMA_Abort_IT+0xc8>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a47      	ldr	r2, [pc, #284]	; (80028ac <HAL_DMA_Abort_IT+0x1d8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d004      	beq.n	800279c <HAL_DMA_Abort_IT+0xc8>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a46      	ldr	r2, [pc, #280]	; (80028b0 <HAL_DMA_Abort_IT+0x1dc>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d101      	bne.n	80027a0 <HAL_DMA_Abort_IT+0xcc>
 800279c:	2301      	movs	r3, #1
 800279e:	e000      	b.n	80027a2 <HAL_DMA_Abort_IT+0xce>
 80027a0:	2300      	movs	r3, #0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 8086 	beq.w	80028b4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2204      	movs	r2, #4
 80027ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a2f      	ldr	r2, [pc, #188]	; (8002874 <HAL_DMA_Abort_IT+0x1a0>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d04a      	beq.n	8002850 <HAL_DMA_Abort_IT+0x17c>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a2e      	ldr	r2, [pc, #184]	; (8002878 <HAL_DMA_Abort_IT+0x1a4>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d045      	beq.n	8002850 <HAL_DMA_Abort_IT+0x17c>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a2c      	ldr	r2, [pc, #176]	; (800287c <HAL_DMA_Abort_IT+0x1a8>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d040      	beq.n	8002850 <HAL_DMA_Abort_IT+0x17c>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a2b      	ldr	r2, [pc, #172]	; (8002880 <HAL_DMA_Abort_IT+0x1ac>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d03b      	beq.n	8002850 <HAL_DMA_Abort_IT+0x17c>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a29      	ldr	r2, [pc, #164]	; (8002884 <HAL_DMA_Abort_IT+0x1b0>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d036      	beq.n	8002850 <HAL_DMA_Abort_IT+0x17c>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a28      	ldr	r2, [pc, #160]	; (8002888 <HAL_DMA_Abort_IT+0x1b4>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d031      	beq.n	8002850 <HAL_DMA_Abort_IT+0x17c>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a26      	ldr	r2, [pc, #152]	; (800288c <HAL_DMA_Abort_IT+0x1b8>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d02c      	beq.n	8002850 <HAL_DMA_Abort_IT+0x17c>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a25      	ldr	r2, [pc, #148]	; (8002890 <HAL_DMA_Abort_IT+0x1bc>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d027      	beq.n	8002850 <HAL_DMA_Abort_IT+0x17c>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a23      	ldr	r2, [pc, #140]	; (8002894 <HAL_DMA_Abort_IT+0x1c0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d022      	beq.n	8002850 <HAL_DMA_Abort_IT+0x17c>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a22      	ldr	r2, [pc, #136]	; (8002898 <HAL_DMA_Abort_IT+0x1c4>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d01d      	beq.n	8002850 <HAL_DMA_Abort_IT+0x17c>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a20      	ldr	r2, [pc, #128]	; (800289c <HAL_DMA_Abort_IT+0x1c8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d018      	beq.n	8002850 <HAL_DMA_Abort_IT+0x17c>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a1f      	ldr	r2, [pc, #124]	; (80028a0 <HAL_DMA_Abort_IT+0x1cc>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d013      	beq.n	8002850 <HAL_DMA_Abort_IT+0x17c>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a1d      	ldr	r2, [pc, #116]	; (80028a4 <HAL_DMA_Abort_IT+0x1d0>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d00e      	beq.n	8002850 <HAL_DMA_Abort_IT+0x17c>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a1c      	ldr	r2, [pc, #112]	; (80028a8 <HAL_DMA_Abort_IT+0x1d4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d009      	beq.n	8002850 <HAL_DMA_Abort_IT+0x17c>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a1a      	ldr	r2, [pc, #104]	; (80028ac <HAL_DMA_Abort_IT+0x1d8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d004      	beq.n	8002850 <HAL_DMA_Abort_IT+0x17c>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a19      	ldr	r2, [pc, #100]	; (80028b0 <HAL_DMA_Abort_IT+0x1dc>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d108      	bne.n	8002862 <HAL_DMA_Abort_IT+0x18e>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0201 	bic.w	r2, r2, #1
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	e178      	b.n	8002b54 <HAL_DMA_Abort_IT+0x480>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 0201 	bic.w	r2, r2, #1
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	e16f      	b.n	8002b54 <HAL_DMA_Abort_IT+0x480>
 8002874:	40020010 	.word	0x40020010
 8002878:	40020028 	.word	0x40020028
 800287c:	40020040 	.word	0x40020040
 8002880:	40020058 	.word	0x40020058
 8002884:	40020070 	.word	0x40020070
 8002888:	40020088 	.word	0x40020088
 800288c:	400200a0 	.word	0x400200a0
 8002890:	400200b8 	.word	0x400200b8
 8002894:	40020410 	.word	0x40020410
 8002898:	40020428 	.word	0x40020428
 800289c:	40020440 	.word	0x40020440
 80028a0:	40020458 	.word	0x40020458
 80028a4:	40020470 	.word	0x40020470
 80028a8:	40020488 	.word	0x40020488
 80028ac:	400204a0 	.word	0x400204a0
 80028b0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 020e 	bic.w	r2, r2, #14
 80028c2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a6c      	ldr	r2, [pc, #432]	; (8002a7c <HAL_DMA_Abort_IT+0x3a8>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d04a      	beq.n	8002964 <HAL_DMA_Abort_IT+0x290>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a6b      	ldr	r2, [pc, #428]	; (8002a80 <HAL_DMA_Abort_IT+0x3ac>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d045      	beq.n	8002964 <HAL_DMA_Abort_IT+0x290>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a69      	ldr	r2, [pc, #420]	; (8002a84 <HAL_DMA_Abort_IT+0x3b0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d040      	beq.n	8002964 <HAL_DMA_Abort_IT+0x290>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a68      	ldr	r2, [pc, #416]	; (8002a88 <HAL_DMA_Abort_IT+0x3b4>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d03b      	beq.n	8002964 <HAL_DMA_Abort_IT+0x290>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a66      	ldr	r2, [pc, #408]	; (8002a8c <HAL_DMA_Abort_IT+0x3b8>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d036      	beq.n	8002964 <HAL_DMA_Abort_IT+0x290>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a65      	ldr	r2, [pc, #404]	; (8002a90 <HAL_DMA_Abort_IT+0x3bc>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d031      	beq.n	8002964 <HAL_DMA_Abort_IT+0x290>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a63      	ldr	r2, [pc, #396]	; (8002a94 <HAL_DMA_Abort_IT+0x3c0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d02c      	beq.n	8002964 <HAL_DMA_Abort_IT+0x290>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a62      	ldr	r2, [pc, #392]	; (8002a98 <HAL_DMA_Abort_IT+0x3c4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d027      	beq.n	8002964 <HAL_DMA_Abort_IT+0x290>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a60      	ldr	r2, [pc, #384]	; (8002a9c <HAL_DMA_Abort_IT+0x3c8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d022      	beq.n	8002964 <HAL_DMA_Abort_IT+0x290>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a5f      	ldr	r2, [pc, #380]	; (8002aa0 <HAL_DMA_Abort_IT+0x3cc>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d01d      	beq.n	8002964 <HAL_DMA_Abort_IT+0x290>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a5d      	ldr	r2, [pc, #372]	; (8002aa4 <HAL_DMA_Abort_IT+0x3d0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d018      	beq.n	8002964 <HAL_DMA_Abort_IT+0x290>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a5c      	ldr	r2, [pc, #368]	; (8002aa8 <HAL_DMA_Abort_IT+0x3d4>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d013      	beq.n	8002964 <HAL_DMA_Abort_IT+0x290>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a5a      	ldr	r2, [pc, #360]	; (8002aac <HAL_DMA_Abort_IT+0x3d8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d00e      	beq.n	8002964 <HAL_DMA_Abort_IT+0x290>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a59      	ldr	r2, [pc, #356]	; (8002ab0 <HAL_DMA_Abort_IT+0x3dc>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d009      	beq.n	8002964 <HAL_DMA_Abort_IT+0x290>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a57      	ldr	r2, [pc, #348]	; (8002ab4 <HAL_DMA_Abort_IT+0x3e0>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d004      	beq.n	8002964 <HAL_DMA_Abort_IT+0x290>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a56      	ldr	r2, [pc, #344]	; (8002ab8 <HAL_DMA_Abort_IT+0x3e4>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d108      	bne.n	8002976 <HAL_DMA_Abort_IT+0x2a2>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0201 	bic.w	r2, r2, #1
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	e007      	b.n	8002986 <HAL_DMA_Abort_IT+0x2b2>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 0201 	bic.w	r2, r2, #1
 8002984:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a3c      	ldr	r2, [pc, #240]	; (8002a7c <HAL_DMA_Abort_IT+0x3a8>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d072      	beq.n	8002a76 <HAL_DMA_Abort_IT+0x3a2>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a3a      	ldr	r2, [pc, #232]	; (8002a80 <HAL_DMA_Abort_IT+0x3ac>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d06d      	beq.n	8002a76 <HAL_DMA_Abort_IT+0x3a2>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a39      	ldr	r2, [pc, #228]	; (8002a84 <HAL_DMA_Abort_IT+0x3b0>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d068      	beq.n	8002a76 <HAL_DMA_Abort_IT+0x3a2>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a37      	ldr	r2, [pc, #220]	; (8002a88 <HAL_DMA_Abort_IT+0x3b4>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d063      	beq.n	8002a76 <HAL_DMA_Abort_IT+0x3a2>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a36      	ldr	r2, [pc, #216]	; (8002a8c <HAL_DMA_Abort_IT+0x3b8>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d05e      	beq.n	8002a76 <HAL_DMA_Abort_IT+0x3a2>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a34      	ldr	r2, [pc, #208]	; (8002a90 <HAL_DMA_Abort_IT+0x3bc>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d059      	beq.n	8002a76 <HAL_DMA_Abort_IT+0x3a2>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a33      	ldr	r2, [pc, #204]	; (8002a94 <HAL_DMA_Abort_IT+0x3c0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d054      	beq.n	8002a76 <HAL_DMA_Abort_IT+0x3a2>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a31      	ldr	r2, [pc, #196]	; (8002a98 <HAL_DMA_Abort_IT+0x3c4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d04f      	beq.n	8002a76 <HAL_DMA_Abort_IT+0x3a2>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a30      	ldr	r2, [pc, #192]	; (8002a9c <HAL_DMA_Abort_IT+0x3c8>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d04a      	beq.n	8002a76 <HAL_DMA_Abort_IT+0x3a2>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a2e      	ldr	r2, [pc, #184]	; (8002aa0 <HAL_DMA_Abort_IT+0x3cc>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d045      	beq.n	8002a76 <HAL_DMA_Abort_IT+0x3a2>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a2d      	ldr	r2, [pc, #180]	; (8002aa4 <HAL_DMA_Abort_IT+0x3d0>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d040      	beq.n	8002a76 <HAL_DMA_Abort_IT+0x3a2>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a2b      	ldr	r2, [pc, #172]	; (8002aa8 <HAL_DMA_Abort_IT+0x3d4>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d03b      	beq.n	8002a76 <HAL_DMA_Abort_IT+0x3a2>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a2a      	ldr	r2, [pc, #168]	; (8002aac <HAL_DMA_Abort_IT+0x3d8>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d036      	beq.n	8002a76 <HAL_DMA_Abort_IT+0x3a2>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a28      	ldr	r2, [pc, #160]	; (8002ab0 <HAL_DMA_Abort_IT+0x3dc>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d031      	beq.n	8002a76 <HAL_DMA_Abort_IT+0x3a2>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a27      	ldr	r2, [pc, #156]	; (8002ab4 <HAL_DMA_Abort_IT+0x3e0>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d02c      	beq.n	8002a76 <HAL_DMA_Abort_IT+0x3a2>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a25      	ldr	r2, [pc, #148]	; (8002ab8 <HAL_DMA_Abort_IT+0x3e4>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d027      	beq.n	8002a76 <HAL_DMA_Abort_IT+0x3a2>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a24      	ldr	r2, [pc, #144]	; (8002abc <HAL_DMA_Abort_IT+0x3e8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d022      	beq.n	8002a76 <HAL_DMA_Abort_IT+0x3a2>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a22      	ldr	r2, [pc, #136]	; (8002ac0 <HAL_DMA_Abort_IT+0x3ec>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d01d      	beq.n	8002a76 <HAL_DMA_Abort_IT+0x3a2>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a21      	ldr	r2, [pc, #132]	; (8002ac4 <HAL_DMA_Abort_IT+0x3f0>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d018      	beq.n	8002a76 <HAL_DMA_Abort_IT+0x3a2>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a1f      	ldr	r2, [pc, #124]	; (8002ac8 <HAL_DMA_Abort_IT+0x3f4>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d013      	beq.n	8002a76 <HAL_DMA_Abort_IT+0x3a2>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a1e      	ldr	r2, [pc, #120]	; (8002acc <HAL_DMA_Abort_IT+0x3f8>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d00e      	beq.n	8002a76 <HAL_DMA_Abort_IT+0x3a2>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a1c      	ldr	r2, [pc, #112]	; (8002ad0 <HAL_DMA_Abort_IT+0x3fc>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d009      	beq.n	8002a76 <HAL_DMA_Abort_IT+0x3a2>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a1b      	ldr	r2, [pc, #108]	; (8002ad4 <HAL_DMA_Abort_IT+0x400>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d004      	beq.n	8002a76 <HAL_DMA_Abort_IT+0x3a2>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a19      	ldr	r2, [pc, #100]	; (8002ad8 <HAL_DMA_Abort_IT+0x404>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d132      	bne.n	8002adc <HAL_DMA_Abort_IT+0x408>
 8002a76:	2301      	movs	r3, #1
 8002a78:	e031      	b.n	8002ade <HAL_DMA_Abort_IT+0x40a>
 8002a7a:	bf00      	nop
 8002a7c:	40020010 	.word	0x40020010
 8002a80:	40020028 	.word	0x40020028
 8002a84:	40020040 	.word	0x40020040
 8002a88:	40020058 	.word	0x40020058
 8002a8c:	40020070 	.word	0x40020070
 8002a90:	40020088 	.word	0x40020088
 8002a94:	400200a0 	.word	0x400200a0
 8002a98:	400200b8 	.word	0x400200b8
 8002a9c:	40020410 	.word	0x40020410
 8002aa0:	40020428 	.word	0x40020428
 8002aa4:	40020440 	.word	0x40020440
 8002aa8:	40020458 	.word	0x40020458
 8002aac:	40020470 	.word	0x40020470
 8002ab0:	40020488 	.word	0x40020488
 8002ab4:	400204a0 	.word	0x400204a0
 8002ab8:	400204b8 	.word	0x400204b8
 8002abc:	58025408 	.word	0x58025408
 8002ac0:	5802541c 	.word	0x5802541c
 8002ac4:	58025430 	.word	0x58025430
 8002ac8:	58025444 	.word	0x58025444
 8002acc:	58025458 	.word	0x58025458
 8002ad0:	5802546c 	.word	0x5802546c
 8002ad4:	58025480 	.word	0x58025480
 8002ad8:	58025494 	.word	0x58025494
 8002adc:	2300      	movs	r3, #0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d028      	beq.n	8002b34 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002af0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afc:	f003 031f 	and.w	r3, r3, #31
 8002b00:	2201      	movs	r2, #1
 8002b02:	409a      	lsls	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002b10:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00c      	beq.n	8002b34 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b28:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002b32:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop

08002b60 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e04f      	b.n	8002c12 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d106      	bne.n	8002b8c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7fe fb76 	bl	8001278 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	4b20      	ldr	r3, [pc, #128]	; (8002c1c <HAL_DMA2D_Init+0xbc>)
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6851      	ldr	r1, [r2, #4]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	69d2      	ldr	r2, [r2, #28]
 8002ba6:	4311      	orrs	r1, r2
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6812      	ldr	r2, [r2, #0]
 8002bac:	430b      	orrs	r3, r1
 8002bae:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bb6:	4b1a      	ldr	r3, [pc, #104]	; (8002c20 <HAL_DMA2D_Init+0xc0>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6891      	ldr	r1, [r2, #8]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6992      	ldr	r2, [r2, #24]
 8002bc2:	4311      	orrs	r1, r2
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6812      	ldr	r2, [r2, #0]
 8002bc8:	430b      	orrs	r3, r1
 8002bca:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bd2:	4b14      	ldr	r3, [pc, #80]	; (8002c24 <HAL_DMA2D_Init+0xc4>)
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	68d1      	ldr	r1, [r2, #12]
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6812      	ldr	r2, [r2, #0]
 8002bde:	430b      	orrs	r3, r1
 8002be0:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	051a      	lsls	r2, r3, #20
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	055b      	lsls	r3, r3, #21
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	fff8ffbf 	.word	0xfff8ffbf
 8002c20:	fffffef8 	.word	0xfffffef8
 8002c24:	ffff0000 	.word	0xffff0000

08002c28 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d026      	beq.n	8002c98 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d021      	beq.n	8002c98 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c62:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c68:	f043 0201 	orr.w	r2, r3, #1
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2201      	movs	r2, #1
 8002c76:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2204      	movs	r2, #4
 8002c7c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f003 0320 	and.w	r3, r3, #32
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d026      	beq.n	8002cf0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d021      	beq.n	8002cf0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cba:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cc8:	f043 0202 	orr.w	r2, r3, #2
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2204      	movs	r2, #4
 8002cd4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d026      	beq.n	8002d48 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d021      	beq.n	8002d48 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d12:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2208      	movs	r2, #8
 8002d1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d20:	f043 0204 	orr.w	r2, r3, #4
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2204      	movs	r2, #4
 8002d2c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f003 0304 	and.w	r3, r3, #4
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d013      	beq.n	8002d7a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00e      	beq.n	8002d7a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d6a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2204      	movs	r2, #4
 8002d72:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 f853 	bl	8002e20 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d024      	beq.n	8002dce <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d01f      	beq.n	8002dce <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d9c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2202      	movs	r2, #2
 8002da4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f003 0310 	and.w	r3, r3, #16
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d01f      	beq.n	8002e18 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d01a      	beq.n	8002e18 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002df0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2210      	movs	r2, #16
 8002df8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f80e 	bl	8002e34 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002e18:	bf00      	nop
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b087      	sub	sp, #28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d101      	bne.n	8002e6c <HAL_DMA2D_ConfigLayer+0x24>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	e092      	b.n	8002f92 <HAL_DMA2D_ConfigLayer+0x14a>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	1a9b      	subs	r3, r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	3328      	adds	r3, #40	; 0x28
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	041b      	lsls	r3, r3, #16
 8002e98:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002ea0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8002eac:	4b3c      	ldr	r3, [pc, #240]	; (8002fa0 <HAL_DMA2D_ConfigLayer+0x158>)
 8002eae:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b0a      	cmp	r3, #10
 8002eb6:	d003      	beq.n	8002ec0 <HAL_DMA2D_ConfigLayer+0x78>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b09      	cmp	r3, #9
 8002ebe:	d107      	bne.n	8002ed0 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
 8002ece:	e005      	b.n	8002edc <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	061b      	lsls	r3, r3, #24
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d120      	bne.n	8002f24 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	43db      	mvns	r3, r3
 8002eec:	ea02 0103 	and.w	r1, r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	6812      	ldr	r2, [r2, #0]
 8002f02:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b0a      	cmp	r3, #10
 8002f0a:	d003      	beq.n	8002f14 <HAL_DMA2D_ConfigLayer+0xcc>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b09      	cmp	r3, #9
 8002f12:	d135      	bne.n	8002f80 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	68da      	ldr	r2, [r3, #12]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002f20:	629a      	str	r2, [r3, #40]	; 0x28
 8002f22:	e02d      	b.n	8002f80 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b0b      	cmp	r3, #11
 8002f2a:	d109      	bne.n	8002f40 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	049b      	lsls	r3, r3, #18
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8002f3e:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	69da      	ldr	r2, [r3, #28]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	ea02 0103 	and.w	r1, r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	6812      	ldr	r2, [r2, #0]
 8002f60:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b0a      	cmp	r3, #10
 8002f68:	d003      	beq.n	8002f72 <HAL_DMA2D_ConfigLayer+0x12a>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b09      	cmp	r3, #9
 8002f70:	d106      	bne.n	8002f80 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002f7e:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	371c      	adds	r7, #28
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	ff33000f 	.word	0xff33000f

08002fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b089      	sub	sp, #36	; 0x24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002fb2:	4b89      	ldr	r3, [pc, #548]	; (80031d8 <HAL_GPIO_Init+0x234>)
 8002fb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002fb6:	e194      	b.n	80032e2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 8186 	beq.w	80032dc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d005      	beq.n	8002fe8 <HAL_GPIO_Init+0x44>
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f003 0303 	and.w	r3, r3, #3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d130      	bne.n	800304a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	2203      	movs	r2, #3
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4313      	orrs	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800301e:	2201      	movs	r2, #1
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	43db      	mvns	r3, r3
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4013      	ands	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	091b      	lsrs	r3, r3, #4
 8003034:	f003 0201 	and.w	r2, r3, #1
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4313      	orrs	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	2b03      	cmp	r3, #3
 8003054:	d017      	beq.n	8003086 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	2203      	movs	r2, #3
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	43db      	mvns	r3, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4013      	ands	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	689a      	ldr	r2, [r3, #8]
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4313      	orrs	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d123      	bne.n	80030da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	08da      	lsrs	r2, r3, #3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3208      	adds	r2, #8
 800309a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800309e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	220f      	movs	r2, #15
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4013      	ands	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	691a      	ldr	r2, [r3, #16]
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	08da      	lsrs	r2, r3, #3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3208      	adds	r2, #8
 80030d4:	69b9      	ldr	r1, [r7, #24]
 80030d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	2203      	movs	r2, #3
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	43db      	mvns	r3, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4013      	ands	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f003 0203 	and.w	r2, r3, #3
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	4313      	orrs	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 80e0 	beq.w	80032dc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800311c:	4b2f      	ldr	r3, [pc, #188]	; (80031dc <HAL_GPIO_Init+0x238>)
 800311e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003122:	4a2e      	ldr	r2, [pc, #184]	; (80031dc <HAL_GPIO_Init+0x238>)
 8003124:	f043 0302 	orr.w	r3, r3, #2
 8003128:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800312c:	4b2b      	ldr	r3, [pc, #172]	; (80031dc <HAL_GPIO_Init+0x238>)
 800312e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800313a:	4a29      	ldr	r2, [pc, #164]	; (80031e0 <HAL_GPIO_Init+0x23c>)
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	089b      	lsrs	r3, r3, #2
 8003140:	3302      	adds	r3, #2
 8003142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003146:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	220f      	movs	r2, #15
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	43db      	mvns	r3, r3
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4013      	ands	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a20      	ldr	r2, [pc, #128]	; (80031e4 <HAL_GPIO_Init+0x240>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d052      	beq.n	800320c <HAL_GPIO_Init+0x268>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a1f      	ldr	r2, [pc, #124]	; (80031e8 <HAL_GPIO_Init+0x244>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d031      	beq.n	80031d2 <HAL_GPIO_Init+0x22e>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a1e      	ldr	r2, [pc, #120]	; (80031ec <HAL_GPIO_Init+0x248>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d02b      	beq.n	80031ce <HAL_GPIO_Init+0x22a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a1d      	ldr	r2, [pc, #116]	; (80031f0 <HAL_GPIO_Init+0x24c>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d025      	beq.n	80031ca <HAL_GPIO_Init+0x226>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a1c      	ldr	r2, [pc, #112]	; (80031f4 <HAL_GPIO_Init+0x250>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d01f      	beq.n	80031c6 <HAL_GPIO_Init+0x222>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a1b      	ldr	r2, [pc, #108]	; (80031f8 <HAL_GPIO_Init+0x254>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d019      	beq.n	80031c2 <HAL_GPIO_Init+0x21e>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a1a      	ldr	r2, [pc, #104]	; (80031fc <HAL_GPIO_Init+0x258>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d013      	beq.n	80031be <HAL_GPIO_Init+0x21a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a19      	ldr	r2, [pc, #100]	; (8003200 <HAL_GPIO_Init+0x25c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d00d      	beq.n	80031ba <HAL_GPIO_Init+0x216>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a18      	ldr	r2, [pc, #96]	; (8003204 <HAL_GPIO_Init+0x260>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d007      	beq.n	80031b6 <HAL_GPIO_Init+0x212>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a17      	ldr	r2, [pc, #92]	; (8003208 <HAL_GPIO_Init+0x264>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d101      	bne.n	80031b2 <HAL_GPIO_Init+0x20e>
 80031ae:	2309      	movs	r3, #9
 80031b0:	e02d      	b.n	800320e <HAL_GPIO_Init+0x26a>
 80031b2:	230a      	movs	r3, #10
 80031b4:	e02b      	b.n	800320e <HAL_GPIO_Init+0x26a>
 80031b6:	2308      	movs	r3, #8
 80031b8:	e029      	b.n	800320e <HAL_GPIO_Init+0x26a>
 80031ba:	2307      	movs	r3, #7
 80031bc:	e027      	b.n	800320e <HAL_GPIO_Init+0x26a>
 80031be:	2306      	movs	r3, #6
 80031c0:	e025      	b.n	800320e <HAL_GPIO_Init+0x26a>
 80031c2:	2305      	movs	r3, #5
 80031c4:	e023      	b.n	800320e <HAL_GPIO_Init+0x26a>
 80031c6:	2304      	movs	r3, #4
 80031c8:	e021      	b.n	800320e <HAL_GPIO_Init+0x26a>
 80031ca:	2303      	movs	r3, #3
 80031cc:	e01f      	b.n	800320e <HAL_GPIO_Init+0x26a>
 80031ce:	2302      	movs	r3, #2
 80031d0:	e01d      	b.n	800320e <HAL_GPIO_Init+0x26a>
 80031d2:	2301      	movs	r3, #1
 80031d4:	e01b      	b.n	800320e <HAL_GPIO_Init+0x26a>
 80031d6:	bf00      	nop
 80031d8:	58000080 	.word	0x58000080
 80031dc:	58024400 	.word	0x58024400
 80031e0:	58000400 	.word	0x58000400
 80031e4:	58020000 	.word	0x58020000
 80031e8:	58020400 	.word	0x58020400
 80031ec:	58020800 	.word	0x58020800
 80031f0:	58020c00 	.word	0x58020c00
 80031f4:	58021000 	.word	0x58021000
 80031f8:	58021400 	.word	0x58021400
 80031fc:	58021800 	.word	0x58021800
 8003200:	58021c00 	.word	0x58021c00
 8003204:	58022000 	.word	0x58022000
 8003208:	58022400 	.word	0x58022400
 800320c:	2300      	movs	r3, #0
 800320e:	69fa      	ldr	r2, [r7, #28]
 8003210:	f002 0203 	and.w	r2, r2, #3
 8003214:	0092      	lsls	r2, r2, #2
 8003216:	4093      	lsls	r3, r2
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4313      	orrs	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800321e:	4938      	ldr	r1, [pc, #224]	; (8003300 <HAL_GPIO_Init+0x35c>)
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	089b      	lsrs	r3, r3, #2
 8003224:	3302      	adds	r3, #2
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800322c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	43db      	mvns	r3, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4013      	ands	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003252:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800325a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	43db      	mvns	r3, r3
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	4013      	ands	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	4313      	orrs	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003280:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	43db      	mvns	r3, r3
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	4013      	ands	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	43db      	mvns	r3, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4013      	ands	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	3301      	adds	r3, #1
 80032e0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	fa22 f303 	lsr.w	r3, r2, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f47f ae63 	bne.w	8002fb8 <HAL_GPIO_Init+0x14>
  }
}
 80032f2:	bf00      	nop
 80032f4:	bf00      	nop
 80032f6:	3724      	adds	r7, #36	; 0x24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	58000400 	.word	0x58000400

08003304 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	460b      	mov	r3, r1
 800330e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691a      	ldr	r2, [r3, #16]
 8003314:	887b      	ldrh	r3, [r7, #2]
 8003316:	4013      	ands	r3, r2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d002      	beq.n	8003322 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800331c:	2301      	movs	r3, #1
 800331e:	73fb      	strb	r3, [r7, #15]
 8003320:	e001      	b.n	8003326 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003322:	2300      	movs	r3, #0
 8003324:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003326:	7bfb      	ldrb	r3, [r7, #15]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3714      	adds	r7, #20
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	460b      	mov	r3, r1
 800333e:	807b      	strh	r3, [r7, #2]
 8003340:	4613      	mov	r3, r2
 8003342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003344:	787b      	ldrb	r3, [r7, #1]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800334a:	887a      	ldrh	r2, [r7, #2]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003350:	e003      	b.n	800335a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003352:	887b      	ldrh	r3, [r7, #2]
 8003354:	041a      	lsls	r2, r3, #16
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	619a      	str	r2, [r3, #24]
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
	...

08003368 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e0bf      	b.n	80034fa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7fd ff9a 	bl	80012c8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699a      	ldr	r2, [r3, #24]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80033aa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6999      	ldr	r1, [r3, #24]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80033c0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6899      	ldr	r1, [r3, #8]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	4b4a      	ldr	r3, [pc, #296]	; (8003504 <HAL_LTDC_Init+0x19c>)
 80033dc:	400b      	ands	r3, r1
 80033de:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	041b      	lsls	r3, r3, #16
 80033e6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6899      	ldr	r1, [r3, #8]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	699a      	ldr	r2, [r3, #24]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	431a      	orrs	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68d9      	ldr	r1, [r3, #12]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	4b3e      	ldr	r3, [pc, #248]	; (8003504 <HAL_LTDC_Init+0x19c>)
 800340a:	400b      	ands	r3, r1
 800340c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	041b      	lsls	r3, r3, #16
 8003414:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68d9      	ldr	r1, [r3, #12]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a1a      	ldr	r2, [r3, #32]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6919      	ldr	r1, [r3, #16]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	4b33      	ldr	r3, [pc, #204]	; (8003504 <HAL_LTDC_Init+0x19c>)
 8003438:	400b      	ands	r3, r1
 800343a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	041b      	lsls	r3, r3, #16
 8003442:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6919      	ldr	r1, [r3, #16]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	431a      	orrs	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6959      	ldr	r1, [r3, #20]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	4b27      	ldr	r3, [pc, #156]	; (8003504 <HAL_LTDC_Init+0x19c>)
 8003466:	400b      	ands	r3, r1
 8003468:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346e:	041b      	lsls	r3, r3, #16
 8003470:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6959      	ldr	r1, [r3, #20]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800348e:	021b      	lsls	r3, r3, #8
 8003490:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003498:	041b      	lsls	r3, r3, #16
 800349a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80034aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0206 	orr.w	r2, r2, #6
 80034d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699a      	ldr	r2, [r3, #24]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0201 	orr.w	r2, r2, #1
 80034e6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	f000f800 	.word	0xf000f800

08003508 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003516:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800351e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f003 0304 	and.w	r3, r3, #4
 8003526:	2b00      	cmp	r3, #0
 8003528:	d023      	beq.n	8003572 <HAL_LTDC_IRQHandler+0x6a>
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b00      	cmp	r3, #0
 8003532:	d01e      	beq.n	8003572 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 0204 	bic.w	r2, r2, #4
 8003542:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2204      	movs	r2, #4
 800354a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003552:	f043 0201 	orr.w	r2, r3, #1
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2204      	movs	r2, #4
 8003560:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 f86f 	bl	8003650 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d023      	beq.n	80035c4 <HAL_LTDC_IRQHandler+0xbc>
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d01e      	beq.n	80035c4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 0202 	bic.w	r2, r2, #2
 8003594:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2202      	movs	r2, #2
 800359c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80035a4:	f043 0202 	orr.w	r2, r3, #2
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2204      	movs	r2, #4
 80035b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f846 	bl	8003650 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d01b      	beq.n	8003606 <HAL_LTDC_IRQHandler+0xfe>
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d016      	beq.n	8003606 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0201 	bic.w	r2, r2, #1
 80035e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2201      	movs	r2, #1
 80035ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f82f 	bl	8003664 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b00      	cmp	r3, #0
 800360e:	d01b      	beq.n	8003648 <HAL_LTDC_IRQHandler+0x140>
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d016      	beq.n	8003648 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 0208 	bic.w	r2, r2, #8
 8003628:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2208      	movs	r2, #8
 8003630:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f818 	bl	8003678 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003648:	bf00      	nop
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800368c:	b5b0      	push	{r4, r5, r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d101      	bne.n	80036a6 <HAL_LTDC_ConfigLayer+0x1a>
 80036a2:	2302      	movs	r3, #2
 80036a4:	e02c      	b.n	8003700 <HAL_LTDC_ConfigLayer+0x74>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2202      	movs	r2, #2
 80036b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2134      	movs	r1, #52	; 0x34
 80036bc:	fb01 f303 	mul.w	r3, r1, r3
 80036c0:	4413      	add	r3, r2
 80036c2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	4614      	mov	r4, r2
 80036ca:	461d      	mov	r5, r3
 80036cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036d8:	682b      	ldr	r3, [r5, #0]
 80036da:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	68b9      	ldr	r1, [r7, #8]
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f000 f811 	bl	8003708 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2201      	movs	r2, #1
 80036ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bdb0      	pop	{r4, r5, r7, pc}

08003708 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003708:	b480      	push	{r7}
 800370a:	b089      	sub	sp, #36	; 0x24
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	0c1b      	lsrs	r3, r3, #16
 8003720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003724:	4413      	add	r3, r2
 8003726:	041b      	lsls	r3, r3, #16
 8003728:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	461a      	mov	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	01db      	lsls	r3, r3, #7
 8003734:	4413      	add	r3, r2
 8003736:	3384      	adds	r3, #132	; 0x84
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	6812      	ldr	r2, [r2, #0]
 800373e:	4611      	mov	r1, r2
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	01d2      	lsls	r2, r2, #7
 8003744:	440a      	add	r2, r1
 8003746:	3284      	adds	r2, #132	; 0x84
 8003748:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800374c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	0c1b      	lsrs	r3, r3, #16
 800375a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800375e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003760:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4619      	mov	r1, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	01db      	lsls	r3, r3, #7
 800376c:	440b      	add	r3, r1
 800376e:	3384      	adds	r3, #132	; 0x84
 8003770:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003776:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003786:	4413      	add	r3, r2
 8003788:	041b      	lsls	r3, r3, #16
 800378a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	461a      	mov	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	01db      	lsls	r3, r3, #7
 8003796:	4413      	add	r3, r2
 8003798:	3384      	adds	r3, #132	; 0x84
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	6812      	ldr	r2, [r2, #0]
 80037a0:	4611      	mov	r1, r2
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	01d2      	lsls	r2, r2, #7
 80037a6:	440a      	add	r2, r1
 80037a8:	3284      	adds	r2, #132	; 0x84
 80037aa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80037ae:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037be:	4413      	add	r3, r2
 80037c0:	1c5a      	adds	r2, r3, #1
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4619      	mov	r1, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	01db      	lsls	r3, r3, #7
 80037cc:	440b      	add	r3, r1
 80037ce:	3384      	adds	r3, #132	; 0x84
 80037d0:	4619      	mov	r1, r3
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	461a      	mov	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	01db      	lsls	r3, r3, #7
 80037e2:	4413      	add	r3, r2
 80037e4:	3384      	adds	r3, #132	; 0x84
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	6812      	ldr	r2, [r2, #0]
 80037ec:	4611      	mov	r1, r2
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	01d2      	lsls	r2, r2, #7
 80037f2:	440a      	add	r2, r1
 80037f4:	3284      	adds	r2, #132	; 0x84
 80037f6:	f023 0307 	bic.w	r3, r3, #7
 80037fa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	461a      	mov	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	01db      	lsls	r3, r3, #7
 8003806:	4413      	add	r3, r2
 8003808:	3384      	adds	r3, #132	; 0x84
 800380a:	461a      	mov	r2, r3
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003818:	021b      	lsls	r3, r3, #8
 800381a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003822:	041b      	lsls	r3, r3, #16
 8003824:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	061b      	lsls	r3, r3, #24
 800382c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	461a      	mov	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	01db      	lsls	r3, r3, #7
 8003838:	4413      	add	r3, r2
 800383a:	3384      	adds	r3, #132	; 0x84
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	461a      	mov	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	01db      	lsls	r3, r3, #7
 8003848:	4413      	add	r3, r2
 800384a:	3384      	adds	r3, #132	; 0x84
 800384c:	461a      	mov	r2, r3
 800384e:	2300      	movs	r3, #0
 8003850:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003858:	461a      	mov	r2, r3
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	431a      	orrs	r2, r3
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	431a      	orrs	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4619      	mov	r1, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	01db      	lsls	r3, r3, #7
 800386c:	440b      	add	r3, r1
 800386e:	3384      	adds	r3, #132	; 0x84
 8003870:	4619      	mov	r1, r3
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	4313      	orrs	r3, r2
 8003876:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	461a      	mov	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	01db      	lsls	r3, r3, #7
 8003882:	4413      	add	r3, r2
 8003884:	3384      	adds	r3, #132	; 0x84
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	6812      	ldr	r2, [r2, #0]
 800388c:	4611      	mov	r1, r2
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	01d2      	lsls	r2, r2, #7
 8003892:	440a      	add	r2, r1
 8003894:	3284      	adds	r2, #132	; 0x84
 8003896:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800389a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	461a      	mov	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	01db      	lsls	r3, r3, #7
 80038a6:	4413      	add	r3, r2
 80038a8:	3384      	adds	r3, #132	; 0x84
 80038aa:	461a      	mov	r2, r3
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	461a      	mov	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	01db      	lsls	r3, r3, #7
 80038bc:	4413      	add	r3, r2
 80038be:	3384      	adds	r3, #132	; 0x84
 80038c0:	69da      	ldr	r2, [r3, #28]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4619      	mov	r1, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	01db      	lsls	r3, r3, #7
 80038cc:	440b      	add	r3, r1
 80038ce:	3384      	adds	r3, #132	; 0x84
 80038d0:	4619      	mov	r1, r3
 80038d2:	4b58      	ldr	r3, [pc, #352]	; (8003a34 <LTDC_SetConfig+0x32c>)
 80038d4:	4013      	ands	r3, r2
 80038d6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	69da      	ldr	r2, [r3, #28]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	68f9      	ldr	r1, [r7, #12]
 80038e2:	6809      	ldr	r1, [r1, #0]
 80038e4:	4608      	mov	r0, r1
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	01c9      	lsls	r1, r1, #7
 80038ea:	4401      	add	r1, r0
 80038ec:	3184      	adds	r1, #132	; 0x84
 80038ee:	4313      	orrs	r3, r2
 80038f0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	461a      	mov	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	01db      	lsls	r3, r3, #7
 80038fc:	4413      	add	r3, r2
 80038fe:	3384      	adds	r3, #132	; 0x84
 8003900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	461a      	mov	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	01db      	lsls	r3, r3, #7
 800390c:	4413      	add	r3, r2
 800390e:	3384      	adds	r3, #132	; 0x84
 8003910:	461a      	mov	r2, r3
 8003912:	2300      	movs	r3, #0
 8003914:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	461a      	mov	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	01db      	lsls	r3, r3, #7
 8003920:	4413      	add	r3, r2
 8003922:	3384      	adds	r3, #132	; 0x84
 8003924:	461a      	mov	r2, r3
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d102      	bne.n	800393a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8003934:	2304      	movs	r3, #4
 8003936:	61fb      	str	r3, [r7, #28]
 8003938:	e01b      	b.n	8003972 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d102      	bne.n	8003948 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8003942:	2303      	movs	r3, #3
 8003944:	61fb      	str	r3, [r7, #28]
 8003946:	e014      	b.n	8003972 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	2b04      	cmp	r3, #4
 800394e:	d00b      	beq.n	8003968 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003954:	2b02      	cmp	r3, #2
 8003956:	d007      	beq.n	8003968 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800395c:	2b03      	cmp	r3, #3
 800395e:	d003      	beq.n	8003968 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003964:	2b07      	cmp	r3, #7
 8003966:	d102      	bne.n	800396e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8003968:	2302      	movs	r3, #2
 800396a:	61fb      	str	r3, [r7, #28]
 800396c:	e001      	b.n	8003972 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800396e:	2301      	movs	r3, #1
 8003970:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	461a      	mov	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	01db      	lsls	r3, r3, #7
 800397c:	4413      	add	r3, r2
 800397e:	3384      	adds	r3, #132	; 0x84
 8003980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	6812      	ldr	r2, [r2, #0]
 8003986:	4611      	mov	r1, r2
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	01d2      	lsls	r2, r2, #7
 800398c:	440a      	add	r2, r1
 800398e:	3284      	adds	r2, #132	; 0x84
 8003990:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003994:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399a:	69fa      	ldr	r2, [r7, #28]
 800399c:	fb02 f303 	mul.w	r3, r2, r3
 80039a0:	041a      	lsls	r2, r3, #16
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	6859      	ldr	r1, [r3, #4]
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	1acb      	subs	r3, r1, r3
 80039ac:	69f9      	ldr	r1, [r7, #28]
 80039ae:	fb01 f303 	mul.w	r3, r1, r3
 80039b2:	3307      	adds	r3, #7
 80039b4:	68f9      	ldr	r1, [r7, #12]
 80039b6:	6809      	ldr	r1, [r1, #0]
 80039b8:	4608      	mov	r0, r1
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	01c9      	lsls	r1, r1, #7
 80039be:	4401      	add	r1, r0
 80039c0:	3184      	adds	r1, #132	; 0x84
 80039c2:	4313      	orrs	r3, r2
 80039c4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	01db      	lsls	r3, r3, #7
 80039d0:	4413      	add	r3, r2
 80039d2:	3384      	adds	r3, #132	; 0x84
 80039d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4619      	mov	r1, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	01db      	lsls	r3, r3, #7
 80039e0:	440b      	add	r3, r1
 80039e2:	3384      	adds	r3, #132	; 0x84
 80039e4:	4619      	mov	r1, r3
 80039e6:	4b14      	ldr	r3, [pc, #80]	; (8003a38 <LTDC_SetConfig+0x330>)
 80039e8:	4013      	ands	r3, r2
 80039ea:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	461a      	mov	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	01db      	lsls	r3, r3, #7
 80039f6:	4413      	add	r3, r2
 80039f8:	3384      	adds	r3, #132	; 0x84
 80039fa:	461a      	mov	r2, r3
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a00:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	461a      	mov	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	01db      	lsls	r3, r3, #7
 8003a0c:	4413      	add	r3, r2
 8003a0e:	3384      	adds	r3, #132	; 0x84
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	6812      	ldr	r2, [r2, #0]
 8003a16:	4611      	mov	r1, r2
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	01d2      	lsls	r2, r2, #7
 8003a1c:	440a      	add	r2, r1
 8003a1e:	3284      	adds	r2, #132	; 0x84
 8003a20:	f043 0301 	orr.w	r3, r3, #1
 8003a24:	6013      	str	r3, [r2, #0]
}
 8003a26:	bf00      	nop
 8003a28:	3724      	adds	r7, #36	; 0x24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	fffff8f8 	.word	0xfffff8f8
 8003a38:	fffff800 	.word	0xfffff800

08003a3c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003a44:	4b19      	ldr	r3, [pc, #100]	; (8003aac <HAL_PWREx_ConfigSupply+0x70>)
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b04      	cmp	r3, #4
 8003a4e:	d00a      	beq.n	8003a66 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003a50:	4b16      	ldr	r3, [pc, #88]	; (8003aac <HAL_PWREx_ConfigSupply+0x70>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d001      	beq.n	8003a62 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e01f      	b.n	8003aa2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	e01d      	b.n	8003aa2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003a66:	4b11      	ldr	r3, [pc, #68]	; (8003aac <HAL_PWREx_ConfigSupply+0x70>)
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f023 0207 	bic.w	r2, r3, #7
 8003a6e:	490f      	ldr	r1, [pc, #60]	; (8003aac <HAL_PWREx_ConfigSupply+0x70>)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003a76:	f7fe f9cb 	bl	8001e10 <HAL_GetTick>
 8003a7a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a7c:	e009      	b.n	8003a92 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a7e:	f7fe f9c7 	bl	8001e10 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a8c:	d901      	bls.n	8003a92 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e007      	b.n	8003aa2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a92:	4b06      	ldr	r3, [pc, #24]	; (8003aac <HAL_PWREx_ConfigSupply+0x70>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a9e:	d1ee      	bne.n	8003a7e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	58024800 	.word	0x58024800

08003ab0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af02      	add	r7, sp, #8
 8003ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003ab8:	f7fe f9aa 	bl	8001e10 <HAL_GetTick>
 8003abc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e05f      	b.n	8003b88 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d107      	bne.n	8003ae4 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7fd fced 	bl	80014b4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003ada:	f241 3188 	movw	r1, #5000	; 0x1388
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f9e7 	bl	8003eb2 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	3b01      	subs	r3, #1
 8003af4:	021a      	lsls	r2, r3, #8
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	2120      	movs	r1, #32
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f9df 	bl	8003ece <QSPI_WaitFlagStateUntilTimeout>
 8003b10:	4603      	mov	r3, r0
 8003b12:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003b14:	7afb      	ldrb	r3, [r7, #11]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d135      	bne.n	8003b86 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	4b1b      	ldr	r3, [pc, #108]	; (8003b90 <HAL_QSPI_Init+0xe0>)
 8003b22:	4013      	ands	r3, r2
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6852      	ldr	r2, [r2, #4]
 8003b28:	0611      	lsls	r1, r2, #24
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	68d2      	ldr	r2, [r2, #12]
 8003b2e:	4311      	orrs	r1, r2
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	69d2      	ldr	r2, [r2, #28]
 8003b34:	4311      	orrs	r1, r2
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6a12      	ldr	r2, [r2, #32]
 8003b3a:	4311      	orrs	r1, r2
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6812      	ldr	r2, [r2, #0]
 8003b40:	430b      	orrs	r3, r1
 8003b42:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	4b12      	ldr	r3, [pc, #72]	; (8003b94 <HAL_QSPI_Init+0xe4>)
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6912      	ldr	r2, [r2, #16]
 8003b52:	0411      	lsls	r1, r2, #16
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6952      	ldr	r2, [r2, #20]
 8003b58:	4311      	orrs	r1, r2
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6992      	ldr	r2, [r2, #24]
 8003b5e:	4311      	orrs	r1, r2
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6812      	ldr	r2, [r2, #0]
 8003b64:	430b      	orrs	r3, r1
 8003b66:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0201 	orr.w	r2, r2, #1
 8003b76:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8003b86:	7afb      	ldrb	r3, [r7, #11]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	00ffff2f 	.word	0x00ffff2f
 8003b94:	ffe0f8fe 	.word	0xffe0f8fe

08003b98 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b088      	sub	sp, #32
 8003b9c:	af02      	add	r7, sp, #8
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003ba4:	f7fe f934 	bl	8001e10 <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d101      	bne.n	8003bba <HAL_QSPI_Command+0x22>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	e048      	b.n	8003c4c <HAL_QSPI_Command+0xb4>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d137      	bne.n	8003c3e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	2200      	movs	r2, #0
 8003be4:	2120      	movs	r1, #32
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f000 f971 	bl	8003ece <QSPI_WaitFlagStateUntilTimeout>
 8003bec:	4603      	mov	r3, r0
 8003bee:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003bf0:	7dfb      	ldrb	r3, [r7, #23]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d125      	bne.n	8003c42 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	68b9      	ldr	r1, [r7, #8]
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 f99e 	bl	8003f3c <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d115      	bne.n	8003c34 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	2102      	movs	r1, #2
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 f95b 	bl	8003ece <QSPI_WaitFlagStateUntilTimeout>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8003c1c:	7dfb      	ldrb	r3, [r7, #23]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10f      	bne.n	8003c42 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2202      	movs	r2, #2
 8003c28:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c32:	e006      	b.n	8003c42 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c3c:	e001      	b.n	8003c42 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8003c3e:	2302      	movs	r3, #2
 8003c40:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8003c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b08a      	sub	sp, #40	; 0x28
 8003c58:	af02      	add	r7, sp, #8
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c60:	2300      	movs	r3, #0
 8003c62:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8003c64:	f7fe f8d4 	bl	8001e10 <HAL_GetTick>
 8003c68:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	3320      	adds	r3, #32
 8003c70:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d101      	bne.n	8003c82 <HAL_QSPI_Transmit+0x2e>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	e076      	b.n	8003d70 <HAL_QSPI_Transmit+0x11c>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d165      	bne.n	8003d62 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d056      	beq.n	8003d50 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2212      	movs	r2, #18
 8003ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695a      	ldr	r2, [r3, #20]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003cd6:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8003cd8:	e01b      	b.n	8003d12 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	2104      	movs	r1, #4
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f000 f8f2 	bl	8003ece <QSPI_WaitFlagStateUntilTimeout>
 8003cea:	4603      	mov	r3, r0
 8003cec:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8003cee:	7ffb      	ldrb	r3, [r7, #31]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d113      	bne.n	8003d1c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	781a      	ldrb	r2, [r3, #0]
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0c:	1e5a      	subs	r2, r3, #1
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1df      	bne.n	8003cda <HAL_QSPI_Transmit+0x86>
 8003d1a:	e000      	b.n	8003d1e <HAL_QSPI_Transmit+0xca>
          break;
 8003d1c:	bf00      	nop
      }

      if (status == HAL_OK)
 8003d1e:	7ffb      	ldrb	r3, [r7, #31]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d110      	bne.n	8003d46 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	2102      	movs	r1, #2
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 f8cd 	bl	8003ece <QSPI_WaitFlagStateUntilTimeout>
 8003d34:	4603      	mov	r3, r0
 8003d36:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8003d38:	7ffb      	ldrb	r3, [r7, #31]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d103      	bne.n	8003d46 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2202      	movs	r2, #2
 8003d44:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d4e:	e00a      	b.n	8003d66 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d54:	f043 0208 	orr.w	r2, r3, #8
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	77fb      	strb	r3, [r7, #31]
 8003d60:	e001      	b.n	8003d66 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003d62:	2302      	movs	r3, #2
 8003d64:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8003d6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3720      	adds	r7, #32
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08a      	sub	sp, #40	; 0x28
 8003d7c:	af02      	add	r7, sp, #8
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d84:	2300      	movs	r3, #0
 8003d86:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8003d88:	f7fe f842 	bl	8001e10 <HAL_GetTick>
 8003d8c:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	3320      	adds	r3, #32
 8003d9c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d101      	bne.n	8003dae <HAL_QSPI_Receive+0x36>
 8003daa:	2302      	movs	r3, #2
 8003dac:	e07d      	b.n	8003eaa <HAL_QSPI_Receive+0x132>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d16c      	bne.n	8003e9c <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d05d      	beq.n	8003e8a <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2222      	movs	r2, #34	; 0x22
 8003dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	1c5a      	adds	r2, r3, #1
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	1c5a      	adds	r2, r3, #1
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003e06:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8003e10:	e01c      	b.n	8003e4c <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	2106      	movs	r1, #6
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 f856 	bl	8003ece <QSPI_WaitFlagStateUntilTimeout>
 8003e22:	4603      	mov	r3, r0
 8003e24:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8003e26:	7ffb      	ldrb	r3, [r7, #31]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d114      	bne.n	8003e56 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	7812      	ldrb	r2, [r2, #0]
 8003e34:	b2d2      	uxtb	r2, r2
 8003e36:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e46:	1e5a      	subs	r2, r3, #1
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1de      	bne.n	8003e12 <HAL_QSPI_Receive+0x9a>
 8003e54:	e000      	b.n	8003e58 <HAL_QSPI_Receive+0xe0>
          break;
 8003e56:	bf00      	nop
      }

      if (status == HAL_OK)
 8003e58:	7ffb      	ldrb	r3, [r7, #31]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d110      	bne.n	8003e80 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	2201      	movs	r2, #1
 8003e66:	2102      	movs	r1, #2
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 f830 	bl	8003ece <QSPI_WaitFlagStateUntilTimeout>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8003e72:	7ffb      	ldrb	r3, [r7, #31]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d103      	bne.n	8003e80 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2202      	movs	r2, #2
 8003e7e:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e88:	e00a      	b.n	8003ea0 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8e:	f043 0208 	orr.w	r2, r3, #8
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	77fb      	strb	r3, [r7, #31]
 8003e9a:	e001      	b.n	8003ea0 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8003ea8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3720      	adds	r7, #32
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
 8003eba:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	649a      	str	r2, [r3, #72]	; 0x48
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b084      	sub	sp, #16
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	60f8      	str	r0, [r7, #12]
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	603b      	str	r3, [r7, #0]
 8003eda:	4613      	mov	r3, r2
 8003edc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003ede:	e01a      	b.n	8003f16 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee6:	d016      	beq.n	8003f16 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee8:	f7fd ff92 	bl	8001e10 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d302      	bcc.n	8003efe <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10b      	bne.n	8003f16 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2204      	movs	r2, #4
 8003f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0a:	f043 0201 	orr.w	r2, r3, #1
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e00e      	b.n	8003f34 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	bf14      	ite	ne
 8003f24:	2301      	movne	r3, #1
 8003f26:	2300      	moveq	r3, #0
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	79fb      	ldrb	r3, [r7, #7]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d1d6      	bne.n	8003ee0 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d009      	beq.n	8003f64 <QSPI_Config+0x28>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003f56:	d005      	beq.n	8003f64 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	3a01      	subs	r2, #1
 8003f62:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 80b9 	beq.w	80040e0 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d05f      	beq.n	8004036 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	6892      	ldr	r2, [r2, #8]
 8003f7e:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d031      	beq.n	8003fec <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f90:	431a      	orrs	r2, r3
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f96:	431a      	orrs	r2, r3
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	049b      	lsls	r3, r3, #18
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	431a      	orrs	r2, r3
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	ea42 0103 	orr.w	r1, r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003fdc:	f000 812e 	beq.w	800423c <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	6852      	ldr	r2, [r2, #4]
 8003fe8:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8003fea:	e127      	b.n	800423c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	431a      	orrs	r2, r3
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	049b      	lsls	r3, r3, #18
 8004008:	431a      	orrs	r2, r3
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	431a      	orrs	r2, r3
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	431a      	orrs	r2, r3
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	431a      	orrs	r2, r3
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	431a      	orrs	r2, r3
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	ea42 0103 	orr.w	r1, r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	430a      	orrs	r2, r1
 8004032:	615a      	str	r2, [r3, #20]
}
 8004034:	e102      	b.n	800423c <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d02e      	beq.n	800409c <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004046:	431a      	orrs	r2, r3
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800404c:	431a      	orrs	r2, r3
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	431a      	orrs	r2, r3
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	049b      	lsls	r3, r3, #18
 800405a:	431a      	orrs	r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	431a      	orrs	r2, r3
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	431a      	orrs	r2, r3
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	431a      	orrs	r2, r3
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	431a      	orrs	r2, r3
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	ea42 0103 	orr.w	r1, r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	430a      	orrs	r2, r1
 8004084:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800408c:	f000 80d6 	beq.w	800423c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	6852      	ldr	r2, [r2, #4]
 8004098:	619a      	str	r2, [r3, #24]
}
 800409a:	e0cf      	b.n	800423c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a4:	431a      	orrs	r2, r3
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040aa:	431a      	orrs	r2, r3
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	431a      	orrs	r2, r3
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	049b      	lsls	r3, r3, #18
 80040b8:	431a      	orrs	r2, r3
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	431a      	orrs	r2, r3
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	431a      	orrs	r2, r3
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	431a      	orrs	r2, r3
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	ea42 0103 	orr.w	r1, r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	430a      	orrs	r2, r1
 80040dc:	615a      	str	r2, [r3, #20]
}
 80040de:	e0ad      	b.n	800423c <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	6a1b      	ldr	r3, [r3, #32]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d058      	beq.n	800419a <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	6892      	ldr	r2, [r2, #8]
 80040f0:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d02d      	beq.n	8004156 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004102:	431a      	orrs	r2, r3
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004108:	431a      	orrs	r2, r3
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	431a      	orrs	r2, r3
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	049b      	lsls	r3, r3, #18
 8004116:	431a      	orrs	r2, r3
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	431a      	orrs	r2, r3
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	431a      	orrs	r2, r3
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	431a      	orrs	r2, r3
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	431a      	orrs	r2, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	ea42 0103 	orr.w	r1, r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	430a      	orrs	r2, r1
 8004140:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004148:	d078      	beq.n	800423c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	6852      	ldr	r2, [r2, #4]
 8004152:	619a      	str	r2, [r3, #24]
}
 8004154:	e072      	b.n	800423c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415e:	431a      	orrs	r2, r3
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004164:	431a      	orrs	r2, r3
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416a:	431a      	orrs	r2, r3
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	049b      	lsls	r3, r3, #18
 8004172:	431a      	orrs	r2, r3
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	431a      	orrs	r2, r3
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	431a      	orrs	r2, r3
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	431a      	orrs	r2, r3
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	ea42 0103 	orr.w	r1, r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	430a      	orrs	r2, r1
 8004196:	615a      	str	r2, [r3, #20]
}
 8004198:	e050      	b.n	800423c <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d02a      	beq.n	80041f8 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041aa:	431a      	orrs	r2, r3
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b0:	431a      	orrs	r2, r3
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	431a      	orrs	r2, r3
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	049b      	lsls	r3, r3, #18
 80041be:	431a      	orrs	r2, r3
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	431a      	orrs	r2, r3
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	431a      	orrs	r2, r3
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	69db      	ldr	r3, [r3, #28]
 80041d0:	431a      	orrs	r2, r3
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	ea42 0103 	orr.w	r1, r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80041ea:	d027      	beq.n	800423c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	6852      	ldr	r2, [r2, #4]
 80041f4:	619a      	str	r2, [r3, #24]
}
 80041f6:	e021      	b.n	800423c <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d01d      	beq.n	800423c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004208:	431a      	orrs	r2, r3
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800420e:	431a      	orrs	r2, r3
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	431a      	orrs	r2, r3
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	049b      	lsls	r3, r3, #18
 800421c:	431a      	orrs	r2, r3
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	431a      	orrs	r2, r3
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	431a      	orrs	r2, r3
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	ea42 0103 	orr.w	r1, r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	430a      	orrs	r2, r1
 800423a:	615a      	str	r2, [r3, #20]
}
 800423c:	bf00      	nop
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08c      	sub	sp, #48	; 0x30
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d102      	bne.n	800425c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	f000 bc48 	b.w	8004aec <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 8088 	beq.w	800437a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800426a:	4b99      	ldr	r3, [pc, #612]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004272:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004274:	4b96      	ldr	r3, [pc, #600]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 8004276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004278:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800427a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427c:	2b10      	cmp	r3, #16
 800427e:	d007      	beq.n	8004290 <HAL_RCC_OscConfig+0x48>
 8004280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004282:	2b18      	cmp	r3, #24
 8004284:	d111      	bne.n	80042aa <HAL_RCC_OscConfig+0x62>
 8004286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004288:	f003 0303 	and.w	r3, r3, #3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d10c      	bne.n	80042aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004290:	4b8f      	ldr	r3, [pc, #572]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d06d      	beq.n	8004378 <HAL_RCC_OscConfig+0x130>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d169      	bne.n	8004378 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	f000 bc21 	b.w	8004aec <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042b2:	d106      	bne.n	80042c2 <HAL_RCC_OscConfig+0x7a>
 80042b4:	4b86      	ldr	r3, [pc, #536]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a85      	ldr	r2, [pc, #532]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 80042ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042be:	6013      	str	r3, [r2, #0]
 80042c0:	e02e      	b.n	8004320 <HAL_RCC_OscConfig+0xd8>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10c      	bne.n	80042e4 <HAL_RCC_OscConfig+0x9c>
 80042ca:	4b81      	ldr	r3, [pc, #516]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a80      	ldr	r2, [pc, #512]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 80042d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042d4:	6013      	str	r3, [r2, #0]
 80042d6:	4b7e      	ldr	r3, [pc, #504]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a7d      	ldr	r2, [pc, #500]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 80042dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042e0:	6013      	str	r3, [r2, #0]
 80042e2:	e01d      	b.n	8004320 <HAL_RCC_OscConfig+0xd8>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042ec:	d10c      	bne.n	8004308 <HAL_RCC_OscConfig+0xc0>
 80042ee:	4b78      	ldr	r3, [pc, #480]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a77      	ldr	r2, [pc, #476]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 80042f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	4b75      	ldr	r3, [pc, #468]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a74      	ldr	r2, [pc, #464]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 8004300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004304:	6013      	str	r3, [r2, #0]
 8004306:	e00b      	b.n	8004320 <HAL_RCC_OscConfig+0xd8>
 8004308:	4b71      	ldr	r3, [pc, #452]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a70      	ldr	r2, [pc, #448]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 800430e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004312:	6013      	str	r3, [r2, #0]
 8004314:	4b6e      	ldr	r3, [pc, #440]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a6d      	ldr	r2, [pc, #436]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 800431a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800431e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d013      	beq.n	8004350 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004328:	f7fd fd72 	bl	8001e10 <HAL_GetTick>
 800432c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004330:	f7fd fd6e 	bl	8001e10 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b64      	cmp	r3, #100	; 0x64
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e3d4      	b.n	8004aec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004342:	4b63      	ldr	r3, [pc, #396]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0f0      	beq.n	8004330 <HAL_RCC_OscConfig+0xe8>
 800434e:	e014      	b.n	800437a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004350:	f7fd fd5e 	bl	8001e10 <HAL_GetTick>
 8004354:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004358:	f7fd fd5a 	bl	8001e10 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b64      	cmp	r3, #100	; 0x64
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e3c0      	b.n	8004aec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800436a:	4b59      	ldr	r3, [pc, #356]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1f0      	bne.n	8004358 <HAL_RCC_OscConfig+0x110>
 8004376:	e000      	b.n	800437a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	f000 80ca 	beq.w	800451c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004388:	4b51      	ldr	r3, [pc, #324]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004390:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004392:	4b4f      	ldr	r3, [pc, #316]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 8004394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004396:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d007      	beq.n	80043ae <HAL_RCC_OscConfig+0x166>
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	2b18      	cmp	r3, #24
 80043a2:	d156      	bne.n	8004452 <HAL_RCC_OscConfig+0x20a>
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d151      	bne.n	8004452 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043ae:	4b48      	ldr	r3, [pc, #288]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0304 	and.w	r3, r3, #4
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d005      	beq.n	80043c6 <HAL_RCC_OscConfig+0x17e>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e392      	b.n	8004aec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80043c6:	4b42      	ldr	r3, [pc, #264]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f023 0219 	bic.w	r2, r3, #25
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	493f      	ldr	r1, [pc, #252]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d8:	f7fd fd1a 	bl	8001e10 <HAL_GetTick>
 80043dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043e0:	f7fd fd16 	bl	8001e10 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e37c      	b.n	8004aec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043f2:	4b37      	ldr	r3, [pc, #220]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0304 	and.w	r3, r3, #4
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0f0      	beq.n	80043e0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043fe:	f7fd fd13 	bl	8001e28 <HAL_GetREVID>
 8004402:	4603      	mov	r3, r0
 8004404:	f241 0203 	movw	r2, #4099	; 0x1003
 8004408:	4293      	cmp	r3, r2
 800440a:	d817      	bhi.n	800443c <HAL_RCC_OscConfig+0x1f4>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	2b40      	cmp	r3, #64	; 0x40
 8004412:	d108      	bne.n	8004426 <HAL_RCC_OscConfig+0x1de>
 8004414:	4b2e      	ldr	r3, [pc, #184]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800441c:	4a2c      	ldr	r2, [pc, #176]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 800441e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004422:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004424:	e07a      	b.n	800451c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004426:	4b2a      	ldr	r3, [pc, #168]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	031b      	lsls	r3, r3, #12
 8004434:	4926      	ldr	r1, [pc, #152]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 8004436:	4313      	orrs	r3, r2
 8004438:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800443a:	e06f      	b.n	800451c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800443c:	4b24      	ldr	r3, [pc, #144]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	061b      	lsls	r3, r3, #24
 800444a:	4921      	ldr	r1, [pc, #132]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 800444c:	4313      	orrs	r3, r2
 800444e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004450:	e064      	b.n	800451c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d047      	beq.n	80044ea <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800445a:	4b1d      	ldr	r3, [pc, #116]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f023 0219 	bic.w	r2, r3, #25
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	491a      	ldr	r1, [pc, #104]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 8004468:	4313      	orrs	r3, r2
 800446a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446c:	f7fd fcd0 	bl	8001e10 <HAL_GetTick>
 8004470:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004474:	f7fd fccc 	bl	8001e10 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e332      	b.n	8004aec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004486:	4b12      	ldr	r3, [pc, #72]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0304 	and.w	r3, r3, #4
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0f0      	beq.n	8004474 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004492:	f7fd fcc9 	bl	8001e28 <HAL_GetREVID>
 8004496:	4603      	mov	r3, r0
 8004498:	f241 0203 	movw	r2, #4099	; 0x1003
 800449c:	4293      	cmp	r3, r2
 800449e:	d819      	bhi.n	80044d4 <HAL_RCC_OscConfig+0x28c>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	2b40      	cmp	r3, #64	; 0x40
 80044a6:	d108      	bne.n	80044ba <HAL_RCC_OscConfig+0x272>
 80044a8:	4b09      	ldr	r3, [pc, #36]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80044b0:	4a07      	ldr	r2, [pc, #28]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 80044b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044b6:	6053      	str	r3, [r2, #4]
 80044b8:	e030      	b.n	800451c <HAL_RCC_OscConfig+0x2d4>
 80044ba:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	031b      	lsls	r3, r3, #12
 80044c8:	4901      	ldr	r1, [pc, #4]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	604b      	str	r3, [r1, #4]
 80044ce:	e025      	b.n	800451c <HAL_RCC_OscConfig+0x2d4>
 80044d0:	58024400 	.word	0x58024400
 80044d4:	4b9a      	ldr	r3, [pc, #616]	; (8004740 <HAL_RCC_OscConfig+0x4f8>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	061b      	lsls	r3, r3, #24
 80044e2:	4997      	ldr	r1, [pc, #604]	; (8004740 <HAL_RCC_OscConfig+0x4f8>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	604b      	str	r3, [r1, #4]
 80044e8:	e018      	b.n	800451c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ea:	4b95      	ldr	r3, [pc, #596]	; (8004740 <HAL_RCC_OscConfig+0x4f8>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a94      	ldr	r2, [pc, #592]	; (8004740 <HAL_RCC_OscConfig+0x4f8>)
 80044f0:	f023 0301 	bic.w	r3, r3, #1
 80044f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f6:	f7fd fc8b 	bl	8001e10 <HAL_GetTick>
 80044fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80044fc:	e008      	b.n	8004510 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044fe:	f7fd fc87 	bl	8001e10 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b02      	cmp	r3, #2
 800450a:	d901      	bls.n	8004510 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e2ed      	b.n	8004aec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004510:	4b8b      	ldr	r3, [pc, #556]	; (8004740 <HAL_RCC_OscConfig+0x4f8>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0304 	and.w	r3, r3, #4
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1f0      	bne.n	80044fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0310 	and.w	r3, r3, #16
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 80a9 	beq.w	800467c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800452a:	4b85      	ldr	r3, [pc, #532]	; (8004740 <HAL_RCC_OscConfig+0x4f8>)
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004532:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004534:	4b82      	ldr	r3, [pc, #520]	; (8004740 <HAL_RCC_OscConfig+0x4f8>)
 8004536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004538:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	2b08      	cmp	r3, #8
 800453e:	d007      	beq.n	8004550 <HAL_RCC_OscConfig+0x308>
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	2b18      	cmp	r3, #24
 8004544:	d13a      	bne.n	80045bc <HAL_RCC_OscConfig+0x374>
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f003 0303 	and.w	r3, r3, #3
 800454c:	2b01      	cmp	r3, #1
 800454e:	d135      	bne.n	80045bc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004550:	4b7b      	ldr	r3, [pc, #492]	; (8004740 <HAL_RCC_OscConfig+0x4f8>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004558:	2b00      	cmp	r3, #0
 800455a:	d005      	beq.n	8004568 <HAL_RCC_OscConfig+0x320>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	2b80      	cmp	r3, #128	; 0x80
 8004562:	d001      	beq.n	8004568 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e2c1      	b.n	8004aec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004568:	f7fd fc5e 	bl	8001e28 <HAL_GetREVID>
 800456c:	4603      	mov	r3, r0
 800456e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004572:	4293      	cmp	r3, r2
 8004574:	d817      	bhi.n	80045a6 <HAL_RCC_OscConfig+0x35e>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	2b20      	cmp	r3, #32
 800457c:	d108      	bne.n	8004590 <HAL_RCC_OscConfig+0x348>
 800457e:	4b70      	ldr	r3, [pc, #448]	; (8004740 <HAL_RCC_OscConfig+0x4f8>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004586:	4a6e      	ldr	r2, [pc, #440]	; (8004740 <HAL_RCC_OscConfig+0x4f8>)
 8004588:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800458c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800458e:	e075      	b.n	800467c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004590:	4b6b      	ldr	r3, [pc, #428]	; (8004740 <HAL_RCC_OscConfig+0x4f8>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	069b      	lsls	r3, r3, #26
 800459e:	4968      	ldr	r1, [pc, #416]	; (8004740 <HAL_RCC_OscConfig+0x4f8>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045a4:	e06a      	b.n	800467c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045a6:	4b66      	ldr	r3, [pc, #408]	; (8004740 <HAL_RCC_OscConfig+0x4f8>)
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	061b      	lsls	r3, r3, #24
 80045b4:	4962      	ldr	r1, [pc, #392]	; (8004740 <HAL_RCC_OscConfig+0x4f8>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045ba:	e05f      	b.n	800467c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d042      	beq.n	800464a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80045c4:	4b5e      	ldr	r3, [pc, #376]	; (8004740 <HAL_RCC_OscConfig+0x4f8>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a5d      	ldr	r2, [pc, #372]	; (8004740 <HAL_RCC_OscConfig+0x4f8>)
 80045ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d0:	f7fd fc1e 	bl	8001e10 <HAL_GetTick>
 80045d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80045d8:	f7fd fc1a 	bl	8001e10 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e280      	b.n	8004aec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80045ea:	4b55      	ldr	r3, [pc, #340]	; (8004740 <HAL_RCC_OscConfig+0x4f8>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0f0      	beq.n	80045d8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045f6:	f7fd fc17 	bl	8001e28 <HAL_GetREVID>
 80045fa:	4603      	mov	r3, r0
 80045fc:	f241 0203 	movw	r2, #4099	; 0x1003
 8004600:	4293      	cmp	r3, r2
 8004602:	d817      	bhi.n	8004634 <HAL_RCC_OscConfig+0x3ec>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	2b20      	cmp	r3, #32
 800460a:	d108      	bne.n	800461e <HAL_RCC_OscConfig+0x3d6>
 800460c:	4b4c      	ldr	r3, [pc, #304]	; (8004740 <HAL_RCC_OscConfig+0x4f8>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004614:	4a4a      	ldr	r2, [pc, #296]	; (8004740 <HAL_RCC_OscConfig+0x4f8>)
 8004616:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800461a:	6053      	str	r3, [r2, #4]
 800461c:	e02e      	b.n	800467c <HAL_RCC_OscConfig+0x434>
 800461e:	4b48      	ldr	r3, [pc, #288]	; (8004740 <HAL_RCC_OscConfig+0x4f8>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	069b      	lsls	r3, r3, #26
 800462c:	4944      	ldr	r1, [pc, #272]	; (8004740 <HAL_RCC_OscConfig+0x4f8>)
 800462e:	4313      	orrs	r3, r2
 8004630:	604b      	str	r3, [r1, #4]
 8004632:	e023      	b.n	800467c <HAL_RCC_OscConfig+0x434>
 8004634:	4b42      	ldr	r3, [pc, #264]	; (8004740 <HAL_RCC_OscConfig+0x4f8>)
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	061b      	lsls	r3, r3, #24
 8004642:	493f      	ldr	r1, [pc, #252]	; (8004740 <HAL_RCC_OscConfig+0x4f8>)
 8004644:	4313      	orrs	r3, r2
 8004646:	60cb      	str	r3, [r1, #12]
 8004648:	e018      	b.n	800467c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800464a:	4b3d      	ldr	r3, [pc, #244]	; (8004740 <HAL_RCC_OscConfig+0x4f8>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a3c      	ldr	r2, [pc, #240]	; (8004740 <HAL_RCC_OscConfig+0x4f8>)
 8004650:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004654:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004656:	f7fd fbdb 	bl	8001e10 <HAL_GetTick>
 800465a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800465c:	e008      	b.n	8004670 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800465e:	f7fd fbd7 	bl	8001e10 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e23d      	b.n	8004aec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004670:	4b33      	ldr	r3, [pc, #204]	; (8004740 <HAL_RCC_OscConfig+0x4f8>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1f0      	bne.n	800465e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0308 	and.w	r3, r3, #8
 8004684:	2b00      	cmp	r3, #0
 8004686:	d036      	beq.n	80046f6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d019      	beq.n	80046c4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004690:	4b2b      	ldr	r3, [pc, #172]	; (8004740 <HAL_RCC_OscConfig+0x4f8>)
 8004692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004694:	4a2a      	ldr	r2, [pc, #168]	; (8004740 <HAL_RCC_OscConfig+0x4f8>)
 8004696:	f043 0301 	orr.w	r3, r3, #1
 800469a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800469c:	f7fd fbb8 	bl	8001e10 <HAL_GetTick>
 80046a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046a4:	f7fd fbb4 	bl	8001e10 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e21a      	b.n	8004aec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80046b6:	4b22      	ldr	r3, [pc, #136]	; (8004740 <HAL_RCC_OscConfig+0x4f8>)
 80046b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0f0      	beq.n	80046a4 <HAL_RCC_OscConfig+0x45c>
 80046c2:	e018      	b.n	80046f6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046c4:	4b1e      	ldr	r3, [pc, #120]	; (8004740 <HAL_RCC_OscConfig+0x4f8>)
 80046c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046c8:	4a1d      	ldr	r2, [pc, #116]	; (8004740 <HAL_RCC_OscConfig+0x4f8>)
 80046ca:	f023 0301 	bic.w	r3, r3, #1
 80046ce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d0:	f7fd fb9e 	bl	8001e10 <HAL_GetTick>
 80046d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046d8:	f7fd fb9a 	bl	8001e10 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e200      	b.n	8004aec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80046ea:	4b15      	ldr	r3, [pc, #84]	; (8004740 <HAL_RCC_OscConfig+0x4f8>)
 80046ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1f0      	bne.n	80046d8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0320 	and.w	r3, r3, #32
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d039      	beq.n	8004776 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d01c      	beq.n	8004744 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800470a:	4b0d      	ldr	r3, [pc, #52]	; (8004740 <HAL_RCC_OscConfig+0x4f8>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a0c      	ldr	r2, [pc, #48]	; (8004740 <HAL_RCC_OscConfig+0x4f8>)
 8004710:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004714:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004716:	f7fd fb7b 	bl	8001e10 <HAL_GetTick>
 800471a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800471c:	e008      	b.n	8004730 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800471e:	f7fd fb77 	bl	8001e10 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d901      	bls.n	8004730 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e1dd      	b.n	8004aec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004730:	4b03      	ldr	r3, [pc, #12]	; (8004740 <HAL_RCC_OscConfig+0x4f8>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0f0      	beq.n	800471e <HAL_RCC_OscConfig+0x4d6>
 800473c:	e01b      	b.n	8004776 <HAL_RCC_OscConfig+0x52e>
 800473e:	bf00      	nop
 8004740:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004744:	4b9b      	ldr	r3, [pc, #620]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a9a      	ldr	r2, [pc, #616]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 800474a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800474e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004750:	f7fd fb5e 	bl	8001e10 <HAL_GetTick>
 8004754:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004758:	f7fd fb5a 	bl	8001e10 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e1c0      	b.n	8004aec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800476a:	4b92      	ldr	r3, [pc, #584]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1f0      	bne.n	8004758 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0304 	and.w	r3, r3, #4
 800477e:	2b00      	cmp	r3, #0
 8004780:	f000 8081 	beq.w	8004886 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004784:	4b8c      	ldr	r3, [pc, #560]	; (80049b8 <HAL_RCC_OscConfig+0x770>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a8b      	ldr	r2, [pc, #556]	; (80049b8 <HAL_RCC_OscConfig+0x770>)
 800478a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800478e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004790:	f7fd fb3e 	bl	8001e10 <HAL_GetTick>
 8004794:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004798:	f7fd fb3a 	bl	8001e10 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b64      	cmp	r3, #100	; 0x64
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e1a0      	b.n	8004aec <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047aa:	4b83      	ldr	r3, [pc, #524]	; (80049b8 <HAL_RCC_OscConfig+0x770>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d0f0      	beq.n	8004798 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d106      	bne.n	80047cc <HAL_RCC_OscConfig+0x584>
 80047be:	4b7d      	ldr	r3, [pc, #500]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 80047c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c2:	4a7c      	ldr	r2, [pc, #496]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 80047c4:	f043 0301 	orr.w	r3, r3, #1
 80047c8:	6713      	str	r3, [r2, #112]	; 0x70
 80047ca:	e02d      	b.n	8004828 <HAL_RCC_OscConfig+0x5e0>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10c      	bne.n	80047ee <HAL_RCC_OscConfig+0x5a6>
 80047d4:	4b77      	ldr	r3, [pc, #476]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 80047d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d8:	4a76      	ldr	r2, [pc, #472]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 80047da:	f023 0301 	bic.w	r3, r3, #1
 80047de:	6713      	str	r3, [r2, #112]	; 0x70
 80047e0:	4b74      	ldr	r3, [pc, #464]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 80047e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e4:	4a73      	ldr	r2, [pc, #460]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 80047e6:	f023 0304 	bic.w	r3, r3, #4
 80047ea:	6713      	str	r3, [r2, #112]	; 0x70
 80047ec:	e01c      	b.n	8004828 <HAL_RCC_OscConfig+0x5e0>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	2b05      	cmp	r3, #5
 80047f4:	d10c      	bne.n	8004810 <HAL_RCC_OscConfig+0x5c8>
 80047f6:	4b6f      	ldr	r3, [pc, #444]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 80047f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fa:	4a6e      	ldr	r2, [pc, #440]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 80047fc:	f043 0304 	orr.w	r3, r3, #4
 8004800:	6713      	str	r3, [r2, #112]	; 0x70
 8004802:	4b6c      	ldr	r3, [pc, #432]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 8004804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004806:	4a6b      	ldr	r2, [pc, #428]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 8004808:	f043 0301 	orr.w	r3, r3, #1
 800480c:	6713      	str	r3, [r2, #112]	; 0x70
 800480e:	e00b      	b.n	8004828 <HAL_RCC_OscConfig+0x5e0>
 8004810:	4b68      	ldr	r3, [pc, #416]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 8004812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004814:	4a67      	ldr	r2, [pc, #412]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 8004816:	f023 0301 	bic.w	r3, r3, #1
 800481a:	6713      	str	r3, [r2, #112]	; 0x70
 800481c:	4b65      	ldr	r3, [pc, #404]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 800481e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004820:	4a64      	ldr	r2, [pc, #400]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 8004822:	f023 0304 	bic.w	r3, r3, #4
 8004826:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d015      	beq.n	800485c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004830:	f7fd faee 	bl	8001e10 <HAL_GetTick>
 8004834:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004836:	e00a      	b.n	800484e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004838:	f7fd faea 	bl	8001e10 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	f241 3288 	movw	r2, #5000	; 0x1388
 8004846:	4293      	cmp	r3, r2
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e14e      	b.n	8004aec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800484e:	4b59      	ldr	r3, [pc, #356]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 8004850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d0ee      	beq.n	8004838 <HAL_RCC_OscConfig+0x5f0>
 800485a:	e014      	b.n	8004886 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800485c:	f7fd fad8 	bl	8001e10 <HAL_GetTick>
 8004860:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004862:	e00a      	b.n	800487a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004864:	f7fd fad4 	bl	8001e10 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004872:	4293      	cmp	r3, r2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e138      	b.n	8004aec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800487a:	4b4e      	ldr	r3, [pc, #312]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 800487c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1ee      	bne.n	8004864 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 812d 	beq.w	8004aea <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004890:	4b48      	ldr	r3, [pc, #288]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004898:	2b18      	cmp	r3, #24
 800489a:	f000 80bd 	beq.w	8004a18 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	f040 809e 	bne.w	80049e4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048a8:	4b42      	ldr	r3, [pc, #264]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a41      	ldr	r2, [pc, #260]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 80048ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b4:	f7fd faac 	bl	8001e10 <HAL_GetTick>
 80048b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048bc:	f7fd faa8 	bl	8001e10 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e10e      	b.n	8004aec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048ce:	4b39      	ldr	r3, [pc, #228]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1f0      	bne.n	80048bc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048da:	4b36      	ldr	r3, [pc, #216]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 80048dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048de:	4b37      	ldr	r3, [pc, #220]	; (80049bc <HAL_RCC_OscConfig+0x774>)
 80048e0:	4013      	ands	r3, r2
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80048ea:	0112      	lsls	r2, r2, #4
 80048ec:	430a      	orrs	r2, r1
 80048ee:	4931      	ldr	r1, [pc, #196]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	628b      	str	r3, [r1, #40]	; 0x28
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f8:	3b01      	subs	r3, #1
 80048fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004902:	3b01      	subs	r3, #1
 8004904:	025b      	lsls	r3, r3, #9
 8004906:	b29b      	uxth	r3, r3
 8004908:	431a      	orrs	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490e:	3b01      	subs	r3, #1
 8004910:	041b      	lsls	r3, r3, #16
 8004912:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491c:	3b01      	subs	r3, #1
 800491e:	061b      	lsls	r3, r3, #24
 8004920:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004924:	4923      	ldr	r1, [pc, #140]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 8004926:	4313      	orrs	r3, r2
 8004928:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800492a:	4b22      	ldr	r3, [pc, #136]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 800492c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492e:	4a21      	ldr	r2, [pc, #132]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 8004930:	f023 0301 	bic.w	r3, r3, #1
 8004934:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004936:	4b1f      	ldr	r3, [pc, #124]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 8004938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800493a:	4b21      	ldr	r3, [pc, #132]	; (80049c0 <HAL_RCC_OscConfig+0x778>)
 800493c:	4013      	ands	r3, r2
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004942:	00d2      	lsls	r2, r2, #3
 8004944:	491b      	ldr	r1, [pc, #108]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 8004946:	4313      	orrs	r3, r2
 8004948:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800494a:	4b1a      	ldr	r3, [pc, #104]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 800494c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494e:	f023 020c 	bic.w	r2, r3, #12
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	4917      	ldr	r1, [pc, #92]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 8004958:	4313      	orrs	r3, r2
 800495a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800495c:	4b15      	ldr	r3, [pc, #84]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 800495e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004960:	f023 0202 	bic.w	r2, r3, #2
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004968:	4912      	ldr	r1, [pc, #72]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 800496a:	4313      	orrs	r3, r2
 800496c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800496e:	4b11      	ldr	r3, [pc, #68]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 8004970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004972:	4a10      	ldr	r2, [pc, #64]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 8004974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004978:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800497a:	4b0e      	ldr	r3, [pc, #56]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 800497c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497e:	4a0d      	ldr	r2, [pc, #52]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 8004980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004984:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004986:	4b0b      	ldr	r3, [pc, #44]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 8004988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498a:	4a0a      	ldr	r2, [pc, #40]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 800498c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004990:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004992:	4b08      	ldr	r3, [pc, #32]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 8004994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004996:	4a07      	ldr	r2, [pc, #28]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 8004998:	f043 0301 	orr.w	r3, r3, #1
 800499c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800499e:	4b05      	ldr	r3, [pc, #20]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a04      	ldr	r2, [pc, #16]	; (80049b4 <HAL_RCC_OscConfig+0x76c>)
 80049a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049aa:	f7fd fa31 	bl	8001e10 <HAL_GetTick>
 80049ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049b0:	e011      	b.n	80049d6 <HAL_RCC_OscConfig+0x78e>
 80049b2:	bf00      	nop
 80049b4:	58024400 	.word	0x58024400
 80049b8:	58024800 	.word	0x58024800
 80049bc:	fffffc0c 	.word	0xfffffc0c
 80049c0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c4:	f7fd fa24 	bl	8001e10 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e08a      	b.n	8004aec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049d6:	4b47      	ldr	r3, [pc, #284]	; (8004af4 <HAL_RCC_OscConfig+0x8ac>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d0f0      	beq.n	80049c4 <HAL_RCC_OscConfig+0x77c>
 80049e2:	e082      	b.n	8004aea <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049e4:	4b43      	ldr	r3, [pc, #268]	; (8004af4 <HAL_RCC_OscConfig+0x8ac>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a42      	ldr	r2, [pc, #264]	; (8004af4 <HAL_RCC_OscConfig+0x8ac>)
 80049ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f0:	f7fd fa0e 	bl	8001e10 <HAL_GetTick>
 80049f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f8:	f7fd fa0a 	bl	8001e10 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e070      	b.n	8004aec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a0a:	4b3a      	ldr	r3, [pc, #232]	; (8004af4 <HAL_RCC_OscConfig+0x8ac>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1f0      	bne.n	80049f8 <HAL_RCC_OscConfig+0x7b0>
 8004a16:	e068      	b.n	8004aea <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004a18:	4b36      	ldr	r3, [pc, #216]	; (8004af4 <HAL_RCC_OscConfig+0x8ac>)
 8004a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004a1e:	4b35      	ldr	r3, [pc, #212]	; (8004af4 <HAL_RCC_OscConfig+0x8ac>)
 8004a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a22:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d031      	beq.n	8004a90 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f003 0203 	and.w	r2, r3, #3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d12a      	bne.n	8004a90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	091b      	lsrs	r3, r3, #4
 8004a3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d122      	bne.n	8004a90 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a54:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d11a      	bne.n	8004a90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	0a5b      	lsrs	r3, r3, #9
 8004a5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a66:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d111      	bne.n	8004a90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	0c1b      	lsrs	r3, r3, #16
 8004a70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a78:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d108      	bne.n	8004a90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	0e1b      	lsrs	r3, r3, #24
 8004a82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a8a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d001      	beq.n	8004a94 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e02b      	b.n	8004aec <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004a94:	4b17      	ldr	r3, [pc, #92]	; (8004af4 <HAL_RCC_OscConfig+0x8ac>)
 8004a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a98:	08db      	lsrs	r3, r3, #3
 8004a9a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a9e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d01f      	beq.n	8004aea <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004aaa:	4b12      	ldr	r3, [pc, #72]	; (8004af4 <HAL_RCC_OscConfig+0x8ac>)
 8004aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aae:	4a11      	ldr	r2, [pc, #68]	; (8004af4 <HAL_RCC_OscConfig+0x8ac>)
 8004ab0:	f023 0301 	bic.w	r3, r3, #1
 8004ab4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ab6:	f7fd f9ab 	bl	8001e10 <HAL_GetTick>
 8004aba:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004abc:	bf00      	nop
 8004abe:	f7fd f9a7 	bl	8001e10 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d0f9      	beq.n	8004abe <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004aca:	4b0a      	ldr	r3, [pc, #40]	; (8004af4 <HAL_RCC_OscConfig+0x8ac>)
 8004acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ace:	4b0a      	ldr	r3, [pc, #40]	; (8004af8 <HAL_RCC_OscConfig+0x8b0>)
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004ad6:	00d2      	lsls	r2, r2, #3
 8004ad8:	4906      	ldr	r1, [pc, #24]	; (8004af4 <HAL_RCC_OscConfig+0x8ac>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004ade:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <HAL_RCC_OscConfig+0x8ac>)
 8004ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae2:	4a04      	ldr	r2, [pc, #16]	; (8004af4 <HAL_RCC_OscConfig+0x8ac>)
 8004ae4:	f043 0301 	orr.w	r3, r3, #1
 8004ae8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3730      	adds	r7, #48	; 0x30
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	58024400 	.word	0x58024400
 8004af8:	ffff0007 	.word	0xffff0007

08004afc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e19c      	b.n	8004e4a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b10:	4b8a      	ldr	r3, [pc, #552]	; (8004d3c <HAL_RCC_ClockConfig+0x240>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 030f 	and.w	r3, r3, #15
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d910      	bls.n	8004b40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b1e:	4b87      	ldr	r3, [pc, #540]	; (8004d3c <HAL_RCC_ClockConfig+0x240>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f023 020f 	bic.w	r2, r3, #15
 8004b26:	4985      	ldr	r1, [pc, #532]	; (8004d3c <HAL_RCC_ClockConfig+0x240>)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b2e:	4b83      	ldr	r3, [pc, #524]	; (8004d3c <HAL_RCC_ClockConfig+0x240>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 030f 	and.w	r3, r3, #15
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d001      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e184      	b.n	8004e4a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d010      	beq.n	8004b6e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691a      	ldr	r2, [r3, #16]
 8004b50:	4b7b      	ldr	r3, [pc, #492]	; (8004d40 <HAL_RCC_ClockConfig+0x244>)
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d908      	bls.n	8004b6e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b5c:	4b78      	ldr	r3, [pc, #480]	; (8004d40 <HAL_RCC_ClockConfig+0x244>)
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	4975      	ldr	r1, [pc, #468]	; (8004d40 <HAL_RCC_ClockConfig+0x244>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0308 	and.w	r3, r3, #8
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d010      	beq.n	8004b9c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	695a      	ldr	r2, [r3, #20]
 8004b7e:	4b70      	ldr	r3, [pc, #448]	; (8004d40 <HAL_RCC_ClockConfig+0x244>)
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d908      	bls.n	8004b9c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004b8a:	4b6d      	ldr	r3, [pc, #436]	; (8004d40 <HAL_RCC_ClockConfig+0x244>)
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	496a      	ldr	r1, [pc, #424]	; (8004d40 <HAL_RCC_ClockConfig+0x244>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0310 	and.w	r3, r3, #16
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d010      	beq.n	8004bca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	699a      	ldr	r2, [r3, #24]
 8004bac:	4b64      	ldr	r3, [pc, #400]	; (8004d40 <HAL_RCC_ClockConfig+0x244>)
 8004bae:	69db      	ldr	r3, [r3, #28]
 8004bb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d908      	bls.n	8004bca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004bb8:	4b61      	ldr	r3, [pc, #388]	; (8004d40 <HAL_RCC_ClockConfig+0x244>)
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	495e      	ldr	r1, [pc, #376]	; (8004d40 <HAL_RCC_ClockConfig+0x244>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0320 	and.w	r3, r3, #32
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d010      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	69da      	ldr	r2, [r3, #28]
 8004bda:	4b59      	ldr	r3, [pc, #356]	; (8004d40 <HAL_RCC_ClockConfig+0x244>)
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d908      	bls.n	8004bf8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004be6:	4b56      	ldr	r3, [pc, #344]	; (8004d40 <HAL_RCC_ClockConfig+0x244>)
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	4953      	ldr	r1, [pc, #332]	; (8004d40 <HAL_RCC_ClockConfig+0x244>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d010      	beq.n	8004c26 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68da      	ldr	r2, [r3, #12]
 8004c08:	4b4d      	ldr	r3, [pc, #308]	; (8004d40 <HAL_RCC_ClockConfig+0x244>)
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	f003 030f 	and.w	r3, r3, #15
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d908      	bls.n	8004c26 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c14:	4b4a      	ldr	r3, [pc, #296]	; (8004d40 <HAL_RCC_ClockConfig+0x244>)
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	f023 020f 	bic.w	r2, r3, #15
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	4947      	ldr	r1, [pc, #284]	; (8004d40 <HAL_RCC_ClockConfig+0x244>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d055      	beq.n	8004cde <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004c32:	4b43      	ldr	r3, [pc, #268]	; (8004d40 <HAL_RCC_ClockConfig+0x244>)
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	4940      	ldr	r1, [pc, #256]	; (8004d40 <HAL_RCC_ClockConfig+0x244>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d107      	bne.n	8004c5c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c4c:	4b3c      	ldr	r3, [pc, #240]	; (8004d40 <HAL_RCC_ClockConfig+0x244>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d121      	bne.n	8004c9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e0f6      	b.n	8004e4a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2b03      	cmp	r3, #3
 8004c62:	d107      	bne.n	8004c74 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c64:	4b36      	ldr	r3, [pc, #216]	; (8004d40 <HAL_RCC_ClockConfig+0x244>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d115      	bne.n	8004c9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e0ea      	b.n	8004e4a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d107      	bne.n	8004c8c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c7c:	4b30      	ldr	r3, [pc, #192]	; (8004d40 <HAL_RCC_ClockConfig+0x244>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d109      	bne.n	8004c9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e0de      	b.n	8004e4a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c8c:	4b2c      	ldr	r3, [pc, #176]	; (8004d40 <HAL_RCC_ClockConfig+0x244>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d101      	bne.n	8004c9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e0d6      	b.n	8004e4a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c9c:	4b28      	ldr	r3, [pc, #160]	; (8004d40 <HAL_RCC_ClockConfig+0x244>)
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	f023 0207 	bic.w	r2, r3, #7
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	4925      	ldr	r1, [pc, #148]	; (8004d40 <HAL_RCC_ClockConfig+0x244>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cae:	f7fd f8af 	bl	8001e10 <HAL_GetTick>
 8004cb2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb4:	e00a      	b.n	8004ccc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cb6:	f7fd f8ab 	bl	8001e10 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d901      	bls.n	8004ccc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e0be      	b.n	8004e4a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ccc:	4b1c      	ldr	r3, [pc, #112]	; (8004d40 <HAL_RCC_ClockConfig+0x244>)
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	00db      	lsls	r3, r3, #3
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d1eb      	bne.n	8004cb6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d010      	beq.n	8004d0c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68da      	ldr	r2, [r3, #12]
 8004cee:	4b14      	ldr	r3, [pc, #80]	; (8004d40 <HAL_RCC_ClockConfig+0x244>)
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	f003 030f 	and.w	r3, r3, #15
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d208      	bcs.n	8004d0c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cfa:	4b11      	ldr	r3, [pc, #68]	; (8004d40 <HAL_RCC_ClockConfig+0x244>)
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	f023 020f 	bic.w	r2, r3, #15
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	490e      	ldr	r1, [pc, #56]	; (8004d40 <HAL_RCC_ClockConfig+0x244>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d0c:	4b0b      	ldr	r3, [pc, #44]	; (8004d3c <HAL_RCC_ClockConfig+0x240>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 030f 	and.w	r3, r3, #15
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d214      	bcs.n	8004d44 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d1a:	4b08      	ldr	r3, [pc, #32]	; (8004d3c <HAL_RCC_ClockConfig+0x240>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f023 020f 	bic.w	r2, r3, #15
 8004d22:	4906      	ldr	r1, [pc, #24]	; (8004d3c <HAL_RCC_ClockConfig+0x240>)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d2a:	4b04      	ldr	r3, [pc, #16]	; (8004d3c <HAL_RCC_ClockConfig+0x240>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 030f 	and.w	r3, r3, #15
 8004d32:	683a      	ldr	r2, [r7, #0]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d005      	beq.n	8004d44 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e086      	b.n	8004e4a <HAL_RCC_ClockConfig+0x34e>
 8004d3c:	52002000 	.word	0x52002000
 8004d40:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d010      	beq.n	8004d72 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	691a      	ldr	r2, [r3, #16]
 8004d54:	4b3f      	ldr	r3, [pc, #252]	; (8004e54 <HAL_RCC_ClockConfig+0x358>)
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d208      	bcs.n	8004d72 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d60:	4b3c      	ldr	r3, [pc, #240]	; (8004e54 <HAL_RCC_ClockConfig+0x358>)
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	4939      	ldr	r1, [pc, #228]	; (8004e54 <HAL_RCC_ClockConfig+0x358>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0308 	and.w	r3, r3, #8
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d010      	beq.n	8004da0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	695a      	ldr	r2, [r3, #20]
 8004d82:	4b34      	ldr	r3, [pc, #208]	; (8004e54 <HAL_RCC_ClockConfig+0x358>)
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d208      	bcs.n	8004da0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004d8e:	4b31      	ldr	r3, [pc, #196]	; (8004e54 <HAL_RCC_ClockConfig+0x358>)
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	492e      	ldr	r1, [pc, #184]	; (8004e54 <HAL_RCC_ClockConfig+0x358>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0310 	and.w	r3, r3, #16
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d010      	beq.n	8004dce <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	699a      	ldr	r2, [r3, #24]
 8004db0:	4b28      	ldr	r3, [pc, #160]	; (8004e54 <HAL_RCC_ClockConfig+0x358>)
 8004db2:	69db      	ldr	r3, [r3, #28]
 8004db4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d208      	bcs.n	8004dce <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004dbc:	4b25      	ldr	r3, [pc, #148]	; (8004e54 <HAL_RCC_ClockConfig+0x358>)
 8004dbe:	69db      	ldr	r3, [r3, #28]
 8004dc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	4922      	ldr	r1, [pc, #136]	; (8004e54 <HAL_RCC_ClockConfig+0x358>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0320 	and.w	r3, r3, #32
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d010      	beq.n	8004dfc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	69da      	ldr	r2, [r3, #28]
 8004dde:	4b1d      	ldr	r3, [pc, #116]	; (8004e54 <HAL_RCC_ClockConfig+0x358>)
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d208      	bcs.n	8004dfc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004dea:	4b1a      	ldr	r3, [pc, #104]	; (8004e54 <HAL_RCC_ClockConfig+0x358>)
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	4917      	ldr	r1, [pc, #92]	; (8004e54 <HAL_RCC_ClockConfig+0x358>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004dfc:	f000 f834 	bl	8004e68 <HAL_RCC_GetSysClockFreq>
 8004e00:	4602      	mov	r2, r0
 8004e02:	4b14      	ldr	r3, [pc, #80]	; (8004e54 <HAL_RCC_ClockConfig+0x358>)
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	0a1b      	lsrs	r3, r3, #8
 8004e08:	f003 030f 	and.w	r3, r3, #15
 8004e0c:	4912      	ldr	r1, [pc, #72]	; (8004e58 <HAL_RCC_ClockConfig+0x35c>)
 8004e0e:	5ccb      	ldrb	r3, [r1, r3]
 8004e10:	f003 031f 	and.w	r3, r3, #31
 8004e14:	fa22 f303 	lsr.w	r3, r2, r3
 8004e18:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e1a:	4b0e      	ldr	r3, [pc, #56]	; (8004e54 <HAL_RCC_ClockConfig+0x358>)
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	f003 030f 	and.w	r3, r3, #15
 8004e22:	4a0d      	ldr	r2, [pc, #52]	; (8004e58 <HAL_RCC_ClockConfig+0x35c>)
 8004e24:	5cd3      	ldrb	r3, [r2, r3]
 8004e26:	f003 031f 	and.w	r3, r3, #31
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e30:	4a0a      	ldr	r2, [pc, #40]	; (8004e5c <HAL_RCC_ClockConfig+0x360>)
 8004e32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e34:	4a0a      	ldr	r2, [pc, #40]	; (8004e60 <HAL_RCC_ClockConfig+0x364>)
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004e3a:	4b0a      	ldr	r3, [pc, #40]	; (8004e64 <HAL_RCC_ClockConfig+0x368>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fc ff9c 	bl	8001d7c <HAL_InitTick>
 8004e44:	4603      	mov	r3, r0
 8004e46:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3718      	adds	r7, #24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	58024400 	.word	0x58024400
 8004e58:	0800ffa0 	.word	0x0800ffa0
 8004e5c:	24000004 	.word	0x24000004
 8004e60:	24000000 	.word	0x24000000
 8004e64:	24000008 	.word	0x24000008

08004e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b089      	sub	sp, #36	; 0x24
 8004e6c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e6e:	4bb3      	ldr	r3, [pc, #716]	; (800513c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e76:	2b18      	cmp	r3, #24
 8004e78:	f200 8155 	bhi.w	8005126 <HAL_RCC_GetSysClockFreq+0x2be>
 8004e7c:	a201      	add	r2, pc, #4	; (adr r2, 8004e84 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e82:	bf00      	nop
 8004e84:	08004ee9 	.word	0x08004ee9
 8004e88:	08005127 	.word	0x08005127
 8004e8c:	08005127 	.word	0x08005127
 8004e90:	08005127 	.word	0x08005127
 8004e94:	08005127 	.word	0x08005127
 8004e98:	08005127 	.word	0x08005127
 8004e9c:	08005127 	.word	0x08005127
 8004ea0:	08005127 	.word	0x08005127
 8004ea4:	08004f0f 	.word	0x08004f0f
 8004ea8:	08005127 	.word	0x08005127
 8004eac:	08005127 	.word	0x08005127
 8004eb0:	08005127 	.word	0x08005127
 8004eb4:	08005127 	.word	0x08005127
 8004eb8:	08005127 	.word	0x08005127
 8004ebc:	08005127 	.word	0x08005127
 8004ec0:	08005127 	.word	0x08005127
 8004ec4:	08004f15 	.word	0x08004f15
 8004ec8:	08005127 	.word	0x08005127
 8004ecc:	08005127 	.word	0x08005127
 8004ed0:	08005127 	.word	0x08005127
 8004ed4:	08005127 	.word	0x08005127
 8004ed8:	08005127 	.word	0x08005127
 8004edc:	08005127 	.word	0x08005127
 8004ee0:	08005127 	.word	0x08005127
 8004ee4:	08004f1b 	.word	0x08004f1b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ee8:	4b94      	ldr	r3, [pc, #592]	; (800513c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0320 	and.w	r3, r3, #32
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d009      	beq.n	8004f08 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ef4:	4b91      	ldr	r3, [pc, #580]	; (800513c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	08db      	lsrs	r3, r3, #3
 8004efa:	f003 0303 	and.w	r3, r3, #3
 8004efe:	4a90      	ldr	r2, [pc, #576]	; (8005140 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f00:	fa22 f303 	lsr.w	r3, r2, r3
 8004f04:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004f06:	e111      	b.n	800512c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004f08:	4b8d      	ldr	r3, [pc, #564]	; (8005140 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f0a:	61bb      	str	r3, [r7, #24]
      break;
 8004f0c:	e10e      	b.n	800512c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004f0e:	4b8d      	ldr	r3, [pc, #564]	; (8005144 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004f10:	61bb      	str	r3, [r7, #24]
      break;
 8004f12:	e10b      	b.n	800512c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004f14:	4b8c      	ldr	r3, [pc, #560]	; (8005148 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004f16:	61bb      	str	r3, [r7, #24]
      break;
 8004f18:	e108      	b.n	800512c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f1a:	4b88      	ldr	r3, [pc, #544]	; (800513c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004f24:	4b85      	ldr	r3, [pc, #532]	; (800513c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f28:	091b      	lsrs	r3, r3, #4
 8004f2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f2e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004f30:	4b82      	ldr	r3, [pc, #520]	; (800513c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004f3a:	4b80      	ldr	r3, [pc, #512]	; (800513c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f3e:	08db      	lsrs	r3, r3, #3
 8004f40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	fb02 f303 	mul.w	r3, r2, r3
 8004f4a:	ee07 3a90 	vmov	s15, r3
 8004f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f52:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 80e1 	beq.w	8005120 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	f000 8083 	beq.w	800506c <HAL_RCC_GetSysClockFreq+0x204>
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	f200 80a1 	bhi.w	80050b0 <HAL_RCC_GetSysClockFreq+0x248>
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d003      	beq.n	8004f7c <HAL_RCC_GetSysClockFreq+0x114>
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d056      	beq.n	8005028 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004f7a:	e099      	b.n	80050b0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f7c:	4b6f      	ldr	r3, [pc, #444]	; (800513c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0320 	and.w	r3, r3, #32
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d02d      	beq.n	8004fe4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f88:	4b6c      	ldr	r3, [pc, #432]	; (800513c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	08db      	lsrs	r3, r3, #3
 8004f8e:	f003 0303 	and.w	r3, r3, #3
 8004f92:	4a6b      	ldr	r2, [pc, #428]	; (8005140 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f94:	fa22 f303 	lsr.w	r3, r2, r3
 8004f98:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	ee07 3a90 	vmov	s15, r3
 8004fa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	ee07 3a90 	vmov	s15, r3
 8004faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fb2:	4b62      	ldr	r3, [pc, #392]	; (800513c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fba:	ee07 3a90 	vmov	s15, r3
 8004fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fc6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800514c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fde:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004fe2:	e087      	b.n	80050f4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	ee07 3a90 	vmov	s15, r3
 8004fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fee:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005150 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ff6:	4b51      	ldr	r3, [pc, #324]	; (800513c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ffe:	ee07 3a90 	vmov	s15, r3
 8005002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005006:	ed97 6a02 	vldr	s12, [r7, #8]
 800500a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800514c <HAL_RCC_GetSysClockFreq+0x2e4>
 800500e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800501a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800501e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005022:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005026:	e065      	b.n	80050f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	ee07 3a90 	vmov	s15, r3
 800502e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005032:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005154 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800503a:	4b40      	ldr	r3, [pc, #256]	; (800513c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800503c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005042:	ee07 3a90 	vmov	s15, r3
 8005046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800504a:	ed97 6a02 	vldr	s12, [r7, #8]
 800504e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800514c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800505a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800505e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005066:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800506a:	e043      	b.n	80050f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	ee07 3a90 	vmov	s15, r3
 8005072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005076:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005158 <HAL_RCC_GetSysClockFreq+0x2f0>
 800507a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800507e:	4b2f      	ldr	r3, [pc, #188]	; (800513c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005086:	ee07 3a90 	vmov	s15, r3
 800508a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800508e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005092:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800514c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800509a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800509e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80050ae:	e021      	b.n	80050f4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	ee07 3a90 	vmov	s15, r3
 80050b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ba:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005154 <HAL_RCC_GetSysClockFreq+0x2ec>
 80050be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050c2:	4b1e      	ldr	r3, [pc, #120]	; (800513c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ca:	ee07 3a90 	vmov	s15, r3
 80050ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80050d6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800514c <HAL_RCC_GetSysClockFreq+0x2e4>
 80050da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80050f2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80050f4:	4b11      	ldr	r3, [pc, #68]	; (800513c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f8:	0a5b      	lsrs	r3, r3, #9
 80050fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050fe:	3301      	adds	r3, #1
 8005100:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	ee07 3a90 	vmov	s15, r3
 8005108:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800510c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005110:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005118:	ee17 3a90 	vmov	r3, s15
 800511c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800511e:	e005      	b.n	800512c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	61bb      	str	r3, [r7, #24]
      break;
 8005124:	e002      	b.n	800512c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005126:	4b07      	ldr	r3, [pc, #28]	; (8005144 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005128:	61bb      	str	r3, [r7, #24]
      break;
 800512a:	bf00      	nop
  }

  return sysclockfreq;
 800512c:	69bb      	ldr	r3, [r7, #24]
}
 800512e:	4618      	mov	r0, r3
 8005130:	3724      	adds	r7, #36	; 0x24
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	58024400 	.word	0x58024400
 8005140:	03d09000 	.word	0x03d09000
 8005144:	003d0900 	.word	0x003d0900
 8005148:	017d7840 	.word	0x017d7840
 800514c:	46000000 	.word	0x46000000
 8005150:	4c742400 	.word	0x4c742400
 8005154:	4a742400 	.word	0x4a742400
 8005158:	4bbebc20 	.word	0x4bbebc20

0800515c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005162:	f7ff fe81 	bl	8004e68 <HAL_RCC_GetSysClockFreq>
 8005166:	4602      	mov	r2, r0
 8005168:	4b10      	ldr	r3, [pc, #64]	; (80051ac <HAL_RCC_GetHCLKFreq+0x50>)
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	0a1b      	lsrs	r3, r3, #8
 800516e:	f003 030f 	and.w	r3, r3, #15
 8005172:	490f      	ldr	r1, [pc, #60]	; (80051b0 <HAL_RCC_GetHCLKFreq+0x54>)
 8005174:	5ccb      	ldrb	r3, [r1, r3]
 8005176:	f003 031f 	and.w	r3, r3, #31
 800517a:	fa22 f303 	lsr.w	r3, r2, r3
 800517e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005180:	4b0a      	ldr	r3, [pc, #40]	; (80051ac <HAL_RCC_GetHCLKFreq+0x50>)
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	f003 030f 	and.w	r3, r3, #15
 8005188:	4a09      	ldr	r2, [pc, #36]	; (80051b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800518a:	5cd3      	ldrb	r3, [r2, r3]
 800518c:	f003 031f 	and.w	r3, r3, #31
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	fa22 f303 	lsr.w	r3, r2, r3
 8005196:	4a07      	ldr	r2, [pc, #28]	; (80051b4 <HAL_RCC_GetHCLKFreq+0x58>)
 8005198:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800519a:	4a07      	ldr	r2, [pc, #28]	; (80051b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80051a0:	4b04      	ldr	r3, [pc, #16]	; (80051b4 <HAL_RCC_GetHCLKFreq+0x58>)
 80051a2:	681b      	ldr	r3, [r3, #0]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3708      	adds	r7, #8
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	58024400 	.word	0x58024400
 80051b0:	0800ffa0 	.word	0x0800ffa0
 80051b4:	24000004 	.word	0x24000004
 80051b8:	24000000 	.word	0x24000000

080051bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80051c0:	f7ff ffcc 	bl	800515c <HAL_RCC_GetHCLKFreq>
 80051c4:	4602      	mov	r2, r0
 80051c6:	4b06      	ldr	r3, [pc, #24]	; (80051e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	091b      	lsrs	r3, r3, #4
 80051cc:	f003 0307 	and.w	r3, r3, #7
 80051d0:	4904      	ldr	r1, [pc, #16]	; (80051e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80051d2:	5ccb      	ldrb	r3, [r1, r3]
 80051d4:	f003 031f 	and.w	r3, r3, #31
 80051d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80051dc:	4618      	mov	r0, r3
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	58024400 	.word	0x58024400
 80051e4:	0800ffa0 	.word	0x0800ffa0

080051e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80051ec:	f7ff ffb6 	bl	800515c <HAL_RCC_GetHCLKFreq>
 80051f0:	4602      	mov	r2, r0
 80051f2:	4b06      	ldr	r3, [pc, #24]	; (800520c <HAL_RCC_GetPCLK2Freq+0x24>)
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	0a1b      	lsrs	r3, r3, #8
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	4904      	ldr	r1, [pc, #16]	; (8005210 <HAL_RCC_GetPCLK2Freq+0x28>)
 80051fe:	5ccb      	ldrb	r3, [r1, r3]
 8005200:	f003 031f 	and.w	r3, r3, #31
 8005204:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005208:	4618      	mov	r0, r3
 800520a:	bd80      	pop	{r7, pc}
 800520c:	58024400 	.word	0x58024400
 8005210:	0800ffa0 	.word	0x0800ffa0

08005214 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005218:	b0ca      	sub	sp, #296	; 0x128
 800521a:	af00      	add	r7, sp, #0
 800521c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005220:	2300      	movs	r3, #0
 8005222:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005226:	2300      	movs	r3, #0
 8005228:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800522c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005234:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005238:	2500      	movs	r5, #0
 800523a:	ea54 0305 	orrs.w	r3, r4, r5
 800523e:	d049      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005244:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005246:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800524a:	d02f      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x98>
 800524c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005250:	d828      	bhi.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005252:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005256:	d01a      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005258:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800525c:	d822      	bhi.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005262:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005266:	d007      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005268:	e01c      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800526a:	4bb8      	ldr	r3, [pc, #736]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526e:	4ab7      	ldr	r2, [pc, #732]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005274:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005276:	e01a      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005278:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800527c:	3308      	adds	r3, #8
 800527e:	2102      	movs	r1, #2
 8005280:	4618      	mov	r0, r3
 8005282:	f001 fc8f 	bl	8006ba4 <RCCEx_PLL2_Config>
 8005286:	4603      	mov	r3, r0
 8005288:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800528c:	e00f      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800528e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005292:	3328      	adds	r3, #40	; 0x28
 8005294:	2102      	movs	r1, #2
 8005296:	4618      	mov	r0, r3
 8005298:	f001 fd36 	bl	8006d08 <RCCEx_PLL3_Config>
 800529c:	4603      	mov	r3, r0
 800529e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80052a2:	e004      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80052aa:	e000      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80052ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10a      	bne.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80052b6:	4ba5      	ldr	r3, [pc, #660]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ba:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80052be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052c4:	4aa1      	ldr	r2, [pc, #644]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052c6:	430b      	orrs	r3, r1
 80052c8:	6513      	str	r3, [r2, #80]	; 0x50
 80052ca:	e003      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80052d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052dc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80052e0:	f04f 0900 	mov.w	r9, #0
 80052e4:	ea58 0309 	orrs.w	r3, r8, r9
 80052e8:	d047      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80052ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f0:	2b04      	cmp	r3, #4
 80052f2:	d82a      	bhi.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80052f4:	a201      	add	r2, pc, #4	; (adr r2, 80052fc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80052f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fa:	bf00      	nop
 80052fc:	08005311 	.word	0x08005311
 8005300:	0800531f 	.word	0x0800531f
 8005304:	08005335 	.word	0x08005335
 8005308:	08005353 	.word	0x08005353
 800530c:	08005353 	.word	0x08005353
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005310:	4b8e      	ldr	r3, [pc, #568]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005314:	4a8d      	ldr	r2, [pc, #564]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800531a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800531c:	e01a      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800531e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005322:	3308      	adds	r3, #8
 8005324:	2100      	movs	r1, #0
 8005326:	4618      	mov	r0, r3
 8005328:	f001 fc3c 	bl	8006ba4 <RCCEx_PLL2_Config>
 800532c:	4603      	mov	r3, r0
 800532e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005332:	e00f      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005334:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005338:	3328      	adds	r3, #40	; 0x28
 800533a:	2100      	movs	r1, #0
 800533c:	4618      	mov	r0, r3
 800533e:	f001 fce3 	bl	8006d08 <RCCEx_PLL3_Config>
 8005342:	4603      	mov	r3, r0
 8005344:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005348:	e004      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005350:	e000      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005352:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005354:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10a      	bne.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800535c:	4b7b      	ldr	r3, [pc, #492]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800535e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005360:	f023 0107 	bic.w	r1, r3, #7
 8005364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800536a:	4a78      	ldr	r2, [pc, #480]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800536c:	430b      	orrs	r3, r1
 800536e:	6513      	str	r3, [r2, #80]	; 0x50
 8005370:	e003      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005372:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005376:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800537a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800537e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005382:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005386:	f04f 0b00 	mov.w	fp, #0
 800538a:	ea5a 030b 	orrs.w	r3, sl, fp
 800538e:	d04c      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800539a:	d030      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800539c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053a0:	d829      	bhi.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80053a2:	2bc0      	cmp	r3, #192	; 0xc0
 80053a4:	d02d      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80053a6:	2bc0      	cmp	r3, #192	; 0xc0
 80053a8:	d825      	bhi.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80053aa:	2b80      	cmp	r3, #128	; 0x80
 80053ac:	d018      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80053ae:	2b80      	cmp	r3, #128	; 0x80
 80053b0:	d821      	bhi.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d002      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80053b6:	2b40      	cmp	r3, #64	; 0x40
 80053b8:	d007      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80053ba:	e01c      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053bc:	4b63      	ldr	r3, [pc, #396]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c0:	4a62      	ldr	r2, [pc, #392]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80053c8:	e01c      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053ce:	3308      	adds	r3, #8
 80053d0:	2100      	movs	r1, #0
 80053d2:	4618      	mov	r0, r3
 80053d4:	f001 fbe6 	bl	8006ba4 <RCCEx_PLL2_Config>
 80053d8:	4603      	mov	r3, r0
 80053da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80053de:	e011      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053e4:	3328      	adds	r3, #40	; 0x28
 80053e6:	2100      	movs	r1, #0
 80053e8:	4618      	mov	r0, r3
 80053ea:	f001 fc8d 	bl	8006d08 <RCCEx_PLL3_Config>
 80053ee:	4603      	mov	r3, r0
 80053f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80053f4:	e006      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80053fc:	e002      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80053fe:	bf00      	nop
 8005400:	e000      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005402:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005404:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10a      	bne.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800540c:	4b4f      	ldr	r3, [pc, #316]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800540e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005410:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005414:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800541a:	4a4c      	ldr	r2, [pc, #304]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800541c:	430b      	orrs	r3, r1
 800541e:	6513      	str	r3, [r2, #80]	; 0x50
 8005420:	e003      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005422:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005426:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800542a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800542e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005432:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005436:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800543a:	2300      	movs	r3, #0
 800543c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005440:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005444:	460b      	mov	r3, r1
 8005446:	4313      	orrs	r3, r2
 8005448:	d053      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800544a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800544e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005452:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005456:	d035      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005458:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800545c:	d82e      	bhi.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800545e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005462:	d031      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005464:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005468:	d828      	bhi.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800546a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800546e:	d01a      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005470:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005474:	d822      	bhi.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800547a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800547e:	d007      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005480:	e01c      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005482:	4b32      	ldr	r3, [pc, #200]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005486:	4a31      	ldr	r2, [pc, #196]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800548c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800548e:	e01c      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005494:	3308      	adds	r3, #8
 8005496:	2100      	movs	r1, #0
 8005498:	4618      	mov	r0, r3
 800549a:	f001 fb83 	bl	8006ba4 <RCCEx_PLL2_Config>
 800549e:	4603      	mov	r3, r0
 80054a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80054a4:	e011      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054aa:	3328      	adds	r3, #40	; 0x28
 80054ac:	2100      	movs	r1, #0
 80054ae:	4618      	mov	r0, r3
 80054b0:	f001 fc2a 	bl	8006d08 <RCCEx_PLL3_Config>
 80054b4:	4603      	mov	r3, r0
 80054b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054ba:	e006      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80054c2:	e002      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80054c4:	bf00      	nop
 80054c6:	e000      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80054c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10b      	bne.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80054d2:	4b1e      	ldr	r3, [pc, #120]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80054da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80054e2:	4a1a      	ldr	r2, [pc, #104]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054e4:	430b      	orrs	r3, r1
 80054e6:	6593      	str	r3, [r2, #88]	; 0x58
 80054e8:	e003      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80054f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fa:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80054fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005502:	2300      	movs	r3, #0
 8005504:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005508:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800550c:	460b      	mov	r3, r1
 800550e:	4313      	orrs	r3, r2
 8005510:	d056      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005516:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800551a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800551e:	d038      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005520:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005524:	d831      	bhi.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005526:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800552a:	d034      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800552c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005530:	d82b      	bhi.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005532:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005536:	d01d      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005538:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800553c:	d825      	bhi.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800553e:	2b00      	cmp	r3, #0
 8005540:	d006      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005542:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005546:	d00a      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005548:	e01f      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800554a:	bf00      	nop
 800554c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005550:	4ba2      	ldr	r3, [pc, #648]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005554:	4aa1      	ldr	r2, [pc, #644]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005556:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800555a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800555c:	e01c      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800555e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005562:	3308      	adds	r3, #8
 8005564:	2100      	movs	r1, #0
 8005566:	4618      	mov	r0, r3
 8005568:	f001 fb1c 	bl	8006ba4 <RCCEx_PLL2_Config>
 800556c:	4603      	mov	r3, r0
 800556e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005572:	e011      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005578:	3328      	adds	r3, #40	; 0x28
 800557a:	2100      	movs	r1, #0
 800557c:	4618      	mov	r0, r3
 800557e:	f001 fbc3 	bl	8006d08 <RCCEx_PLL3_Config>
 8005582:	4603      	mov	r3, r0
 8005584:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005588:	e006      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005590:	e002      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005592:	bf00      	nop
 8005594:	e000      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005596:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005598:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10b      	bne.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80055a0:	4b8e      	ldr	r3, [pc, #568]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80055a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80055b0:	4a8a      	ldr	r2, [pc, #552]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055b2:	430b      	orrs	r3, r1
 80055b4:	6593      	str	r3, [r2, #88]	; 0x58
 80055b6:	e003      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80055c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80055cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80055d0:	2300      	movs	r3, #0
 80055d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80055d6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80055da:	460b      	mov	r3, r1
 80055dc:	4313      	orrs	r3, r2
 80055de:	d03a      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80055e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055e6:	2b30      	cmp	r3, #48	; 0x30
 80055e8:	d01f      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80055ea:	2b30      	cmp	r3, #48	; 0x30
 80055ec:	d819      	bhi.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80055ee:	2b20      	cmp	r3, #32
 80055f0:	d00c      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80055f2:	2b20      	cmp	r3, #32
 80055f4:	d815      	bhi.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d019      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80055fa:	2b10      	cmp	r3, #16
 80055fc:	d111      	bne.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055fe:	4b77      	ldr	r3, [pc, #476]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005602:	4a76      	ldr	r2, [pc, #472]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005608:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800560a:	e011      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800560c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005610:	3308      	adds	r3, #8
 8005612:	2102      	movs	r1, #2
 8005614:	4618      	mov	r0, r3
 8005616:	f001 fac5 	bl	8006ba4 <RCCEx_PLL2_Config>
 800561a:	4603      	mov	r3, r0
 800561c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005620:	e006      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005628:	e002      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800562a:	bf00      	nop
 800562c:	e000      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800562e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005630:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10a      	bne.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005638:	4b68      	ldr	r3, [pc, #416]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800563a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800563c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005646:	4a65      	ldr	r2, [pc, #404]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005648:	430b      	orrs	r3, r1
 800564a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800564c:	e003      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800564e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005652:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800565a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005662:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005666:	2300      	movs	r3, #0
 8005668:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800566c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005670:	460b      	mov	r3, r1
 8005672:	4313      	orrs	r3, r2
 8005674:	d051      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800567a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800567c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005680:	d035      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005682:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005686:	d82e      	bhi.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005688:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800568c:	d031      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800568e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005692:	d828      	bhi.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005694:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005698:	d01a      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800569a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800569e:	d822      	bhi.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d003      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x498>
 80056a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a8:	d007      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80056aa:	e01c      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056ac:	4b4b      	ldr	r3, [pc, #300]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b0:	4a4a      	ldr	r2, [pc, #296]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80056b8:	e01c      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056be:	3308      	adds	r3, #8
 80056c0:	2100      	movs	r1, #0
 80056c2:	4618      	mov	r0, r3
 80056c4:	f001 fa6e 	bl	8006ba4 <RCCEx_PLL2_Config>
 80056c8:	4603      	mov	r3, r0
 80056ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80056ce:	e011      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056d4:	3328      	adds	r3, #40	; 0x28
 80056d6:	2100      	movs	r1, #0
 80056d8:	4618      	mov	r0, r3
 80056da:	f001 fb15 	bl	8006d08 <RCCEx_PLL3_Config>
 80056de:	4603      	mov	r3, r0
 80056e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80056e4:	e006      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80056ec:	e002      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80056ee:	bf00      	nop
 80056f0:	e000      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80056f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10a      	bne.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80056fc:	4b37      	ldr	r3, [pc, #220]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005700:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800570a:	4a34      	ldr	r2, [pc, #208]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800570c:	430b      	orrs	r3, r1
 800570e:	6513      	str	r3, [r2, #80]	; 0x50
 8005710:	e003      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005712:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005716:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800571a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800571e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005722:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005726:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800572a:	2300      	movs	r3, #0
 800572c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005730:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005734:	460b      	mov	r3, r1
 8005736:	4313      	orrs	r3, r2
 8005738:	d056      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800573a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800573e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005740:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005744:	d033      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005746:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800574a:	d82c      	bhi.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800574c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005750:	d02f      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005752:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005756:	d826      	bhi.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005758:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800575c:	d02b      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800575e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005762:	d820      	bhi.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005764:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005768:	d012      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800576a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800576e:	d81a      	bhi.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005770:	2b00      	cmp	r3, #0
 8005772:	d022      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005778:	d115      	bne.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800577a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800577e:	3308      	adds	r3, #8
 8005780:	2101      	movs	r1, #1
 8005782:	4618      	mov	r0, r3
 8005784:	f001 fa0e 	bl	8006ba4 <RCCEx_PLL2_Config>
 8005788:	4603      	mov	r3, r0
 800578a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800578e:	e015      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005794:	3328      	adds	r3, #40	; 0x28
 8005796:	2101      	movs	r1, #1
 8005798:	4618      	mov	r0, r3
 800579a:	f001 fab5 	bl	8006d08 <RCCEx_PLL3_Config>
 800579e:	4603      	mov	r3, r0
 80057a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80057a4:	e00a      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80057ac:	e006      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80057ae:	bf00      	nop
 80057b0:	e004      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80057b2:	bf00      	nop
 80057b4:	e002      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80057b6:	bf00      	nop
 80057b8:	e000      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80057ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10d      	bne.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80057c4:	4b05      	ldr	r3, [pc, #20]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057c8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80057cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057d2:	4a02      	ldr	r2, [pc, #8]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057d4:	430b      	orrs	r3, r1
 80057d6:	6513      	str	r3, [r2, #80]	; 0x50
 80057d8:	e006      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80057da:	bf00      	nop
 80057dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80057e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80057f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80057f8:	2300      	movs	r3, #0
 80057fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80057fe:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005802:	460b      	mov	r3, r1
 8005804:	4313      	orrs	r3, r2
 8005806:	d055      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800580c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005810:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005814:	d033      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005816:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800581a:	d82c      	bhi.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800581c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005820:	d02f      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005826:	d826      	bhi.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005828:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800582c:	d02b      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800582e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005832:	d820      	bhi.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005834:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005838:	d012      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800583a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800583e:	d81a      	bhi.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005840:	2b00      	cmp	r3, #0
 8005842:	d022      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005844:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005848:	d115      	bne.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800584a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800584e:	3308      	adds	r3, #8
 8005850:	2101      	movs	r1, #1
 8005852:	4618      	mov	r0, r3
 8005854:	f001 f9a6 	bl	8006ba4 <RCCEx_PLL2_Config>
 8005858:	4603      	mov	r3, r0
 800585a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800585e:	e015      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005864:	3328      	adds	r3, #40	; 0x28
 8005866:	2101      	movs	r1, #1
 8005868:	4618      	mov	r0, r3
 800586a:	f001 fa4d 	bl	8006d08 <RCCEx_PLL3_Config>
 800586e:	4603      	mov	r3, r0
 8005870:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005874:	e00a      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800587c:	e006      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800587e:	bf00      	nop
 8005880:	e004      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005882:	bf00      	nop
 8005884:	e002      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005886:	bf00      	nop
 8005888:	e000      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800588a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800588c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10b      	bne.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005894:	4ba3      	ldr	r3, [pc, #652]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005898:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800589c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058a4:	4a9f      	ldr	r2, [pc, #636]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058a6:	430b      	orrs	r3, r1
 80058a8:	6593      	str	r3, [r2, #88]	; 0x58
 80058aa:	e003      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80058b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058bc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80058c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80058c4:	2300      	movs	r3, #0
 80058c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80058ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80058ce:	460b      	mov	r3, r1
 80058d0:	4313      	orrs	r3, r2
 80058d2:	d037      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80058d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058de:	d00e      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80058e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058e4:	d816      	bhi.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d018      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x708>
 80058ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058ee:	d111      	bne.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058f0:	4b8c      	ldr	r3, [pc, #560]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f4:	4a8b      	ldr	r2, [pc, #556]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80058fc:	e00f      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005902:	3308      	adds	r3, #8
 8005904:	2101      	movs	r1, #1
 8005906:	4618      	mov	r0, r3
 8005908:	f001 f94c 	bl	8006ba4 <RCCEx_PLL2_Config>
 800590c:	4603      	mov	r3, r0
 800590e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005912:	e004      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800591a:	e000      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800591c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800591e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10a      	bne.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005926:	4b7f      	ldr	r3, [pc, #508]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800592a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800592e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005934:	4a7b      	ldr	r2, [pc, #492]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005936:	430b      	orrs	r3, r1
 8005938:	6513      	str	r3, [r2, #80]	; 0x50
 800593a:	e003      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800593c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005940:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005950:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005954:	2300      	movs	r3, #0
 8005956:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800595a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800595e:	460b      	mov	r3, r1
 8005960:	4313      	orrs	r3, r2
 8005962:	d039      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005964:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800596a:	2b03      	cmp	r3, #3
 800596c:	d81c      	bhi.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800596e:	a201      	add	r2, pc, #4	; (adr r2, 8005974 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005974:	080059b1 	.word	0x080059b1
 8005978:	08005985 	.word	0x08005985
 800597c:	08005993 	.word	0x08005993
 8005980:	080059b1 	.word	0x080059b1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005984:	4b67      	ldr	r3, [pc, #412]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005988:	4a66      	ldr	r2, [pc, #408]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800598a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800598e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005990:	e00f      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005996:	3308      	adds	r3, #8
 8005998:	2102      	movs	r1, #2
 800599a:	4618      	mov	r0, r3
 800599c:	f001 f902 	bl	8006ba4 <RCCEx_PLL2_Config>
 80059a0:	4603      	mov	r3, r0
 80059a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80059a6:	e004      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80059ae:	e000      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80059b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10a      	bne.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80059ba:	4b5a      	ldr	r3, [pc, #360]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059be:	f023 0103 	bic.w	r1, r3, #3
 80059c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059c8:	4a56      	ldr	r2, [pc, #344]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059ca:	430b      	orrs	r3, r1
 80059cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059ce:	e003      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80059e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059e8:	2300      	movs	r3, #0
 80059ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80059ee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80059f2:	460b      	mov	r3, r1
 80059f4:	4313      	orrs	r3, r2
 80059f6:	f000 809f 	beq.w	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059fa:	4b4b      	ldr	r3, [pc, #300]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a4a      	ldr	r2, [pc, #296]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a06:	f7fc fa03 	bl	8001e10 <HAL_GetTick>
 8005a0a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a0e:	e00b      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a10:	f7fc f9fe 	bl	8001e10 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	2b64      	cmp	r3, #100	; 0x64
 8005a1e:	d903      	bls.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a26:	e005      	b.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a28:	4b3f      	ldr	r3, [pc, #252]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d0ed      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005a34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d179      	bne.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005a3c:	4b39      	ldr	r3, [pc, #228]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a48:	4053      	eors	r3, r2
 8005a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d015      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a52:	4b34      	ldr	r3, [pc, #208]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a5a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a5e:	4b31      	ldr	r3, [pc, #196]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a62:	4a30      	ldr	r2, [pc, #192]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a68:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a6a:	4b2e      	ldr	r3, [pc, #184]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a6e:	4a2d      	ldr	r2, [pc, #180]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a74:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005a76:	4a2b      	ldr	r2, [pc, #172]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a78:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a7c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a8a:	d118      	bne.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a8c:	f7fc f9c0 	bl	8001e10 <HAL_GetTick>
 8005a90:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a94:	e00d      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a96:	f7fc f9bb 	bl	8001e10 <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005aa0:	1ad2      	subs	r2, r2, r3
 8005aa2:	f241 3388 	movw	r3, #5000	; 0x1388
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d903      	bls.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005ab0:	e005      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ab2:	4b1c      	ldr	r3, [pc, #112]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d0eb      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005abe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d129      	bne.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ad2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ad6:	d10e      	bne.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005ad8:	4b12      	ldr	r3, [pc, #72]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ae4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005ae8:	091a      	lsrs	r2, r3, #4
 8005aea:	4b10      	ldr	r3, [pc, #64]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005aec:	4013      	ands	r3, r2
 8005aee:	4a0d      	ldr	r2, [pc, #52]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005af0:	430b      	orrs	r3, r1
 8005af2:	6113      	str	r3, [r2, #16]
 8005af4:	e005      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005af6:	4b0b      	ldr	r3, [pc, #44]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	4a0a      	ldr	r2, [pc, #40]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005afc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005b00:	6113      	str	r3, [r2, #16]
 8005b02:	4b08      	ldr	r3, [pc, #32]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b04:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005b0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b12:	4a04      	ldr	r2, [pc, #16]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b14:	430b      	orrs	r3, r1
 8005b16:	6713      	str	r3, [r2, #112]	; 0x70
 8005b18:	e00e      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005b22:	e009      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005b24:	58024400 	.word	0x58024400
 8005b28:	58024800 	.word	0x58024800
 8005b2c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b40:	f002 0301 	and.w	r3, r2, #1
 8005b44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b48:	2300      	movs	r3, #0
 8005b4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b4e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005b52:	460b      	mov	r3, r1
 8005b54:	4313      	orrs	r3, r2
 8005b56:	f000 8089 	beq.w	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b60:	2b28      	cmp	r3, #40	; 0x28
 8005b62:	d86b      	bhi.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005b64:	a201      	add	r2, pc, #4	; (adr r2, 8005b6c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6a:	bf00      	nop
 8005b6c:	08005c45 	.word	0x08005c45
 8005b70:	08005c3d 	.word	0x08005c3d
 8005b74:	08005c3d 	.word	0x08005c3d
 8005b78:	08005c3d 	.word	0x08005c3d
 8005b7c:	08005c3d 	.word	0x08005c3d
 8005b80:	08005c3d 	.word	0x08005c3d
 8005b84:	08005c3d 	.word	0x08005c3d
 8005b88:	08005c3d 	.word	0x08005c3d
 8005b8c:	08005c11 	.word	0x08005c11
 8005b90:	08005c3d 	.word	0x08005c3d
 8005b94:	08005c3d 	.word	0x08005c3d
 8005b98:	08005c3d 	.word	0x08005c3d
 8005b9c:	08005c3d 	.word	0x08005c3d
 8005ba0:	08005c3d 	.word	0x08005c3d
 8005ba4:	08005c3d 	.word	0x08005c3d
 8005ba8:	08005c3d 	.word	0x08005c3d
 8005bac:	08005c27 	.word	0x08005c27
 8005bb0:	08005c3d 	.word	0x08005c3d
 8005bb4:	08005c3d 	.word	0x08005c3d
 8005bb8:	08005c3d 	.word	0x08005c3d
 8005bbc:	08005c3d 	.word	0x08005c3d
 8005bc0:	08005c3d 	.word	0x08005c3d
 8005bc4:	08005c3d 	.word	0x08005c3d
 8005bc8:	08005c3d 	.word	0x08005c3d
 8005bcc:	08005c45 	.word	0x08005c45
 8005bd0:	08005c3d 	.word	0x08005c3d
 8005bd4:	08005c3d 	.word	0x08005c3d
 8005bd8:	08005c3d 	.word	0x08005c3d
 8005bdc:	08005c3d 	.word	0x08005c3d
 8005be0:	08005c3d 	.word	0x08005c3d
 8005be4:	08005c3d 	.word	0x08005c3d
 8005be8:	08005c3d 	.word	0x08005c3d
 8005bec:	08005c45 	.word	0x08005c45
 8005bf0:	08005c3d 	.word	0x08005c3d
 8005bf4:	08005c3d 	.word	0x08005c3d
 8005bf8:	08005c3d 	.word	0x08005c3d
 8005bfc:	08005c3d 	.word	0x08005c3d
 8005c00:	08005c3d 	.word	0x08005c3d
 8005c04:	08005c3d 	.word	0x08005c3d
 8005c08:	08005c3d 	.word	0x08005c3d
 8005c0c:	08005c45 	.word	0x08005c45
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c14:	3308      	adds	r3, #8
 8005c16:	2101      	movs	r1, #1
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f000 ffc3 	bl	8006ba4 <RCCEx_PLL2_Config>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005c24:	e00f      	b.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c2a:	3328      	adds	r3, #40	; 0x28
 8005c2c:	2101      	movs	r1, #1
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f001 f86a 	bl	8006d08 <RCCEx_PLL3_Config>
 8005c34:	4603      	mov	r3, r0
 8005c36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005c3a:	e004      	b.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c42:	e000      	b.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005c44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10a      	bne.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005c4e:	4bbf      	ldr	r3, [pc, #764]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c52:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c5c:	4abb      	ldr	r2, [pc, #748]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c5e:	430b      	orrs	r3, r1
 8005c60:	6553      	str	r3, [r2, #84]	; 0x54
 8005c62:	e003      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c74:	f002 0302 	and.w	r3, r2, #2
 8005c78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005c82:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005c86:	460b      	mov	r3, r1
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	d041      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c92:	2b05      	cmp	r3, #5
 8005c94:	d824      	bhi.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005c96:	a201      	add	r2, pc, #4	; (adr r2, 8005c9c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9c:	08005ce9 	.word	0x08005ce9
 8005ca0:	08005cb5 	.word	0x08005cb5
 8005ca4:	08005ccb 	.word	0x08005ccb
 8005ca8:	08005ce9 	.word	0x08005ce9
 8005cac:	08005ce9 	.word	0x08005ce9
 8005cb0:	08005ce9 	.word	0x08005ce9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cb8:	3308      	adds	r3, #8
 8005cba:	2101      	movs	r1, #1
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f000 ff71 	bl	8006ba4 <RCCEx_PLL2_Config>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005cc8:	e00f      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cce:	3328      	adds	r3, #40	; 0x28
 8005cd0:	2101      	movs	r1, #1
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f001 f818 	bl	8006d08 <RCCEx_PLL3_Config>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005cde:	e004      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ce6:	e000      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005ce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10a      	bne.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005cf2:	4b96      	ldr	r3, [pc, #600]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf6:	f023 0107 	bic.w	r1, r3, #7
 8005cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d00:	4a92      	ldr	r2, [pc, #584]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d02:	430b      	orrs	r3, r1
 8005d04:	6553      	str	r3, [r2, #84]	; 0x54
 8005d06:	e003      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d18:	f002 0304 	and.w	r3, r2, #4
 8005d1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d20:	2300      	movs	r3, #0
 8005d22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d26:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	d044      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d38:	2b05      	cmp	r3, #5
 8005d3a:	d825      	bhi.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005d3c:	a201      	add	r2, pc, #4	; (adr r2, 8005d44 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d42:	bf00      	nop
 8005d44:	08005d91 	.word	0x08005d91
 8005d48:	08005d5d 	.word	0x08005d5d
 8005d4c:	08005d73 	.word	0x08005d73
 8005d50:	08005d91 	.word	0x08005d91
 8005d54:	08005d91 	.word	0x08005d91
 8005d58:	08005d91 	.word	0x08005d91
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d60:	3308      	adds	r3, #8
 8005d62:	2101      	movs	r1, #1
 8005d64:	4618      	mov	r0, r3
 8005d66:	f000 ff1d 	bl	8006ba4 <RCCEx_PLL2_Config>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005d70:	e00f      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d76:	3328      	adds	r3, #40	; 0x28
 8005d78:	2101      	movs	r1, #1
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 ffc4 	bl	8006d08 <RCCEx_PLL3_Config>
 8005d80:	4603      	mov	r3, r0
 8005d82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005d86:	e004      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d8e:	e000      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005d90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10b      	bne.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d9a:	4b6c      	ldr	r3, [pc, #432]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d9e:	f023 0107 	bic.w	r1, r3, #7
 8005da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005daa:	4a68      	ldr	r2, [pc, #416]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005dac:	430b      	orrs	r3, r1
 8005dae:	6593      	str	r3, [r2, #88]	; 0x58
 8005db0:	e003      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005db2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005db6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc2:	f002 0320 	and.w	r3, r2, #32
 8005dc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005dca:	2300      	movs	r3, #0
 8005dcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005dd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	d055      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005de6:	d033      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005de8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005dec:	d82c      	bhi.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005df2:	d02f      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005df8:	d826      	bhi.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005dfa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005dfe:	d02b      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005e00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e04:	d820      	bhi.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005e06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e0a:	d012      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005e0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e10:	d81a      	bhi.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d022      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005e16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e1a:	d115      	bne.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e20:	3308      	adds	r3, #8
 8005e22:	2100      	movs	r1, #0
 8005e24:	4618      	mov	r0, r3
 8005e26:	f000 febd 	bl	8006ba4 <RCCEx_PLL2_Config>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005e30:	e015      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e36:	3328      	adds	r3, #40	; 0x28
 8005e38:	2102      	movs	r1, #2
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f000 ff64 	bl	8006d08 <RCCEx_PLL3_Config>
 8005e40:	4603      	mov	r3, r0
 8005e42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005e46:	e00a      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e4e:	e006      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005e50:	bf00      	nop
 8005e52:	e004      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005e54:	bf00      	nop
 8005e56:	e002      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005e58:	bf00      	nop
 8005e5a:	e000      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005e5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10b      	bne.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e66:	4b39      	ldr	r3, [pc, #228]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e6a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e76:	4a35      	ldr	r2, [pc, #212]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e78:	430b      	orrs	r3, r1
 8005e7a:	6553      	str	r3, [r2, #84]	; 0x54
 8005e7c:	e003      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005e92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e96:	2300      	movs	r3, #0
 8005e98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005e9c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	d058      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005eae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005eb2:	d033      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005eb4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005eb8:	d82c      	bhi.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ebe:	d02f      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ec4:	d826      	bhi.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005ec6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005eca:	d02b      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005ecc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ed0:	d820      	bhi.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005ed2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ed6:	d012      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005ed8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005edc:	d81a      	bhi.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d022      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ee6:	d115      	bne.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eec:	3308      	adds	r3, #8
 8005eee:	2100      	movs	r1, #0
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f000 fe57 	bl	8006ba4 <RCCEx_PLL2_Config>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005efc:	e015      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f02:	3328      	adds	r3, #40	; 0x28
 8005f04:	2102      	movs	r1, #2
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 fefe 	bl	8006d08 <RCCEx_PLL3_Config>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005f12:	e00a      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f1a:	e006      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005f1c:	bf00      	nop
 8005f1e:	e004      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005f20:	bf00      	nop
 8005f22:	e002      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005f24:	bf00      	nop
 8005f26:	e000      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005f28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10e      	bne.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f32:	4b06      	ldr	r3, [pc, #24]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f36:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f42:	4a02      	ldr	r2, [pc, #8]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f44:	430b      	orrs	r3, r1
 8005f46:	6593      	str	r3, [r2, #88]	; 0x58
 8005f48:	e006      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005f4a:	bf00      	nop
 8005f4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f60:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005f64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f68:	2300      	movs	r3, #0
 8005f6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f6e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005f72:	460b      	mov	r3, r1
 8005f74:	4313      	orrs	r3, r2
 8005f76:	d055      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005f80:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005f84:	d033      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005f86:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005f8a:	d82c      	bhi.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f90:	d02f      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005f92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f96:	d826      	bhi.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005f98:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005f9c:	d02b      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005f9e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005fa2:	d820      	bhi.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005fa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fa8:	d012      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005faa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fae:	d81a      	bhi.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d022      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005fb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fb8:	d115      	bne.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fbe:	3308      	adds	r3, #8
 8005fc0:	2100      	movs	r1, #0
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 fdee 	bl	8006ba4 <RCCEx_PLL2_Config>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005fce:	e015      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fd4:	3328      	adds	r3, #40	; 0x28
 8005fd6:	2102      	movs	r1, #2
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f000 fe95 	bl	8006d08 <RCCEx_PLL3_Config>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005fe4:	e00a      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005fec:	e006      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005fee:	bf00      	nop
 8005ff0:	e004      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005ff2:	bf00      	nop
 8005ff4:	e002      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005ff6:	bf00      	nop
 8005ff8:	e000      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005ffa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ffc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10b      	bne.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006004:	4ba1      	ldr	r3, [pc, #644]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006008:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800600c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006010:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006014:	4a9d      	ldr	r2, [pc, #628]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006016:	430b      	orrs	r3, r1
 8006018:	6593      	str	r3, [r2, #88]	; 0x58
 800601a:	e003      	b.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800601c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006020:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602c:	f002 0308 	and.w	r3, r2, #8
 8006030:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006034:	2300      	movs	r3, #0
 8006036:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800603a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800603e:	460b      	mov	r3, r1
 8006040:	4313      	orrs	r3, r2
 8006042:	d01e      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006048:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800604c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006050:	d10c      	bne.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006056:	3328      	adds	r3, #40	; 0x28
 8006058:	2102      	movs	r1, #2
 800605a:	4618      	mov	r0, r3
 800605c:	f000 fe54 	bl	8006d08 <RCCEx_PLL3_Config>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d002      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800606c:	4b87      	ldr	r3, [pc, #540]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800606e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006070:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006078:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800607c:	4a83      	ldr	r2, [pc, #524]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800607e:	430b      	orrs	r3, r1
 8006080:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006082:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608a:	f002 0310 	and.w	r3, r2, #16
 800608e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006092:	2300      	movs	r3, #0
 8006094:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006098:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800609c:	460b      	mov	r3, r1
 800609e:	4313      	orrs	r3, r2
 80060a0:	d01e      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80060a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80060aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060ae:	d10c      	bne.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80060b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060b4:	3328      	adds	r3, #40	; 0x28
 80060b6:	2102      	movs	r1, #2
 80060b8:	4618      	mov	r0, r3
 80060ba:	f000 fe25 	bl	8006d08 <RCCEx_PLL3_Config>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d002      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80060ca:	4b70      	ldr	r3, [pc, #448]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80060d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80060da:	4a6c      	ldr	r2, [pc, #432]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060dc:	430b      	orrs	r3, r1
 80060de:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80060e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80060ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060f0:	2300      	movs	r3, #0
 80060f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80060f6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80060fa:	460b      	mov	r3, r1
 80060fc:	4313      	orrs	r3, r2
 80060fe:	d03e      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006100:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006104:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006108:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800610c:	d022      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800610e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006112:	d81b      	bhi.n	800614c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006114:	2b00      	cmp	r3, #0
 8006116:	d003      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800611c:	d00b      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800611e:	e015      	b.n	800614c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006124:	3308      	adds	r3, #8
 8006126:	2100      	movs	r1, #0
 8006128:	4618      	mov	r0, r3
 800612a:	f000 fd3b 	bl	8006ba4 <RCCEx_PLL2_Config>
 800612e:	4603      	mov	r3, r0
 8006130:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006134:	e00f      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800613a:	3328      	adds	r3, #40	; 0x28
 800613c:	2102      	movs	r1, #2
 800613e:	4618      	mov	r0, r3
 8006140:	f000 fde2 	bl	8006d08 <RCCEx_PLL3_Config>
 8006144:	4603      	mov	r3, r0
 8006146:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800614a:	e004      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006152:	e000      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006154:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006156:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800615a:	2b00      	cmp	r3, #0
 800615c:	d10b      	bne.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800615e:	4b4b      	ldr	r3, [pc, #300]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006162:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800616a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800616e:	4a47      	ldr	r2, [pc, #284]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006170:	430b      	orrs	r3, r1
 8006172:	6593      	str	r3, [r2, #88]	; 0x58
 8006174:	e003      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006176:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800617a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800617e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006186:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800618a:	67bb      	str	r3, [r7, #120]	; 0x78
 800618c:	2300      	movs	r3, #0
 800618e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006190:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006194:	460b      	mov	r3, r1
 8006196:	4313      	orrs	r3, r2
 8006198:	d03b      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800619a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800619e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061a6:	d01f      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80061a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061ac:	d818      	bhi.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80061ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061b2:	d003      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80061b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061b8:	d007      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80061ba:	e011      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061bc:	4b33      	ldr	r3, [pc, #204]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c0:	4a32      	ldr	r2, [pc, #200]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80061c8:	e00f      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ce:	3328      	adds	r3, #40	; 0x28
 80061d0:	2101      	movs	r1, #1
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 fd98 	bl	8006d08 <RCCEx_PLL3_Config>
 80061d8:	4603      	mov	r3, r0
 80061da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80061de:	e004      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80061e6:	e000      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80061e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10b      	bne.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061f2:	4b26      	ldr	r3, [pc, #152]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80061fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006202:	4a22      	ldr	r2, [pc, #136]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006204:	430b      	orrs	r3, r1
 8006206:	6553      	str	r3, [r2, #84]	; 0x54
 8006208:	e003      	b.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800620a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800620e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800621e:	673b      	str	r3, [r7, #112]	; 0x70
 8006220:	2300      	movs	r3, #0
 8006222:	677b      	str	r3, [r7, #116]	; 0x74
 8006224:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006228:	460b      	mov	r3, r1
 800622a:	4313      	orrs	r3, r2
 800622c:	d034      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800622e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006234:	2b00      	cmp	r3, #0
 8006236:	d003      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800623c:	d007      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800623e:	e011      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006240:	4b12      	ldr	r3, [pc, #72]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006244:	4a11      	ldr	r2, [pc, #68]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800624a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800624c:	e00e      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800624e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006252:	3308      	adds	r3, #8
 8006254:	2102      	movs	r1, #2
 8006256:	4618      	mov	r0, r3
 8006258:	f000 fca4 	bl	8006ba4 <RCCEx_PLL2_Config>
 800625c:	4603      	mov	r3, r0
 800625e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006262:	e003      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800626a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800626c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006270:	2b00      	cmp	r3, #0
 8006272:	d10d      	bne.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006274:	4b05      	ldr	r3, [pc, #20]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006278:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800627c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006282:	4a02      	ldr	r2, [pc, #8]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006284:	430b      	orrs	r3, r1
 8006286:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006288:	e006      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800628a:	bf00      	nop
 800628c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006290:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006294:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006298:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800629c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80062a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80062a6:	2300      	movs	r3, #0
 80062a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062aa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80062ae:	460b      	mov	r3, r1
 80062b0:	4313      	orrs	r3, r2
 80062b2:	d00c      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80062b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062b8:	3328      	adds	r3, #40	; 0x28
 80062ba:	2102      	movs	r1, #2
 80062bc:	4618      	mov	r0, r3
 80062be:	f000 fd23 	bl	8006d08 <RCCEx_PLL3_Config>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d002      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80062ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80062da:	663b      	str	r3, [r7, #96]	; 0x60
 80062dc:	2300      	movs	r3, #0
 80062de:	667b      	str	r3, [r7, #100]	; 0x64
 80062e0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80062e4:	460b      	mov	r3, r1
 80062e6:	4313      	orrs	r3, r2
 80062e8:	d038      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80062ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062f6:	d018      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80062f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062fc:	d811      	bhi.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80062fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006302:	d014      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006308:	d80b      	bhi.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800630a:	2b00      	cmp	r3, #0
 800630c:	d011      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800630e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006312:	d106      	bne.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006314:	4bc3      	ldr	r3, [pc, #780]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006318:	4ac2      	ldr	r2, [pc, #776]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800631a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800631e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006320:	e008      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006328:	e004      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800632a:	bf00      	nop
 800632c:	e002      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800632e:	bf00      	nop
 8006330:	e000      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006332:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006334:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006338:	2b00      	cmp	r3, #0
 800633a:	d10b      	bne.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800633c:	4bb9      	ldr	r3, [pc, #740]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800633e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006340:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006348:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800634c:	4ab5      	ldr	r2, [pc, #724]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800634e:	430b      	orrs	r3, r1
 8006350:	6553      	str	r3, [r2, #84]	; 0x54
 8006352:	e003      	b.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006354:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006358:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800635c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006364:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006368:	65bb      	str	r3, [r7, #88]	; 0x58
 800636a:	2300      	movs	r3, #0
 800636c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800636e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006372:	460b      	mov	r3, r1
 8006374:	4313      	orrs	r3, r2
 8006376:	d009      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006378:	4baa      	ldr	r3, [pc, #680]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800637a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800637c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006386:	4aa7      	ldr	r2, [pc, #668]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006388:	430b      	orrs	r3, r1
 800638a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800638c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006394:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006398:	653b      	str	r3, [r7, #80]	; 0x50
 800639a:	2300      	movs	r3, #0
 800639c:	657b      	str	r3, [r7, #84]	; 0x54
 800639e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80063a2:	460b      	mov	r3, r1
 80063a4:	4313      	orrs	r3, r2
 80063a6:	d00a      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80063a8:	4b9e      	ldr	r3, [pc, #632]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80063b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80063b8:	4a9a      	ldr	r2, [pc, #616]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063ba:	430b      	orrs	r3, r1
 80063bc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80063be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80063ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80063cc:	2300      	movs	r3, #0
 80063ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063d0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80063d4:	460b      	mov	r3, r1
 80063d6:	4313      	orrs	r3, r2
 80063d8:	d009      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80063da:	4b92      	ldr	r3, [pc, #584]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063de:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80063e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063e8:	4a8e      	ldr	r2, [pc, #568]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063ea:	430b      	orrs	r3, r1
 80063ec:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80063ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80063fa:	643b      	str	r3, [r7, #64]	; 0x40
 80063fc:	2300      	movs	r3, #0
 80063fe:	647b      	str	r3, [r7, #68]	; 0x44
 8006400:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006404:	460b      	mov	r3, r1
 8006406:	4313      	orrs	r3, r2
 8006408:	d00e      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800640a:	4b86      	ldr	r3, [pc, #536]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	4a85      	ldr	r2, [pc, #532]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006410:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006414:	6113      	str	r3, [r2, #16]
 8006416:	4b83      	ldr	r3, [pc, #524]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006418:	6919      	ldr	r1, [r3, #16]
 800641a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800641e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006422:	4a80      	ldr	r2, [pc, #512]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006424:	430b      	orrs	r3, r1
 8006426:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006428:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800642c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006430:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006434:	63bb      	str	r3, [r7, #56]	; 0x38
 8006436:	2300      	movs	r3, #0
 8006438:	63fb      	str	r3, [r7, #60]	; 0x3c
 800643a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800643e:	460b      	mov	r3, r1
 8006440:	4313      	orrs	r3, r2
 8006442:	d009      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006444:	4b77      	ldr	r3, [pc, #476]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006448:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800644c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006452:	4a74      	ldr	r2, [pc, #464]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006454:	430b      	orrs	r3, r1
 8006456:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006458:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800645c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006460:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006464:	633b      	str	r3, [r7, #48]	; 0x30
 8006466:	2300      	movs	r3, #0
 8006468:	637b      	str	r3, [r7, #52]	; 0x34
 800646a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800646e:	460b      	mov	r3, r1
 8006470:	4313      	orrs	r3, r2
 8006472:	d00a      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006474:	4b6b      	ldr	r3, [pc, #428]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006478:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800647c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006484:	4a67      	ldr	r2, [pc, #412]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006486:	430b      	orrs	r3, r1
 8006488:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800648a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800648e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006492:	2100      	movs	r1, #0
 8006494:	62b9      	str	r1, [r7, #40]	; 0x28
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800649c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80064a0:	460b      	mov	r3, r1
 80064a2:	4313      	orrs	r3, r2
 80064a4:	d011      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064aa:	3308      	adds	r3, #8
 80064ac:	2100      	movs	r1, #0
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 fb78 	bl	8006ba4 <RCCEx_PLL2_Config>
 80064b4:	4603      	mov	r3, r0
 80064b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80064ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d003      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80064ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d2:	2100      	movs	r1, #0
 80064d4:	6239      	str	r1, [r7, #32]
 80064d6:	f003 0302 	and.w	r3, r3, #2
 80064da:	627b      	str	r3, [r7, #36]	; 0x24
 80064dc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80064e0:	460b      	mov	r3, r1
 80064e2:	4313      	orrs	r3, r2
 80064e4:	d011      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ea:	3308      	adds	r3, #8
 80064ec:	2101      	movs	r1, #1
 80064ee:	4618      	mov	r0, r3
 80064f0:	f000 fb58 	bl	8006ba4 <RCCEx_PLL2_Config>
 80064f4:	4603      	mov	r3, r0
 80064f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80064fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d003      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006502:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006506:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800650a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800650e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006512:	2100      	movs	r1, #0
 8006514:	61b9      	str	r1, [r7, #24]
 8006516:	f003 0304 	and.w	r3, r3, #4
 800651a:	61fb      	str	r3, [r7, #28]
 800651c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006520:	460b      	mov	r3, r1
 8006522:	4313      	orrs	r3, r2
 8006524:	d011      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800652a:	3308      	adds	r3, #8
 800652c:	2102      	movs	r1, #2
 800652e:	4618      	mov	r0, r3
 8006530:	f000 fb38 	bl	8006ba4 <RCCEx_PLL2_Config>
 8006534:	4603      	mov	r3, r0
 8006536:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800653a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800653e:	2b00      	cmp	r3, #0
 8006540:	d003      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006542:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006546:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800654a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800654e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006552:	2100      	movs	r1, #0
 8006554:	6139      	str	r1, [r7, #16]
 8006556:	f003 0308 	and.w	r3, r3, #8
 800655a:	617b      	str	r3, [r7, #20]
 800655c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006560:	460b      	mov	r3, r1
 8006562:	4313      	orrs	r3, r2
 8006564:	d011      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800656a:	3328      	adds	r3, #40	; 0x28
 800656c:	2100      	movs	r1, #0
 800656e:	4618      	mov	r0, r3
 8006570:	f000 fbca 	bl	8006d08 <RCCEx_PLL3_Config>
 8006574:	4603      	mov	r3, r0
 8006576:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800657a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800657e:	2b00      	cmp	r3, #0
 8006580:	d003      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006582:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006586:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800658a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800658e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006592:	2100      	movs	r1, #0
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	f003 0310 	and.w	r3, r3, #16
 800659a:	60fb      	str	r3, [r7, #12]
 800659c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80065a0:	460b      	mov	r3, r1
 80065a2:	4313      	orrs	r3, r2
 80065a4:	d011      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065aa:	3328      	adds	r3, #40	; 0x28
 80065ac:	2101      	movs	r1, #1
 80065ae:	4618      	mov	r0, r3
 80065b0:	f000 fbaa 	bl	8006d08 <RCCEx_PLL3_Config>
 80065b4:	4603      	mov	r3, r0
 80065b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80065ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d003      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80065ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d2:	2100      	movs	r1, #0
 80065d4:	6039      	str	r1, [r7, #0]
 80065d6:	f003 0320 	and.w	r3, r3, #32
 80065da:	607b      	str	r3, [r7, #4]
 80065dc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80065e0:	460b      	mov	r3, r1
 80065e2:	4313      	orrs	r3, r2
 80065e4:	d011      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065ea:	3328      	adds	r3, #40	; 0x28
 80065ec:	2102      	movs	r1, #2
 80065ee:	4618      	mov	r0, r3
 80065f0:	f000 fb8a 	bl	8006d08 <RCCEx_PLL3_Config>
 80065f4:	4603      	mov	r3, r0
 80065f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80065fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d003      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006602:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006606:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800660a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800660e:	2b00      	cmp	r3, #0
 8006610:	d101      	bne.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006612:	2300      	movs	r3, #0
 8006614:	e000      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
}
 8006618:	4618      	mov	r0, r3
 800661a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800661e:	46bd      	mov	sp, r7
 8006620:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006624:	58024400 	.word	0x58024400

08006628 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800662c:	f7fe fd96 	bl	800515c <HAL_RCC_GetHCLKFreq>
 8006630:	4602      	mov	r2, r0
 8006632:	4b06      	ldr	r3, [pc, #24]	; (800664c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	091b      	lsrs	r3, r3, #4
 8006638:	f003 0307 	and.w	r3, r3, #7
 800663c:	4904      	ldr	r1, [pc, #16]	; (8006650 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800663e:	5ccb      	ldrb	r3, [r1, r3]
 8006640:	f003 031f 	and.w	r3, r3, #31
 8006644:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006648:	4618      	mov	r0, r3
 800664a:	bd80      	pop	{r7, pc}
 800664c:	58024400 	.word	0x58024400
 8006650:	0800ffa0 	.word	0x0800ffa0

08006654 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006654:	b480      	push	{r7}
 8006656:	b089      	sub	sp, #36	; 0x24
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800665c:	4ba1      	ldr	r3, [pc, #644]	; (80068e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800665e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006660:	f003 0303 	and.w	r3, r3, #3
 8006664:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006666:	4b9f      	ldr	r3, [pc, #636]	; (80068e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666a:	0b1b      	lsrs	r3, r3, #12
 800666c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006670:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006672:	4b9c      	ldr	r3, [pc, #624]	; (80068e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006676:	091b      	lsrs	r3, r3, #4
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800667e:	4b99      	ldr	r3, [pc, #612]	; (80068e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006682:	08db      	lsrs	r3, r3, #3
 8006684:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	fb02 f303 	mul.w	r3, r2, r3
 800668e:	ee07 3a90 	vmov	s15, r3
 8006692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006696:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	2b00      	cmp	r3, #0
 800669e:	f000 8111 	beq.w	80068c4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	f000 8083 	beq.w	80067b0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	f200 80a1 	bhi.w	80067f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d003      	beq.n	80066c0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d056      	beq.n	800676c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80066be:	e099      	b.n	80067f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066c0:	4b88      	ldr	r3, [pc, #544]	; (80068e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0320 	and.w	r3, r3, #32
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d02d      	beq.n	8006728 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066cc:	4b85      	ldr	r3, [pc, #532]	; (80068e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	08db      	lsrs	r3, r3, #3
 80066d2:	f003 0303 	and.w	r3, r3, #3
 80066d6:	4a84      	ldr	r2, [pc, #528]	; (80068e8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80066d8:	fa22 f303 	lsr.w	r3, r2, r3
 80066dc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	ee07 3a90 	vmov	s15, r3
 80066e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	ee07 3a90 	vmov	s15, r3
 80066ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066f6:	4b7b      	ldr	r3, [pc, #492]	; (80068e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066fe:	ee07 3a90 	vmov	s15, r3
 8006702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006706:	ed97 6a03 	vldr	s12, [r7, #12]
 800670a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80068ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800670e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800671a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800671e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006722:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006726:	e087      	b.n	8006838 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	ee07 3a90 	vmov	s15, r3
 800672e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006732:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80068f0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800673a:	4b6a      	ldr	r3, [pc, #424]	; (80068e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800673c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006742:	ee07 3a90 	vmov	s15, r3
 8006746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800674a:	ed97 6a03 	vldr	s12, [r7, #12]
 800674e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80068ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800675a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800675e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006766:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800676a:	e065      	b.n	8006838 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	ee07 3a90 	vmov	s15, r3
 8006772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006776:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800677a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800677e:	4b59      	ldr	r3, [pc, #356]	; (80068e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006786:	ee07 3a90 	vmov	s15, r3
 800678a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800678e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006792:	eddf 5a56 	vldr	s11, [pc, #344]	; 80068ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800679a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800679e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067ae:	e043      	b.n	8006838 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	ee07 3a90 	vmov	s15, r3
 80067b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80068f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80067be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067c2:	4b48      	ldr	r3, [pc, #288]	; (80068e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ca:	ee07 3a90 	vmov	s15, r3
 80067ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80067d6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80068ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067f2:	e021      	b.n	8006838 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	ee07 3a90 	vmov	s15, r3
 80067fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006806:	4b37      	ldr	r3, [pc, #220]	; (80068e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800680e:	ee07 3a90 	vmov	s15, r3
 8006812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006816:	ed97 6a03 	vldr	s12, [r7, #12]
 800681a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80068ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800681e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006826:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800682a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800682e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006832:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006836:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006838:	4b2a      	ldr	r3, [pc, #168]	; (80068e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800683a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683c:	0a5b      	lsrs	r3, r3, #9
 800683e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006842:	ee07 3a90 	vmov	s15, r3
 8006846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800684a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800684e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006852:	edd7 6a07 	vldr	s13, [r7, #28]
 8006856:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800685a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800685e:	ee17 2a90 	vmov	r2, s15
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006866:	4b1f      	ldr	r3, [pc, #124]	; (80068e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800686a:	0c1b      	lsrs	r3, r3, #16
 800686c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006870:	ee07 3a90 	vmov	s15, r3
 8006874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006878:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800687c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006880:	edd7 6a07 	vldr	s13, [r7, #28]
 8006884:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800688c:	ee17 2a90 	vmov	r2, s15
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006894:	4b13      	ldr	r3, [pc, #76]	; (80068e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006898:	0e1b      	lsrs	r3, r3, #24
 800689a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800689e:	ee07 3a90 	vmov	s15, r3
 80068a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80068b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068ba:	ee17 2a90 	vmov	r2, s15
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80068c2:	e008      	b.n	80068d6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	609a      	str	r2, [r3, #8]
}
 80068d6:	bf00      	nop
 80068d8:	3724      	adds	r7, #36	; 0x24
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	58024400 	.word	0x58024400
 80068e8:	03d09000 	.word	0x03d09000
 80068ec:	46000000 	.word	0x46000000
 80068f0:	4c742400 	.word	0x4c742400
 80068f4:	4a742400 	.word	0x4a742400
 80068f8:	4bbebc20 	.word	0x4bbebc20

080068fc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b089      	sub	sp, #36	; 0x24
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006904:	4ba1      	ldr	r3, [pc, #644]	; (8006b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006908:	f003 0303 	and.w	r3, r3, #3
 800690c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800690e:	4b9f      	ldr	r3, [pc, #636]	; (8006b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006912:	0d1b      	lsrs	r3, r3, #20
 8006914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006918:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800691a:	4b9c      	ldr	r3, [pc, #624]	; (8006b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800691c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691e:	0a1b      	lsrs	r3, r3, #8
 8006920:	f003 0301 	and.w	r3, r3, #1
 8006924:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006926:	4b99      	ldr	r3, [pc, #612]	; (8006b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800692a:	08db      	lsrs	r3, r3, #3
 800692c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	fb02 f303 	mul.w	r3, r2, r3
 8006936:	ee07 3a90 	vmov	s15, r3
 800693a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800693e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	2b00      	cmp	r3, #0
 8006946:	f000 8111 	beq.w	8006b6c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	2b02      	cmp	r3, #2
 800694e:	f000 8083 	beq.w	8006a58 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	2b02      	cmp	r3, #2
 8006956:	f200 80a1 	bhi.w	8006a9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d003      	beq.n	8006968 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d056      	beq.n	8006a14 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006966:	e099      	b.n	8006a9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006968:	4b88      	ldr	r3, [pc, #544]	; (8006b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0320 	and.w	r3, r3, #32
 8006970:	2b00      	cmp	r3, #0
 8006972:	d02d      	beq.n	80069d0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006974:	4b85      	ldr	r3, [pc, #532]	; (8006b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	08db      	lsrs	r3, r3, #3
 800697a:	f003 0303 	and.w	r3, r3, #3
 800697e:	4a84      	ldr	r2, [pc, #528]	; (8006b90 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006980:	fa22 f303 	lsr.w	r3, r2, r3
 8006984:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	ee07 3a90 	vmov	s15, r3
 800698c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	ee07 3a90 	vmov	s15, r3
 8006996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800699a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800699e:	4b7b      	ldr	r3, [pc, #492]	; (8006b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069a6:	ee07 3a90 	vmov	s15, r3
 80069aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80069b2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006b94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80069ce:	e087      	b.n	8006ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	ee07 3a90 	vmov	s15, r3
 80069d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069da:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006b98 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80069de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069e2:	4b6a      	ldr	r3, [pc, #424]	; (8006b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ea:	ee07 3a90 	vmov	s15, r3
 80069ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80069f6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006b94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a12:	e065      	b.n	8006ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	ee07 3a90 	vmov	s15, r3
 8006a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a1e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006a22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a26:	4b59      	ldr	r3, [pc, #356]	; (8006b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a2e:	ee07 3a90 	vmov	s15, r3
 8006a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a36:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a3a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006b94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a56:	e043      	b.n	8006ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	ee07 3a90 	vmov	s15, r3
 8006a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a62:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a6a:	4b48      	ldr	r3, [pc, #288]	; (8006b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a72:	ee07 3a90 	vmov	s15, r3
 8006a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a7e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006b94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a9a:	e021      	b.n	8006ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	ee07 3a90 	vmov	s15, r3
 8006aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aa6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aae:	4b37      	ldr	r3, [pc, #220]	; (8006b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab6:	ee07 3a90 	vmov	s15, r3
 8006aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006abe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ac2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006b94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ada:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ade:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006ae0:	4b2a      	ldr	r3, [pc, #168]	; (8006b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae4:	0a5b      	lsrs	r3, r3, #9
 8006ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aea:	ee07 3a90 	vmov	s15, r3
 8006aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006af2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006af6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006afa:	edd7 6a07 	vldr	s13, [r7, #28]
 8006afe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b06:	ee17 2a90 	vmov	r2, s15
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006b0e:	4b1f      	ldr	r3, [pc, #124]	; (8006b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b12:	0c1b      	lsrs	r3, r3, #16
 8006b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b18:	ee07 3a90 	vmov	s15, r3
 8006b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b28:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b34:	ee17 2a90 	vmov	r2, s15
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006b3c:	4b13      	ldr	r3, [pc, #76]	; (8006b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b40:	0e1b      	lsrs	r3, r3, #24
 8006b42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b46:	ee07 3a90 	vmov	s15, r3
 8006b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b56:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b62:	ee17 2a90 	vmov	r2, s15
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006b6a:	e008      	b.n	8006b7e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	609a      	str	r2, [r3, #8]
}
 8006b7e:	bf00      	nop
 8006b80:	3724      	adds	r7, #36	; 0x24
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	58024400 	.word	0x58024400
 8006b90:	03d09000 	.word	0x03d09000
 8006b94:	46000000 	.word	0x46000000
 8006b98:	4c742400 	.word	0x4c742400
 8006b9c:	4a742400 	.word	0x4a742400
 8006ba0:	4bbebc20 	.word	0x4bbebc20

08006ba4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006bb2:	4b53      	ldr	r3, [pc, #332]	; (8006d00 <RCCEx_PLL2_Config+0x15c>)
 8006bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb6:	f003 0303 	and.w	r3, r3, #3
 8006bba:	2b03      	cmp	r3, #3
 8006bbc:	d101      	bne.n	8006bc2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e099      	b.n	8006cf6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006bc2:	4b4f      	ldr	r3, [pc, #316]	; (8006d00 <RCCEx_PLL2_Config+0x15c>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a4e      	ldr	r2, [pc, #312]	; (8006d00 <RCCEx_PLL2_Config+0x15c>)
 8006bc8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006bcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bce:	f7fb f91f 	bl	8001e10 <HAL_GetTick>
 8006bd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006bd4:	e008      	b.n	8006be8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006bd6:	f7fb f91b 	bl	8001e10 <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d901      	bls.n	8006be8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e086      	b.n	8006cf6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006be8:	4b45      	ldr	r3, [pc, #276]	; (8006d00 <RCCEx_PLL2_Config+0x15c>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1f0      	bne.n	8006bd6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006bf4:	4b42      	ldr	r3, [pc, #264]	; (8006d00 <RCCEx_PLL2_Config+0x15c>)
 8006bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	031b      	lsls	r3, r3, #12
 8006c02:	493f      	ldr	r1, [pc, #252]	; (8006d00 <RCCEx_PLL2_Config+0x15c>)
 8006c04:	4313      	orrs	r3, r2
 8006c06:	628b      	str	r3, [r1, #40]	; 0x28
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	3b01      	subs	r3, #1
 8006c18:	025b      	lsls	r3, r3, #9
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	431a      	orrs	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	3b01      	subs	r3, #1
 8006c24:	041b      	lsls	r3, r3, #16
 8006c26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006c2a:	431a      	orrs	r2, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	3b01      	subs	r3, #1
 8006c32:	061b      	lsls	r3, r3, #24
 8006c34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006c38:	4931      	ldr	r1, [pc, #196]	; (8006d00 <RCCEx_PLL2_Config+0x15c>)
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006c3e:	4b30      	ldr	r3, [pc, #192]	; (8006d00 <RCCEx_PLL2_Config+0x15c>)
 8006c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	492d      	ldr	r1, [pc, #180]	; (8006d00 <RCCEx_PLL2_Config+0x15c>)
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006c50:	4b2b      	ldr	r3, [pc, #172]	; (8006d00 <RCCEx_PLL2_Config+0x15c>)
 8006c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c54:	f023 0220 	bic.w	r2, r3, #32
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	4928      	ldr	r1, [pc, #160]	; (8006d00 <RCCEx_PLL2_Config+0x15c>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006c62:	4b27      	ldr	r3, [pc, #156]	; (8006d00 <RCCEx_PLL2_Config+0x15c>)
 8006c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c66:	4a26      	ldr	r2, [pc, #152]	; (8006d00 <RCCEx_PLL2_Config+0x15c>)
 8006c68:	f023 0310 	bic.w	r3, r3, #16
 8006c6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006c6e:	4b24      	ldr	r3, [pc, #144]	; (8006d00 <RCCEx_PLL2_Config+0x15c>)
 8006c70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c72:	4b24      	ldr	r3, [pc, #144]	; (8006d04 <RCCEx_PLL2_Config+0x160>)
 8006c74:	4013      	ands	r3, r2
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	69d2      	ldr	r2, [r2, #28]
 8006c7a:	00d2      	lsls	r2, r2, #3
 8006c7c:	4920      	ldr	r1, [pc, #128]	; (8006d00 <RCCEx_PLL2_Config+0x15c>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006c82:	4b1f      	ldr	r3, [pc, #124]	; (8006d00 <RCCEx_PLL2_Config+0x15c>)
 8006c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c86:	4a1e      	ldr	r2, [pc, #120]	; (8006d00 <RCCEx_PLL2_Config+0x15c>)
 8006c88:	f043 0310 	orr.w	r3, r3, #16
 8006c8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d106      	bne.n	8006ca2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006c94:	4b1a      	ldr	r3, [pc, #104]	; (8006d00 <RCCEx_PLL2_Config+0x15c>)
 8006c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c98:	4a19      	ldr	r2, [pc, #100]	; (8006d00 <RCCEx_PLL2_Config+0x15c>)
 8006c9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ca0:	e00f      	b.n	8006cc2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d106      	bne.n	8006cb6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006ca8:	4b15      	ldr	r3, [pc, #84]	; (8006d00 <RCCEx_PLL2_Config+0x15c>)
 8006caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cac:	4a14      	ldr	r2, [pc, #80]	; (8006d00 <RCCEx_PLL2_Config+0x15c>)
 8006cae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006cb4:	e005      	b.n	8006cc2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006cb6:	4b12      	ldr	r3, [pc, #72]	; (8006d00 <RCCEx_PLL2_Config+0x15c>)
 8006cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cba:	4a11      	ldr	r2, [pc, #68]	; (8006d00 <RCCEx_PLL2_Config+0x15c>)
 8006cbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006cc0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006cc2:	4b0f      	ldr	r3, [pc, #60]	; (8006d00 <RCCEx_PLL2_Config+0x15c>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a0e      	ldr	r2, [pc, #56]	; (8006d00 <RCCEx_PLL2_Config+0x15c>)
 8006cc8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ccc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cce:	f7fb f89f 	bl	8001e10 <HAL_GetTick>
 8006cd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006cd4:	e008      	b.n	8006ce8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006cd6:	f7fb f89b 	bl	8001e10 <HAL_GetTick>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	d901      	bls.n	8006ce8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e006      	b.n	8006cf6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006ce8:	4b05      	ldr	r3, [pc, #20]	; (8006d00 <RCCEx_PLL2_Config+0x15c>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d0f0      	beq.n	8006cd6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	58024400 	.word	0x58024400
 8006d04:	ffff0007 	.word	0xffff0007

08006d08 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d12:	2300      	movs	r3, #0
 8006d14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d16:	4b53      	ldr	r3, [pc, #332]	; (8006e64 <RCCEx_PLL3_Config+0x15c>)
 8006d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1a:	f003 0303 	and.w	r3, r3, #3
 8006d1e:	2b03      	cmp	r3, #3
 8006d20:	d101      	bne.n	8006d26 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e099      	b.n	8006e5a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006d26:	4b4f      	ldr	r3, [pc, #316]	; (8006e64 <RCCEx_PLL3_Config+0x15c>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a4e      	ldr	r2, [pc, #312]	; (8006e64 <RCCEx_PLL3_Config+0x15c>)
 8006d2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d32:	f7fb f86d 	bl	8001e10 <HAL_GetTick>
 8006d36:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d38:	e008      	b.n	8006d4c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006d3a:	f7fb f869 	bl	8001e10 <HAL_GetTick>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d901      	bls.n	8006d4c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e086      	b.n	8006e5a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d4c:	4b45      	ldr	r3, [pc, #276]	; (8006e64 <RCCEx_PLL3_Config+0x15c>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1f0      	bne.n	8006d3a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006d58:	4b42      	ldr	r3, [pc, #264]	; (8006e64 <RCCEx_PLL3_Config+0x15c>)
 8006d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d5c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	051b      	lsls	r3, r3, #20
 8006d66:	493f      	ldr	r1, [pc, #252]	; (8006e64 <RCCEx_PLL3_Config+0x15c>)
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	628b      	str	r3, [r1, #40]	; 0x28
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	3b01      	subs	r3, #1
 8006d72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	025b      	lsls	r3, r3, #9
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	431a      	orrs	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	3b01      	subs	r3, #1
 8006d88:	041b      	lsls	r3, r3, #16
 8006d8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006d8e:	431a      	orrs	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	3b01      	subs	r3, #1
 8006d96:	061b      	lsls	r3, r3, #24
 8006d98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006d9c:	4931      	ldr	r1, [pc, #196]	; (8006e64 <RCCEx_PLL3_Config+0x15c>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006da2:	4b30      	ldr	r3, [pc, #192]	; (8006e64 <RCCEx_PLL3_Config+0x15c>)
 8006da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	695b      	ldr	r3, [r3, #20]
 8006dae:	492d      	ldr	r1, [pc, #180]	; (8006e64 <RCCEx_PLL3_Config+0x15c>)
 8006db0:	4313      	orrs	r3, r2
 8006db2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006db4:	4b2b      	ldr	r3, [pc, #172]	; (8006e64 <RCCEx_PLL3_Config+0x15c>)
 8006db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	699b      	ldr	r3, [r3, #24]
 8006dc0:	4928      	ldr	r1, [pc, #160]	; (8006e64 <RCCEx_PLL3_Config+0x15c>)
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006dc6:	4b27      	ldr	r3, [pc, #156]	; (8006e64 <RCCEx_PLL3_Config+0x15c>)
 8006dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dca:	4a26      	ldr	r2, [pc, #152]	; (8006e64 <RCCEx_PLL3_Config+0x15c>)
 8006dcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006dd2:	4b24      	ldr	r3, [pc, #144]	; (8006e64 <RCCEx_PLL3_Config+0x15c>)
 8006dd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dd6:	4b24      	ldr	r3, [pc, #144]	; (8006e68 <RCCEx_PLL3_Config+0x160>)
 8006dd8:	4013      	ands	r3, r2
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	69d2      	ldr	r2, [r2, #28]
 8006dde:	00d2      	lsls	r2, r2, #3
 8006de0:	4920      	ldr	r1, [pc, #128]	; (8006e64 <RCCEx_PLL3_Config+0x15c>)
 8006de2:	4313      	orrs	r3, r2
 8006de4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006de6:	4b1f      	ldr	r3, [pc, #124]	; (8006e64 <RCCEx_PLL3_Config+0x15c>)
 8006de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dea:	4a1e      	ldr	r2, [pc, #120]	; (8006e64 <RCCEx_PLL3_Config+0x15c>)
 8006dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006df0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d106      	bne.n	8006e06 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006df8:	4b1a      	ldr	r3, [pc, #104]	; (8006e64 <RCCEx_PLL3_Config+0x15c>)
 8006dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfc:	4a19      	ldr	r2, [pc, #100]	; (8006e64 <RCCEx_PLL3_Config+0x15c>)
 8006dfe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006e02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e04:	e00f      	b.n	8006e26 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d106      	bne.n	8006e1a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006e0c:	4b15      	ldr	r3, [pc, #84]	; (8006e64 <RCCEx_PLL3_Config+0x15c>)
 8006e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e10:	4a14      	ldr	r2, [pc, #80]	; (8006e64 <RCCEx_PLL3_Config+0x15c>)
 8006e12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006e16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e18:	e005      	b.n	8006e26 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006e1a:	4b12      	ldr	r3, [pc, #72]	; (8006e64 <RCCEx_PLL3_Config+0x15c>)
 8006e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1e:	4a11      	ldr	r2, [pc, #68]	; (8006e64 <RCCEx_PLL3_Config+0x15c>)
 8006e20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e24:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006e26:	4b0f      	ldr	r3, [pc, #60]	; (8006e64 <RCCEx_PLL3_Config+0x15c>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a0e      	ldr	r2, [pc, #56]	; (8006e64 <RCCEx_PLL3_Config+0x15c>)
 8006e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e32:	f7fa ffed 	bl	8001e10 <HAL_GetTick>
 8006e36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e38:	e008      	b.n	8006e4c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006e3a:	f7fa ffe9 	bl	8001e10 <HAL_GetTick>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d901      	bls.n	8006e4c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e006      	b.n	8006e5a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e4c:	4b05      	ldr	r3, [pc, #20]	; (8006e64 <RCCEx_PLL3_Config+0x15c>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d0f0      	beq.n	8006e3a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	58024400 	.word	0x58024400
 8006e68:	ffff0007 	.word	0xffff0007

08006e6c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d101      	bne.n	8006e80 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e02b      	b.n	8006ed8 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d106      	bne.n	8006e9a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f7fa fd73 	bl	8001980 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2202      	movs	r2, #2
 8006e9e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	3304      	adds	r3, #4
 8006eaa:	4619      	mov	r1, r3
 8006eac:	4610      	mov	r0, r2
 8006eae:	f003 fb59 	bl	800a564 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6818      	ldr	r0, [r3, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	6839      	ldr	r1, [r7, #0]
 8006ebe:	f003 fbad 	bl	800a61c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8006ec2:	4b07      	ldr	r3, [pc, #28]	; (8006ee0 <HAL_SDRAM_Init+0x74>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a06      	ldr	r2, [pc, #24]	; (8006ee0 <HAL_SDRAM_Init+0x74>)
 8006ec8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ecc:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3708      	adds	r7, #8
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	52004000 	.word	0x52004000

08006ee4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006ef6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006ef8:	7dfb      	ldrb	r3, [r7, #23]
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d101      	bne.n	8006f02 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8006efe:	2302      	movs	r3, #2
 8006f00:	e021      	b.n	8006f46 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006f02:	7dfb      	ldrb	r3, [r7, #23]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d002      	beq.n	8006f0e <HAL_SDRAM_SendCommand+0x2a>
 8006f08:	7dfb      	ldrb	r3, [r7, #23]
 8006f0a:	2b05      	cmp	r3, #5
 8006f0c:	d118      	bne.n	8006f40 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2202      	movs	r2, #2
 8006f12:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	68b9      	ldr	r1, [r7, #8]
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f003 fbe6 	bl	800a6f0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d104      	bne.n	8006f36 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2205      	movs	r2, #5
 8006f30:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006f34:	e006      	b.n	8006f44 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006f3e:	e001      	b.n	8006f44 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e000      	b.n	8006f46 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3718      	adds	r7, #24
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b082      	sub	sp, #8
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
 8006f56:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d101      	bne.n	8006f68 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006f64:	2302      	movs	r3, #2
 8006f66:	e016      	b.n	8006f96 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d10f      	bne.n	8006f94 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2202      	movs	r2, #2
 8006f78:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	6839      	ldr	r1, [r7, #0]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f003 fbd8 	bl	800a738 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
 8006f92:	e000      	b.n	8006f96 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b082      	sub	sp, #8
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d101      	bne.n	8006fb0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e049      	b.n	8007044 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d106      	bne.n	8006fca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f7fa fb2f 	bl	8001628 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2202      	movs	r2, #2
 8006fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	3304      	adds	r3, #4
 8006fda:	4619      	mov	r1, r3
 8006fdc:	4610      	mov	r0, r2
 8006fde:	f000 fa7f 	bl	80074e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2201      	movs	r2, #1
 8006fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2201      	movs	r2, #1
 8007006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2201      	movs	r2, #1
 800700e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2201      	movs	r2, #1
 8007016:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2201      	movs	r2, #1
 800701e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2201      	movs	r2, #1
 8007026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2201      	movs	r2, #1
 800702e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2201      	movs	r2, #1
 8007036:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2201      	movs	r2, #1
 800703e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3708      	adds	r7, #8
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	f003 0302 	and.w	r3, r3, #2
 800705e:	2b02      	cmp	r3, #2
 8007060:	d122      	bne.n	80070a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	f003 0302 	and.w	r3, r3, #2
 800706c:	2b02      	cmp	r3, #2
 800706e:	d11b      	bne.n	80070a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f06f 0202 	mvn.w	r2, #2
 8007078:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2201      	movs	r2, #1
 800707e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	f003 0303 	and.w	r3, r3, #3
 800708a:	2b00      	cmp	r3, #0
 800708c:	d003      	beq.n	8007096 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 fa08 	bl	80074a4 <HAL_TIM_IC_CaptureCallback>
 8007094:	e005      	b.n	80070a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f9fa 	bl	8007490 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fa0b 	bl	80074b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	f003 0304 	and.w	r3, r3, #4
 80070b2:	2b04      	cmp	r3, #4
 80070b4:	d122      	bne.n	80070fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	f003 0304 	and.w	r3, r3, #4
 80070c0:	2b04      	cmp	r3, #4
 80070c2:	d11b      	bne.n	80070fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f06f 0204 	mvn.w	r2, #4
 80070cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2202      	movs	r2, #2
 80070d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	699b      	ldr	r3, [r3, #24]
 80070da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d003      	beq.n	80070ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 f9de 	bl	80074a4 <HAL_TIM_IC_CaptureCallback>
 80070e8:	e005      	b.n	80070f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f9d0 	bl	8007490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 f9e1 	bl	80074b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	f003 0308 	and.w	r3, r3, #8
 8007106:	2b08      	cmp	r3, #8
 8007108:	d122      	bne.n	8007150 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	f003 0308 	and.w	r3, r3, #8
 8007114:	2b08      	cmp	r3, #8
 8007116:	d11b      	bne.n	8007150 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f06f 0208 	mvn.w	r2, #8
 8007120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2204      	movs	r2, #4
 8007126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	f003 0303 	and.w	r3, r3, #3
 8007132:	2b00      	cmp	r3, #0
 8007134:	d003      	beq.n	800713e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f9b4 	bl	80074a4 <HAL_TIM_IC_CaptureCallback>
 800713c:	e005      	b.n	800714a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 f9a6 	bl	8007490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f9b7 	bl	80074b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	f003 0310 	and.w	r3, r3, #16
 800715a:	2b10      	cmp	r3, #16
 800715c:	d122      	bne.n	80071a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	f003 0310 	and.w	r3, r3, #16
 8007168:	2b10      	cmp	r3, #16
 800716a:	d11b      	bne.n	80071a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f06f 0210 	mvn.w	r2, #16
 8007174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2208      	movs	r2, #8
 800717a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	69db      	ldr	r3, [r3, #28]
 8007182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007186:	2b00      	cmp	r3, #0
 8007188:	d003      	beq.n	8007192 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 f98a 	bl	80074a4 <HAL_TIM_IC_CaptureCallback>
 8007190:	e005      	b.n	800719e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f97c 	bl	8007490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f98d 	bl	80074b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	f003 0301 	and.w	r3, r3, #1
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d10e      	bne.n	80071d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	f003 0301 	and.w	r3, r3, #1
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d107      	bne.n	80071d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f06f 0201 	mvn.w	r2, #1
 80071c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f956 	bl	800747c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071da:	2b80      	cmp	r3, #128	; 0x80
 80071dc:	d10e      	bne.n	80071fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071e8:	2b80      	cmp	r3, #128	; 0x80
 80071ea:	d107      	bne.n	80071fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80071f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fb42 	bl	8007880 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800720a:	d10e      	bne.n	800722a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007216:	2b80      	cmp	r3, #128	; 0x80
 8007218:	d107      	bne.n	800722a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 fb35 	bl	8007894 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007234:	2b40      	cmp	r3, #64	; 0x40
 8007236:	d10e      	bne.n	8007256 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007242:	2b40      	cmp	r3, #64	; 0x40
 8007244:	d107      	bne.n	8007256 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800724e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 f93b 	bl	80074cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	f003 0320 	and.w	r3, r3, #32
 8007260:	2b20      	cmp	r3, #32
 8007262:	d10e      	bne.n	8007282 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	f003 0320 	and.w	r3, r3, #32
 800726e:	2b20      	cmp	r3, #32
 8007270:	d107      	bne.n	8007282 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f06f 0220 	mvn.w	r2, #32
 800727a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 faf5 	bl	800786c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007282:	bf00      	nop
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
	...

0800728c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007296:	2300      	movs	r3, #0
 8007298:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d101      	bne.n	80072a8 <HAL_TIM_ConfigClockSource+0x1c>
 80072a4:	2302      	movs	r3, #2
 80072a6:	e0dc      	b.n	8007462 <HAL_TIM_ConfigClockSource+0x1d6>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2202      	movs	r2, #2
 80072b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072c0:	68ba      	ldr	r2, [r7, #8]
 80072c2:	4b6a      	ldr	r3, [pc, #424]	; (800746c <HAL_TIM_ConfigClockSource+0x1e0>)
 80072c4:	4013      	ands	r3, r2
 80072c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a64      	ldr	r2, [pc, #400]	; (8007470 <HAL_TIM_ConfigClockSource+0x1e4>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	f000 80a9 	beq.w	8007436 <HAL_TIM_ConfigClockSource+0x1aa>
 80072e4:	4a62      	ldr	r2, [pc, #392]	; (8007470 <HAL_TIM_ConfigClockSource+0x1e4>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	f200 80ae 	bhi.w	8007448 <HAL_TIM_ConfigClockSource+0x1bc>
 80072ec:	4a61      	ldr	r2, [pc, #388]	; (8007474 <HAL_TIM_ConfigClockSource+0x1e8>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	f000 80a1 	beq.w	8007436 <HAL_TIM_ConfigClockSource+0x1aa>
 80072f4:	4a5f      	ldr	r2, [pc, #380]	; (8007474 <HAL_TIM_ConfigClockSource+0x1e8>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	f200 80a6 	bhi.w	8007448 <HAL_TIM_ConfigClockSource+0x1bc>
 80072fc:	4a5e      	ldr	r2, [pc, #376]	; (8007478 <HAL_TIM_ConfigClockSource+0x1ec>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	f000 8099 	beq.w	8007436 <HAL_TIM_ConfigClockSource+0x1aa>
 8007304:	4a5c      	ldr	r2, [pc, #368]	; (8007478 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007306:	4293      	cmp	r3, r2
 8007308:	f200 809e 	bhi.w	8007448 <HAL_TIM_ConfigClockSource+0x1bc>
 800730c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007310:	f000 8091 	beq.w	8007436 <HAL_TIM_ConfigClockSource+0x1aa>
 8007314:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007318:	f200 8096 	bhi.w	8007448 <HAL_TIM_ConfigClockSource+0x1bc>
 800731c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007320:	f000 8089 	beq.w	8007436 <HAL_TIM_ConfigClockSource+0x1aa>
 8007324:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007328:	f200 808e 	bhi.w	8007448 <HAL_TIM_ConfigClockSource+0x1bc>
 800732c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007330:	d03e      	beq.n	80073b0 <HAL_TIM_ConfigClockSource+0x124>
 8007332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007336:	f200 8087 	bhi.w	8007448 <HAL_TIM_ConfigClockSource+0x1bc>
 800733a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800733e:	f000 8086 	beq.w	800744e <HAL_TIM_ConfigClockSource+0x1c2>
 8007342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007346:	d87f      	bhi.n	8007448 <HAL_TIM_ConfigClockSource+0x1bc>
 8007348:	2b70      	cmp	r3, #112	; 0x70
 800734a:	d01a      	beq.n	8007382 <HAL_TIM_ConfigClockSource+0xf6>
 800734c:	2b70      	cmp	r3, #112	; 0x70
 800734e:	d87b      	bhi.n	8007448 <HAL_TIM_ConfigClockSource+0x1bc>
 8007350:	2b60      	cmp	r3, #96	; 0x60
 8007352:	d050      	beq.n	80073f6 <HAL_TIM_ConfigClockSource+0x16a>
 8007354:	2b60      	cmp	r3, #96	; 0x60
 8007356:	d877      	bhi.n	8007448 <HAL_TIM_ConfigClockSource+0x1bc>
 8007358:	2b50      	cmp	r3, #80	; 0x50
 800735a:	d03c      	beq.n	80073d6 <HAL_TIM_ConfigClockSource+0x14a>
 800735c:	2b50      	cmp	r3, #80	; 0x50
 800735e:	d873      	bhi.n	8007448 <HAL_TIM_ConfigClockSource+0x1bc>
 8007360:	2b40      	cmp	r3, #64	; 0x40
 8007362:	d058      	beq.n	8007416 <HAL_TIM_ConfigClockSource+0x18a>
 8007364:	2b40      	cmp	r3, #64	; 0x40
 8007366:	d86f      	bhi.n	8007448 <HAL_TIM_ConfigClockSource+0x1bc>
 8007368:	2b30      	cmp	r3, #48	; 0x30
 800736a:	d064      	beq.n	8007436 <HAL_TIM_ConfigClockSource+0x1aa>
 800736c:	2b30      	cmp	r3, #48	; 0x30
 800736e:	d86b      	bhi.n	8007448 <HAL_TIM_ConfigClockSource+0x1bc>
 8007370:	2b20      	cmp	r3, #32
 8007372:	d060      	beq.n	8007436 <HAL_TIM_ConfigClockSource+0x1aa>
 8007374:	2b20      	cmp	r3, #32
 8007376:	d867      	bhi.n	8007448 <HAL_TIM_ConfigClockSource+0x1bc>
 8007378:	2b00      	cmp	r3, #0
 800737a:	d05c      	beq.n	8007436 <HAL_TIM_ConfigClockSource+0x1aa>
 800737c:	2b10      	cmp	r3, #16
 800737e:	d05a      	beq.n	8007436 <HAL_TIM_ConfigClockSource+0x1aa>
 8007380:	e062      	b.n	8007448 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007392:	f000 f9bd 	bl	8007710 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80073a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	609a      	str	r2, [r3, #8]
      break;
 80073ae:	e04f      	b.n	8007450 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80073c0:	f000 f9a6 	bl	8007710 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	689a      	ldr	r2, [r3, #8]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80073d2:	609a      	str	r2, [r3, #8]
      break;
 80073d4:	e03c      	b.n	8007450 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073e2:	461a      	mov	r2, r3
 80073e4:	f000 f916 	bl	8007614 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2150      	movs	r1, #80	; 0x50
 80073ee:	4618      	mov	r0, r3
 80073f0:	f000 f970 	bl	80076d4 <TIM_ITRx_SetConfig>
      break;
 80073f4:	e02c      	b.n	8007450 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007402:	461a      	mov	r2, r3
 8007404:	f000 f935 	bl	8007672 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2160      	movs	r1, #96	; 0x60
 800740e:	4618      	mov	r0, r3
 8007410:	f000 f960 	bl	80076d4 <TIM_ITRx_SetConfig>
      break;
 8007414:	e01c      	b.n	8007450 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007422:	461a      	mov	r2, r3
 8007424:	f000 f8f6 	bl	8007614 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2140      	movs	r1, #64	; 0x40
 800742e:	4618      	mov	r0, r3
 8007430:	f000 f950 	bl	80076d4 <TIM_ITRx_SetConfig>
      break;
 8007434:	e00c      	b.n	8007450 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4619      	mov	r1, r3
 8007440:	4610      	mov	r0, r2
 8007442:	f000 f947 	bl	80076d4 <TIM_ITRx_SetConfig>
      break;
 8007446:	e003      	b.n	8007450 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	73fb      	strb	r3, [r7, #15]
      break;
 800744c:	e000      	b.n	8007450 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800744e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007460:	7bfb      	ldrb	r3, [r7, #15]
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	ffceff88 	.word	0xffceff88
 8007470:	00100040 	.word	0x00100040
 8007474:	00100030 	.word	0x00100030
 8007478:	00100020 	.word	0x00100020

0800747c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007484:	bf00      	nop
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007498:	bf00      	nop
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074ac:	bf00      	nop
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074c0:	bf00      	nop
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074d4:	bf00      	nop
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4a40      	ldr	r2, [pc, #256]	; (80075f4 <TIM_Base_SetConfig+0x114>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d013      	beq.n	8007520 <TIM_Base_SetConfig+0x40>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074fe:	d00f      	beq.n	8007520 <TIM_Base_SetConfig+0x40>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a3d      	ldr	r2, [pc, #244]	; (80075f8 <TIM_Base_SetConfig+0x118>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d00b      	beq.n	8007520 <TIM_Base_SetConfig+0x40>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a3c      	ldr	r2, [pc, #240]	; (80075fc <TIM_Base_SetConfig+0x11c>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d007      	beq.n	8007520 <TIM_Base_SetConfig+0x40>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a3b      	ldr	r2, [pc, #236]	; (8007600 <TIM_Base_SetConfig+0x120>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d003      	beq.n	8007520 <TIM_Base_SetConfig+0x40>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a3a      	ldr	r2, [pc, #232]	; (8007604 <TIM_Base_SetConfig+0x124>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d108      	bne.n	8007532 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	4313      	orrs	r3, r2
 8007530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a2f      	ldr	r2, [pc, #188]	; (80075f4 <TIM_Base_SetConfig+0x114>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d01f      	beq.n	800757a <TIM_Base_SetConfig+0x9a>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007540:	d01b      	beq.n	800757a <TIM_Base_SetConfig+0x9a>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a2c      	ldr	r2, [pc, #176]	; (80075f8 <TIM_Base_SetConfig+0x118>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d017      	beq.n	800757a <TIM_Base_SetConfig+0x9a>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a2b      	ldr	r2, [pc, #172]	; (80075fc <TIM_Base_SetConfig+0x11c>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d013      	beq.n	800757a <TIM_Base_SetConfig+0x9a>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a2a      	ldr	r2, [pc, #168]	; (8007600 <TIM_Base_SetConfig+0x120>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d00f      	beq.n	800757a <TIM_Base_SetConfig+0x9a>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a29      	ldr	r2, [pc, #164]	; (8007604 <TIM_Base_SetConfig+0x124>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d00b      	beq.n	800757a <TIM_Base_SetConfig+0x9a>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a28      	ldr	r2, [pc, #160]	; (8007608 <TIM_Base_SetConfig+0x128>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d007      	beq.n	800757a <TIM_Base_SetConfig+0x9a>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a27      	ldr	r2, [pc, #156]	; (800760c <TIM_Base_SetConfig+0x12c>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d003      	beq.n	800757a <TIM_Base_SetConfig+0x9a>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a26      	ldr	r2, [pc, #152]	; (8007610 <TIM_Base_SetConfig+0x130>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d108      	bne.n	800758c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	4313      	orrs	r3, r2
 800758a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	695b      	ldr	r3, [r3, #20]
 8007596:	4313      	orrs	r3, r2
 8007598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	689a      	ldr	r2, [r3, #8]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a10      	ldr	r2, [pc, #64]	; (80075f4 <TIM_Base_SetConfig+0x114>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d00f      	beq.n	80075d8 <TIM_Base_SetConfig+0xf8>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a12      	ldr	r2, [pc, #72]	; (8007604 <TIM_Base_SetConfig+0x124>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d00b      	beq.n	80075d8 <TIM_Base_SetConfig+0xf8>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a11      	ldr	r2, [pc, #68]	; (8007608 <TIM_Base_SetConfig+0x128>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d007      	beq.n	80075d8 <TIM_Base_SetConfig+0xf8>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a10      	ldr	r2, [pc, #64]	; (800760c <TIM_Base_SetConfig+0x12c>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d003      	beq.n	80075d8 <TIM_Base_SetConfig+0xf8>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4a0f      	ldr	r2, [pc, #60]	; (8007610 <TIM_Base_SetConfig+0x130>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d103      	bne.n	80075e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	691a      	ldr	r2, [r3, #16]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	615a      	str	r2, [r3, #20]
}
 80075e6:	bf00      	nop
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	40010000 	.word	0x40010000
 80075f8:	40000400 	.word	0x40000400
 80075fc:	40000800 	.word	0x40000800
 8007600:	40000c00 	.word	0x40000c00
 8007604:	40010400 	.word	0x40010400
 8007608:	40014000 	.word	0x40014000
 800760c:	40014400 	.word	0x40014400
 8007610:	40014800 	.word	0x40014800

08007614 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007614:	b480      	push	{r7}
 8007616:	b087      	sub	sp, #28
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6a1b      	ldr	r3, [r3, #32]
 8007624:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	f023 0201 	bic.w	r2, r3, #1
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	699b      	ldr	r3, [r3, #24]
 8007636:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800763e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	011b      	lsls	r3, r3, #4
 8007644:	693a      	ldr	r2, [r7, #16]
 8007646:	4313      	orrs	r3, r2
 8007648:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	f023 030a 	bic.w	r3, r3, #10
 8007650:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007652:	697a      	ldr	r2, [r7, #20]
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	4313      	orrs	r3, r2
 8007658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	693a      	ldr	r2, [r7, #16]
 800765e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	697a      	ldr	r2, [r7, #20]
 8007664:	621a      	str	r2, [r3, #32]
}
 8007666:	bf00      	nop
 8007668:	371c      	adds	r7, #28
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr

08007672 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007672:	b480      	push	{r7}
 8007674:	b087      	sub	sp, #28
 8007676:	af00      	add	r7, sp, #0
 8007678:	60f8      	str	r0, [r7, #12]
 800767a:	60b9      	str	r1, [r7, #8]
 800767c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6a1b      	ldr	r3, [r3, #32]
 8007682:	f023 0210 	bic.w	r2, r3, #16
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	699b      	ldr	r3, [r3, #24]
 800768e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6a1b      	ldr	r3, [r3, #32]
 8007694:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800769c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	031b      	lsls	r3, r3, #12
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80076ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	011b      	lsls	r3, r3, #4
 80076b4:	693a      	ldr	r2, [r7, #16]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	697a      	ldr	r2, [r7, #20]
 80076be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	693a      	ldr	r2, [r7, #16]
 80076c4:	621a      	str	r2, [r3, #32]
}
 80076c6:	bf00      	nop
 80076c8:	371c      	adds	r7, #28
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
	...

080076d4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	4b09      	ldr	r3, [pc, #36]	; (800770c <TIM_ITRx_SetConfig+0x38>)
 80076e8:	4013      	ands	r3, r2
 80076ea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076ec:	683a      	ldr	r2, [r7, #0]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	f043 0307 	orr.w	r3, r3, #7
 80076f6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	609a      	str	r2, [r3, #8]
}
 80076fe:	bf00      	nop
 8007700:	3714      	adds	r7, #20
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop
 800770c:	ffcfff8f 	.word	0xffcfff8f

08007710 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007710:	b480      	push	{r7}
 8007712:	b087      	sub	sp, #28
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	607a      	str	r2, [r7, #4]
 800771c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800772a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	021a      	lsls	r2, r3, #8
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	431a      	orrs	r2, r3
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	4313      	orrs	r3, r2
 8007738:	697a      	ldr	r2, [r7, #20]
 800773a:	4313      	orrs	r3, r2
 800773c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	697a      	ldr	r2, [r7, #20]
 8007742:	609a      	str	r2, [r3, #8]
}
 8007744:	bf00      	nop
 8007746:	371c      	adds	r7, #28
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007760:	2b01      	cmp	r3, #1
 8007762:	d101      	bne.n	8007768 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007764:	2302      	movs	r3, #2
 8007766:	e06d      	b.n	8007844 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2202      	movs	r2, #2
 8007774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a30      	ldr	r2, [pc, #192]	; (8007850 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d004      	beq.n	800779c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a2f      	ldr	r2, [pc, #188]	; (8007854 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d108      	bne.n	80077ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80077a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	4313      	orrs	r3, r2
 80077be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a20      	ldr	r2, [pc, #128]	; (8007850 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d022      	beq.n	8007818 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077da:	d01d      	beq.n	8007818 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a1d      	ldr	r2, [pc, #116]	; (8007858 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d018      	beq.n	8007818 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a1c      	ldr	r2, [pc, #112]	; (800785c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d013      	beq.n	8007818 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a1a      	ldr	r2, [pc, #104]	; (8007860 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d00e      	beq.n	8007818 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a15      	ldr	r2, [pc, #84]	; (8007854 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d009      	beq.n	8007818 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a16      	ldr	r2, [pc, #88]	; (8007864 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d004      	beq.n	8007818 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a15      	ldr	r2, [pc, #84]	; (8007868 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d10c      	bne.n	8007832 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800781e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	68ba      	ldr	r2, [r7, #8]
 8007826:	4313      	orrs	r3, r2
 8007828:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2201      	movs	r2, #1
 8007836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3714      	adds	r7, #20
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr
 8007850:	40010000 	.word	0x40010000
 8007854:	40010400 	.word	0x40010400
 8007858:	40000400 	.word	0x40000400
 800785c:	40000800 	.word	0x40000800
 8007860:	40000c00 	.word	0x40000c00
 8007864:	40001800 	.word	0x40001800
 8007868:	40014000 	.word	0x40014000

0800786c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007874:	bf00      	nop
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007888:	bf00      	nop
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d101      	bne.n	80078ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e042      	b.n	8007940 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d106      	bne.n	80078d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f7f9 fed3 	bl	8001678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2224      	movs	r2, #36	; 0x24
 80078d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f022 0201 	bic.w	r2, r2, #1
 80078e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fd74 	bl	80083d8 <UART_SetConfig>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d101      	bne.n	80078fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e022      	b.n	8007940 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d002      	beq.n	8007908 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f001 fad0 	bl	8008ea8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	685a      	ldr	r2, [r3, #4]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007916:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	689a      	ldr	r2, [r3, #8]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007926:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f042 0201 	orr.w	r2, r2, #1
 8007936:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f001 fb57 	bl	8008fec <UART_CheckIdleState>
 800793e:	4603      	mov	r3, r0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3708      	adds	r7, #8
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b08a      	sub	sp, #40	; 0x28
 800794c:	af02      	add	r7, sp, #8
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	603b      	str	r3, [r7, #0]
 8007954:	4613      	mov	r3, r2
 8007956:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800795e:	2b20      	cmp	r3, #32
 8007960:	d17b      	bne.n	8007a5a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d002      	beq.n	800796e <HAL_UART_Transmit+0x26>
 8007968:	88fb      	ldrh	r3, [r7, #6]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d101      	bne.n	8007972 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e074      	b.n	8007a5c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2221      	movs	r2, #33	; 0x21
 800797e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007982:	f7fa fa45 	bl	8001e10 <HAL_GetTick>
 8007986:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	88fa      	ldrh	r2, [r7, #6]
 800798c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	88fa      	ldrh	r2, [r7, #6]
 8007994:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079a0:	d108      	bne.n	80079b4 <HAL_UART_Transmit+0x6c>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d104      	bne.n	80079b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80079aa:	2300      	movs	r3, #0
 80079ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	61bb      	str	r3, [r7, #24]
 80079b2:	e003      	b.n	80079bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80079b8:	2300      	movs	r3, #0
 80079ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80079bc:	e030      	b.n	8007a20 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	9300      	str	r3, [sp, #0]
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	2200      	movs	r2, #0
 80079c6:	2180      	movs	r1, #128	; 0x80
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f001 fbb9 	bl	8009140 <UART_WaitOnFlagUntilTimeout>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d005      	beq.n	80079e0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2220      	movs	r2, #32
 80079d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	e03d      	b.n	8007a5c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d10b      	bne.n	80079fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	881b      	ldrh	r3, [r3, #0]
 80079ea:	461a      	mov	r2, r3
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	3302      	adds	r3, #2
 80079fa:	61bb      	str	r3, [r7, #24]
 80079fc:	e007      	b.n	8007a0e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	781a      	ldrb	r2, [r3, #0]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	3b01      	subs	r3, #1
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d1c8      	bne.n	80079be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	2200      	movs	r2, #0
 8007a34:	2140      	movs	r1, #64	; 0x40
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f001 fb82 	bl	8009140 <UART_WaitOnFlagUntilTimeout>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d005      	beq.n	8007a4e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2220      	movs	r2, #32
 8007a46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e006      	b.n	8007a5c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2220      	movs	r2, #32
 8007a52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007a56:	2300      	movs	r3, #0
 8007a58:	e000      	b.n	8007a5c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007a5a:	2302      	movs	r3, #2
  }
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3720      	adds	r7, #32
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b091      	sub	sp, #68	; 0x44
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	4613      	mov	r3, r2
 8007a70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a78:	2b20      	cmp	r3, #32
 8007a7a:	d178      	bne.n	8007b6e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d002      	beq.n	8007a88 <HAL_UART_Transmit_IT+0x24>
 8007a82:	88fb      	ldrh	r3, [r7, #6]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d101      	bne.n	8007a8c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e071      	b.n	8007b70 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	68ba      	ldr	r2, [r7, #8]
 8007a90:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	88fa      	ldrh	r2, [r7, #6]
 8007a96:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	88fa      	ldrh	r2, [r7, #6]
 8007a9e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2221      	movs	r2, #33	; 0x21
 8007ab4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007abc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ac0:	d12a      	bne.n	8007b18 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aca:	d107      	bne.n	8007adc <HAL_UART_Transmit_IT+0x78>
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	691b      	ldr	r3, [r3, #16]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d103      	bne.n	8007adc <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	4a29      	ldr	r2, [pc, #164]	; (8007b7c <HAL_UART_Transmit_IT+0x118>)
 8007ad8:	679a      	str	r2, [r3, #120]	; 0x78
 8007ada:	e002      	b.n	8007ae2 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	4a28      	ldr	r2, [pc, #160]	; (8007b80 <HAL_UART_Transmit_IT+0x11c>)
 8007ae0:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	3308      	adds	r3, #8
 8007ae8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aec:	e853 3f00 	ldrex	r3, [r3]
 8007af0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007af8:	63bb      	str	r3, [r7, #56]	; 0x38
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	3308      	adds	r3, #8
 8007b00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b02:	637a      	str	r2, [r7, #52]	; 0x34
 8007b04:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b0a:	e841 2300 	strex	r3, r2, [r1]
 8007b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1e5      	bne.n	8007ae2 <HAL_UART_Transmit_IT+0x7e>
 8007b16:	e028      	b.n	8007b6a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b20:	d107      	bne.n	8007b32 <HAL_UART_Transmit_IT+0xce>
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d103      	bne.n	8007b32 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	4a15      	ldr	r2, [pc, #84]	; (8007b84 <HAL_UART_Transmit_IT+0x120>)
 8007b2e:	679a      	str	r2, [r3, #120]	; 0x78
 8007b30:	e002      	b.n	8007b38 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	4a14      	ldr	r2, [pc, #80]	; (8007b88 <HAL_UART_Transmit_IT+0x124>)
 8007b36:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	e853 3f00 	ldrex	r3, [r3]
 8007b44:	613b      	str	r3, [r7, #16]
   return(result);
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	461a      	mov	r2, r3
 8007b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b56:	623b      	str	r3, [r7, #32]
 8007b58:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5a:	69f9      	ldr	r1, [r7, #28]
 8007b5c:	6a3a      	ldr	r2, [r7, #32]
 8007b5e:	e841 2300 	strex	r3, r2, [r1]
 8007b62:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1e6      	bne.n	8007b38 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	e000      	b.n	8007b70 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007b6e:	2302      	movs	r3, #2
  }
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3744      	adds	r7, #68	; 0x44
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr
 8007b7c:	080097a7 	.word	0x080097a7
 8007b80:	080096c7 	.word	0x080096c7
 8007b84:	08009605 	.word	0x08009605
 8007b88:	0800954d 	.word	0x0800954d

08007b8c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b08a      	sub	sp, #40	; 0x28
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	4613      	mov	r3, r2
 8007b98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ba0:	2b20      	cmp	r3, #32
 8007ba2:	d137      	bne.n	8007c14 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d002      	beq.n	8007bb0 <HAL_UART_Receive_IT+0x24>
 8007baa:	88fb      	ldrh	r3, [r7, #6]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d101      	bne.n	8007bb4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e030      	b.n	8007c16 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a18      	ldr	r2, [pc, #96]	; (8007c20 <HAL_UART_Receive_IT+0x94>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d01f      	beq.n	8007c04 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d018      	beq.n	8007c04 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	e853 3f00 	ldrex	r3, [r3]
 8007bde:	613b      	str	r3, [r7, #16]
   return(result);
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007be6:	627b      	str	r3, [r7, #36]	; 0x24
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	461a      	mov	r2, r3
 8007bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf0:	623b      	str	r3, [r7, #32]
 8007bf2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf4:	69f9      	ldr	r1, [r7, #28]
 8007bf6:	6a3a      	ldr	r2, [r7, #32]
 8007bf8:	e841 2300 	strex	r3, r2, [r1]
 8007bfc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d1e6      	bne.n	8007bd2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007c04:	88fb      	ldrh	r3, [r7, #6]
 8007c06:	461a      	mov	r2, r3
 8007c08:	68b9      	ldr	r1, [r7, #8]
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f001 fb00 	bl	8009210 <UART_Start_Receive_IT>
 8007c10:	4603      	mov	r3, r0
 8007c12:	e000      	b.n	8007c16 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007c14:	2302      	movs	r3, #2
  }
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3728      	adds	r7, #40	; 0x28
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	58000c00 	.word	0x58000c00

08007c24 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b0ba      	sub	sp, #232	; 0xe8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	69db      	ldr	r3, [r3, #28]
 8007c32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007c4a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007c4e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007c52:	4013      	ands	r3, r2
 8007c54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007c58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d11b      	bne.n	8007c98 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c64:	f003 0320 	and.w	r3, r3, #32
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d015      	beq.n	8007c98 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c70:	f003 0320 	and.w	r3, r3, #32
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d105      	bne.n	8007c84 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007c78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d009      	beq.n	8007c98 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f000 8377 	beq.w	800837c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	4798      	blx	r3
      }
      return;
 8007c96:	e371      	b.n	800837c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007c98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f000 8123 	beq.w	8007ee8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007ca2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007ca6:	4b8d      	ldr	r3, [pc, #564]	; (8007edc <HAL_UART_IRQHandler+0x2b8>)
 8007ca8:	4013      	ands	r3, r2
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d106      	bne.n	8007cbc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007cae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007cb2:	4b8b      	ldr	r3, [pc, #556]	; (8007ee0 <HAL_UART_IRQHandler+0x2bc>)
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f000 8116 	beq.w	8007ee8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cc0:	f003 0301 	and.w	r3, r3, #1
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d011      	beq.n	8007cec <HAL_UART_IRQHandler+0xc8>
 8007cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00b      	beq.n	8007cec <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ce2:	f043 0201 	orr.w	r2, r3, #1
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cf0:	f003 0302 	and.w	r3, r3, #2
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d011      	beq.n	8007d1c <HAL_UART_IRQHandler+0xf8>
 8007cf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cfc:	f003 0301 	and.w	r3, r3, #1
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00b      	beq.n	8007d1c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2202      	movs	r2, #2
 8007d0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d12:	f043 0204 	orr.w	r2, r3, #4
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d20:	f003 0304 	and.w	r3, r3, #4
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d011      	beq.n	8007d4c <HAL_UART_IRQHandler+0x128>
 8007d28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d2c:	f003 0301 	and.w	r3, r3, #1
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00b      	beq.n	8007d4c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2204      	movs	r2, #4
 8007d3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d42:	f043 0202 	orr.w	r2, r3, #2
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d50:	f003 0308 	and.w	r3, r3, #8
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d017      	beq.n	8007d88 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d5c:	f003 0320 	and.w	r3, r3, #32
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d105      	bne.n	8007d70 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007d64:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007d68:	4b5c      	ldr	r3, [pc, #368]	; (8007edc <HAL_UART_IRQHandler+0x2b8>)
 8007d6a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00b      	beq.n	8007d88 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2208      	movs	r2, #8
 8007d76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d7e:	f043 0208 	orr.w	r2, r3, #8
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d012      	beq.n	8007dba <HAL_UART_IRQHandler+0x196>
 8007d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00c      	beq.n	8007dba <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007da8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007db0:	f043 0220 	orr.w	r2, r3, #32
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f000 82dd 	beq.w	8008380 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dca:	f003 0320 	and.w	r3, r3, #32
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d013      	beq.n	8007dfa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007dd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dd6:	f003 0320 	and.w	r3, r3, #32
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d105      	bne.n	8007dea <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007dde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d007      	beq.n	8007dfa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d003      	beq.n	8007dfa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e0e:	2b40      	cmp	r3, #64	; 0x40
 8007e10:	d005      	beq.n	8007e1e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007e12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e16:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d054      	beq.n	8007ec8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f001 fb18 	bl	8009454 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e2e:	2b40      	cmp	r3, #64	; 0x40
 8007e30:	d146      	bne.n	8007ec0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	3308      	adds	r3, #8
 8007e38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e40:	e853 3f00 	ldrex	r3, [r3]
 8007e44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007e48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	3308      	adds	r3, #8
 8007e5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007e5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007e62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007e6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007e6e:	e841 2300 	strex	r3, r2, [r1]
 8007e72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007e76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1d9      	bne.n	8007e32 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d017      	beq.n	8007eb8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e8e:	4a15      	ldr	r2, [pc, #84]	; (8007ee4 <HAL_UART_IRQHandler+0x2c0>)
 8007e90:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f7fa fc1b 	bl	80026d4 <HAL_DMA_Abort_IT>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d019      	beq.n	8007ed8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007eb2:	4610      	mov	r0, r2
 8007eb4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eb6:	e00f      	b.n	8007ed8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fa77 	bl	80083ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ebe:	e00b      	b.n	8007ed8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 fa73 	bl	80083ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ec6:	e007      	b.n	8007ed8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 fa6f 	bl	80083ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007ed6:	e253      	b.n	8008380 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ed8:	bf00      	nop
    return;
 8007eda:	e251      	b.n	8008380 <HAL_UART_IRQHandler+0x75c>
 8007edc:	10000001 	.word	0x10000001
 8007ee0:	04000120 	.word	0x04000120
 8007ee4:	08009521 	.word	0x08009521

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	f040 81e7 	bne.w	80082c0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ef6:	f003 0310 	and.w	r3, r3, #16
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f000 81e0 	beq.w	80082c0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f04:	f003 0310 	and.w	r3, r3, #16
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f000 81d9 	beq.w	80082c0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2210      	movs	r2, #16
 8007f14:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f20:	2b40      	cmp	r3, #64	; 0x40
 8007f22:	f040 8151 	bne.w	80081c8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a96      	ldr	r2, [pc, #600]	; (8008188 <HAL_UART_IRQHandler+0x564>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d068      	beq.n	8008006 <HAL_UART_IRQHandler+0x3e2>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a93      	ldr	r2, [pc, #588]	; (800818c <HAL_UART_IRQHandler+0x568>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d061      	beq.n	8008006 <HAL_UART_IRQHandler+0x3e2>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a91      	ldr	r2, [pc, #580]	; (8008190 <HAL_UART_IRQHandler+0x56c>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d05a      	beq.n	8008006 <HAL_UART_IRQHandler+0x3e2>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a8e      	ldr	r2, [pc, #568]	; (8008194 <HAL_UART_IRQHandler+0x570>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d053      	beq.n	8008006 <HAL_UART_IRQHandler+0x3e2>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a8c      	ldr	r2, [pc, #560]	; (8008198 <HAL_UART_IRQHandler+0x574>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d04c      	beq.n	8008006 <HAL_UART_IRQHandler+0x3e2>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a89      	ldr	r2, [pc, #548]	; (800819c <HAL_UART_IRQHandler+0x578>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d045      	beq.n	8008006 <HAL_UART_IRQHandler+0x3e2>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a87      	ldr	r2, [pc, #540]	; (80081a0 <HAL_UART_IRQHandler+0x57c>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d03e      	beq.n	8008006 <HAL_UART_IRQHandler+0x3e2>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a84      	ldr	r2, [pc, #528]	; (80081a4 <HAL_UART_IRQHandler+0x580>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d037      	beq.n	8008006 <HAL_UART_IRQHandler+0x3e2>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a82      	ldr	r2, [pc, #520]	; (80081a8 <HAL_UART_IRQHandler+0x584>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d030      	beq.n	8008006 <HAL_UART_IRQHandler+0x3e2>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a7f      	ldr	r2, [pc, #508]	; (80081ac <HAL_UART_IRQHandler+0x588>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d029      	beq.n	8008006 <HAL_UART_IRQHandler+0x3e2>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a7d      	ldr	r2, [pc, #500]	; (80081b0 <HAL_UART_IRQHandler+0x58c>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d022      	beq.n	8008006 <HAL_UART_IRQHandler+0x3e2>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a7a      	ldr	r2, [pc, #488]	; (80081b4 <HAL_UART_IRQHandler+0x590>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d01b      	beq.n	8008006 <HAL_UART_IRQHandler+0x3e2>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a78      	ldr	r2, [pc, #480]	; (80081b8 <HAL_UART_IRQHandler+0x594>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d014      	beq.n	8008006 <HAL_UART_IRQHandler+0x3e2>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a75      	ldr	r2, [pc, #468]	; (80081bc <HAL_UART_IRQHandler+0x598>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d00d      	beq.n	8008006 <HAL_UART_IRQHandler+0x3e2>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a73      	ldr	r2, [pc, #460]	; (80081c0 <HAL_UART_IRQHandler+0x59c>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d006      	beq.n	8008006 <HAL_UART_IRQHandler+0x3e2>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a70      	ldr	r2, [pc, #448]	; (80081c4 <HAL_UART_IRQHandler+0x5a0>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d106      	bne.n	8008014 <HAL_UART_IRQHandler+0x3f0>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	b29b      	uxth	r3, r3
 8008012:	e005      	b.n	8008020 <HAL_UART_IRQHandler+0x3fc>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	b29b      	uxth	r3, r3
 8008020:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008024:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008028:	2b00      	cmp	r3, #0
 800802a:	f000 81ab 	beq.w	8008384 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008034:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008038:	429a      	cmp	r2, r3
 800803a:	f080 81a3 	bcs.w	8008384 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008044:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800804e:	69db      	ldr	r3, [r3, #28]
 8008050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008054:	f000 8087 	beq.w	8008166 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008060:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008064:	e853 3f00 	ldrex	r3, [r3]
 8008068:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800806c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008070:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008074:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	461a      	mov	r2, r3
 800807e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008082:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008086:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800808e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008092:	e841 2300 	strex	r3, r2, [r1]
 8008096:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800809a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1da      	bne.n	8008058 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	3308      	adds	r3, #8
 80080a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080ac:	e853 3f00 	ldrex	r3, [r3]
 80080b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80080b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080b4:	f023 0301 	bic.w	r3, r3, #1
 80080b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	3308      	adds	r3, #8
 80080c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80080c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80080ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80080ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80080d2:	e841 2300 	strex	r3, r2, [r1]
 80080d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80080d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d1e1      	bne.n	80080a2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	3308      	adds	r3, #8
 80080e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080e8:	e853 3f00 	ldrex	r3, [r3]
 80080ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80080ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	3308      	adds	r3, #8
 80080fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008102:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008104:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008106:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008108:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800810a:	e841 2300 	strex	r3, r2, [r1]
 800810e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008110:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008112:	2b00      	cmp	r3, #0
 8008114:	d1e3      	bne.n	80080de <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2220      	movs	r2, #32
 800811a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800812c:	e853 3f00 	ldrex	r3, [r3]
 8008130:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008134:	f023 0310 	bic.w	r3, r3, #16
 8008138:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	461a      	mov	r2, r3
 8008142:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008146:	65bb      	str	r3, [r7, #88]	; 0x58
 8008148:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800814c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800814e:	e841 2300 	strex	r3, r2, [r1]
 8008152:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1e4      	bne.n	8008124 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008160:	4618      	mov	r0, r3
 8008162:	f7f9 ff99 	bl	8002098 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2202      	movs	r2, #2
 800816a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008178:	b29b      	uxth	r3, r3
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	b29b      	uxth	r3, r3
 800817e:	4619      	mov	r1, r3
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f91d 	bl	80083c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008186:	e0fd      	b.n	8008384 <HAL_UART_IRQHandler+0x760>
 8008188:	40020010 	.word	0x40020010
 800818c:	40020028 	.word	0x40020028
 8008190:	40020040 	.word	0x40020040
 8008194:	40020058 	.word	0x40020058
 8008198:	40020070 	.word	0x40020070
 800819c:	40020088 	.word	0x40020088
 80081a0:	400200a0 	.word	0x400200a0
 80081a4:	400200b8 	.word	0x400200b8
 80081a8:	40020410 	.word	0x40020410
 80081ac:	40020428 	.word	0x40020428
 80081b0:	40020440 	.word	0x40020440
 80081b4:	40020458 	.word	0x40020458
 80081b8:	40020470 	.word	0x40020470
 80081bc:	40020488 	.word	0x40020488
 80081c0:	400204a0 	.word	0x400204a0
 80081c4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	1ad3      	subs	r3, r2, r3
 80081d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 80cf 	beq.w	8008388 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80081ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	f000 80ca 	beq.w	8008388 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081fc:	e853 3f00 	ldrex	r3, [r3]
 8008200:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008204:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008208:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	461a      	mov	r2, r3
 8008212:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008216:	647b      	str	r3, [r7, #68]	; 0x44
 8008218:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800821c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800821e:	e841 2300 	strex	r3, r2, [r1]
 8008222:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008226:	2b00      	cmp	r3, #0
 8008228:	d1e4      	bne.n	80081f4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	3308      	adds	r3, #8
 8008230:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008234:	e853 3f00 	ldrex	r3, [r3]
 8008238:	623b      	str	r3, [r7, #32]
   return(result);
 800823a:	6a3a      	ldr	r2, [r7, #32]
 800823c:	4b55      	ldr	r3, [pc, #340]	; (8008394 <HAL_UART_IRQHandler+0x770>)
 800823e:	4013      	ands	r3, r2
 8008240:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	3308      	adds	r3, #8
 800824a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800824e:	633a      	str	r2, [r7, #48]	; 0x30
 8008250:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008252:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008256:	e841 2300 	strex	r3, r2, [r1]
 800825a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800825c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1e3      	bne.n	800822a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2220      	movs	r2, #32
 8008266:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	e853 3f00 	ldrex	r3, [r3]
 8008282:	60fb      	str	r3, [r7, #12]
   return(result);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f023 0310 	bic.w	r3, r3, #16
 800828a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	461a      	mov	r2, r3
 8008294:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008298:	61fb      	str	r3, [r7, #28]
 800829a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829c:	69b9      	ldr	r1, [r7, #24]
 800829e:	69fa      	ldr	r2, [r7, #28]
 80082a0:	e841 2300 	strex	r3, r2, [r1]
 80082a4:	617b      	str	r3, [r7, #20]
   return(result);
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d1e4      	bne.n	8008276 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2202      	movs	r2, #2
 80082b0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80082b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80082b6:	4619      	mov	r1, r3
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 f881 	bl	80083c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80082be:	e063      	b.n	8008388 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80082c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00e      	beq.n	80082ea <HAL_UART_IRQHandler+0x6c6>
 80082cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d008      	beq.n	80082ea <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80082e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f002 f81c 	bl	800a320 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80082e8:	e051      	b.n	800838e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80082ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d014      	beq.n	8008320 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80082f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d105      	bne.n	800830e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008306:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800830a:	2b00      	cmp	r3, #0
 800830c:	d008      	beq.n	8008320 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008312:	2b00      	cmp	r3, #0
 8008314:	d03a      	beq.n	800838c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	4798      	blx	r3
    }
    return;
 800831e:	e035      	b.n	800838c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008328:	2b00      	cmp	r3, #0
 800832a:	d009      	beq.n	8008340 <HAL_UART_IRQHandler+0x71c>
 800832c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008334:	2b00      	cmp	r3, #0
 8008336:	d003      	beq.n	8008340 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f001 faa9 	bl	8009890 <UART_EndTransmit_IT>
    return;
 800833e:	e026      	b.n	800838e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008344:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008348:	2b00      	cmp	r3, #0
 800834a:	d009      	beq.n	8008360 <HAL_UART_IRQHandler+0x73c>
 800834c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008350:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008354:	2b00      	cmp	r3, #0
 8008356:	d003      	beq.n	8008360 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f001 fff5 	bl	800a348 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800835e:	e016      	b.n	800838e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008364:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008368:	2b00      	cmp	r3, #0
 800836a:	d010      	beq.n	800838e <HAL_UART_IRQHandler+0x76a>
 800836c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008370:	2b00      	cmp	r3, #0
 8008372:	da0c      	bge.n	800838e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f001 ffdd 	bl	800a334 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800837a:	e008      	b.n	800838e <HAL_UART_IRQHandler+0x76a>
      return;
 800837c:	bf00      	nop
 800837e:	e006      	b.n	800838e <HAL_UART_IRQHandler+0x76a>
    return;
 8008380:	bf00      	nop
 8008382:	e004      	b.n	800838e <HAL_UART_IRQHandler+0x76a>
      return;
 8008384:	bf00      	nop
 8008386:	e002      	b.n	800838e <HAL_UART_IRQHandler+0x76a>
      return;
 8008388:	bf00      	nop
 800838a:	e000      	b.n	800838e <HAL_UART_IRQHandler+0x76a>
    return;
 800838c:	bf00      	nop
  }
}
 800838e:	37e8      	adds	r7, #232	; 0xe8
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}
 8008394:	effffffe 	.word	0xeffffffe

08008398 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80083a0:	bf00      	nop
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80083b4:	bf00      	nop
 80083b6:	370c      	adds	r7, #12
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr

080083c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	460b      	mov	r3, r1
 80083ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80083cc:	bf00      	nop
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083dc:	b092      	sub	sp, #72	; 0x48
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80083e2:	2300      	movs	r3, #0
 80083e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	689a      	ldr	r2, [r3, #8]
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	431a      	orrs	r2, r3
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	695b      	ldr	r3, [r3, #20]
 80083f6:	431a      	orrs	r2, r3
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	69db      	ldr	r3, [r3, #28]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	4bbe      	ldr	r3, [pc, #760]	; (8008700 <UART_SetConfig+0x328>)
 8008408:	4013      	ands	r3, r2
 800840a:	697a      	ldr	r2, [r7, #20]
 800840c:	6812      	ldr	r2, [r2, #0]
 800840e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008410:	430b      	orrs	r3, r1
 8008412:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	68da      	ldr	r2, [r3, #12]
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	430a      	orrs	r2, r1
 8008428:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	699b      	ldr	r3, [r3, #24]
 800842e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4ab3      	ldr	r2, [pc, #716]	; (8008704 <UART_SetConfig+0x32c>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d004      	beq.n	8008444 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	6a1b      	ldr	r3, [r3, #32]
 800843e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008440:	4313      	orrs	r3, r2
 8008442:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	689a      	ldr	r2, [r3, #8]
 800844a:	4baf      	ldr	r3, [pc, #700]	; (8008708 <UART_SetConfig+0x330>)
 800844c:	4013      	ands	r3, r2
 800844e:	697a      	ldr	r2, [r7, #20]
 8008450:	6812      	ldr	r2, [r2, #0]
 8008452:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008454:	430b      	orrs	r3, r1
 8008456:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845e:	f023 010f 	bic.w	r1, r3, #15
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	430a      	orrs	r2, r1
 800846c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4aa6      	ldr	r2, [pc, #664]	; (800870c <UART_SetConfig+0x334>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d177      	bne.n	8008568 <UART_SetConfig+0x190>
 8008478:	4ba5      	ldr	r3, [pc, #660]	; (8008710 <UART_SetConfig+0x338>)
 800847a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800847c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008480:	2b28      	cmp	r3, #40	; 0x28
 8008482:	d86d      	bhi.n	8008560 <UART_SetConfig+0x188>
 8008484:	a201      	add	r2, pc, #4	; (adr r2, 800848c <UART_SetConfig+0xb4>)
 8008486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800848a:	bf00      	nop
 800848c:	08008531 	.word	0x08008531
 8008490:	08008561 	.word	0x08008561
 8008494:	08008561 	.word	0x08008561
 8008498:	08008561 	.word	0x08008561
 800849c:	08008561 	.word	0x08008561
 80084a0:	08008561 	.word	0x08008561
 80084a4:	08008561 	.word	0x08008561
 80084a8:	08008561 	.word	0x08008561
 80084ac:	08008539 	.word	0x08008539
 80084b0:	08008561 	.word	0x08008561
 80084b4:	08008561 	.word	0x08008561
 80084b8:	08008561 	.word	0x08008561
 80084bc:	08008561 	.word	0x08008561
 80084c0:	08008561 	.word	0x08008561
 80084c4:	08008561 	.word	0x08008561
 80084c8:	08008561 	.word	0x08008561
 80084cc:	08008541 	.word	0x08008541
 80084d0:	08008561 	.word	0x08008561
 80084d4:	08008561 	.word	0x08008561
 80084d8:	08008561 	.word	0x08008561
 80084dc:	08008561 	.word	0x08008561
 80084e0:	08008561 	.word	0x08008561
 80084e4:	08008561 	.word	0x08008561
 80084e8:	08008561 	.word	0x08008561
 80084ec:	08008549 	.word	0x08008549
 80084f0:	08008561 	.word	0x08008561
 80084f4:	08008561 	.word	0x08008561
 80084f8:	08008561 	.word	0x08008561
 80084fc:	08008561 	.word	0x08008561
 8008500:	08008561 	.word	0x08008561
 8008504:	08008561 	.word	0x08008561
 8008508:	08008561 	.word	0x08008561
 800850c:	08008551 	.word	0x08008551
 8008510:	08008561 	.word	0x08008561
 8008514:	08008561 	.word	0x08008561
 8008518:	08008561 	.word	0x08008561
 800851c:	08008561 	.word	0x08008561
 8008520:	08008561 	.word	0x08008561
 8008524:	08008561 	.word	0x08008561
 8008528:	08008561 	.word	0x08008561
 800852c:	08008559 	.word	0x08008559
 8008530:	2301      	movs	r3, #1
 8008532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008536:	e222      	b.n	800897e <UART_SetConfig+0x5a6>
 8008538:	2304      	movs	r3, #4
 800853a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800853e:	e21e      	b.n	800897e <UART_SetConfig+0x5a6>
 8008540:	2308      	movs	r3, #8
 8008542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008546:	e21a      	b.n	800897e <UART_SetConfig+0x5a6>
 8008548:	2310      	movs	r3, #16
 800854a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800854e:	e216      	b.n	800897e <UART_SetConfig+0x5a6>
 8008550:	2320      	movs	r3, #32
 8008552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008556:	e212      	b.n	800897e <UART_SetConfig+0x5a6>
 8008558:	2340      	movs	r3, #64	; 0x40
 800855a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800855e:	e20e      	b.n	800897e <UART_SetConfig+0x5a6>
 8008560:	2380      	movs	r3, #128	; 0x80
 8008562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008566:	e20a      	b.n	800897e <UART_SetConfig+0x5a6>
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a69      	ldr	r2, [pc, #420]	; (8008714 <UART_SetConfig+0x33c>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d130      	bne.n	80085d4 <UART_SetConfig+0x1fc>
 8008572:	4b67      	ldr	r3, [pc, #412]	; (8008710 <UART_SetConfig+0x338>)
 8008574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008576:	f003 0307 	and.w	r3, r3, #7
 800857a:	2b05      	cmp	r3, #5
 800857c:	d826      	bhi.n	80085cc <UART_SetConfig+0x1f4>
 800857e:	a201      	add	r2, pc, #4	; (adr r2, 8008584 <UART_SetConfig+0x1ac>)
 8008580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008584:	0800859d 	.word	0x0800859d
 8008588:	080085a5 	.word	0x080085a5
 800858c:	080085ad 	.word	0x080085ad
 8008590:	080085b5 	.word	0x080085b5
 8008594:	080085bd 	.word	0x080085bd
 8008598:	080085c5 	.word	0x080085c5
 800859c:	2300      	movs	r3, #0
 800859e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085a2:	e1ec      	b.n	800897e <UART_SetConfig+0x5a6>
 80085a4:	2304      	movs	r3, #4
 80085a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085aa:	e1e8      	b.n	800897e <UART_SetConfig+0x5a6>
 80085ac:	2308      	movs	r3, #8
 80085ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085b2:	e1e4      	b.n	800897e <UART_SetConfig+0x5a6>
 80085b4:	2310      	movs	r3, #16
 80085b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ba:	e1e0      	b.n	800897e <UART_SetConfig+0x5a6>
 80085bc:	2320      	movs	r3, #32
 80085be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085c2:	e1dc      	b.n	800897e <UART_SetConfig+0x5a6>
 80085c4:	2340      	movs	r3, #64	; 0x40
 80085c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ca:	e1d8      	b.n	800897e <UART_SetConfig+0x5a6>
 80085cc:	2380      	movs	r3, #128	; 0x80
 80085ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085d2:	e1d4      	b.n	800897e <UART_SetConfig+0x5a6>
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a4f      	ldr	r2, [pc, #316]	; (8008718 <UART_SetConfig+0x340>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d130      	bne.n	8008640 <UART_SetConfig+0x268>
 80085de:	4b4c      	ldr	r3, [pc, #304]	; (8008710 <UART_SetConfig+0x338>)
 80085e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085e2:	f003 0307 	and.w	r3, r3, #7
 80085e6:	2b05      	cmp	r3, #5
 80085e8:	d826      	bhi.n	8008638 <UART_SetConfig+0x260>
 80085ea:	a201      	add	r2, pc, #4	; (adr r2, 80085f0 <UART_SetConfig+0x218>)
 80085ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f0:	08008609 	.word	0x08008609
 80085f4:	08008611 	.word	0x08008611
 80085f8:	08008619 	.word	0x08008619
 80085fc:	08008621 	.word	0x08008621
 8008600:	08008629 	.word	0x08008629
 8008604:	08008631 	.word	0x08008631
 8008608:	2300      	movs	r3, #0
 800860a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800860e:	e1b6      	b.n	800897e <UART_SetConfig+0x5a6>
 8008610:	2304      	movs	r3, #4
 8008612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008616:	e1b2      	b.n	800897e <UART_SetConfig+0x5a6>
 8008618:	2308      	movs	r3, #8
 800861a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800861e:	e1ae      	b.n	800897e <UART_SetConfig+0x5a6>
 8008620:	2310      	movs	r3, #16
 8008622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008626:	e1aa      	b.n	800897e <UART_SetConfig+0x5a6>
 8008628:	2320      	movs	r3, #32
 800862a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800862e:	e1a6      	b.n	800897e <UART_SetConfig+0x5a6>
 8008630:	2340      	movs	r3, #64	; 0x40
 8008632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008636:	e1a2      	b.n	800897e <UART_SetConfig+0x5a6>
 8008638:	2380      	movs	r3, #128	; 0x80
 800863a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800863e:	e19e      	b.n	800897e <UART_SetConfig+0x5a6>
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a35      	ldr	r2, [pc, #212]	; (800871c <UART_SetConfig+0x344>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d130      	bne.n	80086ac <UART_SetConfig+0x2d4>
 800864a:	4b31      	ldr	r3, [pc, #196]	; (8008710 <UART_SetConfig+0x338>)
 800864c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800864e:	f003 0307 	and.w	r3, r3, #7
 8008652:	2b05      	cmp	r3, #5
 8008654:	d826      	bhi.n	80086a4 <UART_SetConfig+0x2cc>
 8008656:	a201      	add	r2, pc, #4	; (adr r2, 800865c <UART_SetConfig+0x284>)
 8008658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800865c:	08008675 	.word	0x08008675
 8008660:	0800867d 	.word	0x0800867d
 8008664:	08008685 	.word	0x08008685
 8008668:	0800868d 	.word	0x0800868d
 800866c:	08008695 	.word	0x08008695
 8008670:	0800869d 	.word	0x0800869d
 8008674:	2300      	movs	r3, #0
 8008676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800867a:	e180      	b.n	800897e <UART_SetConfig+0x5a6>
 800867c:	2304      	movs	r3, #4
 800867e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008682:	e17c      	b.n	800897e <UART_SetConfig+0x5a6>
 8008684:	2308      	movs	r3, #8
 8008686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800868a:	e178      	b.n	800897e <UART_SetConfig+0x5a6>
 800868c:	2310      	movs	r3, #16
 800868e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008692:	e174      	b.n	800897e <UART_SetConfig+0x5a6>
 8008694:	2320      	movs	r3, #32
 8008696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800869a:	e170      	b.n	800897e <UART_SetConfig+0x5a6>
 800869c:	2340      	movs	r3, #64	; 0x40
 800869e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086a2:	e16c      	b.n	800897e <UART_SetConfig+0x5a6>
 80086a4:	2380      	movs	r3, #128	; 0x80
 80086a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086aa:	e168      	b.n	800897e <UART_SetConfig+0x5a6>
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a1b      	ldr	r2, [pc, #108]	; (8008720 <UART_SetConfig+0x348>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d142      	bne.n	800873c <UART_SetConfig+0x364>
 80086b6:	4b16      	ldr	r3, [pc, #88]	; (8008710 <UART_SetConfig+0x338>)
 80086b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ba:	f003 0307 	and.w	r3, r3, #7
 80086be:	2b05      	cmp	r3, #5
 80086c0:	d838      	bhi.n	8008734 <UART_SetConfig+0x35c>
 80086c2:	a201      	add	r2, pc, #4	; (adr r2, 80086c8 <UART_SetConfig+0x2f0>)
 80086c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c8:	080086e1 	.word	0x080086e1
 80086cc:	080086e9 	.word	0x080086e9
 80086d0:	080086f1 	.word	0x080086f1
 80086d4:	080086f9 	.word	0x080086f9
 80086d8:	08008725 	.word	0x08008725
 80086dc:	0800872d 	.word	0x0800872d
 80086e0:	2300      	movs	r3, #0
 80086e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086e6:	e14a      	b.n	800897e <UART_SetConfig+0x5a6>
 80086e8:	2304      	movs	r3, #4
 80086ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ee:	e146      	b.n	800897e <UART_SetConfig+0x5a6>
 80086f0:	2308      	movs	r3, #8
 80086f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086f6:	e142      	b.n	800897e <UART_SetConfig+0x5a6>
 80086f8:	2310      	movs	r3, #16
 80086fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086fe:	e13e      	b.n	800897e <UART_SetConfig+0x5a6>
 8008700:	cfff69f3 	.word	0xcfff69f3
 8008704:	58000c00 	.word	0x58000c00
 8008708:	11fff4ff 	.word	0x11fff4ff
 800870c:	40011000 	.word	0x40011000
 8008710:	58024400 	.word	0x58024400
 8008714:	40004400 	.word	0x40004400
 8008718:	40004800 	.word	0x40004800
 800871c:	40004c00 	.word	0x40004c00
 8008720:	40005000 	.word	0x40005000
 8008724:	2320      	movs	r3, #32
 8008726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800872a:	e128      	b.n	800897e <UART_SetConfig+0x5a6>
 800872c:	2340      	movs	r3, #64	; 0x40
 800872e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008732:	e124      	b.n	800897e <UART_SetConfig+0x5a6>
 8008734:	2380      	movs	r3, #128	; 0x80
 8008736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800873a:	e120      	b.n	800897e <UART_SetConfig+0x5a6>
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4acb      	ldr	r2, [pc, #812]	; (8008a70 <UART_SetConfig+0x698>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d176      	bne.n	8008834 <UART_SetConfig+0x45c>
 8008746:	4bcb      	ldr	r3, [pc, #812]	; (8008a74 <UART_SetConfig+0x69c>)
 8008748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800874a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800874e:	2b28      	cmp	r3, #40	; 0x28
 8008750:	d86c      	bhi.n	800882c <UART_SetConfig+0x454>
 8008752:	a201      	add	r2, pc, #4	; (adr r2, 8008758 <UART_SetConfig+0x380>)
 8008754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008758:	080087fd 	.word	0x080087fd
 800875c:	0800882d 	.word	0x0800882d
 8008760:	0800882d 	.word	0x0800882d
 8008764:	0800882d 	.word	0x0800882d
 8008768:	0800882d 	.word	0x0800882d
 800876c:	0800882d 	.word	0x0800882d
 8008770:	0800882d 	.word	0x0800882d
 8008774:	0800882d 	.word	0x0800882d
 8008778:	08008805 	.word	0x08008805
 800877c:	0800882d 	.word	0x0800882d
 8008780:	0800882d 	.word	0x0800882d
 8008784:	0800882d 	.word	0x0800882d
 8008788:	0800882d 	.word	0x0800882d
 800878c:	0800882d 	.word	0x0800882d
 8008790:	0800882d 	.word	0x0800882d
 8008794:	0800882d 	.word	0x0800882d
 8008798:	0800880d 	.word	0x0800880d
 800879c:	0800882d 	.word	0x0800882d
 80087a0:	0800882d 	.word	0x0800882d
 80087a4:	0800882d 	.word	0x0800882d
 80087a8:	0800882d 	.word	0x0800882d
 80087ac:	0800882d 	.word	0x0800882d
 80087b0:	0800882d 	.word	0x0800882d
 80087b4:	0800882d 	.word	0x0800882d
 80087b8:	08008815 	.word	0x08008815
 80087bc:	0800882d 	.word	0x0800882d
 80087c0:	0800882d 	.word	0x0800882d
 80087c4:	0800882d 	.word	0x0800882d
 80087c8:	0800882d 	.word	0x0800882d
 80087cc:	0800882d 	.word	0x0800882d
 80087d0:	0800882d 	.word	0x0800882d
 80087d4:	0800882d 	.word	0x0800882d
 80087d8:	0800881d 	.word	0x0800881d
 80087dc:	0800882d 	.word	0x0800882d
 80087e0:	0800882d 	.word	0x0800882d
 80087e4:	0800882d 	.word	0x0800882d
 80087e8:	0800882d 	.word	0x0800882d
 80087ec:	0800882d 	.word	0x0800882d
 80087f0:	0800882d 	.word	0x0800882d
 80087f4:	0800882d 	.word	0x0800882d
 80087f8:	08008825 	.word	0x08008825
 80087fc:	2301      	movs	r3, #1
 80087fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008802:	e0bc      	b.n	800897e <UART_SetConfig+0x5a6>
 8008804:	2304      	movs	r3, #4
 8008806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800880a:	e0b8      	b.n	800897e <UART_SetConfig+0x5a6>
 800880c:	2308      	movs	r3, #8
 800880e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008812:	e0b4      	b.n	800897e <UART_SetConfig+0x5a6>
 8008814:	2310      	movs	r3, #16
 8008816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800881a:	e0b0      	b.n	800897e <UART_SetConfig+0x5a6>
 800881c:	2320      	movs	r3, #32
 800881e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008822:	e0ac      	b.n	800897e <UART_SetConfig+0x5a6>
 8008824:	2340      	movs	r3, #64	; 0x40
 8008826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800882a:	e0a8      	b.n	800897e <UART_SetConfig+0x5a6>
 800882c:	2380      	movs	r3, #128	; 0x80
 800882e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008832:	e0a4      	b.n	800897e <UART_SetConfig+0x5a6>
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a8f      	ldr	r2, [pc, #572]	; (8008a78 <UART_SetConfig+0x6a0>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d130      	bne.n	80088a0 <UART_SetConfig+0x4c8>
 800883e:	4b8d      	ldr	r3, [pc, #564]	; (8008a74 <UART_SetConfig+0x69c>)
 8008840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008842:	f003 0307 	and.w	r3, r3, #7
 8008846:	2b05      	cmp	r3, #5
 8008848:	d826      	bhi.n	8008898 <UART_SetConfig+0x4c0>
 800884a:	a201      	add	r2, pc, #4	; (adr r2, 8008850 <UART_SetConfig+0x478>)
 800884c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008850:	08008869 	.word	0x08008869
 8008854:	08008871 	.word	0x08008871
 8008858:	08008879 	.word	0x08008879
 800885c:	08008881 	.word	0x08008881
 8008860:	08008889 	.word	0x08008889
 8008864:	08008891 	.word	0x08008891
 8008868:	2300      	movs	r3, #0
 800886a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800886e:	e086      	b.n	800897e <UART_SetConfig+0x5a6>
 8008870:	2304      	movs	r3, #4
 8008872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008876:	e082      	b.n	800897e <UART_SetConfig+0x5a6>
 8008878:	2308      	movs	r3, #8
 800887a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800887e:	e07e      	b.n	800897e <UART_SetConfig+0x5a6>
 8008880:	2310      	movs	r3, #16
 8008882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008886:	e07a      	b.n	800897e <UART_SetConfig+0x5a6>
 8008888:	2320      	movs	r3, #32
 800888a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800888e:	e076      	b.n	800897e <UART_SetConfig+0x5a6>
 8008890:	2340      	movs	r3, #64	; 0x40
 8008892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008896:	e072      	b.n	800897e <UART_SetConfig+0x5a6>
 8008898:	2380      	movs	r3, #128	; 0x80
 800889a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800889e:	e06e      	b.n	800897e <UART_SetConfig+0x5a6>
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a75      	ldr	r2, [pc, #468]	; (8008a7c <UART_SetConfig+0x6a4>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d130      	bne.n	800890c <UART_SetConfig+0x534>
 80088aa:	4b72      	ldr	r3, [pc, #456]	; (8008a74 <UART_SetConfig+0x69c>)
 80088ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088ae:	f003 0307 	and.w	r3, r3, #7
 80088b2:	2b05      	cmp	r3, #5
 80088b4:	d826      	bhi.n	8008904 <UART_SetConfig+0x52c>
 80088b6:	a201      	add	r2, pc, #4	; (adr r2, 80088bc <UART_SetConfig+0x4e4>)
 80088b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088bc:	080088d5 	.word	0x080088d5
 80088c0:	080088dd 	.word	0x080088dd
 80088c4:	080088e5 	.word	0x080088e5
 80088c8:	080088ed 	.word	0x080088ed
 80088cc:	080088f5 	.word	0x080088f5
 80088d0:	080088fd 	.word	0x080088fd
 80088d4:	2300      	movs	r3, #0
 80088d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088da:	e050      	b.n	800897e <UART_SetConfig+0x5a6>
 80088dc:	2304      	movs	r3, #4
 80088de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088e2:	e04c      	b.n	800897e <UART_SetConfig+0x5a6>
 80088e4:	2308      	movs	r3, #8
 80088e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ea:	e048      	b.n	800897e <UART_SetConfig+0x5a6>
 80088ec:	2310      	movs	r3, #16
 80088ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088f2:	e044      	b.n	800897e <UART_SetConfig+0x5a6>
 80088f4:	2320      	movs	r3, #32
 80088f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088fa:	e040      	b.n	800897e <UART_SetConfig+0x5a6>
 80088fc:	2340      	movs	r3, #64	; 0x40
 80088fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008902:	e03c      	b.n	800897e <UART_SetConfig+0x5a6>
 8008904:	2380      	movs	r3, #128	; 0x80
 8008906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800890a:	e038      	b.n	800897e <UART_SetConfig+0x5a6>
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a5b      	ldr	r2, [pc, #364]	; (8008a80 <UART_SetConfig+0x6a8>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d130      	bne.n	8008978 <UART_SetConfig+0x5a0>
 8008916:	4b57      	ldr	r3, [pc, #348]	; (8008a74 <UART_SetConfig+0x69c>)
 8008918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800891a:	f003 0307 	and.w	r3, r3, #7
 800891e:	2b05      	cmp	r3, #5
 8008920:	d826      	bhi.n	8008970 <UART_SetConfig+0x598>
 8008922:	a201      	add	r2, pc, #4	; (adr r2, 8008928 <UART_SetConfig+0x550>)
 8008924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008928:	08008941 	.word	0x08008941
 800892c:	08008949 	.word	0x08008949
 8008930:	08008951 	.word	0x08008951
 8008934:	08008959 	.word	0x08008959
 8008938:	08008961 	.word	0x08008961
 800893c:	08008969 	.word	0x08008969
 8008940:	2302      	movs	r3, #2
 8008942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008946:	e01a      	b.n	800897e <UART_SetConfig+0x5a6>
 8008948:	2304      	movs	r3, #4
 800894a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800894e:	e016      	b.n	800897e <UART_SetConfig+0x5a6>
 8008950:	2308      	movs	r3, #8
 8008952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008956:	e012      	b.n	800897e <UART_SetConfig+0x5a6>
 8008958:	2310      	movs	r3, #16
 800895a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800895e:	e00e      	b.n	800897e <UART_SetConfig+0x5a6>
 8008960:	2320      	movs	r3, #32
 8008962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008966:	e00a      	b.n	800897e <UART_SetConfig+0x5a6>
 8008968:	2340      	movs	r3, #64	; 0x40
 800896a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800896e:	e006      	b.n	800897e <UART_SetConfig+0x5a6>
 8008970:	2380      	movs	r3, #128	; 0x80
 8008972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008976:	e002      	b.n	800897e <UART_SetConfig+0x5a6>
 8008978:	2380      	movs	r3, #128	; 0x80
 800897a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a3f      	ldr	r2, [pc, #252]	; (8008a80 <UART_SetConfig+0x6a8>)
 8008984:	4293      	cmp	r3, r2
 8008986:	f040 80f8 	bne.w	8008b7a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800898a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800898e:	2b20      	cmp	r3, #32
 8008990:	dc46      	bgt.n	8008a20 <UART_SetConfig+0x648>
 8008992:	2b02      	cmp	r3, #2
 8008994:	f2c0 8082 	blt.w	8008a9c <UART_SetConfig+0x6c4>
 8008998:	3b02      	subs	r3, #2
 800899a:	2b1e      	cmp	r3, #30
 800899c:	d87e      	bhi.n	8008a9c <UART_SetConfig+0x6c4>
 800899e:	a201      	add	r2, pc, #4	; (adr r2, 80089a4 <UART_SetConfig+0x5cc>)
 80089a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a4:	08008a27 	.word	0x08008a27
 80089a8:	08008a9d 	.word	0x08008a9d
 80089ac:	08008a2f 	.word	0x08008a2f
 80089b0:	08008a9d 	.word	0x08008a9d
 80089b4:	08008a9d 	.word	0x08008a9d
 80089b8:	08008a9d 	.word	0x08008a9d
 80089bc:	08008a3f 	.word	0x08008a3f
 80089c0:	08008a9d 	.word	0x08008a9d
 80089c4:	08008a9d 	.word	0x08008a9d
 80089c8:	08008a9d 	.word	0x08008a9d
 80089cc:	08008a9d 	.word	0x08008a9d
 80089d0:	08008a9d 	.word	0x08008a9d
 80089d4:	08008a9d 	.word	0x08008a9d
 80089d8:	08008a9d 	.word	0x08008a9d
 80089dc:	08008a4f 	.word	0x08008a4f
 80089e0:	08008a9d 	.word	0x08008a9d
 80089e4:	08008a9d 	.word	0x08008a9d
 80089e8:	08008a9d 	.word	0x08008a9d
 80089ec:	08008a9d 	.word	0x08008a9d
 80089f0:	08008a9d 	.word	0x08008a9d
 80089f4:	08008a9d 	.word	0x08008a9d
 80089f8:	08008a9d 	.word	0x08008a9d
 80089fc:	08008a9d 	.word	0x08008a9d
 8008a00:	08008a9d 	.word	0x08008a9d
 8008a04:	08008a9d 	.word	0x08008a9d
 8008a08:	08008a9d 	.word	0x08008a9d
 8008a0c:	08008a9d 	.word	0x08008a9d
 8008a10:	08008a9d 	.word	0x08008a9d
 8008a14:	08008a9d 	.word	0x08008a9d
 8008a18:	08008a9d 	.word	0x08008a9d
 8008a1c:	08008a8f 	.word	0x08008a8f
 8008a20:	2b40      	cmp	r3, #64	; 0x40
 8008a22:	d037      	beq.n	8008a94 <UART_SetConfig+0x6bc>
 8008a24:	e03a      	b.n	8008a9c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008a26:	f7fd fdff 	bl	8006628 <HAL_RCCEx_GetD3PCLK1Freq>
 8008a2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008a2c:	e03c      	b.n	8008aa8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7fd fe0e 	bl	8006654 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a3c:	e034      	b.n	8008aa8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a3e:	f107 0318 	add.w	r3, r7, #24
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7fd ff5a 	bl	80068fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a4c:	e02c      	b.n	8008aa8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a4e:	4b09      	ldr	r3, [pc, #36]	; (8008a74 <UART_SetConfig+0x69c>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f003 0320 	and.w	r3, r3, #32
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d016      	beq.n	8008a88 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a5a:	4b06      	ldr	r3, [pc, #24]	; (8008a74 <UART_SetConfig+0x69c>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	08db      	lsrs	r3, r3, #3
 8008a60:	f003 0303 	and.w	r3, r3, #3
 8008a64:	4a07      	ldr	r2, [pc, #28]	; (8008a84 <UART_SetConfig+0x6ac>)
 8008a66:	fa22 f303 	lsr.w	r3, r2, r3
 8008a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008a6c:	e01c      	b.n	8008aa8 <UART_SetConfig+0x6d0>
 8008a6e:	bf00      	nop
 8008a70:	40011400 	.word	0x40011400
 8008a74:	58024400 	.word	0x58024400
 8008a78:	40007800 	.word	0x40007800
 8008a7c:	40007c00 	.word	0x40007c00
 8008a80:	58000c00 	.word	0x58000c00
 8008a84:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008a88:	4b9d      	ldr	r3, [pc, #628]	; (8008d00 <UART_SetConfig+0x928>)
 8008a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a8c:	e00c      	b.n	8008aa8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008a8e:	4b9d      	ldr	r3, [pc, #628]	; (8008d04 <UART_SetConfig+0x92c>)
 8008a90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a92:	e009      	b.n	8008aa8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a9a:	e005      	b.n	8008aa8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008aa6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	f000 81de 	beq.w	8008e6c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab4:	4a94      	ldr	r2, [pc, #592]	; (8008d08 <UART_SetConfig+0x930>)
 8008ab6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008aba:	461a      	mov	r2, r3
 8008abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008abe:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ac2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	685a      	ldr	r2, [r3, #4]
 8008ac8:	4613      	mov	r3, r2
 8008aca:	005b      	lsls	r3, r3, #1
 8008acc:	4413      	add	r3, r2
 8008ace:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d305      	bcc.n	8008ae0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d903      	bls.n	8008ae8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008ae6:	e1c1      	b.n	8008e6c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aea:	2200      	movs	r2, #0
 8008aec:	60bb      	str	r3, [r7, #8]
 8008aee:	60fa      	str	r2, [r7, #12]
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af4:	4a84      	ldr	r2, [pc, #528]	; (8008d08 <UART_SetConfig+0x930>)
 8008af6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	2200      	movs	r2, #0
 8008afe:	603b      	str	r3, [r7, #0]
 8008b00:	607a      	str	r2, [r7, #4]
 8008b02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008b0a:	f7f7 fdfd 	bl	8000708 <__aeabi_uldivmod>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	460b      	mov	r3, r1
 8008b12:	4610      	mov	r0, r2
 8008b14:	4619      	mov	r1, r3
 8008b16:	f04f 0200 	mov.w	r2, #0
 8008b1a:	f04f 0300 	mov.w	r3, #0
 8008b1e:	020b      	lsls	r3, r1, #8
 8008b20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b24:	0202      	lsls	r2, r0, #8
 8008b26:	6979      	ldr	r1, [r7, #20]
 8008b28:	6849      	ldr	r1, [r1, #4]
 8008b2a:	0849      	lsrs	r1, r1, #1
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	460c      	mov	r4, r1
 8008b30:	4605      	mov	r5, r0
 8008b32:	eb12 0804 	adds.w	r8, r2, r4
 8008b36:	eb43 0905 	adc.w	r9, r3, r5
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	469a      	mov	sl, r3
 8008b42:	4693      	mov	fp, r2
 8008b44:	4652      	mov	r2, sl
 8008b46:	465b      	mov	r3, fp
 8008b48:	4640      	mov	r0, r8
 8008b4a:	4649      	mov	r1, r9
 8008b4c:	f7f7 fddc 	bl	8000708 <__aeabi_uldivmod>
 8008b50:	4602      	mov	r2, r0
 8008b52:	460b      	mov	r3, r1
 8008b54:	4613      	mov	r3, r2
 8008b56:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b5e:	d308      	bcc.n	8008b72 <UART_SetConfig+0x79a>
 8008b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b66:	d204      	bcs.n	8008b72 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b6e:	60da      	str	r2, [r3, #12]
 8008b70:	e17c      	b.n	8008e6c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008b78:	e178      	b.n	8008e6c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	69db      	ldr	r3, [r3, #28]
 8008b7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b82:	f040 80c5 	bne.w	8008d10 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008b86:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008b8a:	2b20      	cmp	r3, #32
 8008b8c:	dc48      	bgt.n	8008c20 <UART_SetConfig+0x848>
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	db7b      	blt.n	8008c8a <UART_SetConfig+0x8b2>
 8008b92:	2b20      	cmp	r3, #32
 8008b94:	d879      	bhi.n	8008c8a <UART_SetConfig+0x8b2>
 8008b96:	a201      	add	r2, pc, #4	; (adr r2, 8008b9c <UART_SetConfig+0x7c4>)
 8008b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b9c:	08008c27 	.word	0x08008c27
 8008ba0:	08008c2f 	.word	0x08008c2f
 8008ba4:	08008c8b 	.word	0x08008c8b
 8008ba8:	08008c8b 	.word	0x08008c8b
 8008bac:	08008c37 	.word	0x08008c37
 8008bb0:	08008c8b 	.word	0x08008c8b
 8008bb4:	08008c8b 	.word	0x08008c8b
 8008bb8:	08008c8b 	.word	0x08008c8b
 8008bbc:	08008c47 	.word	0x08008c47
 8008bc0:	08008c8b 	.word	0x08008c8b
 8008bc4:	08008c8b 	.word	0x08008c8b
 8008bc8:	08008c8b 	.word	0x08008c8b
 8008bcc:	08008c8b 	.word	0x08008c8b
 8008bd0:	08008c8b 	.word	0x08008c8b
 8008bd4:	08008c8b 	.word	0x08008c8b
 8008bd8:	08008c8b 	.word	0x08008c8b
 8008bdc:	08008c57 	.word	0x08008c57
 8008be0:	08008c8b 	.word	0x08008c8b
 8008be4:	08008c8b 	.word	0x08008c8b
 8008be8:	08008c8b 	.word	0x08008c8b
 8008bec:	08008c8b 	.word	0x08008c8b
 8008bf0:	08008c8b 	.word	0x08008c8b
 8008bf4:	08008c8b 	.word	0x08008c8b
 8008bf8:	08008c8b 	.word	0x08008c8b
 8008bfc:	08008c8b 	.word	0x08008c8b
 8008c00:	08008c8b 	.word	0x08008c8b
 8008c04:	08008c8b 	.word	0x08008c8b
 8008c08:	08008c8b 	.word	0x08008c8b
 8008c0c:	08008c8b 	.word	0x08008c8b
 8008c10:	08008c8b 	.word	0x08008c8b
 8008c14:	08008c8b 	.word	0x08008c8b
 8008c18:	08008c8b 	.word	0x08008c8b
 8008c1c:	08008c7d 	.word	0x08008c7d
 8008c20:	2b40      	cmp	r3, #64	; 0x40
 8008c22:	d02e      	beq.n	8008c82 <UART_SetConfig+0x8aa>
 8008c24:	e031      	b.n	8008c8a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c26:	f7fc fac9 	bl	80051bc <HAL_RCC_GetPCLK1Freq>
 8008c2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008c2c:	e033      	b.n	8008c96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c2e:	f7fc fadb 	bl	80051e8 <HAL_RCC_GetPCLK2Freq>
 8008c32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008c34:	e02f      	b.n	8008c96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7fd fd0a 	bl	8006654 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c44:	e027      	b.n	8008c96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c46:	f107 0318 	add.w	r3, r7, #24
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7fd fe56 	bl	80068fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c54:	e01f      	b.n	8008c96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c56:	4b2d      	ldr	r3, [pc, #180]	; (8008d0c <UART_SetConfig+0x934>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f003 0320 	and.w	r3, r3, #32
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d009      	beq.n	8008c76 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008c62:	4b2a      	ldr	r3, [pc, #168]	; (8008d0c <UART_SetConfig+0x934>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	08db      	lsrs	r3, r3, #3
 8008c68:	f003 0303 	and.w	r3, r3, #3
 8008c6c:	4a24      	ldr	r2, [pc, #144]	; (8008d00 <UART_SetConfig+0x928>)
 8008c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008c74:	e00f      	b.n	8008c96 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008c76:	4b22      	ldr	r3, [pc, #136]	; (8008d00 <UART_SetConfig+0x928>)
 8008c78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c7a:	e00c      	b.n	8008c96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008c7c:	4b21      	ldr	r3, [pc, #132]	; (8008d04 <UART_SetConfig+0x92c>)
 8008c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c80:	e009      	b.n	8008c96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c88:	e005      	b.n	8008c96 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008c94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	f000 80e7 	beq.w	8008e6c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca2:	4a19      	ldr	r2, [pc, #100]	; (8008d08 <UART_SetConfig+0x930>)
 8008ca4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ca8:	461a      	mov	r2, r3
 8008caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cac:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cb0:	005a      	lsls	r2, r3, #1
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	085b      	lsrs	r3, r3, #1
 8008cb8:	441a      	add	r2, r3
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cc2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc6:	2b0f      	cmp	r3, #15
 8008cc8:	d916      	bls.n	8008cf8 <UART_SetConfig+0x920>
 8008cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cd0:	d212      	bcs.n	8008cf8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	f023 030f 	bic.w	r3, r3, #15
 8008cda:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cde:	085b      	lsrs	r3, r3, #1
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	f003 0307 	and.w	r3, r3, #7
 8008ce6:	b29a      	uxth	r2, r3
 8008ce8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008cea:	4313      	orrs	r3, r2
 8008cec:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008cf4:	60da      	str	r2, [r3, #12]
 8008cf6:	e0b9      	b.n	8008e6c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008cfe:	e0b5      	b.n	8008e6c <UART_SetConfig+0xa94>
 8008d00:	03d09000 	.word	0x03d09000
 8008d04:	003d0900 	.word	0x003d0900
 8008d08:	0800ffb0 	.word	0x0800ffb0
 8008d0c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d10:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008d14:	2b20      	cmp	r3, #32
 8008d16:	dc49      	bgt.n	8008dac <UART_SetConfig+0x9d4>
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	db7c      	blt.n	8008e16 <UART_SetConfig+0xa3e>
 8008d1c:	2b20      	cmp	r3, #32
 8008d1e:	d87a      	bhi.n	8008e16 <UART_SetConfig+0xa3e>
 8008d20:	a201      	add	r2, pc, #4	; (adr r2, 8008d28 <UART_SetConfig+0x950>)
 8008d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d26:	bf00      	nop
 8008d28:	08008db3 	.word	0x08008db3
 8008d2c:	08008dbb 	.word	0x08008dbb
 8008d30:	08008e17 	.word	0x08008e17
 8008d34:	08008e17 	.word	0x08008e17
 8008d38:	08008dc3 	.word	0x08008dc3
 8008d3c:	08008e17 	.word	0x08008e17
 8008d40:	08008e17 	.word	0x08008e17
 8008d44:	08008e17 	.word	0x08008e17
 8008d48:	08008dd3 	.word	0x08008dd3
 8008d4c:	08008e17 	.word	0x08008e17
 8008d50:	08008e17 	.word	0x08008e17
 8008d54:	08008e17 	.word	0x08008e17
 8008d58:	08008e17 	.word	0x08008e17
 8008d5c:	08008e17 	.word	0x08008e17
 8008d60:	08008e17 	.word	0x08008e17
 8008d64:	08008e17 	.word	0x08008e17
 8008d68:	08008de3 	.word	0x08008de3
 8008d6c:	08008e17 	.word	0x08008e17
 8008d70:	08008e17 	.word	0x08008e17
 8008d74:	08008e17 	.word	0x08008e17
 8008d78:	08008e17 	.word	0x08008e17
 8008d7c:	08008e17 	.word	0x08008e17
 8008d80:	08008e17 	.word	0x08008e17
 8008d84:	08008e17 	.word	0x08008e17
 8008d88:	08008e17 	.word	0x08008e17
 8008d8c:	08008e17 	.word	0x08008e17
 8008d90:	08008e17 	.word	0x08008e17
 8008d94:	08008e17 	.word	0x08008e17
 8008d98:	08008e17 	.word	0x08008e17
 8008d9c:	08008e17 	.word	0x08008e17
 8008da0:	08008e17 	.word	0x08008e17
 8008da4:	08008e17 	.word	0x08008e17
 8008da8:	08008e09 	.word	0x08008e09
 8008dac:	2b40      	cmp	r3, #64	; 0x40
 8008dae:	d02e      	beq.n	8008e0e <UART_SetConfig+0xa36>
 8008db0:	e031      	b.n	8008e16 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008db2:	f7fc fa03 	bl	80051bc <HAL_RCC_GetPCLK1Freq>
 8008db6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008db8:	e033      	b.n	8008e22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008dba:	f7fc fa15 	bl	80051e8 <HAL_RCC_GetPCLK2Freq>
 8008dbe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008dc0:	e02f      	b.n	8008e22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7fd fc44 	bl	8006654 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dd0:	e027      	b.n	8008e22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dd2:	f107 0318 	add.w	r3, r7, #24
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7fd fd90 	bl	80068fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008de0:	e01f      	b.n	8008e22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008de2:	4b2d      	ldr	r3, [pc, #180]	; (8008e98 <UART_SetConfig+0xac0>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f003 0320 	and.w	r3, r3, #32
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d009      	beq.n	8008e02 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008dee:	4b2a      	ldr	r3, [pc, #168]	; (8008e98 <UART_SetConfig+0xac0>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	08db      	lsrs	r3, r3, #3
 8008df4:	f003 0303 	and.w	r3, r3, #3
 8008df8:	4a28      	ldr	r2, [pc, #160]	; (8008e9c <UART_SetConfig+0xac4>)
 8008dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8008dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e00:	e00f      	b.n	8008e22 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008e02:	4b26      	ldr	r3, [pc, #152]	; (8008e9c <UART_SetConfig+0xac4>)
 8008e04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e06:	e00c      	b.n	8008e22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e08:	4b25      	ldr	r3, [pc, #148]	; (8008ea0 <UART_SetConfig+0xac8>)
 8008e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e0c:	e009      	b.n	8008e22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e14:	e005      	b.n	8008e22 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008e16:	2300      	movs	r3, #0
 8008e18:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008e20:	bf00      	nop
    }

    if (pclk != 0U)
 8008e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d021      	beq.n	8008e6c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2c:	4a1d      	ldr	r2, [pc, #116]	; (8008ea4 <UART_SetConfig+0xacc>)
 8008e2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e32:	461a      	mov	r2, r3
 8008e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e36:	fbb3 f2f2 	udiv	r2, r3, r2
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	085b      	lsrs	r3, r3, #1
 8008e40:	441a      	add	r2, r3
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e4a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e4e:	2b0f      	cmp	r3, #15
 8008e50:	d909      	bls.n	8008e66 <UART_SetConfig+0xa8e>
 8008e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e58:	d205      	bcs.n	8008e66 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	60da      	str	r2, [r3, #12]
 8008e64:	e002      	b.n	8008e6c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	2200      	movs	r2, #0
 8008e86:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008e88:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3748      	adds	r7, #72	; 0x48
 8008e90:	46bd      	mov	sp, r7
 8008e92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e96:	bf00      	nop
 8008e98:	58024400 	.word	0x58024400
 8008e9c:	03d09000 	.word	0x03d09000
 8008ea0:	003d0900 	.word	0x003d0900
 8008ea4:	0800ffb0 	.word	0x0800ffb0

08008ea8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b083      	sub	sp, #12
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb4:	f003 0301 	and.w	r3, r3, #1
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d00a      	beq.n	8008ed2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	430a      	orrs	r2, r1
 8008ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed6:	f003 0302 	and.w	r3, r3, #2
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d00a      	beq.n	8008ef4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	430a      	orrs	r2, r1
 8008ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef8:	f003 0304 	and.w	r3, r3, #4
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d00a      	beq.n	8008f16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	430a      	orrs	r2, r1
 8008f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f1a:	f003 0308 	and.w	r3, r3, #8
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00a      	beq.n	8008f38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	430a      	orrs	r2, r1
 8008f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f3c:	f003 0310 	and.w	r3, r3, #16
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d00a      	beq.n	8008f5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	430a      	orrs	r2, r1
 8008f58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f5e:	f003 0320 	and.w	r3, r3, #32
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d00a      	beq.n	8008f7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	430a      	orrs	r2, r1
 8008f7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d01a      	beq.n	8008fbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	430a      	orrs	r2, r1
 8008f9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fa6:	d10a      	bne.n	8008fbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	430a      	orrs	r2, r1
 8008fbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d00a      	beq.n	8008fe0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	430a      	orrs	r2, r1
 8008fde:	605a      	str	r2, [r3, #4]
  }
}
 8008fe0:	bf00      	nop
 8008fe2:	370c      	adds	r7, #12
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr

08008fec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b098      	sub	sp, #96	; 0x60
 8008ff0:	af02      	add	r7, sp, #8
 8008ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ffc:	f7f8 ff08 	bl	8001e10 <HAL_GetTick>
 8009000:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f003 0308 	and.w	r3, r3, #8
 800900c:	2b08      	cmp	r3, #8
 800900e:	d12f      	bne.n	8009070 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009010:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009014:	9300      	str	r3, [sp, #0]
 8009016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009018:	2200      	movs	r2, #0
 800901a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 f88e 	bl	8009140 <UART_WaitOnFlagUntilTimeout>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d022      	beq.n	8009070 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009032:	e853 3f00 	ldrex	r3, [r3]
 8009036:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800903a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800903e:	653b      	str	r3, [r7, #80]	; 0x50
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	461a      	mov	r2, r3
 8009046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009048:	647b      	str	r3, [r7, #68]	; 0x44
 800904a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800904e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009050:	e841 2300 	strex	r3, r2, [r1]
 8009054:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009058:	2b00      	cmp	r3, #0
 800905a:	d1e6      	bne.n	800902a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2220      	movs	r2, #32
 8009060:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800906c:	2303      	movs	r3, #3
 800906e:	e063      	b.n	8009138 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f003 0304 	and.w	r3, r3, #4
 800907a:	2b04      	cmp	r3, #4
 800907c:	d149      	bne.n	8009112 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800907e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009082:	9300      	str	r3, [sp, #0]
 8009084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009086:	2200      	movs	r2, #0
 8009088:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 f857 	bl	8009140 <UART_WaitOnFlagUntilTimeout>
 8009092:	4603      	mov	r3, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d03c      	beq.n	8009112 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a0:	e853 3f00 	ldrex	r3, [r3]
 80090a4:	623b      	str	r3, [r7, #32]
   return(result);
 80090a6:	6a3b      	ldr	r3, [r7, #32]
 80090a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80090ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	461a      	mov	r2, r3
 80090b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090b6:	633b      	str	r3, [r7, #48]	; 0x30
 80090b8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80090bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090be:	e841 2300 	strex	r3, r2, [r1]
 80090c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80090c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1e6      	bne.n	8009098 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	3308      	adds	r3, #8
 80090d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	e853 3f00 	ldrex	r3, [r3]
 80090d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f023 0301 	bic.w	r3, r3, #1
 80090e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	3308      	adds	r3, #8
 80090e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090ea:	61fa      	str	r2, [r7, #28]
 80090ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ee:	69b9      	ldr	r1, [r7, #24]
 80090f0:	69fa      	ldr	r2, [r7, #28]
 80090f2:	e841 2300 	strex	r3, r2, [r1]
 80090f6:	617b      	str	r3, [r7, #20]
   return(result);
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1e5      	bne.n	80090ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2220      	movs	r2, #32
 8009102:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800910e:	2303      	movs	r3, #3
 8009110:	e012      	b.n	8009138 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2220      	movs	r2, #32
 8009116:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2220      	movs	r2, #32
 800911e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009136:	2300      	movs	r3, #0
}
 8009138:	4618      	mov	r0, r3
 800913a:	3758      	adds	r7, #88	; 0x58
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	603b      	str	r3, [r7, #0]
 800914c:	4613      	mov	r3, r2
 800914e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009150:	e049      	b.n	80091e6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009158:	d045      	beq.n	80091e6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800915a:	f7f8 fe59 	bl	8001e10 <HAL_GetTick>
 800915e:	4602      	mov	r2, r0
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	1ad3      	subs	r3, r2, r3
 8009164:	69ba      	ldr	r2, [r7, #24]
 8009166:	429a      	cmp	r2, r3
 8009168:	d302      	bcc.n	8009170 <UART_WaitOnFlagUntilTimeout+0x30>
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d101      	bne.n	8009174 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009170:	2303      	movs	r3, #3
 8009172:	e048      	b.n	8009206 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f003 0304 	and.w	r3, r3, #4
 800917e:	2b00      	cmp	r3, #0
 8009180:	d031      	beq.n	80091e6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	69db      	ldr	r3, [r3, #28]
 8009188:	f003 0308 	and.w	r3, r3, #8
 800918c:	2b08      	cmp	r3, #8
 800918e:	d110      	bne.n	80091b2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	2208      	movs	r2, #8
 8009196:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009198:	68f8      	ldr	r0, [r7, #12]
 800919a:	f000 f95b 	bl	8009454 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2208      	movs	r2, #8
 80091a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80091ae:	2301      	movs	r3, #1
 80091b0:	e029      	b.n	8009206 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	69db      	ldr	r3, [r3, #28]
 80091b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091c0:	d111      	bne.n	80091e6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80091cc:	68f8      	ldr	r0, [r7, #12]
 80091ce:	f000 f941 	bl	8009454 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2220      	movs	r2, #32
 80091d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2200      	movs	r2, #0
 80091de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80091e2:	2303      	movs	r3, #3
 80091e4:	e00f      	b.n	8009206 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	69da      	ldr	r2, [r3, #28]
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	4013      	ands	r3, r2
 80091f0:	68ba      	ldr	r2, [r7, #8]
 80091f2:	429a      	cmp	r2, r3
 80091f4:	bf0c      	ite	eq
 80091f6:	2301      	moveq	r3, #1
 80091f8:	2300      	movne	r3, #0
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	461a      	mov	r2, r3
 80091fe:	79fb      	ldrb	r3, [r7, #7]
 8009200:	429a      	cmp	r2, r3
 8009202:	d0a6      	beq.n	8009152 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
	...

08009210 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009210:	b480      	push	{r7}
 8009212:	b0a3      	sub	sp, #140	; 0x8c
 8009214:	af00      	add	r7, sp, #0
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	60b9      	str	r1, [r7, #8]
 800921a:	4613      	mov	r3, r2
 800921c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	68ba      	ldr	r2, [r7, #8]
 8009222:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	88fa      	ldrh	r2, [r7, #6]
 8009228:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	88fa      	ldrh	r2, [r7, #6]
 8009230:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2200      	movs	r2, #0
 8009238:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009242:	d10e      	bne.n	8009262 <UART_Start_Receive_IT+0x52>
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	691b      	ldr	r3, [r3, #16]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d105      	bne.n	8009258 <UART_Start_Receive_IT+0x48>
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009252:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009256:	e02d      	b.n	80092b4 <UART_Start_Receive_IT+0xa4>
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	22ff      	movs	r2, #255	; 0xff
 800925c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009260:	e028      	b.n	80092b4 <UART_Start_Receive_IT+0xa4>
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d10d      	bne.n	8009286 <UART_Start_Receive_IT+0x76>
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	691b      	ldr	r3, [r3, #16]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d104      	bne.n	800927c <UART_Start_Receive_IT+0x6c>
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	22ff      	movs	r2, #255	; 0xff
 8009276:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800927a:	e01b      	b.n	80092b4 <UART_Start_Receive_IT+0xa4>
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	227f      	movs	r2, #127	; 0x7f
 8009280:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009284:	e016      	b.n	80092b4 <UART_Start_Receive_IT+0xa4>
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800928e:	d10d      	bne.n	80092ac <UART_Start_Receive_IT+0x9c>
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	691b      	ldr	r3, [r3, #16]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d104      	bne.n	80092a2 <UART_Start_Receive_IT+0x92>
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	227f      	movs	r2, #127	; 0x7f
 800929c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80092a0:	e008      	b.n	80092b4 <UART_Start_Receive_IT+0xa4>
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	223f      	movs	r2, #63	; 0x3f
 80092a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80092aa:	e003      	b.n	80092b4 <UART_Start_Receive_IT+0xa4>
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2200      	movs	r2, #0
 80092b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2222      	movs	r2, #34	; 0x22
 80092c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	3308      	adds	r3, #8
 80092ca:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092ce:	e853 3f00 	ldrex	r3, [r3]
 80092d2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80092d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80092d6:	f043 0301 	orr.w	r3, r3, #1
 80092da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	3308      	adds	r3, #8
 80092e4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80092e8:	673a      	str	r2, [r7, #112]	; 0x70
 80092ea:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ec:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80092ee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80092f0:	e841 2300 	strex	r3, r2, [r1]
 80092f4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80092f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d1e3      	bne.n	80092c4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009304:	d14f      	bne.n	80093a6 <UART_Start_Receive_IT+0x196>
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800930c:	88fa      	ldrh	r2, [r7, #6]
 800930e:	429a      	cmp	r2, r3
 8009310:	d349      	bcc.n	80093a6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800931a:	d107      	bne.n	800932c <UART_Start_Receive_IT+0x11c>
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d103      	bne.n	800932c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	4a47      	ldr	r2, [pc, #284]	; (8009444 <UART_Start_Receive_IT+0x234>)
 8009328:	675a      	str	r2, [r3, #116]	; 0x74
 800932a:	e002      	b.n	8009332 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	4a46      	ldr	r2, [pc, #280]	; (8009448 <UART_Start_Receive_IT+0x238>)
 8009330:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	691b      	ldr	r3, [r3, #16]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d01a      	beq.n	8009370 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009342:	e853 3f00 	ldrex	r3, [r3]
 8009346:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800934a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800934e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	461a      	mov	r2, r3
 8009358:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800935c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800935e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009360:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009362:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009364:	e841 2300 	strex	r3, r2, [r1]
 8009368:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800936a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800936c:	2b00      	cmp	r3, #0
 800936e:	d1e4      	bne.n	800933a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	3308      	adds	r3, #8
 8009376:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800937a:	e853 3f00 	ldrex	r3, [r3]
 800937e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009386:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	3308      	adds	r3, #8
 800938e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009390:	64ba      	str	r2, [r7, #72]	; 0x48
 8009392:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009394:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009396:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009398:	e841 2300 	strex	r3, r2, [r1]
 800939c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800939e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d1e5      	bne.n	8009370 <UART_Start_Receive_IT+0x160>
 80093a4:	e046      	b.n	8009434 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093ae:	d107      	bne.n	80093c0 <UART_Start_Receive_IT+0x1b0>
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	691b      	ldr	r3, [r3, #16]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d103      	bne.n	80093c0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	4a24      	ldr	r2, [pc, #144]	; (800944c <UART_Start_Receive_IT+0x23c>)
 80093bc:	675a      	str	r2, [r3, #116]	; 0x74
 80093be:	e002      	b.n	80093c6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	4a23      	ldr	r2, [pc, #140]	; (8009450 <UART_Start_Receive_IT+0x240>)
 80093c4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d019      	beq.n	8009402 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d6:	e853 3f00 	ldrex	r3, [r3]
 80093da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093de:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80093e2:	677b      	str	r3, [r7, #116]	; 0x74
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	461a      	mov	r2, r3
 80093ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093ec:	637b      	str	r3, [r7, #52]	; 0x34
 80093ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80093f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093f4:	e841 2300 	strex	r3, r2, [r1]
 80093f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80093fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d1e6      	bne.n	80093ce <UART_Start_Receive_IT+0x1be>
 8009400:	e018      	b.n	8009434 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	e853 3f00 	ldrex	r3, [r3]
 800940e:	613b      	str	r3, [r7, #16]
   return(result);
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	f043 0320 	orr.w	r3, r3, #32
 8009416:	67bb      	str	r3, [r7, #120]	; 0x78
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	461a      	mov	r2, r3
 800941e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009420:	623b      	str	r3, [r7, #32]
 8009422:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009424:	69f9      	ldr	r1, [r7, #28]
 8009426:	6a3a      	ldr	r2, [r7, #32]
 8009428:	e841 2300 	strex	r3, r2, [r1]
 800942c:	61bb      	str	r3, [r7, #24]
   return(result);
 800942e:	69bb      	ldr	r3, [r7, #24]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d1e6      	bne.n	8009402 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009434:	2300      	movs	r3, #0
}
 8009436:	4618      	mov	r0, r3
 8009438:	378c      	adds	r7, #140	; 0x8c
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop
 8009444:	08009fb9 	.word	0x08009fb9
 8009448:	08009c59 	.word	0x08009c59
 800944c:	08009aa1 	.word	0x08009aa1
 8009450:	080098e9 	.word	0x080098e9

08009454 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009454:	b480      	push	{r7}
 8009456:	b095      	sub	sp, #84	; 0x54
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009464:	e853 3f00 	ldrex	r3, [r3]
 8009468:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800946a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800946c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009470:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	461a      	mov	r2, r3
 8009478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800947a:	643b      	str	r3, [r7, #64]	; 0x40
 800947c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009480:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009482:	e841 2300 	strex	r3, r2, [r1]
 8009486:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800948a:	2b00      	cmp	r3, #0
 800948c:	d1e6      	bne.n	800945c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	3308      	adds	r3, #8
 8009494:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009496:	6a3b      	ldr	r3, [r7, #32]
 8009498:	e853 3f00 	ldrex	r3, [r3]
 800949c:	61fb      	str	r3, [r7, #28]
   return(result);
 800949e:	69fa      	ldr	r2, [r7, #28]
 80094a0:	4b1e      	ldr	r3, [pc, #120]	; (800951c <UART_EndRxTransfer+0xc8>)
 80094a2:	4013      	ands	r3, r2
 80094a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	3308      	adds	r3, #8
 80094ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80094b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094b6:	e841 2300 	strex	r3, r2, [r1]
 80094ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d1e5      	bne.n	800948e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d118      	bne.n	80094fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	e853 3f00 	ldrex	r3, [r3]
 80094d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	f023 0310 	bic.w	r3, r3, #16
 80094de:	647b      	str	r3, [r7, #68]	; 0x44
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	461a      	mov	r2, r3
 80094e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094e8:	61bb      	str	r3, [r7, #24]
 80094ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ec:	6979      	ldr	r1, [r7, #20]
 80094ee:	69ba      	ldr	r2, [r7, #24]
 80094f0:	e841 2300 	strex	r3, r2, [r1]
 80094f4:	613b      	str	r3, [r7, #16]
   return(result);
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d1e6      	bne.n	80094ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2220      	movs	r2, #32
 8009500:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2200      	movs	r2, #0
 8009508:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009510:	bf00      	nop
 8009512:	3754      	adds	r7, #84	; 0x54
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr
 800951c:	effffffe 	.word	0xeffffffe

08009520 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800952c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2200      	movs	r2, #0
 8009532:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2200      	movs	r2, #0
 800953a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800953e:	68f8      	ldr	r0, [r7, #12]
 8009540:	f7fe ff34 	bl	80083ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009544:	bf00      	nop
 8009546:	3710      	adds	r7, #16
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800954c:	b480      	push	{r7}
 800954e:	b08f      	sub	sp, #60	; 0x3c
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800955a:	2b21      	cmp	r3, #33	; 0x21
 800955c:	d14c      	bne.n	80095f8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009564:	b29b      	uxth	r3, r3
 8009566:	2b00      	cmp	r3, #0
 8009568:	d132      	bne.n	80095d0 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009570:	6a3b      	ldr	r3, [r7, #32]
 8009572:	e853 3f00 	ldrex	r3, [r3]
 8009576:	61fb      	str	r3, [r7, #28]
   return(result);
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800957e:	637b      	str	r3, [r7, #52]	; 0x34
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	461a      	mov	r2, r3
 8009586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009588:	62fb      	str	r3, [r7, #44]	; 0x2c
 800958a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800958c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800958e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009590:	e841 2300 	strex	r3, r2, [r1]
 8009594:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009598:	2b00      	cmp	r3, #0
 800959a:	d1e6      	bne.n	800956a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	e853 3f00 	ldrex	r3, [r3]
 80095a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095b0:	633b      	str	r3, [r7, #48]	; 0x30
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	461a      	mov	r2, r3
 80095b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ba:	61bb      	str	r3, [r7, #24]
 80095bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095be:	6979      	ldr	r1, [r7, #20]
 80095c0:	69ba      	ldr	r2, [r7, #24]
 80095c2:	e841 2300 	strex	r3, r2, [r1]
 80095c6:	613b      	str	r3, [r7, #16]
   return(result);
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1e6      	bne.n	800959c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80095ce:	e013      	b.n	80095f8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095d4:	781a      	ldrb	r2, [r3, #0]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095e0:	1c5a      	adds	r2, r3, #1
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	3b01      	subs	r3, #1
 80095f0:	b29a      	uxth	r2, r3
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80095f8:	bf00      	nop
 80095fa:	373c      	adds	r7, #60	; 0x3c
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009604:	b480      	push	{r7}
 8009606:	b091      	sub	sp, #68	; 0x44
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009612:	2b21      	cmp	r3, #33	; 0x21
 8009614:	d151      	bne.n	80096ba <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800961c:	b29b      	uxth	r3, r3
 800961e:	2b00      	cmp	r3, #0
 8009620:	d132      	bne.n	8009688 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962a:	e853 3f00 	ldrex	r3, [r3]
 800962e:	623b      	str	r3, [r7, #32]
   return(result);
 8009630:	6a3b      	ldr	r3, [r7, #32]
 8009632:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009636:	63bb      	str	r3, [r7, #56]	; 0x38
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	461a      	mov	r2, r3
 800963e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009640:	633b      	str	r3, [r7, #48]	; 0x30
 8009642:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009644:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009646:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009648:	e841 2300 	strex	r3, r2, [r1]
 800964c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800964e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009650:	2b00      	cmp	r3, #0
 8009652:	d1e6      	bne.n	8009622 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	e853 3f00 	ldrex	r3, [r3]
 8009660:	60fb      	str	r3, [r7, #12]
   return(result);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009668:	637b      	str	r3, [r7, #52]	; 0x34
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	461a      	mov	r2, r3
 8009670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009672:	61fb      	str	r3, [r7, #28]
 8009674:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009676:	69b9      	ldr	r1, [r7, #24]
 8009678:	69fa      	ldr	r2, [r7, #28]
 800967a:	e841 2300 	strex	r3, r2, [r1]
 800967e:	617b      	str	r3, [r7, #20]
   return(result);
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d1e6      	bne.n	8009654 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009686:	e018      	b.n	80096ba <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800968c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800968e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009690:	881b      	ldrh	r3, [r3, #0]
 8009692:	461a      	mov	r2, r3
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800969c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096a2:	1c9a      	adds	r2, r3, #2
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	3b01      	subs	r3, #1
 80096b2:	b29a      	uxth	r2, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80096ba:	bf00      	nop
 80096bc:	3744      	adds	r7, #68	; 0x44
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr

080096c6 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80096c6:	b480      	push	{r7}
 80096c8:	b091      	sub	sp, #68	; 0x44
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096d4:	2b21      	cmp	r3, #33	; 0x21
 80096d6:	d160      	bne.n	800979a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80096de:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80096e0:	e057      	b.n	8009792 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d133      	bne.n	8009756 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	3308      	adds	r3, #8
 80096f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f8:	e853 3f00 	ldrex	r3, [r3]
 80096fc:	623b      	str	r3, [r7, #32]
   return(result);
 80096fe:	6a3b      	ldr	r3, [r7, #32]
 8009700:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009704:	63bb      	str	r3, [r7, #56]	; 0x38
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	3308      	adds	r3, #8
 800970c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800970e:	633a      	str	r2, [r7, #48]	; 0x30
 8009710:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009712:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009716:	e841 2300 	strex	r3, r2, [r1]
 800971a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800971c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800971e:	2b00      	cmp	r3, #0
 8009720:	d1e5      	bne.n	80096ee <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	e853 3f00 	ldrex	r3, [r3]
 800972e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009736:	637b      	str	r3, [r7, #52]	; 0x34
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	461a      	mov	r2, r3
 800973e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009740:	61fb      	str	r3, [r7, #28]
 8009742:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009744:	69b9      	ldr	r1, [r7, #24]
 8009746:	69fa      	ldr	r2, [r7, #28]
 8009748:	e841 2300 	strex	r3, r2, [r1]
 800974c:	617b      	str	r3, [r7, #20]
   return(result);
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d1e6      	bne.n	8009722 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009754:	e021      	b.n	800979a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	69db      	ldr	r3, [r3, #28]
 800975c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009760:	2b00      	cmp	r3, #0
 8009762:	d013      	beq.n	800978c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009768:	781a      	ldrb	r2, [r3, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009774:	1c5a      	adds	r2, r3, #1
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009780:	b29b      	uxth	r3, r3
 8009782:	3b01      	subs	r3, #1
 8009784:	b29a      	uxth	r2, r3
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800978c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800978e:	3b01      	subs	r3, #1
 8009790:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009792:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009794:	2b00      	cmp	r3, #0
 8009796:	d1a4      	bne.n	80096e2 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009798:	e7ff      	b.n	800979a <UART_TxISR_8BIT_FIFOEN+0xd4>
 800979a:	bf00      	nop
 800979c:	3744      	adds	r7, #68	; 0x44
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr

080097a6 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80097a6:	b480      	push	{r7}
 80097a8:	b091      	sub	sp, #68	; 0x44
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097b4:	2b21      	cmp	r3, #33	; 0x21
 80097b6:	d165      	bne.n	8009884 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80097be:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80097c0:	e05c      	b.n	800987c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d133      	bne.n	8009836 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	3308      	adds	r3, #8
 80097d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d6:	6a3b      	ldr	r3, [r7, #32]
 80097d8:	e853 3f00 	ldrex	r3, [r3]
 80097dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80097de:	69fb      	ldr	r3, [r7, #28]
 80097e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80097e4:	637b      	str	r3, [r7, #52]	; 0x34
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	3308      	adds	r3, #8
 80097ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80097f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097f6:	e841 2300 	strex	r3, r2, [r1]
 80097fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d1e5      	bne.n	80097ce <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	e853 3f00 	ldrex	r3, [r3]
 800980e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009816:	633b      	str	r3, [r7, #48]	; 0x30
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	461a      	mov	r2, r3
 800981e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009820:	61bb      	str	r3, [r7, #24]
 8009822:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009824:	6979      	ldr	r1, [r7, #20]
 8009826:	69ba      	ldr	r2, [r7, #24]
 8009828:	e841 2300 	strex	r3, r2, [r1]
 800982c:	613b      	str	r3, [r7, #16]
   return(result);
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d1e6      	bne.n	8009802 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009834:	e026      	b.n	8009884 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	69db      	ldr	r3, [r3, #28]
 800983c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009840:	2b00      	cmp	r3, #0
 8009842:	d018      	beq.n	8009876 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009848:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800984a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800984c:	881b      	ldrh	r3, [r3, #0]
 800984e:	461a      	mov	r2, r3
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009858:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800985e:	1c9a      	adds	r2, r3, #2
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800986a:	b29b      	uxth	r3, r3
 800986c:	3b01      	subs	r3, #1
 800986e:	b29a      	uxth	r2, r3
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009876:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009878:	3b01      	subs	r3, #1
 800987a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800987c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800987e:	2b00      	cmp	r3, #0
 8009880:	d19f      	bne.n	80097c2 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009882:	e7ff      	b.n	8009884 <UART_TxISR_16BIT_FIFOEN+0xde>
 8009884:	bf00      	nop
 8009886:	3744      	adds	r7, #68	; 0x44
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b088      	sub	sp, #32
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	e853 3f00 	ldrex	r3, [r3]
 80098a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098ac:	61fb      	str	r3, [r7, #28]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	461a      	mov	r2, r3
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	61bb      	str	r3, [r7, #24]
 80098b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ba:	6979      	ldr	r1, [r7, #20]
 80098bc:	69ba      	ldr	r2, [r7, #24]
 80098be:	e841 2300 	strex	r3, r2, [r1]
 80098c2:	613b      	str	r3, [r7, #16]
   return(result);
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d1e6      	bne.n	8009898 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2220      	movs	r2, #32
 80098ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2200      	movs	r2, #0
 80098d6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f7fe fd5d 	bl	8008398 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098de:	bf00      	nop
 80098e0:	3720      	adds	r7, #32
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
	...

080098e8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b09c      	sub	sp, #112	; 0x70
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80098f6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009900:	2b22      	cmp	r3, #34	; 0x22
 8009902:	f040 80be 	bne.w	8009a82 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009910:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009914:	b2d9      	uxtb	r1, r3
 8009916:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800991a:	b2da      	uxtb	r2, r3
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009920:	400a      	ands	r2, r1
 8009922:	b2d2      	uxtb	r2, r2
 8009924:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800992a:	1c5a      	adds	r2, r3, #1
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009936:	b29b      	uxth	r3, r3
 8009938:	3b01      	subs	r3, #1
 800993a:	b29a      	uxth	r2, r3
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009948:	b29b      	uxth	r3, r3
 800994a:	2b00      	cmp	r3, #0
 800994c:	f040 80a1 	bne.w	8009a92 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009958:	e853 3f00 	ldrex	r3, [r3]
 800995c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800995e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009960:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009964:	66bb      	str	r3, [r7, #104]	; 0x68
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	461a      	mov	r2, r3
 800996c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800996e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009970:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009972:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009974:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009976:	e841 2300 	strex	r3, r2, [r1]
 800997a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800997c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800997e:	2b00      	cmp	r3, #0
 8009980:	d1e6      	bne.n	8009950 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	3308      	adds	r3, #8
 8009988:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800998a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800998c:	e853 3f00 	ldrex	r3, [r3]
 8009990:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009994:	f023 0301 	bic.w	r3, r3, #1
 8009998:	667b      	str	r3, [r7, #100]	; 0x64
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	3308      	adds	r3, #8
 80099a0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80099a2:	647a      	str	r2, [r7, #68]	; 0x44
 80099a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80099a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80099aa:	e841 2300 	strex	r3, r2, [r1]
 80099ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80099b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d1e5      	bne.n	8009982 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2220      	movs	r2, #32
 80099ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a33      	ldr	r2, [pc, #204]	; (8009a9c <UART_RxISR_8BIT+0x1b4>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d01f      	beq.n	8009a14 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d018      	beq.n	8009a14 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ea:	e853 3f00 	ldrex	r3, [r3]
 80099ee:	623b      	str	r3, [r7, #32]
   return(result);
 80099f0:	6a3b      	ldr	r3, [r7, #32]
 80099f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80099f6:	663b      	str	r3, [r7, #96]	; 0x60
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	461a      	mov	r2, r3
 80099fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a00:	633b      	str	r3, [r7, #48]	; 0x30
 8009a02:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a08:	e841 2300 	strex	r3, r2, [r1]
 8009a0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d1e6      	bne.n	80099e2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d12e      	bne.n	8009a7a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	e853 3f00 	ldrex	r3, [r3]
 8009a2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f023 0310 	bic.w	r3, r3, #16
 8009a36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a40:	61fb      	str	r3, [r7, #28]
 8009a42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a44:	69b9      	ldr	r1, [r7, #24]
 8009a46:	69fa      	ldr	r2, [r7, #28]
 8009a48:	e841 2300 	strex	r3, r2, [r1]
 8009a4c:	617b      	str	r3, [r7, #20]
   return(result);
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d1e6      	bne.n	8009a22 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	69db      	ldr	r3, [r3, #28]
 8009a5a:	f003 0310 	and.w	r3, r3, #16
 8009a5e:	2b10      	cmp	r3, #16
 8009a60:	d103      	bne.n	8009a6a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2210      	movs	r2, #16
 8009a68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a70:	4619      	mov	r1, r3
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f7fe fca4 	bl	80083c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a78:	e00b      	b.n	8009a92 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f001 ff8e 	bl	800b99c <HAL_UART_RxCpltCallback>
}
 8009a80:	e007      	b.n	8009a92 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	699a      	ldr	r2, [r3, #24]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f042 0208 	orr.w	r2, r2, #8
 8009a90:	619a      	str	r2, [r3, #24]
}
 8009a92:	bf00      	nop
 8009a94:	3770      	adds	r7, #112	; 0x70
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	58000c00 	.word	0x58000c00

08009aa0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b09c      	sub	sp, #112	; 0x70
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009aae:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ab8:	2b22      	cmp	r3, #34	; 0x22
 8009aba:	f040 80be 	bne.w	8009c3a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009acc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009ace:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8009ad2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009ad6:	4013      	ands	r3, r2
 8009ad8:	b29a      	uxth	r2, r3
 8009ada:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009adc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ae2:	1c9a      	adds	r2, r3, #2
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	3b01      	subs	r3, #1
 8009af2:	b29a      	uxth	r2, r3
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f040 80a1 	bne.w	8009c4a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b10:	e853 3f00 	ldrex	r3, [r3]
 8009b14:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009b16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b1c:	667b      	str	r3, [r7, #100]	; 0x64
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	461a      	mov	r2, r3
 8009b24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b26:	657b      	str	r3, [r7, #84]	; 0x54
 8009b28:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009b2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009b2e:	e841 2300 	strex	r3, r2, [r1]
 8009b32:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d1e6      	bne.n	8009b08 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	3308      	adds	r3, #8
 8009b40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b44:	e853 3f00 	ldrex	r3, [r3]
 8009b48:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b4c:	f023 0301 	bic.w	r3, r3, #1
 8009b50:	663b      	str	r3, [r7, #96]	; 0x60
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	3308      	adds	r3, #8
 8009b58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009b5a:	643a      	str	r2, [r7, #64]	; 0x40
 8009b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b62:	e841 2300 	strex	r3, r2, [r1]
 8009b66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d1e5      	bne.n	8009b3a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2220      	movs	r2, #32
 8009b72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a33      	ldr	r2, [pc, #204]	; (8009c54 <UART_RxISR_16BIT+0x1b4>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d01f      	beq.n	8009bcc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d018      	beq.n	8009bcc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba0:	6a3b      	ldr	r3, [r7, #32]
 8009ba2:	e853 3f00 	ldrex	r3, [r3]
 8009ba6:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ba8:	69fb      	ldr	r3, [r7, #28]
 8009baa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009bae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bba:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009bbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009bc0:	e841 2300 	strex	r3, r2, [r1]
 8009bc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d1e6      	bne.n	8009b9a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	d12e      	bne.n	8009c32 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	e853 3f00 	ldrex	r3, [r3]
 8009be6:	60bb      	str	r3, [r7, #8]
   return(result);
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	f023 0310 	bic.w	r3, r3, #16
 8009bee:	65bb      	str	r3, [r7, #88]	; 0x58
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009bf8:	61bb      	str	r3, [r7, #24]
 8009bfa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bfc:	6979      	ldr	r1, [r7, #20]
 8009bfe:	69ba      	ldr	r2, [r7, #24]
 8009c00:	e841 2300 	strex	r3, r2, [r1]
 8009c04:	613b      	str	r3, [r7, #16]
   return(result);
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d1e6      	bne.n	8009bda <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	69db      	ldr	r3, [r3, #28]
 8009c12:	f003 0310 	and.w	r3, r3, #16
 8009c16:	2b10      	cmp	r3, #16
 8009c18:	d103      	bne.n	8009c22 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	2210      	movs	r2, #16
 8009c20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009c28:	4619      	mov	r1, r3
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f7fe fbc8 	bl	80083c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009c30:	e00b      	b.n	8009c4a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f001 feb2 	bl	800b99c <HAL_UART_RxCpltCallback>
}
 8009c38:	e007      	b.n	8009c4a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	699a      	ldr	r2, [r3, #24]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f042 0208 	orr.w	r2, r2, #8
 8009c48:	619a      	str	r2, [r3, #24]
}
 8009c4a:	bf00      	nop
 8009c4c:	3770      	adds	r7, #112	; 0x70
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	58000c00 	.word	0x58000c00

08009c58 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b0ac      	sub	sp, #176	; 0xb0
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009c66:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	69db      	ldr	r3, [r3, #28]
 8009c70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c8e:	2b22      	cmp	r3, #34	; 0x22
 8009c90:	f040 8180 	bne.w	8009f94 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009c9a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c9e:	e123      	b.n	8009ee8 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009caa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8009cae:	b2d9      	uxtb	r1, r3
 8009cb0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009cb4:	b2da      	uxtb	r2, r3
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cba:	400a      	ands	r2, r1
 8009cbc:	b2d2      	uxtb	r2, r2
 8009cbe:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cc4:	1c5a      	adds	r2, r3, #1
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	3b01      	subs	r3, #1
 8009cd4:	b29a      	uxth	r2, r3
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	69db      	ldr	r3, [r3, #28]
 8009ce2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009ce6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009cea:	f003 0307 	and.w	r3, r3, #7
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d053      	beq.n	8009d9a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009cf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009cf6:	f003 0301 	and.w	r3, r3, #1
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d011      	beq.n	8009d22 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009cfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d00b      	beq.n	8009d22 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d18:	f043 0201 	orr.w	r2, r3, #1
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d26:	f003 0302 	and.w	r3, r3, #2
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d011      	beq.n	8009d52 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009d2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d32:	f003 0301 	and.w	r3, r3, #1
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00b      	beq.n	8009d52 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2202      	movs	r2, #2
 8009d40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d48:	f043 0204 	orr.w	r2, r3, #4
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d56:	f003 0304 	and.w	r3, r3, #4
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d011      	beq.n	8009d82 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009d5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d62:	f003 0301 	and.w	r3, r3, #1
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d00b      	beq.n	8009d82 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	2204      	movs	r2, #4
 8009d70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d78:	f043 0202 	orr.w	r2, r3, #2
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d006      	beq.n	8009d9a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f7fe fb0d 	bl	80083ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f040 80a0 	bne.w	8009ee8 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009db0:	e853 3f00 	ldrex	r3, [r3]
 8009db4:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8009db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009dbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009dca:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009dcc:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dce:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009dd0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009dd2:	e841 2300 	strex	r3, r2, [r1]
 8009dd6:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8009dd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d1e4      	bne.n	8009da8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	3308      	adds	r3, #8
 8009de4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009de8:	e853 3f00 	ldrex	r3, [r3]
 8009dec:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009dee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009df0:	4b6e      	ldr	r3, [pc, #440]	; (8009fac <UART_RxISR_8BIT_FIFOEN+0x354>)
 8009df2:	4013      	ands	r3, r2
 8009df4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	3308      	adds	r3, #8
 8009dfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009e02:	66ba      	str	r2, [r7, #104]	; 0x68
 8009e04:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e06:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009e08:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009e0a:	e841 2300 	strex	r3, r2, [r1]
 8009e0e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009e10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d1e3      	bne.n	8009dde <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2220      	movs	r2, #32
 8009e1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2200      	movs	r2, #0
 8009e22:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2200      	movs	r2, #0
 8009e28:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4a60      	ldr	r2, [pc, #384]	; (8009fb0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d021      	beq.n	8009e78 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d01a      	beq.n	8009e78 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e4a:	e853 3f00 	ldrex	r3, [r3]
 8009e4e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009e50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009e56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	461a      	mov	r2, r3
 8009e60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e64:	657b      	str	r3, [r7, #84]	; 0x54
 8009e66:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e68:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009e6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009e6c:	e841 2300 	strex	r3, r2, [r1]
 8009e70:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d1e4      	bne.n	8009e42 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d130      	bne.n	8009ee2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2200      	movs	r2, #0
 8009e84:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e8e:	e853 3f00 	ldrex	r3, [r3]
 8009e92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e96:	f023 0310 	bic.w	r3, r3, #16
 8009e9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ea8:	643b      	str	r3, [r7, #64]	; 0x40
 8009eaa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009eae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009eb0:	e841 2300 	strex	r3, r2, [r1]
 8009eb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d1e4      	bne.n	8009e86 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	69db      	ldr	r3, [r3, #28]
 8009ec2:	f003 0310 	and.w	r3, r3, #16
 8009ec6:	2b10      	cmp	r3, #16
 8009ec8:	d103      	bne.n	8009ed2 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	2210      	movs	r2, #16
 8009ed0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009ed8:	4619      	mov	r1, r3
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f7fe fa70 	bl	80083c0 <HAL_UARTEx_RxEventCallback>
 8009ee0:	e002      	b.n	8009ee8 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f001 fd5a 	bl	800b99c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009ee8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d006      	beq.n	8009efe <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8009ef0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ef4:	f003 0320 	and.w	r3, r3, #32
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	f47f aed1 	bne.w	8009ca0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f04:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009f08:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d049      	beq.n	8009fa4 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009f16:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d242      	bcs.n	8009fa4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	3308      	adds	r3, #8
 8009f24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f26:	6a3b      	ldr	r3, [r7, #32]
 8009f28:	e853 3f00 	ldrex	r3, [r3]
 8009f2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f2e:	69fb      	ldr	r3, [r7, #28]
 8009f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	3308      	adds	r3, #8
 8009f3e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009f42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009f44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f4a:	e841 2300 	strex	r3, r2, [r1]
 8009f4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d1e3      	bne.n	8009f1e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	4a16      	ldr	r2, [pc, #88]	; (8009fb4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009f5a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	e853 3f00 	ldrex	r3, [r3]
 8009f68:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	f043 0320 	orr.w	r3, r3, #32
 8009f70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	461a      	mov	r2, r3
 8009f7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009f7e:	61bb      	str	r3, [r7, #24]
 8009f80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f82:	6979      	ldr	r1, [r7, #20]
 8009f84:	69ba      	ldr	r2, [r7, #24]
 8009f86:	e841 2300 	strex	r3, r2, [r1]
 8009f8a:	613b      	str	r3, [r7, #16]
   return(result);
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d1e4      	bne.n	8009f5c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009f92:	e007      	b.n	8009fa4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	699a      	ldr	r2, [r3, #24]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f042 0208 	orr.w	r2, r2, #8
 8009fa2:	619a      	str	r2, [r3, #24]
}
 8009fa4:	bf00      	nop
 8009fa6:	37b0      	adds	r7, #176	; 0xb0
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	effffffe 	.word	0xeffffffe
 8009fb0:	58000c00 	.word	0x58000c00
 8009fb4:	080098e9 	.word	0x080098e9

08009fb8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b0ae      	sub	sp, #184	; 0xb8
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009fc6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	69db      	ldr	r3, [r3, #28]
 8009fd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fee:	2b22      	cmp	r3, #34	; 0x22
 8009ff0:	f040 8184 	bne.w	800a2fc <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009ffa:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009ffe:	e127      	b.n	800a250 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a006:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a00e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800a012:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800a016:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800a01a:	4013      	ands	r3, r2
 800a01c:	b29a      	uxth	r2, r3
 800a01e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a022:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a028:	1c9a      	adds	r2, r3, #2
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a034:	b29b      	uxth	r3, r3
 800a036:	3b01      	subs	r3, #1
 800a038:	b29a      	uxth	r2, r3
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	69db      	ldr	r3, [r3, #28]
 800a046:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a04a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a04e:	f003 0307 	and.w	r3, r3, #7
 800a052:	2b00      	cmp	r3, #0
 800a054:	d053      	beq.n	800a0fe <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a056:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a05a:	f003 0301 	and.w	r3, r3, #1
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d011      	beq.n	800a086 <UART_RxISR_16BIT_FIFOEN+0xce>
 800a062:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d00b      	beq.n	800a086 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	2201      	movs	r2, #1
 800a074:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a07c:	f043 0201 	orr.w	r2, r3, #1
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a086:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a08a:	f003 0302 	and.w	r3, r3, #2
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d011      	beq.n	800a0b6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a092:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a096:	f003 0301 	and.w	r3, r3, #1
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00b      	beq.n	800a0b6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	2202      	movs	r2, #2
 800a0a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0ac:	f043 0204 	orr.w	r2, r3, #4
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a0b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a0ba:	f003 0304 	and.w	r3, r3, #4
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d011      	beq.n	800a0e6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a0c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a0c6:	f003 0301 	and.w	r3, r3, #1
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d00b      	beq.n	800a0e6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	2204      	movs	r2, #4
 800a0d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0dc:	f043 0202 	orr.w	r2, r3, #2
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d006      	beq.n	800a0fe <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f7fe f95b 	bl	80083ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a104:	b29b      	uxth	r3, r3
 800a106:	2b00      	cmp	r3, #0
 800a108:	f040 80a2 	bne.w	800a250 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a112:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a114:	e853 3f00 	ldrex	r3, [r3]
 800a118:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a11a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a11c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a120:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	461a      	mov	r2, r3
 800a12a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a12e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a132:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a134:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a136:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a13a:	e841 2300 	strex	r3, r2, [r1]
 800a13e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a140:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a142:	2b00      	cmp	r3, #0
 800a144:	d1e2      	bne.n	800a10c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	3308      	adds	r3, #8
 800a14c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a14e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a150:	e853 3f00 	ldrex	r3, [r3]
 800a154:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a156:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a158:	4b6e      	ldr	r3, [pc, #440]	; (800a314 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800a15a:	4013      	ands	r3, r2
 800a15c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	3308      	adds	r3, #8
 800a166:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a16a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a16c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a16e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a170:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a172:	e841 2300 	strex	r3, r2, [r1]
 800a176:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a178:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d1e3      	bne.n	800a146 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2220      	movs	r2, #32
 800a182:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2200      	movs	r2, #0
 800a18a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2200      	movs	r2, #0
 800a190:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a60      	ldr	r2, [pc, #384]	; (800a318 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d021      	beq.n	800a1e0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d01a      	beq.n	800a1e0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1b2:	e853 3f00 	ldrex	r3, [r3]
 800a1b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a1b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a1be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a1cc:	65bb      	str	r3, [r7, #88]	; 0x58
 800a1ce:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a1d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a1d4:	e841 2300 	strex	r3, r2, [r1]
 800a1d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a1da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d1e4      	bne.n	800a1aa <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d130      	bne.n	800a24a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f6:	e853 3f00 	ldrex	r3, [r3]
 800a1fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a1fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1fe:	f023 0310 	bic.w	r3, r3, #16
 800a202:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	461a      	mov	r2, r3
 800a20c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a210:	647b      	str	r3, [r7, #68]	; 0x44
 800a212:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a214:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a216:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a218:	e841 2300 	strex	r3, r2, [r1]
 800a21c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a21e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a220:	2b00      	cmp	r3, #0
 800a222:	d1e4      	bne.n	800a1ee <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	69db      	ldr	r3, [r3, #28]
 800a22a:	f003 0310 	and.w	r3, r3, #16
 800a22e:	2b10      	cmp	r3, #16
 800a230:	d103      	bne.n	800a23a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	2210      	movs	r2, #16
 800a238:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a240:	4619      	mov	r1, r3
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f7fe f8bc 	bl	80083c0 <HAL_UARTEx_RxEventCallback>
 800a248:	e002      	b.n	800a250 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f001 fba6 	bl	800b99c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a250:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800a254:	2b00      	cmp	r3, #0
 800a256:	d006      	beq.n	800a266 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800a258:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a25c:	f003 0320 	and.w	r3, r3, #32
 800a260:	2b00      	cmp	r3, #0
 800a262:	f47f aecd 	bne.w	800a000 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a26c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a270:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a274:	2b00      	cmp	r3, #0
 800a276:	d049      	beq.n	800a30c <UART_RxISR_16BIT_FIFOEN+0x354>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a27e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800a282:	429a      	cmp	r2, r3
 800a284:	d242      	bcs.n	800a30c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	3308      	adds	r3, #8
 800a28c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a290:	e853 3f00 	ldrex	r3, [r3]
 800a294:	623b      	str	r3, [r7, #32]
   return(result);
 800a296:	6a3b      	ldr	r3, [r7, #32]
 800a298:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a29c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	3308      	adds	r3, #8
 800a2a6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a2aa:	633a      	str	r2, [r7, #48]	; 0x30
 800a2ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a2b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2b2:	e841 2300 	strex	r3, r2, [r1]
 800a2b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d1e3      	bne.n	800a286 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	4a16      	ldr	r2, [pc, #88]	; (800a31c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800a2c2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	e853 3f00 	ldrex	r3, [r3]
 800a2d0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f043 0320 	orr.w	r3, r3, #32
 800a2d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a2e6:	61fb      	str	r3, [r7, #28]
 800a2e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ea:	69b9      	ldr	r1, [r7, #24]
 800a2ec:	69fa      	ldr	r2, [r7, #28]
 800a2ee:	e841 2300 	strex	r3, r2, [r1]
 800a2f2:	617b      	str	r3, [r7, #20]
   return(result);
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d1e4      	bne.n	800a2c4 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a2fa:	e007      	b.n	800a30c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	699a      	ldr	r2, [r3, #24]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f042 0208 	orr.w	r2, r2, #8
 800a30a:	619a      	str	r2, [r3, #24]
}
 800a30c:	bf00      	nop
 800a30e:	37b8      	adds	r7, #184	; 0xb8
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}
 800a314:	effffffe 	.word	0xeffffffe
 800a318:	58000c00 	.word	0x58000c00
 800a31c:	08009aa1 	.word	0x08009aa1

0800a320 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a320:	b480      	push	{r7}
 800a322:	b083      	sub	sp, #12
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a328:	bf00      	nop
 800a32a:	370c      	adds	r7, #12
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a33c:	bf00      	nop
 800a33e:	370c      	adds	r7, #12
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a350:	bf00      	nop
 800a352:	370c      	adds	r7, #12
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b085      	sub	sp, #20
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a36a:	2b01      	cmp	r3, #1
 800a36c:	d101      	bne.n	800a372 <HAL_UARTEx_DisableFifoMode+0x16>
 800a36e:	2302      	movs	r3, #2
 800a370:	e027      	b.n	800a3c2 <HAL_UARTEx_DisableFifoMode+0x66>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2201      	movs	r2, #1
 800a376:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2224      	movs	r2, #36	; 0x24
 800a37e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f022 0201 	bic.w	r2, r2, #1
 800a398:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a3a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	68fa      	ldr	r2, [r7, #12]
 800a3ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2220      	movs	r2, #32
 800a3b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a3c0:	2300      	movs	r3, #0
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3714      	adds	r7, #20
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr

0800a3ce <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a3ce:	b580      	push	{r7, lr}
 800a3d0:	b084      	sub	sp, #16
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
 800a3d6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a3de:	2b01      	cmp	r3, #1
 800a3e0:	d101      	bne.n	800a3e6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a3e2:	2302      	movs	r3, #2
 800a3e4:	e02d      	b.n	800a442 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2224      	movs	r2, #36	; 0x24
 800a3f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f022 0201 	bic.w	r2, r2, #1
 800a40c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	689b      	ldr	r3, [r3, #8]
 800a414:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	683a      	ldr	r2, [r7, #0]
 800a41e:	430a      	orrs	r2, r1
 800a420:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 f850 	bl	800a4c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	68fa      	ldr	r2, [r7, #12]
 800a42e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2220      	movs	r2, #32
 800a434:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2200      	movs	r2, #0
 800a43c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a440:	2300      	movs	r3, #0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3710      	adds	r7, #16
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b084      	sub	sp, #16
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
 800a452:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d101      	bne.n	800a462 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a45e:	2302      	movs	r3, #2
 800a460:	e02d      	b.n	800a4be <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2201      	movs	r2, #1
 800a466:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2224      	movs	r2, #36	; 0x24
 800a46e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	681a      	ldr	r2, [r3, #0]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f022 0201 	bic.w	r2, r2, #1
 800a488:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	689b      	ldr	r3, [r3, #8]
 800a490:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	683a      	ldr	r2, [r7, #0]
 800a49a:	430a      	orrs	r2, r1
 800a49c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 f812 	bl	800a4c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	68fa      	ldr	r2, [r7, #12]
 800a4aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2220      	movs	r2, #32
 800a4b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a4bc:	2300      	movs	r3, #0
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3710      	adds	r7, #16
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
	...

0800a4c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b085      	sub	sp, #20
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d108      	bne.n	800a4ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a4e8:	e031      	b.n	800a54e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a4ea:	2310      	movs	r3, #16
 800a4ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a4ee:	2310      	movs	r3, #16
 800a4f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	0e5b      	lsrs	r3, r3, #25
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	f003 0307 	and.w	r3, r3, #7
 800a500:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	689b      	ldr	r3, [r3, #8]
 800a508:	0f5b      	lsrs	r3, r3, #29
 800a50a:	b2db      	uxtb	r3, r3
 800a50c:	f003 0307 	and.w	r3, r3, #7
 800a510:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a512:	7bbb      	ldrb	r3, [r7, #14]
 800a514:	7b3a      	ldrb	r2, [r7, #12]
 800a516:	4911      	ldr	r1, [pc, #68]	; (800a55c <UARTEx_SetNbDataToProcess+0x94>)
 800a518:	5c8a      	ldrb	r2, [r1, r2]
 800a51a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a51e:	7b3a      	ldrb	r2, [r7, #12]
 800a520:	490f      	ldr	r1, [pc, #60]	; (800a560 <UARTEx_SetNbDataToProcess+0x98>)
 800a522:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a524:	fb93 f3f2 	sdiv	r3, r3, r2
 800a528:	b29a      	uxth	r2, r3
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a530:	7bfb      	ldrb	r3, [r7, #15]
 800a532:	7b7a      	ldrb	r2, [r7, #13]
 800a534:	4909      	ldr	r1, [pc, #36]	; (800a55c <UARTEx_SetNbDataToProcess+0x94>)
 800a536:	5c8a      	ldrb	r2, [r1, r2]
 800a538:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a53c:	7b7a      	ldrb	r2, [r7, #13]
 800a53e:	4908      	ldr	r1, [pc, #32]	; (800a560 <UARTEx_SetNbDataToProcess+0x98>)
 800a540:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a542:	fb93 f3f2 	sdiv	r3, r3, r2
 800a546:	b29a      	uxth	r2, r3
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a54e:	bf00      	nop
 800a550:	3714      	adds	r7, #20
 800a552:	46bd      	mov	sp, r7
 800a554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a558:	4770      	bx	lr
 800a55a:	bf00      	nop
 800a55c:	0800ffc8 	.word	0x0800ffc8
 800a560:	0800ffd0 	.word	0x0800ffd0

0800a564 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a564:	b480      	push	{r7}
 800a566:	b083      	sub	sp, #12
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d121      	bne.n	800a5ba <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	4b27      	ldr	r3, [pc, #156]	; (800a618 <FMC_SDRAM_Init+0xb4>)
 800a57c:	4013      	ands	r3, r2
 800a57e:	683a      	ldr	r2, [r7, #0]
 800a580:	6851      	ldr	r1, [r2, #4]
 800a582:	683a      	ldr	r2, [r7, #0]
 800a584:	6892      	ldr	r2, [r2, #8]
 800a586:	4311      	orrs	r1, r2
 800a588:	683a      	ldr	r2, [r7, #0]
 800a58a:	68d2      	ldr	r2, [r2, #12]
 800a58c:	4311      	orrs	r1, r2
 800a58e:	683a      	ldr	r2, [r7, #0]
 800a590:	6912      	ldr	r2, [r2, #16]
 800a592:	4311      	orrs	r1, r2
 800a594:	683a      	ldr	r2, [r7, #0]
 800a596:	6952      	ldr	r2, [r2, #20]
 800a598:	4311      	orrs	r1, r2
 800a59a:	683a      	ldr	r2, [r7, #0]
 800a59c:	6992      	ldr	r2, [r2, #24]
 800a59e:	4311      	orrs	r1, r2
 800a5a0:	683a      	ldr	r2, [r7, #0]
 800a5a2:	69d2      	ldr	r2, [r2, #28]
 800a5a4:	4311      	orrs	r1, r2
 800a5a6:	683a      	ldr	r2, [r7, #0]
 800a5a8:	6a12      	ldr	r2, [r2, #32]
 800a5aa:	4311      	orrs	r1, r2
 800a5ac:	683a      	ldr	r2, [r7, #0]
 800a5ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a5b0:	430a      	orrs	r2, r1
 800a5b2:	431a      	orrs	r2, r3
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	601a      	str	r2, [r3, #0]
 800a5b8:	e026      	b.n	800a608 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	69d9      	ldr	r1, [r3, #28]
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	6a1b      	ldr	r3, [r3, #32]
 800a5ca:	4319      	orrs	r1, r3
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d0:	430b      	orrs	r3, r1
 800a5d2:	431a      	orrs	r2, r3
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	685a      	ldr	r2, [r3, #4]
 800a5dc:	4b0e      	ldr	r3, [pc, #56]	; (800a618 <FMC_SDRAM_Init+0xb4>)
 800a5de:	4013      	ands	r3, r2
 800a5e0:	683a      	ldr	r2, [r7, #0]
 800a5e2:	6851      	ldr	r1, [r2, #4]
 800a5e4:	683a      	ldr	r2, [r7, #0]
 800a5e6:	6892      	ldr	r2, [r2, #8]
 800a5e8:	4311      	orrs	r1, r2
 800a5ea:	683a      	ldr	r2, [r7, #0]
 800a5ec:	68d2      	ldr	r2, [r2, #12]
 800a5ee:	4311      	orrs	r1, r2
 800a5f0:	683a      	ldr	r2, [r7, #0]
 800a5f2:	6912      	ldr	r2, [r2, #16]
 800a5f4:	4311      	orrs	r1, r2
 800a5f6:	683a      	ldr	r2, [r7, #0]
 800a5f8:	6952      	ldr	r2, [r2, #20]
 800a5fa:	4311      	orrs	r1, r2
 800a5fc:	683a      	ldr	r2, [r7, #0]
 800a5fe:	6992      	ldr	r2, [r2, #24]
 800a600:	430a      	orrs	r2, r1
 800a602:	431a      	orrs	r2, r3
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	370c      	adds	r7, #12
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr
 800a616:	bf00      	nop
 800a618:	ffff8000 	.word	0xffff8000

0800a61c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b085      	sub	sp, #20
 800a620:	af00      	add	r7, sp, #0
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d128      	bne.n	800a680 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	689b      	ldr	r3, [r3, #8]
 800a632:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	1e59      	subs	r1, r3, #1
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	3b01      	subs	r3, #1
 800a642:	011b      	lsls	r3, r3, #4
 800a644:	4319      	orrs	r1, r3
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	689b      	ldr	r3, [r3, #8]
 800a64a:	3b01      	subs	r3, #1
 800a64c:	021b      	lsls	r3, r3, #8
 800a64e:	4319      	orrs	r1, r3
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	68db      	ldr	r3, [r3, #12]
 800a654:	3b01      	subs	r3, #1
 800a656:	031b      	lsls	r3, r3, #12
 800a658:	4319      	orrs	r1, r3
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	691b      	ldr	r3, [r3, #16]
 800a65e:	3b01      	subs	r3, #1
 800a660:	041b      	lsls	r3, r3, #16
 800a662:	4319      	orrs	r1, r3
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	695b      	ldr	r3, [r3, #20]
 800a668:	3b01      	subs	r3, #1
 800a66a:	051b      	lsls	r3, r3, #20
 800a66c:	4319      	orrs	r1, r3
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	699b      	ldr	r3, [r3, #24]
 800a672:	3b01      	subs	r3, #1
 800a674:	061b      	lsls	r3, r3, #24
 800a676:	430b      	orrs	r3, r1
 800a678:	431a      	orrs	r2, r3
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	609a      	str	r2, [r3, #8]
 800a67e:	e02d      	b.n	800a6dc <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	689a      	ldr	r2, [r3, #8]
 800a684:	4b19      	ldr	r3, [pc, #100]	; (800a6ec <FMC_SDRAM_Timing_Init+0xd0>)
 800a686:	4013      	ands	r3, r2
 800a688:	68ba      	ldr	r2, [r7, #8]
 800a68a:	68d2      	ldr	r2, [r2, #12]
 800a68c:	3a01      	subs	r2, #1
 800a68e:	0311      	lsls	r1, r2, #12
 800a690:	68ba      	ldr	r2, [r7, #8]
 800a692:	6952      	ldr	r2, [r2, #20]
 800a694:	3a01      	subs	r2, #1
 800a696:	0512      	lsls	r2, r2, #20
 800a698:	430a      	orrs	r2, r1
 800a69a:	431a      	orrs	r2, r3
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	1e59      	subs	r1, r3, #1
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	3b01      	subs	r3, #1
 800a6b4:	011b      	lsls	r3, r3, #4
 800a6b6:	4319      	orrs	r1, r3
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	3b01      	subs	r3, #1
 800a6be:	021b      	lsls	r3, r3, #8
 800a6c0:	4319      	orrs	r1, r3
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	691b      	ldr	r3, [r3, #16]
 800a6c6:	3b01      	subs	r3, #1
 800a6c8:	041b      	lsls	r3, r3, #16
 800a6ca:	4319      	orrs	r1, r3
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	699b      	ldr	r3, [r3, #24]
 800a6d0:	3b01      	subs	r3, #1
 800a6d2:	061b      	lsls	r3, r3, #24
 800a6d4:	430b      	orrs	r3, r1
 800a6d6:	431a      	orrs	r2, r3
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800a6dc:	2300      	movs	r3, #0
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3714      	adds	r7, #20
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e8:	4770      	bx	lr
 800a6ea:	bf00      	nop
 800a6ec:	ff0f0fff 	.word	0xff0f0fff

0800a6f0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b085      	sub	sp, #20
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	691a      	ldr	r2, [r3, #16]
 800a700:	4b0c      	ldr	r3, [pc, #48]	; (800a734 <FMC_SDRAM_SendCommand+0x44>)
 800a702:	4013      	ands	r3, r2
 800a704:	68ba      	ldr	r2, [r7, #8]
 800a706:	6811      	ldr	r1, [r2, #0]
 800a708:	68ba      	ldr	r2, [r7, #8]
 800a70a:	6852      	ldr	r2, [r2, #4]
 800a70c:	4311      	orrs	r1, r2
 800a70e:	68ba      	ldr	r2, [r7, #8]
 800a710:	6892      	ldr	r2, [r2, #8]
 800a712:	3a01      	subs	r2, #1
 800a714:	0152      	lsls	r2, r2, #5
 800a716:	4311      	orrs	r1, r2
 800a718:	68ba      	ldr	r2, [r7, #8]
 800a71a:	68d2      	ldr	r2, [r2, #12]
 800a71c:	0252      	lsls	r2, r2, #9
 800a71e:	430a      	orrs	r2, r1
 800a720:	431a      	orrs	r2, r3
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800a726:	2300      	movs	r3, #0
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3714      	adds	r7, #20
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr
 800a734:	ffc00000 	.word	0xffc00000

0800a738 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	695a      	ldr	r2, [r3, #20]
 800a746:	4b07      	ldr	r3, [pc, #28]	; (800a764 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800a748:	4013      	ands	r3, r2
 800a74a:	683a      	ldr	r2, [r7, #0]
 800a74c:	0052      	lsls	r2, r2, #1
 800a74e:	431a      	orrs	r2, r3
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a754:	2300      	movs	r3, #0
}
 800a756:	4618      	mov	r0, r3
 800a758:	370c      	adds	r7, #12
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr
 800a762:	bf00      	nop
 800a764:	ffffc001 	.word	0xffffc001

0800a768 <dma2d_transfer_data_r2m>:



//DMA2D传输数据函数
static void dma2d_transfer_data_r2m(uint32_t *addr, uint32_t xSize, uint32_t ySize, uint32_t offsetLine, uint16_t color)
{
 800a768:	b480      	push	{r7}
 800a76a:	b085      	sub	sp, #20
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	60f8      	str	r0, [r7, #12]
 800a770:	60b9      	str	r1, [r7, #8]
 800a772:	607a      	str	r2, [r7, #4]
 800a774:	603b      	str	r3, [r7, #0]
    DMA2D->CR = DMA2D_R2M;   // dma2d mode: register to memory.
 800a776:	4b16      	ldr	r3, [pc, #88]	; (800a7d0 <dma2d_transfer_data_r2m+0x68>)
 800a778:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a77c:	601a      	str	r2, [r3, #0]
    DMA2D->OPFCCR = DMA2D_OUTPUT_RGB565;
 800a77e:	4b14      	ldr	r3, [pc, #80]	; (800a7d0 <dma2d_transfer_data_r2m+0x68>)
 800a780:	2202      	movs	r2, #2
 800a782:	635a      	str	r2, [r3, #52]	; 0x34

    DMA2D->OCOLR = color;
 800a784:	4a12      	ldr	r2, [pc, #72]	; (800a7d0 <dma2d_transfer_data_r2m+0x68>)
 800a786:	8b3b      	ldrh	r3, [r7, #24]
 800a788:	6393      	str	r3, [r2, #56]	; 0x38
    DMA2D->OMAR = (uint32_t)addr;
 800a78a:	4a11      	ldr	r2, [pc, #68]	; (800a7d0 <dma2d_transfer_data_r2m+0x68>)
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	63d3      	str	r3, [r2, #60]	; 0x3c
    DMA2D->OOR = offsetLine;
 800a790:	4a0f      	ldr	r2, [pc, #60]	; (800a7d0 <dma2d_transfer_data_r2m+0x68>)
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	6413      	str	r3, [r2, #64]	; 0x40
    DMA2D->NLR = (uint32_t)(xSize << 16) | (uint16_t)ySize;
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	041b      	lsls	r3, r3, #16
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	b292      	uxth	r2, r2
 800a79e:	4611      	mov	r1, r2
 800a7a0:	4a0b      	ldr	r2, [pc, #44]	; (800a7d0 <dma2d_transfer_data_r2m+0x68>)
 800a7a2:	430b      	orrs	r3, r1
 800a7a4:	6453      	str	r3, [r2, #68]	; 0x44

    DMA2D->CR |= DMA2D_CR_START;
 800a7a6:	4b0a      	ldr	r3, [pc, #40]	; (800a7d0 <dma2d_transfer_data_r2m+0x68>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a09      	ldr	r2, [pc, #36]	; (800a7d0 <dma2d_transfer_data_r2m+0x68>)
 800a7ac:	f043 0301 	orr.w	r3, r3, #1
 800a7b0:	6013      	str	r3, [r2, #0]
    while (DMA2D->CR & DMA2D_CR_START);
 800a7b2:	bf00      	nop
 800a7b4:	4b06      	ldr	r3, [pc, #24]	; (800a7d0 <dma2d_transfer_data_r2m+0x68>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f003 0301 	and.w	r3, r3, #1
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d1f9      	bne.n	800a7b4 <dma2d_transfer_data_r2m+0x4c>
}
 800a7c0:	bf00      	nop
 800a7c2:	bf00      	nop
 800a7c4:	3714      	adds	r7, #20
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr
 800a7ce:	bf00      	nop
 800a7d0:	52001000 	.word	0x52001000

0800a7d4 <TFTLCD_clear>:

//清屏函数
void TFTLCD_clear(uint16_t color)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af02      	add	r7, sp, #8
 800a7da:	4603      	mov	r3, r0
 800a7dc:	80fb      	strh	r3, [r7, #6]
#if USE_DMA2D_EN
    dma2d_transfer_data_r2m((uint32_t *)LCD_FRAME_BUFFER, LCD_WIDTH, LCD_HEIGHT, 0, color);
 800a7de:	88fb      	ldrh	r3, [r7, #6]
 800a7e0:	9300      	str	r3, [sp, #0]
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a7e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a7ec:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
 800a7f0:	f7ff ffba 	bl	800a768 <dma2d_transfer_data_r2m>

    while (i++ < LCD_WIDTH*LCD_HEIGHT) {
        *(ptr+i) = color;
    }
#endif /* USE_DMA2D_EN */
}
 800a7f4:	bf00      	nop
 800a7f6:	3708      	adds	r7, #8
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <lcd_draw_point>:
 * @brief	带颜色画点函数
 * @param   x,y	—— 画点坐标 ,color 颜色
 * @return  none
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint16_t color)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b086      	sub	sp, #24
 800a800:	af02      	add	r7, sp, #8
 800a802:	4603      	mov	r3, r0
 800a804:	80fb      	strh	r3, [r7, #6]
 800a806:	460b      	mov	r3, r1
 800a808:	80bb      	strh	r3, [r7, #4]
 800a80a:	4613      	mov	r3, r2
 800a80c:	807b      	strh	r3, [r7, #2]
    uint32_t pos;
    uint16_t *ptr;

    // check position.
    if (x > LCD_WIDTH || y > LCD_HEIGHT) {
 800a80e:	88fb      	ldrh	r3, [r7, #6]
 800a810:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a814:	d817      	bhi.n	800a846 <lcd_draw_point+0x4a>
 800a816:	88bb      	ldrh	r3, [r7, #4]
 800a818:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800a81c:	d813      	bhi.n	800a846 <lcd_draw_point+0x4a>
        return;
    }

    // calculate the position offset in framebuffer.
    pos = x + y*LCD_WIDTH;
 800a81e:	88fa      	ldrh	r2, [r7, #6]
 800a820:	88bb      	ldrh	r3, [r7, #4]
 800a822:	029b      	lsls	r3, r3, #10
 800a824:	4413      	add	r3, r2
 800a826:	60fb      	str	r3, [r7, #12]
    ptr = (uint16_t*)LCD_FRAME_BUFFER;
 800a828:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800a82c:	60bb      	str	r3, [r7, #8]

    // modify the framebuffer.
#if USE_DMA2D_EN
    dma2d_transfer_data_r2m((uint32_t *)(ptr+pos), 1, 1, 0, color);
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	005b      	lsls	r3, r3, #1
 800a832:	68ba      	ldr	r2, [r7, #8]
 800a834:	18d0      	adds	r0, r2, r3
 800a836:	887b      	ldrh	r3, [r7, #2]
 800a838:	9300      	str	r3, [sp, #0]
 800a83a:	2300      	movs	r3, #0
 800a83c:	2201      	movs	r2, #1
 800a83e:	2101      	movs	r1, #1
 800a840:	f7ff ff92 	bl	800a768 <dma2d_transfer_data_r2m>
 800a844:	e000      	b.n	800a848 <lcd_draw_point+0x4c>
        return;
 800a846:	bf00      	nop
#else
    *(ptr+pos) = color;
#endif /* USE_DMA2D_EN */
}
 800a848:	3710      	adds	r7, #16
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}

0800a84e <lcd_draw_circle>:
 * @brief
 * @param   x,y 圆心坐标 ,r 半径 ,color 颜色
 * @return  none
 */
void lcd_draw_circle(uint16_t x, uint16_t y, uint16_t r,uint16_t color)
{
 800a84e:	b590      	push	{r4, r7, lr}
 800a850:	b085      	sub	sp, #20
 800a852:	af00      	add	r7, sp, #0
 800a854:	4604      	mov	r4, r0
 800a856:	4608      	mov	r0, r1
 800a858:	4611      	mov	r1, r2
 800a85a:	461a      	mov	r2, r3
 800a85c:	4623      	mov	r3, r4
 800a85e:	80fb      	strh	r3, [r7, #6]
 800a860:	4603      	mov	r3, r0
 800a862:	80bb      	strh	r3, [r7, #4]
 800a864:	460b      	mov	r3, r1
 800a866:	807b      	strh	r3, [r7, #2]
 800a868:	4613      	mov	r3, r2
 800a86a:	803b      	strh	r3, [r7, #0]
	uint16_t xm = 0,ym = r;
 800a86c:	2300      	movs	r3, #0
 800a86e:	81fb      	strh	r3, [r7, #14]
 800a870:	887b      	ldrh	r3, [r7, #2]
 800a872:	81bb      	strh	r3, [r7, #12]
//	uint16_t i = 0;
	  //先画出圆在x、y轴上的四个点
	  lcd_draw_point(x,y+r,color);
 800a874:	88ba      	ldrh	r2, [r7, #4]
 800a876:	887b      	ldrh	r3, [r7, #2]
 800a878:	4413      	add	r3, r2
 800a87a:	b299      	uxth	r1, r3
 800a87c:	883a      	ldrh	r2, [r7, #0]
 800a87e:	88fb      	ldrh	r3, [r7, #6]
 800a880:	4618      	mov	r0, r3
 800a882:	f7ff ffbb 	bl	800a7fc <lcd_draw_point>
	  lcd_draw_point(x+r,y,color);
 800a886:	88fa      	ldrh	r2, [r7, #6]
 800a888:	887b      	ldrh	r3, [r7, #2]
 800a88a:	4413      	add	r3, r2
 800a88c:	b29b      	uxth	r3, r3
 800a88e:	883a      	ldrh	r2, [r7, #0]
 800a890:	88b9      	ldrh	r1, [r7, #4]
 800a892:	4618      	mov	r0, r3
 800a894:	f7ff ffb2 	bl	800a7fc <lcd_draw_point>
	  lcd_draw_point(x,y-r,color);
 800a898:	88ba      	ldrh	r2, [r7, #4]
 800a89a:	887b      	ldrh	r3, [r7, #2]
 800a89c:	1ad3      	subs	r3, r2, r3
 800a89e:	b299      	uxth	r1, r3
 800a8a0:	883a      	ldrh	r2, [r7, #0]
 800a8a2:	88fb      	ldrh	r3, [r7, #6]
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f7ff ffa9 	bl	800a7fc <lcd_draw_point>
	  lcd_draw_point(x-r,y,color);
 800a8aa:	88fa      	ldrh	r2, [r7, #6]
 800a8ac:	887b      	ldrh	r3, [r7, #2]
 800a8ae:	1ad3      	subs	r3, r2, r3
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	883a      	ldrh	r2, [r7, #0]
 800a8b4:	88b9      	ldrh	r1, [r7, #4]
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f7ff ffa0 	bl	800a7fc <lcd_draw_point>

	  while(xm<=ym)//判断是否画完
 800a8bc:	e075      	b.n	800a9aa <lcd_draw_circle+0x15c>
	  {
	    if((xm*xm+ym*ym)< (r*r))//在圆内
 800a8be:	89fb      	ldrh	r3, [r7, #14]
 800a8c0:	89fa      	ldrh	r2, [r7, #14]
 800a8c2:	fb03 f202 	mul.w	r2, r3, r2
 800a8c6:	89bb      	ldrh	r3, [r7, #12]
 800a8c8:	89b9      	ldrh	r1, [r7, #12]
 800a8ca:	fb01 f303 	mul.w	r3, r1, r3
 800a8ce:	441a      	add	r2, r3
 800a8d0:	887b      	ldrh	r3, [r7, #2]
 800a8d2:	8879      	ldrh	r1, [r7, #2]
 800a8d4:	fb01 f303 	mul.w	r3, r1, r3
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	da03      	bge.n	800a8e4 <lcd_draw_circle+0x96>
	      xm++;
 800a8dc:	89fb      	ldrh	r3, [r7, #14]
 800a8de:	3301      	adds	r3, #1
 800a8e0:	81fb      	strh	r3, [r7, #14]
 800a8e2:	e002      	b.n	800a8ea <lcd_draw_circle+0x9c>
	    else   //在圆外
	      ym--;
 800a8e4:	89bb      	ldrh	r3, [r7, #12]
 800a8e6:	3b01      	subs	r3, #1
 800a8e8:	81bb      	strh	r3, [r7, #12]
	    lcd_draw_point(x+xm,y+ym,color);
 800a8ea:	88fa      	ldrh	r2, [r7, #6]
 800a8ec:	89fb      	ldrh	r3, [r7, #14]
 800a8ee:	4413      	add	r3, r2
 800a8f0:	b298      	uxth	r0, r3
 800a8f2:	88ba      	ldrh	r2, [r7, #4]
 800a8f4:	89bb      	ldrh	r3, [r7, #12]
 800a8f6:	4413      	add	r3, r2
 800a8f8:	b29b      	uxth	r3, r3
 800a8fa:	883a      	ldrh	r2, [r7, #0]
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	f7ff ff7d 	bl	800a7fc <lcd_draw_point>
	    lcd_draw_point(x-xm,y+ym,color);
 800a902:	88fa      	ldrh	r2, [r7, #6]
 800a904:	89fb      	ldrh	r3, [r7, #14]
 800a906:	1ad3      	subs	r3, r2, r3
 800a908:	b298      	uxth	r0, r3
 800a90a:	88ba      	ldrh	r2, [r7, #4]
 800a90c:	89bb      	ldrh	r3, [r7, #12]
 800a90e:	4413      	add	r3, r2
 800a910:	b29b      	uxth	r3, r3
 800a912:	883a      	ldrh	r2, [r7, #0]
 800a914:	4619      	mov	r1, r3
 800a916:	f7ff ff71 	bl	800a7fc <lcd_draw_point>
	    lcd_draw_point(x-ym,y+xm,color);
 800a91a:	88fa      	ldrh	r2, [r7, #6]
 800a91c:	89bb      	ldrh	r3, [r7, #12]
 800a91e:	1ad3      	subs	r3, r2, r3
 800a920:	b298      	uxth	r0, r3
 800a922:	88ba      	ldrh	r2, [r7, #4]
 800a924:	89fb      	ldrh	r3, [r7, #14]
 800a926:	4413      	add	r3, r2
 800a928:	b29b      	uxth	r3, r3
 800a92a:	883a      	ldrh	r2, [r7, #0]
 800a92c:	4619      	mov	r1, r3
 800a92e:	f7ff ff65 	bl	800a7fc <lcd_draw_point>
	    lcd_draw_point(x-ym,y-xm,color);
 800a932:	88fa      	ldrh	r2, [r7, #6]
 800a934:	89bb      	ldrh	r3, [r7, #12]
 800a936:	1ad3      	subs	r3, r2, r3
 800a938:	b298      	uxth	r0, r3
 800a93a:	88ba      	ldrh	r2, [r7, #4]
 800a93c:	89fb      	ldrh	r3, [r7, #14]
 800a93e:	1ad3      	subs	r3, r2, r3
 800a940:	b29b      	uxth	r3, r3
 800a942:	883a      	ldrh	r2, [r7, #0]
 800a944:	4619      	mov	r1, r3
 800a946:	f7ff ff59 	bl	800a7fc <lcd_draw_point>
	    lcd_draw_point(x+ym,y+xm,color);
 800a94a:	88fa      	ldrh	r2, [r7, #6]
 800a94c:	89bb      	ldrh	r3, [r7, #12]
 800a94e:	4413      	add	r3, r2
 800a950:	b298      	uxth	r0, r3
 800a952:	88ba      	ldrh	r2, [r7, #4]
 800a954:	89fb      	ldrh	r3, [r7, #14]
 800a956:	4413      	add	r3, r2
 800a958:	b29b      	uxth	r3, r3
 800a95a:	883a      	ldrh	r2, [r7, #0]
 800a95c:	4619      	mov	r1, r3
 800a95e:	f7ff ff4d 	bl	800a7fc <lcd_draw_point>
	    lcd_draw_point(x+ym,y-xm,color);
 800a962:	88fa      	ldrh	r2, [r7, #6]
 800a964:	89bb      	ldrh	r3, [r7, #12]
 800a966:	4413      	add	r3, r2
 800a968:	b298      	uxth	r0, r3
 800a96a:	88ba      	ldrh	r2, [r7, #4]
 800a96c:	89fb      	ldrh	r3, [r7, #14]
 800a96e:	1ad3      	subs	r3, r2, r3
 800a970:	b29b      	uxth	r3, r3
 800a972:	883a      	ldrh	r2, [r7, #0]
 800a974:	4619      	mov	r1, r3
 800a976:	f7ff ff41 	bl	800a7fc <lcd_draw_point>
	    lcd_draw_point(x+xm,y-ym,color);
 800a97a:	88fa      	ldrh	r2, [r7, #6]
 800a97c:	89fb      	ldrh	r3, [r7, #14]
 800a97e:	4413      	add	r3, r2
 800a980:	b298      	uxth	r0, r3
 800a982:	88ba      	ldrh	r2, [r7, #4]
 800a984:	89bb      	ldrh	r3, [r7, #12]
 800a986:	1ad3      	subs	r3, r2, r3
 800a988:	b29b      	uxth	r3, r3
 800a98a:	883a      	ldrh	r2, [r7, #0]
 800a98c:	4619      	mov	r1, r3
 800a98e:	f7ff ff35 	bl	800a7fc <lcd_draw_point>
	    lcd_draw_point(x-xm,y-ym,color);
 800a992:	88fa      	ldrh	r2, [r7, #6]
 800a994:	89fb      	ldrh	r3, [r7, #14]
 800a996:	1ad3      	subs	r3, r2, r3
 800a998:	b298      	uxth	r0, r3
 800a99a:	88ba      	ldrh	r2, [r7, #4]
 800a99c:	89bb      	ldrh	r3, [r7, #12]
 800a99e:	1ad3      	subs	r3, r2, r3
 800a9a0:	b29b      	uxth	r3, r3
 800a9a2:	883a      	ldrh	r2, [r7, #0]
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	f7ff ff29 	bl	800a7fc <lcd_draw_point>
	  while(xm<=ym)//判断是否画完
 800a9aa:	89fa      	ldrh	r2, [r7, #14]
 800a9ac:	89bb      	ldrh	r3, [r7, #12]
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d985      	bls.n	800a8be <lcd_draw_circle+0x70>
	  }
}
 800a9b2:	bf00      	nop
 800a9b4:	bf00      	nop
 800a9b6:	3714      	adds	r7, #20
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd90      	pop	{r4, r7, pc}

0800a9bc <lcd_draw_circle_fill>:
 * @brief
 * @param   x,y 圆心坐标 ,r 半径 ,color 颜色
 * @return  none
 */
void lcd_draw_circle_fill(uint16_t x, uint16_t y, uint16_t r,uint16_t color)
{
 800a9bc:	b590      	push	{r4, r7, lr}
 800a9be:	b085      	sub	sp, #20
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	4604      	mov	r4, r0
 800a9c4:	4608      	mov	r0, r1
 800a9c6:	4611      	mov	r1, r2
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	4623      	mov	r3, r4
 800a9cc:	80fb      	strh	r3, [r7, #6]
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	80bb      	strh	r3, [r7, #4]
 800a9d2:	460b      	mov	r3, r1
 800a9d4:	807b      	strh	r3, [r7, #2]
 800a9d6:	4613      	mov	r3, r2
 800a9d8:	803b      	strh	r3, [r7, #0]
	uint16_t i ;
	for(i=1;i<r;i++)
 800a9da:	2301      	movs	r3, #1
 800a9dc:	81fb      	strh	r3, [r7, #14]
 800a9de:	e008      	b.n	800a9f2 <lcd_draw_circle_fill+0x36>
	{
	 lcd_draw_circle(x,y,i,color);
 800a9e0:	883b      	ldrh	r3, [r7, #0]
 800a9e2:	89fa      	ldrh	r2, [r7, #14]
 800a9e4:	88b9      	ldrh	r1, [r7, #4]
 800a9e6:	88f8      	ldrh	r0, [r7, #6]
 800a9e8:	f7ff ff31 	bl	800a84e <lcd_draw_circle>
	for(i=1;i<r;i++)
 800a9ec:	89fb      	ldrh	r3, [r7, #14]
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	81fb      	strh	r3, [r7, #14]
 800a9f2:	89fa      	ldrh	r2, [r7, #14]
 800a9f4:	887b      	ldrh	r3, [r7, #2]
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d3f2      	bcc.n	800a9e0 <lcd_draw_circle_fill+0x24>
	}
}
 800a9fa:	bf00      	nop
 800a9fc:	bf00      	nop
 800a9fe:	3714      	adds	r7, #20
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd90      	pop	{r4, r7, pc}

0800aa04 <change_color>:
#include "touch.h"
#include "TFTLCD.h"
#include "key_led.h"

uint16_t change_color(void)
{
 800aa04:	b480      	push	{r7}
 800aa06:	af00      	add	r7, sp, #0
	static uint8_t key_cnt = 0;
	static uint16_t change_color = 0;

	key_cnt++;
 800aa08:	4b31      	ldr	r3, [pc, #196]	; (800aad0 <change_color+0xcc>)
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	3301      	adds	r3, #1
 800aa0e:	b2da      	uxtb	r2, r3
 800aa10:	4b2f      	ldr	r3, [pc, #188]	; (800aad0 <change_color+0xcc>)
 800aa12:	701a      	strb	r2, [r3, #0]
	switch(key_cnt)
 800aa14:	4b2e      	ldr	r3, [pc, #184]	; (800aad0 <change_color+0xcc>)
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	3b01      	subs	r3, #1
 800aa1a:	2b0a      	cmp	r3, #10
 800aa1c:	d850      	bhi.n	800aac0 <change_color+0xbc>
 800aa1e:	a201      	add	r2, pc, #4	; (adr r2, 800aa24 <change_color+0x20>)
 800aa20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa24:	0800aa51 	.word	0x0800aa51
 800aa28:	0800aa59 	.word	0x0800aa59
 800aa2c:	0800aa61 	.word	0x0800aa61
 800aa30:	0800aa6b 	.word	0x0800aa6b
 800aa34:	0800aa75 	.word	0x0800aa75
 800aa38:	0800aa7f 	.word	0x0800aa7f
 800aa3c:	0800aa89 	.word	0x0800aa89
 800aa40:	0800aa93 	.word	0x0800aa93
 800aa44:	0800aa9d 	.word	0x0800aa9d
 800aa48:	0800aaa7 	.word	0x0800aaa7
 800aa4c:	0800aab1 	.word	0x0800aab1
	{
		case 1:
			change_color = BLACK;
 800aa50:	4b20      	ldr	r3, [pc, #128]	; (800aad4 <change_color+0xd0>)
 800aa52:	2200      	movs	r2, #0
 800aa54:	801a      	strh	r2, [r3, #0]
			break;
 800aa56:	e034      	b.n	800aac2 <change_color+0xbe>
		case 2:
			change_color = BLUE;
 800aa58:	4b1e      	ldr	r3, [pc, #120]	; (800aad4 <change_color+0xd0>)
 800aa5a:	221f      	movs	r2, #31
 800aa5c:	801a      	strh	r2, [r3, #0]
			break;
 800aa5e:	e030      	b.n	800aac2 <change_color+0xbe>
		case 3:
			change_color = GREEN;
 800aa60:	4b1c      	ldr	r3, [pc, #112]	; (800aad4 <change_color+0xd0>)
 800aa62:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800aa66:	801a      	strh	r2, [r3, #0]
			break;
 800aa68:	e02b      	b.n	800aac2 <change_color+0xbe>
		case 4:
			change_color = GBLUE;
 800aa6a:	4b1a      	ldr	r3, [pc, #104]	; (800aad4 <change_color+0xd0>)
 800aa6c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800aa70:	801a      	strh	r2, [r3, #0]
			break;
 800aa72:	e026      	b.n	800aac2 <change_color+0xbe>
		case 5:
			change_color = GRAY;
 800aa74:	4b17      	ldr	r3, [pc, #92]	; (800aad4 <change_color+0xd0>)
 800aa76:	f248 4230 	movw	r2, #33840	; 0x8430
 800aa7a:	801a      	strh	r2, [r3, #0]
			break;
 800aa7c:	e021      	b.n	800aac2 <change_color+0xbe>
		case 6:
			change_color = BROWN;
 800aa7e:	4b15      	ldr	r3, [pc, #84]	; (800aad4 <change_color+0xd0>)
 800aa80:	f64b 4240 	movw	r2, #48192	; 0xbc40
 800aa84:	801a      	strh	r2, [r3, #0]
			break;
 800aa86:	e01c      	b.n	800aac2 <change_color+0xbe>
		case 7:
			change_color = RED;
 800aa88:	4b12      	ldr	r3, [pc, #72]	; (800aad4 <change_color+0xd0>)
 800aa8a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800aa8e:	801a      	strh	r2, [r3, #0]
			break;
 800aa90:	e017      	b.n	800aac2 <change_color+0xbe>
		case 8:
			change_color = PINK;
 800aa92:	4b10      	ldr	r3, [pc, #64]	; (800aad4 <change_color+0xd0>)
 800aa94:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800aa98:	801a      	strh	r2, [r3, #0]
			break;
 800aa9a:	e012      	b.n	800aac2 <change_color+0xbe>
		case 9:
			change_color = BRRED;
 800aa9c:	4b0d      	ldr	r3, [pc, #52]	; (800aad4 <change_color+0xd0>)
 800aa9e:	f64f 4207 	movw	r2, #64519	; 0xfc07
 800aaa2:	801a      	strh	r2, [r3, #0]
			break;
 800aaa4:	e00d      	b.n	800aac2 <change_color+0xbe>
		case 10:
			change_color = YELLOW;
 800aaa6:	4b0b      	ldr	r3, [pc, #44]	; (800aad4 <change_color+0xd0>)
 800aaa8:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800aaac:	801a      	strh	r2, [r3, #0]
			break;
 800aaae:	e008      	b.n	800aac2 <change_color+0xbe>
		case 11:
			change_color = WHITE;
 800aab0:	4b08      	ldr	r3, [pc, #32]	; (800aad4 <change_color+0xd0>)
 800aab2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aab6:	801a      	strh	r2, [r3, #0]
			key_cnt = 0;
 800aab8:	4b05      	ldr	r3, [pc, #20]	; (800aad0 <change_color+0xcc>)
 800aaba:	2200      	movs	r2, #0
 800aabc:	701a      	strb	r2, [r3, #0]
			break;
 800aabe:	e000      	b.n	800aac2 <change_color+0xbe>
		default:

			break;
 800aac0:	bf00      	nop
	}
	return change_color;
 800aac2:	4b04      	ldr	r3, [pc, #16]	; (800aad4 <change_color+0xd0>)
 800aac4:	881b      	ldrh	r3, [r3, #0]

}
 800aac6:	4618      	mov	r0, r3
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr
 800aad0:	24000508 	.word	0x24000508
 800aad4:	2400050a 	.word	0x2400050a

0800aad8 <tft_lcd_draw>:
void tft_lcd_draw(void)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	af00      	add	r7, sp, #0
	uint8_t key;
	static uint16_t color = 0;

	touch_Scanf();
 800aade:	f000 fe05 	bl	800b6ec <touch_Scanf>
	key=KEY_Scan(0);
 800aae2:	2000      	movs	r0, #0
 800aae4:	f000 fa96 	bl	800b014 <KEY_Scan>
 800aae8:	4603      	mov	r3, r0
 800aaea:	71fb      	strb	r3, [r7, #7]
	if(key==KEY0_PRES)
 800aaec:	79fb      	ldrb	r3, [r7, #7]
 800aaee:	2b01      	cmp	r3, #1
 800aaf0:	d10e      	bne.n	800ab10 <tft_lcd_draw+0x38>
	{
		color = change_color();
 800aaf2:	f7ff ff87 	bl	800aa04 <change_color>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	461a      	mov	r2, r3
 800aafa:	4b58      	ldr	r3, [pc, #352]	; (800ac5c <tft_lcd_draw+0x184>)
 800aafc:	801a      	strh	r2, [r3, #0]
		lcd_draw_circle_fill(974,550,50,color);
 800aafe:	4b57      	ldr	r3, [pc, #348]	; (800ac5c <tft_lcd_draw+0x184>)
 800ab00:	881b      	ldrh	r3, [r3, #0]
 800ab02:	2232      	movs	r2, #50	; 0x32
 800ab04:	f240 2126 	movw	r1, #550	; 0x226
 800ab08:	f240 30ce 	movw	r0, #974	; 0x3ce
 800ab0c:	f7ff ff56 	bl	800a9bc <lcd_draw_circle_fill>
//	{

//	}


	switch(User_Touch.num)
 800ab10:	4b53      	ldr	r3, [pc, #332]	; (800ac60 <tft_lcd_draw+0x188>)
 800ab12:	785b      	ldrb	r3, [r3, #1]
 800ab14:	3b01      	subs	r3, #1
 800ab16:	2b04      	cmp	r3, #4
 800ab18:	f200 809a 	bhi.w	800ac50 <tft_lcd_draw+0x178>
 800ab1c:	a201      	add	r2, pc, #4	; (adr r2, 800ab24 <tft_lcd_draw+0x4c>)
 800ab1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab22:	bf00      	nop
 800ab24:	0800ab39 	.word	0x0800ab39
 800ab28:	0800ab4d 	.word	0x0800ab4d
 800ab2c:	0800ab73 	.word	0x0800ab73
 800ab30:	0800abab 	.word	0x0800abab
 800ab34:	0800abf5 	.word	0x0800abf5
	{
		case 1:
			lcd_draw_circle_fill(User_Touch.point[0].x,User_Touch.point[0].y,5,color);
 800ab38:	4b49      	ldr	r3, [pc, #292]	; (800ac60 <tft_lcd_draw+0x188>)
 800ab3a:	8858      	ldrh	r0, [r3, #2]
 800ab3c:	4b48      	ldr	r3, [pc, #288]	; (800ac60 <tft_lcd_draw+0x188>)
 800ab3e:	8899      	ldrh	r1, [r3, #4]
 800ab40:	4b46      	ldr	r3, [pc, #280]	; (800ac5c <tft_lcd_draw+0x184>)
 800ab42:	881b      	ldrh	r3, [r3, #0]
 800ab44:	2205      	movs	r2, #5
 800ab46:	f7ff ff39 	bl	800a9bc <lcd_draw_circle_fill>
		    break;
 800ab4a:	e082      	b.n	800ac52 <tft_lcd_draw+0x17a>
		case 2:
			lcd_draw_circle_fill(User_Touch.point[0].x,User_Touch.point[0].y,5,color);
 800ab4c:	4b44      	ldr	r3, [pc, #272]	; (800ac60 <tft_lcd_draw+0x188>)
 800ab4e:	8858      	ldrh	r0, [r3, #2]
 800ab50:	4b43      	ldr	r3, [pc, #268]	; (800ac60 <tft_lcd_draw+0x188>)
 800ab52:	8899      	ldrh	r1, [r3, #4]
 800ab54:	4b41      	ldr	r3, [pc, #260]	; (800ac5c <tft_lcd_draw+0x184>)
 800ab56:	881b      	ldrh	r3, [r3, #0]
 800ab58:	2205      	movs	r2, #5
 800ab5a:	f7ff ff2f 	bl	800a9bc <lcd_draw_circle_fill>
			lcd_draw_circle_fill(User_Touch.point[1].x,User_Touch.point[1].y,5,color);
 800ab5e:	4b40      	ldr	r3, [pc, #256]	; (800ac60 <tft_lcd_draw+0x188>)
 800ab60:	8918      	ldrh	r0, [r3, #8]
 800ab62:	4b3f      	ldr	r3, [pc, #252]	; (800ac60 <tft_lcd_draw+0x188>)
 800ab64:	8959      	ldrh	r1, [r3, #10]
 800ab66:	4b3d      	ldr	r3, [pc, #244]	; (800ac5c <tft_lcd_draw+0x184>)
 800ab68:	881b      	ldrh	r3, [r3, #0]
 800ab6a:	2205      	movs	r2, #5
 800ab6c:	f7ff ff26 	bl	800a9bc <lcd_draw_circle_fill>
		    break;
 800ab70:	e06f      	b.n	800ac52 <tft_lcd_draw+0x17a>
		case 3:
			lcd_draw_circle_fill(User_Touch.point[0].x,User_Touch.point[0].y,5,color);
 800ab72:	4b3b      	ldr	r3, [pc, #236]	; (800ac60 <tft_lcd_draw+0x188>)
 800ab74:	8858      	ldrh	r0, [r3, #2]
 800ab76:	4b3a      	ldr	r3, [pc, #232]	; (800ac60 <tft_lcd_draw+0x188>)
 800ab78:	8899      	ldrh	r1, [r3, #4]
 800ab7a:	4b38      	ldr	r3, [pc, #224]	; (800ac5c <tft_lcd_draw+0x184>)
 800ab7c:	881b      	ldrh	r3, [r3, #0]
 800ab7e:	2205      	movs	r2, #5
 800ab80:	f7ff ff1c 	bl	800a9bc <lcd_draw_circle_fill>
			lcd_draw_circle_fill(User_Touch.point[1].x,User_Touch.point[1].y,5,color);
 800ab84:	4b36      	ldr	r3, [pc, #216]	; (800ac60 <tft_lcd_draw+0x188>)
 800ab86:	8918      	ldrh	r0, [r3, #8]
 800ab88:	4b35      	ldr	r3, [pc, #212]	; (800ac60 <tft_lcd_draw+0x188>)
 800ab8a:	8959      	ldrh	r1, [r3, #10]
 800ab8c:	4b33      	ldr	r3, [pc, #204]	; (800ac5c <tft_lcd_draw+0x184>)
 800ab8e:	881b      	ldrh	r3, [r3, #0]
 800ab90:	2205      	movs	r2, #5
 800ab92:	f7ff ff13 	bl	800a9bc <lcd_draw_circle_fill>
			lcd_draw_circle_fill(User_Touch.point[2].x,User_Touch.point[2].y,5,color);
 800ab96:	4b32      	ldr	r3, [pc, #200]	; (800ac60 <tft_lcd_draw+0x188>)
 800ab98:	89d8      	ldrh	r0, [r3, #14]
 800ab9a:	4b31      	ldr	r3, [pc, #196]	; (800ac60 <tft_lcd_draw+0x188>)
 800ab9c:	8a19      	ldrh	r1, [r3, #16]
 800ab9e:	4b2f      	ldr	r3, [pc, #188]	; (800ac5c <tft_lcd_draw+0x184>)
 800aba0:	881b      	ldrh	r3, [r3, #0]
 800aba2:	2205      	movs	r2, #5
 800aba4:	f7ff ff0a 	bl	800a9bc <lcd_draw_circle_fill>
		    break;
 800aba8:	e053      	b.n	800ac52 <tft_lcd_draw+0x17a>
		case 4:
			lcd_draw_circle_fill(User_Touch.point[0].x,User_Touch.point[0].y,5,color);
 800abaa:	4b2d      	ldr	r3, [pc, #180]	; (800ac60 <tft_lcd_draw+0x188>)
 800abac:	8858      	ldrh	r0, [r3, #2]
 800abae:	4b2c      	ldr	r3, [pc, #176]	; (800ac60 <tft_lcd_draw+0x188>)
 800abb0:	8899      	ldrh	r1, [r3, #4]
 800abb2:	4b2a      	ldr	r3, [pc, #168]	; (800ac5c <tft_lcd_draw+0x184>)
 800abb4:	881b      	ldrh	r3, [r3, #0]
 800abb6:	2205      	movs	r2, #5
 800abb8:	f7ff ff00 	bl	800a9bc <lcd_draw_circle_fill>
			lcd_draw_circle_fill(User_Touch.point[1].x,User_Touch.point[1].y,5,color);
 800abbc:	4b28      	ldr	r3, [pc, #160]	; (800ac60 <tft_lcd_draw+0x188>)
 800abbe:	8918      	ldrh	r0, [r3, #8]
 800abc0:	4b27      	ldr	r3, [pc, #156]	; (800ac60 <tft_lcd_draw+0x188>)
 800abc2:	8959      	ldrh	r1, [r3, #10]
 800abc4:	4b25      	ldr	r3, [pc, #148]	; (800ac5c <tft_lcd_draw+0x184>)
 800abc6:	881b      	ldrh	r3, [r3, #0]
 800abc8:	2205      	movs	r2, #5
 800abca:	f7ff fef7 	bl	800a9bc <lcd_draw_circle_fill>
			lcd_draw_circle_fill(User_Touch.point[2].x,User_Touch.point[2].y,5,color);
 800abce:	4b24      	ldr	r3, [pc, #144]	; (800ac60 <tft_lcd_draw+0x188>)
 800abd0:	89d8      	ldrh	r0, [r3, #14]
 800abd2:	4b23      	ldr	r3, [pc, #140]	; (800ac60 <tft_lcd_draw+0x188>)
 800abd4:	8a19      	ldrh	r1, [r3, #16]
 800abd6:	4b21      	ldr	r3, [pc, #132]	; (800ac5c <tft_lcd_draw+0x184>)
 800abd8:	881b      	ldrh	r3, [r3, #0]
 800abda:	2205      	movs	r2, #5
 800abdc:	f7ff feee 	bl	800a9bc <lcd_draw_circle_fill>
			lcd_draw_circle_fill(User_Touch.point[3].x,User_Touch.point[3].y,5,color);
 800abe0:	4b1f      	ldr	r3, [pc, #124]	; (800ac60 <tft_lcd_draw+0x188>)
 800abe2:	8a98      	ldrh	r0, [r3, #20]
 800abe4:	4b1e      	ldr	r3, [pc, #120]	; (800ac60 <tft_lcd_draw+0x188>)
 800abe6:	8ad9      	ldrh	r1, [r3, #22]
 800abe8:	4b1c      	ldr	r3, [pc, #112]	; (800ac5c <tft_lcd_draw+0x184>)
 800abea:	881b      	ldrh	r3, [r3, #0]
 800abec:	2205      	movs	r2, #5
 800abee:	f7ff fee5 	bl	800a9bc <lcd_draw_circle_fill>
		    break;
 800abf2:	e02e      	b.n	800ac52 <tft_lcd_draw+0x17a>
		case 5:
			lcd_draw_circle_fill(User_Touch.point[0].x,User_Touch.point[0].y,5,color);
 800abf4:	4b1a      	ldr	r3, [pc, #104]	; (800ac60 <tft_lcd_draw+0x188>)
 800abf6:	8858      	ldrh	r0, [r3, #2]
 800abf8:	4b19      	ldr	r3, [pc, #100]	; (800ac60 <tft_lcd_draw+0x188>)
 800abfa:	8899      	ldrh	r1, [r3, #4]
 800abfc:	4b17      	ldr	r3, [pc, #92]	; (800ac5c <tft_lcd_draw+0x184>)
 800abfe:	881b      	ldrh	r3, [r3, #0]
 800ac00:	2205      	movs	r2, #5
 800ac02:	f7ff fedb 	bl	800a9bc <lcd_draw_circle_fill>
			lcd_draw_circle_fill(User_Touch.point[1].x,User_Touch.point[1].y,5,color);
 800ac06:	4b16      	ldr	r3, [pc, #88]	; (800ac60 <tft_lcd_draw+0x188>)
 800ac08:	8918      	ldrh	r0, [r3, #8]
 800ac0a:	4b15      	ldr	r3, [pc, #84]	; (800ac60 <tft_lcd_draw+0x188>)
 800ac0c:	8959      	ldrh	r1, [r3, #10]
 800ac0e:	4b13      	ldr	r3, [pc, #76]	; (800ac5c <tft_lcd_draw+0x184>)
 800ac10:	881b      	ldrh	r3, [r3, #0]
 800ac12:	2205      	movs	r2, #5
 800ac14:	f7ff fed2 	bl	800a9bc <lcd_draw_circle_fill>
			lcd_draw_circle_fill(User_Touch.point[2].x,User_Touch.point[2].y,5,color);
 800ac18:	4b11      	ldr	r3, [pc, #68]	; (800ac60 <tft_lcd_draw+0x188>)
 800ac1a:	89d8      	ldrh	r0, [r3, #14]
 800ac1c:	4b10      	ldr	r3, [pc, #64]	; (800ac60 <tft_lcd_draw+0x188>)
 800ac1e:	8a19      	ldrh	r1, [r3, #16]
 800ac20:	4b0e      	ldr	r3, [pc, #56]	; (800ac5c <tft_lcd_draw+0x184>)
 800ac22:	881b      	ldrh	r3, [r3, #0]
 800ac24:	2205      	movs	r2, #5
 800ac26:	f7ff fec9 	bl	800a9bc <lcd_draw_circle_fill>
			lcd_draw_circle_fill(User_Touch.point[3].x,User_Touch.point[3].y,5,color);
 800ac2a:	4b0d      	ldr	r3, [pc, #52]	; (800ac60 <tft_lcd_draw+0x188>)
 800ac2c:	8a98      	ldrh	r0, [r3, #20]
 800ac2e:	4b0c      	ldr	r3, [pc, #48]	; (800ac60 <tft_lcd_draw+0x188>)
 800ac30:	8ad9      	ldrh	r1, [r3, #22]
 800ac32:	4b0a      	ldr	r3, [pc, #40]	; (800ac5c <tft_lcd_draw+0x184>)
 800ac34:	881b      	ldrh	r3, [r3, #0]
 800ac36:	2205      	movs	r2, #5
 800ac38:	f7ff fec0 	bl	800a9bc <lcd_draw_circle_fill>
			lcd_draw_circle_fill(User_Touch.point[4].x,User_Touch.point[4].y,5,color);
 800ac3c:	4b08      	ldr	r3, [pc, #32]	; (800ac60 <tft_lcd_draw+0x188>)
 800ac3e:	8b58      	ldrh	r0, [r3, #26]
 800ac40:	4b07      	ldr	r3, [pc, #28]	; (800ac60 <tft_lcd_draw+0x188>)
 800ac42:	8b99      	ldrh	r1, [r3, #28]
 800ac44:	4b05      	ldr	r3, [pc, #20]	; (800ac5c <tft_lcd_draw+0x184>)
 800ac46:	881b      	ldrh	r3, [r3, #0]
 800ac48:	2205      	movs	r2, #5
 800ac4a:	f7ff feb7 	bl	800a9bc <lcd_draw_circle_fill>
		    break;
 800ac4e:	e000      	b.n	800ac52 <tft_lcd_draw+0x17a>
		default:

			break;
 800ac50:	bf00      	nop
	}


}
 800ac52:	bf00      	nop
 800ac54:	3708      	adds	r7, #8
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}
 800ac5a:	bf00      	nop
 800ac5c:	2400050c 	.word	0x2400050c
 800ac60:	24000510 	.word	0x24000510

0800ac64 <QSPI_Send_CMD>:
//	addressMode:地址模式; QSPI_ADDRESS_NONE,QSPI_ADDRESS_1_LINE,QSPI_ADDRESS_2_LINE,QSPI_ADDRESS_4_LINE
//	addressSize:地址长度;QSPI_ADDRESS_8_BITS,QSPI_ADDRESS_16_BITS,QSPI_ADDRESS_24_BITS,QSPI_ADDRESS_32_BITS
//	dataMode:数据模式; QSPI_DATA_NONE,QSPI_DATA_1_LINE,QSPI_DATA_2_LINE,QSPI_DATA_4_LINE

void QSPI_Send_CMD(uint32_t instruction,uint32_t address,uint32_t dummyCycles,uint32_t instructionMode,uint32_t addressMode,uint32_t addressSize,uint32_t dataMode)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b092      	sub	sp, #72	; 0x48
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	607a      	str	r2, [r7, #4]
 800ac70:	603b      	str	r3, [r7, #0]
    QSPI_CommandTypeDef Cmdhandler;

    Cmdhandler.Instruction=instruction;                 	//指令
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	613b      	str	r3, [r7, #16]
    Cmdhandler.Address=address;                            	//地址
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	617b      	str	r3, [r7, #20]
    Cmdhandler.DummyCycles=dummyCycles;                     //设置空指令周期数
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	627b      	str	r3, [r7, #36]	; 0x24
    Cmdhandler.InstructionMode=instructionMode;				//指令模式
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	62bb      	str	r3, [r7, #40]	; 0x28
    Cmdhandler.AddressMode=addressMode;   					//地址模式
 800ac82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac84:	62fb      	str	r3, [r7, #44]	; 0x2c
    Cmdhandler.AddressSize=addressSize;   					//地址长度
 800ac86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac88:	61fb      	str	r3, [r7, #28]
    Cmdhandler.DataMode=dataMode;             				//数据模式
 800ac8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac8c:	637b      	str	r3, [r7, #52]	; 0x34
    Cmdhandler.SIOOMode=QSPI_SIOO_INST_EVERY_CMD;       	//每次都发送指令
 800ac8e:	2300      	movs	r3, #0
 800ac90:	647b      	str	r3, [r7, #68]	; 0x44
    Cmdhandler.AlternateByteMode=QSPI_ALTERNATE_BYTES_NONE; //无交替字节
 800ac92:	2300      	movs	r3, #0
 800ac94:	633b      	str	r3, [r7, #48]	; 0x30
    Cmdhandler.DdrMode=QSPI_DDR_MODE_DISABLE;           	//关闭DDR模式
 800ac96:	2300      	movs	r3, #0
 800ac98:	63fb      	str	r3, [r7, #60]	; 0x3c
    Cmdhandler.DdrHoldHalfCycle=QSPI_DDR_HHC_ANALOG_DELAY;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	643b      	str	r3, [r7, #64]	; 0x40

    HAL_QSPI_Command(&hqspi,&Cmdhandler,5000);
 800ac9e:	f107 0310 	add.w	r3, r7, #16
 800aca2:	f241 3288 	movw	r2, #5000	; 0x1388
 800aca6:	4619      	mov	r1, r3
 800aca8:	4803      	ldr	r0, [pc, #12]	; (800acb8 <QSPI_Send_CMD+0x54>)
 800acaa:	f7f8 ff75 	bl	8003b98 <HAL_QSPI_Command>
}
 800acae:	bf00      	nop
 800acb0:	3748      	adds	r7, #72	; 0x48
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	24000308 	.word	0x24000308

0800acbc <QSPI_Receive>:
//buf:接收数据缓冲区首地址
//datalen:要传输的数据长度
//返回值:0,正常
//    其他,错误代码
uint8_t QSPI_Receive(uint8_t* buf,uint32_t datalen)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b082      	sub	sp, #8
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
	hqspi.Instance->DLR=datalen-1;                           //配置数据长度
 800acc6:	4b0a      	ldr	r3, [pc, #40]	; (800acf0 <QSPI_Receive+0x34>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	683a      	ldr	r2, [r7, #0]
 800accc:	3a01      	subs	r2, #1
 800acce:	611a      	str	r2, [r3, #16]
    if(HAL_QSPI_Receive(&hqspi,buf,5000)==HAL_OK) return 0;  //接收数据
 800acd0:	f241 3288 	movw	r2, #5000	; 0x1388
 800acd4:	6879      	ldr	r1, [r7, #4]
 800acd6:	4806      	ldr	r0, [pc, #24]	; (800acf0 <QSPI_Receive+0x34>)
 800acd8:	f7f9 f84e 	bl	8003d78 <HAL_QSPI_Receive>
 800acdc:	4603      	mov	r3, r0
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d101      	bne.n	800ace6 <QSPI_Receive+0x2a>
 800ace2:	2300      	movs	r3, #0
 800ace4:	e000      	b.n	800ace8 <QSPI_Receive+0x2c>
    else return 1;
 800ace6:	2301      	movs	r3, #1
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3708      	adds	r7, #8
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}
 800acf0:	24000308 	.word	0x24000308

0800acf4 <QSPI_Transmit>:
//buf:发送数据缓冲区首地址
//datalen:要传输的数据长度
//返回值:0,正常
//    其他,错误代码
uint8_t QSPI_Transmit(uint8_t* buf,uint32_t datalen)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
	hqspi.Instance->DLR=datalen-1;                            //配置数据长度
 800acfe:	4b0a      	ldr	r3, [pc, #40]	; (800ad28 <QSPI_Transmit+0x34>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	683a      	ldr	r2, [r7, #0]
 800ad04:	3a01      	subs	r2, #1
 800ad06:	611a      	str	r2, [r3, #16]
    if(HAL_QSPI_Transmit(&hqspi,buf,5000)==HAL_OK) return 0;  //发送数据
 800ad08:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad0c:	6879      	ldr	r1, [r7, #4]
 800ad0e:	4806      	ldr	r0, [pc, #24]	; (800ad28 <QSPI_Transmit+0x34>)
 800ad10:	f7f8 ffa0 	bl	8003c54 <HAL_QSPI_Transmit>
 800ad14:	4603      	mov	r3, r0
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d101      	bne.n	800ad1e <QSPI_Transmit+0x2a>
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	e000      	b.n	800ad20 <QSPI_Transmit+0x2c>
    else return 1;
 800ad1e:	2301      	movs	r3, #1
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3708      	adds	r7, #8
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	24000308 	.word	0x24000308

0800ad2c <W25QXX_ReadSR>:
//BIT7      6    5    4   3   2   1   0
//HOLD/RST  DRV1 DRV0 (R) (R) WPS ADP ADS
//regno:状态寄存器号，范:1~3
//返回值:状态寄存器值
uint8_t W25QXX_ReadSR(uint8_t regno)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b088      	sub	sp, #32
 800ad30:	af04      	add	r7, sp, #16
 800ad32:	4603      	mov	r3, r0
 800ad34:	71fb      	strb	r3, [r7, #7]
	uint8_t byte=0,command=0;
 800ad36:	2300      	movs	r3, #0
 800ad38:	73bb      	strb	r3, [r7, #14]
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	73fb      	strb	r3, [r7, #15]
    switch(regno)
 800ad3e:	79fb      	ldrb	r3, [r7, #7]
 800ad40:	2b03      	cmp	r3, #3
 800ad42:	d00c      	beq.n	800ad5e <W25QXX_ReadSR+0x32>
 800ad44:	2b03      	cmp	r3, #3
 800ad46:	dc0d      	bgt.n	800ad64 <W25QXX_ReadSR+0x38>
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d002      	beq.n	800ad52 <W25QXX_ReadSR+0x26>
 800ad4c:	2b02      	cmp	r3, #2
 800ad4e:	d003      	beq.n	800ad58 <W25QXX_ReadSR+0x2c>
 800ad50:	e008      	b.n	800ad64 <W25QXX_ReadSR+0x38>
    {
        case 1:
            command=W25X_ReadStatusReg1;    //读状态寄存器1指令
 800ad52:	2305      	movs	r3, #5
 800ad54:	73fb      	strb	r3, [r7, #15]
            break;
 800ad56:	e008      	b.n	800ad6a <W25QXX_ReadSR+0x3e>
        case 2:
            command=W25X_ReadStatusReg2;    //读状态寄存器2指令
 800ad58:	2335      	movs	r3, #53	; 0x35
 800ad5a:	73fb      	strb	r3, [r7, #15]
            break;
 800ad5c:	e005      	b.n	800ad6a <W25QXX_ReadSR+0x3e>
        case 3:
            command=W25X_ReadStatusReg3;    //读状态寄存器3指令
 800ad5e:	2315      	movs	r3, #21
 800ad60:	73fb      	strb	r3, [r7, #15]
            break;
 800ad62:	e002      	b.n	800ad6a <W25QXX_ReadSR+0x3e>
        default:
            command=W25X_ReadStatusReg1;
 800ad64:	2305      	movs	r3, #5
 800ad66:	73fb      	strb	r3, [r7, #15]
            break;
 800ad68:	bf00      	nop
    }
	if(W25QXX_QPI_MODE)QSPI_Send_CMD(command,0,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_NONE,QSPI_ADDRESS_8_BITS,QSPI_DATA_4_LINES);	//QPI,写command指令,地址为0,4线传数据_8位地址_无地址_4线传输指令,无空周期,1个字节数据
 800ad6a:	4b16      	ldr	r3, [pc, #88]	; (800adc4 <W25QXX_ReadSR+0x98>)
 800ad6c:	781b      	ldrb	r3, [r3, #0]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d00e      	beq.n	800ad90 <W25QXX_ReadSR+0x64>
 800ad72:	7bf8      	ldrb	r0, [r7, #15]
 800ad74:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800ad78:	9302      	str	r3, [sp, #8]
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	9301      	str	r3, [sp, #4]
 800ad7e:	2300      	movs	r3, #0
 800ad80:	9300      	str	r3, [sp, #0]
 800ad82:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ad86:	2200      	movs	r2, #0
 800ad88:	2100      	movs	r1, #0
 800ad8a:	f7ff ff6b 	bl	800ac64 <QSPI_Send_CMD>
 800ad8e:	e00d      	b.n	800adac <W25QXX_ReadSR+0x80>
	else QSPI_Send_CMD(command,0,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_NONE,QSPI_ADDRESS_8_BITS,QSPI_DATA_1_LINE);				//SPI,写command指令,地址为0,单线传数据_8位地址_无地址_单线传输指令,无空周期,1个字节数据
 800ad90:	7bf8      	ldrb	r0, [r7, #15]
 800ad92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ad96:	9302      	str	r3, [sp, #8]
 800ad98:	2300      	movs	r3, #0
 800ad9a:	9301      	str	r3, [sp, #4]
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	9300      	str	r3, [sp, #0]
 800ada0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ada4:	2200      	movs	r2, #0
 800ada6:	2100      	movs	r1, #0
 800ada8:	f7ff ff5c 	bl	800ac64 <QSPI_Send_CMD>
	QSPI_Receive(&byte,1);
 800adac:	f107 030e 	add.w	r3, r7, #14
 800adb0:	2101      	movs	r1, #1
 800adb2:	4618      	mov	r0, r3
 800adb4:	f7ff ff82 	bl	800acbc <QSPI_Receive>
	return byte;
 800adb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3710      	adds	r7, #16
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}
 800adc2:	bf00      	nop
 800adc4:	2400050e 	.word	0x2400050e

0800adc8 <W25QXX_Write_SR>:

//写W25QXX状态寄存器
void W25QXX_Write_SR(uint8_t regno,uint8_t sr)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b088      	sub	sp, #32
 800adcc:	af04      	add	r7, sp, #16
 800adce:	4603      	mov	r3, r0
 800add0:	460a      	mov	r2, r1
 800add2:	71fb      	strb	r3, [r7, #7]
 800add4:	4613      	mov	r3, r2
 800add6:	71bb      	strb	r3, [r7, #6]
    uint8_t command=0;
 800add8:	2300      	movs	r3, #0
 800adda:	73fb      	strb	r3, [r7, #15]
    switch(regno)
 800addc:	79fb      	ldrb	r3, [r7, #7]
 800adde:	2b03      	cmp	r3, #3
 800ade0:	d00c      	beq.n	800adfc <W25QXX_Write_SR+0x34>
 800ade2:	2b03      	cmp	r3, #3
 800ade4:	dc0d      	bgt.n	800ae02 <W25QXX_Write_SR+0x3a>
 800ade6:	2b01      	cmp	r3, #1
 800ade8:	d002      	beq.n	800adf0 <W25QXX_Write_SR+0x28>
 800adea:	2b02      	cmp	r3, #2
 800adec:	d003      	beq.n	800adf6 <W25QXX_Write_SR+0x2e>
 800adee:	e008      	b.n	800ae02 <W25QXX_Write_SR+0x3a>
    {
        case 1:
            command=W25X_WriteStatusReg1;    //写状态寄存器1指令
 800adf0:	2301      	movs	r3, #1
 800adf2:	73fb      	strb	r3, [r7, #15]
            break;
 800adf4:	e008      	b.n	800ae08 <W25QXX_Write_SR+0x40>
        case 2:
            command=W25X_WriteStatusReg2;    //写状态寄存器2指令
 800adf6:	2331      	movs	r3, #49	; 0x31
 800adf8:	73fb      	strb	r3, [r7, #15]
            break;
 800adfa:	e005      	b.n	800ae08 <W25QXX_Write_SR+0x40>
        case 3:
            command=W25X_WriteStatusReg3;    //写状态寄存器3指令
 800adfc:	2311      	movs	r3, #17
 800adfe:	73fb      	strb	r3, [r7, #15]
            break;
 800ae00:	e002      	b.n	800ae08 <W25QXX_Write_SR+0x40>
        default:
            command=W25X_WriteStatusReg1;
 800ae02:	2301      	movs	r3, #1
 800ae04:	73fb      	strb	r3, [r7, #15]
            break;
 800ae06:	bf00      	nop
    }
	if(W25QXX_QPI_MODE)QSPI_Send_CMD(command,0,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_NONE,QSPI_ADDRESS_8_BITS,QSPI_DATA_4_LINES);	//QPI,写command指令,地址为0,4线传数据_8位地址_无地址_4线传输指令,无空周期,1个字节数据
 800ae08:	4b14      	ldr	r3, [pc, #80]	; (800ae5c <W25QXX_Write_SR+0x94>)
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d00e      	beq.n	800ae2e <W25QXX_Write_SR+0x66>
 800ae10:	7bf8      	ldrb	r0, [r7, #15]
 800ae12:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800ae16:	9302      	str	r3, [sp, #8]
 800ae18:	2300      	movs	r3, #0
 800ae1a:	9301      	str	r3, [sp, #4]
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	9300      	str	r3, [sp, #0]
 800ae20:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ae24:	2200      	movs	r2, #0
 800ae26:	2100      	movs	r1, #0
 800ae28:	f7ff ff1c 	bl	800ac64 <QSPI_Send_CMD>
 800ae2c:	e00d      	b.n	800ae4a <W25QXX_Write_SR+0x82>
	else QSPI_Send_CMD(command,0,0, QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_NONE,QSPI_ADDRESS_8_BITS,QSPI_DATA_1_LINE);				//SPI,写command指令,地址为0,单线传数据_8位地址_无地址_单线传输指令,无空周期,1个字节数据
 800ae2e:	7bf8      	ldrb	r0, [r7, #15]
 800ae30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ae34:	9302      	str	r3, [sp, #8]
 800ae36:	2300      	movs	r3, #0
 800ae38:	9301      	str	r3, [sp, #4]
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	9300      	str	r3, [sp, #0]
 800ae3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae42:	2200      	movs	r2, #0
 800ae44:	2100      	movs	r1, #0
 800ae46:	f7ff ff0d 	bl	800ac64 <QSPI_Send_CMD>
	QSPI_Transmit(&sr,1);
 800ae4a:	1dbb      	adds	r3, r7, #6
 800ae4c:	2101      	movs	r1, #1
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f7ff ff50 	bl	800acf4 <QSPI_Transmit>
}
 800ae54:	bf00      	nop
 800ae56:	3710      	adds	r7, #16
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}
 800ae5c:	2400050e 	.word	0x2400050e

0800ae60 <W25QXX_Qspi_Enable>:

//W25QXX进入QSPI模式
void W25QXX_Qspi_Enable(void)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b086      	sub	sp, #24
 800ae64:	af04      	add	r7, sp, #16
	uint8_t stareg2;
	stareg2=W25QXX_ReadSR(2);		//先读出状态寄存器2的原始值
 800ae66:	2002      	movs	r0, #2
 800ae68:	f7ff ff60 	bl	800ad2c <W25QXX_ReadSR>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	71fb      	strb	r3, [r7, #7]
	if((stareg2&0X02)==0)			//QE位未使能
 800ae70:	79fb      	ldrb	r3, [r7, #7]
 800ae72:	f003 0302 	and.w	r3, r3, #2
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d10a      	bne.n	800ae90 <W25QXX_Qspi_Enable+0x30>
	{
		W25QXX_Write_Enable();		//写使能
 800ae7a:	f000 f81f 	bl	800aebc <W25QXX_Write_Enable>
		stareg2|=1<<1;				//使能QE位
 800ae7e:	79fb      	ldrb	r3, [r7, #7]
 800ae80:	f043 0302 	orr.w	r3, r3, #2
 800ae84:	71fb      	strb	r3, [r7, #7]
		W25QXX_Write_SR(2,stareg2);	//写状态寄存器2
 800ae86:	79fb      	ldrb	r3, [r7, #7]
 800ae88:	4619      	mov	r1, r3
 800ae8a:	2002      	movs	r0, #2
 800ae8c:	f7ff ff9c 	bl	800adc8 <W25QXX_Write_SR>
	}
	QSPI_Send_CMD(W25X_EnterQPIMode,0,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_NONE,QSPI_ADDRESS_8_BITS,QSPI_DATA_NONE);//写command指令,地址为0,无数据_8位地址_无地址_单线传输指令,无空周期,0个字节数据
 800ae90:	2300      	movs	r3, #0
 800ae92:	9302      	str	r3, [sp, #8]
 800ae94:	2300      	movs	r3, #0
 800ae96:	9301      	str	r3, [sp, #4]
 800ae98:	2300      	movs	r3, #0
 800ae9a:	9300      	str	r3, [sp, #0]
 800ae9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aea0:	2200      	movs	r2, #0
 800aea2:	2100      	movs	r1, #0
 800aea4:	2038      	movs	r0, #56	; 0x38
 800aea6:	f7ff fedd 	bl	800ac64 <QSPI_Send_CMD>
	W25QXX_QPI_MODE=1;				//标记QSPI模式
 800aeaa:	4b03      	ldr	r3, [pc, #12]	; (800aeb8 <W25QXX_Qspi_Enable+0x58>)
 800aeac:	2201      	movs	r2, #1
 800aeae:	701a      	strb	r2, [r3, #0]
}
 800aeb0:	bf00      	nop
 800aeb2:	3708      	adds	r7, #8
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}
 800aeb8:	2400050e 	.word	0x2400050e

0800aebc <W25QXX_Write_Enable>:

//W25QXX写使能
//将S1寄存器的WEL置位
void W25QXX_Write_Enable(void)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b084      	sub	sp, #16
 800aec0:	af04      	add	r7, sp, #16
	if(W25QXX_QPI_MODE)QSPI_Send_CMD(W25X_WriteEnable,0,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_NONE,QSPI_ADDRESS_8_BITS,QSPI_DATA_NONE);	//QPI,写使能指令,地址为0,无数据_8位地址_无地址_4线传输指令,无空周期,0个字节数据
 800aec2:	4b11      	ldr	r3, [pc, #68]	; (800af08 <W25QXX_Write_Enable+0x4c>)
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d00d      	beq.n	800aee6 <W25QXX_Write_Enable+0x2a>
 800aeca:	2300      	movs	r3, #0
 800aecc:	9302      	str	r3, [sp, #8]
 800aece:	2300      	movs	r3, #0
 800aed0:	9301      	str	r3, [sp, #4]
 800aed2:	2300      	movs	r3, #0
 800aed4:	9300      	str	r3, [sp, #0]
 800aed6:	f44f 7340 	mov.w	r3, #768	; 0x300
 800aeda:	2200      	movs	r2, #0
 800aedc:	2100      	movs	r1, #0
 800aede:	2006      	movs	r0, #6
 800aee0:	f7ff fec0 	bl	800ac64 <QSPI_Send_CMD>
	else QSPI_Send_CMD(W25X_WriteEnable,0,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_NONE,QSPI_ADDRESS_8_BITS,QSPI_DATA_NONE);				//SPI,写使能指令,地址为0,无数据_8位地址_无地址_单线传输指令,无空周期,0个字节数据
}
 800aee4:	e00c      	b.n	800af00 <W25QXX_Write_Enable+0x44>
	else QSPI_Send_CMD(W25X_WriteEnable,0,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_NONE,QSPI_ADDRESS_8_BITS,QSPI_DATA_NONE);				//SPI,写使能指令,地址为0,无数据_8位地址_无地址_单线传输指令,无空周期,0个字节数据
 800aee6:	2300      	movs	r3, #0
 800aee8:	9302      	str	r3, [sp, #8]
 800aeea:	2300      	movs	r3, #0
 800aeec:	9301      	str	r3, [sp, #4]
 800aeee:	2300      	movs	r3, #0
 800aef0:	9300      	str	r3, [sp, #0]
 800aef2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aef6:	2200      	movs	r2, #0
 800aef8:	2100      	movs	r1, #0
 800aefa:	2006      	movs	r0, #6
 800aefc:	f7ff feb2 	bl	800ac64 <QSPI_Send_CMD>
}
 800af00:	bf00      	nop
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	2400050e 	.word	0x2400050e

0800af0c <W25QXX_ReadID>:
//0XEF15,表示芯片型号为W25Q32
//0XEF16,表示芯片型号为W25Q64
//0XEF17,表示芯片型号为W25Q128
//0XEF18,表示芯片型号为W25Q256
uint16_t W25QXX_ReadID(void)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b086      	sub	sp, #24
 800af10:	af04      	add	r7, sp, #16
	uint8_t temp[2];
	uint16_t deviceid;
	if(W25QXX_QPI_MODE)QSPI_Send_CMD(W25X_ManufactDeviceID,0,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_4_LINES,QSPI_ADDRESS_24_BITS,QSPI_DATA_4_LINES);//QPI,读id,地址为0,4线传输数据_24位地址_4线传输地址_4线传输指令,无空周期,2个字节数据
 800af12:	4b1b      	ldr	r3, [pc, #108]	; (800af80 <W25QXX_ReadID+0x74>)
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d010      	beq.n	800af3c <W25QXX_ReadID+0x30>
 800af1a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800af1e:	9302      	str	r3, [sp, #8]
 800af20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800af24:	9301      	str	r3, [sp, #4]
 800af26:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800af2a:	9300      	str	r3, [sp, #0]
 800af2c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800af30:	2200      	movs	r2, #0
 800af32:	2100      	movs	r1, #0
 800af34:	2090      	movs	r0, #144	; 0x90
 800af36:	f7ff fe95 	bl	800ac64 <QSPI_Send_CMD>
 800af3a:	e00f      	b.n	800af5c <W25QXX_ReadID+0x50>
	else QSPI_Send_CMD(W25X_ManufactDeviceID,0,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_1_LINE,QSPI_ADDRESS_24_BITS,QSPI_DATA_1_LINE);			//SPI,读id,地址为0,单线传输数据_24位地址_单线传输地址_单线传输指令,无空周期,2个字节数据
 800af3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800af40:	9302      	str	r3, [sp, #8]
 800af42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800af46:	9301      	str	r3, [sp, #4]
 800af48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af4c:	9300      	str	r3, [sp, #0]
 800af4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af52:	2200      	movs	r2, #0
 800af54:	2100      	movs	r1, #0
 800af56:	2090      	movs	r0, #144	; 0x90
 800af58:	f7ff fe84 	bl	800ac64 <QSPI_Send_CMD>
	QSPI_Receive(temp,2);
 800af5c:	1d3b      	adds	r3, r7, #4
 800af5e:	2102      	movs	r1, #2
 800af60:	4618      	mov	r0, r3
 800af62:	f7ff feab 	bl	800acbc <QSPI_Receive>
	deviceid=(temp[0]<<8)|temp[1];
 800af66:	793b      	ldrb	r3, [r7, #4]
 800af68:	021b      	lsls	r3, r3, #8
 800af6a:	b21a      	sxth	r2, r3
 800af6c:	797b      	ldrb	r3, [r7, #5]
 800af6e:	b21b      	sxth	r3, r3
 800af70:	4313      	orrs	r3, r2
 800af72:	b21b      	sxth	r3, r3
 800af74:	80fb      	strh	r3, [r7, #6]
	return deviceid;
 800af76:	88fb      	ldrh	r3, [r7, #6]
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3708      	adds	r7, #8
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}
 800af80:	2400050e 	.word	0x2400050e

0800af84 <W25QXX_Init>:

//初始化SPI FLASH的IO口
void W25QXX_Init(void)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b086      	sub	sp, #24
 800af88:	af04      	add	r7, sp, #16
    uint8_t temp;
//	QSPI_Init();					//初始化QSPI
 	W25QXX_Qspi_Enable();			//使能QSPI模式
 800af8a:	f7ff ff69 	bl	800ae60 <W25QXX_Qspi_Enable>
	W25QXX_TYPE=W25QXX_ReadID();	//读取FLASH ID.
 800af8e:	f7ff ffbd 	bl	800af0c <W25QXX_ReadID>
 800af92:	4603      	mov	r3, r0
 800af94:	461a      	mov	r2, r3
 800af96:	4b1e      	ldr	r3, [pc, #120]	; (800b010 <W25QXX_Init+0x8c>)
 800af98:	801a      	strh	r2, [r3, #0]
//	printf("ID:%x\r\n",W25QXX_TYPE);
	if(W25QXX_TYPE==W25Q256)        //SPI FLASH为W25Q256
 800af9a:	4b1d      	ldr	r3, [pc, #116]	; (800b010 <W25QXX_Init+0x8c>)
 800af9c:	881b      	ldrh	r3, [r3, #0]
 800af9e:	f64e 7218 	movw	r2, #61208	; 0xef18
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d12f      	bne.n	800b006 <W25QXX_Init+0x82>
    {
        temp=W25QXX_ReadSR(3);      //读取状态寄存器3，判断地址模式
 800afa6:	2003      	movs	r0, #3
 800afa8:	f7ff fec0 	bl	800ad2c <W25QXX_ReadSR>
 800afac:	4603      	mov	r3, r0
 800afae:	71fb      	strb	r3, [r7, #7]
        if((temp&0X01)==0)			//如果不是4字节地址模式,则进入4字节地址模式
 800afb0:	79fb      	ldrb	r3, [r7, #7]
 800afb2:	f003 0301 	and.w	r3, r3, #1
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d10e      	bne.n	800afd8 <W25QXX_Init+0x54>
		{
			W25QXX_Write_Enable();	//写使能
 800afba:	f7ff ff7f 	bl	800aebc <W25QXX_Write_Enable>
			QSPI_Send_CMD(W25X_Enable4ByteAddr,0,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_NONE,QSPI_ADDRESS_8_BITS,QSPI_DATA_NONE);//QPI,使能4字节地址指令,地址为0,无数据_8位地址_无地址_4线传输指令,无空周期,0个字节数据
 800afbe:	2300      	movs	r3, #0
 800afc0:	9302      	str	r3, [sp, #8]
 800afc2:	2300      	movs	r3, #0
 800afc4:	9301      	str	r3, [sp, #4]
 800afc6:	2300      	movs	r3, #0
 800afc8:	9300      	str	r3, [sp, #0]
 800afca:	f44f 7340 	mov.w	r3, #768	; 0x300
 800afce:	2200      	movs	r2, #0
 800afd0:	2100      	movs	r1, #0
 800afd2:	20b7      	movs	r0, #183	; 0xb7
 800afd4:	f7ff fe46 	bl	800ac64 <QSPI_Send_CMD>
		}
		W25QXX_Write_Enable();		//写使能
 800afd8:	f7ff ff70 	bl	800aebc <W25QXX_Write_Enable>
		QSPI_Send_CMD(W25X_SetReadParam,0,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_NONE,QSPI_ADDRESS_8_BITS,QSPI_DATA_4_LINES); 		//QPI,设置读参数指令,地址为0,4线传数据_8位地址_无地址_4线传输指令,无空周期,1个字节数据
 800afdc:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800afe0:	9302      	str	r3, [sp, #8]
 800afe2:	2300      	movs	r3, #0
 800afe4:	9301      	str	r3, [sp, #4]
 800afe6:	2300      	movs	r3, #0
 800afe8:	9300      	str	r3, [sp, #0]
 800afea:	f44f 7340 	mov.w	r3, #768	; 0x300
 800afee:	2200      	movs	r2, #0
 800aff0:	2100      	movs	r1, #0
 800aff2:	20c0      	movs	r0, #192	; 0xc0
 800aff4:	f7ff fe36 	bl	800ac64 <QSPI_Send_CMD>
		temp=3<<4;					//设置P4&P5=11,8个dummy clocks,104M
 800aff8:	2330      	movs	r3, #48	; 0x30
 800affa:	71fb      	strb	r3, [r7, #7]
		QSPI_Transmit(&temp,1);		//发送1个字节
 800affc:	1dfb      	adds	r3, r7, #7
 800affe:	2101      	movs	r1, #1
 800b000:	4618      	mov	r0, r3
 800b002:	f7ff fe77 	bl	800acf4 <QSPI_Transmit>
    }
}
 800b006:	bf00      	nop
 800b008:	3708      	adds	r7, #8
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}
 800b00e:	bf00      	nop
 800b010:	2400000e 	.word	0x2400000e

0800b014 <KEY_Scan>:
//mode:0,不支持连续按;1,支持连续按;
//0，没有任何按键按下
//1，WKUP按下 WK_UP
//注意此函数有响应优先级,KEY0>KEY1>KEY2>WK_UP!!
uint8_t KEY_Scan(uint8_t mode)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b082      	sub	sp, #8
 800b018:	af00      	add	r7, sp, #0
 800b01a:	4603      	mov	r3, r0
 800b01c:	71fb      	strb	r3, [r7, #7]
    static uint8_t key_up=1;     //按键松开标志
    if(mode==1)key_up=1;    //支持连按
 800b01e:	79fb      	ldrb	r3, [r7, #7]
 800b020:	2b01      	cmp	r3, #1
 800b022:	d102      	bne.n	800b02a <KEY_Scan+0x16>
 800b024:	4b3a      	ldr	r3, [pc, #232]	; (800b110 <KEY_Scan+0xfc>)
 800b026:	2201      	movs	r2, #1
 800b028:	701a      	strb	r2, [r3, #0]
    if(key_up&&(KEY0==0||KEY1==0||KEY2==0||WK_UP==1))
 800b02a:	4b39      	ldr	r3, [pc, #228]	; (800b110 <KEY_Scan+0xfc>)
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d047      	beq.n	800b0c2 <KEY_Scan+0xae>
 800b032:	2108      	movs	r1, #8
 800b034:	4837      	ldr	r0, [pc, #220]	; (800b114 <KEY_Scan+0x100>)
 800b036:	f7f8 f965 	bl	8003304 <HAL_GPIO_ReadPin>
 800b03a:	4603      	mov	r3, r0
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d015      	beq.n	800b06c <KEY_Scan+0x58>
 800b040:	2104      	movs	r1, #4
 800b042:	4834      	ldr	r0, [pc, #208]	; (800b114 <KEY_Scan+0x100>)
 800b044:	f7f8 f95e 	bl	8003304 <HAL_GPIO_ReadPin>
 800b048:	4603      	mov	r3, r0
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d00e      	beq.n	800b06c <KEY_Scan+0x58>
 800b04e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b052:	4831      	ldr	r0, [pc, #196]	; (800b118 <KEY_Scan+0x104>)
 800b054:	f7f8 f956 	bl	8003304 <HAL_GPIO_ReadPin>
 800b058:	4603      	mov	r3, r0
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d006      	beq.n	800b06c <KEY_Scan+0x58>
 800b05e:	2101      	movs	r1, #1
 800b060:	482e      	ldr	r0, [pc, #184]	; (800b11c <KEY_Scan+0x108>)
 800b062:	f7f8 f94f 	bl	8003304 <HAL_GPIO_ReadPin>
 800b066:	4603      	mov	r3, r0
 800b068:	2b01      	cmp	r3, #1
 800b06a:	d12a      	bne.n	800b0c2 <KEY_Scan+0xae>
    {
        HAL_Delay(10);
 800b06c:	200a      	movs	r0, #10
 800b06e:	f000 fc5d 	bl	800b92c <HAL_Delay>
        key_up=0;
 800b072:	4b27      	ldr	r3, [pc, #156]	; (800b110 <KEY_Scan+0xfc>)
 800b074:	2200      	movs	r2, #0
 800b076:	701a      	strb	r2, [r3, #0]
        if(KEY0==0)       return KEY0_PRES;
 800b078:	2108      	movs	r1, #8
 800b07a:	4826      	ldr	r0, [pc, #152]	; (800b114 <KEY_Scan+0x100>)
 800b07c:	f7f8 f942 	bl	8003304 <HAL_GPIO_ReadPin>
 800b080:	4603      	mov	r3, r0
 800b082:	2b00      	cmp	r3, #0
 800b084:	d101      	bne.n	800b08a <KEY_Scan+0x76>
 800b086:	2301      	movs	r3, #1
 800b088:	e03e      	b.n	800b108 <KEY_Scan+0xf4>
        else if(KEY1==0)  return KEY1_PRES;
 800b08a:	2104      	movs	r1, #4
 800b08c:	4821      	ldr	r0, [pc, #132]	; (800b114 <KEY_Scan+0x100>)
 800b08e:	f7f8 f939 	bl	8003304 <HAL_GPIO_ReadPin>
 800b092:	4603      	mov	r3, r0
 800b094:	2b00      	cmp	r3, #0
 800b096:	d101      	bne.n	800b09c <KEY_Scan+0x88>
 800b098:	2302      	movs	r3, #2
 800b09a:	e035      	b.n	800b108 <KEY_Scan+0xf4>
        else if(KEY2==0)  return KEY2_PRES;
 800b09c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b0a0:	481d      	ldr	r0, [pc, #116]	; (800b118 <KEY_Scan+0x104>)
 800b0a2:	f7f8 f92f 	bl	8003304 <HAL_GPIO_ReadPin>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d101      	bne.n	800b0b0 <KEY_Scan+0x9c>
 800b0ac:	2303      	movs	r3, #3
 800b0ae:	e02b      	b.n	800b108 <KEY_Scan+0xf4>
        else if(WK_UP==1) return WKUP_PRES;
 800b0b0:	2101      	movs	r1, #1
 800b0b2:	481a      	ldr	r0, [pc, #104]	; (800b11c <KEY_Scan+0x108>)
 800b0b4:	f7f8 f926 	bl	8003304 <HAL_GPIO_ReadPin>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	2b01      	cmp	r3, #1
 800b0bc:	d122      	bne.n	800b104 <KEY_Scan+0xf0>
 800b0be:	2304      	movs	r3, #4
 800b0c0:	e022      	b.n	800b108 <KEY_Scan+0xf4>
    }else if(KEY0==1&&KEY1==1&&KEY2==1&&WK_UP==0)key_up=1;
 800b0c2:	2108      	movs	r1, #8
 800b0c4:	4813      	ldr	r0, [pc, #76]	; (800b114 <KEY_Scan+0x100>)
 800b0c6:	f7f8 f91d 	bl	8003304 <HAL_GPIO_ReadPin>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	2b01      	cmp	r3, #1
 800b0ce:	d11a      	bne.n	800b106 <KEY_Scan+0xf2>
 800b0d0:	2104      	movs	r1, #4
 800b0d2:	4810      	ldr	r0, [pc, #64]	; (800b114 <KEY_Scan+0x100>)
 800b0d4:	f7f8 f916 	bl	8003304 <HAL_GPIO_ReadPin>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b01      	cmp	r3, #1
 800b0dc:	d113      	bne.n	800b106 <KEY_Scan+0xf2>
 800b0de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b0e2:	480d      	ldr	r0, [pc, #52]	; (800b118 <KEY_Scan+0x104>)
 800b0e4:	f7f8 f90e 	bl	8003304 <HAL_GPIO_ReadPin>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	2b01      	cmp	r3, #1
 800b0ec:	d10b      	bne.n	800b106 <KEY_Scan+0xf2>
 800b0ee:	2101      	movs	r1, #1
 800b0f0:	480a      	ldr	r0, [pc, #40]	; (800b11c <KEY_Scan+0x108>)
 800b0f2:	f7f8 f907 	bl	8003304 <HAL_GPIO_ReadPin>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d104      	bne.n	800b106 <KEY_Scan+0xf2>
 800b0fc:	4b04      	ldr	r3, [pc, #16]	; (800b110 <KEY_Scan+0xfc>)
 800b0fe:	2201      	movs	r2, #1
 800b100:	701a      	strb	r2, [r3, #0]
 800b102:	e000      	b.n	800b106 <KEY_Scan+0xf2>
        if(KEY0==0)       return KEY0_PRES;
 800b104:	bf00      	nop
    return 0;   //无按键按下
 800b106:	2300      	movs	r3, #0
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3708      	adds	r7, #8
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}
 800b110:	24000010 	.word	0x24000010
 800b114:	58021c00 	.word	0x58021c00
 800b118:	58020800 	.word	0x58020800
 800b11c:	58020000 	.word	0x58020000

0800b120 <SDRAM_SendCommand>:




static int SDRAM_SendCommand(uint32_t CommandMode, uint32_t Bank, uint32_t RefreshNum, uint32_t RegVal)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b08a      	sub	sp, #40	; 0x28
 800b124:	af00      	add	r7, sp, #0
 800b126:	60f8      	str	r0, [r7, #12]
 800b128:	60b9      	str	r1, [r7, #8]
 800b12a:	607a      	str	r2, [r7, #4]
 800b12c:	603b      	str	r3, [r7, #0]
    uint32_t CommandTarget;
    FMC_SDRAM_CommandTypeDef Command;

    if (Bank == 1) {
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	2b01      	cmp	r3, #1
 800b132:	d102      	bne.n	800b13a <SDRAM_SendCommand+0x1a>
        CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800b134:	2310      	movs	r3, #16
 800b136:	627b      	str	r3, [r7, #36]	; 0x24
 800b138:	e004      	b.n	800b144 <SDRAM_SendCommand+0x24>
    } else if (Bank == 2) {
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	2b02      	cmp	r3, #2
 800b13e:	d101      	bne.n	800b144 <SDRAM_SendCommand+0x24>
        CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 800b140:	2308      	movs	r3, #8
 800b142:	627b      	str	r3, [r7, #36]	; 0x24
    }

    Command.CommandMode = CommandMode;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	617b      	str	r3, [r7, #20]
    Command.CommandTarget = CommandTarget;
 800b148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b14a:	61bb      	str	r3, [r7, #24]
    Command.AutoRefreshNumber = RefreshNum;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	61fb      	str	r3, [r7, #28]
    Command.ModeRegisterDefinition = RegVal;
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	623b      	str	r3, [r7, #32]

    if (HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000) != HAL_OK) {
 800b154:	f107 0314 	add.w	r3, r7, #20
 800b158:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b15c:	4619      	mov	r1, r3
 800b15e:	4807      	ldr	r0, [pc, #28]	; (800b17c <SDRAM_SendCommand+0x5c>)
 800b160:	f7fb fec0 	bl	8006ee4 <HAL_SDRAM_SendCommand>
 800b164:	4603      	mov	r3, r0
 800b166:	2b00      	cmp	r3, #0
 800b168:	d002      	beq.n	800b170 <SDRAM_SendCommand+0x50>
        return -1;
 800b16a:	f04f 33ff 	mov.w	r3, #4294967295
 800b16e:	e000      	b.n	800b172 <SDRAM_SendCommand+0x52>
    }

    return 0;
 800b170:	2300      	movs	r3, #0
}
 800b172:	4618      	mov	r0, r3
 800b174:	3728      	adds	r7, #40	; 0x28
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
 800b17a:	bf00      	nop
 800b17c:	240004c8 	.word	0x240004c8

0800b180 <SDRAM_Init>:



void SDRAM_Init(void)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b082      	sub	sp, #8
 800b184:	af00      	add	r7, sp, #0
    uint32_t temp;

    /* 1. 时钟使能命令 */
    SDRAM_SendCommand(FMC_SDRAM_CMD_CLK_ENABLE, 1, 1, 0);
 800b186:	2300      	movs	r3, #0
 800b188:	2201      	movs	r2, #1
 800b18a:	2101      	movs	r1, #1
 800b18c:	2001      	movs	r0, #1
 800b18e:	f7ff ffc7 	bl	800b120 <SDRAM_SendCommand>

    /* 2. 延时，至少100us */
    HAL_Delay(1);
 800b192:	2001      	movs	r0, #1
 800b194:	f000 fbca 	bl	800b92c <HAL_Delay>

    /* 3. SDRAM全部预充电命令 */
    SDRAM_SendCommand(FMC_SDRAM_CMD_PALL, 1, 1, 0);
 800b198:	2300      	movs	r3, #0
 800b19a:	2201      	movs	r2, #1
 800b19c:	2101      	movs	r1, #1
 800b19e:	2002      	movs	r0, #2
 800b1a0:	f7ff ffbe 	bl	800b120 <SDRAM_SendCommand>

    /* 4. 自动刷新命令 */
    SDRAM_SendCommand(FMC_SDRAM_CMD_AUTOREFRESH_MODE, 1, 8, 0);
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	2208      	movs	r2, #8
 800b1a8:	2101      	movs	r1, #1
 800b1aa:	2003      	movs	r0, #3
 800b1ac:	f7ff ffb8 	bl	800b120 <SDRAM_SendCommand>

    /* 5. 配置SDRAM模式寄存器 */
    temp = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1            |          //设置突发长度：1
 800b1b0:	f44f 730c 	mov.w	r3, #560	; 0x230
 800b1b4:	607b      	str	r3, [r7, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL     |          //设置突发类型：连续
                     SDRAM_MODEREG_CAS_LATENCY_3             |          //设置CL值：3
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD   |          //设置操作模式：标准
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;              //设置突发写模式：单点访问
    SDRAM_SendCommand(FMC_SDRAM_CMD_LOAD_MODE, 1, 1, temp);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	2101      	movs	r1, #1
 800b1bc:	2004      	movs	r0, #4
 800b1be:	f7ff ffaf 	bl	800b120 <SDRAM_SendCommand>
    /*
        SDRAM refresh period / Number of rows）*SDRAM时钟速度 – 20
      = 64000(64 ms) / 4096 *108MHz - 20
      = 1667.5 取值1668
    */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, 1668);
 800b1c2:	f240 6184 	movw	r1, #1668	; 0x684
 800b1c6:	4803      	ldr	r0, [pc, #12]	; (800b1d4 <SDRAM_Init+0x54>)
 800b1c8:	f7fb fec1 	bl	8006f4e <HAL_SDRAM_ProgramRefreshRate>
}
 800b1cc:	bf00      	nop
 800b1ce:	3708      	adds	r7, #8
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}
 800b1d4:	240004c8 	.word	0x240004c8

0800b1d8 <soft_IIC_Init>:
#include "soft_IIC.h"
#include "user_delay.h"


void soft_IIC_Init(void)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	af00      	add	r7, sp, #0

	user_delay_init(400);
 800b1dc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800b1e0:	f000 fb1e 	bl	800b820 <user_delay_init>
    iic_stop(); /* 停止总线上所有设备 */
 800b1e4:	f000 f82c 	bl	800b240 <iic_stop>
}
 800b1e8:	bf00      	nop
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <iic_delay>:
 * @brief       IIC延时函数,用于控制IIC读写速度
 * @param       无
 * @retval      无
 */
static void iic_delay(void)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	af00      	add	r7, sp, #0
	user_delay_us(1); /* 2us的延时, 读写速度在250Khz以内 */
 800b1f0:	2001      	movs	r0, #1
 800b1f2:	f000 fb27 	bl	800b844 <user_delay_us>
}
 800b1f6:	bf00      	nop
 800b1f8:	bd80      	pop	{r7, pc}
	...

0800b1fc <iic_start>:
 * @brief       产生IIC起始信号
 * @param       无
 * @retval      无
 */
void iic_start(void)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	af00      	add	r7, sp, #0
    IIC_SDA(1);
 800b200:	2201      	movs	r2, #1
 800b202:	2108      	movs	r1, #8
 800b204:	480c      	ldr	r0, [pc, #48]	; (800b238 <iic_start+0x3c>)
 800b206:	f7f8 f895 	bl	8003334 <HAL_GPIO_WritePin>
    IIC_SCL(1);
 800b20a:	2201      	movs	r2, #1
 800b20c:	2140      	movs	r1, #64	; 0x40
 800b20e:	480b      	ldr	r0, [pc, #44]	; (800b23c <iic_start+0x40>)
 800b210:	f7f8 f890 	bl	8003334 <HAL_GPIO_WritePin>
    iic_delay();
 800b214:	f7ff ffea 	bl	800b1ec <iic_delay>
    IIC_SDA(0); /* START信号: 当SCL为高时, SDA从高变成低, 表示起始信号 */
 800b218:	2200      	movs	r2, #0
 800b21a:	2108      	movs	r1, #8
 800b21c:	4806      	ldr	r0, [pc, #24]	; (800b238 <iic_start+0x3c>)
 800b21e:	f7f8 f889 	bl	8003334 <HAL_GPIO_WritePin>
    iic_delay();
 800b222:	f7ff ffe3 	bl	800b1ec <iic_delay>
    IIC_SCL(0); /* 钳住I2C总线，准备发送或接收数据 */
 800b226:	2200      	movs	r2, #0
 800b228:	2140      	movs	r1, #64	; 0x40
 800b22a:	4804      	ldr	r0, [pc, #16]	; (800b23c <iic_start+0x40>)
 800b22c:	f7f8 f882 	bl	8003334 <HAL_GPIO_WritePin>
    iic_delay();
 800b230:	f7ff ffdc 	bl	800b1ec <iic_delay>
}
 800b234:	bf00      	nop
 800b236:	bd80      	pop	{r7, pc}
 800b238:	58022000 	.word	0x58022000
 800b23c:	58021c00 	.word	0x58021c00

0800b240 <iic_stop>:
 * @brief       产生IIC停止信号
 * @param       无
 * @retval      无
 */
void iic_stop(void)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	af00      	add	r7, sp, #0
    IIC_SDA(0); /* STOP信号: 当SCL为高时, SDA从低变成高, 表示停止信号 */
 800b244:	2200      	movs	r2, #0
 800b246:	2108      	movs	r1, #8
 800b248:	480a      	ldr	r0, [pc, #40]	; (800b274 <iic_stop+0x34>)
 800b24a:	f7f8 f873 	bl	8003334 <HAL_GPIO_WritePin>
    iic_delay();
 800b24e:	f7ff ffcd 	bl	800b1ec <iic_delay>
    IIC_SCL(1);
 800b252:	2201      	movs	r2, #1
 800b254:	2140      	movs	r1, #64	; 0x40
 800b256:	4808      	ldr	r0, [pc, #32]	; (800b278 <iic_stop+0x38>)
 800b258:	f7f8 f86c 	bl	8003334 <HAL_GPIO_WritePin>
    iic_delay();
 800b25c:	f7ff ffc6 	bl	800b1ec <iic_delay>
    IIC_SDA(1); /* 发送I2C总线结束信号 */
 800b260:	2201      	movs	r2, #1
 800b262:	2108      	movs	r1, #8
 800b264:	4803      	ldr	r0, [pc, #12]	; (800b274 <iic_stop+0x34>)
 800b266:	f7f8 f865 	bl	8003334 <HAL_GPIO_WritePin>
    iic_delay();
 800b26a:	f7ff ffbf 	bl	800b1ec <iic_delay>
}
 800b26e:	bf00      	nop
 800b270:	bd80      	pop	{r7, pc}
 800b272:	bf00      	nop
 800b274:	58022000 	.word	0x58022000
 800b278:	58021c00 	.word	0x58021c00

0800b27c <iic_wait_ack>:
 * @param       无
 * @retval      1，接收应答失败
 *              0，接收应答成功
 */
uint8_t iic_wait_ack(void)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b082      	sub	sp, #8
 800b280:	af00      	add	r7, sp, #0
    uint8_t waittime = 0;
 800b282:	2300      	movs	r3, #0
 800b284:	71fb      	strb	r3, [r7, #7]
    uint8_t rack = 0;
 800b286:	2300      	movs	r3, #0
 800b288:	71bb      	strb	r3, [r7, #6]

    IIC_SDA(1); /* 主机释放SDA线(此时外部器件可以拉低SDA线) */
 800b28a:	2201      	movs	r2, #1
 800b28c:	2108      	movs	r1, #8
 800b28e:	4815      	ldr	r0, [pc, #84]	; (800b2e4 <iic_wait_ack+0x68>)
 800b290:	f7f8 f850 	bl	8003334 <HAL_GPIO_WritePin>
    iic_delay();
 800b294:	f7ff ffaa 	bl	800b1ec <iic_delay>
    IIC_SCL(1); /* SCL=1, 此时从机可以返回ACK */
 800b298:	2201      	movs	r2, #1
 800b29a:	2140      	movs	r1, #64	; 0x40
 800b29c:	4812      	ldr	r0, [pc, #72]	; (800b2e8 <iic_wait_ack+0x6c>)
 800b29e:	f7f8 f849 	bl	8003334 <HAL_GPIO_WritePin>
    iic_delay();
 800b2a2:	f7ff ffa3 	bl	800b1ec <iic_delay>

    while (IIC_READ_SDA) /* 等待应答 */
 800b2a6:	e00a      	b.n	800b2be <iic_wait_ack+0x42>
    {
        waittime++;
 800b2a8:	79fb      	ldrb	r3, [r7, #7]
 800b2aa:	3301      	adds	r3, #1
 800b2ac:	71fb      	strb	r3, [r7, #7]

        if (waittime > 250)
 800b2ae:	79fb      	ldrb	r3, [r7, #7]
 800b2b0:	2bfa      	cmp	r3, #250	; 0xfa
 800b2b2:	d904      	bls.n	800b2be <iic_wait_ack+0x42>
        {
            iic_stop();
 800b2b4:	f7ff ffc4 	bl	800b240 <iic_stop>
            rack = 1;
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	71bb      	strb	r3, [r7, #6]
            break;
 800b2bc:	e006      	b.n	800b2cc <iic_wait_ack+0x50>
    while (IIC_READ_SDA) /* 等待应答 */
 800b2be:	2108      	movs	r1, #8
 800b2c0:	4808      	ldr	r0, [pc, #32]	; (800b2e4 <iic_wait_ack+0x68>)
 800b2c2:	f7f8 f81f 	bl	8003304 <HAL_GPIO_ReadPin>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d1ed      	bne.n	800b2a8 <iic_wait_ack+0x2c>
        }
    }

    IIC_SCL(0); /* SCL=0, 结束ACK检查 */
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	2140      	movs	r1, #64	; 0x40
 800b2d0:	4805      	ldr	r0, [pc, #20]	; (800b2e8 <iic_wait_ack+0x6c>)
 800b2d2:	f7f8 f82f 	bl	8003334 <HAL_GPIO_WritePin>
    iic_delay();
 800b2d6:	f7ff ff89 	bl	800b1ec <iic_delay>
    return rack;
 800b2da:	79bb      	ldrb	r3, [r7, #6]
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3708      	adds	r7, #8
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}
 800b2e4:	58022000 	.word	0x58022000
 800b2e8:	58021c00 	.word	0x58021c00

0800b2ec <iic_ack>:
 * @brief       产生ACK应答
 * @param       无
 * @retval      无
 */
void iic_ack(void)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	af00      	add	r7, sp, #0
    IIC_SDA(0); /* SCL 0 -> 1 时 SDA = 0,表示应答 */
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	2108      	movs	r1, #8
 800b2f4:	480d      	ldr	r0, [pc, #52]	; (800b32c <iic_ack+0x40>)
 800b2f6:	f7f8 f81d 	bl	8003334 <HAL_GPIO_WritePin>
    iic_delay();
 800b2fa:	f7ff ff77 	bl	800b1ec <iic_delay>
    IIC_SCL(1); /* 产生一个时钟 */
 800b2fe:	2201      	movs	r2, #1
 800b300:	2140      	movs	r1, #64	; 0x40
 800b302:	480b      	ldr	r0, [pc, #44]	; (800b330 <iic_ack+0x44>)
 800b304:	f7f8 f816 	bl	8003334 <HAL_GPIO_WritePin>
    iic_delay();
 800b308:	f7ff ff70 	bl	800b1ec <iic_delay>
    IIC_SCL(0);
 800b30c:	2200      	movs	r2, #0
 800b30e:	2140      	movs	r1, #64	; 0x40
 800b310:	4807      	ldr	r0, [pc, #28]	; (800b330 <iic_ack+0x44>)
 800b312:	f7f8 f80f 	bl	8003334 <HAL_GPIO_WritePin>
    iic_delay();
 800b316:	f7ff ff69 	bl	800b1ec <iic_delay>
    IIC_SDA(1); /* 主机释放SDA线 */
 800b31a:	2201      	movs	r2, #1
 800b31c:	2108      	movs	r1, #8
 800b31e:	4803      	ldr	r0, [pc, #12]	; (800b32c <iic_ack+0x40>)
 800b320:	f7f8 f808 	bl	8003334 <HAL_GPIO_WritePin>
    iic_delay();
 800b324:	f7ff ff62 	bl	800b1ec <iic_delay>
}
 800b328:	bf00      	nop
 800b32a:	bd80      	pop	{r7, pc}
 800b32c:	58022000 	.word	0x58022000
 800b330:	58021c00 	.word	0x58021c00

0800b334 <iic_nack>:
 * @brief       不产生ACK应答
 * @param       无
 * @retval      无
 */
void iic_nack(void)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	af00      	add	r7, sp, #0
    IIC_SDA(1); /* SCL 0 -> 1  时 SDA = 1,表示不应答 */
 800b338:	2201      	movs	r2, #1
 800b33a:	2108      	movs	r1, #8
 800b33c:	480a      	ldr	r0, [pc, #40]	; (800b368 <iic_nack+0x34>)
 800b33e:	f7f7 fff9 	bl	8003334 <HAL_GPIO_WritePin>
    iic_delay();
 800b342:	f7ff ff53 	bl	800b1ec <iic_delay>
    IIC_SCL(1); /* 产生一个时钟 */
 800b346:	2201      	movs	r2, #1
 800b348:	2140      	movs	r1, #64	; 0x40
 800b34a:	4808      	ldr	r0, [pc, #32]	; (800b36c <iic_nack+0x38>)
 800b34c:	f7f7 fff2 	bl	8003334 <HAL_GPIO_WritePin>
    iic_delay();
 800b350:	f7ff ff4c 	bl	800b1ec <iic_delay>
    IIC_SCL(0);
 800b354:	2200      	movs	r2, #0
 800b356:	2140      	movs	r1, #64	; 0x40
 800b358:	4804      	ldr	r0, [pc, #16]	; (800b36c <iic_nack+0x38>)
 800b35a:	f7f7 ffeb 	bl	8003334 <HAL_GPIO_WritePin>
    iic_delay();
 800b35e:	f7ff ff45 	bl	800b1ec <iic_delay>
}
 800b362:	bf00      	nop
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop
 800b368:	58022000 	.word	0x58022000
 800b36c:	58021c00 	.word	0x58021c00

0800b370 <iic_send_byte>:
 * @brief       IIC发送一个字节
 * @param       data: 要发送的数据
 * @retval      无
 */
void iic_send_byte(uint8_t data)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af00      	add	r7, sp, #0
 800b376:	4603      	mov	r3, r0
 800b378:	71fb      	strb	r3, [r7, #7]
    uint8_t t;

    for (t = 0; t < 8; t++)
 800b37a:	2300      	movs	r3, #0
 800b37c:	73fb      	strb	r3, [r7, #15]
 800b37e:	e022      	b.n	800b3c6 <iic_send_byte+0x56>
    {
        IIC_SDA((data & 0x80) >> 7); /* 高位先发送 */
 800b380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b384:	2b00      	cmp	r3, #0
 800b386:	da05      	bge.n	800b394 <iic_send_byte+0x24>
 800b388:	2201      	movs	r2, #1
 800b38a:	2108      	movs	r1, #8
 800b38c:	4814      	ldr	r0, [pc, #80]	; (800b3e0 <iic_send_byte+0x70>)
 800b38e:	f7f7 ffd1 	bl	8003334 <HAL_GPIO_WritePin>
 800b392:	e004      	b.n	800b39e <iic_send_byte+0x2e>
 800b394:	2200      	movs	r2, #0
 800b396:	2108      	movs	r1, #8
 800b398:	4811      	ldr	r0, [pc, #68]	; (800b3e0 <iic_send_byte+0x70>)
 800b39a:	f7f7 ffcb 	bl	8003334 <HAL_GPIO_WritePin>
        iic_delay();
 800b39e:	f7ff ff25 	bl	800b1ec <iic_delay>
        IIC_SCL(1);
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	2140      	movs	r1, #64	; 0x40
 800b3a6:	480f      	ldr	r0, [pc, #60]	; (800b3e4 <iic_send_byte+0x74>)
 800b3a8:	f7f7 ffc4 	bl	8003334 <HAL_GPIO_WritePin>
        iic_delay();
 800b3ac:	f7ff ff1e 	bl	800b1ec <iic_delay>
        IIC_SCL(0);
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	2140      	movs	r1, #64	; 0x40
 800b3b4:	480b      	ldr	r0, [pc, #44]	; (800b3e4 <iic_send_byte+0x74>)
 800b3b6:	f7f7 ffbd 	bl	8003334 <HAL_GPIO_WritePin>
        data <<= 1; /* 左移1位,用于下一次发送 */
 800b3ba:	79fb      	ldrb	r3, [r7, #7]
 800b3bc:	005b      	lsls	r3, r3, #1
 800b3be:	71fb      	strb	r3, [r7, #7]
    for (t = 0; t < 8; t++)
 800b3c0:	7bfb      	ldrb	r3, [r7, #15]
 800b3c2:	3301      	adds	r3, #1
 800b3c4:	73fb      	strb	r3, [r7, #15]
 800b3c6:	7bfb      	ldrb	r3, [r7, #15]
 800b3c8:	2b07      	cmp	r3, #7
 800b3ca:	d9d9      	bls.n	800b380 <iic_send_byte+0x10>
    }
    IIC_SDA(1); /* 发送完成, 主机释放SDA线 */
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	2108      	movs	r1, #8
 800b3d0:	4803      	ldr	r0, [pc, #12]	; (800b3e0 <iic_send_byte+0x70>)
 800b3d2:	f7f7 ffaf 	bl	8003334 <HAL_GPIO_WritePin>
}
 800b3d6:	bf00      	nop
 800b3d8:	3710      	adds	r7, #16
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
 800b3de:	bf00      	nop
 800b3e0:	58022000 	.word	0x58022000
 800b3e4:	58021c00 	.word	0x58021c00

0800b3e8 <iic_read_byte>:
 * @brief       IIC读取一个字节
 * @param       ack:  ack=1时，发送ack; ack=0时，发送nack
 * @retval      接收到的数据
 */
uint8_t iic_read_byte(uint8_t ack)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b084      	sub	sp, #16
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	71fb      	strb	r3, [r7, #7]
    uint8_t i, receive = 0;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	73bb      	strb	r3, [r7, #14]

    for (i = 0; i < 8; i++) /* 接收1个字节数据 */
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	73fb      	strb	r3, [r7, #15]
 800b3fa:	e01d      	b.n	800b438 <iic_read_byte+0x50>
    {
        receive <<= 1; /* 高位先输出,所以先收到的数据位要左移 */
 800b3fc:	7bbb      	ldrb	r3, [r7, #14]
 800b3fe:	005b      	lsls	r3, r3, #1
 800b400:	73bb      	strb	r3, [r7, #14]
        IIC_SCL(1);
 800b402:	2201      	movs	r2, #1
 800b404:	2140      	movs	r1, #64	; 0x40
 800b406:	4814      	ldr	r0, [pc, #80]	; (800b458 <iic_read_byte+0x70>)
 800b408:	f7f7 ff94 	bl	8003334 <HAL_GPIO_WritePin>
        iic_delay();
 800b40c:	f7ff feee 	bl	800b1ec <iic_delay>

        if (IIC_READ_SDA)
 800b410:	2108      	movs	r1, #8
 800b412:	4812      	ldr	r0, [pc, #72]	; (800b45c <iic_read_byte+0x74>)
 800b414:	f7f7 ff76 	bl	8003304 <HAL_GPIO_ReadPin>
 800b418:	4603      	mov	r3, r0
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d002      	beq.n	800b424 <iic_read_byte+0x3c>
        {
            receive++;
 800b41e:	7bbb      	ldrb	r3, [r7, #14]
 800b420:	3301      	adds	r3, #1
 800b422:	73bb      	strb	r3, [r7, #14]
        }

        IIC_SCL(0);
 800b424:	2200      	movs	r2, #0
 800b426:	2140      	movs	r1, #64	; 0x40
 800b428:	480b      	ldr	r0, [pc, #44]	; (800b458 <iic_read_byte+0x70>)
 800b42a:	f7f7 ff83 	bl	8003334 <HAL_GPIO_WritePin>
        iic_delay();
 800b42e:	f7ff fedd 	bl	800b1ec <iic_delay>
    for (i = 0; i < 8; i++) /* 接收1个字节数据 */
 800b432:	7bfb      	ldrb	r3, [r7, #15]
 800b434:	3301      	adds	r3, #1
 800b436:	73fb      	strb	r3, [r7, #15]
 800b438:	7bfb      	ldrb	r3, [r7, #15]
 800b43a:	2b07      	cmp	r3, #7
 800b43c:	d9de      	bls.n	800b3fc <iic_read_byte+0x14>
    }

    if (!ack)
 800b43e:	79fb      	ldrb	r3, [r7, #7]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d102      	bne.n	800b44a <iic_read_byte+0x62>
    {
        iic_nack(); /* 发送nACK */
 800b444:	f7ff ff76 	bl	800b334 <iic_nack>
 800b448:	e001      	b.n	800b44e <iic_read_byte+0x66>
    }
    else
    {
        iic_ack(); /* 发送ACK */
 800b44a:	f7ff ff4f 	bl	800b2ec <iic_ack>
    }

    return receive;
 800b44e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b450:	4618      	mov	r0, r3
 800b452:	3710      	adds	r7, #16
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}
 800b458:	58021c00 	.word	0x58021c00
 800b45c:	58022000 	.word	0x58022000

0800b460 <touch_hw_reset>:
 * @brief       RGB LCD模块触摸硬件复位
 * @param       addr: 复位后使用的IIC通讯地址
 * @retval      无
 */
static void touch_hw_reset(uint8_t addr)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b088      	sub	sp, #32
 800b464:	af00      	add	r7, sp, #0
 800b466:	4603      	mov	r3, r0
 800b468:	71fb      	strb	r3, [r7, #7]
    GPIO_InitTypeDef gpio_init_struct = {0};
 800b46a:	f107 030c 	add.w	r3, r7, #12
 800b46e:	2200      	movs	r2, #0
 800b470:	601a      	str	r2, [r3, #0]
 800b472:	605a      	str	r2, [r3, #4]
 800b474:	609a      	str	r2, [r3, #8]
 800b476:	60da      	str	r2, [r3, #12]
 800b478:	611a      	str	r2, [r3, #16]

    /* 配置PEN引脚为输出 */
    gpio_init_struct.Pin    = TP_PEN_Pin;
 800b47a:	2380      	movs	r3, #128	; 0x80
 800b47c:	60fb      	str	r3, [r7, #12]
    gpio_init_struct.Mode   = GPIO_MODE_OUTPUT_PP;
 800b47e:	2301      	movs	r3, #1
 800b480:	613b      	str	r3, [r7, #16]
    gpio_init_struct.Pull   = GPIO_PULLUP;
 800b482:	2301      	movs	r3, #1
 800b484:	617b      	str	r3, [r7, #20]
    gpio_init_struct.Speed  = GPIO_SPEED_FREQ_HIGH;
 800b486:	2302      	movs	r3, #2
 800b488:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(TP_PEN_GPIO_Port, &gpio_init_struct);
 800b48a:	f107 030c 	add.w	r3, r7, #12
 800b48e:	4619      	mov	r1, r3
 800b490:	482b      	ldr	r0, [pc, #172]	; (800b540 <touch_hw_reset+0xe0>)
 800b492:	f7f7 fd87 	bl	8002fa4 <HAL_GPIO_Init>

    switch (addr)
 800b496:	79fb      	ldrb	r3, [r7, #7]
 800b498:	2b28      	cmp	r3, #40	; 0x28
 800b49a:	d002      	beq.n	800b4a2 <touch_hw_reset+0x42>
 800b49c:	2bba      	cmp	r3, #186	; 0xba
 800b49e:	d01d      	beq.n	800b4dc <touch_hw_reset+0x7c>
            HAL_Delay(10);
            break;
       }
        default:
        {
            break;
 800b4a0:	e034      	b.n	800b50c <touch_hw_reset+0xac>
             HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_RESET);
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b4a8:	4826      	ldr	r0, [pc, #152]	; (800b544 <touch_hw_reset+0xe4>)
 800b4aa:	f7f7 ff43 	bl	8003334 <HAL_GPIO_WritePin>
             HAL_GPIO_WritePin(TP_PEN_GPIO_Port, TP_PEN_Pin, GPIO_PIN_RESET);
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	2180      	movs	r1, #128	; 0x80
 800b4b2:	4823      	ldr	r0, [pc, #140]	; (800b540 <touch_hw_reset+0xe0>)
 800b4b4:	f7f7 ff3e 	bl	8003334 <HAL_GPIO_WritePin>
             HAL_GPIO_WritePin(TP_PEN_GPIO_Port, TP_PEN_Pin, GPIO_PIN_SET);
 800b4b8:	2201      	movs	r2, #1
 800b4ba:	2180      	movs	r1, #128	; 0x80
 800b4bc:	4820      	ldr	r0, [pc, #128]	; (800b540 <touch_hw_reset+0xe0>)
 800b4be:	f7f7 ff39 	bl	8003334 <HAL_GPIO_WritePin>
             HAL_Delay(1);
 800b4c2:	2001      	movs	r0, #1
 800b4c4:	f000 fa32 	bl	800b92c <HAL_Delay>
             HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_SET);
 800b4c8:	2201      	movs	r2, #1
 800b4ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b4ce:	481d      	ldr	r0, [pc, #116]	; (800b544 <touch_hw_reset+0xe4>)
 800b4d0:	f7f7 ff30 	bl	8003334 <HAL_GPIO_WritePin>
             HAL_Delay(10);
 800b4d4:	200a      	movs	r0, #10
 800b4d6:	f000 fa29 	bl	800b92c <HAL_Delay>
            break;
 800b4da:	e017      	b.n	800b50c <touch_hw_reset+0xac>
            HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_RESET);
 800b4dc:	2200      	movs	r2, #0
 800b4de:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b4e2:	4818      	ldr	r0, [pc, #96]	; (800b544 <touch_hw_reset+0xe4>)
 800b4e4:	f7f7 ff26 	bl	8003334 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(TP_PEN_GPIO_Port, TP_PEN_Pin, GPIO_PIN_RESET);
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	2180      	movs	r1, #128	; 0x80
 800b4ec:	4814      	ldr	r0, [pc, #80]	; (800b540 <touch_hw_reset+0xe0>)
 800b4ee:	f7f7 ff21 	bl	8003334 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 800b4f2:	2001      	movs	r0, #1
 800b4f4:	f000 fa1a 	bl	800b92c <HAL_Delay>
            HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_SET);
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b4fe:	4811      	ldr	r0, [pc, #68]	; (800b544 <touch_hw_reset+0xe4>)
 800b500:	f7f7 ff18 	bl	8003334 <HAL_GPIO_WritePin>
            HAL_Delay(10);
 800b504:	200a      	movs	r0, #10
 800b506:	f000 fa11 	bl	800b92c <HAL_Delay>
            break;
 800b50a:	bf00      	nop
        }
    }
    /* 重新配置PEN引脚为输入 */
    gpio_init_struct.Pin    = TP_PEN_Pin;
 800b50c:	2380      	movs	r3, #128	; 0x80
 800b50e:	60fb      	str	r3, [r7, #12]
    gpio_init_struct.Mode   = GPIO_MODE_INPUT;
 800b510:	2300      	movs	r3, #0
 800b512:	613b      	str	r3, [r7, #16]
    gpio_init_struct.Pull   = GPIO_NOPULL;
 800b514:	2300      	movs	r3, #0
 800b516:	617b      	str	r3, [r7, #20]
    gpio_init_struct.Speed  = GPIO_SPEED_FREQ_HIGH;
 800b518:	2302      	movs	r3, #2
 800b51a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(TP_PEN_GPIO_Port, &gpio_init_struct);
 800b51c:	f107 030c 	add.w	r3, r7, #12
 800b520:	4619      	mov	r1, r3
 800b522:	4807      	ldr	r0, [pc, #28]	; (800b540 <touch_hw_reset+0xe0>)
 800b524:	f7f7 fd3e 	bl	8002fa4 <HAL_GPIO_Init>

    touch_iic_addr = addr>>1;
 800b528:	79fb      	ldrb	r3, [r7, #7]
 800b52a:	085b      	lsrs	r3, r3, #1
 800b52c:	b2da      	uxtb	r2, r3
 800b52e:	4b06      	ldr	r3, [pc, #24]	; (800b548 <touch_hw_reset+0xe8>)
 800b530:	701a      	strb	r2, [r3, #0]
    HAL_Delay(100);
 800b532:	2064      	movs	r0, #100	; 0x64
 800b534:	f000 f9fa 	bl	800b92c <HAL_Delay>
}
 800b538:	bf00      	nop
 800b53a:	3720      	adds	r7, #32
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}
 800b540:	58021c00 	.word	0x58021c00
 800b544:	58022000 	.word	0x58022000
 800b548:	2400050f 	.word	0x2400050f

0800b54c <touch_write_reg>:
 *              len: 待写入数据的长度
 * @retval      1  : 写ATK-RGBLCD模块触摸寄存器成功
 *              0: 写ATK-RGBLCD模块触摸寄存器失败
 */
static uint8_t touch_write_reg(uint16_t reg, uint8_t *buf, uint8_t len)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b084      	sub	sp, #16
 800b550:	af00      	add	r7, sp, #0
 800b552:	4603      	mov	r3, r0
 800b554:	6039      	str	r1, [r7, #0]
 800b556:	80fb      	strh	r3, [r7, #6]
 800b558:	4613      	mov	r3, r2
 800b55a:	717b      	strb	r3, [r7, #5]
    uint8_t buf_index;
    uint8_t ret;

    iic_start();
 800b55c:	f7ff fe4e 	bl	800b1fc <iic_start>
    iic_send_byte((touch_iic_addr << 1) | 0);
 800b560:	4b1f      	ldr	r3, [pc, #124]	; (800b5e0 <touch_write_reg+0x94>)
 800b562:	781b      	ldrb	r3, [r3, #0]
 800b564:	005b      	lsls	r3, r3, #1
 800b566:	b2db      	uxtb	r3, r3
 800b568:	4618      	mov	r0, r3
 800b56a:	f7ff ff01 	bl	800b370 <iic_send_byte>
    iic_wait_ack();
 800b56e:	f7ff fe85 	bl	800b27c <iic_wait_ack>
    iic_send_byte((uint8_t)(reg >> 8) & 0xFF);
 800b572:	88fb      	ldrh	r3, [r7, #6]
 800b574:	0a1b      	lsrs	r3, r3, #8
 800b576:	b29b      	uxth	r3, r3
 800b578:	b2db      	uxtb	r3, r3
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7ff fef8 	bl	800b370 <iic_send_byte>
    iic_wait_ack();
 800b580:	f7ff fe7c 	bl	800b27c <iic_wait_ack>
    iic_send_byte((uint8_t)reg & 0xFF);
 800b584:	88fb      	ldrh	r3, [r7, #6]
 800b586:	b2db      	uxtb	r3, r3
 800b588:	4618      	mov	r0, r3
 800b58a:	f7ff fef1 	bl	800b370 <iic_send_byte>
    iic_wait_ack();
 800b58e:	f7ff fe75 	bl	800b27c <iic_wait_ack>

    for (buf_index=0; buf_index<len; buf_index++)
 800b592:	2300      	movs	r3, #0
 800b594:	73fb      	strb	r3, [r7, #15]
 800b596:	e010      	b.n	800b5ba <touch_write_reg+0x6e>
    {
        iic_send_byte(buf[buf_index]);
 800b598:	7bfb      	ldrb	r3, [r7, #15]
 800b59a:	683a      	ldr	r2, [r7, #0]
 800b59c:	4413      	add	r3, r2
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f7ff fee5 	bl	800b370 <iic_send_byte>
        ret = iic_wait_ack();
 800b5a6:	f7ff fe69 	bl	800b27c <iic_wait_ack>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	73bb      	strb	r3, [r7, #14]
        if (ret != 0)
 800b5ae:	7bbb      	ldrb	r3, [r7, #14]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d107      	bne.n	800b5c4 <touch_write_reg+0x78>
    for (buf_index=0; buf_index<len; buf_index++)
 800b5b4:	7bfb      	ldrb	r3, [r7, #15]
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	73fb      	strb	r3, [r7, #15]
 800b5ba:	7bfa      	ldrb	r2, [r7, #15]
 800b5bc:	797b      	ldrb	r3, [r7, #5]
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d3ea      	bcc.n	800b598 <touch_write_reg+0x4c>
 800b5c2:	e000      	b.n	800b5c6 <touch_write_reg+0x7a>
        {
            break;
 800b5c4:	bf00      	nop
        }
    }

    iic_stop();
 800b5c6:	f7ff fe3b 	bl	800b240 <iic_stop>

    if (ret != 0)
 800b5ca:	7bbb      	ldrb	r3, [r7, #14]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d001      	beq.n	800b5d4 <touch_write_reg+0x88>
    {
        return 0;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	e000      	b.n	800b5d6 <touch_write_reg+0x8a>
    }

    return 1;
 800b5d4:	2301      	movs	r3, #1
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3710      	adds	r7, #16
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
 800b5de:	bf00      	nop
 800b5e0:	2400050f 	.word	0x2400050f

0800b5e4 <touch_read_reg>:
 *              buf: 读取的数据
 *              len: 待读取数据的长度
 * @retval      无
 */
static void touch_read_reg(uint16_t reg, uint8_t *buf, uint8_t len)
{
 800b5e4:	b590      	push	{r4, r7, lr}
 800b5e6:	b085      	sub	sp, #20
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	6039      	str	r1, [r7, #0]
 800b5ee:	80fb      	strh	r3, [r7, #6]
 800b5f0:	4613      	mov	r3, r2
 800b5f2:	717b      	strb	r3, [r7, #5]
    uint8_t buf_index;

    iic_start();
 800b5f4:	f7ff fe02 	bl	800b1fc <iic_start>
    iic_send_byte((touch_iic_addr << 1) | 0);
 800b5f8:	4b24      	ldr	r3, [pc, #144]	; (800b68c <touch_read_reg+0xa8>)
 800b5fa:	781b      	ldrb	r3, [r3, #0]
 800b5fc:	005b      	lsls	r3, r3, #1
 800b5fe:	b2db      	uxtb	r3, r3
 800b600:	4618      	mov	r0, r3
 800b602:	f7ff feb5 	bl	800b370 <iic_send_byte>
    iic_wait_ack();
 800b606:	f7ff fe39 	bl	800b27c <iic_wait_ack>
    iic_send_byte((uint8_t)(reg >> 8) & 0xFF);
 800b60a:	88fb      	ldrh	r3, [r7, #6]
 800b60c:	0a1b      	lsrs	r3, r3, #8
 800b60e:	b29b      	uxth	r3, r3
 800b610:	b2db      	uxtb	r3, r3
 800b612:	4618      	mov	r0, r3
 800b614:	f7ff feac 	bl	800b370 <iic_send_byte>
    iic_wait_ack();
 800b618:	f7ff fe30 	bl	800b27c <iic_wait_ack>
    iic_send_byte((uint8_t)reg & 0xFF);
 800b61c:	88fb      	ldrh	r3, [r7, #6]
 800b61e:	b2db      	uxtb	r3, r3
 800b620:	4618      	mov	r0, r3
 800b622:	f7ff fea5 	bl	800b370 <iic_send_byte>
    iic_wait_ack();
 800b626:	f7ff fe29 	bl	800b27c <iic_wait_ack>
    iic_start();
 800b62a:	f7ff fde7 	bl	800b1fc <iic_start>
    iic_send_byte((touch_iic_addr << 1) | 1);
 800b62e:	4b17      	ldr	r3, [pc, #92]	; (800b68c <touch_read_reg+0xa8>)
 800b630:	781b      	ldrb	r3, [r3, #0]
 800b632:	005b      	lsls	r3, r3, #1
 800b634:	b25b      	sxtb	r3, r3
 800b636:	f043 0301 	orr.w	r3, r3, #1
 800b63a:	b25b      	sxtb	r3, r3
 800b63c:	b2db      	uxtb	r3, r3
 800b63e:	4618      	mov	r0, r3
 800b640:	f7ff fe96 	bl	800b370 <iic_send_byte>
    iic_wait_ack();
 800b644:	f7ff fe1a 	bl	800b27c <iic_wait_ack>

    for (buf_index=0; buf_index<len - 1; buf_index++)
 800b648:	2300      	movs	r3, #0
 800b64a:	73fb      	strb	r3, [r7, #15]
 800b64c:	e00a      	b.n	800b664 <touch_read_reg+0x80>
    {
        buf[buf_index] = iic_read_byte(1);
 800b64e:	7bfb      	ldrb	r3, [r7, #15]
 800b650:	683a      	ldr	r2, [r7, #0]
 800b652:	18d4      	adds	r4, r2, r3
 800b654:	2001      	movs	r0, #1
 800b656:	f7ff fec7 	bl	800b3e8 <iic_read_byte>
 800b65a:	4603      	mov	r3, r0
 800b65c:	7023      	strb	r3, [r4, #0]
    for (buf_index=0; buf_index<len - 1; buf_index++)
 800b65e:	7bfb      	ldrb	r3, [r7, #15]
 800b660:	3301      	adds	r3, #1
 800b662:	73fb      	strb	r3, [r7, #15]
 800b664:	7bfa      	ldrb	r2, [r7, #15]
 800b666:	797b      	ldrb	r3, [r7, #5]
 800b668:	3b01      	subs	r3, #1
 800b66a:	429a      	cmp	r2, r3
 800b66c:	dbef      	blt.n	800b64e <touch_read_reg+0x6a>
    }

    buf[buf_index] = iic_read_byte(0);
 800b66e:	7bfb      	ldrb	r3, [r7, #15]
 800b670:	683a      	ldr	r2, [r7, #0]
 800b672:	18d4      	adds	r4, r2, r3
 800b674:	2000      	movs	r0, #0
 800b676:	f7ff feb7 	bl	800b3e8 <iic_read_byte>
 800b67a:	4603      	mov	r3, r0
 800b67c:	7023      	strb	r3, [r4, #0]

    iic_stop();
 800b67e:	f7ff fddf 	bl	800b240 <iic_stop>
}
 800b682:	bf00      	nop
 800b684:	3714      	adds	r7, #20
 800b686:	46bd      	mov	sp, r7
 800b688:	bd90      	pop	{r4, r7, pc}
 800b68a:	bf00      	nop
 800b68c:	2400050f 	.word	0x2400050f

0800b690 <touch_sw_reset>:

static void touch_sw_reset(void)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
    uint8_t dat;

    dat = 0x02;
 800b696:	2302      	movs	r3, #2
 800b698:	71fb      	strb	r3, [r7, #7]
    touch_write_reg(REG_CTRL, &dat, 1);
 800b69a:	1dfb      	adds	r3, r7, #7
 800b69c:	2201      	movs	r2, #1
 800b69e:	4619      	mov	r1, r3
 800b6a0:	f248 0040 	movw	r0, #32832	; 0x8040
 800b6a4:	f7ff ff52 	bl	800b54c <touch_write_reg>
    HAL_Delay(10);
 800b6a8:	200a      	movs	r0, #10
 800b6aa:	f000 f93f 	bl	800b92c <HAL_Delay>

    dat = 0x00;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	71fb      	strb	r3, [r7, #7]
    touch_write_reg(REG_CTRL, &dat, 1);
 800b6b2:	1dfb      	adds	r3, r7, #7
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	f248 0040 	movw	r0, #32832	; 0x8040
 800b6bc:	f7ff ff46 	bl	800b54c <touch_write_reg>
}
 800b6c0:	bf00      	nop
 800b6c2:	3708      	adds	r7, #8
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <touch_get_pid>:
 * @brief       获取RGB LCD模块触摸的PID
 * @param       pid: 获取到的PID（ASCII）
 * @retval      无
 */
static void touch_get_pid(char *pid)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
    touch_read_reg(REG_PID, (uint8_t *)pid, 4);
 800b6d0:	2204      	movs	r2, #4
 800b6d2:	6879      	ldr	r1, [r7, #4]
 800b6d4:	f248 1040 	movw	r0, #33088	; 0x8140
 800b6d8:	f7ff ff84 	bl	800b5e4 <touch_read_reg>
    pid[4] = '\0';
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	3304      	adds	r3, #4
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	701a      	strb	r2, [r3, #0]
}
 800b6e4:	bf00      	nop
 800b6e6:	3708      	adds	r7, #8
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <touch_Scanf>:
/*
	功能：触摸扫描，判断当前是否被触摸

*/
void touch_Scanf(void)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b082      	sub	sp, #8
 800b6f0:	af00      	add	r7, sp, #0
	static uint8_t timer=0;
	uint8_t i=0;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	71fb      	strb	r3, [r7, #7]
	uint8_t _temp;	//中间变量
	uint8_t data_temp[6];	//中间变量

	timer++;
 800b6f6:	4b3f      	ldr	r3, [pc, #252]	; (800b7f4 <touch_Scanf+0x108>)
 800b6f8:	781b      	ldrb	r3, [r3, #0]
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	b2da      	uxtb	r2, r3
 800b6fe:	4b3d      	ldr	r3, [pc, #244]	; (800b7f4 <touch_Scanf+0x108>)
 800b700:	701a      	strb	r2, [r3, #0]
	if(timer<10) //坐标信息10ms刷新周期
 800b702:	4b3c      	ldr	r3, [pc, #240]	; (800b7f4 <touch_Scanf+0x108>)
 800b704:	781b      	ldrb	r3, [r3, #0]
 800b706:	2b09      	cmp	r3, #9
 800b708:	d970      	bls.n	800b7ec <touch_Scanf+0x100>
	{
		return;
	}
	timer=0;
 800b70a:	4b3a      	ldr	r3, [pc, #232]	; (800b7f4 <touch_Scanf+0x108>)
 800b70c:	2200      	movs	r2, #0
 800b70e:	701a      	strb	r2, [r3, #0]

	touch_read_reg(REG_TPINFO, &_temp, 1);
 800b710:	1dbb      	adds	r3, r7, #6
 800b712:	2201      	movs	r2, #1
 800b714:	4619      	mov	r1, r3
 800b716:	f248 104e 	movw	r0, #33102	; 0x814e
 800b71a:	f7ff ff63 	bl	800b5e4 <touch_read_reg>

	User_Touch.state = (_temp & 0x80);	//触摸状态
 800b71e:	79bb      	ldrb	r3, [r7, #6]
 800b720:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b724:	b2da      	uxtb	r2, r3
 800b726:	4b34      	ldr	r3, [pc, #208]	; (800b7f8 <touch_Scanf+0x10c>)
 800b728:	701a      	strb	r2, [r3, #0]
	User_Touch.num = (_temp & 0x0f);	//获取触摸点数
 800b72a:	79bb      	ldrb	r3, [r7, #6]
 800b72c:	f003 030f 	and.w	r3, r3, #15
 800b730:	b2da      	uxtb	r2, r3
 800b732:	4b31      	ldr	r3, [pc, #196]	; (800b7f8 <touch_Scanf+0x10c>)
 800b734:	705a      	strb	r2, [r3, #1]

	if(User_Touch.state) //有触摸，并读出数据
 800b736:	4b30      	ldr	r3, [pc, #192]	; (800b7f8 <touch_Scanf+0x10c>)
 800b738:	781b      	ldrb	r3, [r3, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d057      	beq.n	800b7ee <touch_Scanf+0x102>
	{
		for(i=0; i<User_Touch.num; i++)
 800b73e:	2300      	movs	r3, #0
 800b740:	71fb      	strb	r3, [r7, #7]
 800b742:	e044      	b.n	800b7ce <touch_Scanf+0xe2>
		//读出触摸点数的所有数据
		{
			touch_read_reg(REG_TP1+i*8, data_temp, 6);	//读出触摸x坐标的低8位
 800b744:	79fa      	ldrb	r2, [r7, #7]
 800b746:	f241 032a 	movw	r3, #4138	; 0x102a
 800b74a:	4413      	add	r3, r2
 800b74c:	b29b      	uxth	r3, r3
 800b74e:	00db      	lsls	r3, r3, #3
 800b750:	b29b      	uxth	r3, r3
 800b752:	4639      	mov	r1, r7
 800b754:	2206      	movs	r2, #6
 800b756:	4618      	mov	r0, r3
 800b758:	f7ff ff44 	bl	800b5e4 <touch_read_reg>
			User_Touch.point[i].x  = (uint16_t)(data_temp[1] << 8) | data_temp[0];
 800b75c:	787b      	ldrb	r3, [r7, #1]
 800b75e:	b29b      	uxth	r3, r3
 800b760:	021b      	lsls	r3, r3, #8
 800b762:	b299      	uxth	r1, r3
 800b764:	783b      	ldrb	r3, [r7, #0]
 800b766:	b29b      	uxth	r3, r3
 800b768:	79fa      	ldrb	r2, [r7, #7]
 800b76a:	430b      	orrs	r3, r1
 800b76c:	b298      	uxth	r0, r3
 800b76e:	4922      	ldr	r1, [pc, #136]	; (800b7f8 <touch_Scanf+0x10c>)
 800b770:	4613      	mov	r3, r2
 800b772:	005b      	lsls	r3, r3, #1
 800b774:	4413      	add	r3, r2
 800b776:	005b      	lsls	r3, r3, #1
 800b778:	440b      	add	r3, r1
 800b77a:	3302      	adds	r3, #2
 800b77c:	4602      	mov	r2, r0
 800b77e:	801a      	strh	r2, [r3, #0]
			User_Touch.point[i].y  = (uint16_t)(data_temp[3] << 8) | data_temp[2];
 800b780:	78fb      	ldrb	r3, [r7, #3]
 800b782:	b29b      	uxth	r3, r3
 800b784:	021b      	lsls	r3, r3, #8
 800b786:	b299      	uxth	r1, r3
 800b788:	78bb      	ldrb	r3, [r7, #2]
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	79fa      	ldrb	r2, [r7, #7]
 800b78e:	430b      	orrs	r3, r1
 800b790:	b298      	uxth	r0, r3
 800b792:	4919      	ldr	r1, [pc, #100]	; (800b7f8 <touch_Scanf+0x10c>)
 800b794:	4613      	mov	r3, r2
 800b796:	005b      	lsls	r3, r3, #1
 800b798:	4413      	add	r3, r2
 800b79a:	005b      	lsls	r3, r3, #1
 800b79c:	440b      	add	r3, r1
 800b79e:	3304      	adds	r3, #4
 800b7a0:	4602      	mov	r2, r0
 800b7a2:	801a      	strh	r2, [r3, #0]
			User_Touch.point[i].size  = (uint16_t)(data_temp[5] << 8) | data_temp[4];
 800b7a4:	797b      	ldrb	r3, [r7, #5]
 800b7a6:	b29b      	uxth	r3, r3
 800b7a8:	021b      	lsls	r3, r3, #8
 800b7aa:	b299      	uxth	r1, r3
 800b7ac:	793b      	ldrb	r3, [r7, #4]
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	79fa      	ldrb	r2, [r7, #7]
 800b7b2:	430b      	orrs	r3, r1
 800b7b4:	b298      	uxth	r0, r3
 800b7b6:	4910      	ldr	r1, [pc, #64]	; (800b7f8 <touch_Scanf+0x10c>)
 800b7b8:	4613      	mov	r3, r2
 800b7ba:	005b      	lsls	r3, r3, #1
 800b7bc:	4413      	add	r3, r2
 800b7be:	005b      	lsls	r3, r3, #1
 800b7c0:	440b      	add	r3, r1
 800b7c2:	3306      	adds	r3, #6
 800b7c4:	4602      	mov	r2, r0
 800b7c6:	801a      	strh	r2, [r3, #0]
		for(i=0; i<User_Touch.num; i++)
 800b7c8:	79fb      	ldrb	r3, [r7, #7]
 800b7ca:	3301      	adds	r3, #1
 800b7cc:	71fb      	strb	r3, [r7, #7]
 800b7ce:	4b0a      	ldr	r3, [pc, #40]	; (800b7f8 <touch_Scanf+0x10c>)
 800b7d0:	785b      	ldrb	r3, [r3, #1]
 800b7d2:	79fa      	ldrb	r2, [r7, #7]
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d3b5      	bcc.n	800b744 <touch_Scanf+0x58>
		}
		_temp = 0;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	71bb      	strb	r3, [r7, #6]
		touch_write_reg(REG_TPINFO, &_temp, 1);//清除数据标志位
 800b7dc:	1dbb      	adds	r3, r7, #6
 800b7de:	2201      	movs	r2, #1
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	f248 104e 	movw	r0, #33102	; 0x814e
 800b7e6:	f7ff feb1 	bl	800b54c <touch_write_reg>
 800b7ea:	e000      	b.n	800b7ee <touch_Scanf+0x102>
		return;
 800b7ec:	bf00      	nop
	}
}
 800b7ee:	3708      	adds	r7, #8
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}
 800b7f4:	24000530 	.word	0x24000530
 800b7f8:	24000510 	.word	0x24000510

0800b7fc <touch_init>:


void touch_init(void)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b082      	sub	sp, #8
 800b800:	af00      	add	r7, sp, #0
	char pid[5];
	soft_IIC_Init();  //IIC初始化
 800b802:	f7ff fce9 	bl	800b1d8 <soft_IIC_Init>
	touch_hw_reset(0x28);
 800b806:	2028      	movs	r0, #40	; 0x28
 800b808:	f7ff fe2a 	bl	800b460 <touch_hw_reset>
	touch_get_pid(pid);
 800b80c:	463b      	mov	r3, r7
 800b80e:	4618      	mov	r0, r3
 800b810:	f7ff ff5a 	bl	800b6c8 <touch_get_pid>
	touch_sw_reset();
 800b814:	f7ff ff3c 	bl	800b690 <touch_sw_reset>
}
 800b818:	bf00      	nop
 800b81a:	3708      	adds	r7, #8
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}

0800b820 <user_delay_init>:
 */
#include "user_delay.h"

static uint32_t g_fac_us = 0; /* us延时倍乘数 */
void user_delay_init(uint16_t sysclk)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b082      	sub	sp, #8
 800b824:	af00      	add	r7, sp, #0
 800b826:	4603      	mov	r3, r0
 800b828:	80fb      	strh	r3, [r7, #6]

    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK); /* SYSTICK使用外部时钟源,频率为HCLK */
 800b82a:	2004      	movs	r0, #4
 800b82c:	f7f6 fc18 	bl	8002060 <HAL_SYSTICK_CLKSourceConfig>
    g_fac_us = sysclk;                                   /* 不论是否使用OS,g_fac_us都需要使用 */
 800b830:	88fb      	ldrh	r3, [r7, #6]
 800b832:	4a03      	ldr	r2, [pc, #12]	; (800b840 <user_delay_init+0x20>)
 800b834:	6013      	str	r3, [r2, #0]

}
 800b836:	bf00      	nop
 800b838:	3708      	adds	r7, #8
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	24000534 	.word	0x24000534

0800b844 <user_delay_us>:
 * @param       nus: 要延时的us数.
 * @note        nus取值范围 : 0~190887435(最大值即 2^32 / fac_us @fac_us = 21)
 * @retval      无
 */
void user_delay_us(uint32_t nus)
{
 800b844:	b480      	push	{r7}
 800b846:	b089      	sub	sp, #36	; 0x24
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
    uint32_t ticks;
    uint32_t told, tnow, tcnt = 0;
 800b84c:	2300      	movs	r3, #0
 800b84e:	61bb      	str	r3, [r7, #24]
    uint32_t reload = SysTick->LOAD; /* LOAD的值 */
 800b850:	4b19      	ldr	r3, [pc, #100]	; (800b8b8 <user_delay_us+0x74>)
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	617b      	str	r3, [r7, #20]
    ticks = nus * g_fac_us;          /* 需要的节拍数 */
 800b856:	4b19      	ldr	r3, [pc, #100]	; (800b8bc <user_delay_us+0x78>)
 800b858:	681a      	ldr	r2, [r3, #0]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	fb02 f303 	mul.w	r3, r2, r3
 800b860:	613b      	str	r3, [r7, #16]
    told = SysTick->VAL;             /* 刚进入时的计数器值 */
 800b862:	4b15      	ldr	r3, [pc, #84]	; (800b8b8 <user_delay_us+0x74>)
 800b864:	689b      	ldr	r3, [r3, #8]
 800b866:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 800b868:	4b13      	ldr	r3, [pc, #76]	; (800b8b8 <user_delay_us+0x74>)
 800b86a:	689b      	ldr	r3, [r3, #8]
 800b86c:	60fb      	str	r3, [r7, #12]
        if (tnow != told)
 800b86e:	68fa      	ldr	r2, [r7, #12]
 800b870:	69fb      	ldr	r3, [r7, #28]
 800b872:	429a      	cmp	r2, r3
 800b874:	d0f8      	beq.n	800b868 <user_delay_us+0x24>
        {
            if (tnow < told)
 800b876:	68fa      	ldr	r2, [r7, #12]
 800b878:	69fb      	ldr	r3, [r7, #28]
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d206      	bcs.n	800b88c <user_delay_us+0x48>
            {
                tcnt += told - tnow; /* 这里注意一下SYSTICK是一个递减的计数器就可以了 */
 800b87e:	69fa      	ldr	r2, [r7, #28]
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	1ad3      	subs	r3, r2, r3
 800b884:	69ba      	ldr	r2, [r7, #24]
 800b886:	4413      	add	r3, r2
 800b888:	61bb      	str	r3, [r7, #24]
 800b88a:	e007      	b.n	800b89c <user_delay_us+0x58>
            }
            else
            {
                tcnt += reload - tnow + told;
 800b88c:	697a      	ldr	r2, [r7, #20]
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	1ad2      	subs	r2, r2, r3
 800b892:	69fb      	ldr	r3, [r7, #28]
 800b894:	4413      	add	r3, r2
 800b896:	69ba      	ldr	r2, [r7, #24]
 800b898:	4413      	add	r3, r2
 800b89a:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 800b8a0:	69ba      	ldr	r2, [r7, #24]
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d200      	bcs.n	800b8aa <user_delay_us+0x66>
        tnow = SysTick->VAL;
 800b8a8:	e7de      	b.n	800b868 <user_delay_us+0x24>
            {
                break; /* 时间超过/等于要延迟的时间,则退出 */
 800b8aa:	bf00      	nop
            }
        }
    }
}
 800b8ac:	bf00      	nop
 800b8ae:	3724      	adds	r7, #36	; 0x24
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr
 800b8b8:	e000e010 	.word	0xe000e010
 800b8bc:	24000534 	.word	0x24000534

0800b8c0 <user_delay_ms>:
 * @brief       延时nms
 * @param       nms: 要延时的ms数 (0< nms <= 65535)
 * @retval      无
 */
void user_delay_ms(uint16_t nms)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	80fb      	strh	r3, [r7, #6]
    uint32_t repeat = nms / 540; /*  这里用540,是考虑到可能有超频应用, 比如248M的时候,delay_us最大只能延时541ms左右了 */
 800b8ca:	88fb      	ldrh	r3, [r7, #6]
 800b8cc:	4a15      	ldr	r2, [pc, #84]	; (800b924 <user_delay_ms+0x64>)
 800b8ce:	fba2 2303 	umull	r2, r3, r2, r3
 800b8d2:	0a5b      	lsrs	r3, r3, #9
 800b8d4:	b29b      	uxth	r3, r3
 800b8d6:	60fb      	str	r3, [r7, #12]
    uint32_t remain = nms % 540;
 800b8d8:	88fb      	ldrh	r3, [r7, #6]
 800b8da:	4a12      	ldr	r2, [pc, #72]	; (800b924 <user_delay_ms+0x64>)
 800b8dc:	fba2 1203 	umull	r1, r2, r2, r3
 800b8e0:	0a52      	lsrs	r2, r2, #9
 800b8e2:	f44f 7107 	mov.w	r1, #540	; 0x21c
 800b8e6:	fb01 f202 	mul.w	r2, r1, r2
 800b8ea:	1a9b      	subs	r3, r3, r2
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	60bb      	str	r3, [r7, #8]

    while (repeat)
 800b8f0:	e005      	b.n	800b8fe <user_delay_ms+0x3e>
    {
    	user_delay_us(540 * 1000); /* 利用delay_us 实现 540ms 延时 */
 800b8f2:	480d      	ldr	r0, [pc, #52]	; (800b928 <user_delay_ms+0x68>)
 800b8f4:	f7ff ffa6 	bl	800b844 <user_delay_us>
        repeat--;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	3b01      	subs	r3, #1
 800b8fc:	60fb      	str	r3, [r7, #12]
    while (repeat)
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d1f6      	bne.n	800b8f2 <user_delay_ms+0x32>
    }

    if (remain)
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d007      	beq.n	800b91a <user_delay_ms+0x5a>
    {
    	user_delay_us(remain * 1000); /* 利用delay_us, 把尾数延时(remain ms)给做了 */
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b910:	fb02 f303 	mul.w	r3, r2, r3
 800b914:	4618      	mov	r0, r3
 800b916:	f7ff ff95 	bl	800b844 <user_delay_us>
    }
}
 800b91a:	bf00      	nop
 800b91c:	3710      	adds	r7, #16
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	f2b9d649 	.word	0xf2b9d649
 800b928:	00083d60 	.word	0x00083d60

0800b92c <HAL_Delay>:
 * @note        HAL库的延时默认用Systick，如果我们没有开Systick的中断会导致调用这个延时后无法退出
 * @param       Delay : 要延时的毫秒数
 * @retval      None
 */
void HAL_Delay(uint32_t Delay)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b082      	sub	sp, #8
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
	user_delay_ms(Delay);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	b29b      	uxth	r3, r3
 800b938:	4618      	mov	r0, r3
 800b93a:	f7ff ffc1 	bl	800b8c0 <user_delay_ms>
}
 800b93e:	bf00      	nop
 800b940:	3708      	adds	r7, #8
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
	...

0800b948 <_write>:
  HAL_UART_Receive(&huart1, &ch, 1, 0xffff);
  return ch;
}


int _write(int32_t file, uint8_t *ptr, int32_t len) {
 800b948:	b580      	push	{r7, lr}
 800b94a:	b084      	sub	sp, #16
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	60f8      	str	r0, [r7, #12]
 800b950:	60b9      	str	r1, [r7, #8]
 800b952:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, ptr, len, HAL_MAX_DELAY);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	b29a      	uxth	r2, r3
 800b958:	f04f 33ff 	mov.w	r3, #4294967295
 800b95c:	68b9      	ldr	r1, [r7, #8]
 800b95e:	4804      	ldr	r0, [pc, #16]	; (800b970 <_write+0x28>)
 800b960:	f7fb fff2 	bl	8007948 <HAL_UART_Transmit>
  return len;
 800b964:	687b      	ldr	r3, [r7, #4]
}
 800b966:	4618      	mov	r0, r3
 800b968:	3710      	adds	r7, #16
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop
 800b970:	240003a0 	.word	0x240003a0

0800b974 <log_com_uart_init>:

void log_com_uart_init(void)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	af00      	add	r7, sp, #0

  HAL_UART_Transmit_IT(&huart1, (uint8_t *)StaMessages, sizeof(StaMessages));
 800b978:	2204      	movs	r2, #4
 800b97a:	4905      	ldr	r1, [pc, #20]	; (800b990 <log_com_uart_init+0x1c>)
 800b97c:	4805      	ldr	r0, [pc, #20]	; (800b994 <log_com_uart_init+0x20>)
 800b97e:	f7fc f871 	bl	8007a64 <HAL_UART_Transmit_IT>
  HAL_UART_Receive_IT(&huart1, (uint8_t *)uart1_RxBuffer, 1); // 调用中断接收函数，接收长度设为1，接收一个字节进一次中断
 800b982:	2201      	movs	r2, #1
 800b984:	4904      	ldr	r1, [pc, #16]	; (800b998 <log_com_uart_init+0x24>)
 800b986:	4803      	ldr	r0, [pc, #12]	; (800b994 <log_com_uart_init+0x20>)
 800b988:	f7fc f900 	bl	8007b8c <HAL_UART_Receive_IT>
}
 800b98c:	bf00      	nop
 800b98e:	bd80      	pop	{r7, pc}
 800b990:	24000538 	.word	0x24000538
 800b994:	240003a0 	.word	0x240003a0
 800b998:	2400053c 	.word	0x2400053c

0800b99c <HAL_UART_RxCpltCallback>:
  HAL_UART_Transmit_IT(&huart2, (uint8_t *)StaMessages, sizeof(StaMessages));
  HAL_UART_Receive_IT(&huart2, (uint8_t *)uart2_RxBuffer, 1); // 调用中断接收函数，接收长度设为1，接收一个字节进一次中断
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b082      	sub	sp, #8
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
  if(huart->Instance == USART1)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	4a11      	ldr	r2, [pc, #68]	; (800b9f0 <HAL_UART_RxCpltCallback+0x54>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d10b      	bne.n	800b9c6 <HAL_UART_RxCpltCallback+0x2a>
  {
	  HAL_UART_Transmit(&huart1, (uint8_t *)uart1_RxBuffer, 1, 0xFFFF); // 发送接收到的数据
 800b9ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	490f      	ldr	r1, [pc, #60]	; (800b9f4 <HAL_UART_RxCpltCallback+0x58>)
 800b9b6:	4810      	ldr	r0, [pc, #64]	; (800b9f8 <HAL_UART_RxCpltCallback+0x5c>)
 800b9b8:	f7fb ffc6 	bl	8007948 <HAL_UART_Transmit>
	  HAL_UART_Receive_IT(&huart1, (uint8_t *)uart1_RxBuffer, 1);       // 再开启接收中断（因为里面中断只会触发一次，因此需要再次开启）
 800b9bc:	2201      	movs	r2, #1
 800b9be:	490d      	ldr	r1, [pc, #52]	; (800b9f4 <HAL_UART_RxCpltCallback+0x58>)
 800b9c0:	480d      	ldr	r0, [pc, #52]	; (800b9f8 <HAL_UART_RxCpltCallback+0x5c>)
 800b9c2:	f7fc f8e3 	bl	8007b8c <HAL_UART_Receive_IT>
  }
  if(huart->Instance == USART2)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	4a0c      	ldr	r2, [pc, #48]	; (800b9fc <HAL_UART_RxCpltCallback+0x60>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d10b      	bne.n	800b9e8 <HAL_UART_RxCpltCallback+0x4c>
  {
	  HAL_UART_Transmit(&huart2, (uint8_t *)uart2_RxBuffer, 1, 0xFFFF); // 发送接收到的数据
 800b9d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b9d4:	2201      	movs	r2, #1
 800b9d6:	490a      	ldr	r1, [pc, #40]	; (800ba00 <HAL_UART_RxCpltCallback+0x64>)
 800b9d8:	480a      	ldr	r0, [pc, #40]	; (800ba04 <HAL_UART_RxCpltCallback+0x68>)
 800b9da:	f7fb ffb5 	bl	8007948 <HAL_UART_Transmit>
	  HAL_UART_Receive_IT(&huart2, (uint8_t *)uart2_RxBuffer, 1);       // 再开启接收中断（因为里面中断只会触发一次，因此需要再次开启）
 800b9de:	2201      	movs	r2, #1
 800b9e0:	4907      	ldr	r1, [pc, #28]	; (800ba00 <HAL_UART_RxCpltCallback+0x64>)
 800b9e2:	4808      	ldr	r0, [pc, #32]	; (800ba04 <HAL_UART_RxCpltCallback+0x68>)
 800b9e4:	f7fc f8d2 	bl	8007b8c <HAL_UART_Receive_IT>
  }

}
 800b9e8:	bf00      	nop
 800b9ea:	3708      	adds	r7, #8
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}
 800b9f0:	40011000 	.word	0x40011000
 800b9f4:	2400053c 	.word	0x2400053c
 800b9f8:	240003a0 	.word	0x240003a0
 800b9fc:	40004400 	.word	0x40004400
 800ba00:	24000550 	.word	0x24000550
 800ba04:	24000434 	.word	0x24000434

0800ba08 <__cvt>:
 800ba08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba0a:	ed2d 8b02 	vpush	{d8}
 800ba0e:	eeb0 8b40 	vmov.f64	d8, d0
 800ba12:	b085      	sub	sp, #20
 800ba14:	4617      	mov	r7, r2
 800ba16:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ba18:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ba1a:	ee18 2a90 	vmov	r2, s17
 800ba1e:	f025 0520 	bic.w	r5, r5, #32
 800ba22:	2a00      	cmp	r2, #0
 800ba24:	bfb6      	itet	lt
 800ba26:	222d      	movlt	r2, #45	; 0x2d
 800ba28:	2200      	movge	r2, #0
 800ba2a:	eeb1 8b40 	vneglt.f64	d8, d0
 800ba2e:	2d46      	cmp	r5, #70	; 0x46
 800ba30:	460c      	mov	r4, r1
 800ba32:	701a      	strb	r2, [r3, #0]
 800ba34:	d004      	beq.n	800ba40 <__cvt+0x38>
 800ba36:	2d45      	cmp	r5, #69	; 0x45
 800ba38:	d100      	bne.n	800ba3c <__cvt+0x34>
 800ba3a:	3401      	adds	r4, #1
 800ba3c:	2102      	movs	r1, #2
 800ba3e:	e000      	b.n	800ba42 <__cvt+0x3a>
 800ba40:	2103      	movs	r1, #3
 800ba42:	ab03      	add	r3, sp, #12
 800ba44:	9301      	str	r3, [sp, #4]
 800ba46:	ab02      	add	r3, sp, #8
 800ba48:	9300      	str	r3, [sp, #0]
 800ba4a:	4622      	mov	r2, r4
 800ba4c:	4633      	mov	r3, r6
 800ba4e:	eeb0 0b48 	vmov.f64	d0, d8
 800ba52:	f001 f8cd 	bl	800cbf0 <_dtoa_r>
 800ba56:	2d47      	cmp	r5, #71	; 0x47
 800ba58:	d101      	bne.n	800ba5e <__cvt+0x56>
 800ba5a:	07fb      	lsls	r3, r7, #31
 800ba5c:	d51a      	bpl.n	800ba94 <__cvt+0x8c>
 800ba5e:	2d46      	cmp	r5, #70	; 0x46
 800ba60:	eb00 0204 	add.w	r2, r0, r4
 800ba64:	d10c      	bne.n	800ba80 <__cvt+0x78>
 800ba66:	7803      	ldrb	r3, [r0, #0]
 800ba68:	2b30      	cmp	r3, #48	; 0x30
 800ba6a:	d107      	bne.n	800ba7c <__cvt+0x74>
 800ba6c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ba70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba74:	bf1c      	itt	ne
 800ba76:	f1c4 0401 	rsbne	r4, r4, #1
 800ba7a:	6034      	strne	r4, [r6, #0]
 800ba7c:	6833      	ldr	r3, [r6, #0]
 800ba7e:	441a      	add	r2, r3
 800ba80:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ba84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba88:	bf08      	it	eq
 800ba8a:	9203      	streq	r2, [sp, #12]
 800ba8c:	2130      	movs	r1, #48	; 0x30
 800ba8e:	9b03      	ldr	r3, [sp, #12]
 800ba90:	4293      	cmp	r3, r2
 800ba92:	d307      	bcc.n	800baa4 <__cvt+0x9c>
 800ba94:	9b03      	ldr	r3, [sp, #12]
 800ba96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba98:	1a1b      	subs	r3, r3, r0
 800ba9a:	6013      	str	r3, [r2, #0]
 800ba9c:	b005      	add	sp, #20
 800ba9e:	ecbd 8b02 	vpop	{d8}
 800baa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800baa4:	1c5c      	adds	r4, r3, #1
 800baa6:	9403      	str	r4, [sp, #12]
 800baa8:	7019      	strb	r1, [r3, #0]
 800baaa:	e7f0      	b.n	800ba8e <__cvt+0x86>

0800baac <__exponent>:
 800baac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800baae:	4603      	mov	r3, r0
 800bab0:	2900      	cmp	r1, #0
 800bab2:	bfb8      	it	lt
 800bab4:	4249      	neglt	r1, r1
 800bab6:	f803 2b02 	strb.w	r2, [r3], #2
 800baba:	bfb4      	ite	lt
 800babc:	222d      	movlt	r2, #45	; 0x2d
 800babe:	222b      	movge	r2, #43	; 0x2b
 800bac0:	2909      	cmp	r1, #9
 800bac2:	7042      	strb	r2, [r0, #1]
 800bac4:	dd2a      	ble.n	800bb1c <__exponent+0x70>
 800bac6:	f10d 0207 	add.w	r2, sp, #7
 800baca:	4617      	mov	r7, r2
 800bacc:	260a      	movs	r6, #10
 800bace:	4694      	mov	ip, r2
 800bad0:	fb91 f5f6 	sdiv	r5, r1, r6
 800bad4:	fb06 1415 	mls	r4, r6, r5, r1
 800bad8:	3430      	adds	r4, #48	; 0x30
 800bada:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800bade:	460c      	mov	r4, r1
 800bae0:	2c63      	cmp	r4, #99	; 0x63
 800bae2:	f102 32ff 	add.w	r2, r2, #4294967295
 800bae6:	4629      	mov	r1, r5
 800bae8:	dcf1      	bgt.n	800bace <__exponent+0x22>
 800baea:	3130      	adds	r1, #48	; 0x30
 800baec:	f1ac 0402 	sub.w	r4, ip, #2
 800baf0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800baf4:	1c41      	adds	r1, r0, #1
 800baf6:	4622      	mov	r2, r4
 800baf8:	42ba      	cmp	r2, r7
 800bafa:	d30a      	bcc.n	800bb12 <__exponent+0x66>
 800bafc:	f10d 0209 	add.w	r2, sp, #9
 800bb00:	eba2 020c 	sub.w	r2, r2, ip
 800bb04:	42bc      	cmp	r4, r7
 800bb06:	bf88      	it	hi
 800bb08:	2200      	movhi	r2, #0
 800bb0a:	4413      	add	r3, r2
 800bb0c:	1a18      	subs	r0, r3, r0
 800bb0e:	b003      	add	sp, #12
 800bb10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb12:	f812 5b01 	ldrb.w	r5, [r2], #1
 800bb16:	f801 5f01 	strb.w	r5, [r1, #1]!
 800bb1a:	e7ed      	b.n	800baf8 <__exponent+0x4c>
 800bb1c:	2330      	movs	r3, #48	; 0x30
 800bb1e:	3130      	adds	r1, #48	; 0x30
 800bb20:	7083      	strb	r3, [r0, #2]
 800bb22:	70c1      	strb	r1, [r0, #3]
 800bb24:	1d03      	adds	r3, r0, #4
 800bb26:	e7f1      	b.n	800bb0c <__exponent+0x60>

0800bb28 <_printf_float>:
 800bb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb2c:	b08b      	sub	sp, #44	; 0x2c
 800bb2e:	460c      	mov	r4, r1
 800bb30:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800bb34:	4616      	mov	r6, r2
 800bb36:	461f      	mov	r7, r3
 800bb38:	4605      	mov	r5, r0
 800bb3a:	f000 ff53 	bl	800c9e4 <_localeconv_r>
 800bb3e:	f8d0 b000 	ldr.w	fp, [r0]
 800bb42:	4658      	mov	r0, fp
 800bb44:	f7f4 fc1c 	bl	8000380 <strlen>
 800bb48:	2300      	movs	r3, #0
 800bb4a:	9308      	str	r3, [sp, #32]
 800bb4c:	f8d8 3000 	ldr.w	r3, [r8]
 800bb50:	f894 9018 	ldrb.w	r9, [r4, #24]
 800bb54:	6822      	ldr	r2, [r4, #0]
 800bb56:	3307      	adds	r3, #7
 800bb58:	f023 0307 	bic.w	r3, r3, #7
 800bb5c:	f103 0108 	add.w	r1, r3, #8
 800bb60:	f8c8 1000 	str.w	r1, [r8]
 800bb64:	ed93 0b00 	vldr	d0, [r3]
 800bb68:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800bdc8 <_printf_float+0x2a0>
 800bb6c:	eeb0 7bc0 	vabs.f64	d7, d0
 800bb70:	eeb4 7b46 	vcmp.f64	d7, d6
 800bb74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb78:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800bb7c:	4682      	mov	sl, r0
 800bb7e:	dd24      	ble.n	800bbca <_printf_float+0xa2>
 800bb80:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800bb84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb88:	d502      	bpl.n	800bb90 <_printf_float+0x68>
 800bb8a:	232d      	movs	r3, #45	; 0x2d
 800bb8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb90:	498f      	ldr	r1, [pc, #572]	; (800bdd0 <_printf_float+0x2a8>)
 800bb92:	4b90      	ldr	r3, [pc, #576]	; (800bdd4 <_printf_float+0x2ac>)
 800bb94:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800bb98:	bf94      	ite	ls
 800bb9a:	4688      	movls	r8, r1
 800bb9c:	4698      	movhi	r8, r3
 800bb9e:	2303      	movs	r3, #3
 800bba0:	6123      	str	r3, [r4, #16]
 800bba2:	f022 0204 	bic.w	r2, r2, #4
 800bba6:	2300      	movs	r3, #0
 800bba8:	6022      	str	r2, [r4, #0]
 800bbaa:	9304      	str	r3, [sp, #16]
 800bbac:	9700      	str	r7, [sp, #0]
 800bbae:	4633      	mov	r3, r6
 800bbb0:	aa09      	add	r2, sp, #36	; 0x24
 800bbb2:	4621      	mov	r1, r4
 800bbb4:	4628      	mov	r0, r5
 800bbb6:	f000 f9d1 	bl	800bf5c <_printf_common>
 800bbba:	3001      	adds	r0, #1
 800bbbc:	f040 808a 	bne.w	800bcd4 <_printf_float+0x1ac>
 800bbc0:	f04f 30ff 	mov.w	r0, #4294967295
 800bbc4:	b00b      	add	sp, #44	; 0x2c
 800bbc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbca:	eeb4 0b40 	vcmp.f64	d0, d0
 800bbce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbd2:	d709      	bvc.n	800bbe8 <_printf_float+0xc0>
 800bbd4:	ee10 3a90 	vmov	r3, s1
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	bfbc      	itt	lt
 800bbdc:	232d      	movlt	r3, #45	; 0x2d
 800bbde:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bbe2:	497d      	ldr	r1, [pc, #500]	; (800bdd8 <_printf_float+0x2b0>)
 800bbe4:	4b7d      	ldr	r3, [pc, #500]	; (800bddc <_printf_float+0x2b4>)
 800bbe6:	e7d5      	b.n	800bb94 <_printf_float+0x6c>
 800bbe8:	6863      	ldr	r3, [r4, #4]
 800bbea:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800bbee:	9104      	str	r1, [sp, #16]
 800bbf0:	1c59      	adds	r1, r3, #1
 800bbf2:	d13c      	bne.n	800bc6e <_printf_float+0x146>
 800bbf4:	2306      	movs	r3, #6
 800bbf6:	6063      	str	r3, [r4, #4]
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	9303      	str	r3, [sp, #12]
 800bbfc:	ab08      	add	r3, sp, #32
 800bbfe:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800bc02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bc06:	ab07      	add	r3, sp, #28
 800bc08:	6861      	ldr	r1, [r4, #4]
 800bc0a:	9300      	str	r3, [sp, #0]
 800bc0c:	6022      	str	r2, [r4, #0]
 800bc0e:	f10d 031b 	add.w	r3, sp, #27
 800bc12:	4628      	mov	r0, r5
 800bc14:	f7ff fef8 	bl	800ba08 <__cvt>
 800bc18:	9b04      	ldr	r3, [sp, #16]
 800bc1a:	9907      	ldr	r1, [sp, #28]
 800bc1c:	2b47      	cmp	r3, #71	; 0x47
 800bc1e:	4680      	mov	r8, r0
 800bc20:	d108      	bne.n	800bc34 <_printf_float+0x10c>
 800bc22:	1cc8      	adds	r0, r1, #3
 800bc24:	db02      	blt.n	800bc2c <_printf_float+0x104>
 800bc26:	6863      	ldr	r3, [r4, #4]
 800bc28:	4299      	cmp	r1, r3
 800bc2a:	dd41      	ble.n	800bcb0 <_printf_float+0x188>
 800bc2c:	f1a9 0902 	sub.w	r9, r9, #2
 800bc30:	fa5f f989 	uxtb.w	r9, r9
 800bc34:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bc38:	d820      	bhi.n	800bc7c <_printf_float+0x154>
 800bc3a:	3901      	subs	r1, #1
 800bc3c:	464a      	mov	r2, r9
 800bc3e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bc42:	9107      	str	r1, [sp, #28]
 800bc44:	f7ff ff32 	bl	800baac <__exponent>
 800bc48:	9a08      	ldr	r2, [sp, #32]
 800bc4a:	9004      	str	r0, [sp, #16]
 800bc4c:	1813      	adds	r3, r2, r0
 800bc4e:	2a01      	cmp	r2, #1
 800bc50:	6123      	str	r3, [r4, #16]
 800bc52:	dc02      	bgt.n	800bc5a <_printf_float+0x132>
 800bc54:	6822      	ldr	r2, [r4, #0]
 800bc56:	07d2      	lsls	r2, r2, #31
 800bc58:	d501      	bpl.n	800bc5e <_printf_float+0x136>
 800bc5a:	3301      	adds	r3, #1
 800bc5c:	6123      	str	r3, [r4, #16]
 800bc5e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d0a2      	beq.n	800bbac <_printf_float+0x84>
 800bc66:	232d      	movs	r3, #45	; 0x2d
 800bc68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc6c:	e79e      	b.n	800bbac <_printf_float+0x84>
 800bc6e:	9904      	ldr	r1, [sp, #16]
 800bc70:	2947      	cmp	r1, #71	; 0x47
 800bc72:	d1c1      	bne.n	800bbf8 <_printf_float+0xd0>
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d1bf      	bne.n	800bbf8 <_printf_float+0xd0>
 800bc78:	2301      	movs	r3, #1
 800bc7a:	e7bc      	b.n	800bbf6 <_printf_float+0xce>
 800bc7c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800bc80:	d118      	bne.n	800bcb4 <_printf_float+0x18c>
 800bc82:	2900      	cmp	r1, #0
 800bc84:	6863      	ldr	r3, [r4, #4]
 800bc86:	dd0b      	ble.n	800bca0 <_printf_float+0x178>
 800bc88:	6121      	str	r1, [r4, #16]
 800bc8a:	b913      	cbnz	r3, 800bc92 <_printf_float+0x16a>
 800bc8c:	6822      	ldr	r2, [r4, #0]
 800bc8e:	07d0      	lsls	r0, r2, #31
 800bc90:	d502      	bpl.n	800bc98 <_printf_float+0x170>
 800bc92:	3301      	adds	r3, #1
 800bc94:	440b      	add	r3, r1
 800bc96:	6123      	str	r3, [r4, #16]
 800bc98:	2300      	movs	r3, #0
 800bc9a:	65a1      	str	r1, [r4, #88]	; 0x58
 800bc9c:	9304      	str	r3, [sp, #16]
 800bc9e:	e7de      	b.n	800bc5e <_printf_float+0x136>
 800bca0:	b913      	cbnz	r3, 800bca8 <_printf_float+0x180>
 800bca2:	6822      	ldr	r2, [r4, #0]
 800bca4:	07d2      	lsls	r2, r2, #31
 800bca6:	d501      	bpl.n	800bcac <_printf_float+0x184>
 800bca8:	3302      	adds	r3, #2
 800bcaa:	e7f4      	b.n	800bc96 <_printf_float+0x16e>
 800bcac:	2301      	movs	r3, #1
 800bcae:	e7f2      	b.n	800bc96 <_printf_float+0x16e>
 800bcb0:	f04f 0967 	mov.w	r9, #103	; 0x67
 800bcb4:	9b08      	ldr	r3, [sp, #32]
 800bcb6:	4299      	cmp	r1, r3
 800bcb8:	db05      	blt.n	800bcc6 <_printf_float+0x19e>
 800bcba:	6823      	ldr	r3, [r4, #0]
 800bcbc:	6121      	str	r1, [r4, #16]
 800bcbe:	07d8      	lsls	r0, r3, #31
 800bcc0:	d5ea      	bpl.n	800bc98 <_printf_float+0x170>
 800bcc2:	1c4b      	adds	r3, r1, #1
 800bcc4:	e7e7      	b.n	800bc96 <_printf_float+0x16e>
 800bcc6:	2900      	cmp	r1, #0
 800bcc8:	bfd4      	ite	le
 800bcca:	f1c1 0202 	rsble	r2, r1, #2
 800bcce:	2201      	movgt	r2, #1
 800bcd0:	4413      	add	r3, r2
 800bcd2:	e7e0      	b.n	800bc96 <_printf_float+0x16e>
 800bcd4:	6823      	ldr	r3, [r4, #0]
 800bcd6:	055a      	lsls	r2, r3, #21
 800bcd8:	d407      	bmi.n	800bcea <_printf_float+0x1c2>
 800bcda:	6923      	ldr	r3, [r4, #16]
 800bcdc:	4642      	mov	r2, r8
 800bcde:	4631      	mov	r1, r6
 800bce0:	4628      	mov	r0, r5
 800bce2:	47b8      	blx	r7
 800bce4:	3001      	adds	r0, #1
 800bce6:	d12a      	bne.n	800bd3e <_printf_float+0x216>
 800bce8:	e76a      	b.n	800bbc0 <_printf_float+0x98>
 800bcea:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bcee:	f240 80e0 	bls.w	800beb2 <_printf_float+0x38a>
 800bcf2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800bcf6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bcfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcfe:	d133      	bne.n	800bd68 <_printf_float+0x240>
 800bd00:	4a37      	ldr	r2, [pc, #220]	; (800bde0 <_printf_float+0x2b8>)
 800bd02:	2301      	movs	r3, #1
 800bd04:	4631      	mov	r1, r6
 800bd06:	4628      	mov	r0, r5
 800bd08:	47b8      	blx	r7
 800bd0a:	3001      	adds	r0, #1
 800bd0c:	f43f af58 	beq.w	800bbc0 <_printf_float+0x98>
 800bd10:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	db02      	blt.n	800bd1e <_printf_float+0x1f6>
 800bd18:	6823      	ldr	r3, [r4, #0]
 800bd1a:	07d8      	lsls	r0, r3, #31
 800bd1c:	d50f      	bpl.n	800bd3e <_printf_float+0x216>
 800bd1e:	4653      	mov	r3, sl
 800bd20:	465a      	mov	r2, fp
 800bd22:	4631      	mov	r1, r6
 800bd24:	4628      	mov	r0, r5
 800bd26:	47b8      	blx	r7
 800bd28:	3001      	adds	r0, #1
 800bd2a:	f43f af49 	beq.w	800bbc0 <_printf_float+0x98>
 800bd2e:	f04f 0800 	mov.w	r8, #0
 800bd32:	f104 091a 	add.w	r9, r4, #26
 800bd36:	9b08      	ldr	r3, [sp, #32]
 800bd38:	3b01      	subs	r3, #1
 800bd3a:	4543      	cmp	r3, r8
 800bd3c:	dc09      	bgt.n	800bd52 <_printf_float+0x22a>
 800bd3e:	6823      	ldr	r3, [r4, #0]
 800bd40:	079b      	lsls	r3, r3, #30
 800bd42:	f100 8106 	bmi.w	800bf52 <_printf_float+0x42a>
 800bd46:	68e0      	ldr	r0, [r4, #12]
 800bd48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd4a:	4298      	cmp	r0, r3
 800bd4c:	bfb8      	it	lt
 800bd4e:	4618      	movlt	r0, r3
 800bd50:	e738      	b.n	800bbc4 <_printf_float+0x9c>
 800bd52:	2301      	movs	r3, #1
 800bd54:	464a      	mov	r2, r9
 800bd56:	4631      	mov	r1, r6
 800bd58:	4628      	mov	r0, r5
 800bd5a:	47b8      	blx	r7
 800bd5c:	3001      	adds	r0, #1
 800bd5e:	f43f af2f 	beq.w	800bbc0 <_printf_float+0x98>
 800bd62:	f108 0801 	add.w	r8, r8, #1
 800bd66:	e7e6      	b.n	800bd36 <_printf_float+0x20e>
 800bd68:	9b07      	ldr	r3, [sp, #28]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	dc3a      	bgt.n	800bde4 <_printf_float+0x2bc>
 800bd6e:	4a1c      	ldr	r2, [pc, #112]	; (800bde0 <_printf_float+0x2b8>)
 800bd70:	2301      	movs	r3, #1
 800bd72:	4631      	mov	r1, r6
 800bd74:	4628      	mov	r0, r5
 800bd76:	47b8      	blx	r7
 800bd78:	3001      	adds	r0, #1
 800bd7a:	f43f af21 	beq.w	800bbc0 <_printf_float+0x98>
 800bd7e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800bd82:	4313      	orrs	r3, r2
 800bd84:	d102      	bne.n	800bd8c <_printf_float+0x264>
 800bd86:	6823      	ldr	r3, [r4, #0]
 800bd88:	07d9      	lsls	r1, r3, #31
 800bd8a:	d5d8      	bpl.n	800bd3e <_printf_float+0x216>
 800bd8c:	4653      	mov	r3, sl
 800bd8e:	465a      	mov	r2, fp
 800bd90:	4631      	mov	r1, r6
 800bd92:	4628      	mov	r0, r5
 800bd94:	47b8      	blx	r7
 800bd96:	3001      	adds	r0, #1
 800bd98:	f43f af12 	beq.w	800bbc0 <_printf_float+0x98>
 800bd9c:	f04f 0900 	mov.w	r9, #0
 800bda0:	f104 0a1a 	add.w	sl, r4, #26
 800bda4:	9b07      	ldr	r3, [sp, #28]
 800bda6:	425b      	negs	r3, r3
 800bda8:	454b      	cmp	r3, r9
 800bdaa:	dc01      	bgt.n	800bdb0 <_printf_float+0x288>
 800bdac:	9b08      	ldr	r3, [sp, #32]
 800bdae:	e795      	b.n	800bcdc <_printf_float+0x1b4>
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	4652      	mov	r2, sl
 800bdb4:	4631      	mov	r1, r6
 800bdb6:	4628      	mov	r0, r5
 800bdb8:	47b8      	blx	r7
 800bdba:	3001      	adds	r0, #1
 800bdbc:	f43f af00 	beq.w	800bbc0 <_printf_float+0x98>
 800bdc0:	f109 0901 	add.w	r9, r9, #1
 800bdc4:	e7ee      	b.n	800bda4 <_printf_float+0x27c>
 800bdc6:	bf00      	nop
 800bdc8:	ffffffff 	.word	0xffffffff
 800bdcc:	7fefffff 	.word	0x7fefffff
 800bdd0:	0800ffd8 	.word	0x0800ffd8
 800bdd4:	0800ffdc 	.word	0x0800ffdc
 800bdd8:	0800ffe0 	.word	0x0800ffe0
 800bddc:	0800ffe4 	.word	0x0800ffe4
 800bde0:	0800ffe8 	.word	0x0800ffe8
 800bde4:	9a08      	ldr	r2, [sp, #32]
 800bde6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bde8:	429a      	cmp	r2, r3
 800bdea:	bfa8      	it	ge
 800bdec:	461a      	movge	r2, r3
 800bdee:	2a00      	cmp	r2, #0
 800bdf0:	4691      	mov	r9, r2
 800bdf2:	dc38      	bgt.n	800be66 <_printf_float+0x33e>
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	9305      	str	r3, [sp, #20]
 800bdf8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bdfc:	f104 021a 	add.w	r2, r4, #26
 800be00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800be02:	9905      	ldr	r1, [sp, #20]
 800be04:	9304      	str	r3, [sp, #16]
 800be06:	eba3 0309 	sub.w	r3, r3, r9
 800be0a:	428b      	cmp	r3, r1
 800be0c:	dc33      	bgt.n	800be76 <_printf_float+0x34e>
 800be0e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800be12:	429a      	cmp	r2, r3
 800be14:	db3c      	blt.n	800be90 <_printf_float+0x368>
 800be16:	6823      	ldr	r3, [r4, #0]
 800be18:	07da      	lsls	r2, r3, #31
 800be1a:	d439      	bmi.n	800be90 <_printf_float+0x368>
 800be1c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800be20:	eba2 0903 	sub.w	r9, r2, r3
 800be24:	9b04      	ldr	r3, [sp, #16]
 800be26:	1ad2      	subs	r2, r2, r3
 800be28:	4591      	cmp	r9, r2
 800be2a:	bfa8      	it	ge
 800be2c:	4691      	movge	r9, r2
 800be2e:	f1b9 0f00 	cmp.w	r9, #0
 800be32:	dc35      	bgt.n	800bea0 <_printf_float+0x378>
 800be34:	f04f 0800 	mov.w	r8, #0
 800be38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800be3c:	f104 0a1a 	add.w	sl, r4, #26
 800be40:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800be44:	1a9b      	subs	r3, r3, r2
 800be46:	eba3 0309 	sub.w	r3, r3, r9
 800be4a:	4543      	cmp	r3, r8
 800be4c:	f77f af77 	ble.w	800bd3e <_printf_float+0x216>
 800be50:	2301      	movs	r3, #1
 800be52:	4652      	mov	r2, sl
 800be54:	4631      	mov	r1, r6
 800be56:	4628      	mov	r0, r5
 800be58:	47b8      	blx	r7
 800be5a:	3001      	adds	r0, #1
 800be5c:	f43f aeb0 	beq.w	800bbc0 <_printf_float+0x98>
 800be60:	f108 0801 	add.w	r8, r8, #1
 800be64:	e7ec      	b.n	800be40 <_printf_float+0x318>
 800be66:	4613      	mov	r3, r2
 800be68:	4631      	mov	r1, r6
 800be6a:	4642      	mov	r2, r8
 800be6c:	4628      	mov	r0, r5
 800be6e:	47b8      	blx	r7
 800be70:	3001      	adds	r0, #1
 800be72:	d1bf      	bne.n	800bdf4 <_printf_float+0x2cc>
 800be74:	e6a4      	b.n	800bbc0 <_printf_float+0x98>
 800be76:	2301      	movs	r3, #1
 800be78:	4631      	mov	r1, r6
 800be7a:	4628      	mov	r0, r5
 800be7c:	9204      	str	r2, [sp, #16]
 800be7e:	47b8      	blx	r7
 800be80:	3001      	adds	r0, #1
 800be82:	f43f ae9d 	beq.w	800bbc0 <_printf_float+0x98>
 800be86:	9b05      	ldr	r3, [sp, #20]
 800be88:	9a04      	ldr	r2, [sp, #16]
 800be8a:	3301      	adds	r3, #1
 800be8c:	9305      	str	r3, [sp, #20]
 800be8e:	e7b7      	b.n	800be00 <_printf_float+0x2d8>
 800be90:	4653      	mov	r3, sl
 800be92:	465a      	mov	r2, fp
 800be94:	4631      	mov	r1, r6
 800be96:	4628      	mov	r0, r5
 800be98:	47b8      	blx	r7
 800be9a:	3001      	adds	r0, #1
 800be9c:	d1be      	bne.n	800be1c <_printf_float+0x2f4>
 800be9e:	e68f      	b.n	800bbc0 <_printf_float+0x98>
 800bea0:	9a04      	ldr	r2, [sp, #16]
 800bea2:	464b      	mov	r3, r9
 800bea4:	4442      	add	r2, r8
 800bea6:	4631      	mov	r1, r6
 800bea8:	4628      	mov	r0, r5
 800beaa:	47b8      	blx	r7
 800beac:	3001      	adds	r0, #1
 800beae:	d1c1      	bne.n	800be34 <_printf_float+0x30c>
 800beb0:	e686      	b.n	800bbc0 <_printf_float+0x98>
 800beb2:	9a08      	ldr	r2, [sp, #32]
 800beb4:	2a01      	cmp	r2, #1
 800beb6:	dc01      	bgt.n	800bebc <_printf_float+0x394>
 800beb8:	07db      	lsls	r3, r3, #31
 800beba:	d537      	bpl.n	800bf2c <_printf_float+0x404>
 800bebc:	2301      	movs	r3, #1
 800bebe:	4642      	mov	r2, r8
 800bec0:	4631      	mov	r1, r6
 800bec2:	4628      	mov	r0, r5
 800bec4:	47b8      	blx	r7
 800bec6:	3001      	adds	r0, #1
 800bec8:	f43f ae7a 	beq.w	800bbc0 <_printf_float+0x98>
 800becc:	4653      	mov	r3, sl
 800bece:	465a      	mov	r2, fp
 800bed0:	4631      	mov	r1, r6
 800bed2:	4628      	mov	r0, r5
 800bed4:	47b8      	blx	r7
 800bed6:	3001      	adds	r0, #1
 800bed8:	f43f ae72 	beq.w	800bbc0 <_printf_float+0x98>
 800bedc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800bee0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bee8:	9b08      	ldr	r3, [sp, #32]
 800beea:	d01a      	beq.n	800bf22 <_printf_float+0x3fa>
 800beec:	3b01      	subs	r3, #1
 800beee:	f108 0201 	add.w	r2, r8, #1
 800bef2:	4631      	mov	r1, r6
 800bef4:	4628      	mov	r0, r5
 800bef6:	47b8      	blx	r7
 800bef8:	3001      	adds	r0, #1
 800befa:	d10e      	bne.n	800bf1a <_printf_float+0x3f2>
 800befc:	e660      	b.n	800bbc0 <_printf_float+0x98>
 800befe:	2301      	movs	r3, #1
 800bf00:	464a      	mov	r2, r9
 800bf02:	4631      	mov	r1, r6
 800bf04:	4628      	mov	r0, r5
 800bf06:	47b8      	blx	r7
 800bf08:	3001      	adds	r0, #1
 800bf0a:	f43f ae59 	beq.w	800bbc0 <_printf_float+0x98>
 800bf0e:	f108 0801 	add.w	r8, r8, #1
 800bf12:	9b08      	ldr	r3, [sp, #32]
 800bf14:	3b01      	subs	r3, #1
 800bf16:	4543      	cmp	r3, r8
 800bf18:	dcf1      	bgt.n	800befe <_printf_float+0x3d6>
 800bf1a:	9b04      	ldr	r3, [sp, #16]
 800bf1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bf20:	e6dd      	b.n	800bcde <_printf_float+0x1b6>
 800bf22:	f04f 0800 	mov.w	r8, #0
 800bf26:	f104 091a 	add.w	r9, r4, #26
 800bf2a:	e7f2      	b.n	800bf12 <_printf_float+0x3ea>
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	4642      	mov	r2, r8
 800bf30:	e7df      	b.n	800bef2 <_printf_float+0x3ca>
 800bf32:	2301      	movs	r3, #1
 800bf34:	464a      	mov	r2, r9
 800bf36:	4631      	mov	r1, r6
 800bf38:	4628      	mov	r0, r5
 800bf3a:	47b8      	blx	r7
 800bf3c:	3001      	adds	r0, #1
 800bf3e:	f43f ae3f 	beq.w	800bbc0 <_printf_float+0x98>
 800bf42:	f108 0801 	add.w	r8, r8, #1
 800bf46:	68e3      	ldr	r3, [r4, #12]
 800bf48:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf4a:	1a5b      	subs	r3, r3, r1
 800bf4c:	4543      	cmp	r3, r8
 800bf4e:	dcf0      	bgt.n	800bf32 <_printf_float+0x40a>
 800bf50:	e6f9      	b.n	800bd46 <_printf_float+0x21e>
 800bf52:	f04f 0800 	mov.w	r8, #0
 800bf56:	f104 0919 	add.w	r9, r4, #25
 800bf5a:	e7f4      	b.n	800bf46 <_printf_float+0x41e>

0800bf5c <_printf_common>:
 800bf5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf60:	4616      	mov	r6, r2
 800bf62:	4699      	mov	r9, r3
 800bf64:	688a      	ldr	r2, [r1, #8]
 800bf66:	690b      	ldr	r3, [r1, #16]
 800bf68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	bfb8      	it	lt
 800bf70:	4613      	movlt	r3, r2
 800bf72:	6033      	str	r3, [r6, #0]
 800bf74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bf78:	4607      	mov	r7, r0
 800bf7a:	460c      	mov	r4, r1
 800bf7c:	b10a      	cbz	r2, 800bf82 <_printf_common+0x26>
 800bf7e:	3301      	adds	r3, #1
 800bf80:	6033      	str	r3, [r6, #0]
 800bf82:	6823      	ldr	r3, [r4, #0]
 800bf84:	0699      	lsls	r1, r3, #26
 800bf86:	bf42      	ittt	mi
 800bf88:	6833      	ldrmi	r3, [r6, #0]
 800bf8a:	3302      	addmi	r3, #2
 800bf8c:	6033      	strmi	r3, [r6, #0]
 800bf8e:	6825      	ldr	r5, [r4, #0]
 800bf90:	f015 0506 	ands.w	r5, r5, #6
 800bf94:	d106      	bne.n	800bfa4 <_printf_common+0x48>
 800bf96:	f104 0a19 	add.w	sl, r4, #25
 800bf9a:	68e3      	ldr	r3, [r4, #12]
 800bf9c:	6832      	ldr	r2, [r6, #0]
 800bf9e:	1a9b      	subs	r3, r3, r2
 800bfa0:	42ab      	cmp	r3, r5
 800bfa2:	dc26      	bgt.n	800bff2 <_printf_common+0x96>
 800bfa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bfa8:	1e13      	subs	r3, r2, #0
 800bfaa:	6822      	ldr	r2, [r4, #0]
 800bfac:	bf18      	it	ne
 800bfae:	2301      	movne	r3, #1
 800bfb0:	0692      	lsls	r2, r2, #26
 800bfb2:	d42b      	bmi.n	800c00c <_printf_common+0xb0>
 800bfb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bfb8:	4649      	mov	r1, r9
 800bfba:	4638      	mov	r0, r7
 800bfbc:	47c0      	blx	r8
 800bfbe:	3001      	adds	r0, #1
 800bfc0:	d01e      	beq.n	800c000 <_printf_common+0xa4>
 800bfc2:	6823      	ldr	r3, [r4, #0]
 800bfc4:	6922      	ldr	r2, [r4, #16]
 800bfc6:	f003 0306 	and.w	r3, r3, #6
 800bfca:	2b04      	cmp	r3, #4
 800bfcc:	bf02      	ittt	eq
 800bfce:	68e5      	ldreq	r5, [r4, #12]
 800bfd0:	6833      	ldreq	r3, [r6, #0]
 800bfd2:	1aed      	subeq	r5, r5, r3
 800bfd4:	68a3      	ldr	r3, [r4, #8]
 800bfd6:	bf0c      	ite	eq
 800bfd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bfdc:	2500      	movne	r5, #0
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	bfc4      	itt	gt
 800bfe2:	1a9b      	subgt	r3, r3, r2
 800bfe4:	18ed      	addgt	r5, r5, r3
 800bfe6:	2600      	movs	r6, #0
 800bfe8:	341a      	adds	r4, #26
 800bfea:	42b5      	cmp	r5, r6
 800bfec:	d11a      	bne.n	800c024 <_printf_common+0xc8>
 800bfee:	2000      	movs	r0, #0
 800bff0:	e008      	b.n	800c004 <_printf_common+0xa8>
 800bff2:	2301      	movs	r3, #1
 800bff4:	4652      	mov	r2, sl
 800bff6:	4649      	mov	r1, r9
 800bff8:	4638      	mov	r0, r7
 800bffa:	47c0      	blx	r8
 800bffc:	3001      	adds	r0, #1
 800bffe:	d103      	bne.n	800c008 <_printf_common+0xac>
 800c000:	f04f 30ff 	mov.w	r0, #4294967295
 800c004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c008:	3501      	adds	r5, #1
 800c00a:	e7c6      	b.n	800bf9a <_printf_common+0x3e>
 800c00c:	18e1      	adds	r1, r4, r3
 800c00e:	1c5a      	adds	r2, r3, #1
 800c010:	2030      	movs	r0, #48	; 0x30
 800c012:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c016:	4422      	add	r2, r4
 800c018:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c01c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c020:	3302      	adds	r3, #2
 800c022:	e7c7      	b.n	800bfb4 <_printf_common+0x58>
 800c024:	2301      	movs	r3, #1
 800c026:	4622      	mov	r2, r4
 800c028:	4649      	mov	r1, r9
 800c02a:	4638      	mov	r0, r7
 800c02c:	47c0      	blx	r8
 800c02e:	3001      	adds	r0, #1
 800c030:	d0e6      	beq.n	800c000 <_printf_common+0xa4>
 800c032:	3601      	adds	r6, #1
 800c034:	e7d9      	b.n	800bfea <_printf_common+0x8e>
	...

0800c038 <_printf_i>:
 800c038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c03c:	7e0f      	ldrb	r7, [r1, #24]
 800c03e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c040:	2f78      	cmp	r7, #120	; 0x78
 800c042:	4691      	mov	r9, r2
 800c044:	4680      	mov	r8, r0
 800c046:	460c      	mov	r4, r1
 800c048:	469a      	mov	sl, r3
 800c04a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c04e:	d807      	bhi.n	800c060 <_printf_i+0x28>
 800c050:	2f62      	cmp	r7, #98	; 0x62
 800c052:	d80a      	bhi.n	800c06a <_printf_i+0x32>
 800c054:	2f00      	cmp	r7, #0
 800c056:	f000 80d4 	beq.w	800c202 <_printf_i+0x1ca>
 800c05a:	2f58      	cmp	r7, #88	; 0x58
 800c05c:	f000 80c0 	beq.w	800c1e0 <_printf_i+0x1a8>
 800c060:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c064:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c068:	e03a      	b.n	800c0e0 <_printf_i+0xa8>
 800c06a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c06e:	2b15      	cmp	r3, #21
 800c070:	d8f6      	bhi.n	800c060 <_printf_i+0x28>
 800c072:	a101      	add	r1, pc, #4	; (adr r1, 800c078 <_printf_i+0x40>)
 800c074:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c078:	0800c0d1 	.word	0x0800c0d1
 800c07c:	0800c0e5 	.word	0x0800c0e5
 800c080:	0800c061 	.word	0x0800c061
 800c084:	0800c061 	.word	0x0800c061
 800c088:	0800c061 	.word	0x0800c061
 800c08c:	0800c061 	.word	0x0800c061
 800c090:	0800c0e5 	.word	0x0800c0e5
 800c094:	0800c061 	.word	0x0800c061
 800c098:	0800c061 	.word	0x0800c061
 800c09c:	0800c061 	.word	0x0800c061
 800c0a0:	0800c061 	.word	0x0800c061
 800c0a4:	0800c1e9 	.word	0x0800c1e9
 800c0a8:	0800c111 	.word	0x0800c111
 800c0ac:	0800c1a3 	.word	0x0800c1a3
 800c0b0:	0800c061 	.word	0x0800c061
 800c0b4:	0800c061 	.word	0x0800c061
 800c0b8:	0800c20b 	.word	0x0800c20b
 800c0bc:	0800c061 	.word	0x0800c061
 800c0c0:	0800c111 	.word	0x0800c111
 800c0c4:	0800c061 	.word	0x0800c061
 800c0c8:	0800c061 	.word	0x0800c061
 800c0cc:	0800c1ab 	.word	0x0800c1ab
 800c0d0:	682b      	ldr	r3, [r5, #0]
 800c0d2:	1d1a      	adds	r2, r3, #4
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	602a      	str	r2, [r5, #0]
 800c0d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c0dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	e09f      	b.n	800c224 <_printf_i+0x1ec>
 800c0e4:	6820      	ldr	r0, [r4, #0]
 800c0e6:	682b      	ldr	r3, [r5, #0]
 800c0e8:	0607      	lsls	r7, r0, #24
 800c0ea:	f103 0104 	add.w	r1, r3, #4
 800c0ee:	6029      	str	r1, [r5, #0]
 800c0f0:	d501      	bpl.n	800c0f6 <_printf_i+0xbe>
 800c0f2:	681e      	ldr	r6, [r3, #0]
 800c0f4:	e003      	b.n	800c0fe <_printf_i+0xc6>
 800c0f6:	0646      	lsls	r6, r0, #25
 800c0f8:	d5fb      	bpl.n	800c0f2 <_printf_i+0xba>
 800c0fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c0fe:	2e00      	cmp	r6, #0
 800c100:	da03      	bge.n	800c10a <_printf_i+0xd2>
 800c102:	232d      	movs	r3, #45	; 0x2d
 800c104:	4276      	negs	r6, r6
 800c106:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c10a:	485a      	ldr	r0, [pc, #360]	; (800c274 <_printf_i+0x23c>)
 800c10c:	230a      	movs	r3, #10
 800c10e:	e012      	b.n	800c136 <_printf_i+0xfe>
 800c110:	682b      	ldr	r3, [r5, #0]
 800c112:	6820      	ldr	r0, [r4, #0]
 800c114:	1d19      	adds	r1, r3, #4
 800c116:	6029      	str	r1, [r5, #0]
 800c118:	0605      	lsls	r5, r0, #24
 800c11a:	d501      	bpl.n	800c120 <_printf_i+0xe8>
 800c11c:	681e      	ldr	r6, [r3, #0]
 800c11e:	e002      	b.n	800c126 <_printf_i+0xee>
 800c120:	0641      	lsls	r1, r0, #25
 800c122:	d5fb      	bpl.n	800c11c <_printf_i+0xe4>
 800c124:	881e      	ldrh	r6, [r3, #0]
 800c126:	4853      	ldr	r0, [pc, #332]	; (800c274 <_printf_i+0x23c>)
 800c128:	2f6f      	cmp	r7, #111	; 0x6f
 800c12a:	bf0c      	ite	eq
 800c12c:	2308      	moveq	r3, #8
 800c12e:	230a      	movne	r3, #10
 800c130:	2100      	movs	r1, #0
 800c132:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c136:	6865      	ldr	r5, [r4, #4]
 800c138:	60a5      	str	r5, [r4, #8]
 800c13a:	2d00      	cmp	r5, #0
 800c13c:	bfa2      	ittt	ge
 800c13e:	6821      	ldrge	r1, [r4, #0]
 800c140:	f021 0104 	bicge.w	r1, r1, #4
 800c144:	6021      	strge	r1, [r4, #0]
 800c146:	b90e      	cbnz	r6, 800c14c <_printf_i+0x114>
 800c148:	2d00      	cmp	r5, #0
 800c14a:	d04b      	beq.n	800c1e4 <_printf_i+0x1ac>
 800c14c:	4615      	mov	r5, r2
 800c14e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c152:	fb03 6711 	mls	r7, r3, r1, r6
 800c156:	5dc7      	ldrb	r7, [r0, r7]
 800c158:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c15c:	4637      	mov	r7, r6
 800c15e:	42bb      	cmp	r3, r7
 800c160:	460e      	mov	r6, r1
 800c162:	d9f4      	bls.n	800c14e <_printf_i+0x116>
 800c164:	2b08      	cmp	r3, #8
 800c166:	d10b      	bne.n	800c180 <_printf_i+0x148>
 800c168:	6823      	ldr	r3, [r4, #0]
 800c16a:	07de      	lsls	r6, r3, #31
 800c16c:	d508      	bpl.n	800c180 <_printf_i+0x148>
 800c16e:	6923      	ldr	r3, [r4, #16]
 800c170:	6861      	ldr	r1, [r4, #4]
 800c172:	4299      	cmp	r1, r3
 800c174:	bfde      	ittt	le
 800c176:	2330      	movle	r3, #48	; 0x30
 800c178:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c17c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c180:	1b52      	subs	r2, r2, r5
 800c182:	6122      	str	r2, [r4, #16]
 800c184:	f8cd a000 	str.w	sl, [sp]
 800c188:	464b      	mov	r3, r9
 800c18a:	aa03      	add	r2, sp, #12
 800c18c:	4621      	mov	r1, r4
 800c18e:	4640      	mov	r0, r8
 800c190:	f7ff fee4 	bl	800bf5c <_printf_common>
 800c194:	3001      	adds	r0, #1
 800c196:	d14a      	bne.n	800c22e <_printf_i+0x1f6>
 800c198:	f04f 30ff 	mov.w	r0, #4294967295
 800c19c:	b004      	add	sp, #16
 800c19e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1a2:	6823      	ldr	r3, [r4, #0]
 800c1a4:	f043 0320 	orr.w	r3, r3, #32
 800c1a8:	6023      	str	r3, [r4, #0]
 800c1aa:	4833      	ldr	r0, [pc, #204]	; (800c278 <_printf_i+0x240>)
 800c1ac:	2778      	movs	r7, #120	; 0x78
 800c1ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c1b2:	6823      	ldr	r3, [r4, #0]
 800c1b4:	6829      	ldr	r1, [r5, #0]
 800c1b6:	061f      	lsls	r7, r3, #24
 800c1b8:	f851 6b04 	ldr.w	r6, [r1], #4
 800c1bc:	d402      	bmi.n	800c1c4 <_printf_i+0x18c>
 800c1be:	065f      	lsls	r7, r3, #25
 800c1c0:	bf48      	it	mi
 800c1c2:	b2b6      	uxthmi	r6, r6
 800c1c4:	07df      	lsls	r7, r3, #31
 800c1c6:	bf48      	it	mi
 800c1c8:	f043 0320 	orrmi.w	r3, r3, #32
 800c1cc:	6029      	str	r1, [r5, #0]
 800c1ce:	bf48      	it	mi
 800c1d0:	6023      	strmi	r3, [r4, #0]
 800c1d2:	b91e      	cbnz	r6, 800c1dc <_printf_i+0x1a4>
 800c1d4:	6823      	ldr	r3, [r4, #0]
 800c1d6:	f023 0320 	bic.w	r3, r3, #32
 800c1da:	6023      	str	r3, [r4, #0]
 800c1dc:	2310      	movs	r3, #16
 800c1de:	e7a7      	b.n	800c130 <_printf_i+0xf8>
 800c1e0:	4824      	ldr	r0, [pc, #144]	; (800c274 <_printf_i+0x23c>)
 800c1e2:	e7e4      	b.n	800c1ae <_printf_i+0x176>
 800c1e4:	4615      	mov	r5, r2
 800c1e6:	e7bd      	b.n	800c164 <_printf_i+0x12c>
 800c1e8:	682b      	ldr	r3, [r5, #0]
 800c1ea:	6826      	ldr	r6, [r4, #0]
 800c1ec:	6961      	ldr	r1, [r4, #20]
 800c1ee:	1d18      	adds	r0, r3, #4
 800c1f0:	6028      	str	r0, [r5, #0]
 800c1f2:	0635      	lsls	r5, r6, #24
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	d501      	bpl.n	800c1fc <_printf_i+0x1c4>
 800c1f8:	6019      	str	r1, [r3, #0]
 800c1fa:	e002      	b.n	800c202 <_printf_i+0x1ca>
 800c1fc:	0670      	lsls	r0, r6, #25
 800c1fe:	d5fb      	bpl.n	800c1f8 <_printf_i+0x1c0>
 800c200:	8019      	strh	r1, [r3, #0]
 800c202:	2300      	movs	r3, #0
 800c204:	6123      	str	r3, [r4, #16]
 800c206:	4615      	mov	r5, r2
 800c208:	e7bc      	b.n	800c184 <_printf_i+0x14c>
 800c20a:	682b      	ldr	r3, [r5, #0]
 800c20c:	1d1a      	adds	r2, r3, #4
 800c20e:	602a      	str	r2, [r5, #0]
 800c210:	681d      	ldr	r5, [r3, #0]
 800c212:	6862      	ldr	r2, [r4, #4]
 800c214:	2100      	movs	r1, #0
 800c216:	4628      	mov	r0, r5
 800c218:	f7f4 f862 	bl	80002e0 <memchr>
 800c21c:	b108      	cbz	r0, 800c222 <_printf_i+0x1ea>
 800c21e:	1b40      	subs	r0, r0, r5
 800c220:	6060      	str	r0, [r4, #4]
 800c222:	6863      	ldr	r3, [r4, #4]
 800c224:	6123      	str	r3, [r4, #16]
 800c226:	2300      	movs	r3, #0
 800c228:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c22c:	e7aa      	b.n	800c184 <_printf_i+0x14c>
 800c22e:	6923      	ldr	r3, [r4, #16]
 800c230:	462a      	mov	r2, r5
 800c232:	4649      	mov	r1, r9
 800c234:	4640      	mov	r0, r8
 800c236:	47d0      	blx	sl
 800c238:	3001      	adds	r0, #1
 800c23a:	d0ad      	beq.n	800c198 <_printf_i+0x160>
 800c23c:	6823      	ldr	r3, [r4, #0]
 800c23e:	079b      	lsls	r3, r3, #30
 800c240:	d413      	bmi.n	800c26a <_printf_i+0x232>
 800c242:	68e0      	ldr	r0, [r4, #12]
 800c244:	9b03      	ldr	r3, [sp, #12]
 800c246:	4298      	cmp	r0, r3
 800c248:	bfb8      	it	lt
 800c24a:	4618      	movlt	r0, r3
 800c24c:	e7a6      	b.n	800c19c <_printf_i+0x164>
 800c24e:	2301      	movs	r3, #1
 800c250:	4632      	mov	r2, r6
 800c252:	4649      	mov	r1, r9
 800c254:	4640      	mov	r0, r8
 800c256:	47d0      	blx	sl
 800c258:	3001      	adds	r0, #1
 800c25a:	d09d      	beq.n	800c198 <_printf_i+0x160>
 800c25c:	3501      	adds	r5, #1
 800c25e:	68e3      	ldr	r3, [r4, #12]
 800c260:	9903      	ldr	r1, [sp, #12]
 800c262:	1a5b      	subs	r3, r3, r1
 800c264:	42ab      	cmp	r3, r5
 800c266:	dcf2      	bgt.n	800c24e <_printf_i+0x216>
 800c268:	e7eb      	b.n	800c242 <_printf_i+0x20a>
 800c26a:	2500      	movs	r5, #0
 800c26c:	f104 0619 	add.w	r6, r4, #25
 800c270:	e7f5      	b.n	800c25e <_printf_i+0x226>
 800c272:	bf00      	nop
 800c274:	0800ffea 	.word	0x0800ffea
 800c278:	0800fffb 	.word	0x0800fffb

0800c27c <_scanf_float>:
 800c27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c280:	b087      	sub	sp, #28
 800c282:	4617      	mov	r7, r2
 800c284:	9303      	str	r3, [sp, #12]
 800c286:	688b      	ldr	r3, [r1, #8]
 800c288:	1e5a      	subs	r2, r3, #1
 800c28a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c28e:	bf83      	ittte	hi
 800c290:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c294:	195b      	addhi	r3, r3, r5
 800c296:	9302      	strhi	r3, [sp, #8]
 800c298:	2300      	movls	r3, #0
 800c29a:	bf86      	itte	hi
 800c29c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c2a0:	608b      	strhi	r3, [r1, #8]
 800c2a2:	9302      	strls	r3, [sp, #8]
 800c2a4:	680b      	ldr	r3, [r1, #0]
 800c2a6:	468b      	mov	fp, r1
 800c2a8:	2500      	movs	r5, #0
 800c2aa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c2ae:	f84b 3b1c 	str.w	r3, [fp], #28
 800c2b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c2b6:	4680      	mov	r8, r0
 800c2b8:	460c      	mov	r4, r1
 800c2ba:	465e      	mov	r6, fp
 800c2bc:	46aa      	mov	sl, r5
 800c2be:	46a9      	mov	r9, r5
 800c2c0:	9501      	str	r5, [sp, #4]
 800c2c2:	68a2      	ldr	r2, [r4, #8]
 800c2c4:	b152      	cbz	r2, 800c2dc <_scanf_float+0x60>
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	2b4e      	cmp	r3, #78	; 0x4e
 800c2cc:	d864      	bhi.n	800c398 <_scanf_float+0x11c>
 800c2ce:	2b40      	cmp	r3, #64	; 0x40
 800c2d0:	d83c      	bhi.n	800c34c <_scanf_float+0xd0>
 800c2d2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c2d6:	b2c8      	uxtb	r0, r1
 800c2d8:	280e      	cmp	r0, #14
 800c2da:	d93a      	bls.n	800c352 <_scanf_float+0xd6>
 800c2dc:	f1b9 0f00 	cmp.w	r9, #0
 800c2e0:	d003      	beq.n	800c2ea <_scanf_float+0x6e>
 800c2e2:	6823      	ldr	r3, [r4, #0]
 800c2e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c2e8:	6023      	str	r3, [r4, #0]
 800c2ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c2ee:	f1ba 0f01 	cmp.w	sl, #1
 800c2f2:	f200 8113 	bhi.w	800c51c <_scanf_float+0x2a0>
 800c2f6:	455e      	cmp	r6, fp
 800c2f8:	f200 8105 	bhi.w	800c506 <_scanf_float+0x28a>
 800c2fc:	2501      	movs	r5, #1
 800c2fe:	4628      	mov	r0, r5
 800c300:	b007      	add	sp, #28
 800c302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c306:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c30a:	2a0d      	cmp	r2, #13
 800c30c:	d8e6      	bhi.n	800c2dc <_scanf_float+0x60>
 800c30e:	a101      	add	r1, pc, #4	; (adr r1, 800c314 <_scanf_float+0x98>)
 800c310:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c314:	0800c453 	.word	0x0800c453
 800c318:	0800c2dd 	.word	0x0800c2dd
 800c31c:	0800c2dd 	.word	0x0800c2dd
 800c320:	0800c2dd 	.word	0x0800c2dd
 800c324:	0800c4b3 	.word	0x0800c4b3
 800c328:	0800c48b 	.word	0x0800c48b
 800c32c:	0800c2dd 	.word	0x0800c2dd
 800c330:	0800c2dd 	.word	0x0800c2dd
 800c334:	0800c461 	.word	0x0800c461
 800c338:	0800c2dd 	.word	0x0800c2dd
 800c33c:	0800c2dd 	.word	0x0800c2dd
 800c340:	0800c2dd 	.word	0x0800c2dd
 800c344:	0800c2dd 	.word	0x0800c2dd
 800c348:	0800c419 	.word	0x0800c419
 800c34c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c350:	e7db      	b.n	800c30a <_scanf_float+0x8e>
 800c352:	290e      	cmp	r1, #14
 800c354:	d8c2      	bhi.n	800c2dc <_scanf_float+0x60>
 800c356:	a001      	add	r0, pc, #4	; (adr r0, 800c35c <_scanf_float+0xe0>)
 800c358:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c35c:	0800c40b 	.word	0x0800c40b
 800c360:	0800c2dd 	.word	0x0800c2dd
 800c364:	0800c40b 	.word	0x0800c40b
 800c368:	0800c49f 	.word	0x0800c49f
 800c36c:	0800c2dd 	.word	0x0800c2dd
 800c370:	0800c3b9 	.word	0x0800c3b9
 800c374:	0800c3f5 	.word	0x0800c3f5
 800c378:	0800c3f5 	.word	0x0800c3f5
 800c37c:	0800c3f5 	.word	0x0800c3f5
 800c380:	0800c3f5 	.word	0x0800c3f5
 800c384:	0800c3f5 	.word	0x0800c3f5
 800c388:	0800c3f5 	.word	0x0800c3f5
 800c38c:	0800c3f5 	.word	0x0800c3f5
 800c390:	0800c3f5 	.word	0x0800c3f5
 800c394:	0800c3f5 	.word	0x0800c3f5
 800c398:	2b6e      	cmp	r3, #110	; 0x6e
 800c39a:	d809      	bhi.n	800c3b0 <_scanf_float+0x134>
 800c39c:	2b60      	cmp	r3, #96	; 0x60
 800c39e:	d8b2      	bhi.n	800c306 <_scanf_float+0x8a>
 800c3a0:	2b54      	cmp	r3, #84	; 0x54
 800c3a2:	d077      	beq.n	800c494 <_scanf_float+0x218>
 800c3a4:	2b59      	cmp	r3, #89	; 0x59
 800c3a6:	d199      	bne.n	800c2dc <_scanf_float+0x60>
 800c3a8:	2d07      	cmp	r5, #7
 800c3aa:	d197      	bne.n	800c2dc <_scanf_float+0x60>
 800c3ac:	2508      	movs	r5, #8
 800c3ae:	e029      	b.n	800c404 <_scanf_float+0x188>
 800c3b0:	2b74      	cmp	r3, #116	; 0x74
 800c3b2:	d06f      	beq.n	800c494 <_scanf_float+0x218>
 800c3b4:	2b79      	cmp	r3, #121	; 0x79
 800c3b6:	e7f6      	b.n	800c3a6 <_scanf_float+0x12a>
 800c3b8:	6821      	ldr	r1, [r4, #0]
 800c3ba:	05c8      	lsls	r0, r1, #23
 800c3bc:	d51a      	bpl.n	800c3f4 <_scanf_float+0x178>
 800c3be:	9b02      	ldr	r3, [sp, #8]
 800c3c0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c3c4:	6021      	str	r1, [r4, #0]
 800c3c6:	f109 0901 	add.w	r9, r9, #1
 800c3ca:	b11b      	cbz	r3, 800c3d4 <_scanf_float+0x158>
 800c3cc:	3b01      	subs	r3, #1
 800c3ce:	3201      	adds	r2, #1
 800c3d0:	9302      	str	r3, [sp, #8]
 800c3d2:	60a2      	str	r2, [r4, #8]
 800c3d4:	68a3      	ldr	r3, [r4, #8]
 800c3d6:	3b01      	subs	r3, #1
 800c3d8:	60a3      	str	r3, [r4, #8]
 800c3da:	6923      	ldr	r3, [r4, #16]
 800c3dc:	3301      	adds	r3, #1
 800c3de:	6123      	str	r3, [r4, #16]
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	3b01      	subs	r3, #1
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	607b      	str	r3, [r7, #4]
 800c3e8:	f340 8084 	ble.w	800c4f4 <_scanf_float+0x278>
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	603b      	str	r3, [r7, #0]
 800c3f2:	e766      	b.n	800c2c2 <_scanf_float+0x46>
 800c3f4:	eb1a 0f05 	cmn.w	sl, r5
 800c3f8:	f47f af70 	bne.w	800c2dc <_scanf_float+0x60>
 800c3fc:	6822      	ldr	r2, [r4, #0]
 800c3fe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c402:	6022      	str	r2, [r4, #0]
 800c404:	f806 3b01 	strb.w	r3, [r6], #1
 800c408:	e7e4      	b.n	800c3d4 <_scanf_float+0x158>
 800c40a:	6822      	ldr	r2, [r4, #0]
 800c40c:	0610      	lsls	r0, r2, #24
 800c40e:	f57f af65 	bpl.w	800c2dc <_scanf_float+0x60>
 800c412:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c416:	e7f4      	b.n	800c402 <_scanf_float+0x186>
 800c418:	f1ba 0f00 	cmp.w	sl, #0
 800c41c:	d10e      	bne.n	800c43c <_scanf_float+0x1c0>
 800c41e:	f1b9 0f00 	cmp.w	r9, #0
 800c422:	d10e      	bne.n	800c442 <_scanf_float+0x1c6>
 800c424:	6822      	ldr	r2, [r4, #0]
 800c426:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c42a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c42e:	d108      	bne.n	800c442 <_scanf_float+0x1c6>
 800c430:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c434:	6022      	str	r2, [r4, #0]
 800c436:	f04f 0a01 	mov.w	sl, #1
 800c43a:	e7e3      	b.n	800c404 <_scanf_float+0x188>
 800c43c:	f1ba 0f02 	cmp.w	sl, #2
 800c440:	d055      	beq.n	800c4ee <_scanf_float+0x272>
 800c442:	2d01      	cmp	r5, #1
 800c444:	d002      	beq.n	800c44c <_scanf_float+0x1d0>
 800c446:	2d04      	cmp	r5, #4
 800c448:	f47f af48 	bne.w	800c2dc <_scanf_float+0x60>
 800c44c:	3501      	adds	r5, #1
 800c44e:	b2ed      	uxtb	r5, r5
 800c450:	e7d8      	b.n	800c404 <_scanf_float+0x188>
 800c452:	f1ba 0f01 	cmp.w	sl, #1
 800c456:	f47f af41 	bne.w	800c2dc <_scanf_float+0x60>
 800c45a:	f04f 0a02 	mov.w	sl, #2
 800c45e:	e7d1      	b.n	800c404 <_scanf_float+0x188>
 800c460:	b97d      	cbnz	r5, 800c482 <_scanf_float+0x206>
 800c462:	f1b9 0f00 	cmp.w	r9, #0
 800c466:	f47f af3c 	bne.w	800c2e2 <_scanf_float+0x66>
 800c46a:	6822      	ldr	r2, [r4, #0]
 800c46c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c470:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c474:	f47f af39 	bne.w	800c2ea <_scanf_float+0x6e>
 800c478:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c47c:	6022      	str	r2, [r4, #0]
 800c47e:	2501      	movs	r5, #1
 800c480:	e7c0      	b.n	800c404 <_scanf_float+0x188>
 800c482:	2d03      	cmp	r5, #3
 800c484:	d0e2      	beq.n	800c44c <_scanf_float+0x1d0>
 800c486:	2d05      	cmp	r5, #5
 800c488:	e7de      	b.n	800c448 <_scanf_float+0x1cc>
 800c48a:	2d02      	cmp	r5, #2
 800c48c:	f47f af26 	bne.w	800c2dc <_scanf_float+0x60>
 800c490:	2503      	movs	r5, #3
 800c492:	e7b7      	b.n	800c404 <_scanf_float+0x188>
 800c494:	2d06      	cmp	r5, #6
 800c496:	f47f af21 	bne.w	800c2dc <_scanf_float+0x60>
 800c49a:	2507      	movs	r5, #7
 800c49c:	e7b2      	b.n	800c404 <_scanf_float+0x188>
 800c49e:	6822      	ldr	r2, [r4, #0]
 800c4a0:	0591      	lsls	r1, r2, #22
 800c4a2:	f57f af1b 	bpl.w	800c2dc <_scanf_float+0x60>
 800c4a6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c4aa:	6022      	str	r2, [r4, #0]
 800c4ac:	f8cd 9004 	str.w	r9, [sp, #4]
 800c4b0:	e7a8      	b.n	800c404 <_scanf_float+0x188>
 800c4b2:	6822      	ldr	r2, [r4, #0]
 800c4b4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c4b8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c4bc:	d006      	beq.n	800c4cc <_scanf_float+0x250>
 800c4be:	0550      	lsls	r0, r2, #21
 800c4c0:	f57f af0c 	bpl.w	800c2dc <_scanf_float+0x60>
 800c4c4:	f1b9 0f00 	cmp.w	r9, #0
 800c4c8:	f43f af0f 	beq.w	800c2ea <_scanf_float+0x6e>
 800c4cc:	0591      	lsls	r1, r2, #22
 800c4ce:	bf58      	it	pl
 800c4d0:	9901      	ldrpl	r1, [sp, #4]
 800c4d2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c4d6:	bf58      	it	pl
 800c4d8:	eba9 0101 	subpl.w	r1, r9, r1
 800c4dc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c4e0:	bf58      	it	pl
 800c4e2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c4e6:	6022      	str	r2, [r4, #0]
 800c4e8:	f04f 0900 	mov.w	r9, #0
 800c4ec:	e78a      	b.n	800c404 <_scanf_float+0x188>
 800c4ee:	f04f 0a03 	mov.w	sl, #3
 800c4f2:	e787      	b.n	800c404 <_scanf_float+0x188>
 800c4f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c4f8:	4639      	mov	r1, r7
 800c4fa:	4640      	mov	r0, r8
 800c4fc:	4798      	blx	r3
 800c4fe:	2800      	cmp	r0, #0
 800c500:	f43f aedf 	beq.w	800c2c2 <_scanf_float+0x46>
 800c504:	e6ea      	b.n	800c2dc <_scanf_float+0x60>
 800c506:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c50a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c50e:	463a      	mov	r2, r7
 800c510:	4640      	mov	r0, r8
 800c512:	4798      	blx	r3
 800c514:	6923      	ldr	r3, [r4, #16]
 800c516:	3b01      	subs	r3, #1
 800c518:	6123      	str	r3, [r4, #16]
 800c51a:	e6ec      	b.n	800c2f6 <_scanf_float+0x7a>
 800c51c:	1e6b      	subs	r3, r5, #1
 800c51e:	2b06      	cmp	r3, #6
 800c520:	d825      	bhi.n	800c56e <_scanf_float+0x2f2>
 800c522:	2d02      	cmp	r5, #2
 800c524:	d836      	bhi.n	800c594 <_scanf_float+0x318>
 800c526:	455e      	cmp	r6, fp
 800c528:	f67f aee8 	bls.w	800c2fc <_scanf_float+0x80>
 800c52c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c530:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c534:	463a      	mov	r2, r7
 800c536:	4640      	mov	r0, r8
 800c538:	4798      	blx	r3
 800c53a:	6923      	ldr	r3, [r4, #16]
 800c53c:	3b01      	subs	r3, #1
 800c53e:	6123      	str	r3, [r4, #16]
 800c540:	e7f1      	b.n	800c526 <_scanf_float+0x2aa>
 800c542:	9802      	ldr	r0, [sp, #8]
 800c544:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c548:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c54c:	9002      	str	r0, [sp, #8]
 800c54e:	463a      	mov	r2, r7
 800c550:	4640      	mov	r0, r8
 800c552:	4798      	blx	r3
 800c554:	6923      	ldr	r3, [r4, #16]
 800c556:	3b01      	subs	r3, #1
 800c558:	6123      	str	r3, [r4, #16]
 800c55a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c55e:	fa5f fa8a 	uxtb.w	sl, sl
 800c562:	f1ba 0f02 	cmp.w	sl, #2
 800c566:	d1ec      	bne.n	800c542 <_scanf_float+0x2c6>
 800c568:	3d03      	subs	r5, #3
 800c56a:	b2ed      	uxtb	r5, r5
 800c56c:	1b76      	subs	r6, r6, r5
 800c56e:	6823      	ldr	r3, [r4, #0]
 800c570:	05da      	lsls	r2, r3, #23
 800c572:	d52f      	bpl.n	800c5d4 <_scanf_float+0x358>
 800c574:	055b      	lsls	r3, r3, #21
 800c576:	d510      	bpl.n	800c59a <_scanf_float+0x31e>
 800c578:	455e      	cmp	r6, fp
 800c57a:	f67f aebf 	bls.w	800c2fc <_scanf_float+0x80>
 800c57e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c582:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c586:	463a      	mov	r2, r7
 800c588:	4640      	mov	r0, r8
 800c58a:	4798      	blx	r3
 800c58c:	6923      	ldr	r3, [r4, #16]
 800c58e:	3b01      	subs	r3, #1
 800c590:	6123      	str	r3, [r4, #16]
 800c592:	e7f1      	b.n	800c578 <_scanf_float+0x2fc>
 800c594:	46aa      	mov	sl, r5
 800c596:	9602      	str	r6, [sp, #8]
 800c598:	e7df      	b.n	800c55a <_scanf_float+0x2de>
 800c59a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c59e:	6923      	ldr	r3, [r4, #16]
 800c5a0:	2965      	cmp	r1, #101	; 0x65
 800c5a2:	f103 33ff 	add.w	r3, r3, #4294967295
 800c5a6:	f106 35ff 	add.w	r5, r6, #4294967295
 800c5aa:	6123      	str	r3, [r4, #16]
 800c5ac:	d00c      	beq.n	800c5c8 <_scanf_float+0x34c>
 800c5ae:	2945      	cmp	r1, #69	; 0x45
 800c5b0:	d00a      	beq.n	800c5c8 <_scanf_float+0x34c>
 800c5b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c5b6:	463a      	mov	r2, r7
 800c5b8:	4640      	mov	r0, r8
 800c5ba:	4798      	blx	r3
 800c5bc:	6923      	ldr	r3, [r4, #16]
 800c5be:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c5c2:	3b01      	subs	r3, #1
 800c5c4:	1eb5      	subs	r5, r6, #2
 800c5c6:	6123      	str	r3, [r4, #16]
 800c5c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c5cc:	463a      	mov	r2, r7
 800c5ce:	4640      	mov	r0, r8
 800c5d0:	4798      	blx	r3
 800c5d2:	462e      	mov	r6, r5
 800c5d4:	6825      	ldr	r5, [r4, #0]
 800c5d6:	f015 0510 	ands.w	r5, r5, #16
 800c5da:	d14d      	bne.n	800c678 <_scanf_float+0x3fc>
 800c5dc:	7035      	strb	r5, [r6, #0]
 800c5de:	6823      	ldr	r3, [r4, #0]
 800c5e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c5e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c5e8:	d11a      	bne.n	800c620 <_scanf_float+0x3a4>
 800c5ea:	9b01      	ldr	r3, [sp, #4]
 800c5ec:	454b      	cmp	r3, r9
 800c5ee:	eba3 0209 	sub.w	r2, r3, r9
 800c5f2:	d122      	bne.n	800c63a <_scanf_float+0x3be>
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	4659      	mov	r1, fp
 800c5f8:	4640      	mov	r0, r8
 800c5fa:	f002 fbdb 	bl	800edb4 <_strtod_r>
 800c5fe:	9b03      	ldr	r3, [sp, #12]
 800c600:	6821      	ldr	r1, [r4, #0]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f011 0f02 	tst.w	r1, #2
 800c608:	f103 0204 	add.w	r2, r3, #4
 800c60c:	d020      	beq.n	800c650 <_scanf_float+0x3d4>
 800c60e:	9903      	ldr	r1, [sp, #12]
 800c610:	600a      	str	r2, [r1, #0]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	ed83 0b00 	vstr	d0, [r3]
 800c618:	68e3      	ldr	r3, [r4, #12]
 800c61a:	3301      	adds	r3, #1
 800c61c:	60e3      	str	r3, [r4, #12]
 800c61e:	e66e      	b.n	800c2fe <_scanf_float+0x82>
 800c620:	9b04      	ldr	r3, [sp, #16]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d0e6      	beq.n	800c5f4 <_scanf_float+0x378>
 800c626:	9905      	ldr	r1, [sp, #20]
 800c628:	230a      	movs	r3, #10
 800c62a:	462a      	mov	r2, r5
 800c62c:	3101      	adds	r1, #1
 800c62e:	4640      	mov	r0, r8
 800c630:	f002 fc48 	bl	800eec4 <_strtol_r>
 800c634:	9b04      	ldr	r3, [sp, #16]
 800c636:	9e05      	ldr	r6, [sp, #20]
 800c638:	1ac2      	subs	r2, r0, r3
 800c63a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c63e:	429e      	cmp	r6, r3
 800c640:	bf28      	it	cs
 800c642:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c646:	490d      	ldr	r1, [pc, #52]	; (800c67c <_scanf_float+0x400>)
 800c648:	4630      	mov	r0, r6
 800c64a:	f000 f8cb 	bl	800c7e4 <siprintf>
 800c64e:	e7d1      	b.n	800c5f4 <_scanf_float+0x378>
 800c650:	f011 0f04 	tst.w	r1, #4
 800c654:	9903      	ldr	r1, [sp, #12]
 800c656:	600a      	str	r2, [r1, #0]
 800c658:	d1db      	bne.n	800c612 <_scanf_float+0x396>
 800c65a:	eeb4 0b40 	vcmp.f64	d0, d0
 800c65e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c662:	681e      	ldr	r6, [r3, #0]
 800c664:	d705      	bvc.n	800c672 <_scanf_float+0x3f6>
 800c666:	4806      	ldr	r0, [pc, #24]	; (800c680 <_scanf_float+0x404>)
 800c668:	f000 fa32 	bl	800cad0 <nanf>
 800c66c:	ed86 0a00 	vstr	s0, [r6]
 800c670:	e7d2      	b.n	800c618 <_scanf_float+0x39c>
 800c672:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c676:	e7f9      	b.n	800c66c <_scanf_float+0x3f0>
 800c678:	2500      	movs	r5, #0
 800c67a:	e640      	b.n	800c2fe <_scanf_float+0x82>
 800c67c:	0801000c 	.word	0x0801000c
 800c680:	0801039d 	.word	0x0801039d

0800c684 <std>:
 800c684:	2300      	movs	r3, #0
 800c686:	b510      	push	{r4, lr}
 800c688:	4604      	mov	r4, r0
 800c68a:	e9c0 3300 	strd	r3, r3, [r0]
 800c68e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c692:	6083      	str	r3, [r0, #8]
 800c694:	8181      	strh	r1, [r0, #12]
 800c696:	6643      	str	r3, [r0, #100]	; 0x64
 800c698:	81c2      	strh	r2, [r0, #14]
 800c69a:	6183      	str	r3, [r0, #24]
 800c69c:	4619      	mov	r1, r3
 800c69e:	2208      	movs	r2, #8
 800c6a0:	305c      	adds	r0, #92	; 0x5c
 800c6a2:	f000 f997 	bl	800c9d4 <memset>
 800c6a6:	4b05      	ldr	r3, [pc, #20]	; (800c6bc <std+0x38>)
 800c6a8:	6263      	str	r3, [r4, #36]	; 0x24
 800c6aa:	4b05      	ldr	r3, [pc, #20]	; (800c6c0 <std+0x3c>)
 800c6ac:	62a3      	str	r3, [r4, #40]	; 0x28
 800c6ae:	4b05      	ldr	r3, [pc, #20]	; (800c6c4 <std+0x40>)
 800c6b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c6b2:	4b05      	ldr	r3, [pc, #20]	; (800c6c8 <std+0x44>)
 800c6b4:	6224      	str	r4, [r4, #32]
 800c6b6:	6323      	str	r3, [r4, #48]	; 0x30
 800c6b8:	bd10      	pop	{r4, pc}
 800c6ba:	bf00      	nop
 800c6bc:	0800c825 	.word	0x0800c825
 800c6c0:	0800c847 	.word	0x0800c847
 800c6c4:	0800c87f 	.word	0x0800c87f
 800c6c8:	0800c8a3 	.word	0x0800c8a3

0800c6cc <stdio_exit_handler>:
 800c6cc:	4a02      	ldr	r2, [pc, #8]	; (800c6d8 <stdio_exit_handler+0xc>)
 800c6ce:	4903      	ldr	r1, [pc, #12]	; (800c6dc <stdio_exit_handler+0x10>)
 800c6d0:	4803      	ldr	r0, [pc, #12]	; (800c6e0 <stdio_exit_handler+0x14>)
 800c6d2:	f000 b869 	b.w	800c7a8 <_fwalk_sglue>
 800c6d6:	bf00      	nop
 800c6d8:	24000014 	.word	0x24000014
 800c6dc:	0800f285 	.word	0x0800f285
 800c6e0:	24000020 	.word	0x24000020

0800c6e4 <cleanup_stdio>:
 800c6e4:	6841      	ldr	r1, [r0, #4]
 800c6e6:	4b0c      	ldr	r3, [pc, #48]	; (800c718 <cleanup_stdio+0x34>)
 800c6e8:	4299      	cmp	r1, r3
 800c6ea:	b510      	push	{r4, lr}
 800c6ec:	4604      	mov	r4, r0
 800c6ee:	d001      	beq.n	800c6f4 <cleanup_stdio+0x10>
 800c6f0:	f002 fdc8 	bl	800f284 <_fflush_r>
 800c6f4:	68a1      	ldr	r1, [r4, #8]
 800c6f6:	4b09      	ldr	r3, [pc, #36]	; (800c71c <cleanup_stdio+0x38>)
 800c6f8:	4299      	cmp	r1, r3
 800c6fa:	d002      	beq.n	800c702 <cleanup_stdio+0x1e>
 800c6fc:	4620      	mov	r0, r4
 800c6fe:	f002 fdc1 	bl	800f284 <_fflush_r>
 800c702:	68e1      	ldr	r1, [r4, #12]
 800c704:	4b06      	ldr	r3, [pc, #24]	; (800c720 <cleanup_stdio+0x3c>)
 800c706:	4299      	cmp	r1, r3
 800c708:	d004      	beq.n	800c714 <cleanup_stdio+0x30>
 800c70a:	4620      	mov	r0, r4
 800c70c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c710:	f002 bdb8 	b.w	800f284 <_fflush_r>
 800c714:	bd10      	pop	{r4, pc}
 800c716:	bf00      	nop
 800c718:	24000564 	.word	0x24000564
 800c71c:	240005cc 	.word	0x240005cc
 800c720:	24000634 	.word	0x24000634

0800c724 <global_stdio_init.part.0>:
 800c724:	b510      	push	{r4, lr}
 800c726:	4b0b      	ldr	r3, [pc, #44]	; (800c754 <global_stdio_init.part.0+0x30>)
 800c728:	4c0b      	ldr	r4, [pc, #44]	; (800c758 <global_stdio_init.part.0+0x34>)
 800c72a:	4a0c      	ldr	r2, [pc, #48]	; (800c75c <global_stdio_init.part.0+0x38>)
 800c72c:	601a      	str	r2, [r3, #0]
 800c72e:	4620      	mov	r0, r4
 800c730:	2200      	movs	r2, #0
 800c732:	2104      	movs	r1, #4
 800c734:	f7ff ffa6 	bl	800c684 <std>
 800c738:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c73c:	2201      	movs	r2, #1
 800c73e:	2109      	movs	r1, #9
 800c740:	f7ff ffa0 	bl	800c684 <std>
 800c744:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c748:	2202      	movs	r2, #2
 800c74a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c74e:	2112      	movs	r1, #18
 800c750:	f7ff bf98 	b.w	800c684 <std>
 800c754:	2400069c 	.word	0x2400069c
 800c758:	24000564 	.word	0x24000564
 800c75c:	0800c6cd 	.word	0x0800c6cd

0800c760 <__sfp_lock_acquire>:
 800c760:	4801      	ldr	r0, [pc, #4]	; (800c768 <__sfp_lock_acquire+0x8>)
 800c762:	f000 b9b3 	b.w	800cacc <__retarget_lock_acquire_recursive>
 800c766:	bf00      	nop
 800c768:	240006a5 	.word	0x240006a5

0800c76c <__sfp_lock_release>:
 800c76c:	4801      	ldr	r0, [pc, #4]	; (800c774 <__sfp_lock_release+0x8>)
 800c76e:	f000 b9ae 	b.w	800cace <__retarget_lock_release_recursive>
 800c772:	bf00      	nop
 800c774:	240006a5 	.word	0x240006a5

0800c778 <__sinit>:
 800c778:	b510      	push	{r4, lr}
 800c77a:	4604      	mov	r4, r0
 800c77c:	f7ff fff0 	bl	800c760 <__sfp_lock_acquire>
 800c780:	6a23      	ldr	r3, [r4, #32]
 800c782:	b11b      	cbz	r3, 800c78c <__sinit+0x14>
 800c784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c788:	f7ff bff0 	b.w	800c76c <__sfp_lock_release>
 800c78c:	4b04      	ldr	r3, [pc, #16]	; (800c7a0 <__sinit+0x28>)
 800c78e:	6223      	str	r3, [r4, #32]
 800c790:	4b04      	ldr	r3, [pc, #16]	; (800c7a4 <__sinit+0x2c>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d1f5      	bne.n	800c784 <__sinit+0xc>
 800c798:	f7ff ffc4 	bl	800c724 <global_stdio_init.part.0>
 800c79c:	e7f2      	b.n	800c784 <__sinit+0xc>
 800c79e:	bf00      	nop
 800c7a0:	0800c6e5 	.word	0x0800c6e5
 800c7a4:	2400069c 	.word	0x2400069c

0800c7a8 <_fwalk_sglue>:
 800c7a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7ac:	4607      	mov	r7, r0
 800c7ae:	4688      	mov	r8, r1
 800c7b0:	4614      	mov	r4, r2
 800c7b2:	2600      	movs	r6, #0
 800c7b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c7b8:	f1b9 0901 	subs.w	r9, r9, #1
 800c7bc:	d505      	bpl.n	800c7ca <_fwalk_sglue+0x22>
 800c7be:	6824      	ldr	r4, [r4, #0]
 800c7c0:	2c00      	cmp	r4, #0
 800c7c2:	d1f7      	bne.n	800c7b4 <_fwalk_sglue+0xc>
 800c7c4:	4630      	mov	r0, r6
 800c7c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7ca:	89ab      	ldrh	r3, [r5, #12]
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d907      	bls.n	800c7e0 <_fwalk_sglue+0x38>
 800c7d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c7d4:	3301      	adds	r3, #1
 800c7d6:	d003      	beq.n	800c7e0 <_fwalk_sglue+0x38>
 800c7d8:	4629      	mov	r1, r5
 800c7da:	4638      	mov	r0, r7
 800c7dc:	47c0      	blx	r8
 800c7de:	4306      	orrs	r6, r0
 800c7e0:	3568      	adds	r5, #104	; 0x68
 800c7e2:	e7e9      	b.n	800c7b8 <_fwalk_sglue+0x10>

0800c7e4 <siprintf>:
 800c7e4:	b40e      	push	{r1, r2, r3}
 800c7e6:	b500      	push	{lr}
 800c7e8:	b09c      	sub	sp, #112	; 0x70
 800c7ea:	ab1d      	add	r3, sp, #116	; 0x74
 800c7ec:	9002      	str	r0, [sp, #8]
 800c7ee:	9006      	str	r0, [sp, #24]
 800c7f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c7f4:	4809      	ldr	r0, [pc, #36]	; (800c81c <siprintf+0x38>)
 800c7f6:	9107      	str	r1, [sp, #28]
 800c7f8:	9104      	str	r1, [sp, #16]
 800c7fa:	4909      	ldr	r1, [pc, #36]	; (800c820 <siprintf+0x3c>)
 800c7fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c800:	9105      	str	r1, [sp, #20]
 800c802:	6800      	ldr	r0, [r0, #0]
 800c804:	9301      	str	r3, [sp, #4]
 800c806:	a902      	add	r1, sp, #8
 800c808:	f002 fbb8 	bl	800ef7c <_svfiprintf_r>
 800c80c:	9b02      	ldr	r3, [sp, #8]
 800c80e:	2200      	movs	r2, #0
 800c810:	701a      	strb	r2, [r3, #0]
 800c812:	b01c      	add	sp, #112	; 0x70
 800c814:	f85d eb04 	ldr.w	lr, [sp], #4
 800c818:	b003      	add	sp, #12
 800c81a:	4770      	bx	lr
 800c81c:	2400006c 	.word	0x2400006c
 800c820:	ffff0208 	.word	0xffff0208

0800c824 <__sread>:
 800c824:	b510      	push	{r4, lr}
 800c826:	460c      	mov	r4, r1
 800c828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c82c:	f000 f900 	bl	800ca30 <_read_r>
 800c830:	2800      	cmp	r0, #0
 800c832:	bfab      	itete	ge
 800c834:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c836:	89a3      	ldrhlt	r3, [r4, #12]
 800c838:	181b      	addge	r3, r3, r0
 800c83a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c83e:	bfac      	ite	ge
 800c840:	6563      	strge	r3, [r4, #84]	; 0x54
 800c842:	81a3      	strhlt	r3, [r4, #12]
 800c844:	bd10      	pop	{r4, pc}

0800c846 <__swrite>:
 800c846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c84a:	461f      	mov	r7, r3
 800c84c:	898b      	ldrh	r3, [r1, #12]
 800c84e:	05db      	lsls	r3, r3, #23
 800c850:	4605      	mov	r5, r0
 800c852:	460c      	mov	r4, r1
 800c854:	4616      	mov	r6, r2
 800c856:	d505      	bpl.n	800c864 <__swrite+0x1e>
 800c858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c85c:	2302      	movs	r3, #2
 800c85e:	2200      	movs	r2, #0
 800c860:	f000 f8d4 	bl	800ca0c <_lseek_r>
 800c864:	89a3      	ldrh	r3, [r4, #12]
 800c866:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c86a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c86e:	81a3      	strh	r3, [r4, #12]
 800c870:	4632      	mov	r2, r6
 800c872:	463b      	mov	r3, r7
 800c874:	4628      	mov	r0, r5
 800c876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c87a:	f000 b8eb 	b.w	800ca54 <_write_r>

0800c87e <__sseek>:
 800c87e:	b510      	push	{r4, lr}
 800c880:	460c      	mov	r4, r1
 800c882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c886:	f000 f8c1 	bl	800ca0c <_lseek_r>
 800c88a:	1c43      	adds	r3, r0, #1
 800c88c:	89a3      	ldrh	r3, [r4, #12]
 800c88e:	bf15      	itete	ne
 800c890:	6560      	strne	r0, [r4, #84]	; 0x54
 800c892:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c896:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c89a:	81a3      	strheq	r3, [r4, #12]
 800c89c:	bf18      	it	ne
 800c89e:	81a3      	strhne	r3, [r4, #12]
 800c8a0:	bd10      	pop	{r4, pc}

0800c8a2 <__sclose>:
 800c8a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8a6:	f000 b8a1 	b.w	800c9ec <_close_r>

0800c8aa <__swbuf_r>:
 800c8aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ac:	460e      	mov	r6, r1
 800c8ae:	4614      	mov	r4, r2
 800c8b0:	4605      	mov	r5, r0
 800c8b2:	b118      	cbz	r0, 800c8bc <__swbuf_r+0x12>
 800c8b4:	6a03      	ldr	r3, [r0, #32]
 800c8b6:	b90b      	cbnz	r3, 800c8bc <__swbuf_r+0x12>
 800c8b8:	f7ff ff5e 	bl	800c778 <__sinit>
 800c8bc:	69a3      	ldr	r3, [r4, #24]
 800c8be:	60a3      	str	r3, [r4, #8]
 800c8c0:	89a3      	ldrh	r3, [r4, #12]
 800c8c2:	071a      	lsls	r2, r3, #28
 800c8c4:	d525      	bpl.n	800c912 <__swbuf_r+0x68>
 800c8c6:	6923      	ldr	r3, [r4, #16]
 800c8c8:	b31b      	cbz	r3, 800c912 <__swbuf_r+0x68>
 800c8ca:	6823      	ldr	r3, [r4, #0]
 800c8cc:	6922      	ldr	r2, [r4, #16]
 800c8ce:	1a98      	subs	r0, r3, r2
 800c8d0:	6963      	ldr	r3, [r4, #20]
 800c8d2:	b2f6      	uxtb	r6, r6
 800c8d4:	4283      	cmp	r3, r0
 800c8d6:	4637      	mov	r7, r6
 800c8d8:	dc04      	bgt.n	800c8e4 <__swbuf_r+0x3a>
 800c8da:	4621      	mov	r1, r4
 800c8dc:	4628      	mov	r0, r5
 800c8de:	f002 fcd1 	bl	800f284 <_fflush_r>
 800c8e2:	b9e0      	cbnz	r0, 800c91e <__swbuf_r+0x74>
 800c8e4:	68a3      	ldr	r3, [r4, #8]
 800c8e6:	3b01      	subs	r3, #1
 800c8e8:	60a3      	str	r3, [r4, #8]
 800c8ea:	6823      	ldr	r3, [r4, #0]
 800c8ec:	1c5a      	adds	r2, r3, #1
 800c8ee:	6022      	str	r2, [r4, #0]
 800c8f0:	701e      	strb	r6, [r3, #0]
 800c8f2:	6962      	ldr	r2, [r4, #20]
 800c8f4:	1c43      	adds	r3, r0, #1
 800c8f6:	429a      	cmp	r2, r3
 800c8f8:	d004      	beq.n	800c904 <__swbuf_r+0x5a>
 800c8fa:	89a3      	ldrh	r3, [r4, #12]
 800c8fc:	07db      	lsls	r3, r3, #31
 800c8fe:	d506      	bpl.n	800c90e <__swbuf_r+0x64>
 800c900:	2e0a      	cmp	r6, #10
 800c902:	d104      	bne.n	800c90e <__swbuf_r+0x64>
 800c904:	4621      	mov	r1, r4
 800c906:	4628      	mov	r0, r5
 800c908:	f002 fcbc 	bl	800f284 <_fflush_r>
 800c90c:	b938      	cbnz	r0, 800c91e <__swbuf_r+0x74>
 800c90e:	4638      	mov	r0, r7
 800c910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c912:	4621      	mov	r1, r4
 800c914:	4628      	mov	r0, r5
 800c916:	f000 f805 	bl	800c924 <__swsetup_r>
 800c91a:	2800      	cmp	r0, #0
 800c91c:	d0d5      	beq.n	800c8ca <__swbuf_r+0x20>
 800c91e:	f04f 37ff 	mov.w	r7, #4294967295
 800c922:	e7f4      	b.n	800c90e <__swbuf_r+0x64>

0800c924 <__swsetup_r>:
 800c924:	b538      	push	{r3, r4, r5, lr}
 800c926:	4b2a      	ldr	r3, [pc, #168]	; (800c9d0 <__swsetup_r+0xac>)
 800c928:	4605      	mov	r5, r0
 800c92a:	6818      	ldr	r0, [r3, #0]
 800c92c:	460c      	mov	r4, r1
 800c92e:	b118      	cbz	r0, 800c938 <__swsetup_r+0x14>
 800c930:	6a03      	ldr	r3, [r0, #32]
 800c932:	b90b      	cbnz	r3, 800c938 <__swsetup_r+0x14>
 800c934:	f7ff ff20 	bl	800c778 <__sinit>
 800c938:	89a3      	ldrh	r3, [r4, #12]
 800c93a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c93e:	0718      	lsls	r0, r3, #28
 800c940:	d422      	bmi.n	800c988 <__swsetup_r+0x64>
 800c942:	06d9      	lsls	r1, r3, #27
 800c944:	d407      	bmi.n	800c956 <__swsetup_r+0x32>
 800c946:	2309      	movs	r3, #9
 800c948:	602b      	str	r3, [r5, #0]
 800c94a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c94e:	81a3      	strh	r3, [r4, #12]
 800c950:	f04f 30ff 	mov.w	r0, #4294967295
 800c954:	e034      	b.n	800c9c0 <__swsetup_r+0x9c>
 800c956:	0758      	lsls	r0, r3, #29
 800c958:	d512      	bpl.n	800c980 <__swsetup_r+0x5c>
 800c95a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c95c:	b141      	cbz	r1, 800c970 <__swsetup_r+0x4c>
 800c95e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c962:	4299      	cmp	r1, r3
 800c964:	d002      	beq.n	800c96c <__swsetup_r+0x48>
 800c966:	4628      	mov	r0, r5
 800c968:	f000 feae 	bl	800d6c8 <_free_r>
 800c96c:	2300      	movs	r3, #0
 800c96e:	6363      	str	r3, [r4, #52]	; 0x34
 800c970:	89a3      	ldrh	r3, [r4, #12]
 800c972:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c976:	81a3      	strh	r3, [r4, #12]
 800c978:	2300      	movs	r3, #0
 800c97a:	6063      	str	r3, [r4, #4]
 800c97c:	6923      	ldr	r3, [r4, #16]
 800c97e:	6023      	str	r3, [r4, #0]
 800c980:	89a3      	ldrh	r3, [r4, #12]
 800c982:	f043 0308 	orr.w	r3, r3, #8
 800c986:	81a3      	strh	r3, [r4, #12]
 800c988:	6923      	ldr	r3, [r4, #16]
 800c98a:	b94b      	cbnz	r3, 800c9a0 <__swsetup_r+0x7c>
 800c98c:	89a3      	ldrh	r3, [r4, #12]
 800c98e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c996:	d003      	beq.n	800c9a0 <__swsetup_r+0x7c>
 800c998:	4621      	mov	r1, r4
 800c99a:	4628      	mov	r0, r5
 800c99c:	f002 fcc0 	bl	800f320 <__smakebuf_r>
 800c9a0:	89a0      	ldrh	r0, [r4, #12]
 800c9a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c9a6:	f010 0301 	ands.w	r3, r0, #1
 800c9aa:	d00a      	beq.n	800c9c2 <__swsetup_r+0x9e>
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	60a3      	str	r3, [r4, #8]
 800c9b0:	6963      	ldr	r3, [r4, #20]
 800c9b2:	425b      	negs	r3, r3
 800c9b4:	61a3      	str	r3, [r4, #24]
 800c9b6:	6923      	ldr	r3, [r4, #16]
 800c9b8:	b943      	cbnz	r3, 800c9cc <__swsetup_r+0xa8>
 800c9ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c9be:	d1c4      	bne.n	800c94a <__swsetup_r+0x26>
 800c9c0:	bd38      	pop	{r3, r4, r5, pc}
 800c9c2:	0781      	lsls	r1, r0, #30
 800c9c4:	bf58      	it	pl
 800c9c6:	6963      	ldrpl	r3, [r4, #20]
 800c9c8:	60a3      	str	r3, [r4, #8]
 800c9ca:	e7f4      	b.n	800c9b6 <__swsetup_r+0x92>
 800c9cc:	2000      	movs	r0, #0
 800c9ce:	e7f7      	b.n	800c9c0 <__swsetup_r+0x9c>
 800c9d0:	2400006c 	.word	0x2400006c

0800c9d4 <memset>:
 800c9d4:	4402      	add	r2, r0
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	d100      	bne.n	800c9de <memset+0xa>
 800c9dc:	4770      	bx	lr
 800c9de:	f803 1b01 	strb.w	r1, [r3], #1
 800c9e2:	e7f9      	b.n	800c9d8 <memset+0x4>

0800c9e4 <_localeconv_r>:
 800c9e4:	4800      	ldr	r0, [pc, #0]	; (800c9e8 <_localeconv_r+0x4>)
 800c9e6:	4770      	bx	lr
 800c9e8:	24000160 	.word	0x24000160

0800c9ec <_close_r>:
 800c9ec:	b538      	push	{r3, r4, r5, lr}
 800c9ee:	4d06      	ldr	r5, [pc, #24]	; (800ca08 <_close_r+0x1c>)
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	4604      	mov	r4, r0
 800c9f4:	4608      	mov	r0, r1
 800c9f6:	602b      	str	r3, [r5, #0]
 800c9f8:	f7f5 f867 	bl	8001aca <_close>
 800c9fc:	1c43      	adds	r3, r0, #1
 800c9fe:	d102      	bne.n	800ca06 <_close_r+0x1a>
 800ca00:	682b      	ldr	r3, [r5, #0]
 800ca02:	b103      	cbz	r3, 800ca06 <_close_r+0x1a>
 800ca04:	6023      	str	r3, [r4, #0]
 800ca06:	bd38      	pop	{r3, r4, r5, pc}
 800ca08:	240006a0 	.word	0x240006a0

0800ca0c <_lseek_r>:
 800ca0c:	b538      	push	{r3, r4, r5, lr}
 800ca0e:	4d07      	ldr	r5, [pc, #28]	; (800ca2c <_lseek_r+0x20>)
 800ca10:	4604      	mov	r4, r0
 800ca12:	4608      	mov	r0, r1
 800ca14:	4611      	mov	r1, r2
 800ca16:	2200      	movs	r2, #0
 800ca18:	602a      	str	r2, [r5, #0]
 800ca1a:	461a      	mov	r2, r3
 800ca1c:	f7f5 f87c 	bl	8001b18 <_lseek>
 800ca20:	1c43      	adds	r3, r0, #1
 800ca22:	d102      	bne.n	800ca2a <_lseek_r+0x1e>
 800ca24:	682b      	ldr	r3, [r5, #0]
 800ca26:	b103      	cbz	r3, 800ca2a <_lseek_r+0x1e>
 800ca28:	6023      	str	r3, [r4, #0]
 800ca2a:	bd38      	pop	{r3, r4, r5, pc}
 800ca2c:	240006a0 	.word	0x240006a0

0800ca30 <_read_r>:
 800ca30:	b538      	push	{r3, r4, r5, lr}
 800ca32:	4d07      	ldr	r5, [pc, #28]	; (800ca50 <_read_r+0x20>)
 800ca34:	4604      	mov	r4, r0
 800ca36:	4608      	mov	r0, r1
 800ca38:	4611      	mov	r1, r2
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	602a      	str	r2, [r5, #0]
 800ca3e:	461a      	mov	r2, r3
 800ca40:	f7f5 f826 	bl	8001a90 <_read>
 800ca44:	1c43      	adds	r3, r0, #1
 800ca46:	d102      	bne.n	800ca4e <_read_r+0x1e>
 800ca48:	682b      	ldr	r3, [r5, #0]
 800ca4a:	b103      	cbz	r3, 800ca4e <_read_r+0x1e>
 800ca4c:	6023      	str	r3, [r4, #0]
 800ca4e:	bd38      	pop	{r3, r4, r5, pc}
 800ca50:	240006a0 	.word	0x240006a0

0800ca54 <_write_r>:
 800ca54:	b538      	push	{r3, r4, r5, lr}
 800ca56:	4d07      	ldr	r5, [pc, #28]	; (800ca74 <_write_r+0x20>)
 800ca58:	4604      	mov	r4, r0
 800ca5a:	4608      	mov	r0, r1
 800ca5c:	4611      	mov	r1, r2
 800ca5e:	2200      	movs	r2, #0
 800ca60:	602a      	str	r2, [r5, #0]
 800ca62:	461a      	mov	r2, r3
 800ca64:	f7fe ff70 	bl	800b948 <_write>
 800ca68:	1c43      	adds	r3, r0, #1
 800ca6a:	d102      	bne.n	800ca72 <_write_r+0x1e>
 800ca6c:	682b      	ldr	r3, [r5, #0]
 800ca6e:	b103      	cbz	r3, 800ca72 <_write_r+0x1e>
 800ca70:	6023      	str	r3, [r4, #0]
 800ca72:	bd38      	pop	{r3, r4, r5, pc}
 800ca74:	240006a0 	.word	0x240006a0

0800ca78 <__errno>:
 800ca78:	4b01      	ldr	r3, [pc, #4]	; (800ca80 <__errno+0x8>)
 800ca7a:	6818      	ldr	r0, [r3, #0]
 800ca7c:	4770      	bx	lr
 800ca7e:	bf00      	nop
 800ca80:	2400006c 	.word	0x2400006c

0800ca84 <__libc_init_array>:
 800ca84:	b570      	push	{r4, r5, r6, lr}
 800ca86:	4d0d      	ldr	r5, [pc, #52]	; (800cabc <__libc_init_array+0x38>)
 800ca88:	4c0d      	ldr	r4, [pc, #52]	; (800cac0 <__libc_init_array+0x3c>)
 800ca8a:	1b64      	subs	r4, r4, r5
 800ca8c:	10a4      	asrs	r4, r4, #2
 800ca8e:	2600      	movs	r6, #0
 800ca90:	42a6      	cmp	r6, r4
 800ca92:	d109      	bne.n	800caa8 <__libc_init_array+0x24>
 800ca94:	4d0b      	ldr	r5, [pc, #44]	; (800cac4 <__libc_init_array+0x40>)
 800ca96:	4c0c      	ldr	r4, [pc, #48]	; (800cac8 <__libc_init_array+0x44>)
 800ca98:	f003 fa74 	bl	800ff84 <_init>
 800ca9c:	1b64      	subs	r4, r4, r5
 800ca9e:	10a4      	asrs	r4, r4, #2
 800caa0:	2600      	movs	r6, #0
 800caa2:	42a6      	cmp	r6, r4
 800caa4:	d105      	bne.n	800cab2 <__libc_init_array+0x2e>
 800caa6:	bd70      	pop	{r4, r5, r6, pc}
 800caa8:	f855 3b04 	ldr.w	r3, [r5], #4
 800caac:	4798      	blx	r3
 800caae:	3601      	adds	r6, #1
 800cab0:	e7ee      	b.n	800ca90 <__libc_init_array+0xc>
 800cab2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cab6:	4798      	blx	r3
 800cab8:	3601      	adds	r6, #1
 800caba:	e7f2      	b.n	800caa2 <__libc_init_array+0x1e>
 800cabc:	08010408 	.word	0x08010408
 800cac0:	08010408 	.word	0x08010408
 800cac4:	08010408 	.word	0x08010408
 800cac8:	0801040c 	.word	0x0801040c

0800cacc <__retarget_lock_acquire_recursive>:
 800cacc:	4770      	bx	lr

0800cace <__retarget_lock_release_recursive>:
 800cace:	4770      	bx	lr

0800cad0 <nanf>:
 800cad0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cad8 <nanf+0x8>
 800cad4:	4770      	bx	lr
 800cad6:	bf00      	nop
 800cad8:	7fc00000 	.word	0x7fc00000

0800cadc <quorem>:
 800cadc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cae0:	6903      	ldr	r3, [r0, #16]
 800cae2:	690c      	ldr	r4, [r1, #16]
 800cae4:	42a3      	cmp	r3, r4
 800cae6:	4607      	mov	r7, r0
 800cae8:	db7e      	blt.n	800cbe8 <quorem+0x10c>
 800caea:	3c01      	subs	r4, #1
 800caec:	f101 0814 	add.w	r8, r1, #20
 800caf0:	f100 0514 	add.w	r5, r0, #20
 800caf4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800caf8:	9301      	str	r3, [sp, #4]
 800cafa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cafe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb02:	3301      	adds	r3, #1
 800cb04:	429a      	cmp	r2, r3
 800cb06:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cb0a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cb0e:	fbb2 f6f3 	udiv	r6, r2, r3
 800cb12:	d331      	bcc.n	800cb78 <quorem+0x9c>
 800cb14:	f04f 0e00 	mov.w	lr, #0
 800cb18:	4640      	mov	r0, r8
 800cb1a:	46ac      	mov	ip, r5
 800cb1c:	46f2      	mov	sl, lr
 800cb1e:	f850 2b04 	ldr.w	r2, [r0], #4
 800cb22:	b293      	uxth	r3, r2
 800cb24:	fb06 e303 	mla	r3, r6, r3, lr
 800cb28:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cb2c:	0c1a      	lsrs	r2, r3, #16
 800cb2e:	b29b      	uxth	r3, r3
 800cb30:	ebaa 0303 	sub.w	r3, sl, r3
 800cb34:	f8dc a000 	ldr.w	sl, [ip]
 800cb38:	fa13 f38a 	uxtah	r3, r3, sl
 800cb3c:	fb06 220e 	mla	r2, r6, lr, r2
 800cb40:	9300      	str	r3, [sp, #0]
 800cb42:	9b00      	ldr	r3, [sp, #0]
 800cb44:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cb48:	b292      	uxth	r2, r2
 800cb4a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cb4e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cb52:	f8bd 3000 	ldrh.w	r3, [sp]
 800cb56:	4581      	cmp	r9, r0
 800cb58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb5c:	f84c 3b04 	str.w	r3, [ip], #4
 800cb60:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cb64:	d2db      	bcs.n	800cb1e <quorem+0x42>
 800cb66:	f855 300b 	ldr.w	r3, [r5, fp]
 800cb6a:	b92b      	cbnz	r3, 800cb78 <quorem+0x9c>
 800cb6c:	9b01      	ldr	r3, [sp, #4]
 800cb6e:	3b04      	subs	r3, #4
 800cb70:	429d      	cmp	r5, r3
 800cb72:	461a      	mov	r2, r3
 800cb74:	d32c      	bcc.n	800cbd0 <quorem+0xf4>
 800cb76:	613c      	str	r4, [r7, #16]
 800cb78:	4638      	mov	r0, r7
 800cb7a:	f001 f96b 	bl	800de54 <__mcmp>
 800cb7e:	2800      	cmp	r0, #0
 800cb80:	db22      	blt.n	800cbc8 <quorem+0xec>
 800cb82:	3601      	adds	r6, #1
 800cb84:	4629      	mov	r1, r5
 800cb86:	2000      	movs	r0, #0
 800cb88:	f858 2b04 	ldr.w	r2, [r8], #4
 800cb8c:	f8d1 c000 	ldr.w	ip, [r1]
 800cb90:	b293      	uxth	r3, r2
 800cb92:	1ac3      	subs	r3, r0, r3
 800cb94:	0c12      	lsrs	r2, r2, #16
 800cb96:	fa13 f38c 	uxtah	r3, r3, ip
 800cb9a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800cb9e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cba2:	b29b      	uxth	r3, r3
 800cba4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cba8:	45c1      	cmp	r9, r8
 800cbaa:	f841 3b04 	str.w	r3, [r1], #4
 800cbae:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cbb2:	d2e9      	bcs.n	800cb88 <quorem+0xac>
 800cbb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cbb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cbbc:	b922      	cbnz	r2, 800cbc8 <quorem+0xec>
 800cbbe:	3b04      	subs	r3, #4
 800cbc0:	429d      	cmp	r5, r3
 800cbc2:	461a      	mov	r2, r3
 800cbc4:	d30a      	bcc.n	800cbdc <quorem+0x100>
 800cbc6:	613c      	str	r4, [r7, #16]
 800cbc8:	4630      	mov	r0, r6
 800cbca:	b003      	add	sp, #12
 800cbcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbd0:	6812      	ldr	r2, [r2, #0]
 800cbd2:	3b04      	subs	r3, #4
 800cbd4:	2a00      	cmp	r2, #0
 800cbd6:	d1ce      	bne.n	800cb76 <quorem+0x9a>
 800cbd8:	3c01      	subs	r4, #1
 800cbda:	e7c9      	b.n	800cb70 <quorem+0x94>
 800cbdc:	6812      	ldr	r2, [r2, #0]
 800cbde:	3b04      	subs	r3, #4
 800cbe0:	2a00      	cmp	r2, #0
 800cbe2:	d1f0      	bne.n	800cbc6 <quorem+0xea>
 800cbe4:	3c01      	subs	r4, #1
 800cbe6:	e7eb      	b.n	800cbc0 <quorem+0xe4>
 800cbe8:	2000      	movs	r0, #0
 800cbea:	e7ee      	b.n	800cbca <quorem+0xee>
 800cbec:	0000      	movs	r0, r0
	...

0800cbf0 <_dtoa_r>:
 800cbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbf4:	ed2d 8b02 	vpush	{d8}
 800cbf8:	69c5      	ldr	r5, [r0, #28]
 800cbfa:	b091      	sub	sp, #68	; 0x44
 800cbfc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cc00:	ec59 8b10 	vmov	r8, r9, d0
 800cc04:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800cc06:	9106      	str	r1, [sp, #24]
 800cc08:	4606      	mov	r6, r0
 800cc0a:	9208      	str	r2, [sp, #32]
 800cc0c:	930c      	str	r3, [sp, #48]	; 0x30
 800cc0e:	b975      	cbnz	r5, 800cc2e <_dtoa_r+0x3e>
 800cc10:	2010      	movs	r0, #16
 800cc12:	f000 fda5 	bl	800d760 <malloc>
 800cc16:	4602      	mov	r2, r0
 800cc18:	61f0      	str	r0, [r6, #28]
 800cc1a:	b920      	cbnz	r0, 800cc26 <_dtoa_r+0x36>
 800cc1c:	4ba6      	ldr	r3, [pc, #664]	; (800ceb8 <_dtoa_r+0x2c8>)
 800cc1e:	21ef      	movs	r1, #239	; 0xef
 800cc20:	48a6      	ldr	r0, [pc, #664]	; (800cebc <_dtoa_r+0x2cc>)
 800cc22:	f002 fc2d 	bl	800f480 <__assert_func>
 800cc26:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cc2a:	6005      	str	r5, [r0, #0]
 800cc2c:	60c5      	str	r5, [r0, #12]
 800cc2e:	69f3      	ldr	r3, [r6, #28]
 800cc30:	6819      	ldr	r1, [r3, #0]
 800cc32:	b151      	cbz	r1, 800cc4a <_dtoa_r+0x5a>
 800cc34:	685a      	ldr	r2, [r3, #4]
 800cc36:	604a      	str	r2, [r1, #4]
 800cc38:	2301      	movs	r3, #1
 800cc3a:	4093      	lsls	r3, r2
 800cc3c:	608b      	str	r3, [r1, #8]
 800cc3e:	4630      	mov	r0, r6
 800cc40:	f000 fe82 	bl	800d948 <_Bfree>
 800cc44:	69f3      	ldr	r3, [r6, #28]
 800cc46:	2200      	movs	r2, #0
 800cc48:	601a      	str	r2, [r3, #0]
 800cc4a:	f1b9 0300 	subs.w	r3, r9, #0
 800cc4e:	bfbb      	ittet	lt
 800cc50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cc54:	9303      	strlt	r3, [sp, #12]
 800cc56:	2300      	movge	r3, #0
 800cc58:	2201      	movlt	r2, #1
 800cc5a:	bfac      	ite	ge
 800cc5c:	6023      	strge	r3, [r4, #0]
 800cc5e:	6022      	strlt	r2, [r4, #0]
 800cc60:	4b97      	ldr	r3, [pc, #604]	; (800cec0 <_dtoa_r+0x2d0>)
 800cc62:	9c03      	ldr	r4, [sp, #12]
 800cc64:	43a3      	bics	r3, r4
 800cc66:	d11c      	bne.n	800cca2 <_dtoa_r+0xb2>
 800cc68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc6a:	f242 730f 	movw	r3, #9999	; 0x270f
 800cc6e:	6013      	str	r3, [r2, #0]
 800cc70:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800cc74:	ea53 0308 	orrs.w	r3, r3, r8
 800cc78:	f000 84fb 	beq.w	800d672 <_dtoa_r+0xa82>
 800cc7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cc7e:	b963      	cbnz	r3, 800cc9a <_dtoa_r+0xaa>
 800cc80:	4b90      	ldr	r3, [pc, #576]	; (800cec4 <_dtoa_r+0x2d4>)
 800cc82:	e020      	b.n	800ccc6 <_dtoa_r+0xd6>
 800cc84:	4b90      	ldr	r3, [pc, #576]	; (800cec8 <_dtoa_r+0x2d8>)
 800cc86:	9301      	str	r3, [sp, #4]
 800cc88:	3308      	adds	r3, #8
 800cc8a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800cc8c:	6013      	str	r3, [r2, #0]
 800cc8e:	9801      	ldr	r0, [sp, #4]
 800cc90:	b011      	add	sp, #68	; 0x44
 800cc92:	ecbd 8b02 	vpop	{d8}
 800cc96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc9a:	4b8a      	ldr	r3, [pc, #552]	; (800cec4 <_dtoa_r+0x2d4>)
 800cc9c:	9301      	str	r3, [sp, #4]
 800cc9e:	3303      	adds	r3, #3
 800cca0:	e7f3      	b.n	800cc8a <_dtoa_r+0x9a>
 800cca2:	ed9d 8b02 	vldr	d8, [sp, #8]
 800cca6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ccaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccae:	d10c      	bne.n	800ccca <_dtoa_r+0xda>
 800ccb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	6013      	str	r3, [r2, #0]
 800ccb6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	f000 84d7 	beq.w	800d66c <_dtoa_r+0xa7c>
 800ccbe:	4b83      	ldr	r3, [pc, #524]	; (800cecc <_dtoa_r+0x2dc>)
 800ccc0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ccc2:	6013      	str	r3, [r2, #0]
 800ccc4:	3b01      	subs	r3, #1
 800ccc6:	9301      	str	r3, [sp, #4]
 800ccc8:	e7e1      	b.n	800cc8e <_dtoa_r+0x9e>
 800ccca:	aa0e      	add	r2, sp, #56	; 0x38
 800cccc:	a90f      	add	r1, sp, #60	; 0x3c
 800ccce:	4630      	mov	r0, r6
 800ccd0:	eeb0 0b48 	vmov.f64	d0, d8
 800ccd4:	f001 f9d4 	bl	800e080 <__d2b>
 800ccd8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800ccdc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ccde:	4605      	mov	r5, r0
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d046      	beq.n	800cd72 <_dtoa_r+0x182>
 800cce4:	eeb0 7b48 	vmov.f64	d7, d8
 800cce8:	ee18 1a90 	vmov	r1, s17
 800ccec:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ccf0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800ccf4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800ccf8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ccfc:	2000      	movs	r0, #0
 800ccfe:	ee07 1a90 	vmov	s15, r1
 800cd02:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800cd06:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800cea0 <_dtoa_r+0x2b0>
 800cd0a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cd0e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800cea8 <_dtoa_r+0x2b8>
 800cd12:	eea7 6b05 	vfma.f64	d6, d7, d5
 800cd16:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800ceb0 <_dtoa_r+0x2c0>
 800cd1a:	ee07 3a90 	vmov	s15, r3
 800cd1e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800cd22:	eeb0 7b46 	vmov.f64	d7, d6
 800cd26:	eea4 7b05 	vfma.f64	d7, d4, d5
 800cd2a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800cd2e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800cd32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd36:	ee16 ba90 	vmov	fp, s13
 800cd3a:	9009      	str	r0, [sp, #36]	; 0x24
 800cd3c:	d508      	bpl.n	800cd50 <_dtoa_r+0x160>
 800cd3e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800cd42:	eeb4 6b47 	vcmp.f64	d6, d7
 800cd46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd4a:	bf18      	it	ne
 800cd4c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800cd50:	f1bb 0f16 	cmp.w	fp, #22
 800cd54:	d82b      	bhi.n	800cdae <_dtoa_r+0x1be>
 800cd56:	495e      	ldr	r1, [pc, #376]	; (800ced0 <_dtoa_r+0x2e0>)
 800cd58:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800cd5c:	ed91 7b00 	vldr	d7, [r1]
 800cd60:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800cd64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd68:	d501      	bpl.n	800cd6e <_dtoa_r+0x17e>
 800cd6a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cd6e:	2100      	movs	r1, #0
 800cd70:	e01e      	b.n	800cdb0 <_dtoa_r+0x1c0>
 800cd72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd74:	4413      	add	r3, r2
 800cd76:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800cd7a:	2920      	cmp	r1, #32
 800cd7c:	bfc1      	itttt	gt
 800cd7e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800cd82:	408c      	lslgt	r4, r1
 800cd84:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800cd88:	fa28 f101 	lsrgt.w	r1, r8, r1
 800cd8c:	bfd6      	itet	le
 800cd8e:	f1c1 0120 	rsble	r1, r1, #32
 800cd92:	4321      	orrgt	r1, r4
 800cd94:	fa08 f101 	lslle.w	r1, r8, r1
 800cd98:	ee07 1a90 	vmov	s15, r1
 800cd9c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800cda0:	3b01      	subs	r3, #1
 800cda2:	ee17 1a90 	vmov	r1, s15
 800cda6:	2001      	movs	r0, #1
 800cda8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800cdac:	e7a7      	b.n	800ccfe <_dtoa_r+0x10e>
 800cdae:	2101      	movs	r1, #1
 800cdb0:	1ad2      	subs	r2, r2, r3
 800cdb2:	1e53      	subs	r3, r2, #1
 800cdb4:	9305      	str	r3, [sp, #20]
 800cdb6:	bf45      	ittet	mi
 800cdb8:	f1c2 0301 	rsbmi	r3, r2, #1
 800cdbc:	9304      	strmi	r3, [sp, #16]
 800cdbe:	2300      	movpl	r3, #0
 800cdc0:	2300      	movmi	r3, #0
 800cdc2:	bf4c      	ite	mi
 800cdc4:	9305      	strmi	r3, [sp, #20]
 800cdc6:	9304      	strpl	r3, [sp, #16]
 800cdc8:	f1bb 0f00 	cmp.w	fp, #0
 800cdcc:	910b      	str	r1, [sp, #44]	; 0x2c
 800cdce:	db18      	blt.n	800ce02 <_dtoa_r+0x212>
 800cdd0:	9b05      	ldr	r3, [sp, #20]
 800cdd2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800cdd6:	445b      	add	r3, fp
 800cdd8:	9305      	str	r3, [sp, #20]
 800cdda:	2300      	movs	r3, #0
 800cddc:	9a06      	ldr	r2, [sp, #24]
 800cdde:	2a09      	cmp	r2, #9
 800cde0:	d848      	bhi.n	800ce74 <_dtoa_r+0x284>
 800cde2:	2a05      	cmp	r2, #5
 800cde4:	bfc4      	itt	gt
 800cde6:	3a04      	subgt	r2, #4
 800cde8:	9206      	strgt	r2, [sp, #24]
 800cdea:	9a06      	ldr	r2, [sp, #24]
 800cdec:	f1a2 0202 	sub.w	r2, r2, #2
 800cdf0:	bfcc      	ite	gt
 800cdf2:	2400      	movgt	r4, #0
 800cdf4:	2401      	movle	r4, #1
 800cdf6:	2a03      	cmp	r2, #3
 800cdf8:	d847      	bhi.n	800ce8a <_dtoa_r+0x29a>
 800cdfa:	e8df f002 	tbb	[pc, r2]
 800cdfe:	2d0b      	.short	0x2d0b
 800ce00:	392b      	.short	0x392b
 800ce02:	9b04      	ldr	r3, [sp, #16]
 800ce04:	2200      	movs	r2, #0
 800ce06:	eba3 030b 	sub.w	r3, r3, fp
 800ce0a:	9304      	str	r3, [sp, #16]
 800ce0c:	920a      	str	r2, [sp, #40]	; 0x28
 800ce0e:	f1cb 0300 	rsb	r3, fp, #0
 800ce12:	e7e3      	b.n	800cddc <_dtoa_r+0x1ec>
 800ce14:	2200      	movs	r2, #0
 800ce16:	9207      	str	r2, [sp, #28]
 800ce18:	9a08      	ldr	r2, [sp, #32]
 800ce1a:	2a00      	cmp	r2, #0
 800ce1c:	dc38      	bgt.n	800ce90 <_dtoa_r+0x2a0>
 800ce1e:	f04f 0a01 	mov.w	sl, #1
 800ce22:	46d1      	mov	r9, sl
 800ce24:	4652      	mov	r2, sl
 800ce26:	f8cd a020 	str.w	sl, [sp, #32]
 800ce2a:	69f7      	ldr	r7, [r6, #28]
 800ce2c:	2100      	movs	r1, #0
 800ce2e:	2004      	movs	r0, #4
 800ce30:	f100 0c14 	add.w	ip, r0, #20
 800ce34:	4594      	cmp	ip, r2
 800ce36:	d930      	bls.n	800ce9a <_dtoa_r+0x2aa>
 800ce38:	6079      	str	r1, [r7, #4]
 800ce3a:	4630      	mov	r0, r6
 800ce3c:	930d      	str	r3, [sp, #52]	; 0x34
 800ce3e:	f000 fd43 	bl	800d8c8 <_Balloc>
 800ce42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce44:	9001      	str	r0, [sp, #4]
 800ce46:	4602      	mov	r2, r0
 800ce48:	2800      	cmp	r0, #0
 800ce4a:	d145      	bne.n	800ced8 <_dtoa_r+0x2e8>
 800ce4c:	4b21      	ldr	r3, [pc, #132]	; (800ced4 <_dtoa_r+0x2e4>)
 800ce4e:	f240 11af 	movw	r1, #431	; 0x1af
 800ce52:	e6e5      	b.n	800cc20 <_dtoa_r+0x30>
 800ce54:	2201      	movs	r2, #1
 800ce56:	e7de      	b.n	800ce16 <_dtoa_r+0x226>
 800ce58:	2200      	movs	r2, #0
 800ce5a:	9207      	str	r2, [sp, #28]
 800ce5c:	9a08      	ldr	r2, [sp, #32]
 800ce5e:	eb0b 0a02 	add.w	sl, fp, r2
 800ce62:	f10a 0901 	add.w	r9, sl, #1
 800ce66:	464a      	mov	r2, r9
 800ce68:	2a01      	cmp	r2, #1
 800ce6a:	bfb8      	it	lt
 800ce6c:	2201      	movlt	r2, #1
 800ce6e:	e7dc      	b.n	800ce2a <_dtoa_r+0x23a>
 800ce70:	2201      	movs	r2, #1
 800ce72:	e7f2      	b.n	800ce5a <_dtoa_r+0x26a>
 800ce74:	2401      	movs	r4, #1
 800ce76:	2200      	movs	r2, #0
 800ce78:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800ce7c:	f04f 3aff 	mov.w	sl, #4294967295
 800ce80:	2100      	movs	r1, #0
 800ce82:	46d1      	mov	r9, sl
 800ce84:	2212      	movs	r2, #18
 800ce86:	9108      	str	r1, [sp, #32]
 800ce88:	e7cf      	b.n	800ce2a <_dtoa_r+0x23a>
 800ce8a:	2201      	movs	r2, #1
 800ce8c:	9207      	str	r2, [sp, #28]
 800ce8e:	e7f5      	b.n	800ce7c <_dtoa_r+0x28c>
 800ce90:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ce94:	46d1      	mov	r9, sl
 800ce96:	4652      	mov	r2, sl
 800ce98:	e7c7      	b.n	800ce2a <_dtoa_r+0x23a>
 800ce9a:	3101      	adds	r1, #1
 800ce9c:	0040      	lsls	r0, r0, #1
 800ce9e:	e7c7      	b.n	800ce30 <_dtoa_r+0x240>
 800cea0:	636f4361 	.word	0x636f4361
 800cea4:	3fd287a7 	.word	0x3fd287a7
 800cea8:	8b60c8b3 	.word	0x8b60c8b3
 800ceac:	3fc68a28 	.word	0x3fc68a28
 800ceb0:	509f79fb 	.word	0x509f79fb
 800ceb4:	3fd34413 	.word	0x3fd34413
 800ceb8:	0801001e 	.word	0x0801001e
 800cebc:	08010035 	.word	0x08010035
 800cec0:	7ff00000 	.word	0x7ff00000
 800cec4:	0801001a 	.word	0x0801001a
 800cec8:	08010011 	.word	0x08010011
 800cecc:	0800ffe9 	.word	0x0800ffe9
 800ced0:	08010120 	.word	0x08010120
 800ced4:	0801008d 	.word	0x0801008d
 800ced8:	69f2      	ldr	r2, [r6, #28]
 800ceda:	9901      	ldr	r1, [sp, #4]
 800cedc:	6011      	str	r1, [r2, #0]
 800cede:	f1b9 0f0e 	cmp.w	r9, #14
 800cee2:	d86c      	bhi.n	800cfbe <_dtoa_r+0x3ce>
 800cee4:	2c00      	cmp	r4, #0
 800cee6:	d06a      	beq.n	800cfbe <_dtoa_r+0x3ce>
 800cee8:	f1bb 0f00 	cmp.w	fp, #0
 800ceec:	f340 80a0 	ble.w	800d030 <_dtoa_r+0x440>
 800cef0:	4ac1      	ldr	r2, [pc, #772]	; (800d1f8 <_dtoa_r+0x608>)
 800cef2:	f00b 010f 	and.w	r1, fp, #15
 800cef6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800cefa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800cefe:	ed92 7b00 	vldr	d7, [r2]
 800cf02:	ea4f 122b 	mov.w	r2, fp, asr #4
 800cf06:	f000 8087 	beq.w	800d018 <_dtoa_r+0x428>
 800cf0a:	49bc      	ldr	r1, [pc, #752]	; (800d1fc <_dtoa_r+0x60c>)
 800cf0c:	ed91 6b08 	vldr	d6, [r1, #32]
 800cf10:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800cf14:	ed8d 6b02 	vstr	d6, [sp, #8]
 800cf18:	f002 020f 	and.w	r2, r2, #15
 800cf1c:	2103      	movs	r1, #3
 800cf1e:	48b7      	ldr	r0, [pc, #732]	; (800d1fc <_dtoa_r+0x60c>)
 800cf20:	2a00      	cmp	r2, #0
 800cf22:	d17b      	bne.n	800d01c <_dtoa_r+0x42c>
 800cf24:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cf28:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800cf2c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cf30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cf32:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cf36:	2a00      	cmp	r2, #0
 800cf38:	f000 80a0 	beq.w	800d07c <_dtoa_r+0x48c>
 800cf3c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800cf40:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cf44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf48:	f140 8098 	bpl.w	800d07c <_dtoa_r+0x48c>
 800cf4c:	f1b9 0f00 	cmp.w	r9, #0
 800cf50:	f000 8094 	beq.w	800d07c <_dtoa_r+0x48c>
 800cf54:	f1ba 0f00 	cmp.w	sl, #0
 800cf58:	dd2f      	ble.n	800cfba <_dtoa_r+0x3ca>
 800cf5a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800cf5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cf62:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cf66:	f10b 32ff 	add.w	r2, fp, #4294967295
 800cf6a:	3101      	adds	r1, #1
 800cf6c:	4654      	mov	r4, sl
 800cf6e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cf72:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800cf76:	ee07 1a90 	vmov	s15, r1
 800cf7a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cf7e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800cf82:	ee15 7a90 	vmov	r7, s11
 800cf86:	ec51 0b15 	vmov	r0, r1, d5
 800cf8a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800cf8e:	2c00      	cmp	r4, #0
 800cf90:	d177      	bne.n	800d082 <_dtoa_r+0x492>
 800cf92:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800cf96:	ee36 6b47 	vsub.f64	d6, d6, d7
 800cf9a:	ec41 0b17 	vmov	d7, r0, r1
 800cf9e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cfa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfa6:	f300 826a 	bgt.w	800d47e <_dtoa_r+0x88e>
 800cfaa:	eeb1 7b47 	vneg.f64	d7, d7
 800cfae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cfb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfb6:	f100 8260 	bmi.w	800d47a <_dtoa_r+0x88a>
 800cfba:	ed8d 8b02 	vstr	d8, [sp, #8]
 800cfbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cfc0:	2a00      	cmp	r2, #0
 800cfc2:	f2c0 811d 	blt.w	800d200 <_dtoa_r+0x610>
 800cfc6:	f1bb 0f0e 	cmp.w	fp, #14
 800cfca:	f300 8119 	bgt.w	800d200 <_dtoa_r+0x610>
 800cfce:	4b8a      	ldr	r3, [pc, #552]	; (800d1f8 <_dtoa_r+0x608>)
 800cfd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cfd4:	ed93 6b00 	vldr	d6, [r3]
 800cfd8:	9b08      	ldr	r3, [sp, #32]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	f280 80b7 	bge.w	800d14e <_dtoa_r+0x55e>
 800cfe0:	f1b9 0f00 	cmp.w	r9, #0
 800cfe4:	f300 80b3 	bgt.w	800d14e <_dtoa_r+0x55e>
 800cfe8:	f040 8246 	bne.w	800d478 <_dtoa_r+0x888>
 800cfec:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800cff0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800cff4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cff8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d000:	464c      	mov	r4, r9
 800d002:	464f      	mov	r7, r9
 800d004:	f280 821c 	bge.w	800d440 <_dtoa_r+0x850>
 800d008:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d00c:	2331      	movs	r3, #49	; 0x31
 800d00e:	f808 3b01 	strb.w	r3, [r8], #1
 800d012:	f10b 0b01 	add.w	fp, fp, #1
 800d016:	e218      	b.n	800d44a <_dtoa_r+0x85a>
 800d018:	2102      	movs	r1, #2
 800d01a:	e780      	b.n	800cf1e <_dtoa_r+0x32e>
 800d01c:	07d4      	lsls	r4, r2, #31
 800d01e:	d504      	bpl.n	800d02a <_dtoa_r+0x43a>
 800d020:	ed90 6b00 	vldr	d6, [r0]
 800d024:	3101      	adds	r1, #1
 800d026:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d02a:	1052      	asrs	r2, r2, #1
 800d02c:	3008      	adds	r0, #8
 800d02e:	e777      	b.n	800cf20 <_dtoa_r+0x330>
 800d030:	d022      	beq.n	800d078 <_dtoa_r+0x488>
 800d032:	f1cb 0200 	rsb	r2, fp, #0
 800d036:	4970      	ldr	r1, [pc, #448]	; (800d1f8 <_dtoa_r+0x608>)
 800d038:	f002 000f 	and.w	r0, r2, #15
 800d03c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d040:	ed91 7b00 	vldr	d7, [r1]
 800d044:	ee28 7b07 	vmul.f64	d7, d8, d7
 800d048:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d04c:	486b      	ldr	r0, [pc, #428]	; (800d1fc <_dtoa_r+0x60c>)
 800d04e:	1112      	asrs	r2, r2, #4
 800d050:	2400      	movs	r4, #0
 800d052:	2102      	movs	r1, #2
 800d054:	b92a      	cbnz	r2, 800d062 <_dtoa_r+0x472>
 800d056:	2c00      	cmp	r4, #0
 800d058:	f43f af6a 	beq.w	800cf30 <_dtoa_r+0x340>
 800d05c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d060:	e766      	b.n	800cf30 <_dtoa_r+0x340>
 800d062:	07d7      	lsls	r7, r2, #31
 800d064:	d505      	bpl.n	800d072 <_dtoa_r+0x482>
 800d066:	ed90 6b00 	vldr	d6, [r0]
 800d06a:	3101      	adds	r1, #1
 800d06c:	2401      	movs	r4, #1
 800d06e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d072:	1052      	asrs	r2, r2, #1
 800d074:	3008      	adds	r0, #8
 800d076:	e7ed      	b.n	800d054 <_dtoa_r+0x464>
 800d078:	2102      	movs	r1, #2
 800d07a:	e759      	b.n	800cf30 <_dtoa_r+0x340>
 800d07c:	465a      	mov	r2, fp
 800d07e:	464c      	mov	r4, r9
 800d080:	e775      	b.n	800cf6e <_dtoa_r+0x37e>
 800d082:	ec41 0b17 	vmov	d7, r0, r1
 800d086:	495c      	ldr	r1, [pc, #368]	; (800d1f8 <_dtoa_r+0x608>)
 800d088:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800d08c:	ed11 4b02 	vldr	d4, [r1, #-8]
 800d090:	9901      	ldr	r1, [sp, #4]
 800d092:	440c      	add	r4, r1
 800d094:	9907      	ldr	r1, [sp, #28]
 800d096:	b351      	cbz	r1, 800d0ee <_dtoa_r+0x4fe>
 800d098:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d09c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d0a0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d0a4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d0a8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d0ac:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d0b0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d0b4:	ee14 1a90 	vmov	r1, s9
 800d0b8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d0bc:	3130      	adds	r1, #48	; 0x30
 800d0be:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d0c2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d0c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0ca:	f808 1b01 	strb.w	r1, [r8], #1
 800d0ce:	d439      	bmi.n	800d144 <_dtoa_r+0x554>
 800d0d0:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d0d4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d0d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0dc:	d472      	bmi.n	800d1c4 <_dtoa_r+0x5d4>
 800d0de:	45a0      	cmp	r8, r4
 800d0e0:	f43f af6b 	beq.w	800cfba <_dtoa_r+0x3ca>
 800d0e4:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d0e8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d0ec:	e7e0      	b.n	800d0b0 <_dtoa_r+0x4c0>
 800d0ee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d0f2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d0f6:	4620      	mov	r0, r4
 800d0f8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d0fc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d100:	ee14 1a90 	vmov	r1, s9
 800d104:	3130      	adds	r1, #48	; 0x30
 800d106:	f808 1b01 	strb.w	r1, [r8], #1
 800d10a:	45a0      	cmp	r8, r4
 800d10c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d110:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d114:	d118      	bne.n	800d148 <_dtoa_r+0x558>
 800d116:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d11a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d11e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d126:	dc4d      	bgt.n	800d1c4 <_dtoa_r+0x5d4>
 800d128:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d12c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800d130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d134:	f57f af41 	bpl.w	800cfba <_dtoa_r+0x3ca>
 800d138:	4680      	mov	r8, r0
 800d13a:	3801      	subs	r0, #1
 800d13c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800d140:	2b30      	cmp	r3, #48	; 0x30
 800d142:	d0f9      	beq.n	800d138 <_dtoa_r+0x548>
 800d144:	4693      	mov	fp, r2
 800d146:	e02a      	b.n	800d19e <_dtoa_r+0x5ae>
 800d148:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d14c:	e7d6      	b.n	800d0fc <_dtoa_r+0x50c>
 800d14e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d152:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800d156:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d15a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d15e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d162:	ee15 3a10 	vmov	r3, s10
 800d166:	3330      	adds	r3, #48	; 0x30
 800d168:	f808 3b01 	strb.w	r3, [r8], #1
 800d16c:	9b01      	ldr	r3, [sp, #4]
 800d16e:	eba8 0303 	sub.w	r3, r8, r3
 800d172:	4599      	cmp	r9, r3
 800d174:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d178:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d17c:	d133      	bne.n	800d1e6 <_dtoa_r+0x5f6>
 800d17e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d182:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d18a:	dc1a      	bgt.n	800d1c2 <_dtoa_r+0x5d2>
 800d18c:	eeb4 7b46 	vcmp.f64	d7, d6
 800d190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d194:	d103      	bne.n	800d19e <_dtoa_r+0x5ae>
 800d196:	ee15 3a10 	vmov	r3, s10
 800d19a:	07d9      	lsls	r1, r3, #31
 800d19c:	d411      	bmi.n	800d1c2 <_dtoa_r+0x5d2>
 800d19e:	4629      	mov	r1, r5
 800d1a0:	4630      	mov	r0, r6
 800d1a2:	f000 fbd1 	bl	800d948 <_Bfree>
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d1aa:	f888 3000 	strb.w	r3, [r8]
 800d1ae:	f10b 0301 	add.w	r3, fp, #1
 800d1b2:	6013      	str	r3, [r2, #0]
 800d1b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	f43f ad69 	beq.w	800cc8e <_dtoa_r+0x9e>
 800d1bc:	f8c3 8000 	str.w	r8, [r3]
 800d1c0:	e565      	b.n	800cc8e <_dtoa_r+0x9e>
 800d1c2:	465a      	mov	r2, fp
 800d1c4:	4643      	mov	r3, r8
 800d1c6:	4698      	mov	r8, r3
 800d1c8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800d1cc:	2939      	cmp	r1, #57	; 0x39
 800d1ce:	d106      	bne.n	800d1de <_dtoa_r+0x5ee>
 800d1d0:	9901      	ldr	r1, [sp, #4]
 800d1d2:	4299      	cmp	r1, r3
 800d1d4:	d1f7      	bne.n	800d1c6 <_dtoa_r+0x5d6>
 800d1d6:	9801      	ldr	r0, [sp, #4]
 800d1d8:	2130      	movs	r1, #48	; 0x30
 800d1da:	3201      	adds	r2, #1
 800d1dc:	7001      	strb	r1, [r0, #0]
 800d1de:	7819      	ldrb	r1, [r3, #0]
 800d1e0:	3101      	adds	r1, #1
 800d1e2:	7019      	strb	r1, [r3, #0]
 800d1e4:	e7ae      	b.n	800d144 <_dtoa_r+0x554>
 800d1e6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d1ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d1ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1f2:	d1b2      	bne.n	800d15a <_dtoa_r+0x56a>
 800d1f4:	e7d3      	b.n	800d19e <_dtoa_r+0x5ae>
 800d1f6:	bf00      	nop
 800d1f8:	08010120 	.word	0x08010120
 800d1fc:	080100f8 	.word	0x080100f8
 800d200:	9907      	ldr	r1, [sp, #28]
 800d202:	2900      	cmp	r1, #0
 800d204:	f000 80d0 	beq.w	800d3a8 <_dtoa_r+0x7b8>
 800d208:	9906      	ldr	r1, [sp, #24]
 800d20a:	2901      	cmp	r1, #1
 800d20c:	f300 80b4 	bgt.w	800d378 <_dtoa_r+0x788>
 800d210:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d212:	2900      	cmp	r1, #0
 800d214:	f000 80ac 	beq.w	800d370 <_dtoa_r+0x780>
 800d218:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d21c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d220:	461c      	mov	r4, r3
 800d222:	9309      	str	r3, [sp, #36]	; 0x24
 800d224:	9b04      	ldr	r3, [sp, #16]
 800d226:	4413      	add	r3, r2
 800d228:	9304      	str	r3, [sp, #16]
 800d22a:	9b05      	ldr	r3, [sp, #20]
 800d22c:	2101      	movs	r1, #1
 800d22e:	4413      	add	r3, r2
 800d230:	4630      	mov	r0, r6
 800d232:	9305      	str	r3, [sp, #20]
 800d234:	f000 fc88 	bl	800db48 <__i2b>
 800d238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d23a:	4607      	mov	r7, r0
 800d23c:	f1b8 0f00 	cmp.w	r8, #0
 800d240:	d00d      	beq.n	800d25e <_dtoa_r+0x66e>
 800d242:	9a05      	ldr	r2, [sp, #20]
 800d244:	2a00      	cmp	r2, #0
 800d246:	dd0a      	ble.n	800d25e <_dtoa_r+0x66e>
 800d248:	4542      	cmp	r2, r8
 800d24a:	9904      	ldr	r1, [sp, #16]
 800d24c:	bfa8      	it	ge
 800d24e:	4642      	movge	r2, r8
 800d250:	1a89      	subs	r1, r1, r2
 800d252:	9104      	str	r1, [sp, #16]
 800d254:	9905      	ldr	r1, [sp, #20]
 800d256:	eba8 0802 	sub.w	r8, r8, r2
 800d25a:	1a8a      	subs	r2, r1, r2
 800d25c:	9205      	str	r2, [sp, #20]
 800d25e:	b303      	cbz	r3, 800d2a2 <_dtoa_r+0x6b2>
 800d260:	9a07      	ldr	r2, [sp, #28]
 800d262:	2a00      	cmp	r2, #0
 800d264:	f000 80a5 	beq.w	800d3b2 <_dtoa_r+0x7c2>
 800d268:	2c00      	cmp	r4, #0
 800d26a:	dd13      	ble.n	800d294 <_dtoa_r+0x6a4>
 800d26c:	4639      	mov	r1, r7
 800d26e:	4622      	mov	r2, r4
 800d270:	4630      	mov	r0, r6
 800d272:	930d      	str	r3, [sp, #52]	; 0x34
 800d274:	f000 fd28 	bl	800dcc8 <__pow5mult>
 800d278:	462a      	mov	r2, r5
 800d27a:	4601      	mov	r1, r0
 800d27c:	4607      	mov	r7, r0
 800d27e:	4630      	mov	r0, r6
 800d280:	f000 fc78 	bl	800db74 <__multiply>
 800d284:	4629      	mov	r1, r5
 800d286:	9009      	str	r0, [sp, #36]	; 0x24
 800d288:	4630      	mov	r0, r6
 800d28a:	f000 fb5d 	bl	800d948 <_Bfree>
 800d28e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d290:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d292:	4615      	mov	r5, r2
 800d294:	1b1a      	subs	r2, r3, r4
 800d296:	d004      	beq.n	800d2a2 <_dtoa_r+0x6b2>
 800d298:	4629      	mov	r1, r5
 800d29a:	4630      	mov	r0, r6
 800d29c:	f000 fd14 	bl	800dcc8 <__pow5mult>
 800d2a0:	4605      	mov	r5, r0
 800d2a2:	2101      	movs	r1, #1
 800d2a4:	4630      	mov	r0, r6
 800d2a6:	f000 fc4f 	bl	800db48 <__i2b>
 800d2aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	4604      	mov	r4, r0
 800d2b0:	f340 8081 	ble.w	800d3b6 <_dtoa_r+0x7c6>
 800d2b4:	461a      	mov	r2, r3
 800d2b6:	4601      	mov	r1, r0
 800d2b8:	4630      	mov	r0, r6
 800d2ba:	f000 fd05 	bl	800dcc8 <__pow5mult>
 800d2be:	9b06      	ldr	r3, [sp, #24]
 800d2c0:	2b01      	cmp	r3, #1
 800d2c2:	4604      	mov	r4, r0
 800d2c4:	dd7a      	ble.n	800d3bc <_dtoa_r+0x7cc>
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	9309      	str	r3, [sp, #36]	; 0x24
 800d2ca:	6922      	ldr	r2, [r4, #16]
 800d2cc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d2d0:	6910      	ldr	r0, [r2, #16]
 800d2d2:	f000 fbeb 	bl	800daac <__hi0bits>
 800d2d6:	f1c0 0020 	rsb	r0, r0, #32
 800d2da:	9b05      	ldr	r3, [sp, #20]
 800d2dc:	4418      	add	r0, r3
 800d2de:	f010 001f 	ands.w	r0, r0, #31
 800d2e2:	f000 8093 	beq.w	800d40c <_dtoa_r+0x81c>
 800d2e6:	f1c0 0220 	rsb	r2, r0, #32
 800d2ea:	2a04      	cmp	r2, #4
 800d2ec:	f340 8085 	ble.w	800d3fa <_dtoa_r+0x80a>
 800d2f0:	9b04      	ldr	r3, [sp, #16]
 800d2f2:	f1c0 001c 	rsb	r0, r0, #28
 800d2f6:	4403      	add	r3, r0
 800d2f8:	9304      	str	r3, [sp, #16]
 800d2fa:	9b05      	ldr	r3, [sp, #20]
 800d2fc:	4480      	add	r8, r0
 800d2fe:	4403      	add	r3, r0
 800d300:	9305      	str	r3, [sp, #20]
 800d302:	9b04      	ldr	r3, [sp, #16]
 800d304:	2b00      	cmp	r3, #0
 800d306:	dd05      	ble.n	800d314 <_dtoa_r+0x724>
 800d308:	4629      	mov	r1, r5
 800d30a:	461a      	mov	r2, r3
 800d30c:	4630      	mov	r0, r6
 800d30e:	f000 fd35 	bl	800dd7c <__lshift>
 800d312:	4605      	mov	r5, r0
 800d314:	9b05      	ldr	r3, [sp, #20]
 800d316:	2b00      	cmp	r3, #0
 800d318:	dd05      	ble.n	800d326 <_dtoa_r+0x736>
 800d31a:	4621      	mov	r1, r4
 800d31c:	461a      	mov	r2, r3
 800d31e:	4630      	mov	r0, r6
 800d320:	f000 fd2c 	bl	800dd7c <__lshift>
 800d324:	4604      	mov	r4, r0
 800d326:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d071      	beq.n	800d410 <_dtoa_r+0x820>
 800d32c:	4621      	mov	r1, r4
 800d32e:	4628      	mov	r0, r5
 800d330:	f000 fd90 	bl	800de54 <__mcmp>
 800d334:	2800      	cmp	r0, #0
 800d336:	da6b      	bge.n	800d410 <_dtoa_r+0x820>
 800d338:	2300      	movs	r3, #0
 800d33a:	4629      	mov	r1, r5
 800d33c:	220a      	movs	r2, #10
 800d33e:	4630      	mov	r0, r6
 800d340:	f000 fb24 	bl	800d98c <__multadd>
 800d344:	9b07      	ldr	r3, [sp, #28]
 800d346:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d34a:	4605      	mov	r5, r0
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	f000 8197 	beq.w	800d680 <_dtoa_r+0xa90>
 800d352:	4639      	mov	r1, r7
 800d354:	2300      	movs	r3, #0
 800d356:	220a      	movs	r2, #10
 800d358:	4630      	mov	r0, r6
 800d35a:	f000 fb17 	bl	800d98c <__multadd>
 800d35e:	f1ba 0f00 	cmp.w	sl, #0
 800d362:	4607      	mov	r7, r0
 800d364:	f300 8093 	bgt.w	800d48e <_dtoa_r+0x89e>
 800d368:	9b06      	ldr	r3, [sp, #24]
 800d36a:	2b02      	cmp	r3, #2
 800d36c:	dc57      	bgt.n	800d41e <_dtoa_r+0x82e>
 800d36e:	e08e      	b.n	800d48e <_dtoa_r+0x89e>
 800d370:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d372:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d376:	e751      	b.n	800d21c <_dtoa_r+0x62c>
 800d378:	f109 34ff 	add.w	r4, r9, #4294967295
 800d37c:	42a3      	cmp	r3, r4
 800d37e:	bfbf      	itttt	lt
 800d380:	1ae2      	sublt	r2, r4, r3
 800d382:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d384:	189b      	addlt	r3, r3, r2
 800d386:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d388:	bfae      	itee	ge
 800d38a:	1b1c      	subge	r4, r3, r4
 800d38c:	4623      	movlt	r3, r4
 800d38e:	2400      	movlt	r4, #0
 800d390:	f1b9 0f00 	cmp.w	r9, #0
 800d394:	bfb5      	itete	lt
 800d396:	9a04      	ldrlt	r2, [sp, #16]
 800d398:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800d39c:	eba2 0809 	sublt.w	r8, r2, r9
 800d3a0:	464a      	movge	r2, r9
 800d3a2:	bfb8      	it	lt
 800d3a4:	2200      	movlt	r2, #0
 800d3a6:	e73c      	b.n	800d222 <_dtoa_r+0x632>
 800d3a8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d3ac:	9f07      	ldr	r7, [sp, #28]
 800d3ae:	461c      	mov	r4, r3
 800d3b0:	e744      	b.n	800d23c <_dtoa_r+0x64c>
 800d3b2:	461a      	mov	r2, r3
 800d3b4:	e770      	b.n	800d298 <_dtoa_r+0x6a8>
 800d3b6:	9b06      	ldr	r3, [sp, #24]
 800d3b8:	2b01      	cmp	r3, #1
 800d3ba:	dc18      	bgt.n	800d3ee <_dtoa_r+0x7fe>
 800d3bc:	9b02      	ldr	r3, [sp, #8]
 800d3be:	b9b3      	cbnz	r3, 800d3ee <_dtoa_r+0x7fe>
 800d3c0:	9b03      	ldr	r3, [sp, #12]
 800d3c2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d3c6:	b9a2      	cbnz	r2, 800d3f2 <_dtoa_r+0x802>
 800d3c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d3cc:	0d12      	lsrs	r2, r2, #20
 800d3ce:	0512      	lsls	r2, r2, #20
 800d3d0:	b18a      	cbz	r2, 800d3f6 <_dtoa_r+0x806>
 800d3d2:	9b04      	ldr	r3, [sp, #16]
 800d3d4:	3301      	adds	r3, #1
 800d3d6:	9304      	str	r3, [sp, #16]
 800d3d8:	9b05      	ldr	r3, [sp, #20]
 800d3da:	3301      	adds	r3, #1
 800d3dc:	9305      	str	r3, [sp, #20]
 800d3de:	2301      	movs	r3, #1
 800d3e0:	9309      	str	r3, [sp, #36]	; 0x24
 800d3e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	f47f af70 	bne.w	800d2ca <_dtoa_r+0x6da>
 800d3ea:	2001      	movs	r0, #1
 800d3ec:	e775      	b.n	800d2da <_dtoa_r+0x6ea>
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	e7f6      	b.n	800d3e0 <_dtoa_r+0x7f0>
 800d3f2:	9b02      	ldr	r3, [sp, #8]
 800d3f4:	e7f4      	b.n	800d3e0 <_dtoa_r+0x7f0>
 800d3f6:	9209      	str	r2, [sp, #36]	; 0x24
 800d3f8:	e7f3      	b.n	800d3e2 <_dtoa_r+0x7f2>
 800d3fa:	d082      	beq.n	800d302 <_dtoa_r+0x712>
 800d3fc:	9b04      	ldr	r3, [sp, #16]
 800d3fe:	321c      	adds	r2, #28
 800d400:	4413      	add	r3, r2
 800d402:	9304      	str	r3, [sp, #16]
 800d404:	9b05      	ldr	r3, [sp, #20]
 800d406:	4490      	add	r8, r2
 800d408:	4413      	add	r3, r2
 800d40a:	e779      	b.n	800d300 <_dtoa_r+0x710>
 800d40c:	4602      	mov	r2, r0
 800d40e:	e7f5      	b.n	800d3fc <_dtoa_r+0x80c>
 800d410:	f1b9 0f00 	cmp.w	r9, #0
 800d414:	dc36      	bgt.n	800d484 <_dtoa_r+0x894>
 800d416:	9b06      	ldr	r3, [sp, #24]
 800d418:	2b02      	cmp	r3, #2
 800d41a:	dd33      	ble.n	800d484 <_dtoa_r+0x894>
 800d41c:	46ca      	mov	sl, r9
 800d41e:	f1ba 0f00 	cmp.w	sl, #0
 800d422:	d10d      	bne.n	800d440 <_dtoa_r+0x850>
 800d424:	4621      	mov	r1, r4
 800d426:	4653      	mov	r3, sl
 800d428:	2205      	movs	r2, #5
 800d42a:	4630      	mov	r0, r6
 800d42c:	f000 faae 	bl	800d98c <__multadd>
 800d430:	4601      	mov	r1, r0
 800d432:	4604      	mov	r4, r0
 800d434:	4628      	mov	r0, r5
 800d436:	f000 fd0d 	bl	800de54 <__mcmp>
 800d43a:	2800      	cmp	r0, #0
 800d43c:	f73f ade4 	bgt.w	800d008 <_dtoa_r+0x418>
 800d440:	9b08      	ldr	r3, [sp, #32]
 800d442:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d446:	ea6f 0b03 	mvn.w	fp, r3
 800d44a:	f04f 0900 	mov.w	r9, #0
 800d44e:	4621      	mov	r1, r4
 800d450:	4630      	mov	r0, r6
 800d452:	f000 fa79 	bl	800d948 <_Bfree>
 800d456:	2f00      	cmp	r7, #0
 800d458:	f43f aea1 	beq.w	800d19e <_dtoa_r+0x5ae>
 800d45c:	f1b9 0f00 	cmp.w	r9, #0
 800d460:	d005      	beq.n	800d46e <_dtoa_r+0x87e>
 800d462:	45b9      	cmp	r9, r7
 800d464:	d003      	beq.n	800d46e <_dtoa_r+0x87e>
 800d466:	4649      	mov	r1, r9
 800d468:	4630      	mov	r0, r6
 800d46a:	f000 fa6d 	bl	800d948 <_Bfree>
 800d46e:	4639      	mov	r1, r7
 800d470:	4630      	mov	r0, r6
 800d472:	f000 fa69 	bl	800d948 <_Bfree>
 800d476:	e692      	b.n	800d19e <_dtoa_r+0x5ae>
 800d478:	2400      	movs	r4, #0
 800d47a:	4627      	mov	r7, r4
 800d47c:	e7e0      	b.n	800d440 <_dtoa_r+0x850>
 800d47e:	4693      	mov	fp, r2
 800d480:	4627      	mov	r7, r4
 800d482:	e5c1      	b.n	800d008 <_dtoa_r+0x418>
 800d484:	9b07      	ldr	r3, [sp, #28]
 800d486:	46ca      	mov	sl, r9
 800d488:	2b00      	cmp	r3, #0
 800d48a:	f000 8100 	beq.w	800d68e <_dtoa_r+0xa9e>
 800d48e:	f1b8 0f00 	cmp.w	r8, #0
 800d492:	dd05      	ble.n	800d4a0 <_dtoa_r+0x8b0>
 800d494:	4639      	mov	r1, r7
 800d496:	4642      	mov	r2, r8
 800d498:	4630      	mov	r0, r6
 800d49a:	f000 fc6f 	bl	800dd7c <__lshift>
 800d49e:	4607      	mov	r7, r0
 800d4a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d05d      	beq.n	800d562 <_dtoa_r+0x972>
 800d4a6:	6879      	ldr	r1, [r7, #4]
 800d4a8:	4630      	mov	r0, r6
 800d4aa:	f000 fa0d 	bl	800d8c8 <_Balloc>
 800d4ae:	4680      	mov	r8, r0
 800d4b0:	b928      	cbnz	r0, 800d4be <_dtoa_r+0x8ce>
 800d4b2:	4b82      	ldr	r3, [pc, #520]	; (800d6bc <_dtoa_r+0xacc>)
 800d4b4:	4602      	mov	r2, r0
 800d4b6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d4ba:	f7ff bbb1 	b.w	800cc20 <_dtoa_r+0x30>
 800d4be:	693a      	ldr	r2, [r7, #16]
 800d4c0:	3202      	adds	r2, #2
 800d4c2:	0092      	lsls	r2, r2, #2
 800d4c4:	f107 010c 	add.w	r1, r7, #12
 800d4c8:	300c      	adds	r0, #12
 800d4ca:	f001 ffc3 	bl	800f454 <memcpy>
 800d4ce:	2201      	movs	r2, #1
 800d4d0:	4641      	mov	r1, r8
 800d4d2:	4630      	mov	r0, r6
 800d4d4:	f000 fc52 	bl	800dd7c <__lshift>
 800d4d8:	9b01      	ldr	r3, [sp, #4]
 800d4da:	3301      	adds	r3, #1
 800d4dc:	9304      	str	r3, [sp, #16]
 800d4de:	9b01      	ldr	r3, [sp, #4]
 800d4e0:	4453      	add	r3, sl
 800d4e2:	9308      	str	r3, [sp, #32]
 800d4e4:	9b02      	ldr	r3, [sp, #8]
 800d4e6:	f003 0301 	and.w	r3, r3, #1
 800d4ea:	46b9      	mov	r9, r7
 800d4ec:	9307      	str	r3, [sp, #28]
 800d4ee:	4607      	mov	r7, r0
 800d4f0:	9b04      	ldr	r3, [sp, #16]
 800d4f2:	4621      	mov	r1, r4
 800d4f4:	3b01      	subs	r3, #1
 800d4f6:	4628      	mov	r0, r5
 800d4f8:	9302      	str	r3, [sp, #8]
 800d4fa:	f7ff faef 	bl	800cadc <quorem>
 800d4fe:	4603      	mov	r3, r0
 800d500:	3330      	adds	r3, #48	; 0x30
 800d502:	9005      	str	r0, [sp, #20]
 800d504:	4649      	mov	r1, r9
 800d506:	4628      	mov	r0, r5
 800d508:	9309      	str	r3, [sp, #36]	; 0x24
 800d50a:	f000 fca3 	bl	800de54 <__mcmp>
 800d50e:	463a      	mov	r2, r7
 800d510:	4682      	mov	sl, r0
 800d512:	4621      	mov	r1, r4
 800d514:	4630      	mov	r0, r6
 800d516:	f000 fcb9 	bl	800de8c <__mdiff>
 800d51a:	68c2      	ldr	r2, [r0, #12]
 800d51c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d51e:	4680      	mov	r8, r0
 800d520:	bb0a      	cbnz	r2, 800d566 <_dtoa_r+0x976>
 800d522:	4601      	mov	r1, r0
 800d524:	4628      	mov	r0, r5
 800d526:	f000 fc95 	bl	800de54 <__mcmp>
 800d52a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d52c:	4602      	mov	r2, r0
 800d52e:	4641      	mov	r1, r8
 800d530:	4630      	mov	r0, r6
 800d532:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800d536:	f000 fa07 	bl	800d948 <_Bfree>
 800d53a:	9b06      	ldr	r3, [sp, #24]
 800d53c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d53e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d542:	ea43 0102 	orr.w	r1, r3, r2
 800d546:	9b07      	ldr	r3, [sp, #28]
 800d548:	4319      	orrs	r1, r3
 800d54a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d54c:	d10d      	bne.n	800d56a <_dtoa_r+0x97a>
 800d54e:	2b39      	cmp	r3, #57	; 0x39
 800d550:	d029      	beq.n	800d5a6 <_dtoa_r+0x9b6>
 800d552:	f1ba 0f00 	cmp.w	sl, #0
 800d556:	dd01      	ble.n	800d55c <_dtoa_r+0x96c>
 800d558:	9b05      	ldr	r3, [sp, #20]
 800d55a:	3331      	adds	r3, #49	; 0x31
 800d55c:	9a02      	ldr	r2, [sp, #8]
 800d55e:	7013      	strb	r3, [r2, #0]
 800d560:	e775      	b.n	800d44e <_dtoa_r+0x85e>
 800d562:	4638      	mov	r0, r7
 800d564:	e7b8      	b.n	800d4d8 <_dtoa_r+0x8e8>
 800d566:	2201      	movs	r2, #1
 800d568:	e7e1      	b.n	800d52e <_dtoa_r+0x93e>
 800d56a:	f1ba 0f00 	cmp.w	sl, #0
 800d56e:	db06      	blt.n	800d57e <_dtoa_r+0x98e>
 800d570:	9906      	ldr	r1, [sp, #24]
 800d572:	ea41 0a0a 	orr.w	sl, r1, sl
 800d576:	9907      	ldr	r1, [sp, #28]
 800d578:	ea5a 0a01 	orrs.w	sl, sl, r1
 800d57c:	d120      	bne.n	800d5c0 <_dtoa_r+0x9d0>
 800d57e:	2a00      	cmp	r2, #0
 800d580:	ddec      	ble.n	800d55c <_dtoa_r+0x96c>
 800d582:	4629      	mov	r1, r5
 800d584:	2201      	movs	r2, #1
 800d586:	4630      	mov	r0, r6
 800d588:	9304      	str	r3, [sp, #16]
 800d58a:	f000 fbf7 	bl	800dd7c <__lshift>
 800d58e:	4621      	mov	r1, r4
 800d590:	4605      	mov	r5, r0
 800d592:	f000 fc5f 	bl	800de54 <__mcmp>
 800d596:	2800      	cmp	r0, #0
 800d598:	9b04      	ldr	r3, [sp, #16]
 800d59a:	dc02      	bgt.n	800d5a2 <_dtoa_r+0x9b2>
 800d59c:	d1de      	bne.n	800d55c <_dtoa_r+0x96c>
 800d59e:	07da      	lsls	r2, r3, #31
 800d5a0:	d5dc      	bpl.n	800d55c <_dtoa_r+0x96c>
 800d5a2:	2b39      	cmp	r3, #57	; 0x39
 800d5a4:	d1d8      	bne.n	800d558 <_dtoa_r+0x968>
 800d5a6:	9a02      	ldr	r2, [sp, #8]
 800d5a8:	2339      	movs	r3, #57	; 0x39
 800d5aa:	7013      	strb	r3, [r2, #0]
 800d5ac:	4643      	mov	r3, r8
 800d5ae:	4698      	mov	r8, r3
 800d5b0:	3b01      	subs	r3, #1
 800d5b2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800d5b6:	2a39      	cmp	r2, #57	; 0x39
 800d5b8:	d051      	beq.n	800d65e <_dtoa_r+0xa6e>
 800d5ba:	3201      	adds	r2, #1
 800d5bc:	701a      	strb	r2, [r3, #0]
 800d5be:	e746      	b.n	800d44e <_dtoa_r+0x85e>
 800d5c0:	2a00      	cmp	r2, #0
 800d5c2:	dd03      	ble.n	800d5cc <_dtoa_r+0x9dc>
 800d5c4:	2b39      	cmp	r3, #57	; 0x39
 800d5c6:	d0ee      	beq.n	800d5a6 <_dtoa_r+0x9b6>
 800d5c8:	3301      	adds	r3, #1
 800d5ca:	e7c7      	b.n	800d55c <_dtoa_r+0x96c>
 800d5cc:	9a04      	ldr	r2, [sp, #16]
 800d5ce:	9908      	ldr	r1, [sp, #32]
 800d5d0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d5d4:	428a      	cmp	r2, r1
 800d5d6:	d02b      	beq.n	800d630 <_dtoa_r+0xa40>
 800d5d8:	4629      	mov	r1, r5
 800d5da:	2300      	movs	r3, #0
 800d5dc:	220a      	movs	r2, #10
 800d5de:	4630      	mov	r0, r6
 800d5e0:	f000 f9d4 	bl	800d98c <__multadd>
 800d5e4:	45b9      	cmp	r9, r7
 800d5e6:	4605      	mov	r5, r0
 800d5e8:	f04f 0300 	mov.w	r3, #0
 800d5ec:	f04f 020a 	mov.w	r2, #10
 800d5f0:	4649      	mov	r1, r9
 800d5f2:	4630      	mov	r0, r6
 800d5f4:	d107      	bne.n	800d606 <_dtoa_r+0xa16>
 800d5f6:	f000 f9c9 	bl	800d98c <__multadd>
 800d5fa:	4681      	mov	r9, r0
 800d5fc:	4607      	mov	r7, r0
 800d5fe:	9b04      	ldr	r3, [sp, #16]
 800d600:	3301      	adds	r3, #1
 800d602:	9304      	str	r3, [sp, #16]
 800d604:	e774      	b.n	800d4f0 <_dtoa_r+0x900>
 800d606:	f000 f9c1 	bl	800d98c <__multadd>
 800d60a:	4639      	mov	r1, r7
 800d60c:	4681      	mov	r9, r0
 800d60e:	2300      	movs	r3, #0
 800d610:	220a      	movs	r2, #10
 800d612:	4630      	mov	r0, r6
 800d614:	f000 f9ba 	bl	800d98c <__multadd>
 800d618:	4607      	mov	r7, r0
 800d61a:	e7f0      	b.n	800d5fe <_dtoa_r+0xa0e>
 800d61c:	f1ba 0f00 	cmp.w	sl, #0
 800d620:	9a01      	ldr	r2, [sp, #4]
 800d622:	bfcc      	ite	gt
 800d624:	46d0      	movgt	r8, sl
 800d626:	f04f 0801 	movle.w	r8, #1
 800d62a:	4490      	add	r8, r2
 800d62c:	f04f 0900 	mov.w	r9, #0
 800d630:	4629      	mov	r1, r5
 800d632:	2201      	movs	r2, #1
 800d634:	4630      	mov	r0, r6
 800d636:	9302      	str	r3, [sp, #8]
 800d638:	f000 fba0 	bl	800dd7c <__lshift>
 800d63c:	4621      	mov	r1, r4
 800d63e:	4605      	mov	r5, r0
 800d640:	f000 fc08 	bl	800de54 <__mcmp>
 800d644:	2800      	cmp	r0, #0
 800d646:	dcb1      	bgt.n	800d5ac <_dtoa_r+0x9bc>
 800d648:	d102      	bne.n	800d650 <_dtoa_r+0xa60>
 800d64a:	9b02      	ldr	r3, [sp, #8]
 800d64c:	07db      	lsls	r3, r3, #31
 800d64e:	d4ad      	bmi.n	800d5ac <_dtoa_r+0x9bc>
 800d650:	4643      	mov	r3, r8
 800d652:	4698      	mov	r8, r3
 800d654:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d658:	2a30      	cmp	r2, #48	; 0x30
 800d65a:	d0fa      	beq.n	800d652 <_dtoa_r+0xa62>
 800d65c:	e6f7      	b.n	800d44e <_dtoa_r+0x85e>
 800d65e:	9a01      	ldr	r2, [sp, #4]
 800d660:	429a      	cmp	r2, r3
 800d662:	d1a4      	bne.n	800d5ae <_dtoa_r+0x9be>
 800d664:	f10b 0b01 	add.w	fp, fp, #1
 800d668:	2331      	movs	r3, #49	; 0x31
 800d66a:	e778      	b.n	800d55e <_dtoa_r+0x96e>
 800d66c:	4b14      	ldr	r3, [pc, #80]	; (800d6c0 <_dtoa_r+0xad0>)
 800d66e:	f7ff bb2a 	b.w	800ccc6 <_dtoa_r+0xd6>
 800d672:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d674:	2b00      	cmp	r3, #0
 800d676:	f47f ab05 	bne.w	800cc84 <_dtoa_r+0x94>
 800d67a:	4b12      	ldr	r3, [pc, #72]	; (800d6c4 <_dtoa_r+0xad4>)
 800d67c:	f7ff bb23 	b.w	800ccc6 <_dtoa_r+0xd6>
 800d680:	f1ba 0f00 	cmp.w	sl, #0
 800d684:	dc03      	bgt.n	800d68e <_dtoa_r+0xa9e>
 800d686:	9b06      	ldr	r3, [sp, #24]
 800d688:	2b02      	cmp	r3, #2
 800d68a:	f73f aec8 	bgt.w	800d41e <_dtoa_r+0x82e>
 800d68e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d692:	4621      	mov	r1, r4
 800d694:	4628      	mov	r0, r5
 800d696:	f7ff fa21 	bl	800cadc <quorem>
 800d69a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d69e:	f808 3b01 	strb.w	r3, [r8], #1
 800d6a2:	9a01      	ldr	r2, [sp, #4]
 800d6a4:	eba8 0202 	sub.w	r2, r8, r2
 800d6a8:	4592      	cmp	sl, r2
 800d6aa:	ddb7      	ble.n	800d61c <_dtoa_r+0xa2c>
 800d6ac:	4629      	mov	r1, r5
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	220a      	movs	r2, #10
 800d6b2:	4630      	mov	r0, r6
 800d6b4:	f000 f96a 	bl	800d98c <__multadd>
 800d6b8:	4605      	mov	r5, r0
 800d6ba:	e7ea      	b.n	800d692 <_dtoa_r+0xaa2>
 800d6bc:	0801008d 	.word	0x0801008d
 800d6c0:	0800ffe8 	.word	0x0800ffe8
 800d6c4:	08010011 	.word	0x08010011

0800d6c8 <_free_r>:
 800d6c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d6ca:	2900      	cmp	r1, #0
 800d6cc:	d044      	beq.n	800d758 <_free_r+0x90>
 800d6ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6d2:	9001      	str	r0, [sp, #4]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	f1a1 0404 	sub.w	r4, r1, #4
 800d6da:	bfb8      	it	lt
 800d6dc:	18e4      	addlt	r4, r4, r3
 800d6de:	f000 f8e7 	bl	800d8b0 <__malloc_lock>
 800d6e2:	4a1e      	ldr	r2, [pc, #120]	; (800d75c <_free_r+0x94>)
 800d6e4:	9801      	ldr	r0, [sp, #4]
 800d6e6:	6813      	ldr	r3, [r2, #0]
 800d6e8:	b933      	cbnz	r3, 800d6f8 <_free_r+0x30>
 800d6ea:	6063      	str	r3, [r4, #4]
 800d6ec:	6014      	str	r4, [r2, #0]
 800d6ee:	b003      	add	sp, #12
 800d6f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d6f4:	f000 b8e2 	b.w	800d8bc <__malloc_unlock>
 800d6f8:	42a3      	cmp	r3, r4
 800d6fa:	d908      	bls.n	800d70e <_free_r+0x46>
 800d6fc:	6825      	ldr	r5, [r4, #0]
 800d6fe:	1961      	adds	r1, r4, r5
 800d700:	428b      	cmp	r3, r1
 800d702:	bf01      	itttt	eq
 800d704:	6819      	ldreq	r1, [r3, #0]
 800d706:	685b      	ldreq	r3, [r3, #4]
 800d708:	1949      	addeq	r1, r1, r5
 800d70a:	6021      	streq	r1, [r4, #0]
 800d70c:	e7ed      	b.n	800d6ea <_free_r+0x22>
 800d70e:	461a      	mov	r2, r3
 800d710:	685b      	ldr	r3, [r3, #4]
 800d712:	b10b      	cbz	r3, 800d718 <_free_r+0x50>
 800d714:	42a3      	cmp	r3, r4
 800d716:	d9fa      	bls.n	800d70e <_free_r+0x46>
 800d718:	6811      	ldr	r1, [r2, #0]
 800d71a:	1855      	adds	r5, r2, r1
 800d71c:	42a5      	cmp	r5, r4
 800d71e:	d10b      	bne.n	800d738 <_free_r+0x70>
 800d720:	6824      	ldr	r4, [r4, #0]
 800d722:	4421      	add	r1, r4
 800d724:	1854      	adds	r4, r2, r1
 800d726:	42a3      	cmp	r3, r4
 800d728:	6011      	str	r1, [r2, #0]
 800d72a:	d1e0      	bne.n	800d6ee <_free_r+0x26>
 800d72c:	681c      	ldr	r4, [r3, #0]
 800d72e:	685b      	ldr	r3, [r3, #4]
 800d730:	6053      	str	r3, [r2, #4]
 800d732:	440c      	add	r4, r1
 800d734:	6014      	str	r4, [r2, #0]
 800d736:	e7da      	b.n	800d6ee <_free_r+0x26>
 800d738:	d902      	bls.n	800d740 <_free_r+0x78>
 800d73a:	230c      	movs	r3, #12
 800d73c:	6003      	str	r3, [r0, #0]
 800d73e:	e7d6      	b.n	800d6ee <_free_r+0x26>
 800d740:	6825      	ldr	r5, [r4, #0]
 800d742:	1961      	adds	r1, r4, r5
 800d744:	428b      	cmp	r3, r1
 800d746:	bf04      	itt	eq
 800d748:	6819      	ldreq	r1, [r3, #0]
 800d74a:	685b      	ldreq	r3, [r3, #4]
 800d74c:	6063      	str	r3, [r4, #4]
 800d74e:	bf04      	itt	eq
 800d750:	1949      	addeq	r1, r1, r5
 800d752:	6021      	streq	r1, [r4, #0]
 800d754:	6054      	str	r4, [r2, #4]
 800d756:	e7ca      	b.n	800d6ee <_free_r+0x26>
 800d758:	b003      	add	sp, #12
 800d75a:	bd30      	pop	{r4, r5, pc}
 800d75c:	240006a8 	.word	0x240006a8

0800d760 <malloc>:
 800d760:	4b02      	ldr	r3, [pc, #8]	; (800d76c <malloc+0xc>)
 800d762:	4601      	mov	r1, r0
 800d764:	6818      	ldr	r0, [r3, #0]
 800d766:	f000 b823 	b.w	800d7b0 <_malloc_r>
 800d76a:	bf00      	nop
 800d76c:	2400006c 	.word	0x2400006c

0800d770 <sbrk_aligned>:
 800d770:	b570      	push	{r4, r5, r6, lr}
 800d772:	4e0e      	ldr	r6, [pc, #56]	; (800d7ac <sbrk_aligned+0x3c>)
 800d774:	460c      	mov	r4, r1
 800d776:	6831      	ldr	r1, [r6, #0]
 800d778:	4605      	mov	r5, r0
 800d77a:	b911      	cbnz	r1, 800d782 <sbrk_aligned+0x12>
 800d77c:	f001 fe5a 	bl	800f434 <_sbrk_r>
 800d780:	6030      	str	r0, [r6, #0]
 800d782:	4621      	mov	r1, r4
 800d784:	4628      	mov	r0, r5
 800d786:	f001 fe55 	bl	800f434 <_sbrk_r>
 800d78a:	1c43      	adds	r3, r0, #1
 800d78c:	d00a      	beq.n	800d7a4 <sbrk_aligned+0x34>
 800d78e:	1cc4      	adds	r4, r0, #3
 800d790:	f024 0403 	bic.w	r4, r4, #3
 800d794:	42a0      	cmp	r0, r4
 800d796:	d007      	beq.n	800d7a8 <sbrk_aligned+0x38>
 800d798:	1a21      	subs	r1, r4, r0
 800d79a:	4628      	mov	r0, r5
 800d79c:	f001 fe4a 	bl	800f434 <_sbrk_r>
 800d7a0:	3001      	adds	r0, #1
 800d7a2:	d101      	bne.n	800d7a8 <sbrk_aligned+0x38>
 800d7a4:	f04f 34ff 	mov.w	r4, #4294967295
 800d7a8:	4620      	mov	r0, r4
 800d7aa:	bd70      	pop	{r4, r5, r6, pc}
 800d7ac:	240006ac 	.word	0x240006ac

0800d7b0 <_malloc_r>:
 800d7b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7b4:	1ccd      	adds	r5, r1, #3
 800d7b6:	f025 0503 	bic.w	r5, r5, #3
 800d7ba:	3508      	adds	r5, #8
 800d7bc:	2d0c      	cmp	r5, #12
 800d7be:	bf38      	it	cc
 800d7c0:	250c      	movcc	r5, #12
 800d7c2:	2d00      	cmp	r5, #0
 800d7c4:	4607      	mov	r7, r0
 800d7c6:	db01      	blt.n	800d7cc <_malloc_r+0x1c>
 800d7c8:	42a9      	cmp	r1, r5
 800d7ca:	d905      	bls.n	800d7d8 <_malloc_r+0x28>
 800d7cc:	230c      	movs	r3, #12
 800d7ce:	603b      	str	r3, [r7, #0]
 800d7d0:	2600      	movs	r6, #0
 800d7d2:	4630      	mov	r0, r6
 800d7d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d8ac <_malloc_r+0xfc>
 800d7dc:	f000 f868 	bl	800d8b0 <__malloc_lock>
 800d7e0:	f8d8 3000 	ldr.w	r3, [r8]
 800d7e4:	461c      	mov	r4, r3
 800d7e6:	bb5c      	cbnz	r4, 800d840 <_malloc_r+0x90>
 800d7e8:	4629      	mov	r1, r5
 800d7ea:	4638      	mov	r0, r7
 800d7ec:	f7ff ffc0 	bl	800d770 <sbrk_aligned>
 800d7f0:	1c43      	adds	r3, r0, #1
 800d7f2:	4604      	mov	r4, r0
 800d7f4:	d155      	bne.n	800d8a2 <_malloc_r+0xf2>
 800d7f6:	f8d8 4000 	ldr.w	r4, [r8]
 800d7fa:	4626      	mov	r6, r4
 800d7fc:	2e00      	cmp	r6, #0
 800d7fe:	d145      	bne.n	800d88c <_malloc_r+0xdc>
 800d800:	2c00      	cmp	r4, #0
 800d802:	d048      	beq.n	800d896 <_malloc_r+0xe6>
 800d804:	6823      	ldr	r3, [r4, #0]
 800d806:	4631      	mov	r1, r6
 800d808:	4638      	mov	r0, r7
 800d80a:	eb04 0903 	add.w	r9, r4, r3
 800d80e:	f001 fe11 	bl	800f434 <_sbrk_r>
 800d812:	4581      	cmp	r9, r0
 800d814:	d13f      	bne.n	800d896 <_malloc_r+0xe6>
 800d816:	6821      	ldr	r1, [r4, #0]
 800d818:	1a6d      	subs	r5, r5, r1
 800d81a:	4629      	mov	r1, r5
 800d81c:	4638      	mov	r0, r7
 800d81e:	f7ff ffa7 	bl	800d770 <sbrk_aligned>
 800d822:	3001      	adds	r0, #1
 800d824:	d037      	beq.n	800d896 <_malloc_r+0xe6>
 800d826:	6823      	ldr	r3, [r4, #0]
 800d828:	442b      	add	r3, r5
 800d82a:	6023      	str	r3, [r4, #0]
 800d82c:	f8d8 3000 	ldr.w	r3, [r8]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d038      	beq.n	800d8a6 <_malloc_r+0xf6>
 800d834:	685a      	ldr	r2, [r3, #4]
 800d836:	42a2      	cmp	r2, r4
 800d838:	d12b      	bne.n	800d892 <_malloc_r+0xe2>
 800d83a:	2200      	movs	r2, #0
 800d83c:	605a      	str	r2, [r3, #4]
 800d83e:	e00f      	b.n	800d860 <_malloc_r+0xb0>
 800d840:	6822      	ldr	r2, [r4, #0]
 800d842:	1b52      	subs	r2, r2, r5
 800d844:	d41f      	bmi.n	800d886 <_malloc_r+0xd6>
 800d846:	2a0b      	cmp	r2, #11
 800d848:	d917      	bls.n	800d87a <_malloc_r+0xca>
 800d84a:	1961      	adds	r1, r4, r5
 800d84c:	42a3      	cmp	r3, r4
 800d84e:	6025      	str	r5, [r4, #0]
 800d850:	bf18      	it	ne
 800d852:	6059      	strne	r1, [r3, #4]
 800d854:	6863      	ldr	r3, [r4, #4]
 800d856:	bf08      	it	eq
 800d858:	f8c8 1000 	streq.w	r1, [r8]
 800d85c:	5162      	str	r2, [r4, r5]
 800d85e:	604b      	str	r3, [r1, #4]
 800d860:	4638      	mov	r0, r7
 800d862:	f104 060b 	add.w	r6, r4, #11
 800d866:	f000 f829 	bl	800d8bc <__malloc_unlock>
 800d86a:	f026 0607 	bic.w	r6, r6, #7
 800d86e:	1d23      	adds	r3, r4, #4
 800d870:	1af2      	subs	r2, r6, r3
 800d872:	d0ae      	beq.n	800d7d2 <_malloc_r+0x22>
 800d874:	1b9b      	subs	r3, r3, r6
 800d876:	50a3      	str	r3, [r4, r2]
 800d878:	e7ab      	b.n	800d7d2 <_malloc_r+0x22>
 800d87a:	42a3      	cmp	r3, r4
 800d87c:	6862      	ldr	r2, [r4, #4]
 800d87e:	d1dd      	bne.n	800d83c <_malloc_r+0x8c>
 800d880:	f8c8 2000 	str.w	r2, [r8]
 800d884:	e7ec      	b.n	800d860 <_malloc_r+0xb0>
 800d886:	4623      	mov	r3, r4
 800d888:	6864      	ldr	r4, [r4, #4]
 800d88a:	e7ac      	b.n	800d7e6 <_malloc_r+0x36>
 800d88c:	4634      	mov	r4, r6
 800d88e:	6876      	ldr	r6, [r6, #4]
 800d890:	e7b4      	b.n	800d7fc <_malloc_r+0x4c>
 800d892:	4613      	mov	r3, r2
 800d894:	e7cc      	b.n	800d830 <_malloc_r+0x80>
 800d896:	230c      	movs	r3, #12
 800d898:	603b      	str	r3, [r7, #0]
 800d89a:	4638      	mov	r0, r7
 800d89c:	f000 f80e 	bl	800d8bc <__malloc_unlock>
 800d8a0:	e797      	b.n	800d7d2 <_malloc_r+0x22>
 800d8a2:	6025      	str	r5, [r4, #0]
 800d8a4:	e7dc      	b.n	800d860 <_malloc_r+0xb0>
 800d8a6:	605b      	str	r3, [r3, #4]
 800d8a8:	deff      	udf	#255	; 0xff
 800d8aa:	bf00      	nop
 800d8ac:	240006a8 	.word	0x240006a8

0800d8b0 <__malloc_lock>:
 800d8b0:	4801      	ldr	r0, [pc, #4]	; (800d8b8 <__malloc_lock+0x8>)
 800d8b2:	f7ff b90b 	b.w	800cacc <__retarget_lock_acquire_recursive>
 800d8b6:	bf00      	nop
 800d8b8:	240006a4 	.word	0x240006a4

0800d8bc <__malloc_unlock>:
 800d8bc:	4801      	ldr	r0, [pc, #4]	; (800d8c4 <__malloc_unlock+0x8>)
 800d8be:	f7ff b906 	b.w	800cace <__retarget_lock_release_recursive>
 800d8c2:	bf00      	nop
 800d8c4:	240006a4 	.word	0x240006a4

0800d8c8 <_Balloc>:
 800d8c8:	b570      	push	{r4, r5, r6, lr}
 800d8ca:	69c6      	ldr	r6, [r0, #28]
 800d8cc:	4604      	mov	r4, r0
 800d8ce:	460d      	mov	r5, r1
 800d8d0:	b976      	cbnz	r6, 800d8f0 <_Balloc+0x28>
 800d8d2:	2010      	movs	r0, #16
 800d8d4:	f7ff ff44 	bl	800d760 <malloc>
 800d8d8:	4602      	mov	r2, r0
 800d8da:	61e0      	str	r0, [r4, #28]
 800d8dc:	b920      	cbnz	r0, 800d8e8 <_Balloc+0x20>
 800d8de:	4b18      	ldr	r3, [pc, #96]	; (800d940 <_Balloc+0x78>)
 800d8e0:	4818      	ldr	r0, [pc, #96]	; (800d944 <_Balloc+0x7c>)
 800d8e2:	216b      	movs	r1, #107	; 0x6b
 800d8e4:	f001 fdcc 	bl	800f480 <__assert_func>
 800d8e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d8ec:	6006      	str	r6, [r0, #0]
 800d8ee:	60c6      	str	r6, [r0, #12]
 800d8f0:	69e6      	ldr	r6, [r4, #28]
 800d8f2:	68f3      	ldr	r3, [r6, #12]
 800d8f4:	b183      	cbz	r3, 800d918 <_Balloc+0x50>
 800d8f6:	69e3      	ldr	r3, [r4, #28]
 800d8f8:	68db      	ldr	r3, [r3, #12]
 800d8fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d8fe:	b9b8      	cbnz	r0, 800d930 <_Balloc+0x68>
 800d900:	2101      	movs	r1, #1
 800d902:	fa01 f605 	lsl.w	r6, r1, r5
 800d906:	1d72      	adds	r2, r6, #5
 800d908:	0092      	lsls	r2, r2, #2
 800d90a:	4620      	mov	r0, r4
 800d90c:	f001 fdd6 	bl	800f4bc <_calloc_r>
 800d910:	b160      	cbz	r0, 800d92c <_Balloc+0x64>
 800d912:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d916:	e00e      	b.n	800d936 <_Balloc+0x6e>
 800d918:	2221      	movs	r2, #33	; 0x21
 800d91a:	2104      	movs	r1, #4
 800d91c:	4620      	mov	r0, r4
 800d91e:	f001 fdcd 	bl	800f4bc <_calloc_r>
 800d922:	69e3      	ldr	r3, [r4, #28]
 800d924:	60f0      	str	r0, [r6, #12]
 800d926:	68db      	ldr	r3, [r3, #12]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d1e4      	bne.n	800d8f6 <_Balloc+0x2e>
 800d92c:	2000      	movs	r0, #0
 800d92e:	bd70      	pop	{r4, r5, r6, pc}
 800d930:	6802      	ldr	r2, [r0, #0]
 800d932:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d936:	2300      	movs	r3, #0
 800d938:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d93c:	e7f7      	b.n	800d92e <_Balloc+0x66>
 800d93e:	bf00      	nop
 800d940:	0801001e 	.word	0x0801001e
 800d944:	0801009e 	.word	0x0801009e

0800d948 <_Bfree>:
 800d948:	b570      	push	{r4, r5, r6, lr}
 800d94a:	69c6      	ldr	r6, [r0, #28]
 800d94c:	4605      	mov	r5, r0
 800d94e:	460c      	mov	r4, r1
 800d950:	b976      	cbnz	r6, 800d970 <_Bfree+0x28>
 800d952:	2010      	movs	r0, #16
 800d954:	f7ff ff04 	bl	800d760 <malloc>
 800d958:	4602      	mov	r2, r0
 800d95a:	61e8      	str	r0, [r5, #28]
 800d95c:	b920      	cbnz	r0, 800d968 <_Bfree+0x20>
 800d95e:	4b09      	ldr	r3, [pc, #36]	; (800d984 <_Bfree+0x3c>)
 800d960:	4809      	ldr	r0, [pc, #36]	; (800d988 <_Bfree+0x40>)
 800d962:	218f      	movs	r1, #143	; 0x8f
 800d964:	f001 fd8c 	bl	800f480 <__assert_func>
 800d968:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d96c:	6006      	str	r6, [r0, #0]
 800d96e:	60c6      	str	r6, [r0, #12]
 800d970:	b13c      	cbz	r4, 800d982 <_Bfree+0x3a>
 800d972:	69eb      	ldr	r3, [r5, #28]
 800d974:	6862      	ldr	r2, [r4, #4]
 800d976:	68db      	ldr	r3, [r3, #12]
 800d978:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d97c:	6021      	str	r1, [r4, #0]
 800d97e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d982:	bd70      	pop	{r4, r5, r6, pc}
 800d984:	0801001e 	.word	0x0801001e
 800d988:	0801009e 	.word	0x0801009e

0800d98c <__multadd>:
 800d98c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d990:	690d      	ldr	r5, [r1, #16]
 800d992:	4607      	mov	r7, r0
 800d994:	460c      	mov	r4, r1
 800d996:	461e      	mov	r6, r3
 800d998:	f101 0c14 	add.w	ip, r1, #20
 800d99c:	2000      	movs	r0, #0
 800d99e:	f8dc 3000 	ldr.w	r3, [ip]
 800d9a2:	b299      	uxth	r1, r3
 800d9a4:	fb02 6101 	mla	r1, r2, r1, r6
 800d9a8:	0c1e      	lsrs	r6, r3, #16
 800d9aa:	0c0b      	lsrs	r3, r1, #16
 800d9ac:	fb02 3306 	mla	r3, r2, r6, r3
 800d9b0:	b289      	uxth	r1, r1
 800d9b2:	3001      	adds	r0, #1
 800d9b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d9b8:	4285      	cmp	r5, r0
 800d9ba:	f84c 1b04 	str.w	r1, [ip], #4
 800d9be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d9c2:	dcec      	bgt.n	800d99e <__multadd+0x12>
 800d9c4:	b30e      	cbz	r6, 800da0a <__multadd+0x7e>
 800d9c6:	68a3      	ldr	r3, [r4, #8]
 800d9c8:	42ab      	cmp	r3, r5
 800d9ca:	dc19      	bgt.n	800da00 <__multadd+0x74>
 800d9cc:	6861      	ldr	r1, [r4, #4]
 800d9ce:	4638      	mov	r0, r7
 800d9d0:	3101      	adds	r1, #1
 800d9d2:	f7ff ff79 	bl	800d8c8 <_Balloc>
 800d9d6:	4680      	mov	r8, r0
 800d9d8:	b928      	cbnz	r0, 800d9e6 <__multadd+0x5a>
 800d9da:	4602      	mov	r2, r0
 800d9dc:	4b0c      	ldr	r3, [pc, #48]	; (800da10 <__multadd+0x84>)
 800d9de:	480d      	ldr	r0, [pc, #52]	; (800da14 <__multadd+0x88>)
 800d9e0:	21ba      	movs	r1, #186	; 0xba
 800d9e2:	f001 fd4d 	bl	800f480 <__assert_func>
 800d9e6:	6922      	ldr	r2, [r4, #16]
 800d9e8:	3202      	adds	r2, #2
 800d9ea:	f104 010c 	add.w	r1, r4, #12
 800d9ee:	0092      	lsls	r2, r2, #2
 800d9f0:	300c      	adds	r0, #12
 800d9f2:	f001 fd2f 	bl	800f454 <memcpy>
 800d9f6:	4621      	mov	r1, r4
 800d9f8:	4638      	mov	r0, r7
 800d9fa:	f7ff ffa5 	bl	800d948 <_Bfree>
 800d9fe:	4644      	mov	r4, r8
 800da00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800da04:	3501      	adds	r5, #1
 800da06:	615e      	str	r6, [r3, #20]
 800da08:	6125      	str	r5, [r4, #16]
 800da0a:	4620      	mov	r0, r4
 800da0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da10:	0801008d 	.word	0x0801008d
 800da14:	0801009e 	.word	0x0801009e

0800da18 <__s2b>:
 800da18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da1c:	460c      	mov	r4, r1
 800da1e:	4615      	mov	r5, r2
 800da20:	461f      	mov	r7, r3
 800da22:	2209      	movs	r2, #9
 800da24:	3308      	adds	r3, #8
 800da26:	4606      	mov	r6, r0
 800da28:	fb93 f3f2 	sdiv	r3, r3, r2
 800da2c:	2100      	movs	r1, #0
 800da2e:	2201      	movs	r2, #1
 800da30:	429a      	cmp	r2, r3
 800da32:	db09      	blt.n	800da48 <__s2b+0x30>
 800da34:	4630      	mov	r0, r6
 800da36:	f7ff ff47 	bl	800d8c8 <_Balloc>
 800da3a:	b940      	cbnz	r0, 800da4e <__s2b+0x36>
 800da3c:	4602      	mov	r2, r0
 800da3e:	4b19      	ldr	r3, [pc, #100]	; (800daa4 <__s2b+0x8c>)
 800da40:	4819      	ldr	r0, [pc, #100]	; (800daa8 <__s2b+0x90>)
 800da42:	21d3      	movs	r1, #211	; 0xd3
 800da44:	f001 fd1c 	bl	800f480 <__assert_func>
 800da48:	0052      	lsls	r2, r2, #1
 800da4a:	3101      	adds	r1, #1
 800da4c:	e7f0      	b.n	800da30 <__s2b+0x18>
 800da4e:	9b08      	ldr	r3, [sp, #32]
 800da50:	6143      	str	r3, [r0, #20]
 800da52:	2d09      	cmp	r5, #9
 800da54:	f04f 0301 	mov.w	r3, #1
 800da58:	6103      	str	r3, [r0, #16]
 800da5a:	dd16      	ble.n	800da8a <__s2b+0x72>
 800da5c:	f104 0909 	add.w	r9, r4, #9
 800da60:	46c8      	mov	r8, r9
 800da62:	442c      	add	r4, r5
 800da64:	f818 3b01 	ldrb.w	r3, [r8], #1
 800da68:	4601      	mov	r1, r0
 800da6a:	3b30      	subs	r3, #48	; 0x30
 800da6c:	220a      	movs	r2, #10
 800da6e:	4630      	mov	r0, r6
 800da70:	f7ff ff8c 	bl	800d98c <__multadd>
 800da74:	45a0      	cmp	r8, r4
 800da76:	d1f5      	bne.n	800da64 <__s2b+0x4c>
 800da78:	f1a5 0408 	sub.w	r4, r5, #8
 800da7c:	444c      	add	r4, r9
 800da7e:	1b2d      	subs	r5, r5, r4
 800da80:	1963      	adds	r3, r4, r5
 800da82:	42bb      	cmp	r3, r7
 800da84:	db04      	blt.n	800da90 <__s2b+0x78>
 800da86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da8a:	340a      	adds	r4, #10
 800da8c:	2509      	movs	r5, #9
 800da8e:	e7f6      	b.n	800da7e <__s2b+0x66>
 800da90:	f814 3b01 	ldrb.w	r3, [r4], #1
 800da94:	4601      	mov	r1, r0
 800da96:	3b30      	subs	r3, #48	; 0x30
 800da98:	220a      	movs	r2, #10
 800da9a:	4630      	mov	r0, r6
 800da9c:	f7ff ff76 	bl	800d98c <__multadd>
 800daa0:	e7ee      	b.n	800da80 <__s2b+0x68>
 800daa2:	bf00      	nop
 800daa4:	0801008d 	.word	0x0801008d
 800daa8:	0801009e 	.word	0x0801009e

0800daac <__hi0bits>:
 800daac:	0c03      	lsrs	r3, r0, #16
 800daae:	041b      	lsls	r3, r3, #16
 800dab0:	b9d3      	cbnz	r3, 800dae8 <__hi0bits+0x3c>
 800dab2:	0400      	lsls	r0, r0, #16
 800dab4:	2310      	movs	r3, #16
 800dab6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800daba:	bf04      	itt	eq
 800dabc:	0200      	lsleq	r0, r0, #8
 800dabe:	3308      	addeq	r3, #8
 800dac0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dac4:	bf04      	itt	eq
 800dac6:	0100      	lsleq	r0, r0, #4
 800dac8:	3304      	addeq	r3, #4
 800daca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dace:	bf04      	itt	eq
 800dad0:	0080      	lsleq	r0, r0, #2
 800dad2:	3302      	addeq	r3, #2
 800dad4:	2800      	cmp	r0, #0
 800dad6:	db05      	blt.n	800dae4 <__hi0bits+0x38>
 800dad8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800dadc:	f103 0301 	add.w	r3, r3, #1
 800dae0:	bf08      	it	eq
 800dae2:	2320      	moveq	r3, #32
 800dae4:	4618      	mov	r0, r3
 800dae6:	4770      	bx	lr
 800dae8:	2300      	movs	r3, #0
 800daea:	e7e4      	b.n	800dab6 <__hi0bits+0xa>

0800daec <__lo0bits>:
 800daec:	6803      	ldr	r3, [r0, #0]
 800daee:	f013 0207 	ands.w	r2, r3, #7
 800daf2:	d00c      	beq.n	800db0e <__lo0bits+0x22>
 800daf4:	07d9      	lsls	r1, r3, #31
 800daf6:	d422      	bmi.n	800db3e <__lo0bits+0x52>
 800daf8:	079a      	lsls	r2, r3, #30
 800dafa:	bf49      	itett	mi
 800dafc:	085b      	lsrmi	r3, r3, #1
 800dafe:	089b      	lsrpl	r3, r3, #2
 800db00:	6003      	strmi	r3, [r0, #0]
 800db02:	2201      	movmi	r2, #1
 800db04:	bf5c      	itt	pl
 800db06:	6003      	strpl	r3, [r0, #0]
 800db08:	2202      	movpl	r2, #2
 800db0a:	4610      	mov	r0, r2
 800db0c:	4770      	bx	lr
 800db0e:	b299      	uxth	r1, r3
 800db10:	b909      	cbnz	r1, 800db16 <__lo0bits+0x2a>
 800db12:	0c1b      	lsrs	r3, r3, #16
 800db14:	2210      	movs	r2, #16
 800db16:	b2d9      	uxtb	r1, r3
 800db18:	b909      	cbnz	r1, 800db1e <__lo0bits+0x32>
 800db1a:	3208      	adds	r2, #8
 800db1c:	0a1b      	lsrs	r3, r3, #8
 800db1e:	0719      	lsls	r1, r3, #28
 800db20:	bf04      	itt	eq
 800db22:	091b      	lsreq	r3, r3, #4
 800db24:	3204      	addeq	r2, #4
 800db26:	0799      	lsls	r1, r3, #30
 800db28:	bf04      	itt	eq
 800db2a:	089b      	lsreq	r3, r3, #2
 800db2c:	3202      	addeq	r2, #2
 800db2e:	07d9      	lsls	r1, r3, #31
 800db30:	d403      	bmi.n	800db3a <__lo0bits+0x4e>
 800db32:	085b      	lsrs	r3, r3, #1
 800db34:	f102 0201 	add.w	r2, r2, #1
 800db38:	d003      	beq.n	800db42 <__lo0bits+0x56>
 800db3a:	6003      	str	r3, [r0, #0]
 800db3c:	e7e5      	b.n	800db0a <__lo0bits+0x1e>
 800db3e:	2200      	movs	r2, #0
 800db40:	e7e3      	b.n	800db0a <__lo0bits+0x1e>
 800db42:	2220      	movs	r2, #32
 800db44:	e7e1      	b.n	800db0a <__lo0bits+0x1e>
	...

0800db48 <__i2b>:
 800db48:	b510      	push	{r4, lr}
 800db4a:	460c      	mov	r4, r1
 800db4c:	2101      	movs	r1, #1
 800db4e:	f7ff febb 	bl	800d8c8 <_Balloc>
 800db52:	4602      	mov	r2, r0
 800db54:	b928      	cbnz	r0, 800db62 <__i2b+0x1a>
 800db56:	4b05      	ldr	r3, [pc, #20]	; (800db6c <__i2b+0x24>)
 800db58:	4805      	ldr	r0, [pc, #20]	; (800db70 <__i2b+0x28>)
 800db5a:	f240 1145 	movw	r1, #325	; 0x145
 800db5e:	f001 fc8f 	bl	800f480 <__assert_func>
 800db62:	2301      	movs	r3, #1
 800db64:	6144      	str	r4, [r0, #20]
 800db66:	6103      	str	r3, [r0, #16]
 800db68:	bd10      	pop	{r4, pc}
 800db6a:	bf00      	nop
 800db6c:	0801008d 	.word	0x0801008d
 800db70:	0801009e 	.word	0x0801009e

0800db74 <__multiply>:
 800db74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db78:	4691      	mov	r9, r2
 800db7a:	690a      	ldr	r2, [r1, #16]
 800db7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800db80:	429a      	cmp	r2, r3
 800db82:	bfb8      	it	lt
 800db84:	460b      	movlt	r3, r1
 800db86:	460c      	mov	r4, r1
 800db88:	bfbc      	itt	lt
 800db8a:	464c      	movlt	r4, r9
 800db8c:	4699      	movlt	r9, r3
 800db8e:	6927      	ldr	r7, [r4, #16]
 800db90:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800db94:	68a3      	ldr	r3, [r4, #8]
 800db96:	6861      	ldr	r1, [r4, #4]
 800db98:	eb07 060a 	add.w	r6, r7, sl
 800db9c:	42b3      	cmp	r3, r6
 800db9e:	b085      	sub	sp, #20
 800dba0:	bfb8      	it	lt
 800dba2:	3101      	addlt	r1, #1
 800dba4:	f7ff fe90 	bl	800d8c8 <_Balloc>
 800dba8:	b930      	cbnz	r0, 800dbb8 <__multiply+0x44>
 800dbaa:	4602      	mov	r2, r0
 800dbac:	4b44      	ldr	r3, [pc, #272]	; (800dcc0 <__multiply+0x14c>)
 800dbae:	4845      	ldr	r0, [pc, #276]	; (800dcc4 <__multiply+0x150>)
 800dbb0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800dbb4:	f001 fc64 	bl	800f480 <__assert_func>
 800dbb8:	f100 0514 	add.w	r5, r0, #20
 800dbbc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dbc0:	462b      	mov	r3, r5
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	4543      	cmp	r3, r8
 800dbc6:	d321      	bcc.n	800dc0c <__multiply+0x98>
 800dbc8:	f104 0314 	add.w	r3, r4, #20
 800dbcc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dbd0:	f109 0314 	add.w	r3, r9, #20
 800dbd4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dbd8:	9202      	str	r2, [sp, #8]
 800dbda:	1b3a      	subs	r2, r7, r4
 800dbdc:	3a15      	subs	r2, #21
 800dbde:	f022 0203 	bic.w	r2, r2, #3
 800dbe2:	3204      	adds	r2, #4
 800dbe4:	f104 0115 	add.w	r1, r4, #21
 800dbe8:	428f      	cmp	r7, r1
 800dbea:	bf38      	it	cc
 800dbec:	2204      	movcc	r2, #4
 800dbee:	9201      	str	r2, [sp, #4]
 800dbf0:	9a02      	ldr	r2, [sp, #8]
 800dbf2:	9303      	str	r3, [sp, #12]
 800dbf4:	429a      	cmp	r2, r3
 800dbf6:	d80c      	bhi.n	800dc12 <__multiply+0x9e>
 800dbf8:	2e00      	cmp	r6, #0
 800dbfa:	dd03      	ble.n	800dc04 <__multiply+0x90>
 800dbfc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d05b      	beq.n	800dcbc <__multiply+0x148>
 800dc04:	6106      	str	r6, [r0, #16]
 800dc06:	b005      	add	sp, #20
 800dc08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc0c:	f843 2b04 	str.w	r2, [r3], #4
 800dc10:	e7d8      	b.n	800dbc4 <__multiply+0x50>
 800dc12:	f8b3 a000 	ldrh.w	sl, [r3]
 800dc16:	f1ba 0f00 	cmp.w	sl, #0
 800dc1a:	d024      	beq.n	800dc66 <__multiply+0xf2>
 800dc1c:	f104 0e14 	add.w	lr, r4, #20
 800dc20:	46a9      	mov	r9, r5
 800dc22:	f04f 0c00 	mov.w	ip, #0
 800dc26:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dc2a:	f8d9 1000 	ldr.w	r1, [r9]
 800dc2e:	fa1f fb82 	uxth.w	fp, r2
 800dc32:	b289      	uxth	r1, r1
 800dc34:	fb0a 110b 	mla	r1, sl, fp, r1
 800dc38:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dc3c:	f8d9 2000 	ldr.w	r2, [r9]
 800dc40:	4461      	add	r1, ip
 800dc42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dc46:	fb0a c20b 	mla	r2, sl, fp, ip
 800dc4a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dc4e:	b289      	uxth	r1, r1
 800dc50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dc54:	4577      	cmp	r7, lr
 800dc56:	f849 1b04 	str.w	r1, [r9], #4
 800dc5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dc5e:	d8e2      	bhi.n	800dc26 <__multiply+0xb2>
 800dc60:	9a01      	ldr	r2, [sp, #4]
 800dc62:	f845 c002 	str.w	ip, [r5, r2]
 800dc66:	9a03      	ldr	r2, [sp, #12]
 800dc68:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dc6c:	3304      	adds	r3, #4
 800dc6e:	f1b9 0f00 	cmp.w	r9, #0
 800dc72:	d021      	beq.n	800dcb8 <__multiply+0x144>
 800dc74:	6829      	ldr	r1, [r5, #0]
 800dc76:	f104 0c14 	add.w	ip, r4, #20
 800dc7a:	46ae      	mov	lr, r5
 800dc7c:	f04f 0a00 	mov.w	sl, #0
 800dc80:	f8bc b000 	ldrh.w	fp, [ip]
 800dc84:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dc88:	fb09 220b 	mla	r2, r9, fp, r2
 800dc8c:	4452      	add	r2, sl
 800dc8e:	b289      	uxth	r1, r1
 800dc90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dc94:	f84e 1b04 	str.w	r1, [lr], #4
 800dc98:	f85c 1b04 	ldr.w	r1, [ip], #4
 800dc9c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dca0:	f8be 1000 	ldrh.w	r1, [lr]
 800dca4:	fb09 110a 	mla	r1, r9, sl, r1
 800dca8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800dcac:	4567      	cmp	r7, ip
 800dcae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dcb2:	d8e5      	bhi.n	800dc80 <__multiply+0x10c>
 800dcb4:	9a01      	ldr	r2, [sp, #4]
 800dcb6:	50a9      	str	r1, [r5, r2]
 800dcb8:	3504      	adds	r5, #4
 800dcba:	e799      	b.n	800dbf0 <__multiply+0x7c>
 800dcbc:	3e01      	subs	r6, #1
 800dcbe:	e79b      	b.n	800dbf8 <__multiply+0x84>
 800dcc0:	0801008d 	.word	0x0801008d
 800dcc4:	0801009e 	.word	0x0801009e

0800dcc8 <__pow5mult>:
 800dcc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dccc:	4615      	mov	r5, r2
 800dcce:	f012 0203 	ands.w	r2, r2, #3
 800dcd2:	4606      	mov	r6, r0
 800dcd4:	460f      	mov	r7, r1
 800dcd6:	d007      	beq.n	800dce8 <__pow5mult+0x20>
 800dcd8:	4c25      	ldr	r4, [pc, #148]	; (800dd70 <__pow5mult+0xa8>)
 800dcda:	3a01      	subs	r2, #1
 800dcdc:	2300      	movs	r3, #0
 800dcde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dce2:	f7ff fe53 	bl	800d98c <__multadd>
 800dce6:	4607      	mov	r7, r0
 800dce8:	10ad      	asrs	r5, r5, #2
 800dcea:	d03d      	beq.n	800dd68 <__pow5mult+0xa0>
 800dcec:	69f4      	ldr	r4, [r6, #28]
 800dcee:	b97c      	cbnz	r4, 800dd10 <__pow5mult+0x48>
 800dcf0:	2010      	movs	r0, #16
 800dcf2:	f7ff fd35 	bl	800d760 <malloc>
 800dcf6:	4602      	mov	r2, r0
 800dcf8:	61f0      	str	r0, [r6, #28]
 800dcfa:	b928      	cbnz	r0, 800dd08 <__pow5mult+0x40>
 800dcfc:	4b1d      	ldr	r3, [pc, #116]	; (800dd74 <__pow5mult+0xac>)
 800dcfe:	481e      	ldr	r0, [pc, #120]	; (800dd78 <__pow5mult+0xb0>)
 800dd00:	f240 11b3 	movw	r1, #435	; 0x1b3
 800dd04:	f001 fbbc 	bl	800f480 <__assert_func>
 800dd08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dd0c:	6004      	str	r4, [r0, #0]
 800dd0e:	60c4      	str	r4, [r0, #12]
 800dd10:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800dd14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dd18:	b94c      	cbnz	r4, 800dd2e <__pow5mult+0x66>
 800dd1a:	f240 2171 	movw	r1, #625	; 0x271
 800dd1e:	4630      	mov	r0, r6
 800dd20:	f7ff ff12 	bl	800db48 <__i2b>
 800dd24:	2300      	movs	r3, #0
 800dd26:	f8c8 0008 	str.w	r0, [r8, #8]
 800dd2a:	4604      	mov	r4, r0
 800dd2c:	6003      	str	r3, [r0, #0]
 800dd2e:	f04f 0900 	mov.w	r9, #0
 800dd32:	07eb      	lsls	r3, r5, #31
 800dd34:	d50a      	bpl.n	800dd4c <__pow5mult+0x84>
 800dd36:	4639      	mov	r1, r7
 800dd38:	4622      	mov	r2, r4
 800dd3a:	4630      	mov	r0, r6
 800dd3c:	f7ff ff1a 	bl	800db74 <__multiply>
 800dd40:	4639      	mov	r1, r7
 800dd42:	4680      	mov	r8, r0
 800dd44:	4630      	mov	r0, r6
 800dd46:	f7ff fdff 	bl	800d948 <_Bfree>
 800dd4a:	4647      	mov	r7, r8
 800dd4c:	106d      	asrs	r5, r5, #1
 800dd4e:	d00b      	beq.n	800dd68 <__pow5mult+0xa0>
 800dd50:	6820      	ldr	r0, [r4, #0]
 800dd52:	b938      	cbnz	r0, 800dd64 <__pow5mult+0x9c>
 800dd54:	4622      	mov	r2, r4
 800dd56:	4621      	mov	r1, r4
 800dd58:	4630      	mov	r0, r6
 800dd5a:	f7ff ff0b 	bl	800db74 <__multiply>
 800dd5e:	6020      	str	r0, [r4, #0]
 800dd60:	f8c0 9000 	str.w	r9, [r0]
 800dd64:	4604      	mov	r4, r0
 800dd66:	e7e4      	b.n	800dd32 <__pow5mult+0x6a>
 800dd68:	4638      	mov	r0, r7
 800dd6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd6e:	bf00      	nop
 800dd70:	080101e8 	.word	0x080101e8
 800dd74:	0801001e 	.word	0x0801001e
 800dd78:	0801009e 	.word	0x0801009e

0800dd7c <__lshift>:
 800dd7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd80:	460c      	mov	r4, r1
 800dd82:	6849      	ldr	r1, [r1, #4]
 800dd84:	6923      	ldr	r3, [r4, #16]
 800dd86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dd8a:	68a3      	ldr	r3, [r4, #8]
 800dd8c:	4607      	mov	r7, r0
 800dd8e:	4691      	mov	r9, r2
 800dd90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dd94:	f108 0601 	add.w	r6, r8, #1
 800dd98:	42b3      	cmp	r3, r6
 800dd9a:	db0b      	blt.n	800ddb4 <__lshift+0x38>
 800dd9c:	4638      	mov	r0, r7
 800dd9e:	f7ff fd93 	bl	800d8c8 <_Balloc>
 800dda2:	4605      	mov	r5, r0
 800dda4:	b948      	cbnz	r0, 800ddba <__lshift+0x3e>
 800dda6:	4602      	mov	r2, r0
 800dda8:	4b28      	ldr	r3, [pc, #160]	; (800de4c <__lshift+0xd0>)
 800ddaa:	4829      	ldr	r0, [pc, #164]	; (800de50 <__lshift+0xd4>)
 800ddac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ddb0:	f001 fb66 	bl	800f480 <__assert_func>
 800ddb4:	3101      	adds	r1, #1
 800ddb6:	005b      	lsls	r3, r3, #1
 800ddb8:	e7ee      	b.n	800dd98 <__lshift+0x1c>
 800ddba:	2300      	movs	r3, #0
 800ddbc:	f100 0114 	add.w	r1, r0, #20
 800ddc0:	f100 0210 	add.w	r2, r0, #16
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	4553      	cmp	r3, sl
 800ddc8:	db33      	blt.n	800de32 <__lshift+0xb6>
 800ddca:	6920      	ldr	r0, [r4, #16]
 800ddcc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ddd0:	f104 0314 	add.w	r3, r4, #20
 800ddd4:	f019 091f 	ands.w	r9, r9, #31
 800ddd8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dddc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dde0:	d02b      	beq.n	800de3a <__lshift+0xbe>
 800dde2:	f1c9 0e20 	rsb	lr, r9, #32
 800dde6:	468a      	mov	sl, r1
 800dde8:	2200      	movs	r2, #0
 800ddea:	6818      	ldr	r0, [r3, #0]
 800ddec:	fa00 f009 	lsl.w	r0, r0, r9
 800ddf0:	4310      	orrs	r0, r2
 800ddf2:	f84a 0b04 	str.w	r0, [sl], #4
 800ddf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddfa:	459c      	cmp	ip, r3
 800ddfc:	fa22 f20e 	lsr.w	r2, r2, lr
 800de00:	d8f3      	bhi.n	800ddea <__lshift+0x6e>
 800de02:	ebac 0304 	sub.w	r3, ip, r4
 800de06:	3b15      	subs	r3, #21
 800de08:	f023 0303 	bic.w	r3, r3, #3
 800de0c:	3304      	adds	r3, #4
 800de0e:	f104 0015 	add.w	r0, r4, #21
 800de12:	4584      	cmp	ip, r0
 800de14:	bf38      	it	cc
 800de16:	2304      	movcc	r3, #4
 800de18:	50ca      	str	r2, [r1, r3]
 800de1a:	b10a      	cbz	r2, 800de20 <__lshift+0xa4>
 800de1c:	f108 0602 	add.w	r6, r8, #2
 800de20:	3e01      	subs	r6, #1
 800de22:	4638      	mov	r0, r7
 800de24:	612e      	str	r6, [r5, #16]
 800de26:	4621      	mov	r1, r4
 800de28:	f7ff fd8e 	bl	800d948 <_Bfree>
 800de2c:	4628      	mov	r0, r5
 800de2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de32:	f842 0f04 	str.w	r0, [r2, #4]!
 800de36:	3301      	adds	r3, #1
 800de38:	e7c5      	b.n	800ddc6 <__lshift+0x4a>
 800de3a:	3904      	subs	r1, #4
 800de3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800de40:	f841 2f04 	str.w	r2, [r1, #4]!
 800de44:	459c      	cmp	ip, r3
 800de46:	d8f9      	bhi.n	800de3c <__lshift+0xc0>
 800de48:	e7ea      	b.n	800de20 <__lshift+0xa4>
 800de4a:	bf00      	nop
 800de4c:	0801008d 	.word	0x0801008d
 800de50:	0801009e 	.word	0x0801009e

0800de54 <__mcmp>:
 800de54:	b530      	push	{r4, r5, lr}
 800de56:	6902      	ldr	r2, [r0, #16]
 800de58:	690c      	ldr	r4, [r1, #16]
 800de5a:	1b12      	subs	r2, r2, r4
 800de5c:	d10e      	bne.n	800de7c <__mcmp+0x28>
 800de5e:	f100 0314 	add.w	r3, r0, #20
 800de62:	3114      	adds	r1, #20
 800de64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800de68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800de6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800de70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800de74:	42a5      	cmp	r5, r4
 800de76:	d003      	beq.n	800de80 <__mcmp+0x2c>
 800de78:	d305      	bcc.n	800de86 <__mcmp+0x32>
 800de7a:	2201      	movs	r2, #1
 800de7c:	4610      	mov	r0, r2
 800de7e:	bd30      	pop	{r4, r5, pc}
 800de80:	4283      	cmp	r3, r0
 800de82:	d3f3      	bcc.n	800de6c <__mcmp+0x18>
 800de84:	e7fa      	b.n	800de7c <__mcmp+0x28>
 800de86:	f04f 32ff 	mov.w	r2, #4294967295
 800de8a:	e7f7      	b.n	800de7c <__mcmp+0x28>

0800de8c <__mdiff>:
 800de8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de90:	460c      	mov	r4, r1
 800de92:	4606      	mov	r6, r0
 800de94:	4611      	mov	r1, r2
 800de96:	4620      	mov	r0, r4
 800de98:	4690      	mov	r8, r2
 800de9a:	f7ff ffdb 	bl	800de54 <__mcmp>
 800de9e:	1e05      	subs	r5, r0, #0
 800dea0:	d110      	bne.n	800dec4 <__mdiff+0x38>
 800dea2:	4629      	mov	r1, r5
 800dea4:	4630      	mov	r0, r6
 800dea6:	f7ff fd0f 	bl	800d8c8 <_Balloc>
 800deaa:	b930      	cbnz	r0, 800deba <__mdiff+0x2e>
 800deac:	4b3a      	ldr	r3, [pc, #232]	; (800df98 <__mdiff+0x10c>)
 800deae:	4602      	mov	r2, r0
 800deb0:	f240 2137 	movw	r1, #567	; 0x237
 800deb4:	4839      	ldr	r0, [pc, #228]	; (800df9c <__mdiff+0x110>)
 800deb6:	f001 fae3 	bl	800f480 <__assert_func>
 800deba:	2301      	movs	r3, #1
 800debc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dec0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dec4:	bfa4      	itt	ge
 800dec6:	4643      	movge	r3, r8
 800dec8:	46a0      	movge	r8, r4
 800deca:	4630      	mov	r0, r6
 800decc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ded0:	bfa6      	itte	ge
 800ded2:	461c      	movge	r4, r3
 800ded4:	2500      	movge	r5, #0
 800ded6:	2501      	movlt	r5, #1
 800ded8:	f7ff fcf6 	bl	800d8c8 <_Balloc>
 800dedc:	b920      	cbnz	r0, 800dee8 <__mdiff+0x5c>
 800dede:	4b2e      	ldr	r3, [pc, #184]	; (800df98 <__mdiff+0x10c>)
 800dee0:	4602      	mov	r2, r0
 800dee2:	f240 2145 	movw	r1, #581	; 0x245
 800dee6:	e7e5      	b.n	800deb4 <__mdiff+0x28>
 800dee8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800deec:	6926      	ldr	r6, [r4, #16]
 800deee:	60c5      	str	r5, [r0, #12]
 800def0:	f104 0914 	add.w	r9, r4, #20
 800def4:	f108 0514 	add.w	r5, r8, #20
 800def8:	f100 0e14 	add.w	lr, r0, #20
 800defc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800df00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800df04:	f108 0210 	add.w	r2, r8, #16
 800df08:	46f2      	mov	sl, lr
 800df0a:	2100      	movs	r1, #0
 800df0c:	f859 3b04 	ldr.w	r3, [r9], #4
 800df10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800df14:	fa11 f88b 	uxtah	r8, r1, fp
 800df18:	b299      	uxth	r1, r3
 800df1a:	0c1b      	lsrs	r3, r3, #16
 800df1c:	eba8 0801 	sub.w	r8, r8, r1
 800df20:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800df24:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800df28:	fa1f f888 	uxth.w	r8, r8
 800df2c:	1419      	asrs	r1, r3, #16
 800df2e:	454e      	cmp	r6, r9
 800df30:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800df34:	f84a 3b04 	str.w	r3, [sl], #4
 800df38:	d8e8      	bhi.n	800df0c <__mdiff+0x80>
 800df3a:	1b33      	subs	r3, r6, r4
 800df3c:	3b15      	subs	r3, #21
 800df3e:	f023 0303 	bic.w	r3, r3, #3
 800df42:	3304      	adds	r3, #4
 800df44:	3415      	adds	r4, #21
 800df46:	42a6      	cmp	r6, r4
 800df48:	bf38      	it	cc
 800df4a:	2304      	movcc	r3, #4
 800df4c:	441d      	add	r5, r3
 800df4e:	4473      	add	r3, lr
 800df50:	469e      	mov	lr, r3
 800df52:	462e      	mov	r6, r5
 800df54:	4566      	cmp	r6, ip
 800df56:	d30e      	bcc.n	800df76 <__mdiff+0xea>
 800df58:	f10c 0203 	add.w	r2, ip, #3
 800df5c:	1b52      	subs	r2, r2, r5
 800df5e:	f022 0203 	bic.w	r2, r2, #3
 800df62:	3d03      	subs	r5, #3
 800df64:	45ac      	cmp	ip, r5
 800df66:	bf38      	it	cc
 800df68:	2200      	movcc	r2, #0
 800df6a:	4413      	add	r3, r2
 800df6c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800df70:	b17a      	cbz	r2, 800df92 <__mdiff+0x106>
 800df72:	6107      	str	r7, [r0, #16]
 800df74:	e7a4      	b.n	800dec0 <__mdiff+0x34>
 800df76:	f856 8b04 	ldr.w	r8, [r6], #4
 800df7a:	fa11 f288 	uxtah	r2, r1, r8
 800df7e:	1414      	asrs	r4, r2, #16
 800df80:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800df84:	b292      	uxth	r2, r2
 800df86:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800df8a:	f84e 2b04 	str.w	r2, [lr], #4
 800df8e:	1421      	asrs	r1, r4, #16
 800df90:	e7e0      	b.n	800df54 <__mdiff+0xc8>
 800df92:	3f01      	subs	r7, #1
 800df94:	e7ea      	b.n	800df6c <__mdiff+0xe0>
 800df96:	bf00      	nop
 800df98:	0801008d 	.word	0x0801008d
 800df9c:	0801009e 	.word	0x0801009e

0800dfa0 <__ulp>:
 800dfa0:	b082      	sub	sp, #8
 800dfa2:	ed8d 0b00 	vstr	d0, [sp]
 800dfa6:	9a01      	ldr	r2, [sp, #4]
 800dfa8:	4b0f      	ldr	r3, [pc, #60]	; (800dfe8 <__ulp+0x48>)
 800dfaa:	4013      	ands	r3, r2
 800dfac:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	dc08      	bgt.n	800dfc6 <__ulp+0x26>
 800dfb4:	425b      	negs	r3, r3
 800dfb6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800dfba:	ea4f 5223 	mov.w	r2, r3, asr #20
 800dfbe:	da04      	bge.n	800dfca <__ulp+0x2a>
 800dfc0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800dfc4:	4113      	asrs	r3, r2
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	e008      	b.n	800dfdc <__ulp+0x3c>
 800dfca:	f1a2 0314 	sub.w	r3, r2, #20
 800dfce:	2b1e      	cmp	r3, #30
 800dfd0:	bfda      	itte	le
 800dfd2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800dfd6:	40da      	lsrle	r2, r3
 800dfd8:	2201      	movgt	r2, #1
 800dfda:	2300      	movs	r3, #0
 800dfdc:	4619      	mov	r1, r3
 800dfde:	4610      	mov	r0, r2
 800dfe0:	ec41 0b10 	vmov	d0, r0, r1
 800dfe4:	b002      	add	sp, #8
 800dfe6:	4770      	bx	lr
 800dfe8:	7ff00000 	.word	0x7ff00000

0800dfec <__b2d>:
 800dfec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dff0:	6906      	ldr	r6, [r0, #16]
 800dff2:	f100 0814 	add.w	r8, r0, #20
 800dff6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800dffa:	1f37      	subs	r7, r6, #4
 800dffc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e000:	4610      	mov	r0, r2
 800e002:	f7ff fd53 	bl	800daac <__hi0bits>
 800e006:	f1c0 0320 	rsb	r3, r0, #32
 800e00a:	280a      	cmp	r0, #10
 800e00c:	600b      	str	r3, [r1, #0]
 800e00e:	491b      	ldr	r1, [pc, #108]	; (800e07c <__b2d+0x90>)
 800e010:	dc15      	bgt.n	800e03e <__b2d+0x52>
 800e012:	f1c0 0c0b 	rsb	ip, r0, #11
 800e016:	fa22 f30c 	lsr.w	r3, r2, ip
 800e01a:	45b8      	cmp	r8, r7
 800e01c:	ea43 0501 	orr.w	r5, r3, r1
 800e020:	bf34      	ite	cc
 800e022:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e026:	2300      	movcs	r3, #0
 800e028:	3015      	adds	r0, #21
 800e02a:	fa02 f000 	lsl.w	r0, r2, r0
 800e02e:	fa23 f30c 	lsr.w	r3, r3, ip
 800e032:	4303      	orrs	r3, r0
 800e034:	461c      	mov	r4, r3
 800e036:	ec45 4b10 	vmov	d0, r4, r5
 800e03a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e03e:	45b8      	cmp	r8, r7
 800e040:	bf3a      	itte	cc
 800e042:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e046:	f1a6 0708 	subcc.w	r7, r6, #8
 800e04a:	2300      	movcs	r3, #0
 800e04c:	380b      	subs	r0, #11
 800e04e:	d012      	beq.n	800e076 <__b2d+0x8a>
 800e050:	f1c0 0120 	rsb	r1, r0, #32
 800e054:	fa23 f401 	lsr.w	r4, r3, r1
 800e058:	4082      	lsls	r2, r0
 800e05a:	4322      	orrs	r2, r4
 800e05c:	4547      	cmp	r7, r8
 800e05e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800e062:	bf8c      	ite	hi
 800e064:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e068:	2200      	movls	r2, #0
 800e06a:	4083      	lsls	r3, r0
 800e06c:	40ca      	lsrs	r2, r1
 800e06e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e072:	4313      	orrs	r3, r2
 800e074:	e7de      	b.n	800e034 <__b2d+0x48>
 800e076:	ea42 0501 	orr.w	r5, r2, r1
 800e07a:	e7db      	b.n	800e034 <__b2d+0x48>
 800e07c:	3ff00000 	.word	0x3ff00000

0800e080 <__d2b>:
 800e080:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e084:	460f      	mov	r7, r1
 800e086:	2101      	movs	r1, #1
 800e088:	ec59 8b10 	vmov	r8, r9, d0
 800e08c:	4616      	mov	r6, r2
 800e08e:	f7ff fc1b 	bl	800d8c8 <_Balloc>
 800e092:	4604      	mov	r4, r0
 800e094:	b930      	cbnz	r0, 800e0a4 <__d2b+0x24>
 800e096:	4602      	mov	r2, r0
 800e098:	4b24      	ldr	r3, [pc, #144]	; (800e12c <__d2b+0xac>)
 800e09a:	4825      	ldr	r0, [pc, #148]	; (800e130 <__d2b+0xb0>)
 800e09c:	f240 310f 	movw	r1, #783	; 0x30f
 800e0a0:	f001 f9ee 	bl	800f480 <__assert_func>
 800e0a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e0a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e0ac:	bb2d      	cbnz	r5, 800e0fa <__d2b+0x7a>
 800e0ae:	9301      	str	r3, [sp, #4]
 800e0b0:	f1b8 0300 	subs.w	r3, r8, #0
 800e0b4:	d026      	beq.n	800e104 <__d2b+0x84>
 800e0b6:	4668      	mov	r0, sp
 800e0b8:	9300      	str	r3, [sp, #0]
 800e0ba:	f7ff fd17 	bl	800daec <__lo0bits>
 800e0be:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e0c2:	b1e8      	cbz	r0, 800e100 <__d2b+0x80>
 800e0c4:	f1c0 0320 	rsb	r3, r0, #32
 800e0c8:	fa02 f303 	lsl.w	r3, r2, r3
 800e0cc:	430b      	orrs	r3, r1
 800e0ce:	40c2      	lsrs	r2, r0
 800e0d0:	6163      	str	r3, [r4, #20]
 800e0d2:	9201      	str	r2, [sp, #4]
 800e0d4:	9b01      	ldr	r3, [sp, #4]
 800e0d6:	61a3      	str	r3, [r4, #24]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	bf14      	ite	ne
 800e0dc:	2202      	movne	r2, #2
 800e0de:	2201      	moveq	r2, #1
 800e0e0:	6122      	str	r2, [r4, #16]
 800e0e2:	b1bd      	cbz	r5, 800e114 <__d2b+0x94>
 800e0e4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e0e8:	4405      	add	r5, r0
 800e0ea:	603d      	str	r5, [r7, #0]
 800e0ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e0f0:	6030      	str	r0, [r6, #0]
 800e0f2:	4620      	mov	r0, r4
 800e0f4:	b003      	add	sp, #12
 800e0f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e0fe:	e7d6      	b.n	800e0ae <__d2b+0x2e>
 800e100:	6161      	str	r1, [r4, #20]
 800e102:	e7e7      	b.n	800e0d4 <__d2b+0x54>
 800e104:	a801      	add	r0, sp, #4
 800e106:	f7ff fcf1 	bl	800daec <__lo0bits>
 800e10a:	9b01      	ldr	r3, [sp, #4]
 800e10c:	6163      	str	r3, [r4, #20]
 800e10e:	3020      	adds	r0, #32
 800e110:	2201      	movs	r2, #1
 800e112:	e7e5      	b.n	800e0e0 <__d2b+0x60>
 800e114:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e118:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e11c:	6038      	str	r0, [r7, #0]
 800e11e:	6918      	ldr	r0, [r3, #16]
 800e120:	f7ff fcc4 	bl	800daac <__hi0bits>
 800e124:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e128:	e7e2      	b.n	800e0f0 <__d2b+0x70>
 800e12a:	bf00      	nop
 800e12c:	0801008d 	.word	0x0801008d
 800e130:	0801009e 	.word	0x0801009e

0800e134 <__ratio>:
 800e134:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e138:	4688      	mov	r8, r1
 800e13a:	4669      	mov	r1, sp
 800e13c:	4681      	mov	r9, r0
 800e13e:	f7ff ff55 	bl	800dfec <__b2d>
 800e142:	a901      	add	r1, sp, #4
 800e144:	4640      	mov	r0, r8
 800e146:	ec55 4b10 	vmov	r4, r5, d0
 800e14a:	ee10 aa10 	vmov	sl, s0
 800e14e:	f7ff ff4d 	bl	800dfec <__b2d>
 800e152:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e156:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e15a:	1ad2      	subs	r2, r2, r3
 800e15c:	e9dd 3100 	ldrd	r3, r1, [sp]
 800e160:	1a5b      	subs	r3, r3, r1
 800e162:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800e166:	ec57 6b10 	vmov	r6, r7, d0
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	bfd6      	itet	le
 800e16e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e172:	462a      	movgt	r2, r5
 800e174:	463a      	movle	r2, r7
 800e176:	46ab      	mov	fp, r5
 800e178:	bfd6      	itet	le
 800e17a:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800e17e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800e182:	ee00 3a90 	vmovle	s1, r3
 800e186:	ec4b ab17 	vmov	d7, sl, fp
 800e18a:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800e18e:	b003      	add	sp, #12
 800e190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e194 <__copybits>:
 800e194:	3901      	subs	r1, #1
 800e196:	b570      	push	{r4, r5, r6, lr}
 800e198:	1149      	asrs	r1, r1, #5
 800e19a:	6914      	ldr	r4, [r2, #16]
 800e19c:	3101      	adds	r1, #1
 800e19e:	f102 0314 	add.w	r3, r2, #20
 800e1a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e1a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e1aa:	1f05      	subs	r5, r0, #4
 800e1ac:	42a3      	cmp	r3, r4
 800e1ae:	d30c      	bcc.n	800e1ca <__copybits+0x36>
 800e1b0:	1aa3      	subs	r3, r4, r2
 800e1b2:	3b11      	subs	r3, #17
 800e1b4:	f023 0303 	bic.w	r3, r3, #3
 800e1b8:	3211      	adds	r2, #17
 800e1ba:	42a2      	cmp	r2, r4
 800e1bc:	bf88      	it	hi
 800e1be:	2300      	movhi	r3, #0
 800e1c0:	4418      	add	r0, r3
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	4288      	cmp	r0, r1
 800e1c6:	d305      	bcc.n	800e1d4 <__copybits+0x40>
 800e1c8:	bd70      	pop	{r4, r5, r6, pc}
 800e1ca:	f853 6b04 	ldr.w	r6, [r3], #4
 800e1ce:	f845 6f04 	str.w	r6, [r5, #4]!
 800e1d2:	e7eb      	b.n	800e1ac <__copybits+0x18>
 800e1d4:	f840 3b04 	str.w	r3, [r0], #4
 800e1d8:	e7f4      	b.n	800e1c4 <__copybits+0x30>

0800e1da <__any_on>:
 800e1da:	f100 0214 	add.w	r2, r0, #20
 800e1de:	6900      	ldr	r0, [r0, #16]
 800e1e0:	114b      	asrs	r3, r1, #5
 800e1e2:	4298      	cmp	r0, r3
 800e1e4:	b510      	push	{r4, lr}
 800e1e6:	db11      	blt.n	800e20c <__any_on+0x32>
 800e1e8:	dd0a      	ble.n	800e200 <__any_on+0x26>
 800e1ea:	f011 011f 	ands.w	r1, r1, #31
 800e1ee:	d007      	beq.n	800e200 <__any_on+0x26>
 800e1f0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e1f4:	fa24 f001 	lsr.w	r0, r4, r1
 800e1f8:	fa00 f101 	lsl.w	r1, r0, r1
 800e1fc:	428c      	cmp	r4, r1
 800e1fe:	d10b      	bne.n	800e218 <__any_on+0x3e>
 800e200:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e204:	4293      	cmp	r3, r2
 800e206:	d803      	bhi.n	800e210 <__any_on+0x36>
 800e208:	2000      	movs	r0, #0
 800e20a:	bd10      	pop	{r4, pc}
 800e20c:	4603      	mov	r3, r0
 800e20e:	e7f7      	b.n	800e200 <__any_on+0x26>
 800e210:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e214:	2900      	cmp	r1, #0
 800e216:	d0f5      	beq.n	800e204 <__any_on+0x2a>
 800e218:	2001      	movs	r0, #1
 800e21a:	e7f6      	b.n	800e20a <__any_on+0x30>

0800e21c <sulp>:
 800e21c:	b570      	push	{r4, r5, r6, lr}
 800e21e:	4604      	mov	r4, r0
 800e220:	460d      	mov	r5, r1
 800e222:	4616      	mov	r6, r2
 800e224:	ec45 4b10 	vmov	d0, r4, r5
 800e228:	f7ff feba 	bl	800dfa0 <__ulp>
 800e22c:	b17e      	cbz	r6, 800e24e <sulp+0x32>
 800e22e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e232:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e236:	2b00      	cmp	r3, #0
 800e238:	dd09      	ble.n	800e24e <sulp+0x32>
 800e23a:	051b      	lsls	r3, r3, #20
 800e23c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800e240:	2000      	movs	r0, #0
 800e242:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800e246:	ec41 0b17 	vmov	d7, r0, r1
 800e24a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e24e:	bd70      	pop	{r4, r5, r6, pc}

0800e250 <_strtod_l>:
 800e250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e254:	ed2d 8b0e 	vpush	{d8-d14}
 800e258:	b097      	sub	sp, #92	; 0x5c
 800e25a:	4604      	mov	r4, r0
 800e25c:	920d      	str	r2, [sp, #52]	; 0x34
 800e25e:	2200      	movs	r2, #0
 800e260:	9212      	str	r2, [sp, #72]	; 0x48
 800e262:	468a      	mov	sl, r1
 800e264:	f04f 0800 	mov.w	r8, #0
 800e268:	f04f 0900 	mov.w	r9, #0
 800e26c:	460a      	mov	r2, r1
 800e26e:	9211      	str	r2, [sp, #68]	; 0x44
 800e270:	7811      	ldrb	r1, [r2, #0]
 800e272:	292b      	cmp	r1, #43	; 0x2b
 800e274:	d04c      	beq.n	800e310 <_strtod_l+0xc0>
 800e276:	d839      	bhi.n	800e2ec <_strtod_l+0x9c>
 800e278:	290d      	cmp	r1, #13
 800e27a:	d833      	bhi.n	800e2e4 <_strtod_l+0x94>
 800e27c:	2908      	cmp	r1, #8
 800e27e:	d833      	bhi.n	800e2e8 <_strtod_l+0x98>
 800e280:	2900      	cmp	r1, #0
 800e282:	d03c      	beq.n	800e2fe <_strtod_l+0xae>
 800e284:	2200      	movs	r2, #0
 800e286:	9208      	str	r2, [sp, #32]
 800e288:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800e28a:	7832      	ldrb	r2, [r6, #0]
 800e28c:	2a30      	cmp	r2, #48	; 0x30
 800e28e:	f040 80b8 	bne.w	800e402 <_strtod_l+0x1b2>
 800e292:	7872      	ldrb	r2, [r6, #1]
 800e294:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800e298:	2a58      	cmp	r2, #88	; 0x58
 800e29a:	d170      	bne.n	800e37e <_strtod_l+0x12e>
 800e29c:	9302      	str	r3, [sp, #8]
 800e29e:	9b08      	ldr	r3, [sp, #32]
 800e2a0:	9301      	str	r3, [sp, #4]
 800e2a2:	ab12      	add	r3, sp, #72	; 0x48
 800e2a4:	9300      	str	r3, [sp, #0]
 800e2a6:	4a91      	ldr	r2, [pc, #580]	; (800e4ec <_strtod_l+0x29c>)
 800e2a8:	ab13      	add	r3, sp, #76	; 0x4c
 800e2aa:	a911      	add	r1, sp, #68	; 0x44
 800e2ac:	4620      	mov	r0, r4
 800e2ae:	f001 f983 	bl	800f5b8 <__gethex>
 800e2b2:	f010 070f 	ands.w	r7, r0, #15
 800e2b6:	4605      	mov	r5, r0
 800e2b8:	d005      	beq.n	800e2c6 <_strtod_l+0x76>
 800e2ba:	2f06      	cmp	r7, #6
 800e2bc:	d12a      	bne.n	800e314 <_strtod_l+0xc4>
 800e2be:	3601      	adds	r6, #1
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	9611      	str	r6, [sp, #68]	; 0x44
 800e2c4:	9308      	str	r3, [sp, #32]
 800e2c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	f040 8555 	bne.w	800ed78 <_strtod_l+0xb28>
 800e2ce:	9b08      	ldr	r3, [sp, #32]
 800e2d0:	ec49 8b10 	vmov	d0, r8, r9
 800e2d4:	b1cb      	cbz	r3, 800e30a <_strtod_l+0xba>
 800e2d6:	eeb1 0b40 	vneg.f64	d0, d0
 800e2da:	b017      	add	sp, #92	; 0x5c
 800e2dc:	ecbd 8b0e 	vpop	{d8-d14}
 800e2e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2e4:	2920      	cmp	r1, #32
 800e2e6:	d1cd      	bne.n	800e284 <_strtod_l+0x34>
 800e2e8:	3201      	adds	r2, #1
 800e2ea:	e7c0      	b.n	800e26e <_strtod_l+0x1e>
 800e2ec:	292d      	cmp	r1, #45	; 0x2d
 800e2ee:	d1c9      	bne.n	800e284 <_strtod_l+0x34>
 800e2f0:	2101      	movs	r1, #1
 800e2f2:	9108      	str	r1, [sp, #32]
 800e2f4:	1c51      	adds	r1, r2, #1
 800e2f6:	9111      	str	r1, [sp, #68]	; 0x44
 800e2f8:	7852      	ldrb	r2, [r2, #1]
 800e2fa:	2a00      	cmp	r2, #0
 800e2fc:	d1c4      	bne.n	800e288 <_strtod_l+0x38>
 800e2fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e300:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800e304:	2b00      	cmp	r3, #0
 800e306:	f040 8535 	bne.w	800ed74 <_strtod_l+0xb24>
 800e30a:	ec49 8b10 	vmov	d0, r8, r9
 800e30e:	e7e4      	b.n	800e2da <_strtod_l+0x8a>
 800e310:	2100      	movs	r1, #0
 800e312:	e7ee      	b.n	800e2f2 <_strtod_l+0xa2>
 800e314:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e316:	b13a      	cbz	r2, 800e328 <_strtod_l+0xd8>
 800e318:	2135      	movs	r1, #53	; 0x35
 800e31a:	a814      	add	r0, sp, #80	; 0x50
 800e31c:	f7ff ff3a 	bl	800e194 <__copybits>
 800e320:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e322:	4620      	mov	r0, r4
 800e324:	f7ff fb10 	bl	800d948 <_Bfree>
 800e328:	1e7b      	subs	r3, r7, #1
 800e32a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e32c:	2b04      	cmp	r3, #4
 800e32e:	d806      	bhi.n	800e33e <_strtod_l+0xee>
 800e330:	e8df f003 	tbb	[pc, r3]
 800e334:	201d0314 	.word	0x201d0314
 800e338:	14          	.byte	0x14
 800e339:	00          	.byte	0x00
 800e33a:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800e33e:	05eb      	lsls	r3, r5, #23
 800e340:	bf48      	it	mi
 800e342:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800e346:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e34a:	0d1b      	lsrs	r3, r3, #20
 800e34c:	051b      	lsls	r3, r3, #20
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d1b9      	bne.n	800e2c6 <_strtod_l+0x76>
 800e352:	f7fe fb91 	bl	800ca78 <__errno>
 800e356:	2322      	movs	r3, #34	; 0x22
 800e358:	6003      	str	r3, [r0, #0]
 800e35a:	e7b4      	b.n	800e2c6 <_strtod_l+0x76>
 800e35c:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800e360:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e364:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e368:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800e36c:	e7e7      	b.n	800e33e <_strtod_l+0xee>
 800e36e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 800e4f4 <_strtod_l+0x2a4>
 800e372:	e7e4      	b.n	800e33e <_strtod_l+0xee>
 800e374:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800e378:	f04f 38ff 	mov.w	r8, #4294967295
 800e37c:	e7df      	b.n	800e33e <_strtod_l+0xee>
 800e37e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e380:	1c5a      	adds	r2, r3, #1
 800e382:	9211      	str	r2, [sp, #68]	; 0x44
 800e384:	785b      	ldrb	r3, [r3, #1]
 800e386:	2b30      	cmp	r3, #48	; 0x30
 800e388:	d0f9      	beq.n	800e37e <_strtod_l+0x12e>
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d09b      	beq.n	800e2c6 <_strtod_l+0x76>
 800e38e:	2301      	movs	r3, #1
 800e390:	9306      	str	r3, [sp, #24]
 800e392:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e394:	9309      	str	r3, [sp, #36]	; 0x24
 800e396:	2300      	movs	r3, #0
 800e398:	9305      	str	r3, [sp, #20]
 800e39a:	9307      	str	r3, [sp, #28]
 800e39c:	461e      	mov	r6, r3
 800e39e:	220a      	movs	r2, #10
 800e3a0:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e3a2:	7805      	ldrb	r5, [r0, #0]
 800e3a4:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800e3a8:	b2d9      	uxtb	r1, r3
 800e3aa:	2909      	cmp	r1, #9
 800e3ac:	d92b      	bls.n	800e406 <_strtod_l+0x1b6>
 800e3ae:	4950      	ldr	r1, [pc, #320]	; (800e4f0 <_strtod_l+0x2a0>)
 800e3b0:	2201      	movs	r2, #1
 800e3b2:	f001 f80b 	bl	800f3cc <strncmp>
 800e3b6:	2800      	cmp	r0, #0
 800e3b8:	d035      	beq.n	800e426 <_strtod_l+0x1d6>
 800e3ba:	2000      	movs	r0, #0
 800e3bc:	462a      	mov	r2, r5
 800e3be:	4633      	mov	r3, r6
 800e3c0:	4683      	mov	fp, r0
 800e3c2:	4601      	mov	r1, r0
 800e3c4:	2a65      	cmp	r2, #101	; 0x65
 800e3c6:	d001      	beq.n	800e3cc <_strtod_l+0x17c>
 800e3c8:	2a45      	cmp	r2, #69	; 0x45
 800e3ca:	d118      	bne.n	800e3fe <_strtod_l+0x1ae>
 800e3cc:	b91b      	cbnz	r3, 800e3d6 <_strtod_l+0x186>
 800e3ce:	9b06      	ldr	r3, [sp, #24]
 800e3d0:	4303      	orrs	r3, r0
 800e3d2:	d094      	beq.n	800e2fe <_strtod_l+0xae>
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800e3da:	f10a 0201 	add.w	r2, sl, #1
 800e3de:	9211      	str	r2, [sp, #68]	; 0x44
 800e3e0:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800e3e4:	2a2b      	cmp	r2, #43	; 0x2b
 800e3e6:	d075      	beq.n	800e4d4 <_strtod_l+0x284>
 800e3e8:	2a2d      	cmp	r2, #45	; 0x2d
 800e3ea:	d07b      	beq.n	800e4e4 <_strtod_l+0x294>
 800e3ec:	f04f 0e00 	mov.w	lr, #0
 800e3f0:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800e3f4:	2d09      	cmp	r5, #9
 800e3f6:	f240 8083 	bls.w	800e500 <_strtod_l+0x2b0>
 800e3fa:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800e3fe:	2500      	movs	r5, #0
 800e400:	e09e      	b.n	800e540 <_strtod_l+0x2f0>
 800e402:	2300      	movs	r3, #0
 800e404:	e7c4      	b.n	800e390 <_strtod_l+0x140>
 800e406:	2e08      	cmp	r6, #8
 800e408:	bfd5      	itete	le
 800e40a:	9907      	ldrle	r1, [sp, #28]
 800e40c:	9905      	ldrgt	r1, [sp, #20]
 800e40e:	fb02 3301 	mlale	r3, r2, r1, r3
 800e412:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e416:	f100 0001 	add.w	r0, r0, #1
 800e41a:	bfd4      	ite	le
 800e41c:	9307      	strle	r3, [sp, #28]
 800e41e:	9305      	strgt	r3, [sp, #20]
 800e420:	3601      	adds	r6, #1
 800e422:	9011      	str	r0, [sp, #68]	; 0x44
 800e424:	e7bc      	b.n	800e3a0 <_strtod_l+0x150>
 800e426:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e428:	1c5a      	adds	r2, r3, #1
 800e42a:	9211      	str	r2, [sp, #68]	; 0x44
 800e42c:	785a      	ldrb	r2, [r3, #1]
 800e42e:	b3ae      	cbz	r6, 800e49c <_strtod_l+0x24c>
 800e430:	4683      	mov	fp, r0
 800e432:	4633      	mov	r3, r6
 800e434:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800e438:	2909      	cmp	r1, #9
 800e43a:	d912      	bls.n	800e462 <_strtod_l+0x212>
 800e43c:	2101      	movs	r1, #1
 800e43e:	e7c1      	b.n	800e3c4 <_strtod_l+0x174>
 800e440:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e442:	1c5a      	adds	r2, r3, #1
 800e444:	9211      	str	r2, [sp, #68]	; 0x44
 800e446:	785a      	ldrb	r2, [r3, #1]
 800e448:	3001      	adds	r0, #1
 800e44a:	2a30      	cmp	r2, #48	; 0x30
 800e44c:	d0f8      	beq.n	800e440 <_strtod_l+0x1f0>
 800e44e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800e452:	2b08      	cmp	r3, #8
 800e454:	f200 8495 	bhi.w	800ed82 <_strtod_l+0xb32>
 800e458:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e45a:	9309      	str	r3, [sp, #36]	; 0x24
 800e45c:	4683      	mov	fp, r0
 800e45e:	2000      	movs	r0, #0
 800e460:	4603      	mov	r3, r0
 800e462:	3a30      	subs	r2, #48	; 0x30
 800e464:	f100 0101 	add.w	r1, r0, #1
 800e468:	d012      	beq.n	800e490 <_strtod_l+0x240>
 800e46a:	448b      	add	fp, r1
 800e46c:	eb00 0c03 	add.w	ip, r0, r3
 800e470:	4619      	mov	r1, r3
 800e472:	250a      	movs	r5, #10
 800e474:	4561      	cmp	r1, ip
 800e476:	d113      	bne.n	800e4a0 <_strtod_l+0x250>
 800e478:	1819      	adds	r1, r3, r0
 800e47a:	2908      	cmp	r1, #8
 800e47c:	f103 0301 	add.w	r3, r3, #1
 800e480:	4403      	add	r3, r0
 800e482:	dc1b      	bgt.n	800e4bc <_strtod_l+0x26c>
 800e484:	9807      	ldr	r0, [sp, #28]
 800e486:	210a      	movs	r1, #10
 800e488:	fb01 2200 	mla	r2, r1, r0, r2
 800e48c:	9207      	str	r2, [sp, #28]
 800e48e:	2100      	movs	r1, #0
 800e490:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e492:	1c50      	adds	r0, r2, #1
 800e494:	9011      	str	r0, [sp, #68]	; 0x44
 800e496:	7852      	ldrb	r2, [r2, #1]
 800e498:	4608      	mov	r0, r1
 800e49a:	e7cb      	b.n	800e434 <_strtod_l+0x1e4>
 800e49c:	4630      	mov	r0, r6
 800e49e:	e7d4      	b.n	800e44a <_strtod_l+0x1fa>
 800e4a0:	2908      	cmp	r1, #8
 800e4a2:	f101 0101 	add.w	r1, r1, #1
 800e4a6:	dc03      	bgt.n	800e4b0 <_strtod_l+0x260>
 800e4a8:	9f07      	ldr	r7, [sp, #28]
 800e4aa:	436f      	muls	r7, r5
 800e4ac:	9707      	str	r7, [sp, #28]
 800e4ae:	e7e1      	b.n	800e474 <_strtod_l+0x224>
 800e4b0:	2910      	cmp	r1, #16
 800e4b2:	bfde      	ittt	le
 800e4b4:	9f05      	ldrle	r7, [sp, #20]
 800e4b6:	436f      	mulle	r7, r5
 800e4b8:	9705      	strle	r7, [sp, #20]
 800e4ba:	e7db      	b.n	800e474 <_strtod_l+0x224>
 800e4bc:	2b10      	cmp	r3, #16
 800e4be:	bfdf      	itttt	le
 800e4c0:	9805      	ldrle	r0, [sp, #20]
 800e4c2:	210a      	movle	r1, #10
 800e4c4:	fb01 2200 	mlale	r2, r1, r0, r2
 800e4c8:	9205      	strle	r2, [sp, #20]
 800e4ca:	e7e0      	b.n	800e48e <_strtod_l+0x23e>
 800e4cc:	f04f 0b00 	mov.w	fp, #0
 800e4d0:	2101      	movs	r1, #1
 800e4d2:	e77c      	b.n	800e3ce <_strtod_l+0x17e>
 800e4d4:	f04f 0e00 	mov.w	lr, #0
 800e4d8:	f10a 0202 	add.w	r2, sl, #2
 800e4dc:	9211      	str	r2, [sp, #68]	; 0x44
 800e4de:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800e4e2:	e785      	b.n	800e3f0 <_strtod_l+0x1a0>
 800e4e4:	f04f 0e01 	mov.w	lr, #1
 800e4e8:	e7f6      	b.n	800e4d8 <_strtod_l+0x288>
 800e4ea:	bf00      	nop
 800e4ec:	080101f8 	.word	0x080101f8
 800e4f0:	080101f4 	.word	0x080101f4
 800e4f4:	7ff00000 	.word	0x7ff00000
 800e4f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e4fa:	1c55      	adds	r5, r2, #1
 800e4fc:	9511      	str	r5, [sp, #68]	; 0x44
 800e4fe:	7852      	ldrb	r2, [r2, #1]
 800e500:	2a30      	cmp	r2, #48	; 0x30
 800e502:	d0f9      	beq.n	800e4f8 <_strtod_l+0x2a8>
 800e504:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800e508:	2d08      	cmp	r5, #8
 800e50a:	f63f af78 	bhi.w	800e3fe <_strtod_l+0x1ae>
 800e50e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800e512:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e514:	920a      	str	r2, [sp, #40]	; 0x28
 800e516:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e518:	1c55      	adds	r5, r2, #1
 800e51a:	9511      	str	r5, [sp, #68]	; 0x44
 800e51c:	7852      	ldrb	r2, [r2, #1]
 800e51e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800e522:	2f09      	cmp	r7, #9
 800e524:	d937      	bls.n	800e596 <_strtod_l+0x346>
 800e526:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800e528:	1bed      	subs	r5, r5, r7
 800e52a:	2d08      	cmp	r5, #8
 800e52c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800e530:	dc02      	bgt.n	800e538 <_strtod_l+0x2e8>
 800e532:	4565      	cmp	r5, ip
 800e534:	bfa8      	it	ge
 800e536:	4665      	movge	r5, ip
 800e538:	f1be 0f00 	cmp.w	lr, #0
 800e53c:	d000      	beq.n	800e540 <_strtod_l+0x2f0>
 800e53e:	426d      	negs	r5, r5
 800e540:	2b00      	cmp	r3, #0
 800e542:	d14d      	bne.n	800e5e0 <_strtod_l+0x390>
 800e544:	9b06      	ldr	r3, [sp, #24]
 800e546:	4303      	orrs	r3, r0
 800e548:	f47f aebd 	bne.w	800e2c6 <_strtod_l+0x76>
 800e54c:	2900      	cmp	r1, #0
 800e54e:	f47f aed6 	bne.w	800e2fe <_strtod_l+0xae>
 800e552:	2a69      	cmp	r2, #105	; 0x69
 800e554:	d027      	beq.n	800e5a6 <_strtod_l+0x356>
 800e556:	dc24      	bgt.n	800e5a2 <_strtod_l+0x352>
 800e558:	2a49      	cmp	r2, #73	; 0x49
 800e55a:	d024      	beq.n	800e5a6 <_strtod_l+0x356>
 800e55c:	2a4e      	cmp	r2, #78	; 0x4e
 800e55e:	f47f aece 	bne.w	800e2fe <_strtod_l+0xae>
 800e562:	4995      	ldr	r1, [pc, #596]	; (800e7b8 <_strtod_l+0x568>)
 800e564:	a811      	add	r0, sp, #68	; 0x44
 800e566:	f001 fa67 	bl	800fa38 <__match>
 800e56a:	2800      	cmp	r0, #0
 800e56c:	f43f aec7 	beq.w	800e2fe <_strtod_l+0xae>
 800e570:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e572:	781b      	ldrb	r3, [r3, #0]
 800e574:	2b28      	cmp	r3, #40	; 0x28
 800e576:	d12d      	bne.n	800e5d4 <_strtod_l+0x384>
 800e578:	4990      	ldr	r1, [pc, #576]	; (800e7bc <_strtod_l+0x56c>)
 800e57a:	aa14      	add	r2, sp, #80	; 0x50
 800e57c:	a811      	add	r0, sp, #68	; 0x44
 800e57e:	f001 fa6f 	bl	800fa60 <__hexnan>
 800e582:	2805      	cmp	r0, #5
 800e584:	d126      	bne.n	800e5d4 <_strtod_l+0x384>
 800e586:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e588:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800e58c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800e590:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800e594:	e697      	b.n	800e2c6 <_strtod_l+0x76>
 800e596:	250a      	movs	r5, #10
 800e598:	fb05 2c0c 	mla	ip, r5, ip, r2
 800e59c:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800e5a0:	e7b9      	b.n	800e516 <_strtod_l+0x2c6>
 800e5a2:	2a6e      	cmp	r2, #110	; 0x6e
 800e5a4:	e7db      	b.n	800e55e <_strtod_l+0x30e>
 800e5a6:	4986      	ldr	r1, [pc, #536]	; (800e7c0 <_strtod_l+0x570>)
 800e5a8:	a811      	add	r0, sp, #68	; 0x44
 800e5aa:	f001 fa45 	bl	800fa38 <__match>
 800e5ae:	2800      	cmp	r0, #0
 800e5b0:	f43f aea5 	beq.w	800e2fe <_strtod_l+0xae>
 800e5b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e5b6:	4983      	ldr	r1, [pc, #524]	; (800e7c4 <_strtod_l+0x574>)
 800e5b8:	3b01      	subs	r3, #1
 800e5ba:	a811      	add	r0, sp, #68	; 0x44
 800e5bc:	9311      	str	r3, [sp, #68]	; 0x44
 800e5be:	f001 fa3b 	bl	800fa38 <__match>
 800e5c2:	b910      	cbnz	r0, 800e5ca <_strtod_l+0x37a>
 800e5c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e5c6:	3301      	adds	r3, #1
 800e5c8:	9311      	str	r3, [sp, #68]	; 0x44
 800e5ca:	f8df 920c 	ldr.w	r9, [pc, #524]	; 800e7d8 <_strtod_l+0x588>
 800e5ce:	f04f 0800 	mov.w	r8, #0
 800e5d2:	e678      	b.n	800e2c6 <_strtod_l+0x76>
 800e5d4:	487c      	ldr	r0, [pc, #496]	; (800e7c8 <_strtod_l+0x578>)
 800e5d6:	f000 ff4b 	bl	800f470 <nan>
 800e5da:	ec59 8b10 	vmov	r8, r9, d0
 800e5de:	e672      	b.n	800e2c6 <_strtod_l+0x76>
 800e5e0:	eddd 7a07 	vldr	s15, [sp, #28]
 800e5e4:	eba5 020b 	sub.w	r2, r5, fp
 800e5e8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e5ec:	2e00      	cmp	r6, #0
 800e5ee:	bf08      	it	eq
 800e5f0:	461e      	moveq	r6, r3
 800e5f2:	2b10      	cmp	r3, #16
 800e5f4:	9206      	str	r2, [sp, #24]
 800e5f6:	461a      	mov	r2, r3
 800e5f8:	bfa8      	it	ge
 800e5fa:	2210      	movge	r2, #16
 800e5fc:	2b09      	cmp	r3, #9
 800e5fe:	ec59 8b17 	vmov	r8, r9, d7
 800e602:	dd0c      	ble.n	800e61e <_strtod_l+0x3ce>
 800e604:	4971      	ldr	r1, [pc, #452]	; (800e7cc <_strtod_l+0x57c>)
 800e606:	eddd 6a05 	vldr	s13, [sp, #20]
 800e60a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800e60e:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800e612:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800e616:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e61a:	ec59 8b16 	vmov	r8, r9, d6
 800e61e:	2b0f      	cmp	r3, #15
 800e620:	dc37      	bgt.n	800e692 <_strtod_l+0x442>
 800e622:	9906      	ldr	r1, [sp, #24]
 800e624:	2900      	cmp	r1, #0
 800e626:	f43f ae4e 	beq.w	800e2c6 <_strtod_l+0x76>
 800e62a:	dd23      	ble.n	800e674 <_strtod_l+0x424>
 800e62c:	2916      	cmp	r1, #22
 800e62e:	dc0b      	bgt.n	800e648 <_strtod_l+0x3f8>
 800e630:	4b66      	ldr	r3, [pc, #408]	; (800e7cc <_strtod_l+0x57c>)
 800e632:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e636:	ed93 7b00 	vldr	d7, [r3]
 800e63a:	ec49 8b16 	vmov	d6, r8, r9
 800e63e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e642:	ec59 8b17 	vmov	r8, r9, d7
 800e646:	e63e      	b.n	800e2c6 <_strtod_l+0x76>
 800e648:	9806      	ldr	r0, [sp, #24]
 800e64a:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800e64e:	4281      	cmp	r1, r0
 800e650:	db1f      	blt.n	800e692 <_strtod_l+0x442>
 800e652:	4a5e      	ldr	r2, [pc, #376]	; (800e7cc <_strtod_l+0x57c>)
 800e654:	f1c3 030f 	rsb	r3, r3, #15
 800e658:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800e65c:	ed91 7b00 	vldr	d7, [r1]
 800e660:	ec49 8b16 	vmov	d6, r8, r9
 800e664:	1ac3      	subs	r3, r0, r3
 800e666:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e66a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e66e:	ed92 6b00 	vldr	d6, [r2]
 800e672:	e7e4      	b.n	800e63e <_strtod_l+0x3ee>
 800e674:	9906      	ldr	r1, [sp, #24]
 800e676:	3116      	adds	r1, #22
 800e678:	db0b      	blt.n	800e692 <_strtod_l+0x442>
 800e67a:	4b54      	ldr	r3, [pc, #336]	; (800e7cc <_strtod_l+0x57c>)
 800e67c:	ebab 0505 	sub.w	r5, fp, r5
 800e680:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e684:	ed95 7b00 	vldr	d7, [r5]
 800e688:	ec49 8b16 	vmov	d6, r8, r9
 800e68c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e690:	e7d7      	b.n	800e642 <_strtod_l+0x3f2>
 800e692:	9906      	ldr	r1, [sp, #24]
 800e694:	1a9a      	subs	r2, r3, r2
 800e696:	440a      	add	r2, r1
 800e698:	2a00      	cmp	r2, #0
 800e69a:	dd6e      	ble.n	800e77a <_strtod_l+0x52a>
 800e69c:	f012 000f 	ands.w	r0, r2, #15
 800e6a0:	d00a      	beq.n	800e6b8 <_strtod_l+0x468>
 800e6a2:	494a      	ldr	r1, [pc, #296]	; (800e7cc <_strtod_l+0x57c>)
 800e6a4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e6a8:	ed91 7b00 	vldr	d7, [r1]
 800e6ac:	ec49 8b16 	vmov	d6, r8, r9
 800e6b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e6b4:	ec59 8b17 	vmov	r8, r9, d7
 800e6b8:	f032 020f 	bics.w	r2, r2, #15
 800e6bc:	d04e      	beq.n	800e75c <_strtod_l+0x50c>
 800e6be:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800e6c2:	dd22      	ble.n	800e70a <_strtod_l+0x4ba>
 800e6c4:	2500      	movs	r5, #0
 800e6c6:	462e      	mov	r6, r5
 800e6c8:	9507      	str	r5, [sp, #28]
 800e6ca:	462f      	mov	r7, r5
 800e6cc:	2322      	movs	r3, #34	; 0x22
 800e6ce:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800e7d8 <_strtod_l+0x588>
 800e6d2:	6023      	str	r3, [r4, #0]
 800e6d4:	f04f 0800 	mov.w	r8, #0
 800e6d8:	9b07      	ldr	r3, [sp, #28]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	f43f adf3 	beq.w	800e2c6 <_strtod_l+0x76>
 800e6e0:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e6e2:	4620      	mov	r0, r4
 800e6e4:	f7ff f930 	bl	800d948 <_Bfree>
 800e6e8:	4639      	mov	r1, r7
 800e6ea:	4620      	mov	r0, r4
 800e6ec:	f7ff f92c 	bl	800d948 <_Bfree>
 800e6f0:	4631      	mov	r1, r6
 800e6f2:	4620      	mov	r0, r4
 800e6f4:	f7ff f928 	bl	800d948 <_Bfree>
 800e6f8:	9907      	ldr	r1, [sp, #28]
 800e6fa:	4620      	mov	r0, r4
 800e6fc:	f7ff f924 	bl	800d948 <_Bfree>
 800e700:	4629      	mov	r1, r5
 800e702:	4620      	mov	r0, r4
 800e704:	f7ff f920 	bl	800d948 <_Bfree>
 800e708:	e5dd      	b.n	800e2c6 <_strtod_l+0x76>
 800e70a:	2000      	movs	r0, #0
 800e70c:	ec49 8b17 	vmov	d7, r8, r9
 800e710:	4f2f      	ldr	r7, [pc, #188]	; (800e7d0 <_strtod_l+0x580>)
 800e712:	1112      	asrs	r2, r2, #4
 800e714:	4601      	mov	r1, r0
 800e716:	2a01      	cmp	r2, #1
 800e718:	dc23      	bgt.n	800e762 <_strtod_l+0x512>
 800e71a:	b108      	cbz	r0, 800e720 <_strtod_l+0x4d0>
 800e71c:	ec59 8b17 	vmov	r8, r9, d7
 800e720:	4a2b      	ldr	r2, [pc, #172]	; (800e7d0 <_strtod_l+0x580>)
 800e722:	482c      	ldr	r0, [pc, #176]	; (800e7d4 <_strtod_l+0x584>)
 800e724:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e728:	ed92 7b00 	vldr	d7, [r2]
 800e72c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800e730:	ec49 8b16 	vmov	d6, r8, r9
 800e734:	4a28      	ldr	r2, [pc, #160]	; (800e7d8 <_strtod_l+0x588>)
 800e736:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e73a:	ee17 1a90 	vmov	r1, s15
 800e73e:	400a      	ands	r2, r1
 800e740:	4282      	cmp	r2, r0
 800e742:	ec59 8b17 	vmov	r8, r9, d7
 800e746:	d8bd      	bhi.n	800e6c4 <_strtod_l+0x474>
 800e748:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800e74c:	4282      	cmp	r2, r0
 800e74e:	bf86      	itte	hi
 800e750:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 800e7dc <_strtod_l+0x58c>
 800e754:	f04f 38ff 	movhi.w	r8, #4294967295
 800e758:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800e75c:	2200      	movs	r2, #0
 800e75e:	9205      	str	r2, [sp, #20]
 800e760:	e076      	b.n	800e850 <_strtod_l+0x600>
 800e762:	f012 0f01 	tst.w	r2, #1
 800e766:	d004      	beq.n	800e772 <_strtod_l+0x522>
 800e768:	ed97 6b00 	vldr	d6, [r7]
 800e76c:	2001      	movs	r0, #1
 800e76e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e772:	3101      	adds	r1, #1
 800e774:	1052      	asrs	r2, r2, #1
 800e776:	3708      	adds	r7, #8
 800e778:	e7cd      	b.n	800e716 <_strtod_l+0x4c6>
 800e77a:	d0ef      	beq.n	800e75c <_strtod_l+0x50c>
 800e77c:	4252      	negs	r2, r2
 800e77e:	f012 000f 	ands.w	r0, r2, #15
 800e782:	d00a      	beq.n	800e79a <_strtod_l+0x54a>
 800e784:	4911      	ldr	r1, [pc, #68]	; (800e7cc <_strtod_l+0x57c>)
 800e786:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e78a:	ed91 7b00 	vldr	d7, [r1]
 800e78e:	ec49 8b16 	vmov	d6, r8, r9
 800e792:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e796:	ec59 8b17 	vmov	r8, r9, d7
 800e79a:	1112      	asrs	r2, r2, #4
 800e79c:	d0de      	beq.n	800e75c <_strtod_l+0x50c>
 800e79e:	2a1f      	cmp	r2, #31
 800e7a0:	dd1e      	ble.n	800e7e0 <_strtod_l+0x590>
 800e7a2:	2500      	movs	r5, #0
 800e7a4:	462e      	mov	r6, r5
 800e7a6:	9507      	str	r5, [sp, #28]
 800e7a8:	462f      	mov	r7, r5
 800e7aa:	2322      	movs	r3, #34	; 0x22
 800e7ac:	f04f 0800 	mov.w	r8, #0
 800e7b0:	f04f 0900 	mov.w	r9, #0
 800e7b4:	6023      	str	r3, [r4, #0]
 800e7b6:	e78f      	b.n	800e6d8 <_strtod_l+0x488>
 800e7b8:	0800ffe5 	.word	0x0800ffe5
 800e7bc:	0801020c 	.word	0x0801020c
 800e7c0:	0800ffdd 	.word	0x0800ffdd
 800e7c4:	08010014 	.word	0x08010014
 800e7c8:	0801039d 	.word	0x0801039d
 800e7cc:	08010120 	.word	0x08010120
 800e7d0:	080100f8 	.word	0x080100f8
 800e7d4:	7ca00000 	.word	0x7ca00000
 800e7d8:	7ff00000 	.word	0x7ff00000
 800e7dc:	7fefffff 	.word	0x7fefffff
 800e7e0:	f012 0110 	ands.w	r1, r2, #16
 800e7e4:	bf18      	it	ne
 800e7e6:	216a      	movne	r1, #106	; 0x6a
 800e7e8:	9105      	str	r1, [sp, #20]
 800e7ea:	ec49 8b17 	vmov	d7, r8, r9
 800e7ee:	49be      	ldr	r1, [pc, #760]	; (800eae8 <_strtod_l+0x898>)
 800e7f0:	2000      	movs	r0, #0
 800e7f2:	07d7      	lsls	r7, r2, #31
 800e7f4:	d504      	bpl.n	800e800 <_strtod_l+0x5b0>
 800e7f6:	ed91 6b00 	vldr	d6, [r1]
 800e7fa:	2001      	movs	r0, #1
 800e7fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e800:	1052      	asrs	r2, r2, #1
 800e802:	f101 0108 	add.w	r1, r1, #8
 800e806:	d1f4      	bne.n	800e7f2 <_strtod_l+0x5a2>
 800e808:	b108      	cbz	r0, 800e80e <_strtod_l+0x5be>
 800e80a:	ec59 8b17 	vmov	r8, r9, d7
 800e80e:	9a05      	ldr	r2, [sp, #20]
 800e810:	b1ba      	cbz	r2, 800e842 <_strtod_l+0x5f2>
 800e812:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800e816:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800e81a:	2a00      	cmp	r2, #0
 800e81c:	4648      	mov	r0, r9
 800e81e:	dd10      	ble.n	800e842 <_strtod_l+0x5f2>
 800e820:	2a1f      	cmp	r2, #31
 800e822:	f340 812c 	ble.w	800ea7e <_strtod_l+0x82e>
 800e826:	2a34      	cmp	r2, #52	; 0x34
 800e828:	bfde      	ittt	le
 800e82a:	f04f 32ff 	movle.w	r2, #4294967295
 800e82e:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800e832:	408a      	lslle	r2, r1
 800e834:	f04f 0800 	mov.w	r8, #0
 800e838:	bfcc      	ite	gt
 800e83a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800e83e:	ea02 0900 	andle.w	r9, r2, r0
 800e842:	ec49 8b17 	vmov	d7, r8, r9
 800e846:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e84a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e84e:	d0a8      	beq.n	800e7a2 <_strtod_l+0x552>
 800e850:	9a07      	ldr	r2, [sp, #28]
 800e852:	9200      	str	r2, [sp, #0]
 800e854:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e856:	4632      	mov	r2, r6
 800e858:	4620      	mov	r0, r4
 800e85a:	f7ff f8dd 	bl	800da18 <__s2b>
 800e85e:	9007      	str	r0, [sp, #28]
 800e860:	2800      	cmp	r0, #0
 800e862:	f43f af2f 	beq.w	800e6c4 <_strtod_l+0x474>
 800e866:	9a06      	ldr	r2, [sp, #24]
 800e868:	2a00      	cmp	r2, #0
 800e86a:	ebab 0305 	sub.w	r3, fp, r5
 800e86e:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800eac8 <_strtod_l+0x878>
 800e872:	bfa8      	it	ge
 800e874:	2300      	movge	r3, #0
 800e876:	ed9f ab96 	vldr	d10, [pc, #600]	; 800ead0 <_strtod_l+0x880>
 800e87a:	ed9f bb97 	vldr	d11, [pc, #604]	; 800ead8 <_strtod_l+0x888>
 800e87e:	9309      	str	r3, [sp, #36]	; 0x24
 800e880:	2500      	movs	r5, #0
 800e882:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e886:	930c      	str	r3, [sp, #48]	; 0x30
 800e888:	462e      	mov	r6, r5
 800e88a:	9b07      	ldr	r3, [sp, #28]
 800e88c:	4620      	mov	r0, r4
 800e88e:	6859      	ldr	r1, [r3, #4]
 800e890:	f7ff f81a 	bl	800d8c8 <_Balloc>
 800e894:	4607      	mov	r7, r0
 800e896:	2800      	cmp	r0, #0
 800e898:	f43f af18 	beq.w	800e6cc <_strtod_l+0x47c>
 800e89c:	9b07      	ldr	r3, [sp, #28]
 800e89e:	691a      	ldr	r2, [r3, #16]
 800e8a0:	3202      	adds	r2, #2
 800e8a2:	f103 010c 	add.w	r1, r3, #12
 800e8a6:	0092      	lsls	r2, r2, #2
 800e8a8:	300c      	adds	r0, #12
 800e8aa:	f000 fdd3 	bl	800f454 <memcpy>
 800e8ae:	ec49 8b10 	vmov	d0, r8, r9
 800e8b2:	aa14      	add	r2, sp, #80	; 0x50
 800e8b4:	a913      	add	r1, sp, #76	; 0x4c
 800e8b6:	4620      	mov	r0, r4
 800e8b8:	f7ff fbe2 	bl	800e080 <__d2b>
 800e8bc:	ec49 8b18 	vmov	d8, r8, r9
 800e8c0:	9012      	str	r0, [sp, #72]	; 0x48
 800e8c2:	2800      	cmp	r0, #0
 800e8c4:	f43f af02 	beq.w	800e6cc <_strtod_l+0x47c>
 800e8c8:	2101      	movs	r1, #1
 800e8ca:	4620      	mov	r0, r4
 800e8cc:	f7ff f93c 	bl	800db48 <__i2b>
 800e8d0:	4606      	mov	r6, r0
 800e8d2:	2800      	cmp	r0, #0
 800e8d4:	f43f aefa 	beq.w	800e6cc <_strtod_l+0x47c>
 800e8d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e8da:	9914      	ldr	r1, [sp, #80]	; 0x50
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	bfab      	itete	ge
 800e8e0:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800e8e2:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800e8e4:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800e8e8:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800e8ec:	bfac      	ite	ge
 800e8ee:	eb03 0b02 	addge.w	fp, r3, r2
 800e8f2:	eba2 0a03 	sublt.w	sl, r2, r3
 800e8f6:	9a05      	ldr	r2, [sp, #20]
 800e8f8:	1a9b      	subs	r3, r3, r2
 800e8fa:	440b      	add	r3, r1
 800e8fc:	4a7b      	ldr	r2, [pc, #492]	; (800eaec <_strtod_l+0x89c>)
 800e8fe:	3b01      	subs	r3, #1
 800e900:	4293      	cmp	r3, r2
 800e902:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800e906:	f280 80cd 	bge.w	800eaa4 <_strtod_l+0x854>
 800e90a:	1ad2      	subs	r2, r2, r3
 800e90c:	2a1f      	cmp	r2, #31
 800e90e:	eba1 0102 	sub.w	r1, r1, r2
 800e912:	f04f 0001 	mov.w	r0, #1
 800e916:	f300 80b9 	bgt.w	800ea8c <_strtod_l+0x83c>
 800e91a:	fa00 f302 	lsl.w	r3, r0, r2
 800e91e:	930b      	str	r3, [sp, #44]	; 0x2c
 800e920:	2300      	movs	r3, #0
 800e922:	930a      	str	r3, [sp, #40]	; 0x28
 800e924:	eb0b 0301 	add.w	r3, fp, r1
 800e928:	9a05      	ldr	r2, [sp, #20]
 800e92a:	459b      	cmp	fp, r3
 800e92c:	448a      	add	sl, r1
 800e92e:	4492      	add	sl, r2
 800e930:	465a      	mov	r2, fp
 800e932:	bfa8      	it	ge
 800e934:	461a      	movge	r2, r3
 800e936:	4552      	cmp	r2, sl
 800e938:	bfa8      	it	ge
 800e93a:	4652      	movge	r2, sl
 800e93c:	2a00      	cmp	r2, #0
 800e93e:	bfc2      	ittt	gt
 800e940:	1a9b      	subgt	r3, r3, r2
 800e942:	ebaa 0a02 	subgt.w	sl, sl, r2
 800e946:	ebab 0b02 	subgt.w	fp, fp, r2
 800e94a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e94c:	2a00      	cmp	r2, #0
 800e94e:	dd18      	ble.n	800e982 <_strtod_l+0x732>
 800e950:	4631      	mov	r1, r6
 800e952:	4620      	mov	r0, r4
 800e954:	930f      	str	r3, [sp, #60]	; 0x3c
 800e956:	f7ff f9b7 	bl	800dcc8 <__pow5mult>
 800e95a:	4606      	mov	r6, r0
 800e95c:	2800      	cmp	r0, #0
 800e95e:	f43f aeb5 	beq.w	800e6cc <_strtod_l+0x47c>
 800e962:	4601      	mov	r1, r0
 800e964:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e966:	4620      	mov	r0, r4
 800e968:	f7ff f904 	bl	800db74 <__multiply>
 800e96c:	900e      	str	r0, [sp, #56]	; 0x38
 800e96e:	2800      	cmp	r0, #0
 800e970:	f43f aeac 	beq.w	800e6cc <_strtod_l+0x47c>
 800e974:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e976:	4620      	mov	r0, r4
 800e978:	f7fe ffe6 	bl	800d948 <_Bfree>
 800e97c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e97e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e980:	9212      	str	r2, [sp, #72]	; 0x48
 800e982:	2b00      	cmp	r3, #0
 800e984:	f300 8093 	bgt.w	800eaae <_strtod_l+0x85e>
 800e988:	9b06      	ldr	r3, [sp, #24]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	dd08      	ble.n	800e9a0 <_strtod_l+0x750>
 800e98e:	4639      	mov	r1, r7
 800e990:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e992:	4620      	mov	r0, r4
 800e994:	f7ff f998 	bl	800dcc8 <__pow5mult>
 800e998:	4607      	mov	r7, r0
 800e99a:	2800      	cmp	r0, #0
 800e99c:	f43f ae96 	beq.w	800e6cc <_strtod_l+0x47c>
 800e9a0:	f1ba 0f00 	cmp.w	sl, #0
 800e9a4:	dd08      	ble.n	800e9b8 <_strtod_l+0x768>
 800e9a6:	4639      	mov	r1, r7
 800e9a8:	4652      	mov	r2, sl
 800e9aa:	4620      	mov	r0, r4
 800e9ac:	f7ff f9e6 	bl	800dd7c <__lshift>
 800e9b0:	4607      	mov	r7, r0
 800e9b2:	2800      	cmp	r0, #0
 800e9b4:	f43f ae8a 	beq.w	800e6cc <_strtod_l+0x47c>
 800e9b8:	f1bb 0f00 	cmp.w	fp, #0
 800e9bc:	dd08      	ble.n	800e9d0 <_strtod_l+0x780>
 800e9be:	4631      	mov	r1, r6
 800e9c0:	465a      	mov	r2, fp
 800e9c2:	4620      	mov	r0, r4
 800e9c4:	f7ff f9da 	bl	800dd7c <__lshift>
 800e9c8:	4606      	mov	r6, r0
 800e9ca:	2800      	cmp	r0, #0
 800e9cc:	f43f ae7e 	beq.w	800e6cc <_strtod_l+0x47c>
 800e9d0:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e9d2:	463a      	mov	r2, r7
 800e9d4:	4620      	mov	r0, r4
 800e9d6:	f7ff fa59 	bl	800de8c <__mdiff>
 800e9da:	4605      	mov	r5, r0
 800e9dc:	2800      	cmp	r0, #0
 800e9de:	f43f ae75 	beq.w	800e6cc <_strtod_l+0x47c>
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800e9e8:	60c3      	str	r3, [r0, #12]
 800e9ea:	4631      	mov	r1, r6
 800e9ec:	f7ff fa32 	bl	800de54 <__mcmp>
 800e9f0:	2800      	cmp	r0, #0
 800e9f2:	da7f      	bge.n	800eaf4 <_strtod_l+0x8a4>
 800e9f4:	ea5a 0a08 	orrs.w	sl, sl, r8
 800e9f8:	f040 80a5 	bne.w	800eb46 <_strtod_l+0x8f6>
 800e9fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	f040 80a0 	bne.w	800eb46 <_strtod_l+0x8f6>
 800ea06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ea0a:	0d1b      	lsrs	r3, r3, #20
 800ea0c:	051b      	lsls	r3, r3, #20
 800ea0e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ea12:	f240 8098 	bls.w	800eb46 <_strtod_l+0x8f6>
 800ea16:	696b      	ldr	r3, [r5, #20]
 800ea18:	b91b      	cbnz	r3, 800ea22 <_strtod_l+0x7d2>
 800ea1a:	692b      	ldr	r3, [r5, #16]
 800ea1c:	2b01      	cmp	r3, #1
 800ea1e:	f340 8092 	ble.w	800eb46 <_strtod_l+0x8f6>
 800ea22:	4629      	mov	r1, r5
 800ea24:	2201      	movs	r2, #1
 800ea26:	4620      	mov	r0, r4
 800ea28:	f7ff f9a8 	bl	800dd7c <__lshift>
 800ea2c:	4631      	mov	r1, r6
 800ea2e:	4605      	mov	r5, r0
 800ea30:	f7ff fa10 	bl	800de54 <__mcmp>
 800ea34:	2800      	cmp	r0, #0
 800ea36:	f340 8086 	ble.w	800eb46 <_strtod_l+0x8f6>
 800ea3a:	9905      	ldr	r1, [sp, #20]
 800ea3c:	4a2c      	ldr	r2, [pc, #176]	; (800eaf0 <_strtod_l+0x8a0>)
 800ea3e:	464b      	mov	r3, r9
 800ea40:	2900      	cmp	r1, #0
 800ea42:	f000 809f 	beq.w	800eb84 <_strtod_l+0x934>
 800ea46:	ea02 0109 	and.w	r1, r2, r9
 800ea4a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ea4e:	f300 8099 	bgt.w	800eb84 <_strtod_l+0x934>
 800ea52:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ea56:	f77f aea8 	ble.w	800e7aa <_strtod_l+0x55a>
 800ea5a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800eae0 <_strtod_l+0x890>
 800ea5e:	ec49 8b16 	vmov	d6, r8, r9
 800ea62:	4b23      	ldr	r3, [pc, #140]	; (800eaf0 <_strtod_l+0x8a0>)
 800ea64:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ea68:	ee17 2a90 	vmov	r2, s15
 800ea6c:	4013      	ands	r3, r2
 800ea6e:	ec59 8b17 	vmov	r8, r9, d7
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	f47f ae34 	bne.w	800e6e0 <_strtod_l+0x490>
 800ea78:	2322      	movs	r3, #34	; 0x22
 800ea7a:	6023      	str	r3, [r4, #0]
 800ea7c:	e630      	b.n	800e6e0 <_strtod_l+0x490>
 800ea7e:	f04f 31ff 	mov.w	r1, #4294967295
 800ea82:	fa01 f202 	lsl.w	r2, r1, r2
 800ea86:	ea02 0808 	and.w	r8, r2, r8
 800ea8a:	e6da      	b.n	800e842 <_strtod_l+0x5f2>
 800ea8c:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800ea90:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800ea94:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800ea98:	33e2      	adds	r3, #226	; 0xe2
 800ea9a:	fa00 f303 	lsl.w	r3, r0, r3
 800ea9e:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800eaa2:	e73f      	b.n	800e924 <_strtod_l+0x6d4>
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800eaac:	e73a      	b.n	800e924 <_strtod_l+0x6d4>
 800eaae:	9912      	ldr	r1, [sp, #72]	; 0x48
 800eab0:	461a      	mov	r2, r3
 800eab2:	4620      	mov	r0, r4
 800eab4:	f7ff f962 	bl	800dd7c <__lshift>
 800eab8:	9012      	str	r0, [sp, #72]	; 0x48
 800eaba:	2800      	cmp	r0, #0
 800eabc:	f47f af64 	bne.w	800e988 <_strtod_l+0x738>
 800eac0:	e604      	b.n	800e6cc <_strtod_l+0x47c>
 800eac2:	bf00      	nop
 800eac4:	f3af 8000 	nop.w
 800eac8:	94a03595 	.word	0x94a03595
 800eacc:	3fcfffff 	.word	0x3fcfffff
 800ead0:	94a03595 	.word	0x94a03595
 800ead4:	3fdfffff 	.word	0x3fdfffff
 800ead8:	35afe535 	.word	0x35afe535
 800eadc:	3fe00000 	.word	0x3fe00000
 800eae0:	00000000 	.word	0x00000000
 800eae4:	39500000 	.word	0x39500000
 800eae8:	08010220 	.word	0x08010220
 800eaec:	fffffc02 	.word	0xfffffc02
 800eaf0:	7ff00000 	.word	0x7ff00000
 800eaf4:	46cb      	mov	fp, r9
 800eaf6:	d15f      	bne.n	800ebb8 <_strtod_l+0x968>
 800eaf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eafc:	f1ba 0f00 	cmp.w	sl, #0
 800eb00:	d02a      	beq.n	800eb58 <_strtod_l+0x908>
 800eb02:	4aa7      	ldr	r2, [pc, #668]	; (800eda0 <_strtod_l+0xb50>)
 800eb04:	4293      	cmp	r3, r2
 800eb06:	d12b      	bne.n	800eb60 <_strtod_l+0x910>
 800eb08:	9b05      	ldr	r3, [sp, #20]
 800eb0a:	4642      	mov	r2, r8
 800eb0c:	b1fb      	cbz	r3, 800eb4e <_strtod_l+0x8fe>
 800eb0e:	4ba5      	ldr	r3, [pc, #660]	; (800eda4 <_strtod_l+0xb54>)
 800eb10:	ea09 0303 	and.w	r3, r9, r3
 800eb14:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800eb18:	f04f 31ff 	mov.w	r1, #4294967295
 800eb1c:	d81a      	bhi.n	800eb54 <_strtod_l+0x904>
 800eb1e:	0d1b      	lsrs	r3, r3, #20
 800eb20:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800eb24:	fa01 f303 	lsl.w	r3, r1, r3
 800eb28:	429a      	cmp	r2, r3
 800eb2a:	d119      	bne.n	800eb60 <_strtod_l+0x910>
 800eb2c:	4b9e      	ldr	r3, [pc, #632]	; (800eda8 <_strtod_l+0xb58>)
 800eb2e:	459b      	cmp	fp, r3
 800eb30:	d102      	bne.n	800eb38 <_strtod_l+0x8e8>
 800eb32:	3201      	adds	r2, #1
 800eb34:	f43f adca 	beq.w	800e6cc <_strtod_l+0x47c>
 800eb38:	4b9a      	ldr	r3, [pc, #616]	; (800eda4 <_strtod_l+0xb54>)
 800eb3a:	ea0b 0303 	and.w	r3, fp, r3
 800eb3e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800eb42:	f04f 0800 	mov.w	r8, #0
 800eb46:	9b05      	ldr	r3, [sp, #20]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d186      	bne.n	800ea5a <_strtod_l+0x80a>
 800eb4c:	e5c8      	b.n	800e6e0 <_strtod_l+0x490>
 800eb4e:	f04f 33ff 	mov.w	r3, #4294967295
 800eb52:	e7e9      	b.n	800eb28 <_strtod_l+0x8d8>
 800eb54:	460b      	mov	r3, r1
 800eb56:	e7e7      	b.n	800eb28 <_strtod_l+0x8d8>
 800eb58:	ea53 0308 	orrs.w	r3, r3, r8
 800eb5c:	f43f af6d 	beq.w	800ea3a <_strtod_l+0x7ea>
 800eb60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb62:	b1cb      	cbz	r3, 800eb98 <_strtod_l+0x948>
 800eb64:	ea13 0f0b 	tst.w	r3, fp
 800eb68:	d0ed      	beq.n	800eb46 <_strtod_l+0x8f6>
 800eb6a:	9a05      	ldr	r2, [sp, #20]
 800eb6c:	4640      	mov	r0, r8
 800eb6e:	4649      	mov	r1, r9
 800eb70:	f1ba 0f00 	cmp.w	sl, #0
 800eb74:	d014      	beq.n	800eba0 <_strtod_l+0x950>
 800eb76:	f7ff fb51 	bl	800e21c <sulp>
 800eb7a:	ee38 7b00 	vadd.f64	d7, d8, d0
 800eb7e:	ec59 8b17 	vmov	r8, r9, d7
 800eb82:	e7e0      	b.n	800eb46 <_strtod_l+0x8f6>
 800eb84:	4013      	ands	r3, r2
 800eb86:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800eb8a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800eb8e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800eb92:	f04f 38ff 	mov.w	r8, #4294967295
 800eb96:	e7d6      	b.n	800eb46 <_strtod_l+0x8f6>
 800eb98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb9a:	ea13 0f08 	tst.w	r3, r8
 800eb9e:	e7e3      	b.n	800eb68 <_strtod_l+0x918>
 800eba0:	f7ff fb3c 	bl	800e21c <sulp>
 800eba4:	ee38 0b40 	vsub.f64	d0, d8, d0
 800eba8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ebac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebb0:	ec59 8b10 	vmov	r8, r9, d0
 800ebb4:	d1c7      	bne.n	800eb46 <_strtod_l+0x8f6>
 800ebb6:	e5f8      	b.n	800e7aa <_strtod_l+0x55a>
 800ebb8:	4631      	mov	r1, r6
 800ebba:	4628      	mov	r0, r5
 800ebbc:	f7ff faba 	bl	800e134 <__ratio>
 800ebc0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800ebc4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ebc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebcc:	d85f      	bhi.n	800ec8e <_strtod_l+0xa3e>
 800ebce:	f1ba 0f00 	cmp.w	sl, #0
 800ebd2:	d166      	bne.n	800eca2 <_strtod_l+0xa52>
 800ebd4:	f1b8 0f00 	cmp.w	r8, #0
 800ebd8:	d14d      	bne.n	800ec76 <_strtod_l+0xa26>
 800ebda:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ebde:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d162      	bne.n	800ecac <_strtod_l+0xa5c>
 800ebe6:	eeb4 0bcd 	vcmpe.f64	d0, d13
 800ebea:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800ebee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebf2:	d401      	bmi.n	800ebf8 <_strtod_l+0x9a8>
 800ebf4:	ee20 db0d 	vmul.f64	d13, d0, d13
 800ebf8:	eeb1 cb4d 	vneg.f64	d12, d13
 800ebfc:	4869      	ldr	r0, [pc, #420]	; (800eda4 <_strtod_l+0xb54>)
 800ebfe:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 800edb0 <_strtod_l+0xb60>
 800ec02:	ea0b 0100 	and.w	r1, fp, r0
 800ec06:	4561      	cmp	r1, ip
 800ec08:	ec53 2b1c 	vmov	r2, r3, d12
 800ec0c:	d17a      	bne.n	800ed04 <_strtod_l+0xab4>
 800ec0e:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800ec12:	ec49 8b10 	vmov	d0, r8, r9
 800ec16:	910a      	str	r1, [sp, #40]	; 0x28
 800ec18:	f7ff f9c2 	bl	800dfa0 <__ulp>
 800ec1c:	ec49 8b1e 	vmov	d14, r8, r9
 800ec20:	4860      	ldr	r0, [pc, #384]	; (800eda4 <_strtod_l+0xb54>)
 800ec22:	eea0 eb0c 	vfma.f64	d14, d0, d12
 800ec26:	ee1e 3a90 	vmov	r3, s29
 800ec2a:	4a60      	ldr	r2, [pc, #384]	; (800edac <_strtod_l+0xb5c>)
 800ec2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ec2e:	4018      	ands	r0, r3
 800ec30:	4290      	cmp	r0, r2
 800ec32:	ec59 8b1e 	vmov	r8, r9, d14
 800ec36:	d93c      	bls.n	800ecb2 <_strtod_l+0xa62>
 800ec38:	ee18 2a90 	vmov	r2, s17
 800ec3c:	4b5a      	ldr	r3, [pc, #360]	; (800eda8 <_strtod_l+0xb58>)
 800ec3e:	429a      	cmp	r2, r3
 800ec40:	d104      	bne.n	800ec4c <_strtod_l+0x9fc>
 800ec42:	ee18 3a10 	vmov	r3, s16
 800ec46:	3301      	adds	r3, #1
 800ec48:	f43f ad40 	beq.w	800e6cc <_strtod_l+0x47c>
 800ec4c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800eda8 <_strtod_l+0xb58>
 800ec50:	f04f 38ff 	mov.w	r8, #4294967295
 800ec54:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ec56:	4620      	mov	r0, r4
 800ec58:	f7fe fe76 	bl	800d948 <_Bfree>
 800ec5c:	4639      	mov	r1, r7
 800ec5e:	4620      	mov	r0, r4
 800ec60:	f7fe fe72 	bl	800d948 <_Bfree>
 800ec64:	4631      	mov	r1, r6
 800ec66:	4620      	mov	r0, r4
 800ec68:	f7fe fe6e 	bl	800d948 <_Bfree>
 800ec6c:	4629      	mov	r1, r5
 800ec6e:	4620      	mov	r0, r4
 800ec70:	f7fe fe6a 	bl	800d948 <_Bfree>
 800ec74:	e609      	b.n	800e88a <_strtod_l+0x63a>
 800ec76:	f1b8 0f01 	cmp.w	r8, #1
 800ec7a:	d103      	bne.n	800ec84 <_strtod_l+0xa34>
 800ec7c:	f1b9 0f00 	cmp.w	r9, #0
 800ec80:	f43f ad93 	beq.w	800e7aa <_strtod_l+0x55a>
 800ec84:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800ec88:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800ec8c:	e7b6      	b.n	800ebfc <_strtod_l+0x9ac>
 800ec8e:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800ec92:	ee20 db0d 	vmul.f64	d13, d0, d13
 800ec96:	f1ba 0f00 	cmp.w	sl, #0
 800ec9a:	d0ad      	beq.n	800ebf8 <_strtod_l+0x9a8>
 800ec9c:	eeb0 cb4d 	vmov.f64	d12, d13
 800eca0:	e7ac      	b.n	800ebfc <_strtod_l+0x9ac>
 800eca2:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 800eca6:	eeb0 db4c 	vmov.f64	d13, d12
 800ecaa:	e7a7      	b.n	800ebfc <_strtod_l+0x9ac>
 800ecac:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800ecb0:	e7a4      	b.n	800ebfc <_strtod_l+0x9ac>
 800ecb2:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ecb6:	9b05      	ldr	r3, [sp, #20]
 800ecb8:	46cb      	mov	fp, r9
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d1ca      	bne.n	800ec54 <_strtod_l+0xa04>
 800ecbe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ecc2:	0d1b      	lsrs	r3, r3, #20
 800ecc4:	051b      	lsls	r3, r3, #20
 800ecc6:	4299      	cmp	r1, r3
 800ecc8:	d1c4      	bne.n	800ec54 <_strtod_l+0xa04>
 800ecca:	ec51 0b1d 	vmov	r0, r1, d13
 800ecce:	f7f1 fd33 	bl	8000738 <__aeabi_d2lz>
 800ecd2:	f7f1 fceb 	bl	80006ac <__aeabi_l2d>
 800ecd6:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 800ecda:	ec41 0b17 	vmov	d7, r0, r1
 800ecde:	ea4b 0b08 	orr.w	fp, fp, r8
 800ece2:	ea5b 0b0a 	orrs.w	fp, fp, sl
 800ece6:	ee3d db47 	vsub.f64	d13, d13, d7
 800ecea:	d03c      	beq.n	800ed66 <_strtod_l+0xb16>
 800ecec:	eeb4 dbca 	vcmpe.f64	d13, d10
 800ecf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecf4:	f53f acf4 	bmi.w	800e6e0 <_strtod_l+0x490>
 800ecf8:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800ecfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed00:	dda8      	ble.n	800ec54 <_strtod_l+0xa04>
 800ed02:	e4ed      	b.n	800e6e0 <_strtod_l+0x490>
 800ed04:	9805      	ldr	r0, [sp, #20]
 800ed06:	b1f0      	cbz	r0, 800ed46 <_strtod_l+0xaf6>
 800ed08:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800ed0c:	d81b      	bhi.n	800ed46 <_strtod_l+0xaf6>
 800ed0e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800ed98 <_strtod_l+0xb48>
 800ed12:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800ed16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed1a:	d811      	bhi.n	800ed40 <_strtod_l+0xaf0>
 800ed1c:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800ed20:	ee1d 3a10 	vmov	r3, s26
 800ed24:	2b01      	cmp	r3, #1
 800ed26:	bf38      	it	cc
 800ed28:	2301      	movcc	r3, #1
 800ed2a:	ee0d 3a10 	vmov	s26, r3
 800ed2e:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800ed32:	f1ba 0f00 	cmp.w	sl, #0
 800ed36:	d113      	bne.n	800ed60 <_strtod_l+0xb10>
 800ed38:	eeb1 7b4d 	vneg.f64	d7, d13
 800ed3c:	ec53 2b17 	vmov	r2, r3, d7
 800ed40:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800ed44:	1a43      	subs	r3, r0, r1
 800ed46:	eeb0 0b48 	vmov.f64	d0, d8
 800ed4a:	ec43 2b1c 	vmov	d12, r2, r3
 800ed4e:	910a      	str	r1, [sp, #40]	; 0x28
 800ed50:	f7ff f926 	bl	800dfa0 <__ulp>
 800ed54:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ed56:	eeac 8b00 	vfma.f64	d8, d12, d0
 800ed5a:	ec59 8b18 	vmov	r8, r9, d8
 800ed5e:	e7aa      	b.n	800ecb6 <_strtod_l+0xa66>
 800ed60:	eeb0 7b4d 	vmov.f64	d7, d13
 800ed64:	e7ea      	b.n	800ed3c <_strtod_l+0xaec>
 800ed66:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800ed6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed6e:	f57f af71 	bpl.w	800ec54 <_strtod_l+0xa04>
 800ed72:	e4b5      	b.n	800e6e0 <_strtod_l+0x490>
 800ed74:	2300      	movs	r3, #0
 800ed76:	9308      	str	r3, [sp, #32]
 800ed78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ed7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ed7c:	6013      	str	r3, [r2, #0]
 800ed7e:	f7ff baa6 	b.w	800e2ce <_strtod_l+0x7e>
 800ed82:	2a65      	cmp	r2, #101	; 0x65
 800ed84:	f43f aba2 	beq.w	800e4cc <_strtod_l+0x27c>
 800ed88:	2a45      	cmp	r2, #69	; 0x45
 800ed8a:	f43f ab9f 	beq.w	800e4cc <_strtod_l+0x27c>
 800ed8e:	2101      	movs	r1, #1
 800ed90:	f7ff bbd8 	b.w	800e544 <_strtod_l+0x2f4>
 800ed94:	f3af 8000 	nop.w
 800ed98:	ffc00000 	.word	0xffc00000
 800ed9c:	41dfffff 	.word	0x41dfffff
 800eda0:	000fffff 	.word	0x000fffff
 800eda4:	7ff00000 	.word	0x7ff00000
 800eda8:	7fefffff 	.word	0x7fefffff
 800edac:	7c9fffff 	.word	0x7c9fffff
 800edb0:	7fe00000 	.word	0x7fe00000

0800edb4 <_strtod_r>:
 800edb4:	4b01      	ldr	r3, [pc, #4]	; (800edbc <_strtod_r+0x8>)
 800edb6:	f7ff ba4b 	b.w	800e250 <_strtod_l>
 800edba:	bf00      	nop
 800edbc:	24000070 	.word	0x24000070

0800edc0 <_strtol_l.constprop.0>:
 800edc0:	2b01      	cmp	r3, #1
 800edc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edc6:	d001      	beq.n	800edcc <_strtol_l.constprop.0+0xc>
 800edc8:	2b24      	cmp	r3, #36	; 0x24
 800edca:	d906      	bls.n	800edda <_strtol_l.constprop.0+0x1a>
 800edcc:	f7fd fe54 	bl	800ca78 <__errno>
 800edd0:	2316      	movs	r3, #22
 800edd2:	6003      	str	r3, [r0, #0]
 800edd4:	2000      	movs	r0, #0
 800edd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edda:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800eec0 <_strtol_l.constprop.0+0x100>
 800edde:	460d      	mov	r5, r1
 800ede0:	462e      	mov	r6, r5
 800ede2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ede6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800edea:	f017 0708 	ands.w	r7, r7, #8
 800edee:	d1f7      	bne.n	800ede0 <_strtol_l.constprop.0+0x20>
 800edf0:	2c2d      	cmp	r4, #45	; 0x2d
 800edf2:	d132      	bne.n	800ee5a <_strtol_l.constprop.0+0x9a>
 800edf4:	782c      	ldrb	r4, [r5, #0]
 800edf6:	2701      	movs	r7, #1
 800edf8:	1cb5      	adds	r5, r6, #2
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d05b      	beq.n	800eeb6 <_strtol_l.constprop.0+0xf6>
 800edfe:	2b10      	cmp	r3, #16
 800ee00:	d109      	bne.n	800ee16 <_strtol_l.constprop.0+0x56>
 800ee02:	2c30      	cmp	r4, #48	; 0x30
 800ee04:	d107      	bne.n	800ee16 <_strtol_l.constprop.0+0x56>
 800ee06:	782c      	ldrb	r4, [r5, #0]
 800ee08:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ee0c:	2c58      	cmp	r4, #88	; 0x58
 800ee0e:	d14d      	bne.n	800eeac <_strtol_l.constprop.0+0xec>
 800ee10:	786c      	ldrb	r4, [r5, #1]
 800ee12:	2310      	movs	r3, #16
 800ee14:	3502      	adds	r5, #2
 800ee16:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ee1a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ee1e:	f04f 0e00 	mov.w	lr, #0
 800ee22:	fbb8 f9f3 	udiv	r9, r8, r3
 800ee26:	4676      	mov	r6, lr
 800ee28:	fb03 8a19 	mls	sl, r3, r9, r8
 800ee2c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ee30:	f1bc 0f09 	cmp.w	ip, #9
 800ee34:	d816      	bhi.n	800ee64 <_strtol_l.constprop.0+0xa4>
 800ee36:	4664      	mov	r4, ip
 800ee38:	42a3      	cmp	r3, r4
 800ee3a:	dd24      	ble.n	800ee86 <_strtol_l.constprop.0+0xc6>
 800ee3c:	f1be 3fff 	cmp.w	lr, #4294967295
 800ee40:	d008      	beq.n	800ee54 <_strtol_l.constprop.0+0x94>
 800ee42:	45b1      	cmp	r9, r6
 800ee44:	d31c      	bcc.n	800ee80 <_strtol_l.constprop.0+0xc0>
 800ee46:	d101      	bne.n	800ee4c <_strtol_l.constprop.0+0x8c>
 800ee48:	45a2      	cmp	sl, r4
 800ee4a:	db19      	blt.n	800ee80 <_strtol_l.constprop.0+0xc0>
 800ee4c:	fb06 4603 	mla	r6, r6, r3, r4
 800ee50:	f04f 0e01 	mov.w	lr, #1
 800ee54:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ee58:	e7e8      	b.n	800ee2c <_strtol_l.constprop.0+0x6c>
 800ee5a:	2c2b      	cmp	r4, #43	; 0x2b
 800ee5c:	bf04      	itt	eq
 800ee5e:	782c      	ldrbeq	r4, [r5, #0]
 800ee60:	1cb5      	addeq	r5, r6, #2
 800ee62:	e7ca      	b.n	800edfa <_strtol_l.constprop.0+0x3a>
 800ee64:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ee68:	f1bc 0f19 	cmp.w	ip, #25
 800ee6c:	d801      	bhi.n	800ee72 <_strtol_l.constprop.0+0xb2>
 800ee6e:	3c37      	subs	r4, #55	; 0x37
 800ee70:	e7e2      	b.n	800ee38 <_strtol_l.constprop.0+0x78>
 800ee72:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ee76:	f1bc 0f19 	cmp.w	ip, #25
 800ee7a:	d804      	bhi.n	800ee86 <_strtol_l.constprop.0+0xc6>
 800ee7c:	3c57      	subs	r4, #87	; 0x57
 800ee7e:	e7db      	b.n	800ee38 <_strtol_l.constprop.0+0x78>
 800ee80:	f04f 3eff 	mov.w	lr, #4294967295
 800ee84:	e7e6      	b.n	800ee54 <_strtol_l.constprop.0+0x94>
 800ee86:	f1be 3fff 	cmp.w	lr, #4294967295
 800ee8a:	d105      	bne.n	800ee98 <_strtol_l.constprop.0+0xd8>
 800ee8c:	2322      	movs	r3, #34	; 0x22
 800ee8e:	6003      	str	r3, [r0, #0]
 800ee90:	4646      	mov	r6, r8
 800ee92:	b942      	cbnz	r2, 800eea6 <_strtol_l.constprop.0+0xe6>
 800ee94:	4630      	mov	r0, r6
 800ee96:	e79e      	b.n	800edd6 <_strtol_l.constprop.0+0x16>
 800ee98:	b107      	cbz	r7, 800ee9c <_strtol_l.constprop.0+0xdc>
 800ee9a:	4276      	negs	r6, r6
 800ee9c:	2a00      	cmp	r2, #0
 800ee9e:	d0f9      	beq.n	800ee94 <_strtol_l.constprop.0+0xd4>
 800eea0:	f1be 0f00 	cmp.w	lr, #0
 800eea4:	d000      	beq.n	800eea8 <_strtol_l.constprop.0+0xe8>
 800eea6:	1e69      	subs	r1, r5, #1
 800eea8:	6011      	str	r1, [r2, #0]
 800eeaa:	e7f3      	b.n	800ee94 <_strtol_l.constprop.0+0xd4>
 800eeac:	2430      	movs	r4, #48	; 0x30
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d1b1      	bne.n	800ee16 <_strtol_l.constprop.0+0x56>
 800eeb2:	2308      	movs	r3, #8
 800eeb4:	e7af      	b.n	800ee16 <_strtol_l.constprop.0+0x56>
 800eeb6:	2c30      	cmp	r4, #48	; 0x30
 800eeb8:	d0a5      	beq.n	800ee06 <_strtol_l.constprop.0+0x46>
 800eeba:	230a      	movs	r3, #10
 800eebc:	e7ab      	b.n	800ee16 <_strtol_l.constprop.0+0x56>
 800eebe:	bf00      	nop
 800eec0:	08010249 	.word	0x08010249

0800eec4 <_strtol_r>:
 800eec4:	f7ff bf7c 	b.w	800edc0 <_strtol_l.constprop.0>

0800eec8 <__ssputs_r>:
 800eec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eecc:	688e      	ldr	r6, [r1, #8]
 800eece:	461f      	mov	r7, r3
 800eed0:	42be      	cmp	r6, r7
 800eed2:	680b      	ldr	r3, [r1, #0]
 800eed4:	4682      	mov	sl, r0
 800eed6:	460c      	mov	r4, r1
 800eed8:	4690      	mov	r8, r2
 800eeda:	d82c      	bhi.n	800ef36 <__ssputs_r+0x6e>
 800eedc:	898a      	ldrh	r2, [r1, #12]
 800eede:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eee2:	d026      	beq.n	800ef32 <__ssputs_r+0x6a>
 800eee4:	6965      	ldr	r5, [r4, #20]
 800eee6:	6909      	ldr	r1, [r1, #16]
 800eee8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eeec:	eba3 0901 	sub.w	r9, r3, r1
 800eef0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eef4:	1c7b      	adds	r3, r7, #1
 800eef6:	444b      	add	r3, r9
 800eef8:	106d      	asrs	r5, r5, #1
 800eefa:	429d      	cmp	r5, r3
 800eefc:	bf38      	it	cc
 800eefe:	461d      	movcc	r5, r3
 800ef00:	0553      	lsls	r3, r2, #21
 800ef02:	d527      	bpl.n	800ef54 <__ssputs_r+0x8c>
 800ef04:	4629      	mov	r1, r5
 800ef06:	f7fe fc53 	bl	800d7b0 <_malloc_r>
 800ef0a:	4606      	mov	r6, r0
 800ef0c:	b360      	cbz	r0, 800ef68 <__ssputs_r+0xa0>
 800ef0e:	6921      	ldr	r1, [r4, #16]
 800ef10:	464a      	mov	r2, r9
 800ef12:	f000 fa9f 	bl	800f454 <memcpy>
 800ef16:	89a3      	ldrh	r3, [r4, #12]
 800ef18:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ef1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef20:	81a3      	strh	r3, [r4, #12]
 800ef22:	6126      	str	r6, [r4, #16]
 800ef24:	6165      	str	r5, [r4, #20]
 800ef26:	444e      	add	r6, r9
 800ef28:	eba5 0509 	sub.w	r5, r5, r9
 800ef2c:	6026      	str	r6, [r4, #0]
 800ef2e:	60a5      	str	r5, [r4, #8]
 800ef30:	463e      	mov	r6, r7
 800ef32:	42be      	cmp	r6, r7
 800ef34:	d900      	bls.n	800ef38 <__ssputs_r+0x70>
 800ef36:	463e      	mov	r6, r7
 800ef38:	6820      	ldr	r0, [r4, #0]
 800ef3a:	4632      	mov	r2, r6
 800ef3c:	4641      	mov	r1, r8
 800ef3e:	f000 fa2b 	bl	800f398 <memmove>
 800ef42:	68a3      	ldr	r3, [r4, #8]
 800ef44:	1b9b      	subs	r3, r3, r6
 800ef46:	60a3      	str	r3, [r4, #8]
 800ef48:	6823      	ldr	r3, [r4, #0]
 800ef4a:	4433      	add	r3, r6
 800ef4c:	6023      	str	r3, [r4, #0]
 800ef4e:	2000      	movs	r0, #0
 800ef50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef54:	462a      	mov	r2, r5
 800ef56:	f000 fe30 	bl	800fbba <_realloc_r>
 800ef5a:	4606      	mov	r6, r0
 800ef5c:	2800      	cmp	r0, #0
 800ef5e:	d1e0      	bne.n	800ef22 <__ssputs_r+0x5a>
 800ef60:	6921      	ldr	r1, [r4, #16]
 800ef62:	4650      	mov	r0, sl
 800ef64:	f7fe fbb0 	bl	800d6c8 <_free_r>
 800ef68:	230c      	movs	r3, #12
 800ef6a:	f8ca 3000 	str.w	r3, [sl]
 800ef6e:	89a3      	ldrh	r3, [r4, #12]
 800ef70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef74:	81a3      	strh	r3, [r4, #12]
 800ef76:	f04f 30ff 	mov.w	r0, #4294967295
 800ef7a:	e7e9      	b.n	800ef50 <__ssputs_r+0x88>

0800ef7c <_svfiprintf_r>:
 800ef7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef80:	4698      	mov	r8, r3
 800ef82:	898b      	ldrh	r3, [r1, #12]
 800ef84:	061b      	lsls	r3, r3, #24
 800ef86:	b09d      	sub	sp, #116	; 0x74
 800ef88:	4607      	mov	r7, r0
 800ef8a:	460d      	mov	r5, r1
 800ef8c:	4614      	mov	r4, r2
 800ef8e:	d50e      	bpl.n	800efae <_svfiprintf_r+0x32>
 800ef90:	690b      	ldr	r3, [r1, #16]
 800ef92:	b963      	cbnz	r3, 800efae <_svfiprintf_r+0x32>
 800ef94:	2140      	movs	r1, #64	; 0x40
 800ef96:	f7fe fc0b 	bl	800d7b0 <_malloc_r>
 800ef9a:	6028      	str	r0, [r5, #0]
 800ef9c:	6128      	str	r0, [r5, #16]
 800ef9e:	b920      	cbnz	r0, 800efaa <_svfiprintf_r+0x2e>
 800efa0:	230c      	movs	r3, #12
 800efa2:	603b      	str	r3, [r7, #0]
 800efa4:	f04f 30ff 	mov.w	r0, #4294967295
 800efa8:	e0d0      	b.n	800f14c <_svfiprintf_r+0x1d0>
 800efaa:	2340      	movs	r3, #64	; 0x40
 800efac:	616b      	str	r3, [r5, #20]
 800efae:	2300      	movs	r3, #0
 800efb0:	9309      	str	r3, [sp, #36]	; 0x24
 800efb2:	2320      	movs	r3, #32
 800efb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800efb8:	f8cd 800c 	str.w	r8, [sp, #12]
 800efbc:	2330      	movs	r3, #48	; 0x30
 800efbe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f164 <_svfiprintf_r+0x1e8>
 800efc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800efc6:	f04f 0901 	mov.w	r9, #1
 800efca:	4623      	mov	r3, r4
 800efcc:	469a      	mov	sl, r3
 800efce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800efd2:	b10a      	cbz	r2, 800efd8 <_svfiprintf_r+0x5c>
 800efd4:	2a25      	cmp	r2, #37	; 0x25
 800efd6:	d1f9      	bne.n	800efcc <_svfiprintf_r+0x50>
 800efd8:	ebba 0b04 	subs.w	fp, sl, r4
 800efdc:	d00b      	beq.n	800eff6 <_svfiprintf_r+0x7a>
 800efde:	465b      	mov	r3, fp
 800efe0:	4622      	mov	r2, r4
 800efe2:	4629      	mov	r1, r5
 800efe4:	4638      	mov	r0, r7
 800efe6:	f7ff ff6f 	bl	800eec8 <__ssputs_r>
 800efea:	3001      	adds	r0, #1
 800efec:	f000 80a9 	beq.w	800f142 <_svfiprintf_r+0x1c6>
 800eff0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eff2:	445a      	add	r2, fp
 800eff4:	9209      	str	r2, [sp, #36]	; 0x24
 800eff6:	f89a 3000 	ldrb.w	r3, [sl]
 800effa:	2b00      	cmp	r3, #0
 800effc:	f000 80a1 	beq.w	800f142 <_svfiprintf_r+0x1c6>
 800f000:	2300      	movs	r3, #0
 800f002:	f04f 32ff 	mov.w	r2, #4294967295
 800f006:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f00a:	f10a 0a01 	add.w	sl, sl, #1
 800f00e:	9304      	str	r3, [sp, #16]
 800f010:	9307      	str	r3, [sp, #28]
 800f012:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f016:	931a      	str	r3, [sp, #104]	; 0x68
 800f018:	4654      	mov	r4, sl
 800f01a:	2205      	movs	r2, #5
 800f01c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f020:	4850      	ldr	r0, [pc, #320]	; (800f164 <_svfiprintf_r+0x1e8>)
 800f022:	f7f1 f95d 	bl	80002e0 <memchr>
 800f026:	9a04      	ldr	r2, [sp, #16]
 800f028:	b9d8      	cbnz	r0, 800f062 <_svfiprintf_r+0xe6>
 800f02a:	06d0      	lsls	r0, r2, #27
 800f02c:	bf44      	itt	mi
 800f02e:	2320      	movmi	r3, #32
 800f030:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f034:	0711      	lsls	r1, r2, #28
 800f036:	bf44      	itt	mi
 800f038:	232b      	movmi	r3, #43	; 0x2b
 800f03a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f03e:	f89a 3000 	ldrb.w	r3, [sl]
 800f042:	2b2a      	cmp	r3, #42	; 0x2a
 800f044:	d015      	beq.n	800f072 <_svfiprintf_r+0xf6>
 800f046:	9a07      	ldr	r2, [sp, #28]
 800f048:	4654      	mov	r4, sl
 800f04a:	2000      	movs	r0, #0
 800f04c:	f04f 0c0a 	mov.w	ip, #10
 800f050:	4621      	mov	r1, r4
 800f052:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f056:	3b30      	subs	r3, #48	; 0x30
 800f058:	2b09      	cmp	r3, #9
 800f05a:	d94d      	bls.n	800f0f8 <_svfiprintf_r+0x17c>
 800f05c:	b1b0      	cbz	r0, 800f08c <_svfiprintf_r+0x110>
 800f05e:	9207      	str	r2, [sp, #28]
 800f060:	e014      	b.n	800f08c <_svfiprintf_r+0x110>
 800f062:	eba0 0308 	sub.w	r3, r0, r8
 800f066:	fa09 f303 	lsl.w	r3, r9, r3
 800f06a:	4313      	orrs	r3, r2
 800f06c:	9304      	str	r3, [sp, #16]
 800f06e:	46a2      	mov	sl, r4
 800f070:	e7d2      	b.n	800f018 <_svfiprintf_r+0x9c>
 800f072:	9b03      	ldr	r3, [sp, #12]
 800f074:	1d19      	adds	r1, r3, #4
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	9103      	str	r1, [sp, #12]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	bfbb      	ittet	lt
 800f07e:	425b      	neglt	r3, r3
 800f080:	f042 0202 	orrlt.w	r2, r2, #2
 800f084:	9307      	strge	r3, [sp, #28]
 800f086:	9307      	strlt	r3, [sp, #28]
 800f088:	bfb8      	it	lt
 800f08a:	9204      	strlt	r2, [sp, #16]
 800f08c:	7823      	ldrb	r3, [r4, #0]
 800f08e:	2b2e      	cmp	r3, #46	; 0x2e
 800f090:	d10c      	bne.n	800f0ac <_svfiprintf_r+0x130>
 800f092:	7863      	ldrb	r3, [r4, #1]
 800f094:	2b2a      	cmp	r3, #42	; 0x2a
 800f096:	d134      	bne.n	800f102 <_svfiprintf_r+0x186>
 800f098:	9b03      	ldr	r3, [sp, #12]
 800f09a:	1d1a      	adds	r2, r3, #4
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	9203      	str	r2, [sp, #12]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	bfb8      	it	lt
 800f0a4:	f04f 33ff 	movlt.w	r3, #4294967295
 800f0a8:	3402      	adds	r4, #2
 800f0aa:	9305      	str	r3, [sp, #20]
 800f0ac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f174 <_svfiprintf_r+0x1f8>
 800f0b0:	7821      	ldrb	r1, [r4, #0]
 800f0b2:	2203      	movs	r2, #3
 800f0b4:	4650      	mov	r0, sl
 800f0b6:	f7f1 f913 	bl	80002e0 <memchr>
 800f0ba:	b138      	cbz	r0, 800f0cc <_svfiprintf_r+0x150>
 800f0bc:	9b04      	ldr	r3, [sp, #16]
 800f0be:	eba0 000a 	sub.w	r0, r0, sl
 800f0c2:	2240      	movs	r2, #64	; 0x40
 800f0c4:	4082      	lsls	r2, r0
 800f0c6:	4313      	orrs	r3, r2
 800f0c8:	3401      	adds	r4, #1
 800f0ca:	9304      	str	r3, [sp, #16]
 800f0cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0d0:	4825      	ldr	r0, [pc, #148]	; (800f168 <_svfiprintf_r+0x1ec>)
 800f0d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f0d6:	2206      	movs	r2, #6
 800f0d8:	f7f1 f902 	bl	80002e0 <memchr>
 800f0dc:	2800      	cmp	r0, #0
 800f0de:	d038      	beq.n	800f152 <_svfiprintf_r+0x1d6>
 800f0e0:	4b22      	ldr	r3, [pc, #136]	; (800f16c <_svfiprintf_r+0x1f0>)
 800f0e2:	bb1b      	cbnz	r3, 800f12c <_svfiprintf_r+0x1b0>
 800f0e4:	9b03      	ldr	r3, [sp, #12]
 800f0e6:	3307      	adds	r3, #7
 800f0e8:	f023 0307 	bic.w	r3, r3, #7
 800f0ec:	3308      	adds	r3, #8
 800f0ee:	9303      	str	r3, [sp, #12]
 800f0f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0f2:	4433      	add	r3, r6
 800f0f4:	9309      	str	r3, [sp, #36]	; 0x24
 800f0f6:	e768      	b.n	800efca <_svfiprintf_r+0x4e>
 800f0f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800f0fc:	460c      	mov	r4, r1
 800f0fe:	2001      	movs	r0, #1
 800f100:	e7a6      	b.n	800f050 <_svfiprintf_r+0xd4>
 800f102:	2300      	movs	r3, #0
 800f104:	3401      	adds	r4, #1
 800f106:	9305      	str	r3, [sp, #20]
 800f108:	4619      	mov	r1, r3
 800f10a:	f04f 0c0a 	mov.w	ip, #10
 800f10e:	4620      	mov	r0, r4
 800f110:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f114:	3a30      	subs	r2, #48	; 0x30
 800f116:	2a09      	cmp	r2, #9
 800f118:	d903      	bls.n	800f122 <_svfiprintf_r+0x1a6>
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d0c6      	beq.n	800f0ac <_svfiprintf_r+0x130>
 800f11e:	9105      	str	r1, [sp, #20]
 800f120:	e7c4      	b.n	800f0ac <_svfiprintf_r+0x130>
 800f122:	fb0c 2101 	mla	r1, ip, r1, r2
 800f126:	4604      	mov	r4, r0
 800f128:	2301      	movs	r3, #1
 800f12a:	e7f0      	b.n	800f10e <_svfiprintf_r+0x192>
 800f12c:	ab03      	add	r3, sp, #12
 800f12e:	9300      	str	r3, [sp, #0]
 800f130:	462a      	mov	r2, r5
 800f132:	4b0f      	ldr	r3, [pc, #60]	; (800f170 <_svfiprintf_r+0x1f4>)
 800f134:	a904      	add	r1, sp, #16
 800f136:	4638      	mov	r0, r7
 800f138:	f7fc fcf6 	bl	800bb28 <_printf_float>
 800f13c:	1c42      	adds	r2, r0, #1
 800f13e:	4606      	mov	r6, r0
 800f140:	d1d6      	bne.n	800f0f0 <_svfiprintf_r+0x174>
 800f142:	89ab      	ldrh	r3, [r5, #12]
 800f144:	065b      	lsls	r3, r3, #25
 800f146:	f53f af2d 	bmi.w	800efa4 <_svfiprintf_r+0x28>
 800f14a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f14c:	b01d      	add	sp, #116	; 0x74
 800f14e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f152:	ab03      	add	r3, sp, #12
 800f154:	9300      	str	r3, [sp, #0]
 800f156:	462a      	mov	r2, r5
 800f158:	4b05      	ldr	r3, [pc, #20]	; (800f170 <_svfiprintf_r+0x1f4>)
 800f15a:	a904      	add	r1, sp, #16
 800f15c:	4638      	mov	r0, r7
 800f15e:	f7fc ff6b 	bl	800c038 <_printf_i>
 800f162:	e7eb      	b.n	800f13c <_svfiprintf_r+0x1c0>
 800f164:	08010349 	.word	0x08010349
 800f168:	08010353 	.word	0x08010353
 800f16c:	0800bb29 	.word	0x0800bb29
 800f170:	0800eec9 	.word	0x0800eec9
 800f174:	0801034f 	.word	0x0801034f

0800f178 <__sflush_r>:
 800f178:	898a      	ldrh	r2, [r1, #12]
 800f17a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f17e:	4605      	mov	r5, r0
 800f180:	0710      	lsls	r0, r2, #28
 800f182:	460c      	mov	r4, r1
 800f184:	d458      	bmi.n	800f238 <__sflush_r+0xc0>
 800f186:	684b      	ldr	r3, [r1, #4]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	dc05      	bgt.n	800f198 <__sflush_r+0x20>
 800f18c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f18e:	2b00      	cmp	r3, #0
 800f190:	dc02      	bgt.n	800f198 <__sflush_r+0x20>
 800f192:	2000      	movs	r0, #0
 800f194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f198:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f19a:	2e00      	cmp	r6, #0
 800f19c:	d0f9      	beq.n	800f192 <__sflush_r+0x1a>
 800f19e:	2300      	movs	r3, #0
 800f1a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f1a4:	682f      	ldr	r7, [r5, #0]
 800f1a6:	6a21      	ldr	r1, [r4, #32]
 800f1a8:	602b      	str	r3, [r5, #0]
 800f1aa:	d032      	beq.n	800f212 <__sflush_r+0x9a>
 800f1ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f1ae:	89a3      	ldrh	r3, [r4, #12]
 800f1b0:	075a      	lsls	r2, r3, #29
 800f1b2:	d505      	bpl.n	800f1c0 <__sflush_r+0x48>
 800f1b4:	6863      	ldr	r3, [r4, #4]
 800f1b6:	1ac0      	subs	r0, r0, r3
 800f1b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f1ba:	b10b      	cbz	r3, 800f1c0 <__sflush_r+0x48>
 800f1bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f1be:	1ac0      	subs	r0, r0, r3
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	4602      	mov	r2, r0
 800f1c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f1c6:	6a21      	ldr	r1, [r4, #32]
 800f1c8:	4628      	mov	r0, r5
 800f1ca:	47b0      	blx	r6
 800f1cc:	1c43      	adds	r3, r0, #1
 800f1ce:	89a3      	ldrh	r3, [r4, #12]
 800f1d0:	d106      	bne.n	800f1e0 <__sflush_r+0x68>
 800f1d2:	6829      	ldr	r1, [r5, #0]
 800f1d4:	291d      	cmp	r1, #29
 800f1d6:	d82b      	bhi.n	800f230 <__sflush_r+0xb8>
 800f1d8:	4a29      	ldr	r2, [pc, #164]	; (800f280 <__sflush_r+0x108>)
 800f1da:	410a      	asrs	r2, r1
 800f1dc:	07d6      	lsls	r6, r2, #31
 800f1de:	d427      	bmi.n	800f230 <__sflush_r+0xb8>
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	6062      	str	r2, [r4, #4]
 800f1e4:	04d9      	lsls	r1, r3, #19
 800f1e6:	6922      	ldr	r2, [r4, #16]
 800f1e8:	6022      	str	r2, [r4, #0]
 800f1ea:	d504      	bpl.n	800f1f6 <__sflush_r+0x7e>
 800f1ec:	1c42      	adds	r2, r0, #1
 800f1ee:	d101      	bne.n	800f1f4 <__sflush_r+0x7c>
 800f1f0:	682b      	ldr	r3, [r5, #0]
 800f1f2:	b903      	cbnz	r3, 800f1f6 <__sflush_r+0x7e>
 800f1f4:	6560      	str	r0, [r4, #84]	; 0x54
 800f1f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f1f8:	602f      	str	r7, [r5, #0]
 800f1fa:	2900      	cmp	r1, #0
 800f1fc:	d0c9      	beq.n	800f192 <__sflush_r+0x1a>
 800f1fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f202:	4299      	cmp	r1, r3
 800f204:	d002      	beq.n	800f20c <__sflush_r+0x94>
 800f206:	4628      	mov	r0, r5
 800f208:	f7fe fa5e 	bl	800d6c8 <_free_r>
 800f20c:	2000      	movs	r0, #0
 800f20e:	6360      	str	r0, [r4, #52]	; 0x34
 800f210:	e7c0      	b.n	800f194 <__sflush_r+0x1c>
 800f212:	2301      	movs	r3, #1
 800f214:	4628      	mov	r0, r5
 800f216:	47b0      	blx	r6
 800f218:	1c41      	adds	r1, r0, #1
 800f21a:	d1c8      	bne.n	800f1ae <__sflush_r+0x36>
 800f21c:	682b      	ldr	r3, [r5, #0]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d0c5      	beq.n	800f1ae <__sflush_r+0x36>
 800f222:	2b1d      	cmp	r3, #29
 800f224:	d001      	beq.n	800f22a <__sflush_r+0xb2>
 800f226:	2b16      	cmp	r3, #22
 800f228:	d101      	bne.n	800f22e <__sflush_r+0xb6>
 800f22a:	602f      	str	r7, [r5, #0]
 800f22c:	e7b1      	b.n	800f192 <__sflush_r+0x1a>
 800f22e:	89a3      	ldrh	r3, [r4, #12]
 800f230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f234:	81a3      	strh	r3, [r4, #12]
 800f236:	e7ad      	b.n	800f194 <__sflush_r+0x1c>
 800f238:	690f      	ldr	r7, [r1, #16]
 800f23a:	2f00      	cmp	r7, #0
 800f23c:	d0a9      	beq.n	800f192 <__sflush_r+0x1a>
 800f23e:	0793      	lsls	r3, r2, #30
 800f240:	680e      	ldr	r6, [r1, #0]
 800f242:	bf08      	it	eq
 800f244:	694b      	ldreq	r3, [r1, #20]
 800f246:	600f      	str	r7, [r1, #0]
 800f248:	bf18      	it	ne
 800f24a:	2300      	movne	r3, #0
 800f24c:	eba6 0807 	sub.w	r8, r6, r7
 800f250:	608b      	str	r3, [r1, #8]
 800f252:	f1b8 0f00 	cmp.w	r8, #0
 800f256:	dd9c      	ble.n	800f192 <__sflush_r+0x1a>
 800f258:	6a21      	ldr	r1, [r4, #32]
 800f25a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f25c:	4643      	mov	r3, r8
 800f25e:	463a      	mov	r2, r7
 800f260:	4628      	mov	r0, r5
 800f262:	47b0      	blx	r6
 800f264:	2800      	cmp	r0, #0
 800f266:	dc06      	bgt.n	800f276 <__sflush_r+0xfe>
 800f268:	89a3      	ldrh	r3, [r4, #12]
 800f26a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f26e:	81a3      	strh	r3, [r4, #12]
 800f270:	f04f 30ff 	mov.w	r0, #4294967295
 800f274:	e78e      	b.n	800f194 <__sflush_r+0x1c>
 800f276:	4407      	add	r7, r0
 800f278:	eba8 0800 	sub.w	r8, r8, r0
 800f27c:	e7e9      	b.n	800f252 <__sflush_r+0xda>
 800f27e:	bf00      	nop
 800f280:	dfbffffe 	.word	0xdfbffffe

0800f284 <_fflush_r>:
 800f284:	b538      	push	{r3, r4, r5, lr}
 800f286:	690b      	ldr	r3, [r1, #16]
 800f288:	4605      	mov	r5, r0
 800f28a:	460c      	mov	r4, r1
 800f28c:	b913      	cbnz	r3, 800f294 <_fflush_r+0x10>
 800f28e:	2500      	movs	r5, #0
 800f290:	4628      	mov	r0, r5
 800f292:	bd38      	pop	{r3, r4, r5, pc}
 800f294:	b118      	cbz	r0, 800f29e <_fflush_r+0x1a>
 800f296:	6a03      	ldr	r3, [r0, #32]
 800f298:	b90b      	cbnz	r3, 800f29e <_fflush_r+0x1a>
 800f29a:	f7fd fa6d 	bl	800c778 <__sinit>
 800f29e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d0f3      	beq.n	800f28e <_fflush_r+0xa>
 800f2a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f2a8:	07d0      	lsls	r0, r2, #31
 800f2aa:	d404      	bmi.n	800f2b6 <_fflush_r+0x32>
 800f2ac:	0599      	lsls	r1, r3, #22
 800f2ae:	d402      	bmi.n	800f2b6 <_fflush_r+0x32>
 800f2b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f2b2:	f7fd fc0b 	bl	800cacc <__retarget_lock_acquire_recursive>
 800f2b6:	4628      	mov	r0, r5
 800f2b8:	4621      	mov	r1, r4
 800f2ba:	f7ff ff5d 	bl	800f178 <__sflush_r>
 800f2be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f2c0:	07da      	lsls	r2, r3, #31
 800f2c2:	4605      	mov	r5, r0
 800f2c4:	d4e4      	bmi.n	800f290 <_fflush_r+0xc>
 800f2c6:	89a3      	ldrh	r3, [r4, #12]
 800f2c8:	059b      	lsls	r3, r3, #22
 800f2ca:	d4e1      	bmi.n	800f290 <_fflush_r+0xc>
 800f2cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f2ce:	f7fd fbfe 	bl	800cace <__retarget_lock_release_recursive>
 800f2d2:	e7dd      	b.n	800f290 <_fflush_r+0xc>

0800f2d4 <__swhatbuf_r>:
 800f2d4:	b570      	push	{r4, r5, r6, lr}
 800f2d6:	460c      	mov	r4, r1
 800f2d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2dc:	2900      	cmp	r1, #0
 800f2de:	b096      	sub	sp, #88	; 0x58
 800f2e0:	4615      	mov	r5, r2
 800f2e2:	461e      	mov	r6, r3
 800f2e4:	da0d      	bge.n	800f302 <__swhatbuf_r+0x2e>
 800f2e6:	89a3      	ldrh	r3, [r4, #12]
 800f2e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f2ec:	f04f 0100 	mov.w	r1, #0
 800f2f0:	bf0c      	ite	eq
 800f2f2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f2f6:	2340      	movne	r3, #64	; 0x40
 800f2f8:	2000      	movs	r0, #0
 800f2fa:	6031      	str	r1, [r6, #0]
 800f2fc:	602b      	str	r3, [r5, #0]
 800f2fe:	b016      	add	sp, #88	; 0x58
 800f300:	bd70      	pop	{r4, r5, r6, pc}
 800f302:	466a      	mov	r2, sp
 800f304:	f000 f874 	bl	800f3f0 <_fstat_r>
 800f308:	2800      	cmp	r0, #0
 800f30a:	dbec      	blt.n	800f2e6 <__swhatbuf_r+0x12>
 800f30c:	9901      	ldr	r1, [sp, #4]
 800f30e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f312:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f316:	4259      	negs	r1, r3
 800f318:	4159      	adcs	r1, r3
 800f31a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f31e:	e7eb      	b.n	800f2f8 <__swhatbuf_r+0x24>

0800f320 <__smakebuf_r>:
 800f320:	898b      	ldrh	r3, [r1, #12]
 800f322:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f324:	079d      	lsls	r5, r3, #30
 800f326:	4606      	mov	r6, r0
 800f328:	460c      	mov	r4, r1
 800f32a:	d507      	bpl.n	800f33c <__smakebuf_r+0x1c>
 800f32c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f330:	6023      	str	r3, [r4, #0]
 800f332:	6123      	str	r3, [r4, #16]
 800f334:	2301      	movs	r3, #1
 800f336:	6163      	str	r3, [r4, #20]
 800f338:	b002      	add	sp, #8
 800f33a:	bd70      	pop	{r4, r5, r6, pc}
 800f33c:	ab01      	add	r3, sp, #4
 800f33e:	466a      	mov	r2, sp
 800f340:	f7ff ffc8 	bl	800f2d4 <__swhatbuf_r>
 800f344:	9900      	ldr	r1, [sp, #0]
 800f346:	4605      	mov	r5, r0
 800f348:	4630      	mov	r0, r6
 800f34a:	f7fe fa31 	bl	800d7b0 <_malloc_r>
 800f34e:	b948      	cbnz	r0, 800f364 <__smakebuf_r+0x44>
 800f350:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f354:	059a      	lsls	r2, r3, #22
 800f356:	d4ef      	bmi.n	800f338 <__smakebuf_r+0x18>
 800f358:	f023 0303 	bic.w	r3, r3, #3
 800f35c:	f043 0302 	orr.w	r3, r3, #2
 800f360:	81a3      	strh	r3, [r4, #12]
 800f362:	e7e3      	b.n	800f32c <__smakebuf_r+0xc>
 800f364:	89a3      	ldrh	r3, [r4, #12]
 800f366:	6020      	str	r0, [r4, #0]
 800f368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f36c:	81a3      	strh	r3, [r4, #12]
 800f36e:	9b00      	ldr	r3, [sp, #0]
 800f370:	6163      	str	r3, [r4, #20]
 800f372:	9b01      	ldr	r3, [sp, #4]
 800f374:	6120      	str	r0, [r4, #16]
 800f376:	b15b      	cbz	r3, 800f390 <__smakebuf_r+0x70>
 800f378:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f37c:	4630      	mov	r0, r6
 800f37e:	f000 f849 	bl	800f414 <_isatty_r>
 800f382:	b128      	cbz	r0, 800f390 <__smakebuf_r+0x70>
 800f384:	89a3      	ldrh	r3, [r4, #12]
 800f386:	f023 0303 	bic.w	r3, r3, #3
 800f38a:	f043 0301 	orr.w	r3, r3, #1
 800f38e:	81a3      	strh	r3, [r4, #12]
 800f390:	89a3      	ldrh	r3, [r4, #12]
 800f392:	431d      	orrs	r5, r3
 800f394:	81a5      	strh	r5, [r4, #12]
 800f396:	e7cf      	b.n	800f338 <__smakebuf_r+0x18>

0800f398 <memmove>:
 800f398:	4288      	cmp	r0, r1
 800f39a:	b510      	push	{r4, lr}
 800f39c:	eb01 0402 	add.w	r4, r1, r2
 800f3a0:	d902      	bls.n	800f3a8 <memmove+0x10>
 800f3a2:	4284      	cmp	r4, r0
 800f3a4:	4623      	mov	r3, r4
 800f3a6:	d807      	bhi.n	800f3b8 <memmove+0x20>
 800f3a8:	1e43      	subs	r3, r0, #1
 800f3aa:	42a1      	cmp	r1, r4
 800f3ac:	d008      	beq.n	800f3c0 <memmove+0x28>
 800f3ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f3b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f3b6:	e7f8      	b.n	800f3aa <memmove+0x12>
 800f3b8:	4402      	add	r2, r0
 800f3ba:	4601      	mov	r1, r0
 800f3bc:	428a      	cmp	r2, r1
 800f3be:	d100      	bne.n	800f3c2 <memmove+0x2a>
 800f3c0:	bd10      	pop	{r4, pc}
 800f3c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f3c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f3ca:	e7f7      	b.n	800f3bc <memmove+0x24>

0800f3cc <strncmp>:
 800f3cc:	b510      	push	{r4, lr}
 800f3ce:	b16a      	cbz	r2, 800f3ec <strncmp+0x20>
 800f3d0:	3901      	subs	r1, #1
 800f3d2:	1884      	adds	r4, r0, r2
 800f3d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f3d8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f3dc:	429a      	cmp	r2, r3
 800f3de:	d103      	bne.n	800f3e8 <strncmp+0x1c>
 800f3e0:	42a0      	cmp	r0, r4
 800f3e2:	d001      	beq.n	800f3e8 <strncmp+0x1c>
 800f3e4:	2a00      	cmp	r2, #0
 800f3e6:	d1f5      	bne.n	800f3d4 <strncmp+0x8>
 800f3e8:	1ad0      	subs	r0, r2, r3
 800f3ea:	bd10      	pop	{r4, pc}
 800f3ec:	4610      	mov	r0, r2
 800f3ee:	e7fc      	b.n	800f3ea <strncmp+0x1e>

0800f3f0 <_fstat_r>:
 800f3f0:	b538      	push	{r3, r4, r5, lr}
 800f3f2:	4d07      	ldr	r5, [pc, #28]	; (800f410 <_fstat_r+0x20>)
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	4604      	mov	r4, r0
 800f3f8:	4608      	mov	r0, r1
 800f3fa:	4611      	mov	r1, r2
 800f3fc:	602b      	str	r3, [r5, #0]
 800f3fe:	f7f2 fb70 	bl	8001ae2 <_fstat>
 800f402:	1c43      	adds	r3, r0, #1
 800f404:	d102      	bne.n	800f40c <_fstat_r+0x1c>
 800f406:	682b      	ldr	r3, [r5, #0]
 800f408:	b103      	cbz	r3, 800f40c <_fstat_r+0x1c>
 800f40a:	6023      	str	r3, [r4, #0]
 800f40c:	bd38      	pop	{r3, r4, r5, pc}
 800f40e:	bf00      	nop
 800f410:	240006a0 	.word	0x240006a0

0800f414 <_isatty_r>:
 800f414:	b538      	push	{r3, r4, r5, lr}
 800f416:	4d06      	ldr	r5, [pc, #24]	; (800f430 <_isatty_r+0x1c>)
 800f418:	2300      	movs	r3, #0
 800f41a:	4604      	mov	r4, r0
 800f41c:	4608      	mov	r0, r1
 800f41e:	602b      	str	r3, [r5, #0]
 800f420:	f7f2 fb6f 	bl	8001b02 <_isatty>
 800f424:	1c43      	adds	r3, r0, #1
 800f426:	d102      	bne.n	800f42e <_isatty_r+0x1a>
 800f428:	682b      	ldr	r3, [r5, #0]
 800f42a:	b103      	cbz	r3, 800f42e <_isatty_r+0x1a>
 800f42c:	6023      	str	r3, [r4, #0]
 800f42e:	bd38      	pop	{r3, r4, r5, pc}
 800f430:	240006a0 	.word	0x240006a0

0800f434 <_sbrk_r>:
 800f434:	b538      	push	{r3, r4, r5, lr}
 800f436:	4d06      	ldr	r5, [pc, #24]	; (800f450 <_sbrk_r+0x1c>)
 800f438:	2300      	movs	r3, #0
 800f43a:	4604      	mov	r4, r0
 800f43c:	4608      	mov	r0, r1
 800f43e:	602b      	str	r3, [r5, #0]
 800f440:	f7f2 fb78 	bl	8001b34 <_sbrk>
 800f444:	1c43      	adds	r3, r0, #1
 800f446:	d102      	bne.n	800f44e <_sbrk_r+0x1a>
 800f448:	682b      	ldr	r3, [r5, #0]
 800f44a:	b103      	cbz	r3, 800f44e <_sbrk_r+0x1a>
 800f44c:	6023      	str	r3, [r4, #0]
 800f44e:	bd38      	pop	{r3, r4, r5, pc}
 800f450:	240006a0 	.word	0x240006a0

0800f454 <memcpy>:
 800f454:	440a      	add	r2, r1
 800f456:	4291      	cmp	r1, r2
 800f458:	f100 33ff 	add.w	r3, r0, #4294967295
 800f45c:	d100      	bne.n	800f460 <memcpy+0xc>
 800f45e:	4770      	bx	lr
 800f460:	b510      	push	{r4, lr}
 800f462:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f466:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f46a:	4291      	cmp	r1, r2
 800f46c:	d1f9      	bne.n	800f462 <memcpy+0xe>
 800f46e:	bd10      	pop	{r4, pc}

0800f470 <nan>:
 800f470:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f478 <nan+0x8>
 800f474:	4770      	bx	lr
 800f476:	bf00      	nop
 800f478:	00000000 	.word	0x00000000
 800f47c:	7ff80000 	.word	0x7ff80000

0800f480 <__assert_func>:
 800f480:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f482:	4614      	mov	r4, r2
 800f484:	461a      	mov	r2, r3
 800f486:	4b09      	ldr	r3, [pc, #36]	; (800f4ac <__assert_func+0x2c>)
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	4605      	mov	r5, r0
 800f48c:	68d8      	ldr	r0, [r3, #12]
 800f48e:	b14c      	cbz	r4, 800f4a4 <__assert_func+0x24>
 800f490:	4b07      	ldr	r3, [pc, #28]	; (800f4b0 <__assert_func+0x30>)
 800f492:	9100      	str	r1, [sp, #0]
 800f494:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f498:	4906      	ldr	r1, [pc, #24]	; (800f4b4 <__assert_func+0x34>)
 800f49a:	462b      	mov	r3, r5
 800f49c:	f000 fbca 	bl	800fc34 <fiprintf>
 800f4a0:	f000 fbda 	bl	800fc58 <abort>
 800f4a4:	4b04      	ldr	r3, [pc, #16]	; (800f4b8 <__assert_func+0x38>)
 800f4a6:	461c      	mov	r4, r3
 800f4a8:	e7f3      	b.n	800f492 <__assert_func+0x12>
 800f4aa:	bf00      	nop
 800f4ac:	2400006c 	.word	0x2400006c
 800f4b0:	08010362 	.word	0x08010362
 800f4b4:	0801036f 	.word	0x0801036f
 800f4b8:	0801039d 	.word	0x0801039d

0800f4bc <_calloc_r>:
 800f4bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f4be:	fba1 2402 	umull	r2, r4, r1, r2
 800f4c2:	b94c      	cbnz	r4, 800f4d8 <_calloc_r+0x1c>
 800f4c4:	4611      	mov	r1, r2
 800f4c6:	9201      	str	r2, [sp, #4]
 800f4c8:	f7fe f972 	bl	800d7b0 <_malloc_r>
 800f4cc:	9a01      	ldr	r2, [sp, #4]
 800f4ce:	4605      	mov	r5, r0
 800f4d0:	b930      	cbnz	r0, 800f4e0 <_calloc_r+0x24>
 800f4d2:	4628      	mov	r0, r5
 800f4d4:	b003      	add	sp, #12
 800f4d6:	bd30      	pop	{r4, r5, pc}
 800f4d8:	220c      	movs	r2, #12
 800f4da:	6002      	str	r2, [r0, #0]
 800f4dc:	2500      	movs	r5, #0
 800f4de:	e7f8      	b.n	800f4d2 <_calloc_r+0x16>
 800f4e0:	4621      	mov	r1, r4
 800f4e2:	f7fd fa77 	bl	800c9d4 <memset>
 800f4e6:	e7f4      	b.n	800f4d2 <_calloc_r+0x16>

0800f4e8 <rshift>:
 800f4e8:	6903      	ldr	r3, [r0, #16]
 800f4ea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f4ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f4f2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f4f6:	f100 0414 	add.w	r4, r0, #20
 800f4fa:	dd45      	ble.n	800f588 <rshift+0xa0>
 800f4fc:	f011 011f 	ands.w	r1, r1, #31
 800f500:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f504:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f508:	d10c      	bne.n	800f524 <rshift+0x3c>
 800f50a:	f100 0710 	add.w	r7, r0, #16
 800f50e:	4629      	mov	r1, r5
 800f510:	42b1      	cmp	r1, r6
 800f512:	d334      	bcc.n	800f57e <rshift+0x96>
 800f514:	1a9b      	subs	r3, r3, r2
 800f516:	009b      	lsls	r3, r3, #2
 800f518:	1eea      	subs	r2, r5, #3
 800f51a:	4296      	cmp	r6, r2
 800f51c:	bf38      	it	cc
 800f51e:	2300      	movcc	r3, #0
 800f520:	4423      	add	r3, r4
 800f522:	e015      	b.n	800f550 <rshift+0x68>
 800f524:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f528:	f1c1 0820 	rsb	r8, r1, #32
 800f52c:	40cf      	lsrs	r7, r1
 800f52e:	f105 0e04 	add.w	lr, r5, #4
 800f532:	46a1      	mov	r9, r4
 800f534:	4576      	cmp	r6, lr
 800f536:	46f4      	mov	ip, lr
 800f538:	d815      	bhi.n	800f566 <rshift+0x7e>
 800f53a:	1a9a      	subs	r2, r3, r2
 800f53c:	0092      	lsls	r2, r2, #2
 800f53e:	3a04      	subs	r2, #4
 800f540:	3501      	adds	r5, #1
 800f542:	42ae      	cmp	r6, r5
 800f544:	bf38      	it	cc
 800f546:	2200      	movcc	r2, #0
 800f548:	18a3      	adds	r3, r4, r2
 800f54a:	50a7      	str	r7, [r4, r2]
 800f54c:	b107      	cbz	r7, 800f550 <rshift+0x68>
 800f54e:	3304      	adds	r3, #4
 800f550:	1b1a      	subs	r2, r3, r4
 800f552:	42a3      	cmp	r3, r4
 800f554:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f558:	bf08      	it	eq
 800f55a:	2300      	moveq	r3, #0
 800f55c:	6102      	str	r2, [r0, #16]
 800f55e:	bf08      	it	eq
 800f560:	6143      	streq	r3, [r0, #20]
 800f562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f566:	f8dc c000 	ldr.w	ip, [ip]
 800f56a:	fa0c fc08 	lsl.w	ip, ip, r8
 800f56e:	ea4c 0707 	orr.w	r7, ip, r7
 800f572:	f849 7b04 	str.w	r7, [r9], #4
 800f576:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f57a:	40cf      	lsrs	r7, r1
 800f57c:	e7da      	b.n	800f534 <rshift+0x4c>
 800f57e:	f851 cb04 	ldr.w	ip, [r1], #4
 800f582:	f847 cf04 	str.w	ip, [r7, #4]!
 800f586:	e7c3      	b.n	800f510 <rshift+0x28>
 800f588:	4623      	mov	r3, r4
 800f58a:	e7e1      	b.n	800f550 <rshift+0x68>

0800f58c <__hexdig_fun>:
 800f58c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f590:	2b09      	cmp	r3, #9
 800f592:	d802      	bhi.n	800f59a <__hexdig_fun+0xe>
 800f594:	3820      	subs	r0, #32
 800f596:	b2c0      	uxtb	r0, r0
 800f598:	4770      	bx	lr
 800f59a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f59e:	2b05      	cmp	r3, #5
 800f5a0:	d801      	bhi.n	800f5a6 <__hexdig_fun+0x1a>
 800f5a2:	3847      	subs	r0, #71	; 0x47
 800f5a4:	e7f7      	b.n	800f596 <__hexdig_fun+0xa>
 800f5a6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f5aa:	2b05      	cmp	r3, #5
 800f5ac:	d801      	bhi.n	800f5b2 <__hexdig_fun+0x26>
 800f5ae:	3827      	subs	r0, #39	; 0x27
 800f5b0:	e7f1      	b.n	800f596 <__hexdig_fun+0xa>
 800f5b2:	2000      	movs	r0, #0
 800f5b4:	4770      	bx	lr
	...

0800f5b8 <__gethex>:
 800f5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5bc:	4617      	mov	r7, r2
 800f5be:	680a      	ldr	r2, [r1, #0]
 800f5c0:	b085      	sub	sp, #20
 800f5c2:	f102 0b02 	add.w	fp, r2, #2
 800f5c6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f5ca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f5ce:	4681      	mov	r9, r0
 800f5d0:	468a      	mov	sl, r1
 800f5d2:	9302      	str	r3, [sp, #8]
 800f5d4:	32fe      	adds	r2, #254	; 0xfe
 800f5d6:	eb02 030b 	add.w	r3, r2, fp
 800f5da:	46d8      	mov	r8, fp
 800f5dc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800f5e0:	9301      	str	r3, [sp, #4]
 800f5e2:	2830      	cmp	r0, #48	; 0x30
 800f5e4:	d0f7      	beq.n	800f5d6 <__gethex+0x1e>
 800f5e6:	f7ff ffd1 	bl	800f58c <__hexdig_fun>
 800f5ea:	4604      	mov	r4, r0
 800f5ec:	2800      	cmp	r0, #0
 800f5ee:	d138      	bne.n	800f662 <__gethex+0xaa>
 800f5f0:	49a7      	ldr	r1, [pc, #668]	; (800f890 <__gethex+0x2d8>)
 800f5f2:	2201      	movs	r2, #1
 800f5f4:	4640      	mov	r0, r8
 800f5f6:	f7ff fee9 	bl	800f3cc <strncmp>
 800f5fa:	4606      	mov	r6, r0
 800f5fc:	2800      	cmp	r0, #0
 800f5fe:	d169      	bne.n	800f6d4 <__gethex+0x11c>
 800f600:	f898 0001 	ldrb.w	r0, [r8, #1]
 800f604:	465d      	mov	r5, fp
 800f606:	f7ff ffc1 	bl	800f58c <__hexdig_fun>
 800f60a:	2800      	cmp	r0, #0
 800f60c:	d064      	beq.n	800f6d8 <__gethex+0x120>
 800f60e:	465a      	mov	r2, fp
 800f610:	7810      	ldrb	r0, [r2, #0]
 800f612:	2830      	cmp	r0, #48	; 0x30
 800f614:	4690      	mov	r8, r2
 800f616:	f102 0201 	add.w	r2, r2, #1
 800f61a:	d0f9      	beq.n	800f610 <__gethex+0x58>
 800f61c:	f7ff ffb6 	bl	800f58c <__hexdig_fun>
 800f620:	2301      	movs	r3, #1
 800f622:	fab0 f480 	clz	r4, r0
 800f626:	0964      	lsrs	r4, r4, #5
 800f628:	465e      	mov	r6, fp
 800f62a:	9301      	str	r3, [sp, #4]
 800f62c:	4642      	mov	r2, r8
 800f62e:	4615      	mov	r5, r2
 800f630:	3201      	adds	r2, #1
 800f632:	7828      	ldrb	r0, [r5, #0]
 800f634:	f7ff ffaa 	bl	800f58c <__hexdig_fun>
 800f638:	2800      	cmp	r0, #0
 800f63a:	d1f8      	bne.n	800f62e <__gethex+0x76>
 800f63c:	4994      	ldr	r1, [pc, #592]	; (800f890 <__gethex+0x2d8>)
 800f63e:	2201      	movs	r2, #1
 800f640:	4628      	mov	r0, r5
 800f642:	f7ff fec3 	bl	800f3cc <strncmp>
 800f646:	b978      	cbnz	r0, 800f668 <__gethex+0xb0>
 800f648:	b946      	cbnz	r6, 800f65c <__gethex+0xa4>
 800f64a:	1c6e      	adds	r6, r5, #1
 800f64c:	4632      	mov	r2, r6
 800f64e:	4615      	mov	r5, r2
 800f650:	3201      	adds	r2, #1
 800f652:	7828      	ldrb	r0, [r5, #0]
 800f654:	f7ff ff9a 	bl	800f58c <__hexdig_fun>
 800f658:	2800      	cmp	r0, #0
 800f65a:	d1f8      	bne.n	800f64e <__gethex+0x96>
 800f65c:	1b73      	subs	r3, r6, r5
 800f65e:	009e      	lsls	r6, r3, #2
 800f660:	e004      	b.n	800f66c <__gethex+0xb4>
 800f662:	2400      	movs	r4, #0
 800f664:	4626      	mov	r6, r4
 800f666:	e7e1      	b.n	800f62c <__gethex+0x74>
 800f668:	2e00      	cmp	r6, #0
 800f66a:	d1f7      	bne.n	800f65c <__gethex+0xa4>
 800f66c:	782b      	ldrb	r3, [r5, #0]
 800f66e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f672:	2b50      	cmp	r3, #80	; 0x50
 800f674:	d13d      	bne.n	800f6f2 <__gethex+0x13a>
 800f676:	786b      	ldrb	r3, [r5, #1]
 800f678:	2b2b      	cmp	r3, #43	; 0x2b
 800f67a:	d02f      	beq.n	800f6dc <__gethex+0x124>
 800f67c:	2b2d      	cmp	r3, #45	; 0x2d
 800f67e:	d031      	beq.n	800f6e4 <__gethex+0x12c>
 800f680:	1c69      	adds	r1, r5, #1
 800f682:	f04f 0b00 	mov.w	fp, #0
 800f686:	7808      	ldrb	r0, [r1, #0]
 800f688:	f7ff ff80 	bl	800f58c <__hexdig_fun>
 800f68c:	1e42      	subs	r2, r0, #1
 800f68e:	b2d2      	uxtb	r2, r2
 800f690:	2a18      	cmp	r2, #24
 800f692:	d82e      	bhi.n	800f6f2 <__gethex+0x13a>
 800f694:	f1a0 0210 	sub.w	r2, r0, #16
 800f698:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f69c:	f7ff ff76 	bl	800f58c <__hexdig_fun>
 800f6a0:	f100 3cff 	add.w	ip, r0, #4294967295
 800f6a4:	fa5f fc8c 	uxtb.w	ip, ip
 800f6a8:	f1bc 0f18 	cmp.w	ip, #24
 800f6ac:	d91d      	bls.n	800f6ea <__gethex+0x132>
 800f6ae:	f1bb 0f00 	cmp.w	fp, #0
 800f6b2:	d000      	beq.n	800f6b6 <__gethex+0xfe>
 800f6b4:	4252      	negs	r2, r2
 800f6b6:	4416      	add	r6, r2
 800f6b8:	f8ca 1000 	str.w	r1, [sl]
 800f6bc:	b1dc      	cbz	r4, 800f6f6 <__gethex+0x13e>
 800f6be:	9b01      	ldr	r3, [sp, #4]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	bf14      	ite	ne
 800f6c4:	f04f 0800 	movne.w	r8, #0
 800f6c8:	f04f 0806 	moveq.w	r8, #6
 800f6cc:	4640      	mov	r0, r8
 800f6ce:	b005      	add	sp, #20
 800f6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6d4:	4645      	mov	r5, r8
 800f6d6:	4626      	mov	r6, r4
 800f6d8:	2401      	movs	r4, #1
 800f6da:	e7c7      	b.n	800f66c <__gethex+0xb4>
 800f6dc:	f04f 0b00 	mov.w	fp, #0
 800f6e0:	1ca9      	adds	r1, r5, #2
 800f6e2:	e7d0      	b.n	800f686 <__gethex+0xce>
 800f6e4:	f04f 0b01 	mov.w	fp, #1
 800f6e8:	e7fa      	b.n	800f6e0 <__gethex+0x128>
 800f6ea:	230a      	movs	r3, #10
 800f6ec:	fb03 0002 	mla	r0, r3, r2, r0
 800f6f0:	e7d0      	b.n	800f694 <__gethex+0xdc>
 800f6f2:	4629      	mov	r1, r5
 800f6f4:	e7e0      	b.n	800f6b8 <__gethex+0x100>
 800f6f6:	eba5 0308 	sub.w	r3, r5, r8
 800f6fa:	3b01      	subs	r3, #1
 800f6fc:	4621      	mov	r1, r4
 800f6fe:	2b07      	cmp	r3, #7
 800f700:	dc0a      	bgt.n	800f718 <__gethex+0x160>
 800f702:	4648      	mov	r0, r9
 800f704:	f7fe f8e0 	bl	800d8c8 <_Balloc>
 800f708:	4604      	mov	r4, r0
 800f70a:	b940      	cbnz	r0, 800f71e <__gethex+0x166>
 800f70c:	4b61      	ldr	r3, [pc, #388]	; (800f894 <__gethex+0x2dc>)
 800f70e:	4602      	mov	r2, r0
 800f710:	21e4      	movs	r1, #228	; 0xe4
 800f712:	4861      	ldr	r0, [pc, #388]	; (800f898 <__gethex+0x2e0>)
 800f714:	f7ff feb4 	bl	800f480 <__assert_func>
 800f718:	3101      	adds	r1, #1
 800f71a:	105b      	asrs	r3, r3, #1
 800f71c:	e7ef      	b.n	800f6fe <__gethex+0x146>
 800f71e:	f100 0a14 	add.w	sl, r0, #20
 800f722:	2300      	movs	r3, #0
 800f724:	495a      	ldr	r1, [pc, #360]	; (800f890 <__gethex+0x2d8>)
 800f726:	f8cd a004 	str.w	sl, [sp, #4]
 800f72a:	469b      	mov	fp, r3
 800f72c:	45a8      	cmp	r8, r5
 800f72e:	d342      	bcc.n	800f7b6 <__gethex+0x1fe>
 800f730:	9801      	ldr	r0, [sp, #4]
 800f732:	f840 bb04 	str.w	fp, [r0], #4
 800f736:	eba0 000a 	sub.w	r0, r0, sl
 800f73a:	1080      	asrs	r0, r0, #2
 800f73c:	6120      	str	r0, [r4, #16]
 800f73e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800f742:	4658      	mov	r0, fp
 800f744:	f7fe f9b2 	bl	800daac <__hi0bits>
 800f748:	683d      	ldr	r5, [r7, #0]
 800f74a:	eba8 0000 	sub.w	r0, r8, r0
 800f74e:	42a8      	cmp	r0, r5
 800f750:	dd59      	ble.n	800f806 <__gethex+0x24e>
 800f752:	eba0 0805 	sub.w	r8, r0, r5
 800f756:	4641      	mov	r1, r8
 800f758:	4620      	mov	r0, r4
 800f75a:	f7fe fd3e 	bl	800e1da <__any_on>
 800f75e:	4683      	mov	fp, r0
 800f760:	b1b8      	cbz	r0, 800f792 <__gethex+0x1da>
 800f762:	f108 33ff 	add.w	r3, r8, #4294967295
 800f766:	1159      	asrs	r1, r3, #5
 800f768:	f003 021f 	and.w	r2, r3, #31
 800f76c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f770:	f04f 0b01 	mov.w	fp, #1
 800f774:	fa0b f202 	lsl.w	r2, fp, r2
 800f778:	420a      	tst	r2, r1
 800f77a:	d00a      	beq.n	800f792 <__gethex+0x1da>
 800f77c:	455b      	cmp	r3, fp
 800f77e:	dd06      	ble.n	800f78e <__gethex+0x1d6>
 800f780:	f1a8 0102 	sub.w	r1, r8, #2
 800f784:	4620      	mov	r0, r4
 800f786:	f7fe fd28 	bl	800e1da <__any_on>
 800f78a:	2800      	cmp	r0, #0
 800f78c:	d138      	bne.n	800f800 <__gethex+0x248>
 800f78e:	f04f 0b02 	mov.w	fp, #2
 800f792:	4641      	mov	r1, r8
 800f794:	4620      	mov	r0, r4
 800f796:	f7ff fea7 	bl	800f4e8 <rshift>
 800f79a:	4446      	add	r6, r8
 800f79c:	68bb      	ldr	r3, [r7, #8]
 800f79e:	42b3      	cmp	r3, r6
 800f7a0:	da41      	bge.n	800f826 <__gethex+0x26e>
 800f7a2:	4621      	mov	r1, r4
 800f7a4:	4648      	mov	r0, r9
 800f7a6:	f7fe f8cf 	bl	800d948 <_Bfree>
 800f7aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	6013      	str	r3, [r2, #0]
 800f7b0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800f7b4:	e78a      	b.n	800f6cc <__gethex+0x114>
 800f7b6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800f7ba:	2a2e      	cmp	r2, #46	; 0x2e
 800f7bc:	d014      	beq.n	800f7e8 <__gethex+0x230>
 800f7be:	2b20      	cmp	r3, #32
 800f7c0:	d106      	bne.n	800f7d0 <__gethex+0x218>
 800f7c2:	9b01      	ldr	r3, [sp, #4]
 800f7c4:	f843 bb04 	str.w	fp, [r3], #4
 800f7c8:	f04f 0b00 	mov.w	fp, #0
 800f7cc:	9301      	str	r3, [sp, #4]
 800f7ce:	465b      	mov	r3, fp
 800f7d0:	7828      	ldrb	r0, [r5, #0]
 800f7d2:	9303      	str	r3, [sp, #12]
 800f7d4:	f7ff feda 	bl	800f58c <__hexdig_fun>
 800f7d8:	9b03      	ldr	r3, [sp, #12]
 800f7da:	f000 000f 	and.w	r0, r0, #15
 800f7de:	4098      	lsls	r0, r3
 800f7e0:	ea4b 0b00 	orr.w	fp, fp, r0
 800f7e4:	3304      	adds	r3, #4
 800f7e6:	e7a1      	b.n	800f72c <__gethex+0x174>
 800f7e8:	45a8      	cmp	r8, r5
 800f7ea:	d8e8      	bhi.n	800f7be <__gethex+0x206>
 800f7ec:	2201      	movs	r2, #1
 800f7ee:	4628      	mov	r0, r5
 800f7f0:	9303      	str	r3, [sp, #12]
 800f7f2:	f7ff fdeb 	bl	800f3cc <strncmp>
 800f7f6:	4926      	ldr	r1, [pc, #152]	; (800f890 <__gethex+0x2d8>)
 800f7f8:	9b03      	ldr	r3, [sp, #12]
 800f7fa:	2800      	cmp	r0, #0
 800f7fc:	d1df      	bne.n	800f7be <__gethex+0x206>
 800f7fe:	e795      	b.n	800f72c <__gethex+0x174>
 800f800:	f04f 0b03 	mov.w	fp, #3
 800f804:	e7c5      	b.n	800f792 <__gethex+0x1da>
 800f806:	da0b      	bge.n	800f820 <__gethex+0x268>
 800f808:	eba5 0800 	sub.w	r8, r5, r0
 800f80c:	4621      	mov	r1, r4
 800f80e:	4642      	mov	r2, r8
 800f810:	4648      	mov	r0, r9
 800f812:	f7fe fab3 	bl	800dd7c <__lshift>
 800f816:	eba6 0608 	sub.w	r6, r6, r8
 800f81a:	4604      	mov	r4, r0
 800f81c:	f100 0a14 	add.w	sl, r0, #20
 800f820:	f04f 0b00 	mov.w	fp, #0
 800f824:	e7ba      	b.n	800f79c <__gethex+0x1e4>
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	42b3      	cmp	r3, r6
 800f82a:	dd73      	ble.n	800f914 <__gethex+0x35c>
 800f82c:	1b9e      	subs	r6, r3, r6
 800f82e:	42b5      	cmp	r5, r6
 800f830:	dc34      	bgt.n	800f89c <__gethex+0x2e4>
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	2b02      	cmp	r3, #2
 800f836:	d023      	beq.n	800f880 <__gethex+0x2c8>
 800f838:	2b03      	cmp	r3, #3
 800f83a:	d025      	beq.n	800f888 <__gethex+0x2d0>
 800f83c:	2b01      	cmp	r3, #1
 800f83e:	d115      	bne.n	800f86c <__gethex+0x2b4>
 800f840:	42b5      	cmp	r5, r6
 800f842:	d113      	bne.n	800f86c <__gethex+0x2b4>
 800f844:	2d01      	cmp	r5, #1
 800f846:	d10b      	bne.n	800f860 <__gethex+0x2a8>
 800f848:	9a02      	ldr	r2, [sp, #8]
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	6013      	str	r3, [r2, #0]
 800f84e:	2301      	movs	r3, #1
 800f850:	6123      	str	r3, [r4, #16]
 800f852:	f8ca 3000 	str.w	r3, [sl]
 800f856:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f858:	f04f 0862 	mov.w	r8, #98	; 0x62
 800f85c:	601c      	str	r4, [r3, #0]
 800f85e:	e735      	b.n	800f6cc <__gethex+0x114>
 800f860:	1e69      	subs	r1, r5, #1
 800f862:	4620      	mov	r0, r4
 800f864:	f7fe fcb9 	bl	800e1da <__any_on>
 800f868:	2800      	cmp	r0, #0
 800f86a:	d1ed      	bne.n	800f848 <__gethex+0x290>
 800f86c:	4621      	mov	r1, r4
 800f86e:	4648      	mov	r0, r9
 800f870:	f7fe f86a 	bl	800d948 <_Bfree>
 800f874:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f876:	2300      	movs	r3, #0
 800f878:	6013      	str	r3, [r2, #0]
 800f87a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800f87e:	e725      	b.n	800f6cc <__gethex+0x114>
 800f880:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f882:	2b00      	cmp	r3, #0
 800f884:	d1f2      	bne.n	800f86c <__gethex+0x2b4>
 800f886:	e7df      	b.n	800f848 <__gethex+0x290>
 800f888:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d1dc      	bne.n	800f848 <__gethex+0x290>
 800f88e:	e7ed      	b.n	800f86c <__gethex+0x2b4>
 800f890:	080101f4 	.word	0x080101f4
 800f894:	0801008d 	.word	0x0801008d
 800f898:	0801039e 	.word	0x0801039e
 800f89c:	f106 38ff 	add.w	r8, r6, #4294967295
 800f8a0:	f1bb 0f00 	cmp.w	fp, #0
 800f8a4:	d133      	bne.n	800f90e <__gethex+0x356>
 800f8a6:	f1b8 0f00 	cmp.w	r8, #0
 800f8aa:	d004      	beq.n	800f8b6 <__gethex+0x2fe>
 800f8ac:	4641      	mov	r1, r8
 800f8ae:	4620      	mov	r0, r4
 800f8b0:	f7fe fc93 	bl	800e1da <__any_on>
 800f8b4:	4683      	mov	fp, r0
 800f8b6:	ea4f 1268 	mov.w	r2, r8, asr #5
 800f8ba:	2301      	movs	r3, #1
 800f8bc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f8c0:	f008 081f 	and.w	r8, r8, #31
 800f8c4:	fa03 f308 	lsl.w	r3, r3, r8
 800f8c8:	4213      	tst	r3, r2
 800f8ca:	4631      	mov	r1, r6
 800f8cc:	4620      	mov	r0, r4
 800f8ce:	bf18      	it	ne
 800f8d0:	f04b 0b02 	orrne.w	fp, fp, #2
 800f8d4:	1bad      	subs	r5, r5, r6
 800f8d6:	f7ff fe07 	bl	800f4e8 <rshift>
 800f8da:	687e      	ldr	r6, [r7, #4]
 800f8dc:	f04f 0802 	mov.w	r8, #2
 800f8e0:	f1bb 0f00 	cmp.w	fp, #0
 800f8e4:	d04a      	beq.n	800f97c <__gethex+0x3c4>
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	2b02      	cmp	r3, #2
 800f8ea:	d016      	beq.n	800f91a <__gethex+0x362>
 800f8ec:	2b03      	cmp	r3, #3
 800f8ee:	d018      	beq.n	800f922 <__gethex+0x36a>
 800f8f0:	2b01      	cmp	r3, #1
 800f8f2:	d109      	bne.n	800f908 <__gethex+0x350>
 800f8f4:	f01b 0f02 	tst.w	fp, #2
 800f8f8:	d006      	beq.n	800f908 <__gethex+0x350>
 800f8fa:	f8da 3000 	ldr.w	r3, [sl]
 800f8fe:	ea4b 0b03 	orr.w	fp, fp, r3
 800f902:	f01b 0f01 	tst.w	fp, #1
 800f906:	d10f      	bne.n	800f928 <__gethex+0x370>
 800f908:	f048 0810 	orr.w	r8, r8, #16
 800f90c:	e036      	b.n	800f97c <__gethex+0x3c4>
 800f90e:	f04f 0b01 	mov.w	fp, #1
 800f912:	e7d0      	b.n	800f8b6 <__gethex+0x2fe>
 800f914:	f04f 0801 	mov.w	r8, #1
 800f918:	e7e2      	b.n	800f8e0 <__gethex+0x328>
 800f91a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f91c:	f1c3 0301 	rsb	r3, r3, #1
 800f920:	930f      	str	r3, [sp, #60]	; 0x3c
 800f922:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f924:	2b00      	cmp	r3, #0
 800f926:	d0ef      	beq.n	800f908 <__gethex+0x350>
 800f928:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f92c:	f104 0214 	add.w	r2, r4, #20
 800f930:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800f934:	9301      	str	r3, [sp, #4]
 800f936:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800f93a:	2300      	movs	r3, #0
 800f93c:	4694      	mov	ip, r2
 800f93e:	f852 1b04 	ldr.w	r1, [r2], #4
 800f942:	f1b1 3fff 	cmp.w	r1, #4294967295
 800f946:	d01e      	beq.n	800f986 <__gethex+0x3ce>
 800f948:	3101      	adds	r1, #1
 800f94a:	f8cc 1000 	str.w	r1, [ip]
 800f94e:	f1b8 0f02 	cmp.w	r8, #2
 800f952:	f104 0214 	add.w	r2, r4, #20
 800f956:	d13d      	bne.n	800f9d4 <__gethex+0x41c>
 800f958:	683b      	ldr	r3, [r7, #0]
 800f95a:	3b01      	subs	r3, #1
 800f95c:	42ab      	cmp	r3, r5
 800f95e:	d10b      	bne.n	800f978 <__gethex+0x3c0>
 800f960:	1169      	asrs	r1, r5, #5
 800f962:	2301      	movs	r3, #1
 800f964:	f005 051f 	and.w	r5, r5, #31
 800f968:	fa03 f505 	lsl.w	r5, r3, r5
 800f96c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f970:	421d      	tst	r5, r3
 800f972:	bf18      	it	ne
 800f974:	f04f 0801 	movne.w	r8, #1
 800f978:	f048 0820 	orr.w	r8, r8, #32
 800f97c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f97e:	601c      	str	r4, [r3, #0]
 800f980:	9b02      	ldr	r3, [sp, #8]
 800f982:	601e      	str	r6, [r3, #0]
 800f984:	e6a2      	b.n	800f6cc <__gethex+0x114>
 800f986:	4290      	cmp	r0, r2
 800f988:	f842 3c04 	str.w	r3, [r2, #-4]
 800f98c:	d8d6      	bhi.n	800f93c <__gethex+0x384>
 800f98e:	68a2      	ldr	r2, [r4, #8]
 800f990:	4593      	cmp	fp, r2
 800f992:	db17      	blt.n	800f9c4 <__gethex+0x40c>
 800f994:	6861      	ldr	r1, [r4, #4]
 800f996:	4648      	mov	r0, r9
 800f998:	3101      	adds	r1, #1
 800f99a:	f7fd ff95 	bl	800d8c8 <_Balloc>
 800f99e:	4682      	mov	sl, r0
 800f9a0:	b918      	cbnz	r0, 800f9aa <__gethex+0x3f2>
 800f9a2:	4b1b      	ldr	r3, [pc, #108]	; (800fa10 <__gethex+0x458>)
 800f9a4:	4602      	mov	r2, r0
 800f9a6:	2184      	movs	r1, #132	; 0x84
 800f9a8:	e6b3      	b.n	800f712 <__gethex+0x15a>
 800f9aa:	6922      	ldr	r2, [r4, #16]
 800f9ac:	3202      	adds	r2, #2
 800f9ae:	f104 010c 	add.w	r1, r4, #12
 800f9b2:	0092      	lsls	r2, r2, #2
 800f9b4:	300c      	adds	r0, #12
 800f9b6:	f7ff fd4d 	bl	800f454 <memcpy>
 800f9ba:	4621      	mov	r1, r4
 800f9bc:	4648      	mov	r0, r9
 800f9be:	f7fd ffc3 	bl	800d948 <_Bfree>
 800f9c2:	4654      	mov	r4, sl
 800f9c4:	6922      	ldr	r2, [r4, #16]
 800f9c6:	1c51      	adds	r1, r2, #1
 800f9c8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f9cc:	6121      	str	r1, [r4, #16]
 800f9ce:	2101      	movs	r1, #1
 800f9d0:	6151      	str	r1, [r2, #20]
 800f9d2:	e7bc      	b.n	800f94e <__gethex+0x396>
 800f9d4:	6921      	ldr	r1, [r4, #16]
 800f9d6:	4559      	cmp	r1, fp
 800f9d8:	dd0b      	ble.n	800f9f2 <__gethex+0x43a>
 800f9da:	2101      	movs	r1, #1
 800f9dc:	4620      	mov	r0, r4
 800f9de:	f7ff fd83 	bl	800f4e8 <rshift>
 800f9e2:	68bb      	ldr	r3, [r7, #8]
 800f9e4:	3601      	adds	r6, #1
 800f9e6:	42b3      	cmp	r3, r6
 800f9e8:	f6ff aedb 	blt.w	800f7a2 <__gethex+0x1ea>
 800f9ec:	f04f 0801 	mov.w	r8, #1
 800f9f0:	e7c2      	b.n	800f978 <__gethex+0x3c0>
 800f9f2:	f015 051f 	ands.w	r5, r5, #31
 800f9f6:	d0f9      	beq.n	800f9ec <__gethex+0x434>
 800f9f8:	9b01      	ldr	r3, [sp, #4]
 800f9fa:	441a      	add	r2, r3
 800f9fc:	f1c5 0520 	rsb	r5, r5, #32
 800fa00:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800fa04:	f7fe f852 	bl	800daac <__hi0bits>
 800fa08:	42a8      	cmp	r0, r5
 800fa0a:	dbe6      	blt.n	800f9da <__gethex+0x422>
 800fa0c:	e7ee      	b.n	800f9ec <__gethex+0x434>
 800fa0e:	bf00      	nop
 800fa10:	0801008d 	.word	0x0801008d

0800fa14 <L_shift>:
 800fa14:	f1c2 0208 	rsb	r2, r2, #8
 800fa18:	0092      	lsls	r2, r2, #2
 800fa1a:	b570      	push	{r4, r5, r6, lr}
 800fa1c:	f1c2 0620 	rsb	r6, r2, #32
 800fa20:	6843      	ldr	r3, [r0, #4]
 800fa22:	6804      	ldr	r4, [r0, #0]
 800fa24:	fa03 f506 	lsl.w	r5, r3, r6
 800fa28:	432c      	orrs	r4, r5
 800fa2a:	40d3      	lsrs	r3, r2
 800fa2c:	6004      	str	r4, [r0, #0]
 800fa2e:	f840 3f04 	str.w	r3, [r0, #4]!
 800fa32:	4288      	cmp	r0, r1
 800fa34:	d3f4      	bcc.n	800fa20 <L_shift+0xc>
 800fa36:	bd70      	pop	{r4, r5, r6, pc}

0800fa38 <__match>:
 800fa38:	b530      	push	{r4, r5, lr}
 800fa3a:	6803      	ldr	r3, [r0, #0]
 800fa3c:	3301      	adds	r3, #1
 800fa3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fa42:	b914      	cbnz	r4, 800fa4a <__match+0x12>
 800fa44:	6003      	str	r3, [r0, #0]
 800fa46:	2001      	movs	r0, #1
 800fa48:	bd30      	pop	{r4, r5, pc}
 800fa4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa4e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800fa52:	2d19      	cmp	r5, #25
 800fa54:	bf98      	it	ls
 800fa56:	3220      	addls	r2, #32
 800fa58:	42a2      	cmp	r2, r4
 800fa5a:	d0f0      	beq.n	800fa3e <__match+0x6>
 800fa5c:	2000      	movs	r0, #0
 800fa5e:	e7f3      	b.n	800fa48 <__match+0x10>

0800fa60 <__hexnan>:
 800fa60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa64:	680b      	ldr	r3, [r1, #0]
 800fa66:	6801      	ldr	r1, [r0, #0]
 800fa68:	115e      	asrs	r6, r3, #5
 800fa6a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fa6e:	f013 031f 	ands.w	r3, r3, #31
 800fa72:	b087      	sub	sp, #28
 800fa74:	bf18      	it	ne
 800fa76:	3604      	addne	r6, #4
 800fa78:	2500      	movs	r5, #0
 800fa7a:	1f37      	subs	r7, r6, #4
 800fa7c:	4682      	mov	sl, r0
 800fa7e:	4690      	mov	r8, r2
 800fa80:	9301      	str	r3, [sp, #4]
 800fa82:	f846 5c04 	str.w	r5, [r6, #-4]
 800fa86:	46b9      	mov	r9, r7
 800fa88:	463c      	mov	r4, r7
 800fa8a:	9502      	str	r5, [sp, #8]
 800fa8c:	46ab      	mov	fp, r5
 800fa8e:	784a      	ldrb	r2, [r1, #1]
 800fa90:	1c4b      	adds	r3, r1, #1
 800fa92:	9303      	str	r3, [sp, #12]
 800fa94:	b342      	cbz	r2, 800fae8 <__hexnan+0x88>
 800fa96:	4610      	mov	r0, r2
 800fa98:	9105      	str	r1, [sp, #20]
 800fa9a:	9204      	str	r2, [sp, #16]
 800fa9c:	f7ff fd76 	bl	800f58c <__hexdig_fun>
 800faa0:	2800      	cmp	r0, #0
 800faa2:	d14f      	bne.n	800fb44 <__hexnan+0xe4>
 800faa4:	9a04      	ldr	r2, [sp, #16]
 800faa6:	9905      	ldr	r1, [sp, #20]
 800faa8:	2a20      	cmp	r2, #32
 800faaa:	d818      	bhi.n	800fade <__hexnan+0x7e>
 800faac:	9b02      	ldr	r3, [sp, #8]
 800faae:	459b      	cmp	fp, r3
 800fab0:	dd13      	ble.n	800fada <__hexnan+0x7a>
 800fab2:	454c      	cmp	r4, r9
 800fab4:	d206      	bcs.n	800fac4 <__hexnan+0x64>
 800fab6:	2d07      	cmp	r5, #7
 800fab8:	dc04      	bgt.n	800fac4 <__hexnan+0x64>
 800faba:	462a      	mov	r2, r5
 800fabc:	4649      	mov	r1, r9
 800fabe:	4620      	mov	r0, r4
 800fac0:	f7ff ffa8 	bl	800fa14 <L_shift>
 800fac4:	4544      	cmp	r4, r8
 800fac6:	d950      	bls.n	800fb6a <__hexnan+0x10a>
 800fac8:	2300      	movs	r3, #0
 800faca:	f1a4 0904 	sub.w	r9, r4, #4
 800face:	f844 3c04 	str.w	r3, [r4, #-4]
 800fad2:	f8cd b008 	str.w	fp, [sp, #8]
 800fad6:	464c      	mov	r4, r9
 800fad8:	461d      	mov	r5, r3
 800fada:	9903      	ldr	r1, [sp, #12]
 800fadc:	e7d7      	b.n	800fa8e <__hexnan+0x2e>
 800fade:	2a29      	cmp	r2, #41	; 0x29
 800fae0:	d155      	bne.n	800fb8e <__hexnan+0x12e>
 800fae2:	3102      	adds	r1, #2
 800fae4:	f8ca 1000 	str.w	r1, [sl]
 800fae8:	f1bb 0f00 	cmp.w	fp, #0
 800faec:	d04f      	beq.n	800fb8e <__hexnan+0x12e>
 800faee:	454c      	cmp	r4, r9
 800faf0:	d206      	bcs.n	800fb00 <__hexnan+0xa0>
 800faf2:	2d07      	cmp	r5, #7
 800faf4:	dc04      	bgt.n	800fb00 <__hexnan+0xa0>
 800faf6:	462a      	mov	r2, r5
 800faf8:	4649      	mov	r1, r9
 800fafa:	4620      	mov	r0, r4
 800fafc:	f7ff ff8a 	bl	800fa14 <L_shift>
 800fb00:	4544      	cmp	r4, r8
 800fb02:	d934      	bls.n	800fb6e <__hexnan+0x10e>
 800fb04:	f1a8 0204 	sub.w	r2, r8, #4
 800fb08:	4623      	mov	r3, r4
 800fb0a:	f853 1b04 	ldr.w	r1, [r3], #4
 800fb0e:	f842 1f04 	str.w	r1, [r2, #4]!
 800fb12:	429f      	cmp	r7, r3
 800fb14:	d2f9      	bcs.n	800fb0a <__hexnan+0xaa>
 800fb16:	1b3b      	subs	r3, r7, r4
 800fb18:	f023 0303 	bic.w	r3, r3, #3
 800fb1c:	3304      	adds	r3, #4
 800fb1e:	3e03      	subs	r6, #3
 800fb20:	3401      	adds	r4, #1
 800fb22:	42a6      	cmp	r6, r4
 800fb24:	bf38      	it	cc
 800fb26:	2304      	movcc	r3, #4
 800fb28:	4443      	add	r3, r8
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	f843 2b04 	str.w	r2, [r3], #4
 800fb30:	429f      	cmp	r7, r3
 800fb32:	d2fb      	bcs.n	800fb2c <__hexnan+0xcc>
 800fb34:	683b      	ldr	r3, [r7, #0]
 800fb36:	b91b      	cbnz	r3, 800fb40 <__hexnan+0xe0>
 800fb38:	4547      	cmp	r7, r8
 800fb3a:	d126      	bne.n	800fb8a <__hexnan+0x12a>
 800fb3c:	2301      	movs	r3, #1
 800fb3e:	603b      	str	r3, [r7, #0]
 800fb40:	2005      	movs	r0, #5
 800fb42:	e025      	b.n	800fb90 <__hexnan+0x130>
 800fb44:	3501      	adds	r5, #1
 800fb46:	2d08      	cmp	r5, #8
 800fb48:	f10b 0b01 	add.w	fp, fp, #1
 800fb4c:	dd06      	ble.n	800fb5c <__hexnan+0xfc>
 800fb4e:	4544      	cmp	r4, r8
 800fb50:	d9c3      	bls.n	800fada <__hexnan+0x7a>
 800fb52:	2300      	movs	r3, #0
 800fb54:	f844 3c04 	str.w	r3, [r4, #-4]
 800fb58:	2501      	movs	r5, #1
 800fb5a:	3c04      	subs	r4, #4
 800fb5c:	6822      	ldr	r2, [r4, #0]
 800fb5e:	f000 000f 	and.w	r0, r0, #15
 800fb62:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800fb66:	6020      	str	r0, [r4, #0]
 800fb68:	e7b7      	b.n	800fada <__hexnan+0x7a>
 800fb6a:	2508      	movs	r5, #8
 800fb6c:	e7b5      	b.n	800fada <__hexnan+0x7a>
 800fb6e:	9b01      	ldr	r3, [sp, #4]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d0df      	beq.n	800fb34 <__hexnan+0xd4>
 800fb74:	f1c3 0320 	rsb	r3, r3, #32
 800fb78:	f04f 32ff 	mov.w	r2, #4294967295
 800fb7c:	40da      	lsrs	r2, r3
 800fb7e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800fb82:	4013      	ands	r3, r2
 800fb84:	f846 3c04 	str.w	r3, [r6, #-4]
 800fb88:	e7d4      	b.n	800fb34 <__hexnan+0xd4>
 800fb8a:	3f04      	subs	r7, #4
 800fb8c:	e7d2      	b.n	800fb34 <__hexnan+0xd4>
 800fb8e:	2004      	movs	r0, #4
 800fb90:	b007      	add	sp, #28
 800fb92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fb96 <__ascii_mbtowc>:
 800fb96:	b082      	sub	sp, #8
 800fb98:	b901      	cbnz	r1, 800fb9c <__ascii_mbtowc+0x6>
 800fb9a:	a901      	add	r1, sp, #4
 800fb9c:	b142      	cbz	r2, 800fbb0 <__ascii_mbtowc+0x1a>
 800fb9e:	b14b      	cbz	r3, 800fbb4 <__ascii_mbtowc+0x1e>
 800fba0:	7813      	ldrb	r3, [r2, #0]
 800fba2:	600b      	str	r3, [r1, #0]
 800fba4:	7812      	ldrb	r2, [r2, #0]
 800fba6:	1e10      	subs	r0, r2, #0
 800fba8:	bf18      	it	ne
 800fbaa:	2001      	movne	r0, #1
 800fbac:	b002      	add	sp, #8
 800fbae:	4770      	bx	lr
 800fbb0:	4610      	mov	r0, r2
 800fbb2:	e7fb      	b.n	800fbac <__ascii_mbtowc+0x16>
 800fbb4:	f06f 0001 	mvn.w	r0, #1
 800fbb8:	e7f8      	b.n	800fbac <__ascii_mbtowc+0x16>

0800fbba <_realloc_r>:
 800fbba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbbe:	4680      	mov	r8, r0
 800fbc0:	4614      	mov	r4, r2
 800fbc2:	460e      	mov	r6, r1
 800fbc4:	b921      	cbnz	r1, 800fbd0 <_realloc_r+0x16>
 800fbc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fbca:	4611      	mov	r1, r2
 800fbcc:	f7fd bdf0 	b.w	800d7b0 <_malloc_r>
 800fbd0:	b92a      	cbnz	r2, 800fbde <_realloc_r+0x24>
 800fbd2:	f7fd fd79 	bl	800d6c8 <_free_r>
 800fbd6:	4625      	mov	r5, r4
 800fbd8:	4628      	mov	r0, r5
 800fbda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbde:	f000 f842 	bl	800fc66 <_malloc_usable_size_r>
 800fbe2:	4284      	cmp	r4, r0
 800fbe4:	4607      	mov	r7, r0
 800fbe6:	d802      	bhi.n	800fbee <_realloc_r+0x34>
 800fbe8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fbec:	d812      	bhi.n	800fc14 <_realloc_r+0x5a>
 800fbee:	4621      	mov	r1, r4
 800fbf0:	4640      	mov	r0, r8
 800fbf2:	f7fd fddd 	bl	800d7b0 <_malloc_r>
 800fbf6:	4605      	mov	r5, r0
 800fbf8:	2800      	cmp	r0, #0
 800fbfa:	d0ed      	beq.n	800fbd8 <_realloc_r+0x1e>
 800fbfc:	42bc      	cmp	r4, r7
 800fbfe:	4622      	mov	r2, r4
 800fc00:	4631      	mov	r1, r6
 800fc02:	bf28      	it	cs
 800fc04:	463a      	movcs	r2, r7
 800fc06:	f7ff fc25 	bl	800f454 <memcpy>
 800fc0a:	4631      	mov	r1, r6
 800fc0c:	4640      	mov	r0, r8
 800fc0e:	f7fd fd5b 	bl	800d6c8 <_free_r>
 800fc12:	e7e1      	b.n	800fbd8 <_realloc_r+0x1e>
 800fc14:	4635      	mov	r5, r6
 800fc16:	e7df      	b.n	800fbd8 <_realloc_r+0x1e>

0800fc18 <__ascii_wctomb>:
 800fc18:	b149      	cbz	r1, 800fc2e <__ascii_wctomb+0x16>
 800fc1a:	2aff      	cmp	r2, #255	; 0xff
 800fc1c:	bf85      	ittet	hi
 800fc1e:	238a      	movhi	r3, #138	; 0x8a
 800fc20:	6003      	strhi	r3, [r0, #0]
 800fc22:	700a      	strbls	r2, [r1, #0]
 800fc24:	f04f 30ff 	movhi.w	r0, #4294967295
 800fc28:	bf98      	it	ls
 800fc2a:	2001      	movls	r0, #1
 800fc2c:	4770      	bx	lr
 800fc2e:	4608      	mov	r0, r1
 800fc30:	4770      	bx	lr
	...

0800fc34 <fiprintf>:
 800fc34:	b40e      	push	{r1, r2, r3}
 800fc36:	b503      	push	{r0, r1, lr}
 800fc38:	4601      	mov	r1, r0
 800fc3a:	ab03      	add	r3, sp, #12
 800fc3c:	4805      	ldr	r0, [pc, #20]	; (800fc54 <fiprintf+0x20>)
 800fc3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc42:	6800      	ldr	r0, [r0, #0]
 800fc44:	9301      	str	r3, [sp, #4]
 800fc46:	f000 f83f 	bl	800fcc8 <_vfiprintf_r>
 800fc4a:	b002      	add	sp, #8
 800fc4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fc50:	b003      	add	sp, #12
 800fc52:	4770      	bx	lr
 800fc54:	2400006c 	.word	0x2400006c

0800fc58 <abort>:
 800fc58:	b508      	push	{r3, lr}
 800fc5a:	2006      	movs	r0, #6
 800fc5c:	f000 f976 	bl	800ff4c <raise>
 800fc60:	2001      	movs	r0, #1
 800fc62:	f7f1 ff0b 	bl	8001a7c <_exit>

0800fc66 <_malloc_usable_size_r>:
 800fc66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc6a:	1f18      	subs	r0, r3, #4
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	bfbc      	itt	lt
 800fc70:	580b      	ldrlt	r3, [r1, r0]
 800fc72:	18c0      	addlt	r0, r0, r3
 800fc74:	4770      	bx	lr

0800fc76 <__sfputc_r>:
 800fc76:	6893      	ldr	r3, [r2, #8]
 800fc78:	3b01      	subs	r3, #1
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	b410      	push	{r4}
 800fc7e:	6093      	str	r3, [r2, #8]
 800fc80:	da08      	bge.n	800fc94 <__sfputc_r+0x1e>
 800fc82:	6994      	ldr	r4, [r2, #24]
 800fc84:	42a3      	cmp	r3, r4
 800fc86:	db01      	blt.n	800fc8c <__sfputc_r+0x16>
 800fc88:	290a      	cmp	r1, #10
 800fc8a:	d103      	bne.n	800fc94 <__sfputc_r+0x1e>
 800fc8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc90:	f7fc be0b 	b.w	800c8aa <__swbuf_r>
 800fc94:	6813      	ldr	r3, [r2, #0]
 800fc96:	1c58      	adds	r0, r3, #1
 800fc98:	6010      	str	r0, [r2, #0]
 800fc9a:	7019      	strb	r1, [r3, #0]
 800fc9c:	4608      	mov	r0, r1
 800fc9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fca2:	4770      	bx	lr

0800fca4 <__sfputs_r>:
 800fca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fca6:	4606      	mov	r6, r0
 800fca8:	460f      	mov	r7, r1
 800fcaa:	4614      	mov	r4, r2
 800fcac:	18d5      	adds	r5, r2, r3
 800fcae:	42ac      	cmp	r4, r5
 800fcb0:	d101      	bne.n	800fcb6 <__sfputs_r+0x12>
 800fcb2:	2000      	movs	r0, #0
 800fcb4:	e007      	b.n	800fcc6 <__sfputs_r+0x22>
 800fcb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcba:	463a      	mov	r2, r7
 800fcbc:	4630      	mov	r0, r6
 800fcbe:	f7ff ffda 	bl	800fc76 <__sfputc_r>
 800fcc2:	1c43      	adds	r3, r0, #1
 800fcc4:	d1f3      	bne.n	800fcae <__sfputs_r+0xa>
 800fcc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fcc8 <_vfiprintf_r>:
 800fcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fccc:	460d      	mov	r5, r1
 800fcce:	b09d      	sub	sp, #116	; 0x74
 800fcd0:	4614      	mov	r4, r2
 800fcd2:	4698      	mov	r8, r3
 800fcd4:	4606      	mov	r6, r0
 800fcd6:	b118      	cbz	r0, 800fce0 <_vfiprintf_r+0x18>
 800fcd8:	6a03      	ldr	r3, [r0, #32]
 800fcda:	b90b      	cbnz	r3, 800fce0 <_vfiprintf_r+0x18>
 800fcdc:	f7fc fd4c 	bl	800c778 <__sinit>
 800fce0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fce2:	07d9      	lsls	r1, r3, #31
 800fce4:	d405      	bmi.n	800fcf2 <_vfiprintf_r+0x2a>
 800fce6:	89ab      	ldrh	r3, [r5, #12]
 800fce8:	059a      	lsls	r2, r3, #22
 800fcea:	d402      	bmi.n	800fcf2 <_vfiprintf_r+0x2a>
 800fcec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fcee:	f7fc feed 	bl	800cacc <__retarget_lock_acquire_recursive>
 800fcf2:	89ab      	ldrh	r3, [r5, #12]
 800fcf4:	071b      	lsls	r3, r3, #28
 800fcf6:	d501      	bpl.n	800fcfc <_vfiprintf_r+0x34>
 800fcf8:	692b      	ldr	r3, [r5, #16]
 800fcfa:	b99b      	cbnz	r3, 800fd24 <_vfiprintf_r+0x5c>
 800fcfc:	4629      	mov	r1, r5
 800fcfe:	4630      	mov	r0, r6
 800fd00:	f7fc fe10 	bl	800c924 <__swsetup_r>
 800fd04:	b170      	cbz	r0, 800fd24 <_vfiprintf_r+0x5c>
 800fd06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fd08:	07dc      	lsls	r4, r3, #31
 800fd0a:	d504      	bpl.n	800fd16 <_vfiprintf_r+0x4e>
 800fd0c:	f04f 30ff 	mov.w	r0, #4294967295
 800fd10:	b01d      	add	sp, #116	; 0x74
 800fd12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd16:	89ab      	ldrh	r3, [r5, #12]
 800fd18:	0598      	lsls	r0, r3, #22
 800fd1a:	d4f7      	bmi.n	800fd0c <_vfiprintf_r+0x44>
 800fd1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fd1e:	f7fc fed6 	bl	800cace <__retarget_lock_release_recursive>
 800fd22:	e7f3      	b.n	800fd0c <_vfiprintf_r+0x44>
 800fd24:	2300      	movs	r3, #0
 800fd26:	9309      	str	r3, [sp, #36]	; 0x24
 800fd28:	2320      	movs	r3, #32
 800fd2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fd2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800fd32:	2330      	movs	r3, #48	; 0x30
 800fd34:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800fee8 <_vfiprintf_r+0x220>
 800fd38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fd3c:	f04f 0901 	mov.w	r9, #1
 800fd40:	4623      	mov	r3, r4
 800fd42:	469a      	mov	sl, r3
 800fd44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd48:	b10a      	cbz	r2, 800fd4e <_vfiprintf_r+0x86>
 800fd4a:	2a25      	cmp	r2, #37	; 0x25
 800fd4c:	d1f9      	bne.n	800fd42 <_vfiprintf_r+0x7a>
 800fd4e:	ebba 0b04 	subs.w	fp, sl, r4
 800fd52:	d00b      	beq.n	800fd6c <_vfiprintf_r+0xa4>
 800fd54:	465b      	mov	r3, fp
 800fd56:	4622      	mov	r2, r4
 800fd58:	4629      	mov	r1, r5
 800fd5a:	4630      	mov	r0, r6
 800fd5c:	f7ff ffa2 	bl	800fca4 <__sfputs_r>
 800fd60:	3001      	adds	r0, #1
 800fd62:	f000 80a9 	beq.w	800feb8 <_vfiprintf_r+0x1f0>
 800fd66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd68:	445a      	add	r2, fp
 800fd6a:	9209      	str	r2, [sp, #36]	; 0x24
 800fd6c:	f89a 3000 	ldrb.w	r3, [sl]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	f000 80a1 	beq.w	800feb8 <_vfiprintf_r+0x1f0>
 800fd76:	2300      	movs	r3, #0
 800fd78:	f04f 32ff 	mov.w	r2, #4294967295
 800fd7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd80:	f10a 0a01 	add.w	sl, sl, #1
 800fd84:	9304      	str	r3, [sp, #16]
 800fd86:	9307      	str	r3, [sp, #28]
 800fd88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fd8c:	931a      	str	r3, [sp, #104]	; 0x68
 800fd8e:	4654      	mov	r4, sl
 800fd90:	2205      	movs	r2, #5
 800fd92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd96:	4854      	ldr	r0, [pc, #336]	; (800fee8 <_vfiprintf_r+0x220>)
 800fd98:	f7f0 faa2 	bl	80002e0 <memchr>
 800fd9c:	9a04      	ldr	r2, [sp, #16]
 800fd9e:	b9d8      	cbnz	r0, 800fdd8 <_vfiprintf_r+0x110>
 800fda0:	06d1      	lsls	r1, r2, #27
 800fda2:	bf44      	itt	mi
 800fda4:	2320      	movmi	r3, #32
 800fda6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fdaa:	0713      	lsls	r3, r2, #28
 800fdac:	bf44      	itt	mi
 800fdae:	232b      	movmi	r3, #43	; 0x2b
 800fdb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fdb4:	f89a 3000 	ldrb.w	r3, [sl]
 800fdb8:	2b2a      	cmp	r3, #42	; 0x2a
 800fdba:	d015      	beq.n	800fde8 <_vfiprintf_r+0x120>
 800fdbc:	9a07      	ldr	r2, [sp, #28]
 800fdbe:	4654      	mov	r4, sl
 800fdc0:	2000      	movs	r0, #0
 800fdc2:	f04f 0c0a 	mov.w	ip, #10
 800fdc6:	4621      	mov	r1, r4
 800fdc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fdcc:	3b30      	subs	r3, #48	; 0x30
 800fdce:	2b09      	cmp	r3, #9
 800fdd0:	d94d      	bls.n	800fe6e <_vfiprintf_r+0x1a6>
 800fdd2:	b1b0      	cbz	r0, 800fe02 <_vfiprintf_r+0x13a>
 800fdd4:	9207      	str	r2, [sp, #28]
 800fdd6:	e014      	b.n	800fe02 <_vfiprintf_r+0x13a>
 800fdd8:	eba0 0308 	sub.w	r3, r0, r8
 800fddc:	fa09 f303 	lsl.w	r3, r9, r3
 800fde0:	4313      	orrs	r3, r2
 800fde2:	9304      	str	r3, [sp, #16]
 800fde4:	46a2      	mov	sl, r4
 800fde6:	e7d2      	b.n	800fd8e <_vfiprintf_r+0xc6>
 800fde8:	9b03      	ldr	r3, [sp, #12]
 800fdea:	1d19      	adds	r1, r3, #4
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	9103      	str	r1, [sp, #12]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	bfbb      	ittet	lt
 800fdf4:	425b      	neglt	r3, r3
 800fdf6:	f042 0202 	orrlt.w	r2, r2, #2
 800fdfa:	9307      	strge	r3, [sp, #28]
 800fdfc:	9307      	strlt	r3, [sp, #28]
 800fdfe:	bfb8      	it	lt
 800fe00:	9204      	strlt	r2, [sp, #16]
 800fe02:	7823      	ldrb	r3, [r4, #0]
 800fe04:	2b2e      	cmp	r3, #46	; 0x2e
 800fe06:	d10c      	bne.n	800fe22 <_vfiprintf_r+0x15a>
 800fe08:	7863      	ldrb	r3, [r4, #1]
 800fe0a:	2b2a      	cmp	r3, #42	; 0x2a
 800fe0c:	d134      	bne.n	800fe78 <_vfiprintf_r+0x1b0>
 800fe0e:	9b03      	ldr	r3, [sp, #12]
 800fe10:	1d1a      	adds	r2, r3, #4
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	9203      	str	r2, [sp, #12]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	bfb8      	it	lt
 800fe1a:	f04f 33ff 	movlt.w	r3, #4294967295
 800fe1e:	3402      	adds	r4, #2
 800fe20:	9305      	str	r3, [sp, #20]
 800fe22:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800fef8 <_vfiprintf_r+0x230>
 800fe26:	7821      	ldrb	r1, [r4, #0]
 800fe28:	2203      	movs	r2, #3
 800fe2a:	4650      	mov	r0, sl
 800fe2c:	f7f0 fa58 	bl	80002e0 <memchr>
 800fe30:	b138      	cbz	r0, 800fe42 <_vfiprintf_r+0x17a>
 800fe32:	9b04      	ldr	r3, [sp, #16]
 800fe34:	eba0 000a 	sub.w	r0, r0, sl
 800fe38:	2240      	movs	r2, #64	; 0x40
 800fe3a:	4082      	lsls	r2, r0
 800fe3c:	4313      	orrs	r3, r2
 800fe3e:	3401      	adds	r4, #1
 800fe40:	9304      	str	r3, [sp, #16]
 800fe42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe46:	4829      	ldr	r0, [pc, #164]	; (800feec <_vfiprintf_r+0x224>)
 800fe48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fe4c:	2206      	movs	r2, #6
 800fe4e:	f7f0 fa47 	bl	80002e0 <memchr>
 800fe52:	2800      	cmp	r0, #0
 800fe54:	d03f      	beq.n	800fed6 <_vfiprintf_r+0x20e>
 800fe56:	4b26      	ldr	r3, [pc, #152]	; (800fef0 <_vfiprintf_r+0x228>)
 800fe58:	bb1b      	cbnz	r3, 800fea2 <_vfiprintf_r+0x1da>
 800fe5a:	9b03      	ldr	r3, [sp, #12]
 800fe5c:	3307      	adds	r3, #7
 800fe5e:	f023 0307 	bic.w	r3, r3, #7
 800fe62:	3308      	adds	r3, #8
 800fe64:	9303      	str	r3, [sp, #12]
 800fe66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe68:	443b      	add	r3, r7
 800fe6a:	9309      	str	r3, [sp, #36]	; 0x24
 800fe6c:	e768      	b.n	800fd40 <_vfiprintf_r+0x78>
 800fe6e:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe72:	460c      	mov	r4, r1
 800fe74:	2001      	movs	r0, #1
 800fe76:	e7a6      	b.n	800fdc6 <_vfiprintf_r+0xfe>
 800fe78:	2300      	movs	r3, #0
 800fe7a:	3401      	adds	r4, #1
 800fe7c:	9305      	str	r3, [sp, #20]
 800fe7e:	4619      	mov	r1, r3
 800fe80:	f04f 0c0a 	mov.w	ip, #10
 800fe84:	4620      	mov	r0, r4
 800fe86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe8a:	3a30      	subs	r2, #48	; 0x30
 800fe8c:	2a09      	cmp	r2, #9
 800fe8e:	d903      	bls.n	800fe98 <_vfiprintf_r+0x1d0>
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d0c6      	beq.n	800fe22 <_vfiprintf_r+0x15a>
 800fe94:	9105      	str	r1, [sp, #20]
 800fe96:	e7c4      	b.n	800fe22 <_vfiprintf_r+0x15a>
 800fe98:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe9c:	4604      	mov	r4, r0
 800fe9e:	2301      	movs	r3, #1
 800fea0:	e7f0      	b.n	800fe84 <_vfiprintf_r+0x1bc>
 800fea2:	ab03      	add	r3, sp, #12
 800fea4:	9300      	str	r3, [sp, #0]
 800fea6:	462a      	mov	r2, r5
 800fea8:	4b12      	ldr	r3, [pc, #72]	; (800fef4 <_vfiprintf_r+0x22c>)
 800feaa:	a904      	add	r1, sp, #16
 800feac:	4630      	mov	r0, r6
 800feae:	f7fb fe3b 	bl	800bb28 <_printf_float>
 800feb2:	4607      	mov	r7, r0
 800feb4:	1c78      	adds	r0, r7, #1
 800feb6:	d1d6      	bne.n	800fe66 <_vfiprintf_r+0x19e>
 800feb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800feba:	07d9      	lsls	r1, r3, #31
 800febc:	d405      	bmi.n	800feca <_vfiprintf_r+0x202>
 800febe:	89ab      	ldrh	r3, [r5, #12]
 800fec0:	059a      	lsls	r2, r3, #22
 800fec2:	d402      	bmi.n	800feca <_vfiprintf_r+0x202>
 800fec4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fec6:	f7fc fe02 	bl	800cace <__retarget_lock_release_recursive>
 800feca:	89ab      	ldrh	r3, [r5, #12]
 800fecc:	065b      	lsls	r3, r3, #25
 800fece:	f53f af1d 	bmi.w	800fd0c <_vfiprintf_r+0x44>
 800fed2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fed4:	e71c      	b.n	800fd10 <_vfiprintf_r+0x48>
 800fed6:	ab03      	add	r3, sp, #12
 800fed8:	9300      	str	r3, [sp, #0]
 800feda:	462a      	mov	r2, r5
 800fedc:	4b05      	ldr	r3, [pc, #20]	; (800fef4 <_vfiprintf_r+0x22c>)
 800fede:	a904      	add	r1, sp, #16
 800fee0:	4630      	mov	r0, r6
 800fee2:	f7fc f8a9 	bl	800c038 <_printf_i>
 800fee6:	e7e4      	b.n	800feb2 <_vfiprintf_r+0x1ea>
 800fee8:	08010349 	.word	0x08010349
 800feec:	08010353 	.word	0x08010353
 800fef0:	0800bb29 	.word	0x0800bb29
 800fef4:	0800fca5 	.word	0x0800fca5
 800fef8:	0801034f 	.word	0x0801034f

0800fefc <_raise_r>:
 800fefc:	291f      	cmp	r1, #31
 800fefe:	b538      	push	{r3, r4, r5, lr}
 800ff00:	4604      	mov	r4, r0
 800ff02:	460d      	mov	r5, r1
 800ff04:	d904      	bls.n	800ff10 <_raise_r+0x14>
 800ff06:	2316      	movs	r3, #22
 800ff08:	6003      	str	r3, [r0, #0]
 800ff0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ff0e:	bd38      	pop	{r3, r4, r5, pc}
 800ff10:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ff12:	b112      	cbz	r2, 800ff1a <_raise_r+0x1e>
 800ff14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ff18:	b94b      	cbnz	r3, 800ff2e <_raise_r+0x32>
 800ff1a:	4620      	mov	r0, r4
 800ff1c:	f000 f830 	bl	800ff80 <_getpid_r>
 800ff20:	462a      	mov	r2, r5
 800ff22:	4601      	mov	r1, r0
 800ff24:	4620      	mov	r0, r4
 800ff26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff2a:	f000 b817 	b.w	800ff5c <_kill_r>
 800ff2e:	2b01      	cmp	r3, #1
 800ff30:	d00a      	beq.n	800ff48 <_raise_r+0x4c>
 800ff32:	1c59      	adds	r1, r3, #1
 800ff34:	d103      	bne.n	800ff3e <_raise_r+0x42>
 800ff36:	2316      	movs	r3, #22
 800ff38:	6003      	str	r3, [r0, #0]
 800ff3a:	2001      	movs	r0, #1
 800ff3c:	e7e7      	b.n	800ff0e <_raise_r+0x12>
 800ff3e:	2400      	movs	r4, #0
 800ff40:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ff44:	4628      	mov	r0, r5
 800ff46:	4798      	blx	r3
 800ff48:	2000      	movs	r0, #0
 800ff4a:	e7e0      	b.n	800ff0e <_raise_r+0x12>

0800ff4c <raise>:
 800ff4c:	4b02      	ldr	r3, [pc, #8]	; (800ff58 <raise+0xc>)
 800ff4e:	4601      	mov	r1, r0
 800ff50:	6818      	ldr	r0, [r3, #0]
 800ff52:	f7ff bfd3 	b.w	800fefc <_raise_r>
 800ff56:	bf00      	nop
 800ff58:	2400006c 	.word	0x2400006c

0800ff5c <_kill_r>:
 800ff5c:	b538      	push	{r3, r4, r5, lr}
 800ff5e:	4d07      	ldr	r5, [pc, #28]	; (800ff7c <_kill_r+0x20>)
 800ff60:	2300      	movs	r3, #0
 800ff62:	4604      	mov	r4, r0
 800ff64:	4608      	mov	r0, r1
 800ff66:	4611      	mov	r1, r2
 800ff68:	602b      	str	r3, [r5, #0]
 800ff6a:	f7f1 fd77 	bl	8001a5c <_kill>
 800ff6e:	1c43      	adds	r3, r0, #1
 800ff70:	d102      	bne.n	800ff78 <_kill_r+0x1c>
 800ff72:	682b      	ldr	r3, [r5, #0]
 800ff74:	b103      	cbz	r3, 800ff78 <_kill_r+0x1c>
 800ff76:	6023      	str	r3, [r4, #0]
 800ff78:	bd38      	pop	{r3, r4, r5, pc}
 800ff7a:	bf00      	nop
 800ff7c:	240006a0 	.word	0x240006a0

0800ff80 <_getpid_r>:
 800ff80:	f7f1 bd64 	b.w	8001a4c <_getpid>

0800ff84 <_init>:
 800ff84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff86:	bf00      	nop
 800ff88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff8a:	bc08      	pop	{r3}
 800ff8c:	469e      	mov	lr, r3
 800ff8e:	4770      	bx	lr

0800ff90 <_fini>:
 800ff90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff92:	bf00      	nop
 800ff94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff96:	bc08      	pop	{r3}
 800ff98:	469e      	mov	lr, r3
 800ff9a:	4770      	bx	lr
