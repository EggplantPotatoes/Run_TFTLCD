
STM32H743.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .sram_data1   00000000  c0000000  c0000000  000301d8  2**0
                  CONTENTS
  1 .sram_data2   00000000  c0200000  c0200000  000301d8  2**0
                  CONTENTS
  2 .sram_data3   00000000  c0800000  c0800000  000301d8  2**0
                  CONTENTS
  3 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .text         00010b70  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       00000638  08010e10  08010e10  00020e10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM          00000008  08011448  08011448  00021448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .init_array   00000004  08011450  08011450  00021450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08011454  08011454  00021454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000001d8  24000000  08011458  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000004ac  240001d8  08011630  000301d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  24000684  08011630  00030684  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030206  2**0
                  CONTENTS, READONLY
 14 .debug_info   00020658  00000000  00000000  00030249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003cf5  00000000  00000000  000508a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001898  00000000  00000000  00054598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001314  00000000  00000000  00055e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003b059  00000000  00000000  00057144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00022480  00000000  00000000  0009219d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0016ef9a  00000000  00000000  000b461d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007d60  00000000  00000000  002235b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  0022b318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010df8 	.word	0x08010df8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	08010df8 	.word	0x08010df8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a8 	b.w	8000a70 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9e08      	ldr	r6, [sp, #32]
 80007ae:	460d      	mov	r5, r1
 80007b0:	4604      	mov	r4, r0
 80007b2:	460f      	mov	r7, r1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d14a      	bne.n	800084e <__udivmoddi4+0xa6>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4694      	mov	ip, r2
 80007bc:	d965      	bls.n	800088a <__udivmoddi4+0xe2>
 80007be:	fab2 f382 	clz	r3, r2
 80007c2:	b143      	cbz	r3, 80007d6 <__udivmoddi4+0x2e>
 80007c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007c8:	f1c3 0220 	rsb	r2, r3, #32
 80007cc:	409f      	lsls	r7, r3
 80007ce:	fa20 f202 	lsr.w	r2, r0, r2
 80007d2:	4317      	orrs	r7, r2
 80007d4:	409c      	lsls	r4, r3
 80007d6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80007da:	fa1f f58c 	uxth.w	r5, ip
 80007de:	fbb7 f1fe 	udiv	r1, r7, lr
 80007e2:	0c22      	lsrs	r2, r4, #16
 80007e4:	fb0e 7711 	mls	r7, lr, r1, r7
 80007e8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80007ec:	fb01 f005 	mul.w	r0, r1, r5
 80007f0:	4290      	cmp	r0, r2
 80007f2:	d90a      	bls.n	800080a <__udivmoddi4+0x62>
 80007f4:	eb1c 0202 	adds.w	r2, ip, r2
 80007f8:	f101 37ff 	add.w	r7, r1, #4294967295
 80007fc:	f080 811c 	bcs.w	8000a38 <__udivmoddi4+0x290>
 8000800:	4290      	cmp	r0, r2
 8000802:	f240 8119 	bls.w	8000a38 <__udivmoddi4+0x290>
 8000806:	3902      	subs	r1, #2
 8000808:	4462      	add	r2, ip
 800080a:	1a12      	subs	r2, r2, r0
 800080c:	b2a4      	uxth	r4, r4
 800080e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000812:	fb0e 2210 	mls	r2, lr, r0, r2
 8000816:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800081a:	fb00 f505 	mul.w	r5, r0, r5
 800081e:	42a5      	cmp	r5, r4
 8000820:	d90a      	bls.n	8000838 <__udivmoddi4+0x90>
 8000822:	eb1c 0404 	adds.w	r4, ip, r4
 8000826:	f100 32ff 	add.w	r2, r0, #4294967295
 800082a:	f080 8107 	bcs.w	8000a3c <__udivmoddi4+0x294>
 800082e:	42a5      	cmp	r5, r4
 8000830:	f240 8104 	bls.w	8000a3c <__udivmoddi4+0x294>
 8000834:	4464      	add	r4, ip
 8000836:	3802      	subs	r0, #2
 8000838:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800083c:	1b64      	subs	r4, r4, r5
 800083e:	2100      	movs	r1, #0
 8000840:	b11e      	cbz	r6, 800084a <__udivmoddi4+0xa2>
 8000842:	40dc      	lsrs	r4, r3
 8000844:	2300      	movs	r3, #0
 8000846:	e9c6 4300 	strd	r4, r3, [r6]
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	428b      	cmp	r3, r1
 8000850:	d908      	bls.n	8000864 <__udivmoddi4+0xbc>
 8000852:	2e00      	cmp	r6, #0
 8000854:	f000 80ed 	beq.w	8000a32 <__udivmoddi4+0x28a>
 8000858:	2100      	movs	r1, #0
 800085a:	e9c6 0500 	strd	r0, r5, [r6]
 800085e:	4608      	mov	r0, r1
 8000860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000864:	fab3 f183 	clz	r1, r3
 8000868:	2900      	cmp	r1, #0
 800086a:	d149      	bne.n	8000900 <__udivmoddi4+0x158>
 800086c:	42ab      	cmp	r3, r5
 800086e:	d302      	bcc.n	8000876 <__udivmoddi4+0xce>
 8000870:	4282      	cmp	r2, r0
 8000872:	f200 80f8 	bhi.w	8000a66 <__udivmoddi4+0x2be>
 8000876:	1a84      	subs	r4, r0, r2
 8000878:	eb65 0203 	sbc.w	r2, r5, r3
 800087c:	2001      	movs	r0, #1
 800087e:	4617      	mov	r7, r2
 8000880:	2e00      	cmp	r6, #0
 8000882:	d0e2      	beq.n	800084a <__udivmoddi4+0xa2>
 8000884:	e9c6 4700 	strd	r4, r7, [r6]
 8000888:	e7df      	b.n	800084a <__udivmoddi4+0xa2>
 800088a:	b902      	cbnz	r2, 800088e <__udivmoddi4+0xe6>
 800088c:	deff      	udf	#255	; 0xff
 800088e:	fab2 f382 	clz	r3, r2
 8000892:	2b00      	cmp	r3, #0
 8000894:	f040 8090 	bne.w	80009b8 <__udivmoddi4+0x210>
 8000898:	1a8a      	subs	r2, r1, r2
 800089a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800089e:	fa1f fe8c 	uxth.w	lr, ip
 80008a2:	2101      	movs	r1, #1
 80008a4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008a8:	fb07 2015 	mls	r0, r7, r5, r2
 80008ac:	0c22      	lsrs	r2, r4, #16
 80008ae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008b2:	fb0e f005 	mul.w	r0, lr, r5
 80008b6:	4290      	cmp	r0, r2
 80008b8:	d908      	bls.n	80008cc <__udivmoddi4+0x124>
 80008ba:	eb1c 0202 	adds.w	r2, ip, r2
 80008be:	f105 38ff 	add.w	r8, r5, #4294967295
 80008c2:	d202      	bcs.n	80008ca <__udivmoddi4+0x122>
 80008c4:	4290      	cmp	r0, r2
 80008c6:	f200 80cb 	bhi.w	8000a60 <__udivmoddi4+0x2b8>
 80008ca:	4645      	mov	r5, r8
 80008cc:	1a12      	subs	r2, r2, r0
 80008ce:	b2a4      	uxth	r4, r4
 80008d0:	fbb2 f0f7 	udiv	r0, r2, r7
 80008d4:	fb07 2210 	mls	r2, r7, r0, r2
 80008d8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008dc:	fb0e fe00 	mul.w	lr, lr, r0
 80008e0:	45a6      	cmp	lr, r4
 80008e2:	d908      	bls.n	80008f6 <__udivmoddi4+0x14e>
 80008e4:	eb1c 0404 	adds.w	r4, ip, r4
 80008e8:	f100 32ff 	add.w	r2, r0, #4294967295
 80008ec:	d202      	bcs.n	80008f4 <__udivmoddi4+0x14c>
 80008ee:	45a6      	cmp	lr, r4
 80008f0:	f200 80bb 	bhi.w	8000a6a <__udivmoddi4+0x2c2>
 80008f4:	4610      	mov	r0, r2
 80008f6:	eba4 040e 	sub.w	r4, r4, lr
 80008fa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80008fe:	e79f      	b.n	8000840 <__udivmoddi4+0x98>
 8000900:	f1c1 0720 	rsb	r7, r1, #32
 8000904:	408b      	lsls	r3, r1
 8000906:	fa22 fc07 	lsr.w	ip, r2, r7
 800090a:	ea4c 0c03 	orr.w	ip, ip, r3
 800090e:	fa05 f401 	lsl.w	r4, r5, r1
 8000912:	fa20 f307 	lsr.w	r3, r0, r7
 8000916:	40fd      	lsrs	r5, r7
 8000918:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800091c:	4323      	orrs	r3, r4
 800091e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000922:	fa1f fe8c 	uxth.w	lr, ip
 8000926:	fb09 5518 	mls	r5, r9, r8, r5
 800092a:	0c1c      	lsrs	r4, r3, #16
 800092c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000930:	fb08 f50e 	mul.w	r5, r8, lr
 8000934:	42a5      	cmp	r5, r4
 8000936:	fa02 f201 	lsl.w	r2, r2, r1
 800093a:	fa00 f001 	lsl.w	r0, r0, r1
 800093e:	d90b      	bls.n	8000958 <__udivmoddi4+0x1b0>
 8000940:	eb1c 0404 	adds.w	r4, ip, r4
 8000944:	f108 3aff 	add.w	sl, r8, #4294967295
 8000948:	f080 8088 	bcs.w	8000a5c <__udivmoddi4+0x2b4>
 800094c:	42a5      	cmp	r5, r4
 800094e:	f240 8085 	bls.w	8000a5c <__udivmoddi4+0x2b4>
 8000952:	f1a8 0802 	sub.w	r8, r8, #2
 8000956:	4464      	add	r4, ip
 8000958:	1b64      	subs	r4, r4, r5
 800095a:	b29d      	uxth	r5, r3
 800095c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000960:	fb09 4413 	mls	r4, r9, r3, r4
 8000964:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000968:	fb03 fe0e 	mul.w	lr, r3, lr
 800096c:	45a6      	cmp	lr, r4
 800096e:	d908      	bls.n	8000982 <__udivmoddi4+0x1da>
 8000970:	eb1c 0404 	adds.w	r4, ip, r4
 8000974:	f103 35ff 	add.w	r5, r3, #4294967295
 8000978:	d26c      	bcs.n	8000a54 <__udivmoddi4+0x2ac>
 800097a:	45a6      	cmp	lr, r4
 800097c:	d96a      	bls.n	8000a54 <__udivmoddi4+0x2ac>
 800097e:	3b02      	subs	r3, #2
 8000980:	4464      	add	r4, ip
 8000982:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000986:	fba3 9502 	umull	r9, r5, r3, r2
 800098a:	eba4 040e 	sub.w	r4, r4, lr
 800098e:	42ac      	cmp	r4, r5
 8000990:	46c8      	mov	r8, r9
 8000992:	46ae      	mov	lr, r5
 8000994:	d356      	bcc.n	8000a44 <__udivmoddi4+0x29c>
 8000996:	d053      	beq.n	8000a40 <__udivmoddi4+0x298>
 8000998:	b156      	cbz	r6, 80009b0 <__udivmoddi4+0x208>
 800099a:	ebb0 0208 	subs.w	r2, r0, r8
 800099e:	eb64 040e 	sbc.w	r4, r4, lr
 80009a2:	fa04 f707 	lsl.w	r7, r4, r7
 80009a6:	40ca      	lsrs	r2, r1
 80009a8:	40cc      	lsrs	r4, r1
 80009aa:	4317      	orrs	r7, r2
 80009ac:	e9c6 7400 	strd	r7, r4, [r6]
 80009b0:	4618      	mov	r0, r3
 80009b2:	2100      	movs	r1, #0
 80009b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b8:	f1c3 0120 	rsb	r1, r3, #32
 80009bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80009c0:	fa20 f201 	lsr.w	r2, r0, r1
 80009c4:	fa25 f101 	lsr.w	r1, r5, r1
 80009c8:	409d      	lsls	r5, r3
 80009ca:	432a      	orrs	r2, r5
 80009cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d0:	fa1f fe8c 	uxth.w	lr, ip
 80009d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009d8:	fb07 1510 	mls	r5, r7, r0, r1
 80009dc:	0c11      	lsrs	r1, r2, #16
 80009de:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80009e2:	fb00 f50e 	mul.w	r5, r0, lr
 80009e6:	428d      	cmp	r5, r1
 80009e8:	fa04 f403 	lsl.w	r4, r4, r3
 80009ec:	d908      	bls.n	8000a00 <__udivmoddi4+0x258>
 80009ee:	eb1c 0101 	adds.w	r1, ip, r1
 80009f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80009f6:	d22f      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 80009f8:	428d      	cmp	r5, r1
 80009fa:	d92d      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 80009fc:	3802      	subs	r0, #2
 80009fe:	4461      	add	r1, ip
 8000a00:	1b49      	subs	r1, r1, r5
 8000a02:	b292      	uxth	r2, r2
 8000a04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a08:	fb07 1115 	mls	r1, r7, r5, r1
 8000a0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a10:	fb05 f10e 	mul.w	r1, r5, lr
 8000a14:	4291      	cmp	r1, r2
 8000a16:	d908      	bls.n	8000a2a <__udivmoddi4+0x282>
 8000a18:	eb1c 0202 	adds.w	r2, ip, r2
 8000a1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a20:	d216      	bcs.n	8000a50 <__udivmoddi4+0x2a8>
 8000a22:	4291      	cmp	r1, r2
 8000a24:	d914      	bls.n	8000a50 <__udivmoddi4+0x2a8>
 8000a26:	3d02      	subs	r5, #2
 8000a28:	4462      	add	r2, ip
 8000a2a:	1a52      	subs	r2, r2, r1
 8000a2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a30:	e738      	b.n	80008a4 <__udivmoddi4+0xfc>
 8000a32:	4631      	mov	r1, r6
 8000a34:	4630      	mov	r0, r6
 8000a36:	e708      	b.n	800084a <__udivmoddi4+0xa2>
 8000a38:	4639      	mov	r1, r7
 8000a3a:	e6e6      	b.n	800080a <__udivmoddi4+0x62>
 8000a3c:	4610      	mov	r0, r2
 8000a3e:	e6fb      	b.n	8000838 <__udivmoddi4+0x90>
 8000a40:	4548      	cmp	r0, r9
 8000a42:	d2a9      	bcs.n	8000998 <__udivmoddi4+0x1f0>
 8000a44:	ebb9 0802 	subs.w	r8, r9, r2
 8000a48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	e7a3      	b.n	8000998 <__udivmoddi4+0x1f0>
 8000a50:	4645      	mov	r5, r8
 8000a52:	e7ea      	b.n	8000a2a <__udivmoddi4+0x282>
 8000a54:	462b      	mov	r3, r5
 8000a56:	e794      	b.n	8000982 <__udivmoddi4+0x1da>
 8000a58:	4640      	mov	r0, r8
 8000a5a:	e7d1      	b.n	8000a00 <__udivmoddi4+0x258>
 8000a5c:	46d0      	mov	r8, sl
 8000a5e:	e77b      	b.n	8000958 <__udivmoddi4+0x1b0>
 8000a60:	3d02      	subs	r5, #2
 8000a62:	4462      	add	r2, ip
 8000a64:	e732      	b.n	80008cc <__udivmoddi4+0x124>
 8000a66:	4608      	mov	r0, r1
 8000a68:	e70a      	b.n	8000880 <__udivmoddi4+0xd8>
 8000a6a:	4464      	add	r4, ip
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	e742      	b.n	80008f6 <__udivmoddi4+0x14e>

08000a70 <__aeabi_idiv0>:
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a78:	f001 f93e 	bl	8001cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a7c:	f000 f81e 	bl	8000abc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a80:	f000 fab8 	bl	8000ff4 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000a84:	f000 f97c 	bl	8000d80 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000a88:	f000 f9c8 	bl	8000e1c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a8c:	f000 fa14 	bl	8000eb8 <MX_USART2_UART_Init>
  MX_FMC_Init();
 8000a90:	f000 fa5e 	bl	8000f50 <MX_FMC_Init>
  MX_LTDC_Init();
 8000a94:	f000 f8c6 	bl	8000c24 <MX_LTDC_Init>
  MX_DMA2D_Init();
 8000a98:	f000 f88a 	bl	8000bb0 <MX_DMA2D_Init>
  MX_QUADSPI_Init();
 8000a9c:	f000 f944 	bl	8000d28 <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */
  log_com_uart_init();
 8000aa0:	f00b f8b4 	bl	800bc0c <log_com_uart_init>
  user_delay_init(400);
 8000aa4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000aa8:	f00b f806 	bl	800bab8 <user_delay_init>
//  printf("STM32H743 SDRAM Test \r\n");

  SDRAM_Init();
 8000aac:	f00a ffd8 	bl	800ba60 <SDRAM_Init>
//      printf("SDRAM Test success\r\n");
//  } else {
//      printf("SDRAM Test fail\r\n");
//  }

  W25QXX_Init();
 8000ab0:	f00a ff5e 	bl	800b970 <W25QXX_Init>
//	  test_spi_id = W25QXX_ReadID();
//	  printf("test_spi_id = %x \r\n",test_spi_id);
//	  HAL_Delay(1000);
//	  test_spi_flash();
//	  test_picture_show();
	  TFTLCD_test();
 8000ab4:	f00a f8a4 	bl	800ac00 <TFTLCD_test>
 8000ab8:	e7fc      	b.n	8000ab4 <main+0x40>
	...

08000abc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b09c      	sub	sp, #112	; 0x70
 8000ac0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac6:	224c      	movs	r2, #76	; 0x4c
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f00c f8ce 	bl	800cc6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	2220      	movs	r2, #32
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f00c f8c8 	bl	800cc6c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000adc:	2002      	movs	r0, #2
 8000ade:	f002 ff8f 	bl	8003a00 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	603b      	str	r3, [r7, #0]
 8000ae6:	4b30      	ldr	r3, [pc, #192]	; (8000ba8 <SystemClock_Config+0xec>)
 8000ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aea:	4a2f      	ldr	r2, [pc, #188]	; (8000ba8 <SystemClock_Config+0xec>)
 8000aec:	f023 0301 	bic.w	r3, r3, #1
 8000af0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000af2:	4b2d      	ldr	r3, [pc, #180]	; (8000ba8 <SystemClock_Config+0xec>)
 8000af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	4b2b      	ldr	r3, [pc, #172]	; (8000bac <SystemClock_Config+0xf0>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4a2a      	ldr	r2, [pc, #168]	; (8000bac <SystemClock_Config+0xf0>)
 8000b02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b06:	6193      	str	r3, [r2, #24]
 8000b08:	4b28      	ldr	r3, [pc, #160]	; (8000bac <SystemClock_Config+0xf0>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b10:	603b      	str	r3, [r7, #0]
 8000b12:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b14:	bf00      	nop
 8000b16:	4b25      	ldr	r3, [pc, #148]	; (8000bac <SystemClock_Config+0xf0>)
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b22:	d1f8      	bne.n	8000b16 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b24:	2301      	movs	r3, #1
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b32:	2302      	movs	r3, #2
 8000b34:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000b36:	2302      	movs	r3, #2
 8000b38:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000b3a:	2340      	movs	r3, #64	; 0x40
 8000b3c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b42:	2302      	movs	r3, #2
 8000b44:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b46:	2302      	movs	r3, #2
 8000b48:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b4a:	230c      	movs	r3, #12
 8000b4c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f003 fb56 	bl	800420c <HAL_RCC_OscConfig>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b66:	f000 fb61 	bl	800122c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b6a:	233f      	movs	r3, #63	; 0x3f
 8000b6c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b76:	2308      	movs	r3, #8
 8000b78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b7a:	2340      	movs	r3, #64	; 0x40
 8000b7c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b7e:	2340      	movs	r3, #64	; 0x40
 8000b80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b86:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b88:	2340      	movs	r3, #64	; 0x40
 8000b8a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	2102      	movs	r1, #2
 8000b90:	4618      	mov	r0, r3
 8000b92:	f003 ff95 	bl	8004ac0 <HAL_RCC_ClockConfig>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000b9c:	f000 fb46 	bl	800122c <Error_Handler>
  }
}
 8000ba0:	bf00      	nop
 8000ba2:	3770      	adds	r7, #112	; 0x70
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	58000400 	.word	0x58000400
 8000bac:	58024800 	.word	0x58024800

08000bb0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000bb4:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <MX_DMA2D_Init+0x6c>)
 8000bb6:	4a1a      	ldr	r2, [pc, #104]	; (8000c20 <MX_DMA2D_Init+0x70>)
 8000bb8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000bba:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <MX_DMA2D_Init+0x6c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000bc0:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <MX_DMA2D_Init+0x6c>)
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <MX_DMA2D_Init+0x6c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000bcc:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <MX_DMA2D_Init+0x6c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000bd2:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <MX_DMA2D_Init+0x6c>)
 8000bd4:	2202      	movs	r2, #2
 8000bd6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000bd8:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <MX_DMA2D_Init+0x6c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000bde:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <MX_DMA2D_Init+0x6c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000be4:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <MX_DMA2D_Init+0x6c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <MX_DMA2D_Init+0x6c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <MX_DMA2D_Init+0x6c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000bf6:	4809      	ldr	r0, [pc, #36]	; (8000c1c <MX_DMA2D_Init+0x6c>)
 8000bf8:	f001 ffac 	bl	8002b54 <HAL_DMA2D_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000c02:	f000 fb13 	bl	800122c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000c06:	2101      	movs	r1, #1
 8000c08:	4804      	ldr	r0, [pc, #16]	; (8000c1c <MX_DMA2D_Init+0x6c>)
 8000c0a:	f002 f917 	bl	8002e3c <HAL_DMA2D_ConfigLayer>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8000c14:	f000 fb0a 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	240001f4 	.word	0x240001f4
 8000c20:	52001000 	.word	0x52001000

08000c24 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08e      	sub	sp, #56	; 0x38
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	2234      	movs	r2, #52	; 0x34
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f00c f81b 	bl	800cc6c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000c36:	4b3a      	ldr	r3, [pc, #232]	; (8000d20 <MX_LTDC_Init+0xfc>)
 8000c38:	4a3a      	ldr	r2, [pc, #232]	; (8000d24 <MX_LTDC_Init+0x100>)
 8000c3a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c3c:	4b38      	ldr	r3, [pc, #224]	; (8000d20 <MX_LTDC_Init+0xfc>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000c42:	4b37      	ldr	r3, [pc, #220]	; (8000d20 <MX_LTDC_Init+0xfc>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c48:	4b35      	ldr	r3, [pc, #212]	; (8000d20 <MX_LTDC_Init+0xfc>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c4e:	4b34      	ldr	r3, [pc, #208]	; (8000d20 <MX_LTDC_Init+0xfc>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 19;
 8000c54:	4b32      	ldr	r3, [pc, #200]	; (8000d20 <MX_LTDC_Init+0xfc>)
 8000c56:	2213      	movs	r2, #19
 8000c58:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 2;
 8000c5a:	4b31      	ldr	r3, [pc, #196]	; (8000d20 <MX_LTDC_Init+0xfc>)
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 159;
 8000c60:	4b2f      	ldr	r3, [pc, #188]	; (8000d20 <MX_LTDC_Init+0xfc>)
 8000c62:	229f      	movs	r2, #159	; 0x9f
 8000c64:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 22;
 8000c66:	4b2e      	ldr	r3, [pc, #184]	; (8000d20 <MX_LTDC_Init+0xfc>)
 8000c68:	2216      	movs	r2, #22
 8000c6a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 1183;
 8000c6c:	4b2c      	ldr	r3, [pc, #176]	; (8000d20 <MX_LTDC_Init+0xfc>)
 8000c6e:	f240 429f 	movw	r2, #1183	; 0x49f
 8000c72:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 622;
 8000c74:	4b2a      	ldr	r3, [pc, #168]	; (8000d20 <MX_LTDC_Init+0xfc>)
 8000c76:	f240 226e 	movw	r2, #622	; 0x26e
 8000c7a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 1343;
 8000c7c:	4b28      	ldr	r3, [pc, #160]	; (8000d20 <MX_LTDC_Init+0xfc>)
 8000c7e:	f240 523f 	movw	r2, #1343	; 0x53f
 8000c82:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 634;
 8000c84:	4b26      	ldr	r3, [pc, #152]	; (8000d20 <MX_LTDC_Init+0xfc>)
 8000c86:	f240 227a 	movw	r2, #634	; 0x27a
 8000c8a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000c8c:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <MX_LTDC_Init+0xfc>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000c94:	4b22      	ldr	r3, [pc, #136]	; (8000d20 <MX_LTDC_Init+0xfc>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000c9c:	4b20      	ldr	r3, [pc, #128]	; (8000d20 <MX_LTDC_Init+0xfc>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000ca4:	481e      	ldr	r0, [pc, #120]	; (8000d20 <MX_LTDC_Init+0xfc>)
 8000ca6:	f002 fb41 	bl	800332c <HAL_LTDC_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000cb0:	f000 fabc 	bl	800122c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 1024;
 8000cb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cbc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 600;
 8000cc2:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000cc6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000ccc:	23ff      	movs	r3, #255	; 0xff
 8000cce:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000cd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cd8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000cda:	2305      	movs	r3, #5
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000cde:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 1024;
 8000ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 600;
 8000cea:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000cee:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	2200      	movs	r2, #0
 8000d06:	4619      	mov	r1, r3
 8000d08:	4805      	ldr	r0, [pc, #20]	; (8000d20 <MX_LTDC_Init+0xfc>)
 8000d0a:	f002 fca1 	bl	8003650 <HAL_LTDC_ConfigLayer>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000d14:	f000 fa8a 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000d18:	bf00      	nop
 8000d1a:	3738      	adds	r7, #56	; 0x38
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	2400025c 	.word	0x2400025c
 8000d24:	50001000 	.word	0x50001000

08000d28 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <MX_QUADSPI_Init+0x50>)
 8000d2e:	4a13      	ldr	r2, [pc, #76]	; (8000d7c <MX_QUADSPI_Init+0x54>)
 8000d30:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <MX_QUADSPI_Init+0x50>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000d38:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <MX_QUADSPI_Init+0x50>)
 8000d3a:	2204      	movs	r2, #4
 8000d3c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <MX_QUADSPI_Init+0x50>)
 8000d40:	2210      	movs	r2, #16
 8000d42:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <MX_QUADSPI_Init+0x50>)
 8000d46:	2218      	movs	r2, #24
 8000d48:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <MX_QUADSPI_Init+0x50>)
 8000d4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d50:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <MX_QUADSPI_Init+0x50>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000d58:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <MX_QUADSPI_Init+0x50>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <MX_QUADSPI_Init+0x50>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000d64:	4804      	ldr	r0, [pc, #16]	; (8000d78 <MX_QUADSPI_Init+0x50>)
 8000d66:	f002 fe85 	bl	8003a74 <HAL_QSPI_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000d70:	f000 fa5c 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	24000304 	.word	0x24000304
 8000d7c:	52005000 	.word	0x52005000

08000d80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d86:	f107 0310 	add.w	r3, r7, #16
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d9e:	4b1d      	ldr	r3, [pc, #116]	; (8000e14 <MX_TIM3_Init+0x94>)
 8000da0:	4a1d      	ldr	r2, [pc, #116]	; (8000e18 <MX_TIM3_Init+0x98>)
 8000da2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000da4:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <MX_TIM3_Init+0x94>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000daa:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <MX_TIM3_Init+0x94>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000db0:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <MX_TIM3_Init+0x94>)
 8000db2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000db6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db8:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <MX_TIM3_Init+0x94>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <MX_TIM3_Init+0x94>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dc4:	4813      	ldr	r0, [pc, #76]	; (8000e14 <MX_TIM3_Init+0x94>)
 8000dc6:	f006 f8cc 	bl	8006f62 <HAL_TIM_Base_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000dd0:	f000 fa2c 	bl	800122c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dda:	f107 0310 	add.w	r3, r7, #16
 8000dde:	4619      	mov	r1, r3
 8000de0:	480c      	ldr	r0, [pc, #48]	; (8000e14 <MX_TIM3_Init+0x94>)
 8000de2:	f006 fa35 	bl	8007250 <HAL_TIM_ConfigClockSource>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000dec:	f000 fa1e 	bl	800122c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df0:	2300      	movs	r3, #0
 8000df2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4805      	ldr	r0, [pc, #20]	; (8000e14 <MX_TIM3_Init+0x94>)
 8000dfe:	f006 fc89 	bl	8007714 <HAL_TIMEx_MasterConfigSynchronization>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000e08:	f000 fa10 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	3720      	adds	r7, #32
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	24000350 	.word	0x24000350
 8000e18:	40000400 	.word	0x40000400

08000e1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e20:	4b22      	ldr	r3, [pc, #136]	; (8000eac <MX_USART1_UART_Init+0x90>)
 8000e22:	4a23      	ldr	r2, [pc, #140]	; (8000eb0 <MX_USART1_UART_Init+0x94>)
 8000e24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8000e26:	4b21      	ldr	r3, [pc, #132]	; (8000eac <MX_USART1_UART_Init+0x90>)
 8000e28:	4a22      	ldr	r2, [pc, #136]	; (8000eb4 <MX_USART1_UART_Init+0x98>)
 8000e2a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e2c:	4b1f      	ldr	r3, [pc, #124]	; (8000eac <MX_USART1_UART_Init+0x90>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e32:	4b1e      	ldr	r3, [pc, #120]	; (8000eac <MX_USART1_UART_Init+0x90>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e38:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <MX_USART1_UART_Init+0x90>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e3e:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <MX_USART1_UART_Init+0x90>)
 8000e40:	220c      	movs	r2, #12
 8000e42:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e44:	4b19      	ldr	r3, [pc, #100]	; (8000eac <MX_USART1_UART_Init+0x90>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e4a:	4b18      	ldr	r3, [pc, #96]	; (8000eac <MX_USART1_UART_Init+0x90>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e50:	4b16      	ldr	r3, [pc, #88]	; (8000eac <MX_USART1_UART_Init+0x90>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <MX_USART1_UART_Init+0x90>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e5c:	4b13      	ldr	r3, [pc, #76]	; (8000eac <MX_USART1_UART_Init+0x90>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e62:	4812      	ldr	r0, [pc, #72]	; (8000eac <MX_USART1_UART_Init+0x90>)
 8000e64:	f006 fd02 	bl	800786c <HAL_UART_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8000e6e:	f000 f9dd 	bl	800122c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e72:	2100      	movs	r1, #0
 8000e74:	480d      	ldr	r0, [pc, #52]	; (8000eac <MX_USART1_UART_Init+0x90>)
 8000e76:	f009 fa8c 	bl	800a392 <HAL_UARTEx_SetTxFifoThreshold>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8000e80:	f000 f9d4 	bl	800122c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e84:	2100      	movs	r1, #0
 8000e86:	4809      	ldr	r0, [pc, #36]	; (8000eac <MX_USART1_UART_Init+0x90>)
 8000e88:	f009 fac1 	bl	800a40e <HAL_UARTEx_SetRxFifoThreshold>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000e92:	f000 f9cb 	bl	800122c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e96:	4805      	ldr	r0, [pc, #20]	; (8000eac <MX_USART1_UART_Init+0x90>)
 8000e98:	f009 fa42 	bl	800a320 <HAL_UARTEx_DisableFifoMode>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000ea2:	f000 f9c3 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	2400039c 	.word	0x2400039c
 8000eb0:	40011000 	.word	0x40011000
 8000eb4:	001e8480 	.word	0x001e8480

08000eb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ebc:	4b22      	ldr	r3, [pc, #136]	; (8000f48 <MX_USART2_UART_Init+0x90>)
 8000ebe:	4a23      	ldr	r2, [pc, #140]	; (8000f4c <MX_USART2_UART_Init+0x94>)
 8000ec0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ec2:	4b21      	ldr	r3, [pc, #132]	; (8000f48 <MX_USART2_UART_Init+0x90>)
 8000ec4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ec8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eca:	4b1f      	ldr	r3, [pc, #124]	; (8000f48 <MX_USART2_UART_Init+0x90>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ed0:	4b1d      	ldr	r3, [pc, #116]	; (8000f48 <MX_USART2_UART_Init+0x90>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ed6:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <MX_USART2_UART_Init+0x90>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000edc:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <MX_USART2_UART_Init+0x90>)
 8000ede:	220c      	movs	r2, #12
 8000ee0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ee2:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <MX_USART2_UART_Init+0x90>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee8:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <MX_USART2_UART_Init+0x90>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eee:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <MX_USART2_UART_Init+0x90>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ef4:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <MX_USART2_UART_Init+0x90>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000efa:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <MX_USART2_UART_Init+0x90>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f00:	4811      	ldr	r0, [pc, #68]	; (8000f48 <MX_USART2_UART_Init+0x90>)
 8000f02:	f006 fcb3 	bl	800786c <HAL_UART_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000f0c:	f000 f98e 	bl	800122c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f10:	2100      	movs	r1, #0
 8000f12:	480d      	ldr	r0, [pc, #52]	; (8000f48 <MX_USART2_UART_Init+0x90>)
 8000f14:	f009 fa3d 	bl	800a392 <HAL_UARTEx_SetTxFifoThreshold>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000f1e:	f000 f985 	bl	800122c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f22:	2100      	movs	r1, #0
 8000f24:	4808      	ldr	r0, [pc, #32]	; (8000f48 <MX_USART2_UART_Init+0x90>)
 8000f26:	f009 fa72 	bl	800a40e <HAL_UARTEx_SetRxFifoThreshold>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000f30:	f000 f97c 	bl	800122c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000f34:	4804      	ldr	r0, [pc, #16]	; (8000f48 <MX_USART2_UART_Init+0x90>)
 8000f36:	f009 f9f3 	bl	800a320 <HAL_UARTEx_DisableFifoMode>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000f40:	f000 f974 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	24000430 	.word	0x24000430
 8000f4c:	40004400 	.word	0x40004400

08000f50 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b088      	sub	sp, #32
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
 8000f64:	615a      	str	r2, [r3, #20]
 8000f66:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f68:	4b20      	ldr	r3, [pc, #128]	; (8000fec <MX_FMC_Init+0x9c>)
 8000f6a:	4a21      	ldr	r2, [pc, #132]	; (8000ff0 <MX_FMC_Init+0xa0>)
 8000f6c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000f6e:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <MX_FMC_Init+0x9c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000f74:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <MX_FMC_Init+0x9c>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000f7a:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <MX_FMC_Init+0x9c>)
 8000f7c:	2208      	movs	r2, #8
 8000f7e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000f80:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <MX_FMC_Init+0x9c>)
 8000f82:	2210      	movs	r2, #16
 8000f84:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000f86:	4b19      	ldr	r3, [pc, #100]	; (8000fec <MX_FMC_Init+0x9c>)
 8000f88:	2240      	movs	r2, #64	; 0x40
 8000f8a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000f8c:	4b17      	ldr	r3, [pc, #92]	; (8000fec <MX_FMC_Init+0x9c>)
 8000f8e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000f92:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000f94:	4b15      	ldr	r3, [pc, #84]	; (8000fec <MX_FMC_Init+0x9c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000f9a:	4b14      	ldr	r3, [pc, #80]	; (8000fec <MX_FMC_Init+0x9c>)
 8000f9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fa0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <MX_FMC_Init+0x9c>)
 8000fa4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fa8:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <MX_FMC_Init+0x9c>)
 8000fac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fb0:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 8;
 8000fb6:	2308      	movs	r3, #8
 8000fb8:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 6;
 8000fba:	2306      	movs	r3, #6
 8000fbc:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8000fbe:	2306      	movs	r3, #6
 8000fc0:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 6;
 8000fc2:	2306      	movs	r3, #6
 8000fc4:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4806      	ldr	r0, [pc, #24]	; (8000fec <MX_FMC_Init+0x9c>)
 8000fd4:	f005 ff2c 	bl	8006e30 <HAL_SDRAM_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_FMC_Init+0x92>
  {
    Error_Handler( );
 8000fde:	f000 f925 	bl	800122c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000fe2:	bf00      	nop
 8000fe4:	3720      	adds	r7, #32
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	240004c4 	.word	0x240004c4
 8000ff0:	52004140 	.word	0x52004140

08000ff4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08e      	sub	sp, #56	; 0x38
 8000ff8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800100a:	4b83      	ldr	r3, [pc, #524]	; (8001218 <MX_GPIO_Init+0x224>)
 800100c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001010:	4a81      	ldr	r2, [pc, #516]	; (8001218 <MX_GPIO_Init+0x224>)
 8001012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001016:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800101a:	4b7f      	ldr	r3, [pc, #508]	; (8001218 <MX_GPIO_Init+0x224>)
 800101c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001024:	623b      	str	r3, [r7, #32]
 8001026:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001028:	4b7b      	ldr	r3, [pc, #492]	; (8001218 <MX_GPIO_Init+0x224>)
 800102a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102e:	4a7a      	ldr	r2, [pc, #488]	; (8001218 <MX_GPIO_Init+0x224>)
 8001030:	f043 0304 	orr.w	r3, r3, #4
 8001034:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001038:	4b77      	ldr	r3, [pc, #476]	; (8001218 <MX_GPIO_Init+0x224>)
 800103a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	61fb      	str	r3, [r7, #28]
 8001044:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001046:	4b74      	ldr	r3, [pc, #464]	; (8001218 <MX_GPIO_Init+0x224>)
 8001048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104c:	4a72      	ldr	r2, [pc, #456]	; (8001218 <MX_GPIO_Init+0x224>)
 800104e:	f043 0320 	orr.w	r3, r3, #32
 8001052:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001056:	4b70      	ldr	r3, [pc, #448]	; (8001218 <MX_GPIO_Init+0x224>)
 8001058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800105c:	f003 0320 	and.w	r3, r3, #32
 8001060:	61bb      	str	r3, [r7, #24]
 8001062:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001064:	4b6c      	ldr	r3, [pc, #432]	; (8001218 <MX_GPIO_Init+0x224>)
 8001066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800106a:	4a6b      	ldr	r2, [pc, #428]	; (8001218 <MX_GPIO_Init+0x224>)
 800106c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001070:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001074:	4b68      	ldr	r3, [pc, #416]	; (8001218 <MX_GPIO_Init+0x224>)
 8001076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800107a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001082:	4b65      	ldr	r3, [pc, #404]	; (8001218 <MX_GPIO_Init+0x224>)
 8001084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001088:	4a63      	ldr	r2, [pc, #396]	; (8001218 <MX_GPIO_Init+0x224>)
 800108a:	f043 0301 	orr.w	r3, r3, #1
 800108e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001092:	4b61      	ldr	r3, [pc, #388]	; (8001218 <MX_GPIO_Init+0x224>)
 8001094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001098:	f003 0301 	and.w	r3, r3, #1
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a0:	4b5d      	ldr	r3, [pc, #372]	; (8001218 <MX_GPIO_Init+0x224>)
 80010a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a6:	4a5c      	ldr	r2, [pc, #368]	; (8001218 <MX_GPIO_Init+0x224>)
 80010a8:	f043 0302 	orr.w	r3, r3, #2
 80010ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010b0:	4b59      	ldr	r3, [pc, #356]	; (8001218 <MX_GPIO_Init+0x224>)
 80010b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010be:	4b56      	ldr	r3, [pc, #344]	; (8001218 <MX_GPIO_Init+0x224>)
 80010c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c4:	4a54      	ldr	r2, [pc, #336]	; (8001218 <MX_GPIO_Init+0x224>)
 80010c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ce:	4b52      	ldr	r3, [pc, #328]	; (8001218 <MX_GPIO_Init+0x224>)
 80010d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010dc:	4b4e      	ldr	r3, [pc, #312]	; (8001218 <MX_GPIO_Init+0x224>)
 80010de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e2:	4a4d      	ldr	r2, [pc, #308]	; (8001218 <MX_GPIO_Init+0x224>)
 80010e4:	f043 0310 	orr.w	r3, r3, #16
 80010e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ec:	4b4a      	ldr	r3, [pc, #296]	; (8001218 <MX_GPIO_Init+0x224>)
 80010ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f2:	f003 0310 	and.w	r3, r3, #16
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010fa:	4b47      	ldr	r3, [pc, #284]	; (8001218 <MX_GPIO_Init+0x224>)
 80010fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001100:	4a45      	ldr	r2, [pc, #276]	; (8001218 <MX_GPIO_Init+0x224>)
 8001102:	f043 0308 	orr.w	r3, r3, #8
 8001106:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800110a:	4b43      	ldr	r3, [pc, #268]	; (8001218 <MX_GPIO_Init+0x224>)
 800110c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001110:	f003 0308 	and.w	r3, r3, #8
 8001114:	603b      	str	r3, [r7, #0]
 8001116:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, TP_CS_Pin|TP_SDA_Pin, GPIO_PIN_SET);
 8001118:	2201      	movs	r2, #1
 800111a:	f44f 7184 	mov.w	r1, #264	; 0x108
 800111e:	483f      	ldr	r0, [pc, #252]	; (800121c <MX_GPIO_Init+0x228>)
 8001120:	f002 f8ea 	bl	80032f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED0_Pin|LCD_BL_Pin, GPIO_PIN_SET);
 8001124:	2201      	movs	r2, #1
 8001126:	2123      	movs	r1, #35	; 0x23
 8001128:	483d      	ldr	r0, [pc, #244]	; (8001220 <MX_GPIO_Init+0x22c>)
 800112a:	f002 f8e5 	bl	80032f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_SCK_GPIO_Port, TP_SCK_Pin, GPIO_PIN_SET);
 800112e:	2201      	movs	r2, #1
 8001130:	2140      	movs	r1, #64	; 0x40
 8001132:	483c      	ldr	r0, [pc, #240]	; (8001224 <MX_GPIO_Init+0x230>)
 8001134:	f002 f8e0 	bl	80032f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TP_CS_Pin */
  GPIO_InitStruct.Pin = TP_CS_Pin;
 8001138:	f44f 7380 	mov.w	r3, #256	; 0x100
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113e:	2301      	movs	r3, #1
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001142:	2301      	movs	r3, #1
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	2300      	movs	r3, #0
 8001148:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TP_CS_GPIO_Port, &GPIO_InitStruct);
 800114a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114e:	4619      	mov	r1, r3
 8001150:	4832      	ldr	r0, [pc, #200]	; (800121c <MX_GPIO_Init+0x228>)
 8001152:	f001 ff21 	bl	8002f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY2_Pin */
  GPIO_InitStruct.Pin = KEY2_Pin;
 8001156:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115c:	2300      	movs	r3, #0
 800115e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001160:	2301      	movs	r3, #1
 8001162:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KEY2_GPIO_Port, &GPIO_InitStruct);
 8001164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001168:	4619      	mov	r1, r3
 800116a:	482f      	ldr	r0, [pc, #188]	; (8001228 <MX_GPIO_Init+0x234>)
 800116c:	f001 ff14 	bl	8002f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY1_Pin KEY0_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY0_Pin;
 8001170:	230c      	movs	r3, #12
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001174:	2300      	movs	r3, #0
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001178:	2301      	movs	r3, #1
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800117c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001180:	4619      	mov	r1, r3
 8001182:	4828      	ldr	r0, [pc, #160]	; (8001224 <MX_GPIO_Init+0x230>)
 8001184:	f001 ff08 	bl	8002f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED0_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED0_Pin;
 8001188:	2303      	movs	r3, #3
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118c:	2301      	movs	r3, #1
 800118e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001190:	2301      	movs	r3, #1
 8001192:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001194:	2302      	movs	r3, #2
 8001196:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119c:	4619      	mov	r1, r3
 800119e:	4820      	ldr	r0, [pc, #128]	; (8001220 <MX_GPIO_Init+0x22c>)
 80011a0:	f001 fefa 	bl	8002f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_SCK_Pin */
  GPIO_InitStruct.Pin = TP_SCK_Pin;
 80011a4:	2340      	movs	r3, #64	; 0x40
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a8:	2301      	movs	r3, #1
 80011aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011b0:	2302      	movs	r3, #2
 80011b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TP_SCK_GPIO_Port, &GPIO_InitStruct);
 80011b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b8:	4619      	mov	r1, r3
 80011ba:	481a      	ldr	r0, [pc, #104]	; (8001224 <MX_GPIO_Init+0x230>)
 80011bc:	f001 feec 	bl	8002f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_PEN_Pin */
  GPIO_InitStruct.Pin = TP_PEN_Pin;
 80011c0:	2380      	movs	r3, #128	; 0x80
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c4:	2300      	movs	r3, #0
 80011c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TP_PEN_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d0:	4619      	mov	r1, r3
 80011d2:	4814      	ldr	r0, [pc, #80]	; (8001224 <MX_GPIO_Init+0x230>)
 80011d4:	f001 fee0 	bl	8002f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_SDA_Pin */
  GPIO_InitStruct.Pin = TP_SDA_Pin;
 80011d8:	2308      	movs	r3, #8
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80011dc:	2311      	movs	r3, #17
 80011de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011e0:	2301      	movs	r3, #1
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TP_SDA_GPIO_Port, &GPIO_InitStruct);
 80011e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ec:	4619      	mov	r1, r3
 80011ee:	480b      	ldr	r0, [pc, #44]	; (800121c <MX_GPIO_Init+0x228>)
 80011f0:	f001 fed2 	bl	8002f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80011f4:	2320      	movs	r3, #32
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f8:	2301      	movs	r3, #1
 80011fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8001204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001208:	4619      	mov	r1, r3
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_GPIO_Init+0x22c>)
 800120c:	f001 fec4 	bl	8002f98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001210:	bf00      	nop
 8001212:	3738      	adds	r7, #56	; 0x38
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	58024400 	.word	0x58024400
 800121c:	58022000 	.word	0x58022000
 8001220:	58020400 	.word	0x58020400
 8001224:	58021c00 	.word	0x58021c00
 8001228:	58020800 	.word	0x58020800

0800122c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001230:	b672      	cpsid	i
}
 8001232:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001234:	e7fe      	b.n	8001234 <Error_Handler+0x8>
	...

08001238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123e:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <HAL_MspInit+0x30>)
 8001240:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001244:	4a08      	ldr	r2, [pc, #32]	; (8001268 <HAL_MspInit+0x30>)
 8001246:	f043 0302 	orr.w	r3, r3, #2
 800124a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_MspInit+0x30>)
 8001250:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	58024400 	.word	0x58024400

0800126c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a0e      	ldr	r2, [pc, #56]	; (80012b4 <HAL_DMA2D_MspInit+0x48>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d116      	bne.n	80012ac <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <HAL_DMA2D_MspInit+0x4c>)
 8001280:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001284:	4a0c      	ldr	r2, [pc, #48]	; (80012b8 <HAL_DMA2D_MspInit+0x4c>)
 8001286:	f043 0310 	orr.w	r3, r3, #16
 800128a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <HAL_DMA2D_MspInit+0x4c>)
 8001290:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001294:	f003 0310 	and.w	r3, r3, #16
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800129c:	2200      	movs	r2, #0
 800129e:	2100      	movs	r1, #0
 80012a0:	205a      	movs	r0, #90	; 0x5a
 80012a2:	f000 fea2 	bl	8001fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80012a6:	205a      	movs	r0, #90	; 0x5a
 80012a8:	f000 feb9 	bl	800201e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80012ac:	bf00      	nop
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	52001000 	.word	0x52001000
 80012b8:	58024400 	.word	0x58024400

080012bc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b0be      	sub	sp, #248	; 0xf8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012d4:	f107 0320 	add.w	r3, r7, #32
 80012d8:	22c0      	movs	r2, #192	; 0xc0
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f00b fcc5 	bl	800cc6c <memset>
  if(hltdc->Instance==LTDC)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a6a      	ldr	r2, [pc, #424]	; (8001490 <HAL_LTDC_MspInit+0x1d4>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	f040 80cd 	bne.w	8001488 <HAL_LTDC_MspInit+0x1cc>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80012ee:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80012f2:	f04f 0300 	mov.w	r3, #0
 80012f6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 80012fa:	2320      	movs	r3, #32
 80012fc:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 80012fe:	23c0      	movs	r3, #192	; 0xc0
 8001300:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001302:	2302      	movs	r3, #2
 8001304:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001306:	2302      	movs	r3, #2
 8001308:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 3;
 800130a:	2303      	movs	r3, #3
 800130c:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800130e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001312:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001314:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001318:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800131e:	f107 0320 	add.w	r3, r7, #32
 8001322:	4618      	mov	r0, r3
 8001324:	f003 ff58 	bl	80051d8 <HAL_RCCEx_PeriphCLKConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 800132e:	f7ff ff7d 	bl	800122c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001332:	4b58      	ldr	r3, [pc, #352]	; (8001494 <HAL_LTDC_MspInit+0x1d8>)
 8001334:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001338:	4a56      	ldr	r2, [pc, #344]	; (8001494 <HAL_LTDC_MspInit+0x1d8>)
 800133a:	f043 0308 	orr.w	r3, r3, #8
 800133e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8001342:	4b54      	ldr	r3, [pc, #336]	; (8001494 <HAL_LTDC_MspInit+0x1d8>)
 8001344:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001348:	f003 0308 	and.w	r3, r3, #8
 800134c:	61fb      	str	r3, [r7, #28]
 800134e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001350:	4b50      	ldr	r3, [pc, #320]	; (8001494 <HAL_LTDC_MspInit+0x1d8>)
 8001352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001356:	4a4f      	ldr	r2, [pc, #316]	; (8001494 <HAL_LTDC_MspInit+0x1d8>)
 8001358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800135c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001360:	4b4c      	ldr	r3, [pc, #304]	; (8001494 <HAL_LTDC_MspInit+0x1d8>)
 8001362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136a:	61bb      	str	r3, [r7, #24]
 800136c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800136e:	4b49      	ldr	r3, [pc, #292]	; (8001494 <HAL_LTDC_MspInit+0x1d8>)
 8001370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001374:	4a47      	ldr	r2, [pc, #284]	; (8001494 <HAL_LTDC_MspInit+0x1d8>)
 8001376:	f043 0320 	orr.w	r3, r3, #32
 800137a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800137e:	4b45      	ldr	r3, [pc, #276]	; (8001494 <HAL_LTDC_MspInit+0x1d8>)
 8001380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001384:	f003 0320 	and.w	r3, r3, #32
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800138c:	4b41      	ldr	r3, [pc, #260]	; (8001494 <HAL_LTDC_MspInit+0x1d8>)
 800138e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001392:	4a40      	ldr	r2, [pc, #256]	; (8001494 <HAL_LTDC_MspInit+0x1d8>)
 8001394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001398:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800139c:	4b3d      	ldr	r3, [pc, #244]	; (8001494 <HAL_LTDC_MspInit+0x1d8>)
 800139e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013aa:	4b3a      	ldr	r3, [pc, #232]	; (8001494 <HAL_LTDC_MspInit+0x1d8>)
 80013ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b0:	4a38      	ldr	r2, [pc, #224]	; (8001494 <HAL_LTDC_MspInit+0x1d8>)
 80013b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ba:	4b36      	ldr	r3, [pc, #216]	; (8001494 <HAL_LTDC_MspInit+0x1d8>)
 80013bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]
    PI4     ------> LTDC_B4
    PI5     ------> LTDC_B5
    PI6     ------> LTDC_B6
    PI7     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1
 80013c8:	f240 63f7 	movw	r3, #1783	; 0x6f7
 80013cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013dc:	2303      	movs	r3, #3
 80013de:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013e2:	230e      	movs	r3, #14
 80013e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013e8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80013ec:	4619      	mov	r1, r3
 80013ee:	482a      	ldr	r0, [pc, #168]	; (8001498 <HAL_LTDC_MspInit+0x1dc>)
 80013f0:	f001 fdd2 	bl	8002f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fc:	2302      	movs	r3, #2
 80013fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001408:	2303      	movs	r3, #3
 800140a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800140e:	230e      	movs	r3, #14
 8001410:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001414:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001418:	4619      	mov	r1, r3
 800141a:	4820      	ldr	r0, [pc, #128]	; (800149c <HAL_LTDC_MspInit+0x1e0>)
 800141c:	f001 fdbc 	bl	8002f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8001420:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8001424:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001434:	2303      	movs	r3, #3
 8001436:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800143a:	230e      	movs	r3, #14
 800143c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001440:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001444:	4619      	mov	r1, r3
 8001446:	4816      	ldr	r0, [pc, #88]	; (80014a0 <HAL_LTDC_MspInit+0x1e4>)
 8001448:	f001 fda6 	bl	8002f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 800144c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001450:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001454:	2302      	movs	r3, #2
 8001456:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001460:	2303      	movs	r3, #3
 8001462:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001466:	230e      	movs	r3, #14
 8001468:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800146c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001470:	4619      	mov	r1, r3
 8001472:	480c      	ldr	r0, [pc, #48]	; (80014a4 <HAL_LTDC_MspInit+0x1e8>)
 8001474:	f001 fd90 	bl	8002f98 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 1, 0);
 8001478:	2200      	movs	r2, #0
 800147a:	2101      	movs	r1, #1
 800147c:	2058      	movs	r0, #88	; 0x58
 800147e:	f000 fdb4 	bl	8001fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001482:	2058      	movs	r0, #88	; 0x58
 8001484:	f000 fdcb 	bl	800201e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001488:	bf00      	nop
 800148a:	37f8      	adds	r7, #248	; 0xf8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	50001000 	.word	0x50001000
 8001494:	58024400 	.word	0x58024400
 8001498:	58022000 	.word	0x58022000
 800149c:	58021400 	.word	0x58021400
 80014a0:	58021c00 	.word	0x58021c00
 80014a4:	58021800 	.word	0x58021800

080014a8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b0bc      	sub	sp, #240	; 0xf0
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014c0:	f107 0318 	add.w	r3, r7, #24
 80014c4:	22c0      	movs	r2, #192	; 0xc0
 80014c6:	2100      	movs	r1, #0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f00b fbcf 	bl	800cc6c <memset>
  if(hqspi->Instance==QUADSPI)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a4e      	ldr	r2, [pc, #312]	; (800160c <HAL_QSPI_MspInit+0x164>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	f040 8094 	bne.w	8001602 <HAL_QSPI_MspInit+0x15a>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80014da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014de:	f04f 0300 	mov.w	r3, #0
 80014e2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80014e6:	2300      	movs	r3, #0
 80014e8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ea:	f107 0318 	add.w	r3, r7, #24
 80014ee:	4618      	mov	r0, r3
 80014f0:	f003 fe72 	bl	80051d8 <HAL_RCCEx_PeriphCLKConfig>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 80014fa:	f7ff fe97 	bl	800122c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80014fe:	4b44      	ldr	r3, [pc, #272]	; (8001610 <HAL_QSPI_MspInit+0x168>)
 8001500:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001504:	4a42      	ldr	r2, [pc, #264]	; (8001610 <HAL_QSPI_MspInit+0x168>)
 8001506:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800150a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800150e:	4b40      	ldr	r3, [pc, #256]	; (8001610 <HAL_QSPI_MspInit+0x168>)
 8001510:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001514:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001518:	617b      	str	r3, [r7, #20]
 800151a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800151c:	4b3c      	ldr	r3, [pc, #240]	; (8001610 <HAL_QSPI_MspInit+0x168>)
 800151e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001522:	4a3b      	ldr	r2, [pc, #236]	; (8001610 <HAL_QSPI_MspInit+0x168>)
 8001524:	f043 0320 	orr.w	r3, r3, #32
 8001528:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800152c:	4b38      	ldr	r3, [pc, #224]	; (8001610 <HAL_QSPI_MspInit+0x168>)
 800152e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001532:	f003 0320 	and.w	r3, r3, #32
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153a:	4b35      	ldr	r3, [pc, #212]	; (8001610 <HAL_QSPI_MspInit+0x168>)
 800153c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001540:	4a33      	ldr	r2, [pc, #204]	; (8001610 <HAL_QSPI_MspInit+0x168>)
 8001542:	f043 0302 	orr.w	r3, r3, #2
 8001546:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800154a:	4b31      	ldr	r3, [pc, #196]	; (8001610 <HAL_QSPI_MspInit+0x168>)
 800154c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	68fb      	ldr	r3, [r7, #12]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001558:	23c0      	movs	r3, #192	; 0xc0
 800155a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	2302      	movs	r3, #2
 8001560:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156a:	2303      	movs	r3, #3
 800156c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001570:	2309      	movs	r3, #9
 8001572:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001576:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800157a:	4619      	mov	r1, r3
 800157c:	4825      	ldr	r0, [pc, #148]	; (8001614 <HAL_QSPI_MspInit+0x16c>)
 800157e:	f001 fd0b 	bl	8002f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001582:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001586:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001596:	2303      	movs	r3, #3
 8001598:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800159c:	230a      	movs	r3, #10
 800159e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015a2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015a6:	4619      	mov	r1, r3
 80015a8:	481a      	ldr	r0, [pc, #104]	; (8001614 <HAL_QSPI_MspInit+0x16c>)
 80015aa:	f001 fcf5 	bl	8002f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015ae:	2304      	movs	r3, #4
 80015b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c0:	2303      	movs	r3, #3
 80015c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80015c6:	2309      	movs	r3, #9
 80015c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015d0:	4619      	mov	r1, r3
 80015d2:	4811      	ldr	r0, [pc, #68]	; (8001618 <HAL_QSPI_MspInit+0x170>)
 80015d4:	f001 fce0 	bl	8002f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015d8:	2340      	movs	r3, #64	; 0x40
 80015da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015de:	2302      	movs	r3, #2
 80015e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ea:	2303      	movs	r3, #3
 80015ec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80015f0:	230a      	movs	r3, #10
 80015f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015fa:	4619      	mov	r1, r3
 80015fc:	4806      	ldr	r0, [pc, #24]	; (8001618 <HAL_QSPI_MspInit+0x170>)
 80015fe:	f001 fccb 	bl	8002f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001602:	bf00      	nop
 8001604:	37f0      	adds	r7, #240	; 0xf0
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	52005000 	.word	0x52005000
 8001610:	58024400 	.word	0x58024400
 8001614:	58021400 	.word	0x58021400
 8001618:	58020400 	.word	0x58020400

0800161c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0e      	ldr	r2, [pc, #56]	; (8001664 <HAL_TIM_Base_MspInit+0x48>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d116      	bne.n	800165c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <HAL_TIM_Base_MspInit+0x4c>)
 8001630:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001634:	4a0c      	ldr	r2, [pc, #48]	; (8001668 <HAL_TIM_Base_MspInit+0x4c>)
 8001636:	f043 0302 	orr.w	r3, r3, #2
 800163a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <HAL_TIM_Base_MspInit+0x4c>)
 8001640:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800164c:	2200      	movs	r2, #0
 800164e:	2101      	movs	r1, #1
 8001650:	201d      	movs	r0, #29
 8001652:	f000 fcca 	bl	8001fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001656:	201d      	movs	r0, #29
 8001658:	f000 fce1 	bl	800201e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800165c:	bf00      	nop
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40000400 	.word	0x40000400
 8001668:	58024400 	.word	0x58024400

0800166c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b0bc      	sub	sp, #240	; 0xf0
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001684:	f107 0318 	add.w	r3, r7, #24
 8001688:	22c0      	movs	r2, #192	; 0xc0
 800168a:	2100      	movs	r1, #0
 800168c:	4618      	mov	r0, r3
 800168e:	f00b faed 	bl	800cc6c <memset>
  if(huart->Instance==USART1)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a55      	ldr	r2, [pc, #340]	; (80017ec <HAL_UART_MspInit+0x180>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d14f      	bne.n	800173c <HAL_UART_MspInit+0xd0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800169c:	f04f 0201 	mov.w	r2, #1
 80016a0:	f04f 0300 	mov.w	r3, #0
 80016a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80016a8:	2300      	movs	r3, #0
 80016aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ae:	f107 0318 	add.w	r3, r7, #24
 80016b2:	4618      	mov	r0, r3
 80016b4:	f003 fd90 	bl	80051d8 <HAL_RCCEx_PeriphCLKConfig>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80016be:	f7ff fdb5 	bl	800122c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016c2:	4b4b      	ldr	r3, [pc, #300]	; (80017f0 <HAL_UART_MspInit+0x184>)
 80016c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016c8:	4a49      	ldr	r2, [pc, #292]	; (80017f0 <HAL_UART_MspInit+0x184>)
 80016ca:	f043 0310 	orr.w	r3, r3, #16
 80016ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80016d2:	4b47      	ldr	r3, [pc, #284]	; (80017f0 <HAL_UART_MspInit+0x184>)
 80016d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016d8:	f003 0310 	and.w	r3, r3, #16
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e0:	4b43      	ldr	r3, [pc, #268]	; (80017f0 <HAL_UART_MspInit+0x184>)
 80016e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e6:	4a42      	ldr	r2, [pc, #264]	; (80017f0 <HAL_UART_MspInit+0x184>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016f0:	4b3f      	ldr	r3, [pc, #252]	; (80017f0 <HAL_UART_MspInit+0x184>)
 80016f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001702:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001706:	2302      	movs	r3, #2
 8001708:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001718:	2307      	movs	r3, #7
 800171a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001722:	4619      	mov	r1, r3
 8001724:	4833      	ldr	r0, [pc, #204]	; (80017f4 <HAL_UART_MspInit+0x188>)
 8001726:	f001 fc37 	bl	8002f98 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800172a:	2200      	movs	r2, #0
 800172c:	2101      	movs	r1, #1
 800172e:	2025      	movs	r0, #37	; 0x25
 8001730:	f000 fc5b 	bl	8001fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001734:	2025      	movs	r0, #37	; 0x25
 8001736:	f000 fc72 	bl	800201e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800173a:	e052      	b.n	80017e2 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART2)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a2d      	ldr	r2, [pc, #180]	; (80017f8 <HAL_UART_MspInit+0x18c>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d14d      	bne.n	80017e2 <HAL_UART_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001746:	f04f 0202 	mov.w	r2, #2
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001752:	2300      	movs	r3, #0
 8001754:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001758:	f107 0318 	add.w	r3, r7, #24
 800175c:	4618      	mov	r0, r3
 800175e:	f003 fd3b 	bl	80051d8 <HAL_RCCEx_PeriphCLKConfig>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <HAL_UART_MspInit+0x100>
      Error_Handler();
 8001768:	f7ff fd60 	bl	800122c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800176c:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <HAL_UART_MspInit+0x184>)
 800176e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001772:	4a1f      	ldr	r2, [pc, #124]	; (80017f0 <HAL_UART_MspInit+0x184>)
 8001774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001778:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800177c:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <HAL_UART_MspInit+0x184>)
 800177e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178a:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <HAL_UART_MspInit+0x184>)
 800178c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001790:	4a17      	ldr	r2, [pc, #92]	; (80017f0 <HAL_UART_MspInit+0x184>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <HAL_UART_MspInit+0x184>)
 800179c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017a8:	230c      	movs	r3, #12
 80017aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ae:	2302      	movs	r3, #2
 80017b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017c0:	2307      	movs	r3, #7
 80017c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017ca:	4619      	mov	r1, r3
 80017cc:	4809      	ldr	r0, [pc, #36]	; (80017f4 <HAL_UART_MspInit+0x188>)
 80017ce:	f001 fbe3 	bl	8002f98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2100      	movs	r1, #0
 80017d6:	2026      	movs	r0, #38	; 0x26
 80017d8:	f000 fc07 	bl	8001fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017dc:	2026      	movs	r0, #38	; 0x26
 80017de:	f000 fc1e 	bl	800201e <HAL_NVIC_EnableIRQ>
}
 80017e2:	bf00      	nop
 80017e4:	37f0      	adds	r7, #240	; 0xf0
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40011000 	.word	0x40011000
 80017f0:	58024400 	.word	0x58024400
 80017f4:	58020000 	.word	0x58020000
 80017f8:	40004400 	.word	0x40004400

080017fc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b0b8      	sub	sp, #224	; 0xe0
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001802:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	60da      	str	r2, [r3, #12]
 8001810:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001812:	4b51      	ldr	r3, [pc, #324]	; (8001958 <HAL_FMC_MspInit+0x15c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	f040 8099 	bne.w	800194e <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 800181c:	4b4e      	ldr	r3, [pc, #312]	; (8001958 <HAL_FMC_MspInit+0x15c>)
 800181e:	2201      	movs	r2, #1
 8001820:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001822:	f107 0308 	add.w	r3, r7, #8
 8001826:	22c0      	movs	r2, #192	; 0xc0
 8001828:	2100      	movs	r1, #0
 800182a:	4618      	mov	r0, r3
 800182c:	f00b fa1e 	bl	800cc6c <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001830:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001834:	f04f 0300 	mov.w	r3, #0
 8001838:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800183c:	2300      	movs	r3, #0
 800183e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001840:	f107 0308 	add.w	r3, r7, #8
 8001844:	4618      	mov	r0, r3
 8001846:	f003 fcc7 	bl	80051d8 <HAL_RCCEx_PeriphCLKConfig>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8001850:	f7ff fcec 	bl	800122c <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001854:	4b41      	ldr	r3, [pc, #260]	; (800195c <HAL_FMC_MspInit+0x160>)
 8001856:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800185a:	4a40      	ldr	r2, [pc, #256]	; (800195c <HAL_FMC_MspInit+0x160>)
 800185c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001860:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001864:	4b3d      	ldr	r3, [pc, #244]	; (800195c <HAL_FMC_MspInit+0x160>)
 8001866:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800186a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001872:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001876:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187a:	2302      	movs	r3, #2
 800187c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001886:	2303      	movs	r3, #3
 8001888:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800188c:	230c      	movs	r3, #12
 800188e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001892:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001896:	4619      	mov	r1, r3
 8001898:	4831      	ldr	r0, [pc, #196]	; (8001960 <HAL_FMC_MspInit+0x164>)
 800189a:	f001 fb7d 	bl	8002f98 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800189e:	230d      	movs	r3, #13
 80018a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a4:	2302      	movs	r3, #2
 80018a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b0:	2303      	movs	r3, #3
 80018b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018b6:	230c      	movs	r3, #12
 80018b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018c0:	4619      	mov	r1, r3
 80018c2:	4828      	ldr	r0, [pc, #160]	; (8001964 <HAL_FMC_MspInit+0x168>)
 80018c4:	f001 fb68 	bl	8002f98 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 80018c8:	f248 1337 	movw	r3, #33079	; 0x8137
 80018cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d0:	2302      	movs	r3, #2
 80018d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018dc:	2303      	movs	r3, #3
 80018de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018e2:	230c      	movs	r3, #12
 80018e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018ec:	4619      	mov	r1, r3
 80018ee:	481e      	ldr	r0, [pc, #120]	; (8001968 <HAL_FMC_MspInit+0x16c>)
 80018f0:	f001 fb52 	bl	8002f98 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80018f4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80018f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fc:	2302      	movs	r3, #2
 80018fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001908:	2303      	movs	r3, #3
 800190a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800190e:	230c      	movs	r3, #12
 8001910:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001914:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001918:	4619      	mov	r1, r3
 800191a:	4814      	ldr	r0, [pc, #80]	; (800196c <HAL_FMC_MspInit+0x170>)
 800191c:	f001 fb3c 	bl	8002f98 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001920:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001924:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001928:	2302      	movs	r3, #2
 800192a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001934:	2303      	movs	r3, #3
 8001936:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800193a:	230c      	movs	r3, #12
 800193c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001940:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001944:	4619      	mov	r1, r3
 8001946:	480a      	ldr	r0, [pc, #40]	; (8001970 <HAL_FMC_MspInit+0x174>)
 8001948:	f001 fb26 	bl	8002f98 <HAL_GPIO_Init>
 800194c:	e000      	b.n	8001950 <HAL_FMC_MspInit+0x154>
    return;
 800194e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001950:	37e0      	adds	r7, #224	; 0xe0
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	240004f8 	.word	0x240004f8
 800195c:	58024400 	.word	0x58024400
 8001960:	58021400 	.word	0x58021400
 8001964:	58020800 	.word	0x58020800
 8001968:	58021800 	.word	0x58021800
 800196c:	58021000 	.word	0x58021000
 8001970:	58020c00 	.word	0x58020c00

08001974 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800197c:	f7ff ff3e 	bl	80017fc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001980:	bf00      	nop
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800198c:	e7fe      	b.n	800198c <NMI_Handler+0x4>

0800198e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001992:	e7fe      	b.n	8001992 <HardFault_Handler+0x4>

08001994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001998:	e7fe      	b.n	8001998 <MemManage_Handler+0x4>

0800199a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800199e:	e7fe      	b.n	800199e <BusFault_Handler+0x4>

080019a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <UsageFault_Handler+0x4>

080019a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019d4:	f000 fa02 	bl	8001ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}

080019dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019e0:	4802      	ldr	r0, [pc, #8]	; (80019ec <TIM3_IRQHandler+0x10>)
 80019e2:	f005 fb15 	bl	8007010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	24000350 	.word	0x24000350

080019f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019f4:	4802      	ldr	r0, [pc, #8]	; (8001a00 <USART1_IRQHandler+0x10>)
 80019f6:	f006 f8f7 	bl	8007be8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	2400039c 	.word	0x2400039c

08001a04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a08:	4802      	ldr	r0, [pc, #8]	; (8001a14 <USART2_IRQHandler+0x10>)
 8001a0a:	f006 f8ed 	bl	8007be8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	24000430 	.word	0x24000430

08001a18 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001a1c:	4802      	ldr	r0, [pc, #8]	; (8001a28 <LTDC_IRQHandler+0x10>)
 8001a1e:	f001 fd55 	bl	80034cc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	2400025c 	.word	0x2400025c

08001a2c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001a30:	4802      	ldr	r0, [pc, #8]	; (8001a3c <DMA2D_IRQHandler+0x10>)
 8001a32:	f001 f8f3 	bl	8002c1c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	240001f4 	.word	0x240001f4

08001a40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return 1;
 8001a44:	2301      	movs	r3, #1
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <_kill>:

int _kill(int pid, int sig)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a5a:	f00b f959 	bl	800cd10 <__errno>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2216      	movs	r2, #22
 8001a62:	601a      	str	r2, [r3, #0]
  return -1;
 8001a64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <_exit>:

void _exit (int status)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a78:	f04f 31ff 	mov.w	r1, #4294967295
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff ffe7 	bl	8001a50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a82:	e7fe      	b.n	8001a82 <_exit+0x12>

08001a84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	e00a      	b.n	8001aac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a96:	f3af 8000 	nop.w
 8001a9a:	4601      	mov	r1, r0
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	60ba      	str	r2, [r7, #8]
 8001aa2:	b2ca      	uxtb	r2, r1
 8001aa4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	dbf0      	blt.n	8001a96 <_read+0x12>
  }

  return len;
 8001ab4:	687b      	ldr	r3, [r7, #4]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <_close>:
  }
  return len;
}

int _close(int file)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ac6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ae6:	605a      	str	r2, [r3, #4]
  return 0;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <_isatty>:

int _isatty(int file)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001afe:	2301      	movs	r3, #1
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
	...

08001b28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b30:	4a14      	ldr	r2, [pc, #80]	; (8001b84 <_sbrk+0x5c>)
 8001b32:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <_sbrk+0x60>)
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b3c:	4b13      	ldr	r3, [pc, #76]	; (8001b8c <_sbrk+0x64>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d102      	bne.n	8001b4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b44:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <_sbrk+0x64>)
 8001b46:	4a12      	ldr	r2, [pc, #72]	; (8001b90 <_sbrk+0x68>)
 8001b48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b4a:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <_sbrk+0x64>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d207      	bcs.n	8001b68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b58:	f00b f8da 	bl	800cd10 <__errno>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	220c      	movs	r2, #12
 8001b60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b62:	f04f 33ff 	mov.w	r3, #4294967295
 8001b66:	e009      	b.n	8001b7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b68:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <_sbrk+0x64>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b6e:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <_sbrk+0x64>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	4a05      	ldr	r2, [pc, #20]	; (8001b8c <_sbrk+0x64>)
 8001b78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	24080000 	.word	0x24080000
 8001b88:	00000400 	.word	0x00000400
 8001b8c:	240004fc 	.word	0x240004fc
 8001b90:	24000688 	.word	0x24000688

08001b94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b98:	4b37      	ldr	r3, [pc, #220]	; (8001c78 <SystemInit+0xe4>)
 8001b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b9e:	4a36      	ldr	r2, [pc, #216]	; (8001c78 <SystemInit+0xe4>)
 8001ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ba4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ba8:	4b34      	ldr	r3, [pc, #208]	; (8001c7c <SystemInit+0xe8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 030f 	and.w	r3, r3, #15
 8001bb0:	2b06      	cmp	r3, #6
 8001bb2:	d807      	bhi.n	8001bc4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bb4:	4b31      	ldr	r3, [pc, #196]	; (8001c7c <SystemInit+0xe8>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f023 030f 	bic.w	r3, r3, #15
 8001bbc:	4a2f      	ldr	r2, [pc, #188]	; (8001c7c <SystemInit+0xe8>)
 8001bbe:	f043 0307 	orr.w	r3, r3, #7
 8001bc2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001bc4:	4b2e      	ldr	r3, [pc, #184]	; (8001c80 <SystemInit+0xec>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a2d      	ldr	r2, [pc, #180]	; (8001c80 <SystemInit+0xec>)
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001bd0:	4b2b      	ldr	r3, [pc, #172]	; (8001c80 <SystemInit+0xec>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001bd6:	4b2a      	ldr	r3, [pc, #168]	; (8001c80 <SystemInit+0xec>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	4929      	ldr	r1, [pc, #164]	; (8001c80 <SystemInit+0xec>)
 8001bdc:	4b29      	ldr	r3, [pc, #164]	; (8001c84 <SystemInit+0xf0>)
 8001bde:	4013      	ands	r3, r2
 8001be0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001be2:	4b26      	ldr	r3, [pc, #152]	; (8001c7c <SystemInit+0xe8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d007      	beq.n	8001bfe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bee:	4b23      	ldr	r3, [pc, #140]	; (8001c7c <SystemInit+0xe8>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f023 030f 	bic.w	r3, r3, #15
 8001bf6:	4a21      	ldr	r2, [pc, #132]	; (8001c7c <SystemInit+0xe8>)
 8001bf8:	f043 0307 	orr.w	r3, r3, #7
 8001bfc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001bfe:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <SystemInit+0xec>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001c04:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <SystemInit+0xec>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001c0a:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <SystemInit+0xec>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001c10:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <SystemInit+0xec>)
 8001c12:	4a1d      	ldr	r2, [pc, #116]	; (8001c88 <SystemInit+0xf4>)
 8001c14:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001c16:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <SystemInit+0xec>)
 8001c18:	4a1c      	ldr	r2, [pc, #112]	; (8001c8c <SystemInit+0xf8>)
 8001c1a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001c1c:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <SystemInit+0xec>)
 8001c1e:	4a1c      	ldr	r2, [pc, #112]	; (8001c90 <SystemInit+0xfc>)
 8001c20:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001c22:	4b17      	ldr	r3, [pc, #92]	; (8001c80 <SystemInit+0xec>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001c28:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <SystemInit+0xec>)
 8001c2a:	4a19      	ldr	r2, [pc, #100]	; (8001c90 <SystemInit+0xfc>)
 8001c2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001c2e:	4b14      	ldr	r3, [pc, #80]	; (8001c80 <SystemInit+0xec>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <SystemInit+0xec>)
 8001c36:	4a16      	ldr	r2, [pc, #88]	; (8001c90 <SystemInit+0xfc>)
 8001c38:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001c3a:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <SystemInit+0xec>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c40:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <SystemInit+0xec>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a0e      	ldr	r2, [pc, #56]	; (8001c80 <SystemInit+0xec>)
 8001c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c4a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <SystemInit+0xec>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001c52:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <SystemInit+0x100>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <SystemInit+0x104>)
 8001c58:	4013      	ands	r3, r2
 8001c5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c5e:	d202      	bcs.n	8001c66 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001c60:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <SystemInit+0x108>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c66:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <SystemInit+0x10c>)
 8001c68:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001c6c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001c6e:	bf00      	nop
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000ed00 	.word	0xe000ed00
 8001c7c:	52002000 	.word	0x52002000
 8001c80:	58024400 	.word	0x58024400
 8001c84:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c88:	02020200 	.word	0x02020200
 8001c8c:	01ff0000 	.word	0x01ff0000
 8001c90:	01010280 	.word	0x01010280
 8001c94:	5c001000 	.word	0x5c001000
 8001c98:	ffff0000 	.word	0xffff0000
 8001c9c:	51008108 	.word	0x51008108
 8001ca0:	52004000 	.word	0x52004000

08001ca4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ca4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cdc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ca8:	f7ff ff74 	bl	8001b94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cac:	480c      	ldr	r0, [pc, #48]	; (8001ce0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cae:	490d      	ldr	r1, [pc, #52]	; (8001ce4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cb0:	4a0d      	ldr	r2, [pc, #52]	; (8001ce8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb4:	e002      	b.n	8001cbc <LoopCopyDataInit>

08001cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cba:	3304      	adds	r3, #4

08001cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc0:	d3f9      	bcc.n	8001cb6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cc4:	4c0a      	ldr	r4, [pc, #40]	; (8001cf0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc8:	e001      	b.n	8001cce <LoopFillZerobss>

08001cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ccc:	3204      	adds	r2, #4

08001cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd0:	d3fb      	bcc.n	8001cca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cd2:	f00b f823 	bl	800cd1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cd6:	f7fe fecd 	bl	8000a74 <main>
  bx  lr
 8001cda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cdc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ce0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ce4:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001ce8:	08011458 	.word	0x08011458
  ldr r2, =_sbss
 8001cec:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8001cf0:	24000684 	.word	0x24000684

08001cf4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cf4:	e7fe      	b.n	8001cf4 <ADC3_IRQHandler>
	...

08001cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cfe:	2003      	movs	r0, #3
 8001d00:	f000 f968 	bl	8001fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d04:	f003 f892 	bl	8004e2c <HAL_RCC_GetSysClockFreq>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <HAL_Init+0x68>)
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	0a1b      	lsrs	r3, r3, #8
 8001d10:	f003 030f 	and.w	r3, r3, #15
 8001d14:	4913      	ldr	r1, [pc, #76]	; (8001d64 <HAL_Init+0x6c>)
 8001d16:	5ccb      	ldrb	r3, [r1, r3]
 8001d18:	f003 031f 	and.w	r3, r3, #31
 8001d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d20:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d22:	4b0f      	ldr	r3, [pc, #60]	; (8001d60 <HAL_Init+0x68>)
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	4a0e      	ldr	r2, [pc, #56]	; (8001d64 <HAL_Init+0x6c>)
 8001d2c:	5cd3      	ldrb	r3, [r2, r3]
 8001d2e:	f003 031f 	and.w	r3, r3, #31
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	fa22 f303 	lsr.w	r3, r2, r3
 8001d38:	4a0b      	ldr	r2, [pc, #44]	; (8001d68 <HAL_Init+0x70>)
 8001d3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d3c:	4a0b      	ldr	r2, [pc, #44]	; (8001d6c <HAL_Init+0x74>)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d42:	200f      	movs	r0, #15
 8001d44:	f000 f814 	bl	8001d70 <HAL_InitTick>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e002      	b.n	8001d58 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d52:	f7ff fa71 	bl	8001238 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	58024400 	.word	0x58024400
 8001d64:	08010e10 	.word	0x08010e10
 8001d68:	24000004 	.word	0x24000004
 8001d6c:	24000000 	.word	0x24000000

08001d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001d78:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <HAL_InitTick+0x60>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e021      	b.n	8001dc8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d84:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <HAL_InitTick+0x64>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <HAL_InitTick+0x60>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 f94d 	bl	800203a <HAL_SYSTICK_Config>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e00e      	b.n	8001dc8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b0f      	cmp	r3, #15
 8001dae:	d80a      	bhi.n	8001dc6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db0:	2200      	movs	r2, #0
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	f04f 30ff 	mov.w	r0, #4294967295
 8001db8:	f000 f917 	bl	8001fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dbc:	4a06      	ldr	r2, [pc, #24]	; (8001dd8 <HAL_InitTick+0x68>)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	e000      	b.n	8001dc8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	2400000c 	.word	0x2400000c
 8001dd4:	24000000 	.word	0x24000000
 8001dd8:	24000008 	.word	0x24000008

08001ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001de0:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <HAL_IncTick+0x20>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	461a      	mov	r2, r3
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_IncTick+0x24>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4413      	add	r3, r2
 8001dec:	4a04      	ldr	r2, [pc, #16]	; (8001e00 <HAL_IncTick+0x24>)
 8001dee:	6013      	str	r3, [r2, #0]
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	2400000c 	.word	0x2400000c
 8001e00:	24000500 	.word	0x24000500

08001e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return uwTick;
 8001e08:	4b03      	ldr	r3, [pc, #12]	; (8001e18 <HAL_GetTick+0x14>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	24000500 	.word	0x24000500

08001e1c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001e20:	4b03      	ldr	r3, [pc, #12]	; (8001e30 <HAL_GetREVID+0x14>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	0c1b      	lsrs	r3, r3, #16
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	5c001000 	.word	0x5c001000

08001e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <__NVIC_SetPriorityGrouping+0x40>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e50:	4013      	ands	r3, r2
 8001e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <__NVIC_SetPriorityGrouping+0x44>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e62:	4a04      	ldr	r2, [pc, #16]	; (8001e74 <__NVIC_SetPriorityGrouping+0x40>)
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	60d3      	str	r3, [r2, #12]
}
 8001e68:	bf00      	nop
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	e000ed00 	.word	0xe000ed00
 8001e78:	05fa0000 	.word	0x05fa0000

08001e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e80:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <__NVIC_GetPriorityGrouping+0x18>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	0a1b      	lsrs	r3, r3, #8
 8001e86:	f003 0307 	and.w	r3, r3, #7
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ea2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	db0b      	blt.n	8001ec2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eaa:	88fb      	ldrh	r3, [r7, #6]
 8001eac:	f003 021f 	and.w	r2, r3, #31
 8001eb0:	4907      	ldr	r1, [pc, #28]	; (8001ed0 <__NVIC_EnableIRQ+0x38>)
 8001eb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eb6:	095b      	lsrs	r3, r3, #5
 8001eb8:	2001      	movs	r0, #1
 8001eba:	fa00 f202 	lsl.w	r2, r0, r2
 8001ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	e000e100 	.word	0xe000e100

08001ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	6039      	str	r1, [r7, #0]
 8001ede:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ee0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	db0a      	blt.n	8001efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	490c      	ldr	r1, [pc, #48]	; (8001f20 <__NVIC_SetPriority+0x4c>)
 8001eee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ef2:	0112      	lsls	r2, r2, #4
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001efc:	e00a      	b.n	8001f14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4908      	ldr	r1, [pc, #32]	; (8001f24 <__NVIC_SetPriority+0x50>)
 8001f04:	88fb      	ldrh	r3, [r7, #6]
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	3b04      	subs	r3, #4
 8001f0c:	0112      	lsls	r2, r2, #4
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	440b      	add	r3, r1
 8001f12:	761a      	strb	r2, [r3, #24]
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000e100 	.word	0xe000e100
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b089      	sub	sp, #36	; 0x24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f1c3 0307 	rsb	r3, r3, #7
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	bf28      	it	cs
 8001f46:	2304      	movcs	r3, #4
 8001f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	2b06      	cmp	r3, #6
 8001f50:	d902      	bls.n	8001f58 <NVIC_EncodePriority+0x30>
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3b03      	subs	r3, #3
 8001f56:	e000      	b.n	8001f5a <NVIC_EncodePriority+0x32>
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43da      	mvns	r2, r3
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f70:	f04f 31ff 	mov.w	r1, #4294967295
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7a:	43d9      	mvns	r1, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f80:	4313      	orrs	r3, r2
         );
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3724      	adds	r7, #36	; 0x24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fa0:	d301      	bcc.n	8001fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e00f      	b.n	8001fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fa6:	4a0a      	ldr	r2, [pc, #40]	; (8001fd0 <SysTick_Config+0x40>)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fae:	210f      	movs	r1, #15
 8001fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb4:	f7ff ff8e 	bl	8001ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fb8:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <SysTick_Config+0x40>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fbe:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <SysTick_Config+0x40>)
 8001fc0:	2207      	movs	r2, #7
 8001fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	e000e010 	.word	0xe000e010

08001fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7ff ff29 	bl	8001e34 <__NVIC_SetPriorityGrouping>
}
 8001fe2:	bf00      	nop
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b086      	sub	sp, #24
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
 8001ff6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff8:	f7ff ff40 	bl	8001e7c <__NVIC_GetPriorityGrouping>
 8001ffc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	68b9      	ldr	r1, [r7, #8]
 8002002:	6978      	ldr	r0, [r7, #20]
 8002004:	f7ff ff90 	bl	8001f28 <NVIC_EncodePriority>
 8002008:	4602      	mov	r2, r0
 800200a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800200e:	4611      	mov	r1, r2
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ff5f 	bl	8001ed4 <__NVIC_SetPriority>
}
 8002016:	bf00      	nop
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	4603      	mov	r3, r0
 8002026:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002028:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff ff33 	bl	8001e98 <__NVIC_EnableIRQ>
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b082      	sub	sp, #8
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff ffa4 	bl	8001f90 <SysTick_Config>
 8002048:	4603      	mov	r3, r0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
	...

08002054 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b04      	cmp	r3, #4
 8002060:	d106      	bne.n	8002070 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002062:	4b09      	ldr	r3, [pc, #36]	; (8002088 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a08      	ldr	r2, [pc, #32]	; (8002088 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002068:	f043 0304 	orr.w	r3, r3, #4
 800206c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800206e:	e005      	b.n	800207c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002070:	4b05      	ldr	r3, [pc, #20]	; (8002088 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a04      	ldr	r2, [pc, #16]	; (8002088 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002076:	f023 0304 	bic.w	r3, r3, #4
 800207a:	6013      	str	r3, [r2, #0]
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000e010 	.word	0xe000e010

0800208c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002094:	f7ff feb6 	bl	8001e04 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e2dc      	b.n	800265e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d008      	beq.n	80020c2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2280      	movs	r2, #128	; 0x80
 80020b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e2cd      	b.n	800265e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a76      	ldr	r2, [pc, #472]	; (80022a0 <HAL_DMA_Abort+0x214>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d04a      	beq.n	8002162 <HAL_DMA_Abort+0xd6>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a74      	ldr	r2, [pc, #464]	; (80022a4 <HAL_DMA_Abort+0x218>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d045      	beq.n	8002162 <HAL_DMA_Abort+0xd6>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a73      	ldr	r2, [pc, #460]	; (80022a8 <HAL_DMA_Abort+0x21c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d040      	beq.n	8002162 <HAL_DMA_Abort+0xd6>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a71      	ldr	r2, [pc, #452]	; (80022ac <HAL_DMA_Abort+0x220>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d03b      	beq.n	8002162 <HAL_DMA_Abort+0xd6>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a70      	ldr	r2, [pc, #448]	; (80022b0 <HAL_DMA_Abort+0x224>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d036      	beq.n	8002162 <HAL_DMA_Abort+0xd6>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a6e      	ldr	r2, [pc, #440]	; (80022b4 <HAL_DMA_Abort+0x228>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d031      	beq.n	8002162 <HAL_DMA_Abort+0xd6>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a6d      	ldr	r2, [pc, #436]	; (80022b8 <HAL_DMA_Abort+0x22c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d02c      	beq.n	8002162 <HAL_DMA_Abort+0xd6>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a6b      	ldr	r2, [pc, #428]	; (80022bc <HAL_DMA_Abort+0x230>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d027      	beq.n	8002162 <HAL_DMA_Abort+0xd6>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a6a      	ldr	r2, [pc, #424]	; (80022c0 <HAL_DMA_Abort+0x234>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d022      	beq.n	8002162 <HAL_DMA_Abort+0xd6>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a68      	ldr	r2, [pc, #416]	; (80022c4 <HAL_DMA_Abort+0x238>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d01d      	beq.n	8002162 <HAL_DMA_Abort+0xd6>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a67      	ldr	r2, [pc, #412]	; (80022c8 <HAL_DMA_Abort+0x23c>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d018      	beq.n	8002162 <HAL_DMA_Abort+0xd6>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a65      	ldr	r2, [pc, #404]	; (80022cc <HAL_DMA_Abort+0x240>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d013      	beq.n	8002162 <HAL_DMA_Abort+0xd6>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a64      	ldr	r2, [pc, #400]	; (80022d0 <HAL_DMA_Abort+0x244>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d00e      	beq.n	8002162 <HAL_DMA_Abort+0xd6>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a62      	ldr	r2, [pc, #392]	; (80022d4 <HAL_DMA_Abort+0x248>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d009      	beq.n	8002162 <HAL_DMA_Abort+0xd6>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a61      	ldr	r2, [pc, #388]	; (80022d8 <HAL_DMA_Abort+0x24c>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d004      	beq.n	8002162 <HAL_DMA_Abort+0xd6>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a5f      	ldr	r2, [pc, #380]	; (80022dc <HAL_DMA_Abort+0x250>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d101      	bne.n	8002166 <HAL_DMA_Abort+0xda>
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <HAL_DMA_Abort+0xdc>
 8002166:	2300      	movs	r3, #0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d013      	beq.n	8002194 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 021e 	bic.w	r2, r2, #30
 800217a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	695a      	ldr	r2, [r3, #20]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800218a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	617b      	str	r3, [r7, #20]
 8002192:	e00a      	b.n	80021aa <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 020e 	bic.w	r2, r2, #14
 80021a2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a3c      	ldr	r2, [pc, #240]	; (80022a0 <HAL_DMA_Abort+0x214>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d072      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a3a      	ldr	r2, [pc, #232]	; (80022a4 <HAL_DMA_Abort+0x218>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d06d      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a39      	ldr	r2, [pc, #228]	; (80022a8 <HAL_DMA_Abort+0x21c>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d068      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a37      	ldr	r2, [pc, #220]	; (80022ac <HAL_DMA_Abort+0x220>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d063      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a36      	ldr	r2, [pc, #216]	; (80022b0 <HAL_DMA_Abort+0x224>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d05e      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a34      	ldr	r2, [pc, #208]	; (80022b4 <HAL_DMA_Abort+0x228>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d059      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a33      	ldr	r2, [pc, #204]	; (80022b8 <HAL_DMA_Abort+0x22c>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d054      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a31      	ldr	r2, [pc, #196]	; (80022bc <HAL_DMA_Abort+0x230>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d04f      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a30      	ldr	r2, [pc, #192]	; (80022c0 <HAL_DMA_Abort+0x234>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d04a      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a2e      	ldr	r2, [pc, #184]	; (80022c4 <HAL_DMA_Abort+0x238>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d045      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a2d      	ldr	r2, [pc, #180]	; (80022c8 <HAL_DMA_Abort+0x23c>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d040      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a2b      	ldr	r2, [pc, #172]	; (80022cc <HAL_DMA_Abort+0x240>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d03b      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a2a      	ldr	r2, [pc, #168]	; (80022d0 <HAL_DMA_Abort+0x244>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d036      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a28      	ldr	r2, [pc, #160]	; (80022d4 <HAL_DMA_Abort+0x248>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d031      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a27      	ldr	r2, [pc, #156]	; (80022d8 <HAL_DMA_Abort+0x24c>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d02c      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a25      	ldr	r2, [pc, #148]	; (80022dc <HAL_DMA_Abort+0x250>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d027      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a24      	ldr	r2, [pc, #144]	; (80022e0 <HAL_DMA_Abort+0x254>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d022      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a22      	ldr	r2, [pc, #136]	; (80022e4 <HAL_DMA_Abort+0x258>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d01d      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a21      	ldr	r2, [pc, #132]	; (80022e8 <HAL_DMA_Abort+0x25c>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d018      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a1f      	ldr	r2, [pc, #124]	; (80022ec <HAL_DMA_Abort+0x260>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d013      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a1e      	ldr	r2, [pc, #120]	; (80022f0 <HAL_DMA_Abort+0x264>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d00e      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a1c      	ldr	r2, [pc, #112]	; (80022f4 <HAL_DMA_Abort+0x268>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d009      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a1b      	ldr	r2, [pc, #108]	; (80022f8 <HAL_DMA_Abort+0x26c>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d004      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a19      	ldr	r2, [pc, #100]	; (80022fc <HAL_DMA_Abort+0x270>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d132      	bne.n	8002300 <HAL_DMA_Abort+0x274>
 800229a:	2301      	movs	r3, #1
 800229c:	e031      	b.n	8002302 <HAL_DMA_Abort+0x276>
 800229e:	bf00      	nop
 80022a0:	40020010 	.word	0x40020010
 80022a4:	40020028 	.word	0x40020028
 80022a8:	40020040 	.word	0x40020040
 80022ac:	40020058 	.word	0x40020058
 80022b0:	40020070 	.word	0x40020070
 80022b4:	40020088 	.word	0x40020088
 80022b8:	400200a0 	.word	0x400200a0
 80022bc:	400200b8 	.word	0x400200b8
 80022c0:	40020410 	.word	0x40020410
 80022c4:	40020428 	.word	0x40020428
 80022c8:	40020440 	.word	0x40020440
 80022cc:	40020458 	.word	0x40020458
 80022d0:	40020470 	.word	0x40020470
 80022d4:	40020488 	.word	0x40020488
 80022d8:	400204a0 	.word	0x400204a0
 80022dc:	400204b8 	.word	0x400204b8
 80022e0:	58025408 	.word	0x58025408
 80022e4:	5802541c 	.word	0x5802541c
 80022e8:	58025430 	.word	0x58025430
 80022ec:	58025444 	.word	0x58025444
 80022f0:	58025458 	.word	0x58025458
 80022f4:	5802546c 	.word	0x5802546c
 80022f8:	58025480 	.word	0x58025480
 80022fc:	58025494 	.word	0x58025494
 8002300:	2300      	movs	r3, #0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d007      	beq.n	8002316 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002310:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002314:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a6d      	ldr	r2, [pc, #436]	; (80024d0 <HAL_DMA_Abort+0x444>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d04a      	beq.n	80023b6 <HAL_DMA_Abort+0x32a>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a6b      	ldr	r2, [pc, #428]	; (80024d4 <HAL_DMA_Abort+0x448>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d045      	beq.n	80023b6 <HAL_DMA_Abort+0x32a>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a6a      	ldr	r2, [pc, #424]	; (80024d8 <HAL_DMA_Abort+0x44c>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d040      	beq.n	80023b6 <HAL_DMA_Abort+0x32a>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a68      	ldr	r2, [pc, #416]	; (80024dc <HAL_DMA_Abort+0x450>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d03b      	beq.n	80023b6 <HAL_DMA_Abort+0x32a>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a67      	ldr	r2, [pc, #412]	; (80024e0 <HAL_DMA_Abort+0x454>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d036      	beq.n	80023b6 <HAL_DMA_Abort+0x32a>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a65      	ldr	r2, [pc, #404]	; (80024e4 <HAL_DMA_Abort+0x458>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d031      	beq.n	80023b6 <HAL_DMA_Abort+0x32a>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a64      	ldr	r2, [pc, #400]	; (80024e8 <HAL_DMA_Abort+0x45c>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d02c      	beq.n	80023b6 <HAL_DMA_Abort+0x32a>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a62      	ldr	r2, [pc, #392]	; (80024ec <HAL_DMA_Abort+0x460>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d027      	beq.n	80023b6 <HAL_DMA_Abort+0x32a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a61      	ldr	r2, [pc, #388]	; (80024f0 <HAL_DMA_Abort+0x464>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d022      	beq.n	80023b6 <HAL_DMA_Abort+0x32a>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a5f      	ldr	r2, [pc, #380]	; (80024f4 <HAL_DMA_Abort+0x468>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d01d      	beq.n	80023b6 <HAL_DMA_Abort+0x32a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a5e      	ldr	r2, [pc, #376]	; (80024f8 <HAL_DMA_Abort+0x46c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d018      	beq.n	80023b6 <HAL_DMA_Abort+0x32a>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a5c      	ldr	r2, [pc, #368]	; (80024fc <HAL_DMA_Abort+0x470>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d013      	beq.n	80023b6 <HAL_DMA_Abort+0x32a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a5b      	ldr	r2, [pc, #364]	; (8002500 <HAL_DMA_Abort+0x474>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d00e      	beq.n	80023b6 <HAL_DMA_Abort+0x32a>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a59      	ldr	r2, [pc, #356]	; (8002504 <HAL_DMA_Abort+0x478>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d009      	beq.n	80023b6 <HAL_DMA_Abort+0x32a>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a58      	ldr	r2, [pc, #352]	; (8002508 <HAL_DMA_Abort+0x47c>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d004      	beq.n	80023b6 <HAL_DMA_Abort+0x32a>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a56      	ldr	r2, [pc, #344]	; (800250c <HAL_DMA_Abort+0x480>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d108      	bne.n	80023c8 <HAL_DMA_Abort+0x33c>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0201 	bic.w	r2, r2, #1
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	e007      	b.n	80023d8 <HAL_DMA_Abort+0x34c>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0201 	bic.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80023d8:	e013      	b.n	8002402 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023da:	f7ff fd13 	bl	8001e04 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b05      	cmp	r3, #5
 80023e6:	d90c      	bls.n	8002402 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2220      	movs	r2, #32
 80023ec:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2203      	movs	r2, #3
 80023f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e12d      	b.n	800265e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1e5      	bne.n	80023da <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a2f      	ldr	r2, [pc, #188]	; (80024d0 <HAL_DMA_Abort+0x444>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d04a      	beq.n	80024ae <HAL_DMA_Abort+0x422>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a2d      	ldr	r2, [pc, #180]	; (80024d4 <HAL_DMA_Abort+0x448>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d045      	beq.n	80024ae <HAL_DMA_Abort+0x422>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a2c      	ldr	r2, [pc, #176]	; (80024d8 <HAL_DMA_Abort+0x44c>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d040      	beq.n	80024ae <HAL_DMA_Abort+0x422>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a2a      	ldr	r2, [pc, #168]	; (80024dc <HAL_DMA_Abort+0x450>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d03b      	beq.n	80024ae <HAL_DMA_Abort+0x422>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a29      	ldr	r2, [pc, #164]	; (80024e0 <HAL_DMA_Abort+0x454>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d036      	beq.n	80024ae <HAL_DMA_Abort+0x422>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a27      	ldr	r2, [pc, #156]	; (80024e4 <HAL_DMA_Abort+0x458>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d031      	beq.n	80024ae <HAL_DMA_Abort+0x422>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a26      	ldr	r2, [pc, #152]	; (80024e8 <HAL_DMA_Abort+0x45c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d02c      	beq.n	80024ae <HAL_DMA_Abort+0x422>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a24      	ldr	r2, [pc, #144]	; (80024ec <HAL_DMA_Abort+0x460>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d027      	beq.n	80024ae <HAL_DMA_Abort+0x422>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a23      	ldr	r2, [pc, #140]	; (80024f0 <HAL_DMA_Abort+0x464>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d022      	beq.n	80024ae <HAL_DMA_Abort+0x422>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a21      	ldr	r2, [pc, #132]	; (80024f4 <HAL_DMA_Abort+0x468>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d01d      	beq.n	80024ae <HAL_DMA_Abort+0x422>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a20      	ldr	r2, [pc, #128]	; (80024f8 <HAL_DMA_Abort+0x46c>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d018      	beq.n	80024ae <HAL_DMA_Abort+0x422>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a1e      	ldr	r2, [pc, #120]	; (80024fc <HAL_DMA_Abort+0x470>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d013      	beq.n	80024ae <HAL_DMA_Abort+0x422>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a1d      	ldr	r2, [pc, #116]	; (8002500 <HAL_DMA_Abort+0x474>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d00e      	beq.n	80024ae <HAL_DMA_Abort+0x422>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a1b      	ldr	r2, [pc, #108]	; (8002504 <HAL_DMA_Abort+0x478>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d009      	beq.n	80024ae <HAL_DMA_Abort+0x422>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a1a      	ldr	r2, [pc, #104]	; (8002508 <HAL_DMA_Abort+0x47c>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d004      	beq.n	80024ae <HAL_DMA_Abort+0x422>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a18      	ldr	r2, [pc, #96]	; (800250c <HAL_DMA_Abort+0x480>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d101      	bne.n	80024b2 <HAL_DMA_Abort+0x426>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <HAL_DMA_Abort+0x428>
 80024b2:	2300      	movs	r3, #0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d02b      	beq.n	8002510 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024bc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c2:	f003 031f 	and.w	r3, r3, #31
 80024c6:	223f      	movs	r2, #63	; 0x3f
 80024c8:	409a      	lsls	r2, r3
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	609a      	str	r2, [r3, #8]
 80024ce:	e02a      	b.n	8002526 <HAL_DMA_Abort+0x49a>
 80024d0:	40020010 	.word	0x40020010
 80024d4:	40020028 	.word	0x40020028
 80024d8:	40020040 	.word	0x40020040
 80024dc:	40020058 	.word	0x40020058
 80024e0:	40020070 	.word	0x40020070
 80024e4:	40020088 	.word	0x40020088
 80024e8:	400200a0 	.word	0x400200a0
 80024ec:	400200b8 	.word	0x400200b8
 80024f0:	40020410 	.word	0x40020410
 80024f4:	40020428 	.word	0x40020428
 80024f8:	40020440 	.word	0x40020440
 80024fc:	40020458 	.word	0x40020458
 8002500:	40020470 	.word	0x40020470
 8002504:	40020488 	.word	0x40020488
 8002508:	400204a0 	.word	0x400204a0
 800250c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002514:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251a:	f003 031f 	and.w	r3, r3, #31
 800251e:	2201      	movs	r2, #1
 8002520:	409a      	lsls	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a4f      	ldr	r2, [pc, #316]	; (8002668 <HAL_DMA_Abort+0x5dc>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d072      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a4d      	ldr	r2, [pc, #308]	; (800266c <HAL_DMA_Abort+0x5e0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d06d      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a4c      	ldr	r2, [pc, #304]	; (8002670 <HAL_DMA_Abort+0x5e4>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d068      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a4a      	ldr	r2, [pc, #296]	; (8002674 <HAL_DMA_Abort+0x5e8>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d063      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a49      	ldr	r2, [pc, #292]	; (8002678 <HAL_DMA_Abort+0x5ec>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d05e      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a47      	ldr	r2, [pc, #284]	; (800267c <HAL_DMA_Abort+0x5f0>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d059      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a46      	ldr	r2, [pc, #280]	; (8002680 <HAL_DMA_Abort+0x5f4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d054      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a44      	ldr	r2, [pc, #272]	; (8002684 <HAL_DMA_Abort+0x5f8>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d04f      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a43      	ldr	r2, [pc, #268]	; (8002688 <HAL_DMA_Abort+0x5fc>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d04a      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a41      	ldr	r2, [pc, #260]	; (800268c <HAL_DMA_Abort+0x600>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d045      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a40      	ldr	r2, [pc, #256]	; (8002690 <HAL_DMA_Abort+0x604>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d040      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a3e      	ldr	r2, [pc, #248]	; (8002694 <HAL_DMA_Abort+0x608>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d03b      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a3d      	ldr	r2, [pc, #244]	; (8002698 <HAL_DMA_Abort+0x60c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d036      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a3b      	ldr	r2, [pc, #236]	; (800269c <HAL_DMA_Abort+0x610>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d031      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a3a      	ldr	r2, [pc, #232]	; (80026a0 <HAL_DMA_Abort+0x614>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d02c      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a38      	ldr	r2, [pc, #224]	; (80026a4 <HAL_DMA_Abort+0x618>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d027      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a37      	ldr	r2, [pc, #220]	; (80026a8 <HAL_DMA_Abort+0x61c>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d022      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a35      	ldr	r2, [pc, #212]	; (80026ac <HAL_DMA_Abort+0x620>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d01d      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a34      	ldr	r2, [pc, #208]	; (80026b0 <HAL_DMA_Abort+0x624>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d018      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a32      	ldr	r2, [pc, #200]	; (80026b4 <HAL_DMA_Abort+0x628>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d013      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a31      	ldr	r2, [pc, #196]	; (80026b8 <HAL_DMA_Abort+0x62c>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d00e      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a2f      	ldr	r2, [pc, #188]	; (80026bc <HAL_DMA_Abort+0x630>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d009      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a2e      	ldr	r2, [pc, #184]	; (80026c0 <HAL_DMA_Abort+0x634>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d004      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a2c      	ldr	r2, [pc, #176]	; (80026c4 <HAL_DMA_Abort+0x638>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d101      	bne.n	800261a <HAL_DMA_Abort+0x58e>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <HAL_DMA_Abort+0x590>
 800261a:	2300      	movs	r3, #0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d015      	beq.n	800264c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002628:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00c      	beq.n	800264c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800263c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002640:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800264a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40020010 	.word	0x40020010
 800266c:	40020028 	.word	0x40020028
 8002670:	40020040 	.word	0x40020040
 8002674:	40020058 	.word	0x40020058
 8002678:	40020070 	.word	0x40020070
 800267c:	40020088 	.word	0x40020088
 8002680:	400200a0 	.word	0x400200a0
 8002684:	400200b8 	.word	0x400200b8
 8002688:	40020410 	.word	0x40020410
 800268c:	40020428 	.word	0x40020428
 8002690:	40020440 	.word	0x40020440
 8002694:	40020458 	.word	0x40020458
 8002698:	40020470 	.word	0x40020470
 800269c:	40020488 	.word	0x40020488
 80026a0:	400204a0 	.word	0x400204a0
 80026a4:	400204b8 	.word	0x400204b8
 80026a8:	58025408 	.word	0x58025408
 80026ac:	5802541c 	.word	0x5802541c
 80026b0:	58025430 	.word	0x58025430
 80026b4:	58025444 	.word	0x58025444
 80026b8:	58025458 	.word	0x58025458
 80026bc:	5802546c 	.word	0x5802546c
 80026c0:	58025480 	.word	0x58025480
 80026c4:	58025494 	.word	0x58025494

080026c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e237      	b.n	8002b4a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d004      	beq.n	80026f0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2280      	movs	r2, #128	; 0x80
 80026ea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e22c      	b.n	8002b4a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a5c      	ldr	r2, [pc, #368]	; (8002868 <HAL_DMA_Abort_IT+0x1a0>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d04a      	beq.n	8002790 <HAL_DMA_Abort_IT+0xc8>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a5b      	ldr	r2, [pc, #364]	; (800286c <HAL_DMA_Abort_IT+0x1a4>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d045      	beq.n	8002790 <HAL_DMA_Abort_IT+0xc8>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a59      	ldr	r2, [pc, #356]	; (8002870 <HAL_DMA_Abort_IT+0x1a8>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d040      	beq.n	8002790 <HAL_DMA_Abort_IT+0xc8>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a58      	ldr	r2, [pc, #352]	; (8002874 <HAL_DMA_Abort_IT+0x1ac>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d03b      	beq.n	8002790 <HAL_DMA_Abort_IT+0xc8>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a56      	ldr	r2, [pc, #344]	; (8002878 <HAL_DMA_Abort_IT+0x1b0>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d036      	beq.n	8002790 <HAL_DMA_Abort_IT+0xc8>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a55      	ldr	r2, [pc, #340]	; (800287c <HAL_DMA_Abort_IT+0x1b4>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d031      	beq.n	8002790 <HAL_DMA_Abort_IT+0xc8>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a53      	ldr	r2, [pc, #332]	; (8002880 <HAL_DMA_Abort_IT+0x1b8>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d02c      	beq.n	8002790 <HAL_DMA_Abort_IT+0xc8>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a52      	ldr	r2, [pc, #328]	; (8002884 <HAL_DMA_Abort_IT+0x1bc>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d027      	beq.n	8002790 <HAL_DMA_Abort_IT+0xc8>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a50      	ldr	r2, [pc, #320]	; (8002888 <HAL_DMA_Abort_IT+0x1c0>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d022      	beq.n	8002790 <HAL_DMA_Abort_IT+0xc8>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a4f      	ldr	r2, [pc, #316]	; (800288c <HAL_DMA_Abort_IT+0x1c4>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d01d      	beq.n	8002790 <HAL_DMA_Abort_IT+0xc8>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a4d      	ldr	r2, [pc, #308]	; (8002890 <HAL_DMA_Abort_IT+0x1c8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d018      	beq.n	8002790 <HAL_DMA_Abort_IT+0xc8>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a4c      	ldr	r2, [pc, #304]	; (8002894 <HAL_DMA_Abort_IT+0x1cc>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d013      	beq.n	8002790 <HAL_DMA_Abort_IT+0xc8>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a4a      	ldr	r2, [pc, #296]	; (8002898 <HAL_DMA_Abort_IT+0x1d0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d00e      	beq.n	8002790 <HAL_DMA_Abort_IT+0xc8>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a49      	ldr	r2, [pc, #292]	; (800289c <HAL_DMA_Abort_IT+0x1d4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d009      	beq.n	8002790 <HAL_DMA_Abort_IT+0xc8>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a47      	ldr	r2, [pc, #284]	; (80028a0 <HAL_DMA_Abort_IT+0x1d8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d004      	beq.n	8002790 <HAL_DMA_Abort_IT+0xc8>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a46      	ldr	r2, [pc, #280]	; (80028a4 <HAL_DMA_Abort_IT+0x1dc>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d101      	bne.n	8002794 <HAL_DMA_Abort_IT+0xcc>
 8002790:	2301      	movs	r3, #1
 8002792:	e000      	b.n	8002796 <HAL_DMA_Abort_IT+0xce>
 8002794:	2300      	movs	r3, #0
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 8086 	beq.w	80028a8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2204      	movs	r2, #4
 80027a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a2f      	ldr	r2, [pc, #188]	; (8002868 <HAL_DMA_Abort_IT+0x1a0>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d04a      	beq.n	8002844 <HAL_DMA_Abort_IT+0x17c>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a2e      	ldr	r2, [pc, #184]	; (800286c <HAL_DMA_Abort_IT+0x1a4>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d045      	beq.n	8002844 <HAL_DMA_Abort_IT+0x17c>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a2c      	ldr	r2, [pc, #176]	; (8002870 <HAL_DMA_Abort_IT+0x1a8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d040      	beq.n	8002844 <HAL_DMA_Abort_IT+0x17c>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a2b      	ldr	r2, [pc, #172]	; (8002874 <HAL_DMA_Abort_IT+0x1ac>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d03b      	beq.n	8002844 <HAL_DMA_Abort_IT+0x17c>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a29      	ldr	r2, [pc, #164]	; (8002878 <HAL_DMA_Abort_IT+0x1b0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d036      	beq.n	8002844 <HAL_DMA_Abort_IT+0x17c>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a28      	ldr	r2, [pc, #160]	; (800287c <HAL_DMA_Abort_IT+0x1b4>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d031      	beq.n	8002844 <HAL_DMA_Abort_IT+0x17c>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a26      	ldr	r2, [pc, #152]	; (8002880 <HAL_DMA_Abort_IT+0x1b8>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d02c      	beq.n	8002844 <HAL_DMA_Abort_IT+0x17c>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a25      	ldr	r2, [pc, #148]	; (8002884 <HAL_DMA_Abort_IT+0x1bc>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d027      	beq.n	8002844 <HAL_DMA_Abort_IT+0x17c>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a23      	ldr	r2, [pc, #140]	; (8002888 <HAL_DMA_Abort_IT+0x1c0>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d022      	beq.n	8002844 <HAL_DMA_Abort_IT+0x17c>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a22      	ldr	r2, [pc, #136]	; (800288c <HAL_DMA_Abort_IT+0x1c4>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d01d      	beq.n	8002844 <HAL_DMA_Abort_IT+0x17c>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a20      	ldr	r2, [pc, #128]	; (8002890 <HAL_DMA_Abort_IT+0x1c8>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d018      	beq.n	8002844 <HAL_DMA_Abort_IT+0x17c>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a1f      	ldr	r2, [pc, #124]	; (8002894 <HAL_DMA_Abort_IT+0x1cc>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d013      	beq.n	8002844 <HAL_DMA_Abort_IT+0x17c>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a1d      	ldr	r2, [pc, #116]	; (8002898 <HAL_DMA_Abort_IT+0x1d0>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d00e      	beq.n	8002844 <HAL_DMA_Abort_IT+0x17c>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a1c      	ldr	r2, [pc, #112]	; (800289c <HAL_DMA_Abort_IT+0x1d4>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d009      	beq.n	8002844 <HAL_DMA_Abort_IT+0x17c>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a1a      	ldr	r2, [pc, #104]	; (80028a0 <HAL_DMA_Abort_IT+0x1d8>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d004      	beq.n	8002844 <HAL_DMA_Abort_IT+0x17c>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a19      	ldr	r2, [pc, #100]	; (80028a4 <HAL_DMA_Abort_IT+0x1dc>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d108      	bne.n	8002856 <HAL_DMA_Abort_IT+0x18e>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 0201 	bic.w	r2, r2, #1
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	e178      	b.n	8002b48 <HAL_DMA_Abort_IT+0x480>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0201 	bic.w	r2, r2, #1
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	e16f      	b.n	8002b48 <HAL_DMA_Abort_IT+0x480>
 8002868:	40020010 	.word	0x40020010
 800286c:	40020028 	.word	0x40020028
 8002870:	40020040 	.word	0x40020040
 8002874:	40020058 	.word	0x40020058
 8002878:	40020070 	.word	0x40020070
 800287c:	40020088 	.word	0x40020088
 8002880:	400200a0 	.word	0x400200a0
 8002884:	400200b8 	.word	0x400200b8
 8002888:	40020410 	.word	0x40020410
 800288c:	40020428 	.word	0x40020428
 8002890:	40020440 	.word	0x40020440
 8002894:	40020458 	.word	0x40020458
 8002898:	40020470 	.word	0x40020470
 800289c:	40020488 	.word	0x40020488
 80028a0:	400204a0 	.word	0x400204a0
 80028a4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 020e 	bic.w	r2, r2, #14
 80028b6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a6c      	ldr	r2, [pc, #432]	; (8002a70 <HAL_DMA_Abort_IT+0x3a8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d04a      	beq.n	8002958 <HAL_DMA_Abort_IT+0x290>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a6b      	ldr	r2, [pc, #428]	; (8002a74 <HAL_DMA_Abort_IT+0x3ac>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d045      	beq.n	8002958 <HAL_DMA_Abort_IT+0x290>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a69      	ldr	r2, [pc, #420]	; (8002a78 <HAL_DMA_Abort_IT+0x3b0>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d040      	beq.n	8002958 <HAL_DMA_Abort_IT+0x290>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a68      	ldr	r2, [pc, #416]	; (8002a7c <HAL_DMA_Abort_IT+0x3b4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d03b      	beq.n	8002958 <HAL_DMA_Abort_IT+0x290>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a66      	ldr	r2, [pc, #408]	; (8002a80 <HAL_DMA_Abort_IT+0x3b8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d036      	beq.n	8002958 <HAL_DMA_Abort_IT+0x290>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a65      	ldr	r2, [pc, #404]	; (8002a84 <HAL_DMA_Abort_IT+0x3bc>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d031      	beq.n	8002958 <HAL_DMA_Abort_IT+0x290>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a63      	ldr	r2, [pc, #396]	; (8002a88 <HAL_DMA_Abort_IT+0x3c0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d02c      	beq.n	8002958 <HAL_DMA_Abort_IT+0x290>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a62      	ldr	r2, [pc, #392]	; (8002a8c <HAL_DMA_Abort_IT+0x3c4>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d027      	beq.n	8002958 <HAL_DMA_Abort_IT+0x290>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a60      	ldr	r2, [pc, #384]	; (8002a90 <HAL_DMA_Abort_IT+0x3c8>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d022      	beq.n	8002958 <HAL_DMA_Abort_IT+0x290>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a5f      	ldr	r2, [pc, #380]	; (8002a94 <HAL_DMA_Abort_IT+0x3cc>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d01d      	beq.n	8002958 <HAL_DMA_Abort_IT+0x290>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a5d      	ldr	r2, [pc, #372]	; (8002a98 <HAL_DMA_Abort_IT+0x3d0>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d018      	beq.n	8002958 <HAL_DMA_Abort_IT+0x290>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a5c      	ldr	r2, [pc, #368]	; (8002a9c <HAL_DMA_Abort_IT+0x3d4>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d013      	beq.n	8002958 <HAL_DMA_Abort_IT+0x290>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a5a      	ldr	r2, [pc, #360]	; (8002aa0 <HAL_DMA_Abort_IT+0x3d8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00e      	beq.n	8002958 <HAL_DMA_Abort_IT+0x290>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a59      	ldr	r2, [pc, #356]	; (8002aa4 <HAL_DMA_Abort_IT+0x3dc>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d009      	beq.n	8002958 <HAL_DMA_Abort_IT+0x290>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a57      	ldr	r2, [pc, #348]	; (8002aa8 <HAL_DMA_Abort_IT+0x3e0>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d004      	beq.n	8002958 <HAL_DMA_Abort_IT+0x290>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a56      	ldr	r2, [pc, #344]	; (8002aac <HAL_DMA_Abort_IT+0x3e4>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d108      	bne.n	800296a <HAL_DMA_Abort_IT+0x2a2>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0201 	bic.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	e007      	b.n	800297a <HAL_DMA_Abort_IT+0x2b2>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0201 	bic.w	r2, r2, #1
 8002978:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a3c      	ldr	r2, [pc, #240]	; (8002a70 <HAL_DMA_Abort_IT+0x3a8>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d072      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a3a      	ldr	r2, [pc, #232]	; (8002a74 <HAL_DMA_Abort_IT+0x3ac>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d06d      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a39      	ldr	r2, [pc, #228]	; (8002a78 <HAL_DMA_Abort_IT+0x3b0>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d068      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a37      	ldr	r2, [pc, #220]	; (8002a7c <HAL_DMA_Abort_IT+0x3b4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d063      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a36      	ldr	r2, [pc, #216]	; (8002a80 <HAL_DMA_Abort_IT+0x3b8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d05e      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a34      	ldr	r2, [pc, #208]	; (8002a84 <HAL_DMA_Abort_IT+0x3bc>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d059      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a33      	ldr	r2, [pc, #204]	; (8002a88 <HAL_DMA_Abort_IT+0x3c0>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d054      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a31      	ldr	r2, [pc, #196]	; (8002a8c <HAL_DMA_Abort_IT+0x3c4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d04f      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a30      	ldr	r2, [pc, #192]	; (8002a90 <HAL_DMA_Abort_IT+0x3c8>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d04a      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a2e      	ldr	r2, [pc, #184]	; (8002a94 <HAL_DMA_Abort_IT+0x3cc>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d045      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a2d      	ldr	r2, [pc, #180]	; (8002a98 <HAL_DMA_Abort_IT+0x3d0>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d040      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a2b      	ldr	r2, [pc, #172]	; (8002a9c <HAL_DMA_Abort_IT+0x3d4>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d03b      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a2a      	ldr	r2, [pc, #168]	; (8002aa0 <HAL_DMA_Abort_IT+0x3d8>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d036      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a28      	ldr	r2, [pc, #160]	; (8002aa4 <HAL_DMA_Abort_IT+0x3dc>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d031      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a27      	ldr	r2, [pc, #156]	; (8002aa8 <HAL_DMA_Abort_IT+0x3e0>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d02c      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a25      	ldr	r2, [pc, #148]	; (8002aac <HAL_DMA_Abort_IT+0x3e4>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d027      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a24      	ldr	r2, [pc, #144]	; (8002ab0 <HAL_DMA_Abort_IT+0x3e8>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d022      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a22      	ldr	r2, [pc, #136]	; (8002ab4 <HAL_DMA_Abort_IT+0x3ec>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d01d      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a21      	ldr	r2, [pc, #132]	; (8002ab8 <HAL_DMA_Abort_IT+0x3f0>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d018      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a1f      	ldr	r2, [pc, #124]	; (8002abc <HAL_DMA_Abort_IT+0x3f4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d013      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a1e      	ldr	r2, [pc, #120]	; (8002ac0 <HAL_DMA_Abort_IT+0x3f8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d00e      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a1c      	ldr	r2, [pc, #112]	; (8002ac4 <HAL_DMA_Abort_IT+0x3fc>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d009      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a1b      	ldr	r2, [pc, #108]	; (8002ac8 <HAL_DMA_Abort_IT+0x400>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d004      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a19      	ldr	r2, [pc, #100]	; (8002acc <HAL_DMA_Abort_IT+0x404>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d132      	bne.n	8002ad0 <HAL_DMA_Abort_IT+0x408>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e031      	b.n	8002ad2 <HAL_DMA_Abort_IT+0x40a>
 8002a6e:	bf00      	nop
 8002a70:	40020010 	.word	0x40020010
 8002a74:	40020028 	.word	0x40020028
 8002a78:	40020040 	.word	0x40020040
 8002a7c:	40020058 	.word	0x40020058
 8002a80:	40020070 	.word	0x40020070
 8002a84:	40020088 	.word	0x40020088
 8002a88:	400200a0 	.word	0x400200a0
 8002a8c:	400200b8 	.word	0x400200b8
 8002a90:	40020410 	.word	0x40020410
 8002a94:	40020428 	.word	0x40020428
 8002a98:	40020440 	.word	0x40020440
 8002a9c:	40020458 	.word	0x40020458
 8002aa0:	40020470 	.word	0x40020470
 8002aa4:	40020488 	.word	0x40020488
 8002aa8:	400204a0 	.word	0x400204a0
 8002aac:	400204b8 	.word	0x400204b8
 8002ab0:	58025408 	.word	0x58025408
 8002ab4:	5802541c 	.word	0x5802541c
 8002ab8:	58025430 	.word	0x58025430
 8002abc:	58025444 	.word	0x58025444
 8002ac0:	58025458 	.word	0x58025458
 8002ac4:	5802546c 	.word	0x5802546c
 8002ac8:	58025480 	.word	0x58025480
 8002acc:	58025494 	.word	0x58025494
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d028      	beq.n	8002b28 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ae4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aea:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af0:	f003 031f 	and.w	r3, r3, #31
 8002af4:	2201      	movs	r2, #1
 8002af6:	409a      	lsls	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002b04:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00c      	beq.n	8002b28 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b1c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002b26:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop

08002b54 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e04f      	b.n	8002c06 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d106      	bne.n	8002b80 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7fe fb76 	bl	800126c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2202      	movs	r2, #2
 8002b84:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	4b20      	ldr	r3, [pc, #128]	; (8002c10 <HAL_DMA2D_Init+0xbc>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6851      	ldr	r1, [r2, #4]
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	69d2      	ldr	r2, [r2, #28]
 8002b9a:	4311      	orrs	r1, r2
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6812      	ldr	r2, [r2, #0]
 8002ba0:	430b      	orrs	r3, r1
 8002ba2:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002baa:	4b1a      	ldr	r3, [pc, #104]	; (8002c14 <HAL_DMA2D_Init+0xc0>)
 8002bac:	4013      	ands	r3, r2
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6891      	ldr	r1, [r2, #8]
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6992      	ldr	r2, [r2, #24]
 8002bb6:	4311      	orrs	r1, r2
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6812      	ldr	r2, [r2, #0]
 8002bbc:	430b      	orrs	r3, r1
 8002bbe:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bc6:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <HAL_DMA2D_Init+0xc4>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	68d1      	ldr	r1, [r2, #12]
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6812      	ldr	r2, [r2, #0]
 8002bd2:	430b      	orrs	r3, r1
 8002bd4:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bdc:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	051a      	lsls	r2, r3, #20
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	055b      	lsls	r3, r3, #21
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	fff8ffbf 	.word	0xfff8ffbf
 8002c14:	fffffef8 	.word	0xfffffef8
 8002c18:	ffff0000 	.word	0xffff0000

08002c1c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d026      	beq.n	8002c8c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d021      	beq.n	8002c8c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c56:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c5c:	f043 0201 	orr.w	r2, r3, #1
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2204      	movs	r2, #4
 8002c70:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f003 0320 	and.w	r3, r3, #32
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d026      	beq.n	8002ce4 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d021      	beq.n	8002ce4 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cae:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cbc:	f043 0202 	orr.w	r2, r3, #2
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2204      	movs	r2, #4
 8002cc8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d026      	beq.n	8002d3c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d021      	beq.n	8002d3c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d06:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2208      	movs	r2, #8
 8002d0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d14:	f043 0204 	orr.w	r2, r3, #4
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2204      	movs	r2, #4
 8002d20:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d003      	beq.n	8002d3c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d013      	beq.n	8002d6e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00e      	beq.n	8002d6e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d5e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2204      	movs	r2, #4
 8002d66:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 f853 	bl	8002e14 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d024      	beq.n	8002dc2 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d01f      	beq.n	8002dc2 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d90:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2202      	movs	r2, #2
 8002d98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f003 0310 	and.w	r3, r3, #16
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d01f      	beq.n	8002e0c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d01a      	beq.n	8002e0c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002de4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2210      	movs	r2, #16
 8002dec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f80e 	bl	8002e28 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002e0c:	bf00      	nop
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_DMA2D_ConfigLayer+0x24>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e092      	b.n	8002f86 <HAL_DMA2D_ConfigLayer+0x14a>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	4613      	mov	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	1a9b      	subs	r3, r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	3328      	adds	r3, #40	; 0x28
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	4413      	add	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	041b      	lsls	r3, r3, #16
 8002e8c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002e94:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8002ea0:	4b3c      	ldr	r3, [pc, #240]	; (8002f94 <HAL_DMA2D_ConfigLayer+0x158>)
 8002ea2:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b0a      	cmp	r3, #10
 8002eaa:	d003      	beq.n	8002eb4 <HAL_DMA2D_ConfigLayer+0x78>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b09      	cmp	r3, #9
 8002eb2:	d107      	bne.n	8002ec4 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	e005      	b.n	8002ed0 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	061b      	lsls	r3, r3, #24
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d120      	bne.n	8002f18 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	ea02 0103 	and.w	r1, r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	6812      	ldr	r2, [r2, #0]
 8002ef6:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b0a      	cmp	r3, #10
 8002efe:	d003      	beq.n	8002f08 <HAL_DMA2D_ConfigLayer+0xcc>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b09      	cmp	r3, #9
 8002f06:	d135      	bne.n	8002f74 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	68da      	ldr	r2, [r3, #12]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002f14:	629a      	str	r2, [r3, #40]	; 0x28
 8002f16:	e02d      	b.n	8002f74 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b0b      	cmp	r3, #11
 8002f1e:	d109      	bne.n	8002f34 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	049b      	lsls	r3, r3, #18
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8002f32:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	69da      	ldr	r2, [r3, #28]
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	ea02 0103 	and.w	r1, r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	6812      	ldr	r2, [r2, #0]
 8002f54:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b0a      	cmp	r3, #10
 8002f5c:	d003      	beq.n	8002f66 <HAL_DMA2D_ConfigLayer+0x12a>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b09      	cmp	r3, #9
 8002f64:	d106      	bne.n	8002f74 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002f72:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	371c      	adds	r7, #28
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	ff33000f 	.word	0xff33000f

08002f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b089      	sub	sp, #36	; 0x24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002fa6:	4b89      	ldr	r3, [pc, #548]	; (80031cc <HAL_GPIO_Init+0x234>)
 8002fa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002faa:	e194      	b.n	80032d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb8:	4013      	ands	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 8186 	beq.w	80032d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 0303 	and.w	r3, r3, #3
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d005      	beq.n	8002fdc <HAL_GPIO_Init+0x44>
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d130      	bne.n	800303e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	2203      	movs	r2, #3
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	43db      	mvns	r3, r3
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	4313      	orrs	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003012:	2201      	movs	r2, #1
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	43db      	mvns	r3, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4013      	ands	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	091b      	lsrs	r3, r3, #4
 8003028:	f003 0201 	and.w	r2, r3, #1
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4313      	orrs	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	2b03      	cmp	r3, #3
 8003048:	d017      	beq.n	800307a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	2203      	movs	r2, #3
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43db      	mvns	r3, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4013      	ands	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4313      	orrs	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f003 0303 	and.w	r3, r3, #3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d123      	bne.n	80030ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	08da      	lsrs	r2, r3, #3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3208      	adds	r2, #8
 800308e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	220f      	movs	r2, #15
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43db      	mvns	r3, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4013      	ands	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	691a      	ldr	r2, [r3, #16]
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4313      	orrs	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	08da      	lsrs	r2, r3, #3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3208      	adds	r2, #8
 80030c8:	69b9      	ldr	r1, [r7, #24]
 80030ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	2203      	movs	r2, #3
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	43db      	mvns	r3, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4013      	ands	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f003 0203 	and.w	r2, r3, #3
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 80e0 	beq.w	80032d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003110:	4b2f      	ldr	r3, [pc, #188]	; (80031d0 <HAL_GPIO_Init+0x238>)
 8003112:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003116:	4a2e      	ldr	r2, [pc, #184]	; (80031d0 <HAL_GPIO_Init+0x238>)
 8003118:	f043 0302 	orr.w	r3, r3, #2
 800311c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003120:	4b2b      	ldr	r3, [pc, #172]	; (80031d0 <HAL_GPIO_Init+0x238>)
 8003122:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800312e:	4a29      	ldr	r2, [pc, #164]	; (80031d4 <HAL_GPIO_Init+0x23c>)
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	089b      	lsrs	r3, r3, #2
 8003134:	3302      	adds	r3, #2
 8003136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800313a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	220f      	movs	r2, #15
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	43db      	mvns	r3, r3
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	4013      	ands	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a20      	ldr	r2, [pc, #128]	; (80031d8 <HAL_GPIO_Init+0x240>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d052      	beq.n	8003200 <HAL_GPIO_Init+0x268>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a1f      	ldr	r2, [pc, #124]	; (80031dc <HAL_GPIO_Init+0x244>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d031      	beq.n	80031c6 <HAL_GPIO_Init+0x22e>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a1e      	ldr	r2, [pc, #120]	; (80031e0 <HAL_GPIO_Init+0x248>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d02b      	beq.n	80031c2 <HAL_GPIO_Init+0x22a>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a1d      	ldr	r2, [pc, #116]	; (80031e4 <HAL_GPIO_Init+0x24c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d025      	beq.n	80031be <HAL_GPIO_Init+0x226>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a1c      	ldr	r2, [pc, #112]	; (80031e8 <HAL_GPIO_Init+0x250>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d01f      	beq.n	80031ba <HAL_GPIO_Init+0x222>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a1b      	ldr	r2, [pc, #108]	; (80031ec <HAL_GPIO_Init+0x254>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d019      	beq.n	80031b6 <HAL_GPIO_Init+0x21e>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a1a      	ldr	r2, [pc, #104]	; (80031f0 <HAL_GPIO_Init+0x258>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d013      	beq.n	80031b2 <HAL_GPIO_Init+0x21a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a19      	ldr	r2, [pc, #100]	; (80031f4 <HAL_GPIO_Init+0x25c>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d00d      	beq.n	80031ae <HAL_GPIO_Init+0x216>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a18      	ldr	r2, [pc, #96]	; (80031f8 <HAL_GPIO_Init+0x260>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d007      	beq.n	80031aa <HAL_GPIO_Init+0x212>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a17      	ldr	r2, [pc, #92]	; (80031fc <HAL_GPIO_Init+0x264>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d101      	bne.n	80031a6 <HAL_GPIO_Init+0x20e>
 80031a2:	2309      	movs	r3, #9
 80031a4:	e02d      	b.n	8003202 <HAL_GPIO_Init+0x26a>
 80031a6:	230a      	movs	r3, #10
 80031a8:	e02b      	b.n	8003202 <HAL_GPIO_Init+0x26a>
 80031aa:	2308      	movs	r3, #8
 80031ac:	e029      	b.n	8003202 <HAL_GPIO_Init+0x26a>
 80031ae:	2307      	movs	r3, #7
 80031b0:	e027      	b.n	8003202 <HAL_GPIO_Init+0x26a>
 80031b2:	2306      	movs	r3, #6
 80031b4:	e025      	b.n	8003202 <HAL_GPIO_Init+0x26a>
 80031b6:	2305      	movs	r3, #5
 80031b8:	e023      	b.n	8003202 <HAL_GPIO_Init+0x26a>
 80031ba:	2304      	movs	r3, #4
 80031bc:	e021      	b.n	8003202 <HAL_GPIO_Init+0x26a>
 80031be:	2303      	movs	r3, #3
 80031c0:	e01f      	b.n	8003202 <HAL_GPIO_Init+0x26a>
 80031c2:	2302      	movs	r3, #2
 80031c4:	e01d      	b.n	8003202 <HAL_GPIO_Init+0x26a>
 80031c6:	2301      	movs	r3, #1
 80031c8:	e01b      	b.n	8003202 <HAL_GPIO_Init+0x26a>
 80031ca:	bf00      	nop
 80031cc:	58000080 	.word	0x58000080
 80031d0:	58024400 	.word	0x58024400
 80031d4:	58000400 	.word	0x58000400
 80031d8:	58020000 	.word	0x58020000
 80031dc:	58020400 	.word	0x58020400
 80031e0:	58020800 	.word	0x58020800
 80031e4:	58020c00 	.word	0x58020c00
 80031e8:	58021000 	.word	0x58021000
 80031ec:	58021400 	.word	0x58021400
 80031f0:	58021800 	.word	0x58021800
 80031f4:	58021c00 	.word	0x58021c00
 80031f8:	58022000 	.word	0x58022000
 80031fc:	58022400 	.word	0x58022400
 8003200:	2300      	movs	r3, #0
 8003202:	69fa      	ldr	r2, [r7, #28]
 8003204:	f002 0203 	and.w	r2, r2, #3
 8003208:	0092      	lsls	r2, r2, #2
 800320a:	4093      	lsls	r3, r2
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4313      	orrs	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003212:	4938      	ldr	r1, [pc, #224]	; (80032f4 <HAL_GPIO_Init+0x35c>)
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	089b      	lsrs	r3, r3, #2
 8003218:	3302      	adds	r3, #2
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	43db      	mvns	r3, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4013      	ands	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003246:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800324e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	43db      	mvns	r3, r3
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4013      	ands	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d003      	beq.n	8003274 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	4313      	orrs	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003274:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	43db      	mvns	r3, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4013      	ands	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4313      	orrs	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	43db      	mvns	r3, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	4013      	ands	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	3301      	adds	r3, #1
 80032d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	fa22 f303 	lsr.w	r3, r2, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f47f ae63 	bne.w	8002fac <HAL_GPIO_Init+0x14>
  }
}
 80032e6:	bf00      	nop
 80032e8:	bf00      	nop
 80032ea:	3724      	adds	r7, #36	; 0x24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	58000400 	.word	0x58000400

080032f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	460b      	mov	r3, r1
 8003302:	807b      	strh	r3, [r7, #2]
 8003304:	4613      	mov	r3, r2
 8003306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003308:	787b      	ldrb	r3, [r7, #1]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800330e:	887a      	ldrh	r2, [r7, #2]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003314:	e003      	b.n	800331e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003316:	887b      	ldrh	r3, [r7, #2]
 8003318:	041a      	lsls	r2, r3, #16
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	619a      	str	r2, [r3, #24]
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
	...

0800332c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e0bf      	b.n	80034be <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d106      	bne.n	8003358 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7fd ffb2 	bl	80012bc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2202      	movs	r2, #2
 800335c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699a      	ldr	r2, [r3, #24]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800336e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6999      	ldr	r1, [r3, #24]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003384:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6899      	ldr	r1, [r3, #8]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	4b4a      	ldr	r3, [pc, #296]	; (80034c8 <HAL_LTDC_Init+0x19c>)
 80033a0:	400b      	ands	r3, r1
 80033a2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	041b      	lsls	r3, r3, #16
 80033aa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6899      	ldr	r1, [r3, #8]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699a      	ldr	r2, [r3, #24]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	431a      	orrs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68d9      	ldr	r1, [r3, #12]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	4b3e      	ldr	r3, [pc, #248]	; (80034c8 <HAL_LTDC_Init+0x19c>)
 80033ce:	400b      	ands	r3, r1
 80033d0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	041b      	lsls	r3, r3, #16
 80033d8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68d9      	ldr	r1, [r3, #12]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a1a      	ldr	r2, [r3, #32]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6919      	ldr	r1, [r3, #16]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	4b33      	ldr	r3, [pc, #204]	; (80034c8 <HAL_LTDC_Init+0x19c>)
 80033fc:	400b      	ands	r3, r1
 80033fe:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	041b      	lsls	r3, r3, #16
 8003406:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6919      	ldr	r1, [r3, #16]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	431a      	orrs	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6959      	ldr	r1, [r3, #20]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	4b27      	ldr	r3, [pc, #156]	; (80034c8 <HAL_LTDC_Init+0x19c>)
 800342a:	400b      	ands	r3, r1
 800342c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003432:	041b      	lsls	r3, r3, #16
 8003434:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6959      	ldr	r1, [r3, #20]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003452:	021b      	lsls	r3, r3, #8
 8003454:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800345c:	041b      	lsls	r3, r3, #16
 800345e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800346e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4313      	orrs	r3, r2
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0206 	orr.w	r2, r2, #6
 800349a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	699a      	ldr	r2, [r3, #24]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0201 	orr.w	r2, r2, #1
 80034aa:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	f000f800 	.word	0xf000f800

080034cc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034da:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f003 0304 	and.w	r3, r3, #4
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d023      	beq.n	8003536 <HAL_LTDC_IRQHandler+0x6a>
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d01e      	beq.n	8003536 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0204 	bic.w	r2, r2, #4
 8003506:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2204      	movs	r2, #4
 800350e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003516:	f043 0201 	orr.w	r2, r3, #1
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2204      	movs	r2, #4
 8003524:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f86f 	bl	8003614 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d023      	beq.n	8003588 <HAL_LTDC_IRQHandler+0xbc>
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d01e      	beq.n	8003588 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0202 	bic.w	r2, r2, #2
 8003558:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2202      	movs	r2, #2
 8003560:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003568:	f043 0202 	orr.w	r2, r3, #2
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2204      	movs	r2, #4
 8003576:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f846 	bl	8003614 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d01b      	beq.n	80035ca <HAL_LTDC_IRQHandler+0xfe>
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b00      	cmp	r3, #0
 800359a:	d016      	beq.n	80035ca <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0201 	bic.w	r2, r2, #1
 80035aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2201      	movs	r2, #1
 80035b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f82f 	bl	8003628 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f003 0308 	and.w	r3, r3, #8
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d01b      	beq.n	800360c <HAL_LTDC_IRQHandler+0x140>
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d016      	beq.n	800360c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0208 	bic.w	r2, r2, #8
 80035ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2208      	movs	r2, #8
 80035f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f818 	bl	800363c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800360c:	bf00      	nop
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003650:	b5b0      	push	{r4, r5, r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003662:	2b01      	cmp	r3, #1
 8003664:	d101      	bne.n	800366a <HAL_LTDC_ConfigLayer+0x1a>
 8003666:	2302      	movs	r3, #2
 8003668:	e02c      	b.n	80036c4 <HAL_LTDC_ConfigLayer+0x74>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2202      	movs	r2, #2
 8003676:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2134      	movs	r1, #52	; 0x34
 8003680:	fb01 f303 	mul.w	r3, r1, r3
 8003684:	4413      	add	r3, r2
 8003686:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	4614      	mov	r4, r2
 800368e:	461d      	mov	r5, r3
 8003690:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003692:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003694:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003696:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003698:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800369a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800369c:	682b      	ldr	r3, [r5, #0]
 800369e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	68b9      	ldr	r1, [r7, #8]
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 f811 	bl	80036cc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2201      	movs	r2, #1
 80036b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bdb0      	pop	{r4, r5, r7, pc}

080036cc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b089      	sub	sp, #36	; 0x24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	0c1b      	lsrs	r3, r3, #16
 80036e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036e8:	4413      	add	r3, r2
 80036ea:	041b      	lsls	r3, r3, #16
 80036ec:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	461a      	mov	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	01db      	lsls	r3, r3, #7
 80036f8:	4413      	add	r3, r2
 80036fa:	3384      	adds	r3, #132	; 0x84
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	6812      	ldr	r2, [r2, #0]
 8003702:	4611      	mov	r1, r2
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	01d2      	lsls	r2, r2, #7
 8003708:	440a      	add	r2, r1
 800370a:	3284      	adds	r2, #132	; 0x84
 800370c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003710:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	0c1b      	lsrs	r3, r3, #16
 800371e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003722:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003724:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4619      	mov	r1, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	01db      	lsls	r3, r3, #7
 8003730:	440b      	add	r3, r1
 8003732:	3384      	adds	r3, #132	; 0x84
 8003734:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800373a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	68da      	ldr	r2, [r3, #12]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800374a:	4413      	add	r3, r2
 800374c:	041b      	lsls	r3, r3, #16
 800374e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	461a      	mov	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	01db      	lsls	r3, r3, #7
 800375a:	4413      	add	r3, r2
 800375c:	3384      	adds	r3, #132	; 0x84
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	6812      	ldr	r2, [r2, #0]
 8003764:	4611      	mov	r1, r2
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	01d2      	lsls	r2, r2, #7
 800376a:	440a      	add	r2, r1
 800376c:	3284      	adds	r2, #132	; 0x84
 800376e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003772:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003782:	4413      	add	r3, r2
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4619      	mov	r1, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	01db      	lsls	r3, r3, #7
 8003790:	440b      	add	r3, r1
 8003792:	3384      	adds	r3, #132	; 0x84
 8003794:	4619      	mov	r1, r3
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	4313      	orrs	r3, r2
 800379a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	461a      	mov	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	01db      	lsls	r3, r3, #7
 80037a6:	4413      	add	r3, r2
 80037a8:	3384      	adds	r3, #132	; 0x84
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	4611      	mov	r1, r2
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	01d2      	lsls	r2, r2, #7
 80037b6:	440a      	add	r2, r1
 80037b8:	3284      	adds	r2, #132	; 0x84
 80037ba:	f023 0307 	bic.w	r3, r3, #7
 80037be:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	461a      	mov	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	01db      	lsls	r3, r3, #7
 80037ca:	4413      	add	r3, r2
 80037cc:	3384      	adds	r3, #132	; 0x84
 80037ce:	461a      	mov	r2, r3
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80037dc:	021b      	lsls	r3, r3, #8
 80037de:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80037e6:	041b      	lsls	r3, r3, #16
 80037e8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	061b      	lsls	r3, r3, #24
 80037f0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	461a      	mov	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	01db      	lsls	r3, r3, #7
 80037fc:	4413      	add	r3, r2
 80037fe:	3384      	adds	r3, #132	; 0x84
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	461a      	mov	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	01db      	lsls	r3, r3, #7
 800380c:	4413      	add	r3, r2
 800380e:	3384      	adds	r3, #132	; 0x84
 8003810:	461a      	mov	r2, r3
 8003812:	2300      	movs	r3, #0
 8003814:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800381c:	461a      	mov	r2, r3
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	431a      	orrs	r2, r3
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	431a      	orrs	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4619      	mov	r1, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	01db      	lsls	r3, r3, #7
 8003830:	440b      	add	r3, r1
 8003832:	3384      	adds	r3, #132	; 0x84
 8003834:	4619      	mov	r1, r3
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	4313      	orrs	r3, r2
 800383a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	461a      	mov	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	01db      	lsls	r3, r3, #7
 8003846:	4413      	add	r3, r2
 8003848:	3384      	adds	r3, #132	; 0x84
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	6812      	ldr	r2, [r2, #0]
 8003850:	4611      	mov	r1, r2
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	01d2      	lsls	r2, r2, #7
 8003856:	440a      	add	r2, r1
 8003858:	3284      	adds	r2, #132	; 0x84
 800385a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800385e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	461a      	mov	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	01db      	lsls	r3, r3, #7
 800386a:	4413      	add	r3, r2
 800386c:	3384      	adds	r3, #132	; 0x84
 800386e:	461a      	mov	r2, r3
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	461a      	mov	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	01db      	lsls	r3, r3, #7
 8003880:	4413      	add	r3, r2
 8003882:	3384      	adds	r3, #132	; 0x84
 8003884:	69da      	ldr	r2, [r3, #28]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4619      	mov	r1, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	01db      	lsls	r3, r3, #7
 8003890:	440b      	add	r3, r1
 8003892:	3384      	adds	r3, #132	; 0x84
 8003894:	4619      	mov	r1, r3
 8003896:	4b58      	ldr	r3, [pc, #352]	; (80039f8 <LTDC_SetConfig+0x32c>)
 8003898:	4013      	ands	r3, r2
 800389a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	69da      	ldr	r2, [r3, #28]
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	68f9      	ldr	r1, [r7, #12]
 80038a6:	6809      	ldr	r1, [r1, #0]
 80038a8:	4608      	mov	r0, r1
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	01c9      	lsls	r1, r1, #7
 80038ae:	4401      	add	r1, r0
 80038b0:	3184      	adds	r1, #132	; 0x84
 80038b2:	4313      	orrs	r3, r2
 80038b4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	461a      	mov	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	01db      	lsls	r3, r3, #7
 80038c0:	4413      	add	r3, r2
 80038c2:	3384      	adds	r3, #132	; 0x84
 80038c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	461a      	mov	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	01db      	lsls	r3, r3, #7
 80038d0:	4413      	add	r3, r2
 80038d2:	3384      	adds	r3, #132	; 0x84
 80038d4:	461a      	mov	r2, r3
 80038d6:	2300      	movs	r3, #0
 80038d8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	461a      	mov	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	01db      	lsls	r3, r3, #7
 80038e4:	4413      	add	r3, r2
 80038e6:	3384      	adds	r3, #132	; 0x84
 80038e8:	461a      	mov	r2, r3
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d102      	bne.n	80038fe <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80038f8:	2304      	movs	r3, #4
 80038fa:	61fb      	str	r3, [r7, #28]
 80038fc:	e01b      	b.n	8003936 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d102      	bne.n	800390c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8003906:	2303      	movs	r3, #3
 8003908:	61fb      	str	r3, [r7, #28]
 800390a:	e014      	b.n	8003936 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	2b04      	cmp	r3, #4
 8003912:	d00b      	beq.n	800392c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003918:	2b02      	cmp	r3, #2
 800391a:	d007      	beq.n	800392c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003920:	2b03      	cmp	r3, #3
 8003922:	d003      	beq.n	800392c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003928:	2b07      	cmp	r3, #7
 800392a:	d102      	bne.n	8003932 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800392c:	2302      	movs	r3, #2
 800392e:	61fb      	str	r3, [r7, #28]
 8003930:	e001      	b.n	8003936 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8003932:	2301      	movs	r3, #1
 8003934:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	01db      	lsls	r3, r3, #7
 8003940:	4413      	add	r3, r2
 8003942:	3384      	adds	r3, #132	; 0x84
 8003944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	6812      	ldr	r2, [r2, #0]
 800394a:	4611      	mov	r1, r2
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	01d2      	lsls	r2, r2, #7
 8003950:	440a      	add	r2, r1
 8003952:	3284      	adds	r2, #132	; 0x84
 8003954:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003958:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395e:	69fa      	ldr	r2, [r7, #28]
 8003960:	fb02 f303 	mul.w	r3, r2, r3
 8003964:	041a      	lsls	r2, r3, #16
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	6859      	ldr	r1, [r3, #4]
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	1acb      	subs	r3, r1, r3
 8003970:	69f9      	ldr	r1, [r7, #28]
 8003972:	fb01 f303 	mul.w	r3, r1, r3
 8003976:	3307      	adds	r3, #7
 8003978:	68f9      	ldr	r1, [r7, #12]
 800397a:	6809      	ldr	r1, [r1, #0]
 800397c:	4608      	mov	r0, r1
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	01c9      	lsls	r1, r1, #7
 8003982:	4401      	add	r1, r0
 8003984:	3184      	adds	r1, #132	; 0x84
 8003986:	4313      	orrs	r3, r2
 8003988:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	461a      	mov	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	01db      	lsls	r3, r3, #7
 8003994:	4413      	add	r3, r2
 8003996:	3384      	adds	r3, #132	; 0x84
 8003998:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4619      	mov	r1, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	01db      	lsls	r3, r3, #7
 80039a4:	440b      	add	r3, r1
 80039a6:	3384      	adds	r3, #132	; 0x84
 80039a8:	4619      	mov	r1, r3
 80039aa:	4b14      	ldr	r3, [pc, #80]	; (80039fc <LTDC_SetConfig+0x330>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	461a      	mov	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	01db      	lsls	r3, r3, #7
 80039ba:	4413      	add	r3, r2
 80039bc:	3384      	adds	r3, #132	; 0x84
 80039be:	461a      	mov	r2, r3
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	01db      	lsls	r3, r3, #7
 80039d0:	4413      	add	r3, r2
 80039d2:	3384      	adds	r3, #132	; 0x84
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	6812      	ldr	r2, [r2, #0]
 80039da:	4611      	mov	r1, r2
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	01d2      	lsls	r2, r2, #7
 80039e0:	440a      	add	r2, r1
 80039e2:	3284      	adds	r2, #132	; 0x84
 80039e4:	f043 0301 	orr.w	r3, r3, #1
 80039e8:	6013      	str	r3, [r2, #0]
}
 80039ea:	bf00      	nop
 80039ec:	3724      	adds	r7, #36	; 0x24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	fffff8f8 	.word	0xfffff8f8
 80039fc:	fffff800 	.word	0xfffff800

08003a00 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003a08:	4b19      	ldr	r3, [pc, #100]	; (8003a70 <HAL_PWREx_ConfigSupply+0x70>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b04      	cmp	r3, #4
 8003a12:	d00a      	beq.n	8003a2a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003a14:	4b16      	ldr	r3, [pc, #88]	; (8003a70 <HAL_PWREx_ConfigSupply+0x70>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d001      	beq.n	8003a26 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e01f      	b.n	8003a66 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003a26:	2300      	movs	r3, #0
 8003a28:	e01d      	b.n	8003a66 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003a2a:	4b11      	ldr	r3, [pc, #68]	; (8003a70 <HAL_PWREx_ConfigSupply+0x70>)
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f023 0207 	bic.w	r2, r3, #7
 8003a32:	490f      	ldr	r1, [pc, #60]	; (8003a70 <HAL_PWREx_ConfigSupply+0x70>)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003a3a:	f7fe f9e3 	bl	8001e04 <HAL_GetTick>
 8003a3e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a40:	e009      	b.n	8003a56 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a42:	f7fe f9df 	bl	8001e04 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a50:	d901      	bls.n	8003a56 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e007      	b.n	8003a66 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a56:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <HAL_PWREx_ConfigSupply+0x70>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a62:	d1ee      	bne.n	8003a42 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	58024800 	.word	0x58024800

08003a74 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af02      	add	r7, sp, #8
 8003a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003a7c:	f7fe f9c2 	bl	8001e04 <HAL_GetTick>
 8003a80:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e05f      	b.n	8003b4c <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d107      	bne.n	8003aa8 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7fd fd05 	bl	80014a8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003a9e:	f241 3188 	movw	r1, #5000	; 0x1388
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f9e7 	bl	8003e76 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	021a      	lsls	r2, r3, #8
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	2120      	movs	r1, #32
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f9df 	bl	8003e92 <QSPI_WaitFlagStateUntilTimeout>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003ad8:	7afb      	ldrb	r3, [r7, #11]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d135      	bne.n	8003b4a <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	4b1b      	ldr	r3, [pc, #108]	; (8003b54 <HAL_QSPI_Init+0xe0>)
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6852      	ldr	r2, [r2, #4]
 8003aec:	0611      	lsls	r1, r2, #24
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	68d2      	ldr	r2, [r2, #12]
 8003af2:	4311      	orrs	r1, r2
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	69d2      	ldr	r2, [r2, #28]
 8003af8:	4311      	orrs	r1, r2
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6a12      	ldr	r2, [r2, #32]
 8003afe:	4311      	orrs	r1, r2
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6812      	ldr	r2, [r2, #0]
 8003b04:	430b      	orrs	r3, r1
 8003b06:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	4b12      	ldr	r3, [pc, #72]	; (8003b58 <HAL_QSPI_Init+0xe4>)
 8003b10:	4013      	ands	r3, r2
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6912      	ldr	r2, [r2, #16]
 8003b16:	0411      	lsls	r1, r2, #16
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6952      	ldr	r2, [r2, #20]
 8003b1c:	4311      	orrs	r1, r2
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6992      	ldr	r2, [r2, #24]
 8003b22:	4311      	orrs	r1, r2
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6812      	ldr	r2, [r2, #0]
 8003b28:	430b      	orrs	r3, r1
 8003b2a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0201 	orr.w	r2, r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8003b4a:	7afb      	ldrb	r3, [r7, #11]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	00ffff2f 	.word	0x00ffff2f
 8003b58:	ffe0f8fe 	.word	0xffe0f8fe

08003b5c <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b088      	sub	sp, #32
 8003b60:	af02      	add	r7, sp, #8
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003b68:	f7fe f94c 	bl	8001e04 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <HAL_QSPI_Command+0x22>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	e048      	b.n	8003c10 <HAL_QSPI_Command+0xb4>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d137      	bne.n	8003c02 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	2120      	movs	r1, #32
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 f971 	bl	8003e92 <QSPI_WaitFlagStateUntilTimeout>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003bb4:	7dfb      	ldrb	r3, [r7, #23]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d125      	bne.n	8003c06 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003bba:	2200      	movs	r2, #0
 8003bbc:	68b9      	ldr	r1, [r7, #8]
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 f99e 	bl	8003f00 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d115      	bne.n	8003bf8 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	2102      	movs	r1, #2
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 f95b 	bl	8003e92 <QSPI_WaitFlagStateUntilTimeout>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8003be0:	7dfb      	ldrb	r3, [r7, #23]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10f      	bne.n	8003c06 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2202      	movs	r2, #2
 8003bec:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bf6:	e006      	b.n	8003c06 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c00:	e001      	b.n	8003c06 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8003c02:	2302      	movs	r3, #2
 8003c04:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8003c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3718      	adds	r7, #24
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b08a      	sub	sp, #40	; 0x28
 8003c1c:	af02      	add	r7, sp, #8
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8003c28:	f7fe f8ec 	bl	8001e04 <HAL_GetTick>
 8003c2c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	3320      	adds	r3, #32
 8003c34:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d101      	bne.n	8003c46 <HAL_QSPI_Transmit+0x2e>
 8003c42:	2302      	movs	r3, #2
 8003c44:	e076      	b.n	8003d34 <HAL_QSPI_Transmit+0x11c>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d165      	bne.n	8003d26 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d056      	beq.n	8003d14 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2212      	movs	r2, #18
 8003c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	1c5a      	adds	r2, r3, #1
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695a      	ldr	r2, [r3, #20]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003c9a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8003c9c:	e01b      	b.n	8003cd6 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	2104      	movs	r1, #4
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f000 f8f2 	bl	8003e92 <QSPI_WaitFlagStateUntilTimeout>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8003cb2:	7ffb      	ldrb	r3, [r7, #31]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d113      	bne.n	8003ce0 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	781a      	ldrb	r2, [r3, #0]
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	1c5a      	adds	r2, r3, #1
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd0:	1e5a      	subs	r2, r3, #1
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1df      	bne.n	8003c9e <HAL_QSPI_Transmit+0x86>
 8003cde:	e000      	b.n	8003ce2 <HAL_QSPI_Transmit+0xca>
          break;
 8003ce0:	bf00      	nop
      }

      if (status == HAL_OK)
 8003ce2:	7ffb      	ldrb	r3, [r7, #31]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d110      	bne.n	8003d0a <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	9300      	str	r3, [sp, #0]
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	2102      	movs	r1, #2
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 f8cd 	bl	8003e92 <QSPI_WaitFlagStateUntilTimeout>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8003cfc:	7ffb      	ldrb	r3, [r7, #31]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d103      	bne.n	8003d0a <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2202      	movs	r2, #2
 8003d08:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d12:	e00a      	b.n	8003d2a <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d18:	f043 0208 	orr.w	r2, r3, #8
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	77fb      	strb	r3, [r7, #31]
 8003d24:	e001      	b.n	8003d2a <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003d26:	2302      	movs	r3, #2
 8003d28:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8003d32:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3720      	adds	r7, #32
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b08a      	sub	sp, #40	; 0x28
 8003d40:	af02      	add	r7, sp, #8
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8003d4c:	f7fe f85a 	bl	8001e04 <HAL_GetTick>
 8003d50:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	3320      	adds	r3, #32
 8003d60:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d101      	bne.n	8003d72 <HAL_QSPI_Receive+0x36>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	e07d      	b.n	8003e6e <HAL_QSPI_Receive+0x132>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d16c      	bne.n	8003e60 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d05d      	beq.n	8003e4e <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2222      	movs	r2, #34	; 0x22
 8003d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	1c5a      	adds	r2, r3, #1
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	1c5a      	adds	r2, r3, #1
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003dca:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8003dd4:	e01c      	b.n	8003e10 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	2106      	movs	r1, #6
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 f856 	bl	8003e92 <QSPI_WaitFlagStateUntilTimeout>
 8003de6:	4603      	mov	r3, r0
 8003de8:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8003dea:	7ffb      	ldrb	r3, [r7, #31]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d114      	bne.n	8003e1a <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	7812      	ldrb	r2, [r2, #0]
 8003df8:	b2d2      	uxtb	r2, r2
 8003dfa:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e00:	1c5a      	adds	r2, r3, #1
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0a:	1e5a      	subs	r2, r3, #1
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1de      	bne.n	8003dd6 <HAL_QSPI_Receive+0x9a>
 8003e18:	e000      	b.n	8003e1c <HAL_QSPI_Receive+0xe0>
          break;
 8003e1a:	bf00      	nop
      }

      if (status == HAL_OK)
 8003e1c:	7ffb      	ldrb	r3, [r7, #31]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d110      	bne.n	8003e44 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	2102      	movs	r1, #2
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f000 f830 	bl	8003e92 <QSPI_WaitFlagStateUntilTimeout>
 8003e32:	4603      	mov	r3, r0
 8003e34:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8003e36:	7ffb      	ldrb	r3, [r7, #31]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d103      	bne.n	8003e44 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2202      	movs	r2, #2
 8003e42:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e4c:	e00a      	b.n	8003e64 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e52:	f043 0208 	orr.w	r2, r3, #8
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	77fb      	strb	r3, [r7, #31]
 8003e5e:	e001      	b.n	8003e64 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003e60:	2302      	movs	r3, #2
 8003e62:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8003e6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3720      	adds	r7, #32
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
 8003e7e:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	649a      	str	r2, [r3, #72]	; 0x48
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b084      	sub	sp, #16
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	60f8      	str	r0, [r7, #12]
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	603b      	str	r3, [r7, #0]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003ea2:	e01a      	b.n	8003eda <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eaa:	d016      	beq.n	8003eda <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eac:	f7fd ffaa 	bl	8001e04 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d302      	bcc.n	8003ec2 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10b      	bne.n	8003eda <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2204      	movs	r2, #4
 8003ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ece:	f043 0201 	orr.w	r2, r3, #1
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e00e      	b.n	8003ef8 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	bf14      	ite	ne
 8003ee8:	2301      	movne	r3, #1
 8003eea:	2300      	moveq	r3, #0
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	461a      	mov	r2, r3
 8003ef0:	79fb      	ldrb	r3, [r7, #7]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d1d6      	bne.n	8003ea4 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d009      	beq.n	8003f28 <QSPI_Config+0x28>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003f1a:	d005      	beq.n	8003f28 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	3a01      	subs	r2, #1
 8003f26:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 80b9 	beq.w	80040a4 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d05f      	beq.n	8003ffa <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	6892      	ldr	r2, [r2, #8]
 8003f42:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d031      	beq.n	8003fb0 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f54:	431a      	orrs	r2, r3
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	431a      	orrs	r2, r3
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	049b      	lsls	r3, r3, #18
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	431a      	orrs	r2, r3
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	69db      	ldr	r3, [r3, #28]
 8003f80:	431a      	orrs	r2, r3
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	431a      	orrs	r2, r3
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	ea42 0103 	orr.w	r1, r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003fa0:	f000 812e 	beq.w	8004200 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	6852      	ldr	r2, [r2, #4]
 8003fac:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8003fae:	e127      	b.n	8004200 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	049b      	lsls	r3, r3, #18
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	ea42 0103 	orr.w	r1, r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	615a      	str	r2, [r3, #20]
}
 8003ff8:	e102      	b.n	8004200 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d02e      	beq.n	8004060 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400a:	431a      	orrs	r2, r3
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004010:	431a      	orrs	r2, r3
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	431a      	orrs	r2, r3
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	049b      	lsls	r3, r3, #18
 800401e:	431a      	orrs	r2, r3
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	431a      	orrs	r2, r3
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	431a      	orrs	r2, r3
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	431a      	orrs	r2, r3
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	431a      	orrs	r2, r3
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	ea42 0103 	orr.w	r1, r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	430a      	orrs	r2, r1
 8004048:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004050:	f000 80d6 	beq.w	8004200 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68ba      	ldr	r2, [r7, #8]
 800405a:	6852      	ldr	r2, [r2, #4]
 800405c:	619a      	str	r2, [r3, #24]
}
 800405e:	e0cf      	b.n	8004200 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004068:	431a      	orrs	r2, r3
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406e:	431a      	orrs	r2, r3
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	431a      	orrs	r2, r3
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	049b      	lsls	r3, r3, #18
 800407c:	431a      	orrs	r2, r3
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	431a      	orrs	r2, r3
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	431a      	orrs	r2, r3
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	431a      	orrs	r2, r3
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	ea42 0103 	orr.w	r1, r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	430a      	orrs	r2, r1
 80040a0:	615a      	str	r2, [r3, #20]
}
 80040a2:	e0ad      	b.n	8004200 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d058      	beq.n	800415e <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	6892      	ldr	r2, [r2, #8]
 80040b4:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d02d      	beq.n	800411a <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c6:	431a      	orrs	r2, r3
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040cc:	431a      	orrs	r2, r3
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	431a      	orrs	r2, r3
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	049b      	lsls	r3, r3, #18
 80040da:	431a      	orrs	r2, r3
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	431a      	orrs	r2, r3
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	431a      	orrs	r2, r3
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	431a      	orrs	r2, r3
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	431a      	orrs	r2, r3
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	ea42 0103 	orr.w	r1, r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	430a      	orrs	r2, r1
 8004104:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800410c:	d078      	beq.n	8004200 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	6852      	ldr	r2, [r2, #4]
 8004116:	619a      	str	r2, [r3, #24]
}
 8004118:	e072      	b.n	8004200 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004122:	431a      	orrs	r2, r3
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004128:	431a      	orrs	r2, r3
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	431a      	orrs	r2, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	049b      	lsls	r3, r3, #18
 8004136:	431a      	orrs	r2, r3
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	431a      	orrs	r2, r3
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	431a      	orrs	r2, r3
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	431a      	orrs	r2, r3
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	ea42 0103 	orr.w	r1, r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	430a      	orrs	r2, r1
 800415a:	615a      	str	r2, [r3, #20]
}
 800415c:	e050      	b.n	8004200 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d02a      	beq.n	80041bc <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416e:	431a      	orrs	r2, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004174:	431a      	orrs	r2, r3
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	431a      	orrs	r2, r3
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	049b      	lsls	r3, r3, #18
 8004182:	431a      	orrs	r2, r3
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	431a      	orrs	r2, r3
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	431a      	orrs	r2, r3
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	431a      	orrs	r2, r3
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	ea42 0103 	orr.w	r1, r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80041ae:	d027      	beq.n	8004200 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	6852      	ldr	r2, [r2, #4]
 80041b8:	619a      	str	r2, [r3, #24]
}
 80041ba:	e021      	b.n	8004200 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d01d      	beq.n	8004200 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041cc:	431a      	orrs	r2, r3
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d2:	431a      	orrs	r2, r3
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d8:	431a      	orrs	r2, r3
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	049b      	lsls	r3, r3, #18
 80041e0:	431a      	orrs	r2, r3
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	431a      	orrs	r2, r3
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	431a      	orrs	r2, r3
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	ea42 0103 	orr.w	r1, r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	615a      	str	r2, [r3, #20]
}
 8004200:	bf00      	nop
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b08c      	sub	sp, #48	; 0x30
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d102      	bne.n	8004220 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	f000 bc48 	b.w	8004ab0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 8088 	beq.w	800433e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800422e:	4b99      	ldr	r3, [pc, #612]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004236:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004238:	4b96      	ldr	r3, [pc, #600]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 800423a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800423e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004240:	2b10      	cmp	r3, #16
 8004242:	d007      	beq.n	8004254 <HAL_RCC_OscConfig+0x48>
 8004244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004246:	2b18      	cmp	r3, #24
 8004248:	d111      	bne.n	800426e <HAL_RCC_OscConfig+0x62>
 800424a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424c:	f003 0303 	and.w	r3, r3, #3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d10c      	bne.n	800426e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004254:	4b8f      	ldr	r3, [pc, #572]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d06d      	beq.n	800433c <HAL_RCC_OscConfig+0x130>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d169      	bne.n	800433c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	f000 bc21 	b.w	8004ab0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004276:	d106      	bne.n	8004286 <HAL_RCC_OscConfig+0x7a>
 8004278:	4b86      	ldr	r3, [pc, #536]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a85      	ldr	r2, [pc, #532]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 800427e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004282:	6013      	str	r3, [r2, #0]
 8004284:	e02e      	b.n	80042e4 <HAL_RCC_OscConfig+0xd8>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10c      	bne.n	80042a8 <HAL_RCC_OscConfig+0x9c>
 800428e:	4b81      	ldr	r3, [pc, #516]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a80      	ldr	r2, [pc, #512]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 8004294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004298:	6013      	str	r3, [r2, #0]
 800429a:	4b7e      	ldr	r3, [pc, #504]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a7d      	ldr	r2, [pc, #500]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 80042a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	e01d      	b.n	80042e4 <HAL_RCC_OscConfig+0xd8>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042b0:	d10c      	bne.n	80042cc <HAL_RCC_OscConfig+0xc0>
 80042b2:	4b78      	ldr	r3, [pc, #480]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a77      	ldr	r2, [pc, #476]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 80042b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042bc:	6013      	str	r3, [r2, #0]
 80042be:	4b75      	ldr	r3, [pc, #468]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a74      	ldr	r2, [pc, #464]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 80042c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	e00b      	b.n	80042e4 <HAL_RCC_OscConfig+0xd8>
 80042cc:	4b71      	ldr	r3, [pc, #452]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a70      	ldr	r2, [pc, #448]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 80042d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042d6:	6013      	str	r3, [r2, #0]
 80042d8:	4b6e      	ldr	r3, [pc, #440]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a6d      	ldr	r2, [pc, #436]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 80042de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d013      	beq.n	8004314 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ec:	f7fd fd8a 	bl	8001e04 <HAL_GetTick>
 80042f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042f4:	f7fd fd86 	bl	8001e04 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b64      	cmp	r3, #100	; 0x64
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e3d4      	b.n	8004ab0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004306:	4b63      	ldr	r3, [pc, #396]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0f0      	beq.n	80042f4 <HAL_RCC_OscConfig+0xe8>
 8004312:	e014      	b.n	800433e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004314:	f7fd fd76 	bl	8001e04 <HAL_GetTick>
 8004318:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800431c:	f7fd fd72 	bl	8001e04 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b64      	cmp	r3, #100	; 0x64
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e3c0      	b.n	8004ab0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800432e:	4b59      	ldr	r3, [pc, #356]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1f0      	bne.n	800431c <HAL_RCC_OscConfig+0x110>
 800433a:	e000      	b.n	800433e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800433c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 80ca 	beq.w	80044e0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800434c:	4b51      	ldr	r3, [pc, #324]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004354:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004356:	4b4f      	ldr	r3, [pc, #316]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 8004358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d007      	beq.n	8004372 <HAL_RCC_OscConfig+0x166>
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	2b18      	cmp	r3, #24
 8004366:	d156      	bne.n	8004416 <HAL_RCC_OscConfig+0x20a>
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	f003 0303 	and.w	r3, r3, #3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d151      	bne.n	8004416 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004372:	4b48      	ldr	r3, [pc, #288]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0304 	and.w	r3, r3, #4
 800437a:	2b00      	cmp	r3, #0
 800437c:	d005      	beq.n	800438a <HAL_RCC_OscConfig+0x17e>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e392      	b.n	8004ab0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800438a:	4b42      	ldr	r3, [pc, #264]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f023 0219 	bic.w	r2, r3, #25
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	493f      	ldr	r1, [pc, #252]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 8004398:	4313      	orrs	r3, r2
 800439a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439c:	f7fd fd32 	bl	8001e04 <HAL_GetTick>
 80043a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043a4:	f7fd fd2e 	bl	8001e04 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e37c      	b.n	8004ab0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043b6:	4b37      	ldr	r3, [pc, #220]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0304 	and.w	r3, r3, #4
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0f0      	beq.n	80043a4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c2:	f7fd fd2b 	bl	8001e1c <HAL_GetREVID>
 80043c6:	4603      	mov	r3, r0
 80043c8:	f241 0203 	movw	r2, #4099	; 0x1003
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d817      	bhi.n	8004400 <HAL_RCC_OscConfig+0x1f4>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	2b40      	cmp	r3, #64	; 0x40
 80043d6:	d108      	bne.n	80043ea <HAL_RCC_OscConfig+0x1de>
 80043d8:	4b2e      	ldr	r3, [pc, #184]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80043e0:	4a2c      	ldr	r2, [pc, #176]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 80043e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043e6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043e8:	e07a      	b.n	80044e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ea:	4b2a      	ldr	r3, [pc, #168]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	031b      	lsls	r3, r3, #12
 80043f8:	4926      	ldr	r1, [pc, #152]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043fe:	e06f      	b.n	80044e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004400:	4b24      	ldr	r3, [pc, #144]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	061b      	lsls	r3, r3, #24
 800440e:	4921      	ldr	r1, [pc, #132]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 8004410:	4313      	orrs	r3, r2
 8004412:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004414:	e064      	b.n	80044e0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d047      	beq.n	80044ae <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800441e:	4b1d      	ldr	r3, [pc, #116]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f023 0219 	bic.w	r2, r3, #25
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	491a      	ldr	r1, [pc, #104]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 800442c:	4313      	orrs	r3, r2
 800442e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004430:	f7fd fce8 	bl	8001e04 <HAL_GetTick>
 8004434:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004438:	f7fd fce4 	bl	8001e04 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e332      	b.n	8004ab0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800444a:	4b12      	ldr	r3, [pc, #72]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0304 	and.w	r3, r3, #4
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0f0      	beq.n	8004438 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004456:	f7fd fce1 	bl	8001e1c <HAL_GetREVID>
 800445a:	4603      	mov	r3, r0
 800445c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004460:	4293      	cmp	r3, r2
 8004462:	d819      	bhi.n	8004498 <HAL_RCC_OscConfig+0x28c>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	2b40      	cmp	r3, #64	; 0x40
 800446a:	d108      	bne.n	800447e <HAL_RCC_OscConfig+0x272>
 800446c:	4b09      	ldr	r3, [pc, #36]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004474:	4a07      	ldr	r2, [pc, #28]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 8004476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800447a:	6053      	str	r3, [r2, #4]
 800447c:	e030      	b.n	80044e0 <HAL_RCC_OscConfig+0x2d4>
 800447e:	4b05      	ldr	r3, [pc, #20]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	031b      	lsls	r3, r3, #12
 800448c:	4901      	ldr	r1, [pc, #4]	; (8004494 <HAL_RCC_OscConfig+0x288>)
 800448e:	4313      	orrs	r3, r2
 8004490:	604b      	str	r3, [r1, #4]
 8004492:	e025      	b.n	80044e0 <HAL_RCC_OscConfig+0x2d4>
 8004494:	58024400 	.word	0x58024400
 8004498:	4b9a      	ldr	r3, [pc, #616]	; (8004704 <HAL_RCC_OscConfig+0x4f8>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	061b      	lsls	r3, r3, #24
 80044a6:	4997      	ldr	r1, [pc, #604]	; (8004704 <HAL_RCC_OscConfig+0x4f8>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	604b      	str	r3, [r1, #4]
 80044ac:	e018      	b.n	80044e0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ae:	4b95      	ldr	r3, [pc, #596]	; (8004704 <HAL_RCC_OscConfig+0x4f8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a94      	ldr	r2, [pc, #592]	; (8004704 <HAL_RCC_OscConfig+0x4f8>)
 80044b4:	f023 0301 	bic.w	r3, r3, #1
 80044b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ba:	f7fd fca3 	bl	8001e04 <HAL_GetTick>
 80044be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044c2:	f7fd fc9f 	bl	8001e04 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e2ed      	b.n	8004ab0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80044d4:	4b8b      	ldr	r3, [pc, #556]	; (8004704 <HAL_RCC_OscConfig+0x4f8>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1f0      	bne.n	80044c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0310 	and.w	r3, r3, #16
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 80a9 	beq.w	8004640 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044ee:	4b85      	ldr	r3, [pc, #532]	; (8004704 <HAL_RCC_OscConfig+0x4f8>)
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044f6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80044f8:	4b82      	ldr	r3, [pc, #520]	; (8004704 <HAL_RCC_OscConfig+0x4f8>)
 80044fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	2b08      	cmp	r3, #8
 8004502:	d007      	beq.n	8004514 <HAL_RCC_OscConfig+0x308>
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	2b18      	cmp	r3, #24
 8004508:	d13a      	bne.n	8004580 <HAL_RCC_OscConfig+0x374>
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f003 0303 	and.w	r3, r3, #3
 8004510:	2b01      	cmp	r3, #1
 8004512:	d135      	bne.n	8004580 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004514:	4b7b      	ldr	r3, [pc, #492]	; (8004704 <HAL_RCC_OscConfig+0x4f8>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451c:	2b00      	cmp	r3, #0
 800451e:	d005      	beq.n	800452c <HAL_RCC_OscConfig+0x320>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	69db      	ldr	r3, [r3, #28]
 8004524:	2b80      	cmp	r3, #128	; 0x80
 8004526:	d001      	beq.n	800452c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e2c1      	b.n	8004ab0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800452c:	f7fd fc76 	bl	8001e1c <HAL_GetREVID>
 8004530:	4603      	mov	r3, r0
 8004532:	f241 0203 	movw	r2, #4099	; 0x1003
 8004536:	4293      	cmp	r3, r2
 8004538:	d817      	bhi.n	800456a <HAL_RCC_OscConfig+0x35e>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	2b20      	cmp	r3, #32
 8004540:	d108      	bne.n	8004554 <HAL_RCC_OscConfig+0x348>
 8004542:	4b70      	ldr	r3, [pc, #448]	; (8004704 <HAL_RCC_OscConfig+0x4f8>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800454a:	4a6e      	ldr	r2, [pc, #440]	; (8004704 <HAL_RCC_OscConfig+0x4f8>)
 800454c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004550:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004552:	e075      	b.n	8004640 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004554:	4b6b      	ldr	r3, [pc, #428]	; (8004704 <HAL_RCC_OscConfig+0x4f8>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	069b      	lsls	r3, r3, #26
 8004562:	4968      	ldr	r1, [pc, #416]	; (8004704 <HAL_RCC_OscConfig+0x4f8>)
 8004564:	4313      	orrs	r3, r2
 8004566:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004568:	e06a      	b.n	8004640 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800456a:	4b66      	ldr	r3, [pc, #408]	; (8004704 <HAL_RCC_OscConfig+0x4f8>)
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	061b      	lsls	r3, r3, #24
 8004578:	4962      	ldr	r1, [pc, #392]	; (8004704 <HAL_RCC_OscConfig+0x4f8>)
 800457a:	4313      	orrs	r3, r2
 800457c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800457e:	e05f      	b.n	8004640 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	69db      	ldr	r3, [r3, #28]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d042      	beq.n	800460e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004588:	4b5e      	ldr	r3, [pc, #376]	; (8004704 <HAL_RCC_OscConfig+0x4f8>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a5d      	ldr	r2, [pc, #372]	; (8004704 <HAL_RCC_OscConfig+0x4f8>)
 800458e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004592:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004594:	f7fd fc36 	bl	8001e04 <HAL_GetTick>
 8004598:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800459c:	f7fd fc32 	bl	8001e04 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e280      	b.n	8004ab0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80045ae:	4b55      	ldr	r3, [pc, #340]	; (8004704 <HAL_RCC_OscConfig+0x4f8>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d0f0      	beq.n	800459c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045ba:	f7fd fc2f 	bl	8001e1c <HAL_GetREVID>
 80045be:	4603      	mov	r3, r0
 80045c0:	f241 0203 	movw	r2, #4099	; 0x1003
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d817      	bhi.n	80045f8 <HAL_RCC_OscConfig+0x3ec>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	2b20      	cmp	r3, #32
 80045ce:	d108      	bne.n	80045e2 <HAL_RCC_OscConfig+0x3d6>
 80045d0:	4b4c      	ldr	r3, [pc, #304]	; (8004704 <HAL_RCC_OscConfig+0x4f8>)
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80045d8:	4a4a      	ldr	r2, [pc, #296]	; (8004704 <HAL_RCC_OscConfig+0x4f8>)
 80045da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045de:	6053      	str	r3, [r2, #4]
 80045e0:	e02e      	b.n	8004640 <HAL_RCC_OscConfig+0x434>
 80045e2:	4b48      	ldr	r3, [pc, #288]	; (8004704 <HAL_RCC_OscConfig+0x4f8>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	069b      	lsls	r3, r3, #26
 80045f0:	4944      	ldr	r1, [pc, #272]	; (8004704 <HAL_RCC_OscConfig+0x4f8>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	604b      	str	r3, [r1, #4]
 80045f6:	e023      	b.n	8004640 <HAL_RCC_OscConfig+0x434>
 80045f8:	4b42      	ldr	r3, [pc, #264]	; (8004704 <HAL_RCC_OscConfig+0x4f8>)
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	061b      	lsls	r3, r3, #24
 8004606:	493f      	ldr	r1, [pc, #252]	; (8004704 <HAL_RCC_OscConfig+0x4f8>)
 8004608:	4313      	orrs	r3, r2
 800460a:	60cb      	str	r3, [r1, #12]
 800460c:	e018      	b.n	8004640 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800460e:	4b3d      	ldr	r3, [pc, #244]	; (8004704 <HAL_RCC_OscConfig+0x4f8>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a3c      	ldr	r2, [pc, #240]	; (8004704 <HAL_RCC_OscConfig+0x4f8>)
 8004614:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004618:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461a:	f7fd fbf3 	bl	8001e04 <HAL_GetTick>
 800461e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004620:	e008      	b.n	8004634 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004622:	f7fd fbef 	bl	8001e04 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d901      	bls.n	8004634 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e23d      	b.n	8004ab0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004634:	4b33      	ldr	r3, [pc, #204]	; (8004704 <HAL_RCC_OscConfig+0x4f8>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1f0      	bne.n	8004622 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0308 	and.w	r3, r3, #8
 8004648:	2b00      	cmp	r3, #0
 800464a:	d036      	beq.n	80046ba <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d019      	beq.n	8004688 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004654:	4b2b      	ldr	r3, [pc, #172]	; (8004704 <HAL_RCC_OscConfig+0x4f8>)
 8004656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004658:	4a2a      	ldr	r2, [pc, #168]	; (8004704 <HAL_RCC_OscConfig+0x4f8>)
 800465a:	f043 0301 	orr.w	r3, r3, #1
 800465e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004660:	f7fd fbd0 	bl	8001e04 <HAL_GetTick>
 8004664:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004666:	e008      	b.n	800467a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004668:	f7fd fbcc 	bl	8001e04 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b02      	cmp	r3, #2
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e21a      	b.n	8004ab0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800467a:	4b22      	ldr	r3, [pc, #136]	; (8004704 <HAL_RCC_OscConfig+0x4f8>)
 800467c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d0f0      	beq.n	8004668 <HAL_RCC_OscConfig+0x45c>
 8004686:	e018      	b.n	80046ba <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004688:	4b1e      	ldr	r3, [pc, #120]	; (8004704 <HAL_RCC_OscConfig+0x4f8>)
 800468a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800468c:	4a1d      	ldr	r2, [pc, #116]	; (8004704 <HAL_RCC_OscConfig+0x4f8>)
 800468e:	f023 0301 	bic.w	r3, r3, #1
 8004692:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004694:	f7fd fbb6 	bl	8001e04 <HAL_GetTick>
 8004698:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800469a:	e008      	b.n	80046ae <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800469c:	f7fd fbb2 	bl	8001e04 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e200      	b.n	8004ab0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80046ae:	4b15      	ldr	r3, [pc, #84]	; (8004704 <HAL_RCC_OscConfig+0x4f8>)
 80046b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1f0      	bne.n	800469c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0320 	and.w	r3, r3, #32
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d039      	beq.n	800473a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d01c      	beq.n	8004708 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046ce:	4b0d      	ldr	r3, [pc, #52]	; (8004704 <HAL_RCC_OscConfig+0x4f8>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a0c      	ldr	r2, [pc, #48]	; (8004704 <HAL_RCC_OscConfig+0x4f8>)
 80046d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80046d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80046da:	f7fd fb93 	bl	8001e04 <HAL_GetTick>
 80046de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046e2:	f7fd fb8f 	bl	8001e04 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e1dd      	b.n	8004ab0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80046f4:	4b03      	ldr	r3, [pc, #12]	; (8004704 <HAL_RCC_OscConfig+0x4f8>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0f0      	beq.n	80046e2 <HAL_RCC_OscConfig+0x4d6>
 8004700:	e01b      	b.n	800473a <HAL_RCC_OscConfig+0x52e>
 8004702:	bf00      	nop
 8004704:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004708:	4b9b      	ldr	r3, [pc, #620]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a9a      	ldr	r2, [pc, #616]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 800470e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004712:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004714:	f7fd fb76 	bl	8001e04 <HAL_GetTick>
 8004718:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800471a:	e008      	b.n	800472e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800471c:	f7fd fb72 	bl	8001e04 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e1c0      	b.n	8004ab0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800472e:	4b92      	ldr	r3, [pc, #584]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1f0      	bne.n	800471c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0304 	and.w	r3, r3, #4
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 8081 	beq.w	800484a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004748:	4b8c      	ldr	r3, [pc, #560]	; (800497c <HAL_RCC_OscConfig+0x770>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a8b      	ldr	r2, [pc, #556]	; (800497c <HAL_RCC_OscConfig+0x770>)
 800474e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004752:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004754:	f7fd fb56 	bl	8001e04 <HAL_GetTick>
 8004758:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800475c:	f7fd fb52 	bl	8001e04 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b64      	cmp	r3, #100	; 0x64
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e1a0      	b.n	8004ab0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800476e:	4b83      	ldr	r3, [pc, #524]	; (800497c <HAL_RCC_OscConfig+0x770>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0f0      	beq.n	800475c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d106      	bne.n	8004790 <HAL_RCC_OscConfig+0x584>
 8004782:	4b7d      	ldr	r3, [pc, #500]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 8004784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004786:	4a7c      	ldr	r2, [pc, #496]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 8004788:	f043 0301 	orr.w	r3, r3, #1
 800478c:	6713      	str	r3, [r2, #112]	; 0x70
 800478e:	e02d      	b.n	80047ec <HAL_RCC_OscConfig+0x5e0>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10c      	bne.n	80047b2 <HAL_RCC_OscConfig+0x5a6>
 8004798:	4b77      	ldr	r3, [pc, #476]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 800479a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479c:	4a76      	ldr	r2, [pc, #472]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 800479e:	f023 0301 	bic.w	r3, r3, #1
 80047a2:	6713      	str	r3, [r2, #112]	; 0x70
 80047a4:	4b74      	ldr	r3, [pc, #464]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 80047a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a8:	4a73      	ldr	r2, [pc, #460]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 80047aa:	f023 0304 	bic.w	r3, r3, #4
 80047ae:	6713      	str	r3, [r2, #112]	; 0x70
 80047b0:	e01c      	b.n	80047ec <HAL_RCC_OscConfig+0x5e0>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	2b05      	cmp	r3, #5
 80047b8:	d10c      	bne.n	80047d4 <HAL_RCC_OscConfig+0x5c8>
 80047ba:	4b6f      	ldr	r3, [pc, #444]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 80047bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047be:	4a6e      	ldr	r2, [pc, #440]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 80047c0:	f043 0304 	orr.w	r3, r3, #4
 80047c4:	6713      	str	r3, [r2, #112]	; 0x70
 80047c6:	4b6c      	ldr	r3, [pc, #432]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 80047c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ca:	4a6b      	ldr	r2, [pc, #428]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 80047cc:	f043 0301 	orr.w	r3, r3, #1
 80047d0:	6713      	str	r3, [r2, #112]	; 0x70
 80047d2:	e00b      	b.n	80047ec <HAL_RCC_OscConfig+0x5e0>
 80047d4:	4b68      	ldr	r3, [pc, #416]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 80047d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d8:	4a67      	ldr	r2, [pc, #412]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 80047da:	f023 0301 	bic.w	r3, r3, #1
 80047de:	6713      	str	r3, [r2, #112]	; 0x70
 80047e0:	4b65      	ldr	r3, [pc, #404]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 80047e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e4:	4a64      	ldr	r2, [pc, #400]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 80047e6:	f023 0304 	bic.w	r3, r3, #4
 80047ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d015      	beq.n	8004820 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f4:	f7fd fb06 	bl	8001e04 <HAL_GetTick>
 80047f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047fa:	e00a      	b.n	8004812 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047fc:	f7fd fb02 	bl	8001e04 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	f241 3288 	movw	r2, #5000	; 0x1388
 800480a:	4293      	cmp	r3, r2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e14e      	b.n	8004ab0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004812:	4b59      	ldr	r3, [pc, #356]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 8004814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d0ee      	beq.n	80047fc <HAL_RCC_OscConfig+0x5f0>
 800481e:	e014      	b.n	800484a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004820:	f7fd faf0 	bl	8001e04 <HAL_GetTick>
 8004824:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004826:	e00a      	b.n	800483e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004828:	f7fd faec 	bl	8001e04 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	f241 3288 	movw	r2, #5000	; 0x1388
 8004836:	4293      	cmp	r3, r2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e138      	b.n	8004ab0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800483e:	4b4e      	ldr	r3, [pc, #312]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 8004840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1ee      	bne.n	8004828 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	2b00      	cmp	r3, #0
 8004850:	f000 812d 	beq.w	8004aae <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004854:	4b48      	ldr	r3, [pc, #288]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800485c:	2b18      	cmp	r3, #24
 800485e:	f000 80bd 	beq.w	80049dc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	2b02      	cmp	r3, #2
 8004868:	f040 809e 	bne.w	80049a8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800486c:	4b42      	ldr	r3, [pc, #264]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a41      	ldr	r2, [pc, #260]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 8004872:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004878:	f7fd fac4 	bl	8001e04 <HAL_GetTick>
 800487c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004880:	f7fd fac0 	bl	8001e04 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e10e      	b.n	8004ab0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004892:	4b39      	ldr	r3, [pc, #228]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1f0      	bne.n	8004880 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800489e:	4b36      	ldr	r3, [pc, #216]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 80048a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048a2:	4b37      	ldr	r3, [pc, #220]	; (8004980 <HAL_RCC_OscConfig+0x774>)
 80048a4:	4013      	ands	r3, r2
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80048ae:	0112      	lsls	r2, r2, #4
 80048b0:	430a      	orrs	r2, r1
 80048b2:	4931      	ldr	r1, [pc, #196]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	628b      	str	r3, [r1, #40]	; 0x28
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048bc:	3b01      	subs	r3, #1
 80048be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c6:	3b01      	subs	r3, #1
 80048c8:	025b      	lsls	r3, r3, #9
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	431a      	orrs	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d2:	3b01      	subs	r3, #1
 80048d4:	041b      	lsls	r3, r3, #16
 80048d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e0:	3b01      	subs	r3, #1
 80048e2:	061b      	lsls	r3, r3, #24
 80048e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80048e8:	4923      	ldr	r1, [pc, #140]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80048ee:	4b22      	ldr	r3, [pc, #136]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 80048f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f2:	4a21      	ldr	r2, [pc, #132]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 80048f4:	f023 0301 	bic.w	r3, r3, #1
 80048f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80048fa:	4b1f      	ldr	r3, [pc, #124]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 80048fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048fe:	4b21      	ldr	r3, [pc, #132]	; (8004984 <HAL_RCC_OscConfig+0x778>)
 8004900:	4013      	ands	r3, r2
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004906:	00d2      	lsls	r2, r2, #3
 8004908:	491b      	ldr	r1, [pc, #108]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 800490a:	4313      	orrs	r3, r2
 800490c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800490e:	4b1a      	ldr	r3, [pc, #104]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 8004910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004912:	f023 020c 	bic.w	r2, r3, #12
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	4917      	ldr	r1, [pc, #92]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 800491c:	4313      	orrs	r3, r2
 800491e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004920:	4b15      	ldr	r3, [pc, #84]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 8004922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004924:	f023 0202 	bic.w	r2, r3, #2
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492c:	4912      	ldr	r1, [pc, #72]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 800492e:	4313      	orrs	r3, r2
 8004930:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004932:	4b11      	ldr	r3, [pc, #68]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 8004934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004936:	4a10      	ldr	r2, [pc, #64]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 8004938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800493c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800493e:	4b0e      	ldr	r3, [pc, #56]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 8004940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004942:	4a0d      	ldr	r2, [pc, #52]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 8004944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004948:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800494a:	4b0b      	ldr	r3, [pc, #44]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 800494c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494e:	4a0a      	ldr	r2, [pc, #40]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 8004950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004954:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004956:	4b08      	ldr	r3, [pc, #32]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 8004958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495a:	4a07      	ldr	r2, [pc, #28]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 800495c:	f043 0301 	orr.w	r3, r3, #1
 8004960:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004962:	4b05      	ldr	r3, [pc, #20]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a04      	ldr	r2, [pc, #16]	; (8004978 <HAL_RCC_OscConfig+0x76c>)
 8004968:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800496c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496e:	f7fd fa49 	bl	8001e04 <HAL_GetTick>
 8004972:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004974:	e011      	b.n	800499a <HAL_RCC_OscConfig+0x78e>
 8004976:	bf00      	nop
 8004978:	58024400 	.word	0x58024400
 800497c:	58024800 	.word	0x58024800
 8004980:	fffffc0c 	.word	0xfffffc0c
 8004984:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004988:	f7fd fa3c 	bl	8001e04 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e08a      	b.n	8004ab0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800499a:	4b47      	ldr	r3, [pc, #284]	; (8004ab8 <HAL_RCC_OscConfig+0x8ac>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0f0      	beq.n	8004988 <HAL_RCC_OscConfig+0x77c>
 80049a6:	e082      	b.n	8004aae <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a8:	4b43      	ldr	r3, [pc, #268]	; (8004ab8 <HAL_RCC_OscConfig+0x8ac>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a42      	ldr	r2, [pc, #264]	; (8004ab8 <HAL_RCC_OscConfig+0x8ac>)
 80049ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b4:	f7fd fa26 	bl	8001e04 <HAL_GetTick>
 80049b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049bc:	f7fd fa22 	bl	8001e04 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e070      	b.n	8004ab0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049ce:	4b3a      	ldr	r3, [pc, #232]	; (8004ab8 <HAL_RCC_OscConfig+0x8ac>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1f0      	bne.n	80049bc <HAL_RCC_OscConfig+0x7b0>
 80049da:	e068      	b.n	8004aae <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80049dc:	4b36      	ldr	r3, [pc, #216]	; (8004ab8 <HAL_RCC_OscConfig+0x8ac>)
 80049de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80049e2:	4b35      	ldr	r3, [pc, #212]	; (8004ab8 <HAL_RCC_OscConfig+0x8ac>)
 80049e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d031      	beq.n	8004a54 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	f003 0203 	and.w	r2, r3, #3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d12a      	bne.n	8004a54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	091b      	lsrs	r3, r3, #4
 8004a02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d122      	bne.n	8004a54 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a18:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d11a      	bne.n	8004a54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	0a5b      	lsrs	r3, r3, #9
 8004a22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a2a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d111      	bne.n	8004a54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	0c1b      	lsrs	r3, r3, #16
 8004a34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d108      	bne.n	8004a54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	0e1b      	lsrs	r3, r3, #24
 8004a46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a4e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d001      	beq.n	8004a58 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e02b      	b.n	8004ab0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004a58:	4b17      	ldr	r3, [pc, #92]	; (8004ab8 <HAL_RCC_OscConfig+0x8ac>)
 8004a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a5c:	08db      	lsrs	r3, r3, #3
 8004a5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a62:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d01f      	beq.n	8004aae <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004a6e:	4b12      	ldr	r3, [pc, #72]	; (8004ab8 <HAL_RCC_OscConfig+0x8ac>)
 8004a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a72:	4a11      	ldr	r2, [pc, #68]	; (8004ab8 <HAL_RCC_OscConfig+0x8ac>)
 8004a74:	f023 0301 	bic.w	r3, r3, #1
 8004a78:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a7a:	f7fd f9c3 	bl	8001e04 <HAL_GetTick>
 8004a7e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004a80:	bf00      	nop
 8004a82:	f7fd f9bf 	bl	8001e04 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d0f9      	beq.n	8004a82 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004a8e:	4b0a      	ldr	r3, [pc, #40]	; (8004ab8 <HAL_RCC_OscConfig+0x8ac>)
 8004a90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a92:	4b0a      	ldr	r3, [pc, #40]	; (8004abc <HAL_RCC_OscConfig+0x8b0>)
 8004a94:	4013      	ands	r3, r2
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004a9a:	00d2      	lsls	r2, r2, #3
 8004a9c:	4906      	ldr	r1, [pc, #24]	; (8004ab8 <HAL_RCC_OscConfig+0x8ac>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004aa2:	4b05      	ldr	r3, [pc, #20]	; (8004ab8 <HAL_RCC_OscConfig+0x8ac>)
 8004aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa6:	4a04      	ldr	r2, [pc, #16]	; (8004ab8 <HAL_RCC_OscConfig+0x8ac>)
 8004aa8:	f043 0301 	orr.w	r3, r3, #1
 8004aac:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3730      	adds	r7, #48	; 0x30
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	58024400 	.word	0x58024400
 8004abc:	ffff0007 	.word	0xffff0007

08004ac0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e19c      	b.n	8004e0e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ad4:	4b8a      	ldr	r3, [pc, #552]	; (8004d00 <HAL_RCC_ClockConfig+0x240>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 030f 	and.w	r3, r3, #15
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d910      	bls.n	8004b04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ae2:	4b87      	ldr	r3, [pc, #540]	; (8004d00 <HAL_RCC_ClockConfig+0x240>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f023 020f 	bic.w	r2, r3, #15
 8004aea:	4985      	ldr	r1, [pc, #532]	; (8004d00 <HAL_RCC_ClockConfig+0x240>)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004af2:	4b83      	ldr	r3, [pc, #524]	; (8004d00 <HAL_RCC_ClockConfig+0x240>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 030f 	and.w	r3, r3, #15
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d001      	beq.n	8004b04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e184      	b.n	8004e0e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d010      	beq.n	8004b32 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	4b7b      	ldr	r3, [pc, #492]	; (8004d04 <HAL_RCC_ClockConfig+0x244>)
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d908      	bls.n	8004b32 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b20:	4b78      	ldr	r3, [pc, #480]	; (8004d04 <HAL_RCC_ClockConfig+0x244>)
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	4975      	ldr	r1, [pc, #468]	; (8004d04 <HAL_RCC_ClockConfig+0x244>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0308 	and.w	r3, r3, #8
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d010      	beq.n	8004b60 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	695a      	ldr	r2, [r3, #20]
 8004b42:	4b70      	ldr	r3, [pc, #448]	; (8004d04 <HAL_RCC_ClockConfig+0x244>)
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d908      	bls.n	8004b60 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004b4e:	4b6d      	ldr	r3, [pc, #436]	; (8004d04 <HAL_RCC_ClockConfig+0x244>)
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	496a      	ldr	r1, [pc, #424]	; (8004d04 <HAL_RCC_ClockConfig+0x244>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0310 	and.w	r3, r3, #16
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d010      	beq.n	8004b8e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	699a      	ldr	r2, [r3, #24]
 8004b70:	4b64      	ldr	r3, [pc, #400]	; (8004d04 <HAL_RCC_ClockConfig+0x244>)
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d908      	bls.n	8004b8e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004b7c:	4b61      	ldr	r3, [pc, #388]	; (8004d04 <HAL_RCC_ClockConfig+0x244>)
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	495e      	ldr	r1, [pc, #376]	; (8004d04 <HAL_RCC_ClockConfig+0x244>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0320 	and.w	r3, r3, #32
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d010      	beq.n	8004bbc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	69da      	ldr	r2, [r3, #28]
 8004b9e:	4b59      	ldr	r3, [pc, #356]	; (8004d04 <HAL_RCC_ClockConfig+0x244>)
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d908      	bls.n	8004bbc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004baa:	4b56      	ldr	r3, [pc, #344]	; (8004d04 <HAL_RCC_ClockConfig+0x244>)
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	4953      	ldr	r1, [pc, #332]	; (8004d04 <HAL_RCC_ClockConfig+0x244>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d010      	beq.n	8004bea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68da      	ldr	r2, [r3, #12]
 8004bcc:	4b4d      	ldr	r3, [pc, #308]	; (8004d04 <HAL_RCC_ClockConfig+0x244>)
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	f003 030f 	and.w	r3, r3, #15
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d908      	bls.n	8004bea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bd8:	4b4a      	ldr	r3, [pc, #296]	; (8004d04 <HAL_RCC_ClockConfig+0x244>)
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	f023 020f 	bic.w	r2, r3, #15
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	4947      	ldr	r1, [pc, #284]	; (8004d04 <HAL_RCC_ClockConfig+0x244>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d055      	beq.n	8004ca2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004bf6:	4b43      	ldr	r3, [pc, #268]	; (8004d04 <HAL_RCC_ClockConfig+0x244>)
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	4940      	ldr	r1, [pc, #256]	; (8004d04 <HAL_RCC_ClockConfig+0x244>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d107      	bne.n	8004c20 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c10:	4b3c      	ldr	r3, [pc, #240]	; (8004d04 <HAL_RCC_ClockConfig+0x244>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d121      	bne.n	8004c60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e0f6      	b.n	8004e0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	2b03      	cmp	r3, #3
 8004c26:	d107      	bne.n	8004c38 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c28:	4b36      	ldr	r3, [pc, #216]	; (8004d04 <HAL_RCC_ClockConfig+0x244>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d115      	bne.n	8004c60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e0ea      	b.n	8004e0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d107      	bne.n	8004c50 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c40:	4b30      	ldr	r3, [pc, #192]	; (8004d04 <HAL_RCC_ClockConfig+0x244>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d109      	bne.n	8004c60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e0de      	b.n	8004e0e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c50:	4b2c      	ldr	r3, [pc, #176]	; (8004d04 <HAL_RCC_ClockConfig+0x244>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e0d6      	b.n	8004e0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c60:	4b28      	ldr	r3, [pc, #160]	; (8004d04 <HAL_RCC_ClockConfig+0x244>)
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	f023 0207 	bic.w	r2, r3, #7
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	4925      	ldr	r1, [pc, #148]	; (8004d04 <HAL_RCC_ClockConfig+0x244>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c72:	f7fd f8c7 	bl	8001e04 <HAL_GetTick>
 8004c76:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c78:	e00a      	b.n	8004c90 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c7a:	f7fd f8c3 	bl	8001e04 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e0be      	b.n	8004e0e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c90:	4b1c      	ldr	r3, [pc, #112]	; (8004d04 <HAL_RCC_ClockConfig+0x244>)
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	00db      	lsls	r3, r3, #3
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d1eb      	bne.n	8004c7a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d010      	beq.n	8004cd0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	4b14      	ldr	r3, [pc, #80]	; (8004d04 <HAL_RCC_ClockConfig+0x244>)
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	f003 030f 	and.w	r3, r3, #15
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d208      	bcs.n	8004cd0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cbe:	4b11      	ldr	r3, [pc, #68]	; (8004d04 <HAL_RCC_ClockConfig+0x244>)
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	f023 020f 	bic.w	r2, r3, #15
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	490e      	ldr	r1, [pc, #56]	; (8004d04 <HAL_RCC_ClockConfig+0x244>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cd0:	4b0b      	ldr	r3, [pc, #44]	; (8004d00 <HAL_RCC_ClockConfig+0x240>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 030f 	and.w	r3, r3, #15
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d214      	bcs.n	8004d08 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cde:	4b08      	ldr	r3, [pc, #32]	; (8004d00 <HAL_RCC_ClockConfig+0x240>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f023 020f 	bic.w	r2, r3, #15
 8004ce6:	4906      	ldr	r1, [pc, #24]	; (8004d00 <HAL_RCC_ClockConfig+0x240>)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cee:	4b04      	ldr	r3, [pc, #16]	; (8004d00 <HAL_RCC_ClockConfig+0x240>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 030f 	and.w	r3, r3, #15
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d005      	beq.n	8004d08 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e086      	b.n	8004e0e <HAL_RCC_ClockConfig+0x34e>
 8004d00:	52002000 	.word	0x52002000
 8004d04:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0304 	and.w	r3, r3, #4
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d010      	beq.n	8004d36 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691a      	ldr	r2, [r3, #16]
 8004d18:	4b3f      	ldr	r3, [pc, #252]	; (8004e18 <HAL_RCC_ClockConfig+0x358>)
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d208      	bcs.n	8004d36 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d24:	4b3c      	ldr	r3, [pc, #240]	; (8004e18 <HAL_RCC_ClockConfig+0x358>)
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	4939      	ldr	r1, [pc, #228]	; (8004e18 <HAL_RCC_ClockConfig+0x358>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0308 	and.w	r3, r3, #8
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d010      	beq.n	8004d64 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	695a      	ldr	r2, [r3, #20]
 8004d46:	4b34      	ldr	r3, [pc, #208]	; (8004e18 <HAL_RCC_ClockConfig+0x358>)
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d208      	bcs.n	8004d64 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004d52:	4b31      	ldr	r3, [pc, #196]	; (8004e18 <HAL_RCC_ClockConfig+0x358>)
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	492e      	ldr	r1, [pc, #184]	; (8004e18 <HAL_RCC_ClockConfig+0x358>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0310 	and.w	r3, r3, #16
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d010      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	699a      	ldr	r2, [r3, #24]
 8004d74:	4b28      	ldr	r3, [pc, #160]	; (8004e18 <HAL_RCC_ClockConfig+0x358>)
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d208      	bcs.n	8004d92 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d80:	4b25      	ldr	r3, [pc, #148]	; (8004e18 <HAL_RCC_ClockConfig+0x358>)
 8004d82:	69db      	ldr	r3, [r3, #28]
 8004d84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	4922      	ldr	r1, [pc, #136]	; (8004e18 <HAL_RCC_ClockConfig+0x358>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0320 	and.w	r3, r3, #32
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d010      	beq.n	8004dc0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	69da      	ldr	r2, [r3, #28]
 8004da2:	4b1d      	ldr	r3, [pc, #116]	; (8004e18 <HAL_RCC_ClockConfig+0x358>)
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d208      	bcs.n	8004dc0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004dae:	4b1a      	ldr	r3, [pc, #104]	; (8004e18 <HAL_RCC_ClockConfig+0x358>)
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	4917      	ldr	r1, [pc, #92]	; (8004e18 <HAL_RCC_ClockConfig+0x358>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004dc0:	f000 f834 	bl	8004e2c <HAL_RCC_GetSysClockFreq>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	4b14      	ldr	r3, [pc, #80]	; (8004e18 <HAL_RCC_ClockConfig+0x358>)
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	0a1b      	lsrs	r3, r3, #8
 8004dcc:	f003 030f 	and.w	r3, r3, #15
 8004dd0:	4912      	ldr	r1, [pc, #72]	; (8004e1c <HAL_RCC_ClockConfig+0x35c>)
 8004dd2:	5ccb      	ldrb	r3, [r1, r3]
 8004dd4:	f003 031f 	and.w	r3, r3, #31
 8004dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8004ddc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004dde:	4b0e      	ldr	r3, [pc, #56]	; (8004e18 <HAL_RCC_ClockConfig+0x358>)
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	4a0d      	ldr	r2, [pc, #52]	; (8004e1c <HAL_RCC_ClockConfig+0x35c>)
 8004de8:	5cd3      	ldrb	r3, [r2, r3]
 8004dea:	f003 031f 	and.w	r3, r3, #31
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	fa22 f303 	lsr.w	r3, r2, r3
 8004df4:	4a0a      	ldr	r2, [pc, #40]	; (8004e20 <HAL_RCC_ClockConfig+0x360>)
 8004df6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004df8:	4a0a      	ldr	r2, [pc, #40]	; (8004e24 <HAL_RCC_ClockConfig+0x364>)
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004dfe:	4b0a      	ldr	r3, [pc, #40]	; (8004e28 <HAL_RCC_ClockConfig+0x368>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7fc ffb4 	bl	8001d70 <HAL_InitTick>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3718      	adds	r7, #24
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	58024400 	.word	0x58024400
 8004e1c:	08010e10 	.word	0x08010e10
 8004e20:	24000004 	.word	0x24000004
 8004e24:	24000000 	.word	0x24000000
 8004e28:	24000008 	.word	0x24000008

08004e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b089      	sub	sp, #36	; 0x24
 8004e30:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e32:	4bb3      	ldr	r3, [pc, #716]	; (8005100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e3a:	2b18      	cmp	r3, #24
 8004e3c:	f200 8155 	bhi.w	80050ea <HAL_RCC_GetSysClockFreq+0x2be>
 8004e40:	a201      	add	r2, pc, #4	; (adr r2, 8004e48 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e46:	bf00      	nop
 8004e48:	08004ead 	.word	0x08004ead
 8004e4c:	080050eb 	.word	0x080050eb
 8004e50:	080050eb 	.word	0x080050eb
 8004e54:	080050eb 	.word	0x080050eb
 8004e58:	080050eb 	.word	0x080050eb
 8004e5c:	080050eb 	.word	0x080050eb
 8004e60:	080050eb 	.word	0x080050eb
 8004e64:	080050eb 	.word	0x080050eb
 8004e68:	08004ed3 	.word	0x08004ed3
 8004e6c:	080050eb 	.word	0x080050eb
 8004e70:	080050eb 	.word	0x080050eb
 8004e74:	080050eb 	.word	0x080050eb
 8004e78:	080050eb 	.word	0x080050eb
 8004e7c:	080050eb 	.word	0x080050eb
 8004e80:	080050eb 	.word	0x080050eb
 8004e84:	080050eb 	.word	0x080050eb
 8004e88:	08004ed9 	.word	0x08004ed9
 8004e8c:	080050eb 	.word	0x080050eb
 8004e90:	080050eb 	.word	0x080050eb
 8004e94:	080050eb 	.word	0x080050eb
 8004e98:	080050eb 	.word	0x080050eb
 8004e9c:	080050eb 	.word	0x080050eb
 8004ea0:	080050eb 	.word	0x080050eb
 8004ea4:	080050eb 	.word	0x080050eb
 8004ea8:	08004edf 	.word	0x08004edf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004eac:	4b94      	ldr	r3, [pc, #592]	; (8005100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0320 	and.w	r3, r3, #32
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d009      	beq.n	8004ecc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004eb8:	4b91      	ldr	r3, [pc, #580]	; (8005100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	08db      	lsrs	r3, r3, #3
 8004ebe:	f003 0303 	and.w	r3, r3, #3
 8004ec2:	4a90      	ldr	r2, [pc, #576]	; (8005104 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ec8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004eca:	e111      	b.n	80050f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004ecc:	4b8d      	ldr	r3, [pc, #564]	; (8005104 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ece:	61bb      	str	r3, [r7, #24]
      break;
 8004ed0:	e10e      	b.n	80050f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004ed2:	4b8d      	ldr	r3, [pc, #564]	; (8005108 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004ed4:	61bb      	str	r3, [r7, #24]
      break;
 8004ed6:	e10b      	b.n	80050f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004ed8:	4b8c      	ldr	r3, [pc, #560]	; (800510c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004eda:	61bb      	str	r3, [r7, #24]
      break;
 8004edc:	e108      	b.n	80050f0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ede:	4b88      	ldr	r3, [pc, #544]	; (8005100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee2:	f003 0303 	and.w	r3, r3, #3
 8004ee6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004ee8:	4b85      	ldr	r3, [pc, #532]	; (8005100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eec:	091b      	lsrs	r3, r3, #4
 8004eee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ef2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004ef4:	4b82      	ldr	r3, [pc, #520]	; (8005100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004efe:	4b80      	ldr	r3, [pc, #512]	; (8005100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f02:	08db      	lsrs	r3, r3, #3
 8004f04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	fb02 f303 	mul.w	r3, r2, r3
 8004f0e:	ee07 3a90 	vmov	s15, r3
 8004f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f16:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 80e1 	beq.w	80050e4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	f000 8083 	beq.w	8005030 <HAL_RCC_GetSysClockFreq+0x204>
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	f200 80a1 	bhi.w	8005074 <HAL_RCC_GetSysClockFreq+0x248>
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <HAL_RCC_GetSysClockFreq+0x114>
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d056      	beq.n	8004fec <HAL_RCC_GetSysClockFreq+0x1c0>
 8004f3e:	e099      	b.n	8005074 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f40:	4b6f      	ldr	r3, [pc, #444]	; (8005100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0320 	and.w	r3, r3, #32
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d02d      	beq.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f4c:	4b6c      	ldr	r3, [pc, #432]	; (8005100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	08db      	lsrs	r3, r3, #3
 8004f52:	f003 0303 	and.w	r3, r3, #3
 8004f56:	4a6b      	ldr	r2, [pc, #428]	; (8005104 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f58:	fa22 f303 	lsr.w	r3, r2, r3
 8004f5c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	ee07 3a90 	vmov	s15, r3
 8004f64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	ee07 3a90 	vmov	s15, r3
 8004f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f76:	4b62      	ldr	r3, [pc, #392]	; (8005100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f7e:	ee07 3a90 	vmov	s15, r3
 8004f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f86:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f8a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005110 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fa2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004fa6:	e087      	b.n	80050b8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	ee07 3a90 	vmov	s15, r3
 8004fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fb2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005114 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fba:	4b51      	ldr	r3, [pc, #324]	; (8005100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fc2:	ee07 3a90 	vmov	s15, r3
 8004fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fca:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fce:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005110 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fe6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004fea:	e065      	b.n	80050b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	ee07 3a90 	vmov	s15, r3
 8004ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ff6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005118 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ffe:	4b40      	ldr	r3, [pc, #256]	; (8005100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005006:	ee07 3a90 	vmov	s15, r3
 800500a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800500e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005012:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005110 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800501a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800501e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800502a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800502e:	e043      	b.n	80050b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	ee07 3a90 	vmov	s15, r3
 8005036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800503a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800511c <HAL_RCC_GetSysClockFreq+0x2f0>
 800503e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005042:	4b2f      	ldr	r3, [pc, #188]	; (8005100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800504a:	ee07 3a90 	vmov	s15, r3
 800504e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005052:	ed97 6a02 	vldr	s12, [r7, #8]
 8005056:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005110 <HAL_RCC_GetSysClockFreq+0x2e4>
 800505a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800505e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800506a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800506e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005072:	e021      	b.n	80050b8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	ee07 3a90 	vmov	s15, r3
 800507a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800507e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005118 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005086:	4b1e      	ldr	r3, [pc, #120]	; (8005100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800508e:	ee07 3a90 	vmov	s15, r3
 8005092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005096:	ed97 6a02 	vldr	s12, [r7, #8]
 800509a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005110 <HAL_RCC_GetSysClockFreq+0x2e4>
 800509e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80050b6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80050b8:	4b11      	ldr	r3, [pc, #68]	; (8005100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050bc:	0a5b      	lsrs	r3, r3, #9
 80050be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050c2:	3301      	adds	r3, #1
 80050c4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	ee07 3a90 	vmov	s15, r3
 80050cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80050d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80050d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050dc:	ee17 3a90 	vmov	r3, s15
 80050e0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80050e2:	e005      	b.n	80050f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	61bb      	str	r3, [r7, #24]
      break;
 80050e8:	e002      	b.n	80050f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80050ea:	4b07      	ldr	r3, [pc, #28]	; (8005108 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80050ec:	61bb      	str	r3, [r7, #24]
      break;
 80050ee:	bf00      	nop
  }

  return sysclockfreq;
 80050f0:	69bb      	ldr	r3, [r7, #24]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3724      	adds	r7, #36	; 0x24
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	58024400 	.word	0x58024400
 8005104:	03d09000 	.word	0x03d09000
 8005108:	003d0900 	.word	0x003d0900
 800510c:	017d7840 	.word	0x017d7840
 8005110:	46000000 	.word	0x46000000
 8005114:	4c742400 	.word	0x4c742400
 8005118:	4a742400 	.word	0x4a742400
 800511c:	4bbebc20 	.word	0x4bbebc20

08005120 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005126:	f7ff fe81 	bl	8004e2c <HAL_RCC_GetSysClockFreq>
 800512a:	4602      	mov	r2, r0
 800512c:	4b10      	ldr	r3, [pc, #64]	; (8005170 <HAL_RCC_GetHCLKFreq+0x50>)
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	0a1b      	lsrs	r3, r3, #8
 8005132:	f003 030f 	and.w	r3, r3, #15
 8005136:	490f      	ldr	r1, [pc, #60]	; (8005174 <HAL_RCC_GetHCLKFreq+0x54>)
 8005138:	5ccb      	ldrb	r3, [r1, r3]
 800513a:	f003 031f 	and.w	r3, r3, #31
 800513e:	fa22 f303 	lsr.w	r3, r2, r3
 8005142:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005144:	4b0a      	ldr	r3, [pc, #40]	; (8005170 <HAL_RCC_GetHCLKFreq+0x50>)
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	f003 030f 	and.w	r3, r3, #15
 800514c:	4a09      	ldr	r2, [pc, #36]	; (8005174 <HAL_RCC_GetHCLKFreq+0x54>)
 800514e:	5cd3      	ldrb	r3, [r2, r3]
 8005150:	f003 031f 	and.w	r3, r3, #31
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	fa22 f303 	lsr.w	r3, r2, r3
 800515a:	4a07      	ldr	r2, [pc, #28]	; (8005178 <HAL_RCC_GetHCLKFreq+0x58>)
 800515c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800515e:	4a07      	ldr	r2, [pc, #28]	; (800517c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005164:	4b04      	ldr	r3, [pc, #16]	; (8005178 <HAL_RCC_GetHCLKFreq+0x58>)
 8005166:	681b      	ldr	r3, [r3, #0]
}
 8005168:	4618      	mov	r0, r3
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	58024400 	.word	0x58024400
 8005174:	08010e10 	.word	0x08010e10
 8005178:	24000004 	.word	0x24000004
 800517c:	24000000 	.word	0x24000000

08005180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005184:	f7ff ffcc 	bl	8005120 <HAL_RCC_GetHCLKFreq>
 8005188:	4602      	mov	r2, r0
 800518a:	4b06      	ldr	r3, [pc, #24]	; (80051a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	091b      	lsrs	r3, r3, #4
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	4904      	ldr	r1, [pc, #16]	; (80051a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005196:	5ccb      	ldrb	r3, [r1, r3]
 8005198:	f003 031f 	and.w	r3, r3, #31
 800519c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	58024400 	.word	0x58024400
 80051a8:	08010e10 	.word	0x08010e10

080051ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80051b0:	f7ff ffb6 	bl	8005120 <HAL_RCC_GetHCLKFreq>
 80051b4:	4602      	mov	r2, r0
 80051b6:	4b06      	ldr	r3, [pc, #24]	; (80051d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	0a1b      	lsrs	r3, r3, #8
 80051bc:	f003 0307 	and.w	r3, r3, #7
 80051c0:	4904      	ldr	r1, [pc, #16]	; (80051d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80051c2:	5ccb      	ldrb	r3, [r1, r3]
 80051c4:	f003 031f 	and.w	r3, r3, #31
 80051c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	58024400 	.word	0x58024400
 80051d4:	08010e10 	.word	0x08010e10

080051d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051dc:	b0ca      	sub	sp, #296	; 0x128
 80051de:	af00      	add	r7, sp, #0
 80051e0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80051e4:	2300      	movs	r3, #0
 80051e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051ea:	2300      	movs	r3, #0
 80051ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80051f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80051fc:	2500      	movs	r5, #0
 80051fe:	ea54 0305 	orrs.w	r3, r4, r5
 8005202:	d049      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005208:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800520a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800520e:	d02f      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005210:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005214:	d828      	bhi.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005216:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800521a:	d01a      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800521c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005220:	d822      	bhi.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005226:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800522a:	d007      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800522c:	e01c      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800522e:	4bb8      	ldr	r3, [pc, #736]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005232:	4ab7      	ldr	r2, [pc, #732]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005238:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800523a:	e01a      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800523c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005240:	3308      	adds	r3, #8
 8005242:	2102      	movs	r1, #2
 8005244:	4618      	mov	r0, r3
 8005246:	f001 fc8f 	bl	8006b68 <RCCEx_PLL2_Config>
 800524a:	4603      	mov	r3, r0
 800524c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005250:	e00f      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005256:	3328      	adds	r3, #40	; 0x28
 8005258:	2102      	movs	r1, #2
 800525a:	4618      	mov	r0, r3
 800525c:	f001 fd36 	bl	8006ccc <RCCEx_PLL3_Config>
 8005260:	4603      	mov	r3, r0
 8005262:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005266:	e004      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800526e:	e000      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005270:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005272:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10a      	bne.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800527a:	4ba5      	ldr	r3, [pc, #660]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800527c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800527e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005282:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005286:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005288:	4aa1      	ldr	r2, [pc, #644]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800528a:	430b      	orrs	r3, r1
 800528c:	6513      	str	r3, [r2, #80]	; 0x50
 800528e:	e003      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005290:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005294:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005298:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800529c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80052a4:	f04f 0900 	mov.w	r9, #0
 80052a8:	ea58 0309 	orrs.w	r3, r8, r9
 80052ac:	d047      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80052ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b4:	2b04      	cmp	r3, #4
 80052b6:	d82a      	bhi.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80052b8:	a201      	add	r2, pc, #4	; (adr r2, 80052c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80052ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052be:	bf00      	nop
 80052c0:	080052d5 	.word	0x080052d5
 80052c4:	080052e3 	.word	0x080052e3
 80052c8:	080052f9 	.word	0x080052f9
 80052cc:	08005317 	.word	0x08005317
 80052d0:	08005317 	.word	0x08005317
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052d4:	4b8e      	ldr	r3, [pc, #568]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d8:	4a8d      	ldr	r2, [pc, #564]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80052e0:	e01a      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052e6:	3308      	adds	r3, #8
 80052e8:	2100      	movs	r1, #0
 80052ea:	4618      	mov	r0, r3
 80052ec:	f001 fc3c 	bl	8006b68 <RCCEx_PLL2_Config>
 80052f0:	4603      	mov	r3, r0
 80052f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80052f6:	e00f      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052fc:	3328      	adds	r3, #40	; 0x28
 80052fe:	2100      	movs	r1, #0
 8005300:	4618      	mov	r0, r3
 8005302:	f001 fce3 	bl	8006ccc <RCCEx_PLL3_Config>
 8005306:	4603      	mov	r3, r0
 8005308:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800530c:	e004      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005314:	e000      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005316:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005318:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10a      	bne.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005320:	4b7b      	ldr	r3, [pc, #492]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005324:	f023 0107 	bic.w	r1, r3, #7
 8005328:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800532c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800532e:	4a78      	ldr	r2, [pc, #480]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005330:	430b      	orrs	r3, r1
 8005332:	6513      	str	r3, [r2, #80]	; 0x50
 8005334:	e003      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005336:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800533a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800533e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005346:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800534a:	f04f 0b00 	mov.w	fp, #0
 800534e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005352:	d04c      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005354:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800535a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800535e:	d030      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005364:	d829      	bhi.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005366:	2bc0      	cmp	r3, #192	; 0xc0
 8005368:	d02d      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800536a:	2bc0      	cmp	r3, #192	; 0xc0
 800536c:	d825      	bhi.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800536e:	2b80      	cmp	r3, #128	; 0x80
 8005370:	d018      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005372:	2b80      	cmp	r3, #128	; 0x80
 8005374:	d821      	bhi.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005376:	2b00      	cmp	r3, #0
 8005378:	d002      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800537a:	2b40      	cmp	r3, #64	; 0x40
 800537c:	d007      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800537e:	e01c      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005380:	4b63      	ldr	r3, [pc, #396]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005384:	4a62      	ldr	r2, [pc, #392]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800538a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800538c:	e01c      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800538e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005392:	3308      	adds	r3, #8
 8005394:	2100      	movs	r1, #0
 8005396:	4618      	mov	r0, r3
 8005398:	f001 fbe6 	bl	8006b68 <RCCEx_PLL2_Config>
 800539c:	4603      	mov	r3, r0
 800539e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80053a2:	e011      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053a8:	3328      	adds	r3, #40	; 0x28
 80053aa:	2100      	movs	r1, #0
 80053ac:	4618      	mov	r0, r3
 80053ae:	f001 fc8d 	bl	8006ccc <RCCEx_PLL3_Config>
 80053b2:	4603      	mov	r3, r0
 80053b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80053b8:	e006      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80053c0:	e002      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80053c2:	bf00      	nop
 80053c4:	e000      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80053c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10a      	bne.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80053d0:	4b4f      	ldr	r3, [pc, #316]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80053d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053de:	4a4c      	ldr	r2, [pc, #304]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053e0:	430b      	orrs	r3, r1
 80053e2:	6513      	str	r3, [r2, #80]	; 0x50
 80053e4:	e003      	b.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80053ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80053fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80053fe:	2300      	movs	r3, #0
 8005400:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005404:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005408:	460b      	mov	r3, r1
 800540a:	4313      	orrs	r3, r2
 800540c:	d053      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800540e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005412:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005416:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800541a:	d035      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800541c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005420:	d82e      	bhi.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005422:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005426:	d031      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005428:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800542c:	d828      	bhi.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800542e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005432:	d01a      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005434:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005438:	d822      	bhi.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800543e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005442:	d007      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005444:	e01c      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005446:	4b32      	ldr	r3, [pc, #200]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544a:	4a31      	ldr	r2, [pc, #196]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800544c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005450:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005452:	e01c      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005454:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005458:	3308      	adds	r3, #8
 800545a:	2100      	movs	r1, #0
 800545c:	4618      	mov	r0, r3
 800545e:	f001 fb83 	bl	8006b68 <RCCEx_PLL2_Config>
 8005462:	4603      	mov	r3, r0
 8005464:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005468:	e011      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800546a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800546e:	3328      	adds	r3, #40	; 0x28
 8005470:	2100      	movs	r1, #0
 8005472:	4618      	mov	r0, r3
 8005474:	f001 fc2a 	bl	8006ccc <RCCEx_PLL3_Config>
 8005478:	4603      	mov	r3, r0
 800547a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800547e:	e006      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005486:	e002      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005488:	bf00      	nop
 800548a:	e000      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800548c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800548e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10b      	bne.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005496:	4b1e      	ldr	r3, [pc, #120]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800549a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800549e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80054a6:	4a1a      	ldr	r2, [pc, #104]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054a8:	430b      	orrs	r3, r1
 80054aa:	6593      	str	r3, [r2, #88]	; 0x58
 80054ac:	e003      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80054b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054be:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80054c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80054c6:	2300      	movs	r3, #0
 80054c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80054cc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80054d0:	460b      	mov	r3, r1
 80054d2:	4313      	orrs	r3, r2
 80054d4:	d056      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80054d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80054de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054e2:	d038      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80054e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054e8:	d831      	bhi.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80054ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80054ee:	d034      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80054f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80054f4:	d82b      	bhi.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80054f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054fa:	d01d      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80054fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005500:	d825      	bhi.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005502:	2b00      	cmp	r3, #0
 8005504:	d006      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005506:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800550a:	d00a      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800550c:	e01f      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800550e:	bf00      	nop
 8005510:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005514:	4ba2      	ldr	r3, [pc, #648]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005518:	4aa1      	ldr	r2, [pc, #644]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800551a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800551e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005520:	e01c      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005526:	3308      	adds	r3, #8
 8005528:	2100      	movs	r1, #0
 800552a:	4618      	mov	r0, r3
 800552c:	f001 fb1c 	bl	8006b68 <RCCEx_PLL2_Config>
 8005530:	4603      	mov	r3, r0
 8005532:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005536:	e011      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800553c:	3328      	adds	r3, #40	; 0x28
 800553e:	2100      	movs	r1, #0
 8005540:	4618      	mov	r0, r3
 8005542:	f001 fbc3 	bl	8006ccc <RCCEx_PLL3_Config>
 8005546:	4603      	mov	r3, r0
 8005548:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800554c:	e006      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005554:	e002      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005556:	bf00      	nop
 8005558:	e000      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800555a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800555c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10b      	bne.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005564:	4b8e      	ldr	r3, [pc, #568]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005568:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800556c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005570:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005574:	4a8a      	ldr	r2, [pc, #552]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005576:	430b      	orrs	r3, r1
 8005578:	6593      	str	r3, [r2, #88]	; 0x58
 800557a:	e003      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800557c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005580:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005590:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005594:	2300      	movs	r3, #0
 8005596:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800559a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800559e:	460b      	mov	r3, r1
 80055a0:	4313      	orrs	r3, r2
 80055a2:	d03a      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80055a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055aa:	2b30      	cmp	r3, #48	; 0x30
 80055ac:	d01f      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x416>
 80055ae:	2b30      	cmp	r3, #48	; 0x30
 80055b0:	d819      	bhi.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80055b2:	2b20      	cmp	r3, #32
 80055b4:	d00c      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80055b6:	2b20      	cmp	r3, #32
 80055b8:	d815      	bhi.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d019      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80055be:	2b10      	cmp	r3, #16
 80055c0:	d111      	bne.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055c2:	4b77      	ldr	r3, [pc, #476]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c6:	4a76      	ldr	r2, [pc, #472]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80055ce:	e011      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80055d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055d4:	3308      	adds	r3, #8
 80055d6:	2102      	movs	r1, #2
 80055d8:	4618      	mov	r0, r3
 80055da:	f001 fac5 	bl	8006b68 <RCCEx_PLL2_Config>
 80055de:	4603      	mov	r3, r0
 80055e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80055e4:	e006      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80055ec:	e002      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80055ee:	bf00      	nop
 80055f0:	e000      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80055f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10a      	bne.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80055fc:	4b68      	ldr	r3, [pc, #416]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005600:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800560a:	4a65      	ldr	r2, [pc, #404]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800560c:	430b      	orrs	r3, r1
 800560e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005610:	e003      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005612:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005616:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800561a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800561e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005622:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005626:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800562a:	2300      	movs	r3, #0
 800562c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005630:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005634:	460b      	mov	r3, r1
 8005636:	4313      	orrs	r3, r2
 8005638:	d051      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800563a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800563e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005640:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005644:	d035      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005646:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800564a:	d82e      	bhi.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800564c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005650:	d031      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005652:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005656:	d828      	bhi.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800565c:	d01a      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800565e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005662:	d822      	bhi.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005664:	2b00      	cmp	r3, #0
 8005666:	d003      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800566c:	d007      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800566e:	e01c      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005670:	4b4b      	ldr	r3, [pc, #300]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005674:	4a4a      	ldr	r2, [pc, #296]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800567a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800567c:	e01c      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800567e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005682:	3308      	adds	r3, #8
 8005684:	2100      	movs	r1, #0
 8005686:	4618      	mov	r0, r3
 8005688:	f001 fa6e 	bl	8006b68 <RCCEx_PLL2_Config>
 800568c:	4603      	mov	r3, r0
 800568e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005692:	e011      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005694:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005698:	3328      	adds	r3, #40	; 0x28
 800569a:	2100      	movs	r1, #0
 800569c:	4618      	mov	r0, r3
 800569e:	f001 fb15 	bl	8006ccc <RCCEx_PLL3_Config>
 80056a2:	4603      	mov	r3, r0
 80056a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80056a8:	e006      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80056b0:	e002      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80056b2:	bf00      	nop
 80056b4:	e000      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80056b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10a      	bne.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80056c0:	4b37      	ldr	r3, [pc, #220]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056c4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80056c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ce:	4a34      	ldr	r2, [pc, #208]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056d0:	430b      	orrs	r3, r1
 80056d2:	6513      	str	r3, [r2, #80]	; 0x50
 80056d4:	e003      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80056de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80056ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80056ee:	2300      	movs	r3, #0
 80056f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80056f4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80056f8:	460b      	mov	r3, r1
 80056fa:	4313      	orrs	r3, r2
 80056fc:	d056      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80056fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005702:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005704:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005708:	d033      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800570a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800570e:	d82c      	bhi.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005710:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005714:	d02f      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005716:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800571a:	d826      	bhi.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800571c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005720:	d02b      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005722:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005726:	d820      	bhi.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005728:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800572c:	d012      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800572e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005732:	d81a      	bhi.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005734:	2b00      	cmp	r3, #0
 8005736:	d022      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800573c:	d115      	bne.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800573e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005742:	3308      	adds	r3, #8
 8005744:	2101      	movs	r1, #1
 8005746:	4618      	mov	r0, r3
 8005748:	f001 fa0e 	bl	8006b68 <RCCEx_PLL2_Config>
 800574c:	4603      	mov	r3, r0
 800574e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005752:	e015      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005758:	3328      	adds	r3, #40	; 0x28
 800575a:	2101      	movs	r1, #1
 800575c:	4618      	mov	r0, r3
 800575e:	f001 fab5 	bl	8006ccc <RCCEx_PLL3_Config>
 8005762:	4603      	mov	r3, r0
 8005764:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005768:	e00a      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005770:	e006      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005772:	bf00      	nop
 8005774:	e004      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005776:	bf00      	nop
 8005778:	e002      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800577a:	bf00      	nop
 800577c:	e000      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800577e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005780:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10d      	bne.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005788:	4b05      	ldr	r3, [pc, #20]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800578a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800578c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005794:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005796:	4a02      	ldr	r2, [pc, #8]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005798:	430b      	orrs	r3, r1
 800579a:	6513      	str	r3, [r2, #80]	; 0x50
 800579c:	e006      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800579e:	bf00      	nop
 80057a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80057ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80057b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80057bc:	2300      	movs	r3, #0
 80057be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80057c2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80057c6:	460b      	mov	r3, r1
 80057c8:	4313      	orrs	r3, r2
 80057ca:	d055      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80057cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057d8:	d033      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80057da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057de:	d82c      	bhi.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80057e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057e4:	d02f      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80057e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ea:	d826      	bhi.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80057ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80057f0:	d02b      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80057f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80057f6:	d820      	bhi.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80057f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057fc:	d012      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80057fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005802:	d81a      	bhi.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005804:	2b00      	cmp	r3, #0
 8005806:	d022      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005808:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800580c:	d115      	bne.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800580e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005812:	3308      	adds	r3, #8
 8005814:	2101      	movs	r1, #1
 8005816:	4618      	mov	r0, r3
 8005818:	f001 f9a6 	bl	8006b68 <RCCEx_PLL2_Config>
 800581c:	4603      	mov	r3, r0
 800581e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005822:	e015      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005828:	3328      	adds	r3, #40	; 0x28
 800582a:	2101      	movs	r1, #1
 800582c:	4618      	mov	r0, r3
 800582e:	f001 fa4d 	bl	8006ccc <RCCEx_PLL3_Config>
 8005832:	4603      	mov	r3, r0
 8005834:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005838:	e00a      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005840:	e006      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005842:	bf00      	nop
 8005844:	e004      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005846:	bf00      	nop
 8005848:	e002      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800584a:	bf00      	nop
 800584c:	e000      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800584e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005850:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10b      	bne.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005858:	4ba3      	ldr	r3, [pc, #652]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800585a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800585c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005864:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005868:	4a9f      	ldr	r2, [pc, #636]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800586a:	430b      	orrs	r3, r1
 800586c:	6593      	str	r3, [r2, #88]	; 0x58
 800586e:	e003      	b.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005870:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005874:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800587c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005880:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005884:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005888:	2300      	movs	r3, #0
 800588a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800588e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005892:	460b      	mov	r3, r1
 8005894:	4313      	orrs	r3, r2
 8005896:	d037      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800589c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800589e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058a2:	d00e      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80058a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058a8:	d816      	bhi.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d018      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80058ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058b2:	d111      	bne.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058b4:	4b8c      	ldr	r3, [pc, #560]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b8:	4a8b      	ldr	r2, [pc, #556]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80058c0:	e00f      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058c6:	3308      	adds	r3, #8
 80058c8:	2101      	movs	r1, #1
 80058ca:	4618      	mov	r0, r3
 80058cc:	f001 f94c 	bl	8006b68 <RCCEx_PLL2_Config>
 80058d0:	4603      	mov	r3, r0
 80058d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80058d6:	e004      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80058de:	e000      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80058e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10a      	bne.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80058ea:	4b7f      	ldr	r3, [pc, #508]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ee:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80058f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f8:	4a7b      	ldr	r2, [pc, #492]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058fa:	430b      	orrs	r3, r1
 80058fc:	6513      	str	r3, [r2, #80]	; 0x50
 80058fe:	e003      	b.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005900:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005904:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800590c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005910:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005914:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005918:	2300      	movs	r3, #0
 800591a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800591e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005922:	460b      	mov	r3, r1
 8005924:	4313      	orrs	r3, r2
 8005926:	d039      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005928:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800592c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800592e:	2b03      	cmp	r3, #3
 8005930:	d81c      	bhi.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005932:	a201      	add	r2, pc, #4	; (adr r2, 8005938 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005938:	08005975 	.word	0x08005975
 800593c:	08005949 	.word	0x08005949
 8005940:	08005957 	.word	0x08005957
 8005944:	08005975 	.word	0x08005975
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005948:	4b67      	ldr	r3, [pc, #412]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800594a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594c:	4a66      	ldr	r2, [pc, #408]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800594e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005952:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005954:	e00f      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800595a:	3308      	adds	r3, #8
 800595c:	2102      	movs	r1, #2
 800595e:	4618      	mov	r0, r3
 8005960:	f001 f902 	bl	8006b68 <RCCEx_PLL2_Config>
 8005964:	4603      	mov	r3, r0
 8005966:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800596a:	e004      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005972:	e000      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005974:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005976:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10a      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800597e:	4b5a      	ldr	r3, [pc, #360]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005982:	f023 0103 	bic.w	r1, r3, #3
 8005986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800598a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800598c:	4a56      	ldr	r2, [pc, #344]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800598e:	430b      	orrs	r3, r1
 8005990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005992:	e003      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005994:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005998:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800599c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80059a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059ac:	2300      	movs	r3, #0
 80059ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80059b2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80059b6:	460b      	mov	r3, r1
 80059b8:	4313      	orrs	r3, r2
 80059ba:	f000 809f 	beq.w	8005afc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059be:	4b4b      	ldr	r3, [pc, #300]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a4a      	ldr	r2, [pc, #296]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80059c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059ca:	f7fc fa1b 	bl	8001e04 <HAL_GetTick>
 80059ce:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059d2:	e00b      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059d4:	f7fc fa16 	bl	8001e04 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	2b64      	cmp	r3, #100	; 0x64
 80059e2:	d903      	bls.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80059ea:	e005      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059ec:	4b3f      	ldr	r3, [pc, #252]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d0ed      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80059f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d179      	bne.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005a00:	4b39      	ldr	r3, [pc, #228]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a0c:	4053      	eors	r3, r2
 8005a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d015      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a16:	4b34      	ldr	r3, [pc, #208]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a1e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a22:	4b31      	ldr	r3, [pc, #196]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a26:	4a30      	ldr	r2, [pc, #192]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a2c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a2e:	4b2e      	ldr	r3, [pc, #184]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a32:	4a2d      	ldr	r2, [pc, #180]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a38:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005a3a:	4a2b      	ldr	r2, [pc, #172]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a40:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a4e:	d118      	bne.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a50:	f7fc f9d8 	bl	8001e04 <HAL_GetTick>
 8005a54:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a58:	e00d      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a5a:	f7fc f9d3 	bl	8001e04 <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005a64:	1ad2      	subs	r2, r2, r3
 8005a66:	f241 3388 	movw	r3, #5000	; 0x1388
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d903      	bls.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005a74:	e005      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a76:	4b1c      	ldr	r3, [pc, #112]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7a:	f003 0302 	and.w	r3, r3, #2
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d0eb      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005a82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d129      	bne.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a9a:	d10e      	bne.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005a9c:	4b12      	ldr	r3, [pc, #72]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aa8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005aac:	091a      	lsrs	r2, r3, #4
 8005aae:	4b10      	ldr	r3, [pc, #64]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	4a0d      	ldr	r2, [pc, #52]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ab4:	430b      	orrs	r3, r1
 8005ab6:	6113      	str	r3, [r2, #16]
 8005ab8:	e005      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005aba:	4b0b      	ldr	r3, [pc, #44]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	4a0a      	ldr	r2, [pc, #40]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ac0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005ac4:	6113      	str	r3, [r2, #16]
 8005ac6:	4b08      	ldr	r3, [pc, #32]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ac8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ace:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005ad2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ad6:	4a04      	ldr	r2, [pc, #16]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ad8:	430b      	orrs	r3, r1
 8005ada:	6713      	str	r3, [r2, #112]	; 0x70
 8005adc:	e00e      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ade:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ae2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005ae6:	e009      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005ae8:	58024400 	.word	0x58024400
 8005aec:	58024800 	.word	0x58024800
 8005af0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005af4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005af8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b04:	f002 0301 	and.w	r3, r2, #1
 8005b08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b12:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005b16:	460b      	mov	r3, r1
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	f000 8089 	beq.w	8005c30 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b24:	2b28      	cmp	r3, #40	; 0x28
 8005b26:	d86b      	bhi.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005b28:	a201      	add	r2, pc, #4	; (adr r2, 8005b30 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2e:	bf00      	nop
 8005b30:	08005c09 	.word	0x08005c09
 8005b34:	08005c01 	.word	0x08005c01
 8005b38:	08005c01 	.word	0x08005c01
 8005b3c:	08005c01 	.word	0x08005c01
 8005b40:	08005c01 	.word	0x08005c01
 8005b44:	08005c01 	.word	0x08005c01
 8005b48:	08005c01 	.word	0x08005c01
 8005b4c:	08005c01 	.word	0x08005c01
 8005b50:	08005bd5 	.word	0x08005bd5
 8005b54:	08005c01 	.word	0x08005c01
 8005b58:	08005c01 	.word	0x08005c01
 8005b5c:	08005c01 	.word	0x08005c01
 8005b60:	08005c01 	.word	0x08005c01
 8005b64:	08005c01 	.word	0x08005c01
 8005b68:	08005c01 	.word	0x08005c01
 8005b6c:	08005c01 	.word	0x08005c01
 8005b70:	08005beb 	.word	0x08005beb
 8005b74:	08005c01 	.word	0x08005c01
 8005b78:	08005c01 	.word	0x08005c01
 8005b7c:	08005c01 	.word	0x08005c01
 8005b80:	08005c01 	.word	0x08005c01
 8005b84:	08005c01 	.word	0x08005c01
 8005b88:	08005c01 	.word	0x08005c01
 8005b8c:	08005c01 	.word	0x08005c01
 8005b90:	08005c09 	.word	0x08005c09
 8005b94:	08005c01 	.word	0x08005c01
 8005b98:	08005c01 	.word	0x08005c01
 8005b9c:	08005c01 	.word	0x08005c01
 8005ba0:	08005c01 	.word	0x08005c01
 8005ba4:	08005c01 	.word	0x08005c01
 8005ba8:	08005c01 	.word	0x08005c01
 8005bac:	08005c01 	.word	0x08005c01
 8005bb0:	08005c09 	.word	0x08005c09
 8005bb4:	08005c01 	.word	0x08005c01
 8005bb8:	08005c01 	.word	0x08005c01
 8005bbc:	08005c01 	.word	0x08005c01
 8005bc0:	08005c01 	.word	0x08005c01
 8005bc4:	08005c01 	.word	0x08005c01
 8005bc8:	08005c01 	.word	0x08005c01
 8005bcc:	08005c01 	.word	0x08005c01
 8005bd0:	08005c09 	.word	0x08005c09
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bd8:	3308      	adds	r3, #8
 8005bda:	2101      	movs	r1, #1
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f000 ffc3 	bl	8006b68 <RCCEx_PLL2_Config>
 8005be2:	4603      	mov	r3, r0
 8005be4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005be8:	e00f      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bee:	3328      	adds	r3, #40	; 0x28
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f001 f86a 	bl	8006ccc <RCCEx_PLL3_Config>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005bfe:	e004      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c06:	e000      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005c08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10a      	bne.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005c12:	4bbf      	ldr	r3, [pc, #764]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c16:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c20:	4abb      	ldr	r2, [pc, #748]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c22:	430b      	orrs	r3, r1
 8005c24:	6553      	str	r3, [r2, #84]	; 0x54
 8005c26:	e003      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c38:	f002 0302 	and.w	r3, r2, #2
 8005c3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c40:	2300      	movs	r3, #0
 8005c42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005c46:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	d041      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c56:	2b05      	cmp	r3, #5
 8005c58:	d824      	bhi.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005c5a:	a201      	add	r2, pc, #4	; (adr r2, 8005c60 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c60:	08005cad 	.word	0x08005cad
 8005c64:	08005c79 	.word	0x08005c79
 8005c68:	08005c8f 	.word	0x08005c8f
 8005c6c:	08005cad 	.word	0x08005cad
 8005c70:	08005cad 	.word	0x08005cad
 8005c74:	08005cad 	.word	0x08005cad
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c7c:	3308      	adds	r3, #8
 8005c7e:	2101      	movs	r1, #1
 8005c80:	4618      	mov	r0, r3
 8005c82:	f000 ff71 	bl	8006b68 <RCCEx_PLL2_Config>
 8005c86:	4603      	mov	r3, r0
 8005c88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005c8c:	e00f      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c92:	3328      	adds	r3, #40	; 0x28
 8005c94:	2101      	movs	r1, #1
 8005c96:	4618      	mov	r0, r3
 8005c98:	f001 f818 	bl	8006ccc <RCCEx_PLL3_Config>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005ca2:	e004      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005caa:	e000      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005cac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10a      	bne.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005cb6:	4b96      	ldr	r3, [pc, #600]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cba:	f023 0107 	bic.w	r1, r3, #7
 8005cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cc4:	4a92      	ldr	r2, [pc, #584]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005cc6:	430b      	orrs	r3, r1
 8005cc8:	6553      	str	r3, [r2, #84]	; 0x54
 8005cca:	e003      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ccc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cd0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cdc:	f002 0304 	and.w	r3, r2, #4
 8005ce0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005cee:	460b      	mov	r3, r1
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	d044      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cfc:	2b05      	cmp	r3, #5
 8005cfe:	d825      	bhi.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005d00:	a201      	add	r2, pc, #4	; (adr r2, 8005d08 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d06:	bf00      	nop
 8005d08:	08005d55 	.word	0x08005d55
 8005d0c:	08005d21 	.word	0x08005d21
 8005d10:	08005d37 	.word	0x08005d37
 8005d14:	08005d55 	.word	0x08005d55
 8005d18:	08005d55 	.word	0x08005d55
 8005d1c:	08005d55 	.word	0x08005d55
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d24:	3308      	adds	r3, #8
 8005d26:	2101      	movs	r1, #1
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f000 ff1d 	bl	8006b68 <RCCEx_PLL2_Config>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005d34:	e00f      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d3a:	3328      	adds	r3, #40	; 0x28
 8005d3c:	2101      	movs	r1, #1
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 ffc4 	bl	8006ccc <RCCEx_PLL3_Config>
 8005d44:	4603      	mov	r3, r0
 8005d46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005d4a:	e004      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d52:	e000      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005d54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10b      	bne.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d5e:	4b6c      	ldr	r3, [pc, #432]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d62:	f023 0107 	bic.w	r1, r3, #7
 8005d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d6e:	4a68      	ldr	r2, [pc, #416]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d70:	430b      	orrs	r3, r1
 8005d72:	6593      	str	r3, [r2, #88]	; 0x58
 8005d74:	e003      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d86:	f002 0320 	and.w	r3, r2, #32
 8005d8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d8e:	2300      	movs	r3, #0
 8005d90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d98:	460b      	mov	r3, r1
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	d055      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005daa:	d033      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005dac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005db0:	d82c      	bhi.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db6:	d02f      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dbc:	d826      	bhi.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005dbe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005dc2:	d02b      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005dc4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005dc8:	d820      	bhi.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005dca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dce:	d012      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005dd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dd4:	d81a      	bhi.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d022      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005dda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dde:	d115      	bne.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005de4:	3308      	adds	r3, #8
 8005de6:	2100      	movs	r1, #0
 8005de8:	4618      	mov	r0, r3
 8005dea:	f000 febd 	bl	8006b68 <RCCEx_PLL2_Config>
 8005dee:	4603      	mov	r3, r0
 8005df0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005df4:	e015      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dfa:	3328      	adds	r3, #40	; 0x28
 8005dfc:	2102      	movs	r1, #2
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 ff64 	bl	8006ccc <RCCEx_PLL3_Config>
 8005e04:	4603      	mov	r3, r0
 8005e06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005e0a:	e00a      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e12:	e006      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005e14:	bf00      	nop
 8005e16:	e004      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005e18:	bf00      	nop
 8005e1a:	e002      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005e1c:	bf00      	nop
 8005e1e:	e000      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005e20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10b      	bne.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e2a:	4b39      	ldr	r3, [pc, #228]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e2e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e3a:	4a35      	ldr	r2, [pc, #212]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e3c:	430b      	orrs	r3, r1
 8005e3e:	6553      	str	r3, [r2, #84]	; 0x54
 8005e40:	e003      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e52:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005e56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005e60:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005e64:	460b      	mov	r3, r1
 8005e66:	4313      	orrs	r3, r2
 8005e68:	d058      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e72:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005e76:	d033      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005e78:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005e7c:	d82c      	bhi.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e82:	d02f      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e88:	d826      	bhi.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005e8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e8e:	d02b      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005e90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e94:	d820      	bhi.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005e96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e9a:	d012      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005e9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ea0:	d81a      	bhi.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d022      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eaa:	d115      	bne.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eb0:	3308      	adds	r3, #8
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 fe57 	bl	8006b68 <RCCEx_PLL2_Config>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005ec0:	e015      	b.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ec6:	3328      	adds	r3, #40	; 0x28
 8005ec8:	2102      	movs	r1, #2
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f000 fefe 	bl	8006ccc <RCCEx_PLL3_Config>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005ed6:	e00a      	b.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ede:	e006      	b.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005ee0:	bf00      	nop
 8005ee2:	e004      	b.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005ee4:	bf00      	nop
 8005ee6:	e002      	b.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005ee8:	bf00      	nop
 8005eea:	e000      	b.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005eec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10e      	bne.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ef6:	4b06      	ldr	r3, [pc, #24]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005efa:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f06:	4a02      	ldr	r2, [pc, #8]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f08:	430b      	orrs	r3, r1
 8005f0a:	6593      	str	r3, [r2, #88]	; 0x58
 8005f0c:	e006      	b.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005f0e:	bf00      	nop
 8005f10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f24:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005f28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f32:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005f36:	460b      	mov	r3, r1
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	d055      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005f44:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005f48:	d033      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005f4a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005f4e:	d82c      	bhi.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005f50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f54:	d02f      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005f56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f5a:	d826      	bhi.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005f5c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005f60:	d02b      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005f62:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005f66:	d820      	bhi.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005f68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f6c:	d012      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005f6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f72:	d81a      	bhi.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d022      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005f78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f7c:	d115      	bne.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f82:	3308      	adds	r3, #8
 8005f84:	2100      	movs	r1, #0
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 fdee 	bl	8006b68 <RCCEx_PLL2_Config>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005f92:	e015      	b.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f98:	3328      	adds	r3, #40	; 0x28
 8005f9a:	2102      	movs	r1, #2
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f000 fe95 	bl	8006ccc <RCCEx_PLL3_Config>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005fa8:	e00a      	b.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005fb0:	e006      	b.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005fb2:	bf00      	nop
 8005fb4:	e004      	b.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005fb6:	bf00      	nop
 8005fb8:	e002      	b.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005fba:	bf00      	nop
 8005fbc:	e000      	b.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005fbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10b      	bne.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005fc8:	4ba1      	ldr	r3, [pc, #644]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fcc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fd4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005fd8:	4a9d      	ldr	r2, [pc, #628]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fda:	430b      	orrs	r3, r1
 8005fdc:	6593      	str	r3, [r2, #88]	; 0x58
 8005fde:	e003      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fe0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fe4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff0:	f002 0308 	and.w	r3, r2, #8
 8005ff4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005ffe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006002:	460b      	mov	r3, r1
 8006004:	4313      	orrs	r3, r2
 8006006:	d01e      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800600c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006014:	d10c      	bne.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800601a:	3328      	adds	r3, #40	; 0x28
 800601c:	2102      	movs	r1, #2
 800601e:	4618      	mov	r0, r3
 8006020:	f000 fe54 	bl	8006ccc <RCCEx_PLL3_Config>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d002      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006030:	4b87      	ldr	r3, [pc, #540]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006034:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006038:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800603c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006040:	4a83      	ldr	r2, [pc, #524]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006042:	430b      	orrs	r3, r1
 8006044:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006046:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800604a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604e:	f002 0310 	and.w	r3, r2, #16
 8006052:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006056:	2300      	movs	r3, #0
 8006058:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800605c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006060:	460b      	mov	r3, r1
 8006062:	4313      	orrs	r3, r2
 8006064:	d01e      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800606a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800606e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006072:	d10c      	bne.n	800608e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006078:	3328      	adds	r3, #40	; 0x28
 800607a:	2102      	movs	r1, #2
 800607c:	4618      	mov	r0, r3
 800607e:	f000 fe25 	bl	8006ccc <RCCEx_PLL3_Config>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d002      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800608e:	4b70      	ldr	r3, [pc, #448]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006092:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800609a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800609e:	4a6c      	ldr	r2, [pc, #432]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060a0:	430b      	orrs	r3, r1
 80060a2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80060a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ac:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80060b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060b4:	2300      	movs	r3, #0
 80060b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80060ba:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80060be:	460b      	mov	r3, r1
 80060c0:	4313      	orrs	r3, r2
 80060c2:	d03e      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80060c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80060cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060d0:	d022      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80060d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060d6:	d81b      	bhi.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d003      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80060dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060e0:	d00b      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80060e2:	e015      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060e8:	3308      	adds	r3, #8
 80060ea:	2100      	movs	r1, #0
 80060ec:	4618      	mov	r0, r3
 80060ee:	f000 fd3b 	bl	8006b68 <RCCEx_PLL2_Config>
 80060f2:	4603      	mov	r3, r0
 80060f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80060f8:	e00f      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060fe:	3328      	adds	r3, #40	; 0x28
 8006100:	2102      	movs	r1, #2
 8006102:	4618      	mov	r0, r3
 8006104:	f000 fde2 	bl	8006ccc <RCCEx_PLL3_Config>
 8006108:	4603      	mov	r3, r0
 800610a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800610e:	e004      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006116:	e000      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800611a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10b      	bne.n	800613a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006122:	4b4b      	ldr	r3, [pc, #300]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006126:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800612a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800612e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006132:	4a47      	ldr	r2, [pc, #284]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006134:	430b      	orrs	r3, r1
 8006136:	6593      	str	r3, [r2, #88]	; 0x58
 8006138:	e003      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800613a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800613e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800614e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006150:	2300      	movs	r3, #0
 8006152:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006154:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006158:	460b      	mov	r3, r1
 800615a:	4313      	orrs	r3, r2
 800615c:	d03b      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800615e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006166:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800616a:	d01f      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800616c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006170:	d818      	bhi.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006172:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006176:	d003      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006178:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800617c:	d007      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800617e:	e011      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006180:	4b33      	ldr	r3, [pc, #204]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006184:	4a32      	ldr	r2, [pc, #200]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800618a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800618c:	e00f      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800618e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006192:	3328      	adds	r3, #40	; 0x28
 8006194:	2101      	movs	r1, #1
 8006196:	4618      	mov	r0, r3
 8006198:	f000 fd98 	bl	8006ccc <RCCEx_PLL3_Config>
 800619c:	4603      	mov	r3, r0
 800619e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80061a2:	e004      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80061aa:	e000      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80061ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10b      	bne.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061b6:	4b26      	ldr	r3, [pc, #152]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ba:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80061be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c6:	4a22      	ldr	r2, [pc, #136]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061c8:	430b      	orrs	r3, r1
 80061ca:	6553      	str	r3, [r2, #84]	; 0x54
 80061cc:	e003      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80061d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061de:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80061e2:	673b      	str	r3, [r7, #112]	; 0x70
 80061e4:	2300      	movs	r3, #0
 80061e6:	677b      	str	r3, [r7, #116]	; 0x74
 80061e8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80061ec:	460b      	mov	r3, r1
 80061ee:	4313      	orrs	r3, r2
 80061f0:	d034      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80061f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d003      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80061fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006200:	d007      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006202:	e011      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006204:	4b12      	ldr	r3, [pc, #72]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006208:	4a11      	ldr	r2, [pc, #68]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800620a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800620e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006210:	e00e      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006216:	3308      	adds	r3, #8
 8006218:	2102      	movs	r1, #2
 800621a:	4618      	mov	r0, r3
 800621c:	f000 fca4 	bl	8006b68 <RCCEx_PLL2_Config>
 8006220:	4603      	mov	r3, r0
 8006222:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006226:	e003      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800622e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006230:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10d      	bne.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006238:	4b05      	ldr	r3, [pc, #20]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800623a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800623c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006246:	4a02      	ldr	r2, [pc, #8]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006248:	430b      	orrs	r3, r1
 800624a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800624c:	e006      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800624e:	bf00      	nop
 8006250:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006254:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006258:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800625c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006264:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006268:	66bb      	str	r3, [r7, #104]	; 0x68
 800626a:	2300      	movs	r3, #0
 800626c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800626e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006272:	460b      	mov	r3, r1
 8006274:	4313      	orrs	r3, r2
 8006276:	d00c      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006278:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800627c:	3328      	adds	r3, #40	; 0x28
 800627e:	2102      	movs	r1, #2
 8006280:	4618      	mov	r0, r3
 8006282:	f000 fd23 	bl	8006ccc <RCCEx_PLL3_Config>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d002      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800629e:	663b      	str	r3, [r7, #96]	; 0x60
 80062a0:	2300      	movs	r3, #0
 80062a2:	667b      	str	r3, [r7, #100]	; 0x64
 80062a4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80062a8:	460b      	mov	r3, r1
 80062aa:	4313      	orrs	r3, r2
 80062ac:	d038      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80062ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062ba:	d018      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80062bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062c0:	d811      	bhi.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80062c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062c6:	d014      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80062c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062cc:	d80b      	bhi.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d011      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80062d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062d6:	d106      	bne.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062d8:	4bc3      	ldr	r3, [pc, #780]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062dc:	4ac2      	ldr	r2, [pc, #776]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80062e4:	e008      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80062ec:	e004      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80062ee:	bf00      	nop
 80062f0:	e002      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80062f2:	bf00      	nop
 80062f4:	e000      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80062f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10b      	bne.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006300:	4bb9      	ldr	r3, [pc, #740]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006304:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006308:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800630c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006310:	4ab5      	ldr	r2, [pc, #724]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006312:	430b      	orrs	r3, r1
 8006314:	6553      	str	r3, [r2, #84]	; 0x54
 8006316:	e003      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006318:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800631c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006320:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006328:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800632c:	65bb      	str	r3, [r7, #88]	; 0x58
 800632e:	2300      	movs	r3, #0
 8006330:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006332:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006336:	460b      	mov	r3, r1
 8006338:	4313      	orrs	r3, r2
 800633a:	d009      	beq.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800633c:	4baa      	ldr	r3, [pc, #680]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800633e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006340:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800634a:	4aa7      	ldr	r2, [pc, #668]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800634c:	430b      	orrs	r3, r1
 800634e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006350:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006358:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800635c:	653b      	str	r3, [r7, #80]	; 0x50
 800635e:	2300      	movs	r3, #0
 8006360:	657b      	str	r3, [r7, #84]	; 0x54
 8006362:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006366:	460b      	mov	r3, r1
 8006368:	4313      	orrs	r3, r2
 800636a:	d00a      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800636c:	4b9e      	ldr	r3, [pc, #632]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006374:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006378:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800637c:	4a9a      	ldr	r2, [pc, #616]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800637e:	430b      	orrs	r3, r1
 8006380:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800638e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006390:	2300      	movs	r3, #0
 8006392:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006394:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006398:	460b      	mov	r3, r1
 800639a:	4313      	orrs	r3, r2
 800639c:	d009      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800639e:	4b92      	ldr	r3, [pc, #584]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80063a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063ac:	4a8e      	ldr	r2, [pc, #568]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063ae:	430b      	orrs	r3, r1
 80063b0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80063b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ba:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80063be:	643b      	str	r3, [r7, #64]	; 0x40
 80063c0:	2300      	movs	r3, #0
 80063c2:	647b      	str	r3, [r7, #68]	; 0x44
 80063c4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80063c8:	460b      	mov	r3, r1
 80063ca:	4313      	orrs	r3, r2
 80063cc:	d00e      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80063ce:	4b86      	ldr	r3, [pc, #536]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	4a85      	ldr	r2, [pc, #532]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063d8:	6113      	str	r3, [r2, #16]
 80063da:	4b83      	ldr	r3, [pc, #524]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063dc:	6919      	ldr	r1, [r3, #16]
 80063de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80063e6:	4a80      	ldr	r2, [pc, #512]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063e8:	430b      	orrs	r3, r1
 80063ea:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80063ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80063f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80063fa:	2300      	movs	r3, #0
 80063fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063fe:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006402:	460b      	mov	r3, r1
 8006404:	4313      	orrs	r3, r2
 8006406:	d009      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006408:	4b77      	ldr	r3, [pc, #476]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800640a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800640c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006410:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006416:	4a74      	ldr	r2, [pc, #464]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006418:	430b      	orrs	r3, r1
 800641a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800641c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006424:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006428:	633b      	str	r3, [r7, #48]	; 0x30
 800642a:	2300      	movs	r3, #0
 800642c:	637b      	str	r3, [r7, #52]	; 0x34
 800642e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006432:	460b      	mov	r3, r1
 8006434:	4313      	orrs	r3, r2
 8006436:	d00a      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006438:	4b6b      	ldr	r3, [pc, #428]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800643a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800643c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006440:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006448:	4a67      	ldr	r2, [pc, #412]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800644a:	430b      	orrs	r3, r1
 800644c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800644e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006456:	2100      	movs	r1, #0
 8006458:	62b9      	str	r1, [r7, #40]	; 0x28
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006460:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006464:	460b      	mov	r3, r1
 8006466:	4313      	orrs	r3, r2
 8006468:	d011      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800646a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800646e:	3308      	adds	r3, #8
 8006470:	2100      	movs	r1, #0
 8006472:	4618      	mov	r0, r3
 8006474:	f000 fb78 	bl	8006b68 <RCCEx_PLL2_Config>
 8006478:	4603      	mov	r3, r0
 800647a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800647e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006482:	2b00      	cmp	r3, #0
 8006484:	d003      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006486:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800648a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800648e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006496:	2100      	movs	r1, #0
 8006498:	6239      	str	r1, [r7, #32]
 800649a:	f003 0302 	and.w	r3, r3, #2
 800649e:	627b      	str	r3, [r7, #36]	; 0x24
 80064a0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80064a4:	460b      	mov	r3, r1
 80064a6:	4313      	orrs	r3, r2
 80064a8:	d011      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ae:	3308      	adds	r3, #8
 80064b0:	2101      	movs	r1, #1
 80064b2:	4618      	mov	r0, r3
 80064b4:	f000 fb58 	bl	8006b68 <RCCEx_PLL2_Config>
 80064b8:	4603      	mov	r3, r0
 80064ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80064be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80064ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d6:	2100      	movs	r1, #0
 80064d8:	61b9      	str	r1, [r7, #24]
 80064da:	f003 0304 	and.w	r3, r3, #4
 80064de:	61fb      	str	r3, [r7, #28]
 80064e0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80064e4:	460b      	mov	r3, r1
 80064e6:	4313      	orrs	r3, r2
 80064e8:	d011      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80064ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ee:	3308      	adds	r3, #8
 80064f0:	2102      	movs	r1, #2
 80064f2:	4618      	mov	r0, r3
 80064f4:	f000 fb38 	bl	8006b68 <RCCEx_PLL2_Config>
 80064f8:	4603      	mov	r3, r0
 80064fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80064fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006506:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800650a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800650e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006516:	2100      	movs	r1, #0
 8006518:	6139      	str	r1, [r7, #16]
 800651a:	f003 0308 	and.w	r3, r3, #8
 800651e:	617b      	str	r3, [r7, #20]
 8006520:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006524:	460b      	mov	r3, r1
 8006526:	4313      	orrs	r3, r2
 8006528:	d011      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800652a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800652e:	3328      	adds	r3, #40	; 0x28
 8006530:	2100      	movs	r1, #0
 8006532:	4618      	mov	r0, r3
 8006534:	f000 fbca 	bl	8006ccc <RCCEx_PLL3_Config>
 8006538:	4603      	mov	r3, r0
 800653a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800653e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006546:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800654a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800654e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006556:	2100      	movs	r1, #0
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	f003 0310 	and.w	r3, r3, #16
 800655e:	60fb      	str	r3, [r7, #12]
 8006560:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006564:	460b      	mov	r3, r1
 8006566:	4313      	orrs	r3, r2
 8006568:	d011      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800656a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800656e:	3328      	adds	r3, #40	; 0x28
 8006570:	2101      	movs	r1, #1
 8006572:	4618      	mov	r0, r3
 8006574:	f000 fbaa 	bl	8006ccc <RCCEx_PLL3_Config>
 8006578:	4603      	mov	r3, r0
 800657a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800657e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006582:	2b00      	cmp	r3, #0
 8006584:	d003      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006586:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800658a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800658e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006596:	2100      	movs	r1, #0
 8006598:	6039      	str	r1, [r7, #0]
 800659a:	f003 0320 	and.w	r3, r3, #32
 800659e:	607b      	str	r3, [r7, #4]
 80065a0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80065a4:	460b      	mov	r3, r1
 80065a6:	4313      	orrs	r3, r2
 80065a8:	d011      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065ae:	3328      	adds	r3, #40	; 0x28
 80065b0:	2102      	movs	r1, #2
 80065b2:	4618      	mov	r0, r3
 80065b4:	f000 fb8a 	bl	8006ccc <RCCEx_PLL3_Config>
 80065b8:	4603      	mov	r3, r0
 80065ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80065be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d003      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80065ce:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	e000      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
}
 80065dc:	4618      	mov	r0, r3
 80065de:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80065e2:	46bd      	mov	sp, r7
 80065e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065e8:	58024400 	.word	0x58024400

080065ec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80065f0:	f7fe fd96 	bl	8005120 <HAL_RCC_GetHCLKFreq>
 80065f4:	4602      	mov	r2, r0
 80065f6:	4b06      	ldr	r3, [pc, #24]	; (8006610 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	091b      	lsrs	r3, r3, #4
 80065fc:	f003 0307 	and.w	r3, r3, #7
 8006600:	4904      	ldr	r1, [pc, #16]	; (8006614 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006602:	5ccb      	ldrb	r3, [r1, r3]
 8006604:	f003 031f 	and.w	r3, r3, #31
 8006608:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800660c:	4618      	mov	r0, r3
 800660e:	bd80      	pop	{r7, pc}
 8006610:	58024400 	.word	0x58024400
 8006614:	08010e10 	.word	0x08010e10

08006618 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006618:	b480      	push	{r7}
 800661a:	b089      	sub	sp, #36	; 0x24
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006620:	4ba1      	ldr	r3, [pc, #644]	; (80068a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006624:	f003 0303 	and.w	r3, r3, #3
 8006628:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800662a:	4b9f      	ldr	r3, [pc, #636]	; (80068a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800662c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662e:	0b1b      	lsrs	r3, r3, #12
 8006630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006634:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006636:	4b9c      	ldr	r3, [pc, #624]	; (80068a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663a:	091b      	lsrs	r3, r3, #4
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006642:	4b99      	ldr	r3, [pc, #612]	; (80068a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006646:	08db      	lsrs	r3, r3, #3
 8006648:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	fb02 f303 	mul.w	r3, r2, r3
 8006652:	ee07 3a90 	vmov	s15, r3
 8006656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800665a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	2b00      	cmp	r3, #0
 8006662:	f000 8111 	beq.w	8006888 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	2b02      	cmp	r3, #2
 800666a:	f000 8083 	beq.w	8006774 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	2b02      	cmp	r3, #2
 8006672:	f200 80a1 	bhi.w	80067b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d003      	beq.n	8006684 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d056      	beq.n	8006730 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006682:	e099      	b.n	80067b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006684:	4b88      	ldr	r3, [pc, #544]	; (80068a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0320 	and.w	r3, r3, #32
 800668c:	2b00      	cmp	r3, #0
 800668e:	d02d      	beq.n	80066ec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006690:	4b85      	ldr	r3, [pc, #532]	; (80068a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	08db      	lsrs	r3, r3, #3
 8006696:	f003 0303 	and.w	r3, r3, #3
 800669a:	4a84      	ldr	r2, [pc, #528]	; (80068ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800669c:	fa22 f303 	lsr.w	r3, r2, r3
 80066a0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	ee07 3a90 	vmov	s15, r3
 80066a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	ee07 3a90 	vmov	s15, r3
 80066b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066ba:	4b7b      	ldr	r3, [pc, #492]	; (80068a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066c2:	ee07 3a90 	vmov	s15, r3
 80066c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80066ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 80068b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80066d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80066ea:	e087      	b.n	80067fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	ee07 3a90 	vmov	s15, r3
 80066f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80068b4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80066fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066fe:	4b6a      	ldr	r3, [pc, #424]	; (80068a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006706:	ee07 3a90 	vmov	s15, r3
 800670a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800670e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006712:	eddf 5a67 	vldr	s11, [pc, #412]	; 80068b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800671a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800671e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800672a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800672e:	e065      	b.n	80067fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	ee07 3a90 	vmov	s15, r3
 8006736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800673a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80068b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800673e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006742:	4b59      	ldr	r3, [pc, #356]	; (80068a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800674a:	ee07 3a90 	vmov	s15, r3
 800674e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006752:	ed97 6a03 	vldr	s12, [r7, #12]
 8006756:	eddf 5a56 	vldr	s11, [pc, #344]	; 80068b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800675a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800675e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800676a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800676e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006772:	e043      	b.n	80067fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	ee07 3a90 	vmov	s15, r3
 800677a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800677e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80068bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006786:	4b48      	ldr	r3, [pc, #288]	; (80068a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800678e:	ee07 3a90 	vmov	s15, r3
 8006792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006796:	ed97 6a03 	vldr	s12, [r7, #12]
 800679a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80068b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800679e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067b6:	e021      	b.n	80067fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	ee07 3a90 	vmov	s15, r3
 80067be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80068b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80067c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ca:	4b37      	ldr	r3, [pc, #220]	; (80068a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067d2:	ee07 3a90 	vmov	s15, r3
 80067d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067da:	ed97 6a03 	vldr	s12, [r7, #12]
 80067de:	eddf 5a34 	vldr	s11, [pc, #208]	; 80068b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067fa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80067fc:	4b2a      	ldr	r3, [pc, #168]	; (80068a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006800:	0a5b      	lsrs	r3, r3, #9
 8006802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006806:	ee07 3a90 	vmov	s15, r3
 800680a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800680e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006812:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006816:	edd7 6a07 	vldr	s13, [r7, #28]
 800681a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800681e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006822:	ee17 2a90 	vmov	r2, s15
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800682a:	4b1f      	ldr	r3, [pc, #124]	; (80068a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800682c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682e:	0c1b      	lsrs	r3, r3, #16
 8006830:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006834:	ee07 3a90 	vmov	s15, r3
 8006838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800683c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006840:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006844:	edd7 6a07 	vldr	s13, [r7, #28]
 8006848:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800684c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006850:	ee17 2a90 	vmov	r2, s15
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006858:	4b13      	ldr	r3, [pc, #76]	; (80068a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800685a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685c:	0e1b      	lsrs	r3, r3, #24
 800685e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006862:	ee07 3a90 	vmov	s15, r3
 8006866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800686a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800686e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006872:	edd7 6a07 	vldr	s13, [r7, #28]
 8006876:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800687a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800687e:	ee17 2a90 	vmov	r2, s15
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006886:	e008      	b.n	800689a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	609a      	str	r2, [r3, #8]
}
 800689a:	bf00      	nop
 800689c:	3724      	adds	r7, #36	; 0x24
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	58024400 	.word	0x58024400
 80068ac:	03d09000 	.word	0x03d09000
 80068b0:	46000000 	.word	0x46000000
 80068b4:	4c742400 	.word	0x4c742400
 80068b8:	4a742400 	.word	0x4a742400
 80068bc:	4bbebc20 	.word	0x4bbebc20

080068c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b089      	sub	sp, #36	; 0x24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80068c8:	4ba1      	ldr	r3, [pc, #644]	; (8006b50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068cc:	f003 0303 	and.w	r3, r3, #3
 80068d0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80068d2:	4b9f      	ldr	r3, [pc, #636]	; (8006b50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d6:	0d1b      	lsrs	r3, r3, #20
 80068d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068dc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80068de:	4b9c      	ldr	r3, [pc, #624]	; (8006b50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e2:	0a1b      	lsrs	r3, r3, #8
 80068e4:	f003 0301 	and.w	r3, r3, #1
 80068e8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80068ea:	4b99      	ldr	r3, [pc, #612]	; (8006b50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ee:	08db      	lsrs	r3, r3, #3
 80068f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	fb02 f303 	mul.w	r3, r2, r3
 80068fa:	ee07 3a90 	vmov	s15, r3
 80068fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006902:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2b00      	cmp	r3, #0
 800690a:	f000 8111 	beq.w	8006b30 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	2b02      	cmp	r3, #2
 8006912:	f000 8083 	beq.w	8006a1c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	2b02      	cmp	r3, #2
 800691a:	f200 80a1 	bhi.w	8006a60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d003      	beq.n	800692c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	2b01      	cmp	r3, #1
 8006928:	d056      	beq.n	80069d8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800692a:	e099      	b.n	8006a60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800692c:	4b88      	ldr	r3, [pc, #544]	; (8006b50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0320 	and.w	r3, r3, #32
 8006934:	2b00      	cmp	r3, #0
 8006936:	d02d      	beq.n	8006994 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006938:	4b85      	ldr	r3, [pc, #532]	; (8006b50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	08db      	lsrs	r3, r3, #3
 800693e:	f003 0303 	and.w	r3, r3, #3
 8006942:	4a84      	ldr	r2, [pc, #528]	; (8006b54 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006944:	fa22 f303 	lsr.w	r3, r2, r3
 8006948:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	ee07 3a90 	vmov	s15, r3
 8006950:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	ee07 3a90 	vmov	s15, r3
 800695a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800695e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006962:	4b7b      	ldr	r3, [pc, #492]	; (8006b50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800696a:	ee07 3a90 	vmov	s15, r3
 800696e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006972:	ed97 6a03 	vldr	s12, [r7, #12]
 8006976:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006b58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800697a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800697e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800698a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800698e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006992:	e087      	b.n	8006aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	ee07 3a90 	vmov	s15, r3
 800699a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800699e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006b5c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80069a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069a6:	4b6a      	ldr	r3, [pc, #424]	; (8006b50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ae:	ee07 3a90 	vmov	s15, r3
 80069b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80069ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006b58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069d6:	e065      	b.n	8006aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	ee07 3a90 	vmov	s15, r3
 80069de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80069e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069ea:	4b59      	ldr	r3, [pc, #356]	; (8006b50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069f2:	ee07 3a90 	vmov	s15, r3
 80069f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80069fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006b58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a1a:	e043      	b.n	8006aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	ee07 3a90 	vmov	s15, r3
 8006a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a26:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006b64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a2e:	4b48      	ldr	r3, [pc, #288]	; (8006b50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a36:	ee07 3a90 	vmov	s15, r3
 8006a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a42:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006b58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a5e:	e021      	b.n	8006aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	ee07 3a90 	vmov	s15, r3
 8006a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a6a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a72:	4b37      	ldr	r3, [pc, #220]	; (8006b50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a7a:	ee07 3a90 	vmov	s15, r3
 8006a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a82:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a86:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006b58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006aa2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006aa4:	4b2a      	ldr	r3, [pc, #168]	; (8006b50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa8:	0a5b      	lsrs	r3, r3, #9
 8006aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aae:	ee07 3a90 	vmov	s15, r3
 8006ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ab6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006aba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006abe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ac2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006aca:	ee17 2a90 	vmov	r2, s15
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006ad2:	4b1f      	ldr	r3, [pc, #124]	; (8006b50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	0c1b      	lsrs	r3, r3, #16
 8006ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006adc:	ee07 3a90 	vmov	s15, r3
 8006ae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ae4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ae8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006aec:	edd7 6a07 	vldr	s13, [r7, #28]
 8006af0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006af4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006af8:	ee17 2a90 	vmov	r2, s15
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006b00:	4b13      	ldr	r3, [pc, #76]	; (8006b50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b04:	0e1b      	lsrs	r3, r3, #24
 8006b06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b0a:	ee07 3a90 	vmov	s15, r3
 8006b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b26:	ee17 2a90 	vmov	r2, s15
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006b2e:	e008      	b.n	8006b42 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	609a      	str	r2, [r3, #8]
}
 8006b42:	bf00      	nop
 8006b44:	3724      	adds	r7, #36	; 0x24
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	58024400 	.word	0x58024400
 8006b54:	03d09000 	.word	0x03d09000
 8006b58:	46000000 	.word	0x46000000
 8006b5c:	4c742400 	.word	0x4c742400
 8006b60:	4a742400 	.word	0x4a742400
 8006b64:	4bbebc20 	.word	0x4bbebc20

08006b68 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b72:	2300      	movs	r3, #0
 8006b74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006b76:	4b53      	ldr	r3, [pc, #332]	; (8006cc4 <RCCEx_PLL2_Config+0x15c>)
 8006b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b7a:	f003 0303 	and.w	r3, r3, #3
 8006b7e:	2b03      	cmp	r3, #3
 8006b80:	d101      	bne.n	8006b86 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e099      	b.n	8006cba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006b86:	4b4f      	ldr	r3, [pc, #316]	; (8006cc4 <RCCEx_PLL2_Config+0x15c>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a4e      	ldr	r2, [pc, #312]	; (8006cc4 <RCCEx_PLL2_Config+0x15c>)
 8006b8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006b90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b92:	f7fb f937 	bl	8001e04 <HAL_GetTick>
 8006b96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006b98:	e008      	b.n	8006bac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006b9a:	f7fb f933 	bl	8001e04 <HAL_GetTick>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d901      	bls.n	8006bac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e086      	b.n	8006cba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006bac:	4b45      	ldr	r3, [pc, #276]	; (8006cc4 <RCCEx_PLL2_Config+0x15c>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1f0      	bne.n	8006b9a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006bb8:	4b42      	ldr	r3, [pc, #264]	; (8006cc4 <RCCEx_PLL2_Config+0x15c>)
 8006bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bbc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	031b      	lsls	r3, r3, #12
 8006bc6:	493f      	ldr	r1, [pc, #252]	; (8006cc4 <RCCEx_PLL2_Config+0x15c>)
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	628b      	str	r3, [r1, #40]	; 0x28
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	025b      	lsls	r3, r3, #9
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	431a      	orrs	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	3b01      	subs	r3, #1
 8006be8:	041b      	lsls	r3, r3, #16
 8006bea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006bee:	431a      	orrs	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	061b      	lsls	r3, r3, #24
 8006bf8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006bfc:	4931      	ldr	r1, [pc, #196]	; (8006cc4 <RCCEx_PLL2_Config+0x15c>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006c02:	4b30      	ldr	r3, [pc, #192]	; (8006cc4 <RCCEx_PLL2_Config+0x15c>)
 8006c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c06:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	492d      	ldr	r1, [pc, #180]	; (8006cc4 <RCCEx_PLL2_Config+0x15c>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006c14:	4b2b      	ldr	r3, [pc, #172]	; (8006cc4 <RCCEx_PLL2_Config+0x15c>)
 8006c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c18:	f023 0220 	bic.w	r2, r3, #32
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	699b      	ldr	r3, [r3, #24]
 8006c20:	4928      	ldr	r1, [pc, #160]	; (8006cc4 <RCCEx_PLL2_Config+0x15c>)
 8006c22:	4313      	orrs	r3, r2
 8006c24:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006c26:	4b27      	ldr	r3, [pc, #156]	; (8006cc4 <RCCEx_PLL2_Config+0x15c>)
 8006c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2a:	4a26      	ldr	r2, [pc, #152]	; (8006cc4 <RCCEx_PLL2_Config+0x15c>)
 8006c2c:	f023 0310 	bic.w	r3, r3, #16
 8006c30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006c32:	4b24      	ldr	r3, [pc, #144]	; (8006cc4 <RCCEx_PLL2_Config+0x15c>)
 8006c34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c36:	4b24      	ldr	r3, [pc, #144]	; (8006cc8 <RCCEx_PLL2_Config+0x160>)
 8006c38:	4013      	ands	r3, r2
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	69d2      	ldr	r2, [r2, #28]
 8006c3e:	00d2      	lsls	r2, r2, #3
 8006c40:	4920      	ldr	r1, [pc, #128]	; (8006cc4 <RCCEx_PLL2_Config+0x15c>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006c46:	4b1f      	ldr	r3, [pc, #124]	; (8006cc4 <RCCEx_PLL2_Config+0x15c>)
 8006c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4a:	4a1e      	ldr	r2, [pc, #120]	; (8006cc4 <RCCEx_PLL2_Config+0x15c>)
 8006c4c:	f043 0310 	orr.w	r3, r3, #16
 8006c50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d106      	bne.n	8006c66 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006c58:	4b1a      	ldr	r3, [pc, #104]	; (8006cc4 <RCCEx_PLL2_Config+0x15c>)
 8006c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5c:	4a19      	ldr	r2, [pc, #100]	; (8006cc4 <RCCEx_PLL2_Config+0x15c>)
 8006c5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006c64:	e00f      	b.n	8006c86 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d106      	bne.n	8006c7a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006c6c:	4b15      	ldr	r3, [pc, #84]	; (8006cc4 <RCCEx_PLL2_Config+0x15c>)
 8006c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c70:	4a14      	ldr	r2, [pc, #80]	; (8006cc4 <RCCEx_PLL2_Config+0x15c>)
 8006c72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006c78:	e005      	b.n	8006c86 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006c7a:	4b12      	ldr	r3, [pc, #72]	; (8006cc4 <RCCEx_PLL2_Config+0x15c>)
 8006c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7e:	4a11      	ldr	r2, [pc, #68]	; (8006cc4 <RCCEx_PLL2_Config+0x15c>)
 8006c80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c84:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006c86:	4b0f      	ldr	r3, [pc, #60]	; (8006cc4 <RCCEx_PLL2_Config+0x15c>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a0e      	ldr	r2, [pc, #56]	; (8006cc4 <RCCEx_PLL2_Config+0x15c>)
 8006c8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c92:	f7fb f8b7 	bl	8001e04 <HAL_GetTick>
 8006c96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006c98:	e008      	b.n	8006cac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006c9a:	f7fb f8b3 	bl	8001e04 <HAL_GetTick>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d901      	bls.n	8006cac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e006      	b.n	8006cba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006cac:	4b05      	ldr	r3, [pc, #20]	; (8006cc4 <RCCEx_PLL2_Config+0x15c>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d0f0      	beq.n	8006c9a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	58024400 	.word	0x58024400
 8006cc8:	ffff0007 	.word	0xffff0007

08006ccc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006cda:	4b53      	ldr	r3, [pc, #332]	; (8006e28 <RCCEx_PLL3_Config+0x15c>)
 8006cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cde:	f003 0303 	and.w	r3, r3, #3
 8006ce2:	2b03      	cmp	r3, #3
 8006ce4:	d101      	bne.n	8006cea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e099      	b.n	8006e1e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006cea:	4b4f      	ldr	r3, [pc, #316]	; (8006e28 <RCCEx_PLL3_Config+0x15c>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a4e      	ldr	r2, [pc, #312]	; (8006e28 <RCCEx_PLL3_Config+0x15c>)
 8006cf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cf6:	f7fb f885 	bl	8001e04 <HAL_GetTick>
 8006cfa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006cfc:	e008      	b.n	8006d10 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006cfe:	f7fb f881 	bl	8001e04 <HAL_GetTick>
 8006d02:	4602      	mov	r2, r0
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d901      	bls.n	8006d10 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e086      	b.n	8006e1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d10:	4b45      	ldr	r3, [pc, #276]	; (8006e28 <RCCEx_PLL3_Config+0x15c>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1f0      	bne.n	8006cfe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006d1c:	4b42      	ldr	r3, [pc, #264]	; (8006e28 <RCCEx_PLL3_Config+0x15c>)
 8006d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d20:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	051b      	lsls	r3, r3, #20
 8006d2a:	493f      	ldr	r1, [pc, #252]	; (8006e28 <RCCEx_PLL3_Config+0x15c>)
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	628b      	str	r3, [r1, #40]	; 0x28
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	3b01      	subs	r3, #1
 8006d36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	025b      	lsls	r3, r3, #9
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	431a      	orrs	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	041b      	lsls	r3, r3, #16
 8006d4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006d52:	431a      	orrs	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	061b      	lsls	r3, r3, #24
 8006d5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006d60:	4931      	ldr	r1, [pc, #196]	; (8006e28 <RCCEx_PLL3_Config+0x15c>)
 8006d62:	4313      	orrs	r3, r2
 8006d64:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006d66:	4b30      	ldr	r3, [pc, #192]	; (8006e28 <RCCEx_PLL3_Config+0x15c>)
 8006d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	492d      	ldr	r1, [pc, #180]	; (8006e28 <RCCEx_PLL3_Config+0x15c>)
 8006d74:	4313      	orrs	r3, r2
 8006d76:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006d78:	4b2b      	ldr	r3, [pc, #172]	; (8006e28 <RCCEx_PLL3_Config+0x15c>)
 8006d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	4928      	ldr	r1, [pc, #160]	; (8006e28 <RCCEx_PLL3_Config+0x15c>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006d8a:	4b27      	ldr	r3, [pc, #156]	; (8006e28 <RCCEx_PLL3_Config+0x15c>)
 8006d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8e:	4a26      	ldr	r2, [pc, #152]	; (8006e28 <RCCEx_PLL3_Config+0x15c>)
 8006d90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006d96:	4b24      	ldr	r3, [pc, #144]	; (8006e28 <RCCEx_PLL3_Config+0x15c>)
 8006d98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d9a:	4b24      	ldr	r3, [pc, #144]	; (8006e2c <RCCEx_PLL3_Config+0x160>)
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	69d2      	ldr	r2, [r2, #28]
 8006da2:	00d2      	lsls	r2, r2, #3
 8006da4:	4920      	ldr	r1, [pc, #128]	; (8006e28 <RCCEx_PLL3_Config+0x15c>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006daa:	4b1f      	ldr	r3, [pc, #124]	; (8006e28 <RCCEx_PLL3_Config+0x15c>)
 8006dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dae:	4a1e      	ldr	r2, [pc, #120]	; (8006e28 <RCCEx_PLL3_Config+0x15c>)
 8006db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006db4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d106      	bne.n	8006dca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006dbc:	4b1a      	ldr	r3, [pc, #104]	; (8006e28 <RCCEx_PLL3_Config+0x15c>)
 8006dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc0:	4a19      	ldr	r2, [pc, #100]	; (8006e28 <RCCEx_PLL3_Config+0x15c>)
 8006dc2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006dc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006dc8:	e00f      	b.n	8006dea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d106      	bne.n	8006dde <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006dd0:	4b15      	ldr	r3, [pc, #84]	; (8006e28 <RCCEx_PLL3_Config+0x15c>)
 8006dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd4:	4a14      	ldr	r2, [pc, #80]	; (8006e28 <RCCEx_PLL3_Config+0x15c>)
 8006dd6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006dda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ddc:	e005      	b.n	8006dea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006dde:	4b12      	ldr	r3, [pc, #72]	; (8006e28 <RCCEx_PLL3_Config+0x15c>)
 8006de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de2:	4a11      	ldr	r2, [pc, #68]	; (8006e28 <RCCEx_PLL3_Config+0x15c>)
 8006de4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006de8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006dea:	4b0f      	ldr	r3, [pc, #60]	; (8006e28 <RCCEx_PLL3_Config+0x15c>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a0e      	ldr	r2, [pc, #56]	; (8006e28 <RCCEx_PLL3_Config+0x15c>)
 8006df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006df4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006df6:	f7fb f805 	bl	8001e04 <HAL_GetTick>
 8006dfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006dfc:	e008      	b.n	8006e10 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006dfe:	f7fb f801 	bl	8001e04 <HAL_GetTick>
 8006e02:	4602      	mov	r2, r0
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d901      	bls.n	8006e10 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	e006      	b.n	8006e1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e10:	4b05      	ldr	r3, [pc, #20]	; (8006e28 <RCCEx_PLL3_Config+0x15c>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d0f0      	beq.n	8006dfe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	58024400 	.word	0x58024400
 8006e2c:	ffff0007 	.word	0xffff0007

08006e30 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d101      	bne.n	8006e44 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e02b      	b.n	8006e9c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d106      	bne.n	8006e5e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f7fa fd8b 	bl	8001974 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2202      	movs	r2, #2
 8006e62:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	3304      	adds	r3, #4
 8006e6e:	4619      	mov	r1, r3
 8006e70:	4610      	mov	r0, r2
 8006e72:	f003 fb59 	bl	800a528 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6818      	ldr	r0, [r3, #0]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	6839      	ldr	r1, [r7, #0]
 8006e82:	f003 fbad 	bl	800a5e0 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8006e86:	4b07      	ldr	r3, [pc, #28]	; (8006ea4 <HAL_SDRAM_Init+0x74>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a06      	ldr	r2, [pc, #24]	; (8006ea4 <HAL_SDRAM_Init+0x74>)
 8006e8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e90:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	52004000 	.word	0x52004000

08006ea8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b086      	sub	sp, #24
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006eba:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006ebc:	7dfb      	ldrb	r3, [r7, #23]
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d101      	bne.n	8006ec6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	e021      	b.n	8006f0a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006ec6:	7dfb      	ldrb	r3, [r7, #23]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d002      	beq.n	8006ed2 <HAL_SDRAM_SendCommand+0x2a>
 8006ecc:	7dfb      	ldrb	r3, [r7, #23]
 8006ece:	2b05      	cmp	r3, #5
 8006ed0:	d118      	bne.n	8006f04 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2202      	movs	r2, #2
 8006ed6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	68b9      	ldr	r1, [r7, #8]
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f003 fbe6 	bl	800a6b4 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d104      	bne.n	8006efa <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2205      	movs	r2, #5
 8006ef4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006ef8:	e006      	b.n	8006f08 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006f02:	e001      	b.n	8006f08 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e000      	b.n	8006f0a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3718      	adds	r7, #24
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b082      	sub	sp, #8
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
 8006f1a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d101      	bne.n	8006f2c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006f28:	2302      	movs	r3, #2
 8006f2a:	e016      	b.n	8006f5a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d10f      	bne.n	8006f58 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	6839      	ldr	r1, [r7, #0]
 8006f46:	4618      	mov	r0, r3
 8006f48:	f003 fbd8 	bl	800a6fc <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
 8006f56:	e000      	b.n	8006f5a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3708      	adds	r7, #8
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b082      	sub	sp, #8
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d101      	bne.n	8006f74 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e049      	b.n	8007008 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d106      	bne.n	8006f8e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f7fa fb47 	bl	800161c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2202      	movs	r2, #2
 8006f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	4610      	mov	r0, r2
 8006fa2:	f000 fa7f 	bl	80074a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2201      	movs	r2, #1
 8007002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3708      	adds	r7, #8
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	f003 0302 	and.w	r3, r3, #2
 8007022:	2b02      	cmp	r3, #2
 8007024:	d122      	bne.n	800706c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	f003 0302 	and.w	r3, r3, #2
 8007030:	2b02      	cmp	r3, #2
 8007032:	d11b      	bne.n	800706c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f06f 0202 	mvn.w	r2, #2
 800703c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2201      	movs	r2, #1
 8007042:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	699b      	ldr	r3, [r3, #24]
 800704a:	f003 0303 	and.w	r3, r3, #3
 800704e:	2b00      	cmp	r3, #0
 8007050:	d003      	beq.n	800705a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 fa08 	bl	8007468 <HAL_TIM_IC_CaptureCallback>
 8007058:	e005      	b.n	8007066 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f9fa 	bl	8007454 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 fa0b 	bl	800747c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	f003 0304 	and.w	r3, r3, #4
 8007076:	2b04      	cmp	r3, #4
 8007078:	d122      	bne.n	80070c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	f003 0304 	and.w	r3, r3, #4
 8007084:	2b04      	cmp	r3, #4
 8007086:	d11b      	bne.n	80070c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f06f 0204 	mvn.w	r2, #4
 8007090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2202      	movs	r2, #2
 8007096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d003      	beq.n	80070ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f9de 	bl	8007468 <HAL_TIM_IC_CaptureCallback>
 80070ac:	e005      	b.n	80070ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 f9d0 	bl	8007454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 f9e1 	bl	800747c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	f003 0308 	and.w	r3, r3, #8
 80070ca:	2b08      	cmp	r3, #8
 80070cc:	d122      	bne.n	8007114 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	f003 0308 	and.w	r3, r3, #8
 80070d8:	2b08      	cmp	r3, #8
 80070da:	d11b      	bne.n	8007114 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f06f 0208 	mvn.w	r2, #8
 80070e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2204      	movs	r2, #4
 80070ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	69db      	ldr	r3, [r3, #28]
 80070f2:	f003 0303 	and.w	r3, r3, #3
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d003      	beq.n	8007102 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f9b4 	bl	8007468 <HAL_TIM_IC_CaptureCallback>
 8007100:	e005      	b.n	800710e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f9a6 	bl	8007454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f9b7 	bl	800747c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	f003 0310 	and.w	r3, r3, #16
 800711e:	2b10      	cmp	r3, #16
 8007120:	d122      	bne.n	8007168 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	f003 0310 	and.w	r3, r3, #16
 800712c:	2b10      	cmp	r3, #16
 800712e:	d11b      	bne.n	8007168 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f06f 0210 	mvn.w	r2, #16
 8007138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2208      	movs	r2, #8
 800713e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	69db      	ldr	r3, [r3, #28]
 8007146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800714a:	2b00      	cmp	r3, #0
 800714c:	d003      	beq.n	8007156 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f98a 	bl	8007468 <HAL_TIM_IC_CaptureCallback>
 8007154:	e005      	b.n	8007162 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f97c 	bl	8007454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 f98d 	bl	800747c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	2b01      	cmp	r3, #1
 8007174:	d10e      	bne.n	8007194 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	2b01      	cmp	r3, #1
 8007182:	d107      	bne.n	8007194 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f06f 0201 	mvn.w	r2, #1
 800718c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f956 	bl	8007440 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800719e:	2b80      	cmp	r3, #128	; 0x80
 80071a0:	d10e      	bne.n	80071c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ac:	2b80      	cmp	r3, #128	; 0x80
 80071ae:	d107      	bne.n	80071c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80071b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 fb42 	bl	8007844 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071ce:	d10e      	bne.n	80071ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071da:	2b80      	cmp	r3, #128	; 0x80
 80071dc:	d107      	bne.n	80071ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80071e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 fb35 	bl	8007858 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f8:	2b40      	cmp	r3, #64	; 0x40
 80071fa:	d10e      	bne.n	800721a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007206:	2b40      	cmp	r3, #64	; 0x40
 8007208:	d107      	bne.n	800721a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 f93b 	bl	8007490 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	f003 0320 	and.w	r3, r3, #32
 8007224:	2b20      	cmp	r3, #32
 8007226:	d10e      	bne.n	8007246 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	f003 0320 	and.w	r3, r3, #32
 8007232:	2b20      	cmp	r3, #32
 8007234:	d107      	bne.n	8007246 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f06f 0220 	mvn.w	r2, #32
 800723e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 faf5 	bl	8007830 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007246:	bf00      	nop
 8007248:	3708      	adds	r7, #8
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
	...

08007250 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800725a:	2300      	movs	r3, #0
 800725c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007264:	2b01      	cmp	r3, #1
 8007266:	d101      	bne.n	800726c <HAL_TIM_ConfigClockSource+0x1c>
 8007268:	2302      	movs	r3, #2
 800726a:	e0dc      	b.n	8007426 <HAL_TIM_ConfigClockSource+0x1d6>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2202      	movs	r2, #2
 8007278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007284:	68ba      	ldr	r2, [r7, #8]
 8007286:	4b6a      	ldr	r3, [pc, #424]	; (8007430 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007288:	4013      	ands	r3, r2
 800728a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007292:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a64      	ldr	r2, [pc, #400]	; (8007434 <HAL_TIM_ConfigClockSource+0x1e4>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	f000 80a9 	beq.w	80073fa <HAL_TIM_ConfigClockSource+0x1aa>
 80072a8:	4a62      	ldr	r2, [pc, #392]	; (8007434 <HAL_TIM_ConfigClockSource+0x1e4>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	f200 80ae 	bhi.w	800740c <HAL_TIM_ConfigClockSource+0x1bc>
 80072b0:	4a61      	ldr	r2, [pc, #388]	; (8007438 <HAL_TIM_ConfigClockSource+0x1e8>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	f000 80a1 	beq.w	80073fa <HAL_TIM_ConfigClockSource+0x1aa>
 80072b8:	4a5f      	ldr	r2, [pc, #380]	; (8007438 <HAL_TIM_ConfigClockSource+0x1e8>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	f200 80a6 	bhi.w	800740c <HAL_TIM_ConfigClockSource+0x1bc>
 80072c0:	4a5e      	ldr	r2, [pc, #376]	; (800743c <HAL_TIM_ConfigClockSource+0x1ec>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	f000 8099 	beq.w	80073fa <HAL_TIM_ConfigClockSource+0x1aa>
 80072c8:	4a5c      	ldr	r2, [pc, #368]	; (800743c <HAL_TIM_ConfigClockSource+0x1ec>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	f200 809e 	bhi.w	800740c <HAL_TIM_ConfigClockSource+0x1bc>
 80072d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80072d4:	f000 8091 	beq.w	80073fa <HAL_TIM_ConfigClockSource+0x1aa>
 80072d8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80072dc:	f200 8096 	bhi.w	800740c <HAL_TIM_ConfigClockSource+0x1bc>
 80072e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072e4:	f000 8089 	beq.w	80073fa <HAL_TIM_ConfigClockSource+0x1aa>
 80072e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072ec:	f200 808e 	bhi.w	800740c <HAL_TIM_ConfigClockSource+0x1bc>
 80072f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072f4:	d03e      	beq.n	8007374 <HAL_TIM_ConfigClockSource+0x124>
 80072f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072fa:	f200 8087 	bhi.w	800740c <HAL_TIM_ConfigClockSource+0x1bc>
 80072fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007302:	f000 8086 	beq.w	8007412 <HAL_TIM_ConfigClockSource+0x1c2>
 8007306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800730a:	d87f      	bhi.n	800740c <HAL_TIM_ConfigClockSource+0x1bc>
 800730c:	2b70      	cmp	r3, #112	; 0x70
 800730e:	d01a      	beq.n	8007346 <HAL_TIM_ConfigClockSource+0xf6>
 8007310:	2b70      	cmp	r3, #112	; 0x70
 8007312:	d87b      	bhi.n	800740c <HAL_TIM_ConfigClockSource+0x1bc>
 8007314:	2b60      	cmp	r3, #96	; 0x60
 8007316:	d050      	beq.n	80073ba <HAL_TIM_ConfigClockSource+0x16a>
 8007318:	2b60      	cmp	r3, #96	; 0x60
 800731a:	d877      	bhi.n	800740c <HAL_TIM_ConfigClockSource+0x1bc>
 800731c:	2b50      	cmp	r3, #80	; 0x50
 800731e:	d03c      	beq.n	800739a <HAL_TIM_ConfigClockSource+0x14a>
 8007320:	2b50      	cmp	r3, #80	; 0x50
 8007322:	d873      	bhi.n	800740c <HAL_TIM_ConfigClockSource+0x1bc>
 8007324:	2b40      	cmp	r3, #64	; 0x40
 8007326:	d058      	beq.n	80073da <HAL_TIM_ConfigClockSource+0x18a>
 8007328:	2b40      	cmp	r3, #64	; 0x40
 800732a:	d86f      	bhi.n	800740c <HAL_TIM_ConfigClockSource+0x1bc>
 800732c:	2b30      	cmp	r3, #48	; 0x30
 800732e:	d064      	beq.n	80073fa <HAL_TIM_ConfigClockSource+0x1aa>
 8007330:	2b30      	cmp	r3, #48	; 0x30
 8007332:	d86b      	bhi.n	800740c <HAL_TIM_ConfigClockSource+0x1bc>
 8007334:	2b20      	cmp	r3, #32
 8007336:	d060      	beq.n	80073fa <HAL_TIM_ConfigClockSource+0x1aa>
 8007338:	2b20      	cmp	r3, #32
 800733a:	d867      	bhi.n	800740c <HAL_TIM_ConfigClockSource+0x1bc>
 800733c:	2b00      	cmp	r3, #0
 800733e:	d05c      	beq.n	80073fa <HAL_TIM_ConfigClockSource+0x1aa>
 8007340:	2b10      	cmp	r3, #16
 8007342:	d05a      	beq.n	80073fa <HAL_TIM_ConfigClockSource+0x1aa>
 8007344:	e062      	b.n	800740c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007356:	f000 f9bd 	bl	80076d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007368:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68ba      	ldr	r2, [r7, #8]
 8007370:	609a      	str	r2, [r3, #8]
      break;
 8007372:	e04f      	b.n	8007414 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007384:	f000 f9a6 	bl	80076d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	689a      	ldr	r2, [r3, #8]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007396:	609a      	str	r2, [r3, #8]
      break;
 8007398:	e03c      	b.n	8007414 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073a6:	461a      	mov	r2, r3
 80073a8:	f000 f916 	bl	80075d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2150      	movs	r1, #80	; 0x50
 80073b2:	4618      	mov	r0, r3
 80073b4:	f000 f970 	bl	8007698 <TIM_ITRx_SetConfig>
      break;
 80073b8:	e02c      	b.n	8007414 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80073c6:	461a      	mov	r2, r3
 80073c8:	f000 f935 	bl	8007636 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2160      	movs	r1, #96	; 0x60
 80073d2:	4618      	mov	r0, r3
 80073d4:	f000 f960 	bl	8007698 <TIM_ITRx_SetConfig>
      break;
 80073d8:	e01c      	b.n	8007414 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073e6:	461a      	mov	r2, r3
 80073e8:	f000 f8f6 	bl	80075d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2140      	movs	r1, #64	; 0x40
 80073f2:	4618      	mov	r0, r3
 80073f4:	f000 f950 	bl	8007698 <TIM_ITRx_SetConfig>
      break;
 80073f8:	e00c      	b.n	8007414 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4619      	mov	r1, r3
 8007404:	4610      	mov	r0, r2
 8007406:	f000 f947 	bl	8007698 <TIM_ITRx_SetConfig>
      break;
 800740a:	e003      	b.n	8007414 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	73fb      	strb	r3, [r7, #15]
      break;
 8007410:	e000      	b.n	8007414 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007412:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007424:	7bfb      	ldrb	r3, [r7, #15]
}
 8007426:	4618      	mov	r0, r3
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	ffceff88 	.word	0xffceff88
 8007434:	00100040 	.word	0x00100040
 8007438:	00100030 	.word	0x00100030
 800743c:	00100020 	.word	0x00100020

08007440 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007448:	bf00      	nop
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800745c:	bf00      	nop
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007470:	bf00      	nop
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007484:	bf00      	nop
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007498:	bf00      	nop
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a40      	ldr	r2, [pc, #256]	; (80075b8 <TIM_Base_SetConfig+0x114>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d013      	beq.n	80074e4 <TIM_Base_SetConfig+0x40>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074c2:	d00f      	beq.n	80074e4 <TIM_Base_SetConfig+0x40>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a3d      	ldr	r2, [pc, #244]	; (80075bc <TIM_Base_SetConfig+0x118>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d00b      	beq.n	80074e4 <TIM_Base_SetConfig+0x40>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a3c      	ldr	r2, [pc, #240]	; (80075c0 <TIM_Base_SetConfig+0x11c>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d007      	beq.n	80074e4 <TIM_Base_SetConfig+0x40>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a3b      	ldr	r2, [pc, #236]	; (80075c4 <TIM_Base_SetConfig+0x120>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d003      	beq.n	80074e4 <TIM_Base_SetConfig+0x40>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a3a      	ldr	r2, [pc, #232]	; (80075c8 <TIM_Base_SetConfig+0x124>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d108      	bne.n	80074f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a2f      	ldr	r2, [pc, #188]	; (80075b8 <TIM_Base_SetConfig+0x114>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d01f      	beq.n	800753e <TIM_Base_SetConfig+0x9a>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007504:	d01b      	beq.n	800753e <TIM_Base_SetConfig+0x9a>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a2c      	ldr	r2, [pc, #176]	; (80075bc <TIM_Base_SetConfig+0x118>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d017      	beq.n	800753e <TIM_Base_SetConfig+0x9a>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a2b      	ldr	r2, [pc, #172]	; (80075c0 <TIM_Base_SetConfig+0x11c>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d013      	beq.n	800753e <TIM_Base_SetConfig+0x9a>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a2a      	ldr	r2, [pc, #168]	; (80075c4 <TIM_Base_SetConfig+0x120>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d00f      	beq.n	800753e <TIM_Base_SetConfig+0x9a>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a29      	ldr	r2, [pc, #164]	; (80075c8 <TIM_Base_SetConfig+0x124>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d00b      	beq.n	800753e <TIM_Base_SetConfig+0x9a>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a28      	ldr	r2, [pc, #160]	; (80075cc <TIM_Base_SetConfig+0x128>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d007      	beq.n	800753e <TIM_Base_SetConfig+0x9a>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a27      	ldr	r2, [pc, #156]	; (80075d0 <TIM_Base_SetConfig+0x12c>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d003      	beq.n	800753e <TIM_Base_SetConfig+0x9a>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a26      	ldr	r2, [pc, #152]	; (80075d4 <TIM_Base_SetConfig+0x130>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d108      	bne.n	8007550 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007544:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	4313      	orrs	r3, r2
 800754e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	695b      	ldr	r3, [r3, #20]
 800755a:	4313      	orrs	r3, r2
 800755c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	689a      	ldr	r2, [r3, #8]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a10      	ldr	r2, [pc, #64]	; (80075b8 <TIM_Base_SetConfig+0x114>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d00f      	beq.n	800759c <TIM_Base_SetConfig+0xf8>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a12      	ldr	r2, [pc, #72]	; (80075c8 <TIM_Base_SetConfig+0x124>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d00b      	beq.n	800759c <TIM_Base_SetConfig+0xf8>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a11      	ldr	r2, [pc, #68]	; (80075cc <TIM_Base_SetConfig+0x128>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d007      	beq.n	800759c <TIM_Base_SetConfig+0xf8>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a10      	ldr	r2, [pc, #64]	; (80075d0 <TIM_Base_SetConfig+0x12c>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d003      	beq.n	800759c <TIM_Base_SetConfig+0xf8>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a0f      	ldr	r2, [pc, #60]	; (80075d4 <TIM_Base_SetConfig+0x130>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d103      	bne.n	80075a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	691a      	ldr	r2, [r3, #16]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	615a      	str	r2, [r3, #20]
}
 80075aa:	bf00      	nop
 80075ac:	3714      	adds	r7, #20
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	40010000 	.word	0x40010000
 80075bc:	40000400 	.word	0x40000400
 80075c0:	40000800 	.word	0x40000800
 80075c4:	40000c00 	.word	0x40000c00
 80075c8:	40010400 	.word	0x40010400
 80075cc:	40014000 	.word	0x40014000
 80075d0:	40014400 	.word	0x40014400
 80075d4:	40014800 	.word	0x40014800

080075d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075d8:	b480      	push	{r7}
 80075da:	b087      	sub	sp, #28
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6a1b      	ldr	r3, [r3, #32]
 80075e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6a1b      	ldr	r3, [r3, #32]
 80075ee:	f023 0201 	bic.w	r2, r3, #1
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	699b      	ldr	r3, [r3, #24]
 80075fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007602:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	011b      	lsls	r3, r3, #4
 8007608:	693a      	ldr	r2, [r7, #16]
 800760a:	4313      	orrs	r3, r2
 800760c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	f023 030a 	bic.w	r3, r3, #10
 8007614:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	4313      	orrs	r3, r2
 800761c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	693a      	ldr	r2, [r7, #16]
 8007622:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	697a      	ldr	r2, [r7, #20]
 8007628:	621a      	str	r2, [r3, #32]
}
 800762a:	bf00      	nop
 800762c:	371c      	adds	r7, #28
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr

08007636 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007636:	b480      	push	{r7}
 8007638:	b087      	sub	sp, #28
 800763a:	af00      	add	r7, sp, #0
 800763c:	60f8      	str	r0, [r7, #12]
 800763e:	60b9      	str	r1, [r7, #8]
 8007640:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	f023 0210 	bic.w	r2, r3, #16
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6a1b      	ldr	r3, [r3, #32]
 8007658:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007660:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	031b      	lsls	r3, r3, #12
 8007666:	697a      	ldr	r2, [r7, #20]
 8007668:	4313      	orrs	r3, r2
 800766a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007672:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	011b      	lsls	r3, r3, #4
 8007678:	693a      	ldr	r2, [r7, #16]
 800767a:	4313      	orrs	r3, r2
 800767c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	697a      	ldr	r2, [r7, #20]
 8007682:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	693a      	ldr	r2, [r7, #16]
 8007688:	621a      	str	r2, [r3, #32]
}
 800768a:	bf00      	nop
 800768c:	371c      	adds	r7, #28
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
	...

08007698 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	4b09      	ldr	r3, [pc, #36]	; (80076d0 <TIM_ITRx_SetConfig+0x38>)
 80076ac:	4013      	ands	r3, r2
 80076ae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076b0:	683a      	ldr	r2, [r7, #0]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	f043 0307 	orr.w	r3, r3, #7
 80076ba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	609a      	str	r2, [r3, #8]
}
 80076c2:	bf00      	nop
 80076c4:	3714      	adds	r7, #20
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	ffcfff8f 	.word	0xffcfff8f

080076d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b087      	sub	sp, #28
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
 80076e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	021a      	lsls	r2, r3, #8
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	431a      	orrs	r2, r3
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	697a      	ldr	r2, [r7, #20]
 80076fe:	4313      	orrs	r3, r2
 8007700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	697a      	ldr	r2, [r7, #20]
 8007706:	609a      	str	r2, [r3, #8]
}
 8007708:	bf00      	nop
 800770a:	371c      	adds	r7, #28
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007714:	b480      	push	{r7}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007724:	2b01      	cmp	r3, #1
 8007726:	d101      	bne.n	800772c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007728:	2302      	movs	r3, #2
 800772a:	e06d      	b.n	8007808 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2202      	movs	r2, #2
 8007738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a30      	ldr	r2, [pc, #192]	; (8007814 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d004      	beq.n	8007760 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a2f      	ldr	r2, [pc, #188]	; (8007818 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d108      	bne.n	8007772 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007766:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	4313      	orrs	r3, r2
 8007770:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007778:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	4313      	orrs	r3, r2
 8007782:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a20      	ldr	r2, [pc, #128]	; (8007814 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d022      	beq.n	80077dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800779e:	d01d      	beq.n	80077dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a1d      	ldr	r2, [pc, #116]	; (800781c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d018      	beq.n	80077dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a1c      	ldr	r2, [pc, #112]	; (8007820 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d013      	beq.n	80077dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a1a      	ldr	r2, [pc, #104]	; (8007824 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d00e      	beq.n	80077dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a15      	ldr	r2, [pc, #84]	; (8007818 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d009      	beq.n	80077dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a16      	ldr	r2, [pc, #88]	; (8007828 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d004      	beq.n	80077dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a15      	ldr	r2, [pc, #84]	; (800782c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d10c      	bne.n	80077f6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	68ba      	ldr	r2, [r7, #8]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2201      	movs	r2, #1
 80077fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	3714      	adds	r7, #20
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr
 8007814:	40010000 	.word	0x40010000
 8007818:	40010400 	.word	0x40010400
 800781c:	40000400 	.word	0x40000400
 8007820:	40000800 	.word	0x40000800
 8007824:	40000c00 	.word	0x40000c00
 8007828:	40001800 	.word	0x40001800
 800782c:	40014000 	.word	0x40014000

08007830 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800784c:	bf00      	nop
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d101      	bne.n	800787e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e042      	b.n	8007904 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007884:	2b00      	cmp	r3, #0
 8007886:	d106      	bne.n	8007896 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f7f9 feeb 	bl	800166c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2224      	movs	r2, #36	; 0x24
 800789a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f022 0201 	bic.w	r2, r2, #1
 80078ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fd74 	bl	800839c <UART_SetConfig>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d101      	bne.n	80078be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e022      	b.n	8007904 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d002      	beq.n	80078cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f001 fad0 	bl	8008e6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	685a      	ldr	r2, [r3, #4]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	689a      	ldr	r2, [r3, #8]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f042 0201 	orr.w	r2, r2, #1
 80078fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f001 fb57 	bl	8008fb0 <UART_CheckIdleState>
 8007902:	4603      	mov	r3, r0
}
 8007904:	4618      	mov	r0, r3
 8007906:	3708      	adds	r7, #8
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b08a      	sub	sp, #40	; 0x28
 8007910:	af02      	add	r7, sp, #8
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	603b      	str	r3, [r7, #0]
 8007918:	4613      	mov	r3, r2
 800791a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007922:	2b20      	cmp	r3, #32
 8007924:	d17b      	bne.n	8007a1e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d002      	beq.n	8007932 <HAL_UART_Transmit+0x26>
 800792c:	88fb      	ldrh	r3, [r7, #6]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d101      	bne.n	8007936 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	e074      	b.n	8007a20 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2200      	movs	r2, #0
 800793a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2221      	movs	r2, #33	; 0x21
 8007942:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007946:	f7fa fa5d 	bl	8001e04 <HAL_GetTick>
 800794a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	88fa      	ldrh	r2, [r7, #6]
 8007950:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	88fa      	ldrh	r2, [r7, #6]
 8007958:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007964:	d108      	bne.n	8007978 <HAL_UART_Transmit+0x6c>
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d104      	bne.n	8007978 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800796e:	2300      	movs	r3, #0
 8007970:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	61bb      	str	r3, [r7, #24]
 8007976:	e003      	b.n	8007980 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800797c:	2300      	movs	r3, #0
 800797e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007980:	e030      	b.n	80079e4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	9300      	str	r3, [sp, #0]
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	2200      	movs	r2, #0
 800798a:	2180      	movs	r1, #128	; 0x80
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f001 fbb9 	bl	8009104 <UART_WaitOnFlagUntilTimeout>
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d005      	beq.n	80079a4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2220      	movs	r2, #32
 800799c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e03d      	b.n	8007a20 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d10b      	bne.n	80079c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	881b      	ldrh	r3, [r3, #0]
 80079ae:	461a      	mov	r2, r3
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	3302      	adds	r3, #2
 80079be:	61bb      	str	r3, [r7, #24]
 80079c0:	e007      	b.n	80079d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	781a      	ldrb	r2, [r3, #0]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	3301      	adds	r3, #1
 80079d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80079d8:	b29b      	uxth	r3, r3
 80079da:	3b01      	subs	r3, #1
 80079dc:	b29a      	uxth	r2, r3
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1c8      	bne.n	8007982 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	9300      	str	r3, [sp, #0]
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	2200      	movs	r2, #0
 80079f8:	2140      	movs	r1, #64	; 0x40
 80079fa:	68f8      	ldr	r0, [r7, #12]
 80079fc:	f001 fb82 	bl	8009104 <UART_WaitOnFlagUntilTimeout>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d005      	beq.n	8007a12 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2220      	movs	r2, #32
 8007a0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	e006      	b.n	8007a20 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2220      	movs	r2, #32
 8007a16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	e000      	b.n	8007a20 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007a1e:	2302      	movs	r3, #2
  }
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3720      	adds	r7, #32
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b091      	sub	sp, #68	; 0x44
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	4613      	mov	r3, r2
 8007a34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a3c:	2b20      	cmp	r3, #32
 8007a3e:	d178      	bne.n	8007b32 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d002      	beq.n	8007a4c <HAL_UART_Transmit_IT+0x24>
 8007a46:	88fb      	ldrh	r3, [r7, #6]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d101      	bne.n	8007a50 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e071      	b.n	8007b34 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	68ba      	ldr	r2, [r7, #8]
 8007a54:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	88fa      	ldrh	r2, [r7, #6]
 8007a5a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	88fa      	ldrh	r2, [r7, #6]
 8007a62:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2221      	movs	r2, #33	; 0x21
 8007a78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a84:	d12a      	bne.n	8007adc <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a8e:	d107      	bne.n	8007aa0 <HAL_UART_Transmit_IT+0x78>
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d103      	bne.n	8007aa0 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	4a29      	ldr	r2, [pc, #164]	; (8007b40 <HAL_UART_Transmit_IT+0x118>)
 8007a9c:	679a      	str	r2, [r3, #120]	; 0x78
 8007a9e:	e002      	b.n	8007aa6 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	4a28      	ldr	r2, [pc, #160]	; (8007b44 <HAL_UART_Transmit_IT+0x11c>)
 8007aa4:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	3308      	adds	r3, #8
 8007aac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab0:	e853 3f00 	ldrex	r3, [r3]
 8007ab4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007abc:	63bb      	str	r3, [r7, #56]	; 0x38
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	3308      	adds	r3, #8
 8007ac4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ac6:	637a      	str	r2, [r7, #52]	; 0x34
 8007ac8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007acc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ace:	e841 2300 	strex	r3, r2, [r1]
 8007ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1e5      	bne.n	8007aa6 <HAL_UART_Transmit_IT+0x7e>
 8007ada:	e028      	b.n	8007b2e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ae4:	d107      	bne.n	8007af6 <HAL_UART_Transmit_IT+0xce>
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	691b      	ldr	r3, [r3, #16]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d103      	bne.n	8007af6 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	4a15      	ldr	r2, [pc, #84]	; (8007b48 <HAL_UART_Transmit_IT+0x120>)
 8007af2:	679a      	str	r2, [r3, #120]	; 0x78
 8007af4:	e002      	b.n	8007afc <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	4a14      	ldr	r2, [pc, #80]	; (8007b4c <HAL_UART_Transmit_IT+0x124>)
 8007afa:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	e853 3f00 	ldrex	r3, [r3]
 8007b08:	613b      	str	r3, [r7, #16]
   return(result);
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	461a      	mov	r2, r3
 8007b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b1a:	623b      	str	r3, [r7, #32]
 8007b1c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1e:	69f9      	ldr	r1, [r7, #28]
 8007b20:	6a3a      	ldr	r2, [r7, #32]
 8007b22:	e841 2300 	strex	r3, r2, [r1]
 8007b26:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1e6      	bne.n	8007afc <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	e000      	b.n	8007b34 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007b32:	2302      	movs	r3, #2
  }
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3744      	adds	r7, #68	; 0x44
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr
 8007b40:	0800976b 	.word	0x0800976b
 8007b44:	0800968b 	.word	0x0800968b
 8007b48:	080095c9 	.word	0x080095c9
 8007b4c:	08009511 	.word	0x08009511

08007b50 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b08a      	sub	sp, #40	; 0x28
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b64:	2b20      	cmp	r3, #32
 8007b66:	d137      	bne.n	8007bd8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d002      	beq.n	8007b74 <HAL_UART_Receive_IT+0x24>
 8007b6e:	88fb      	ldrh	r3, [r7, #6]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d101      	bne.n	8007b78 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e030      	b.n	8007bda <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a18      	ldr	r2, [pc, #96]	; (8007be4 <HAL_UART_Receive_IT+0x94>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d01f      	beq.n	8007bc8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d018      	beq.n	8007bc8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	e853 3f00 	ldrex	r3, [r3]
 8007ba2:	613b      	str	r3, [r7, #16]
   return(result);
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007baa:	627b      	str	r3, [r7, #36]	; 0x24
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb4:	623b      	str	r3, [r7, #32]
 8007bb6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb8:	69f9      	ldr	r1, [r7, #28]
 8007bba:	6a3a      	ldr	r2, [r7, #32]
 8007bbc:	e841 2300 	strex	r3, r2, [r1]
 8007bc0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bc2:	69bb      	ldr	r3, [r7, #24]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d1e6      	bne.n	8007b96 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007bc8:	88fb      	ldrh	r3, [r7, #6]
 8007bca:	461a      	mov	r2, r3
 8007bcc:	68b9      	ldr	r1, [r7, #8]
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f001 fb00 	bl	80091d4 <UART_Start_Receive_IT>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	e000      	b.n	8007bda <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007bd8:	2302      	movs	r3, #2
  }
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3728      	adds	r7, #40	; 0x28
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	58000c00 	.word	0x58000c00

08007be8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b0ba      	sub	sp, #232	; 0xe8
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	69db      	ldr	r3, [r3, #28]
 8007bf6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007c0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007c12:	f640 030f 	movw	r3, #2063	; 0x80f
 8007c16:	4013      	ands	r3, r2
 8007c18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007c1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d11b      	bne.n	8007c5c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c28:	f003 0320 	and.w	r3, r3, #32
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d015      	beq.n	8007c5c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c34:	f003 0320 	and.w	r3, r3, #32
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d105      	bne.n	8007c48 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007c3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d009      	beq.n	8007c5c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f000 8377 	beq.w	8008340 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	4798      	blx	r3
      }
      return;
 8007c5a:	e371      	b.n	8008340 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007c5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f000 8123 	beq.w	8007eac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007c66:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007c6a:	4b8d      	ldr	r3, [pc, #564]	; (8007ea0 <HAL_UART_IRQHandler+0x2b8>)
 8007c6c:	4013      	ands	r3, r2
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d106      	bne.n	8007c80 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007c72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007c76:	4b8b      	ldr	r3, [pc, #556]	; (8007ea4 <HAL_UART_IRQHandler+0x2bc>)
 8007c78:	4013      	ands	r3, r2
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	f000 8116 	beq.w	8007eac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c84:	f003 0301 	and.w	r3, r3, #1
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d011      	beq.n	8007cb0 <HAL_UART_IRQHandler+0xc8>
 8007c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00b      	beq.n	8007cb0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ca6:	f043 0201 	orr.w	r2, r3, #1
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cb4:	f003 0302 	and.w	r3, r3, #2
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d011      	beq.n	8007ce0 <HAL_UART_IRQHandler+0xf8>
 8007cbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cc0:	f003 0301 	and.w	r3, r3, #1
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00b      	beq.n	8007ce0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	2202      	movs	r2, #2
 8007cce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cd6:	f043 0204 	orr.w	r2, r3, #4
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ce4:	f003 0304 	and.w	r3, r3, #4
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d011      	beq.n	8007d10 <HAL_UART_IRQHandler+0x128>
 8007cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cf0:	f003 0301 	and.w	r3, r3, #1
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00b      	beq.n	8007d10 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2204      	movs	r2, #4
 8007cfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d06:	f043 0202 	orr.w	r2, r3, #2
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d14:	f003 0308 	and.w	r3, r3, #8
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d017      	beq.n	8007d4c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d20:	f003 0320 	and.w	r3, r3, #32
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d105      	bne.n	8007d34 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007d28:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007d2c:	4b5c      	ldr	r3, [pc, #368]	; (8007ea0 <HAL_UART_IRQHandler+0x2b8>)
 8007d2e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00b      	beq.n	8007d4c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2208      	movs	r2, #8
 8007d3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d42:	f043 0208 	orr.w	r2, r3, #8
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d012      	beq.n	8007d7e <HAL_UART_IRQHandler+0x196>
 8007d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00c      	beq.n	8007d7e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d74:	f043 0220 	orr.w	r2, r3, #32
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f000 82dd 	beq.w	8008344 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d8e:	f003 0320 	and.w	r3, r3, #32
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d013      	beq.n	8007dbe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d9a:	f003 0320 	and.w	r3, r3, #32
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d105      	bne.n	8007dae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007da2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d007      	beq.n	8007dbe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d003      	beq.n	8007dbe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dd2:	2b40      	cmp	r3, #64	; 0x40
 8007dd4:	d005      	beq.n	8007de2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007dd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007dda:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d054      	beq.n	8007e8c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f001 fb18 	bl	8009418 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df2:	2b40      	cmp	r3, #64	; 0x40
 8007df4:	d146      	bne.n	8007e84 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	3308      	adds	r3, #8
 8007dfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e04:	e853 3f00 	ldrex	r3, [r3]
 8007e08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007e0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	3308      	adds	r3, #8
 8007e1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007e22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007e26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007e2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007e32:	e841 2300 	strex	r3, r2, [r1]
 8007e36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007e3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d1d9      	bne.n	8007df6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d017      	beq.n	8007e7c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e52:	4a15      	ldr	r2, [pc, #84]	; (8007ea8 <HAL_UART_IRQHandler+0x2c0>)
 8007e54:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f7fa fc33 	bl	80026c8 <HAL_DMA_Abort_IT>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d019      	beq.n	8007e9c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007e76:	4610      	mov	r0, r2
 8007e78:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e7a:	e00f      	b.n	8007e9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 fa77 	bl	8008370 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e82:	e00b      	b.n	8007e9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 fa73 	bl	8008370 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e8a:	e007      	b.n	8007e9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 fa6f 	bl	8008370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007e9a:	e253      	b.n	8008344 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e9c:	bf00      	nop
    return;
 8007e9e:	e251      	b.n	8008344 <HAL_UART_IRQHandler+0x75c>
 8007ea0:	10000001 	.word	0x10000001
 8007ea4:	04000120 	.word	0x04000120
 8007ea8:	080094e5 	.word	0x080094e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	f040 81e7 	bne.w	8008284 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eba:	f003 0310 	and.w	r3, r3, #16
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	f000 81e0 	beq.w	8008284 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ec8:	f003 0310 	and.w	r3, r3, #16
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f000 81d9 	beq.w	8008284 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2210      	movs	r2, #16
 8007ed8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee4:	2b40      	cmp	r3, #64	; 0x40
 8007ee6:	f040 8151 	bne.w	800818c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a96      	ldr	r2, [pc, #600]	; (800814c <HAL_UART_IRQHandler+0x564>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d068      	beq.n	8007fca <HAL_UART_IRQHandler+0x3e2>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a93      	ldr	r2, [pc, #588]	; (8008150 <HAL_UART_IRQHandler+0x568>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d061      	beq.n	8007fca <HAL_UART_IRQHandler+0x3e2>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a91      	ldr	r2, [pc, #580]	; (8008154 <HAL_UART_IRQHandler+0x56c>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d05a      	beq.n	8007fca <HAL_UART_IRQHandler+0x3e2>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a8e      	ldr	r2, [pc, #568]	; (8008158 <HAL_UART_IRQHandler+0x570>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d053      	beq.n	8007fca <HAL_UART_IRQHandler+0x3e2>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a8c      	ldr	r2, [pc, #560]	; (800815c <HAL_UART_IRQHandler+0x574>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d04c      	beq.n	8007fca <HAL_UART_IRQHandler+0x3e2>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a89      	ldr	r2, [pc, #548]	; (8008160 <HAL_UART_IRQHandler+0x578>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d045      	beq.n	8007fca <HAL_UART_IRQHandler+0x3e2>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a87      	ldr	r2, [pc, #540]	; (8008164 <HAL_UART_IRQHandler+0x57c>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d03e      	beq.n	8007fca <HAL_UART_IRQHandler+0x3e2>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a84      	ldr	r2, [pc, #528]	; (8008168 <HAL_UART_IRQHandler+0x580>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d037      	beq.n	8007fca <HAL_UART_IRQHandler+0x3e2>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a82      	ldr	r2, [pc, #520]	; (800816c <HAL_UART_IRQHandler+0x584>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d030      	beq.n	8007fca <HAL_UART_IRQHandler+0x3e2>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a7f      	ldr	r2, [pc, #508]	; (8008170 <HAL_UART_IRQHandler+0x588>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d029      	beq.n	8007fca <HAL_UART_IRQHandler+0x3e2>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a7d      	ldr	r2, [pc, #500]	; (8008174 <HAL_UART_IRQHandler+0x58c>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d022      	beq.n	8007fca <HAL_UART_IRQHandler+0x3e2>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a7a      	ldr	r2, [pc, #488]	; (8008178 <HAL_UART_IRQHandler+0x590>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d01b      	beq.n	8007fca <HAL_UART_IRQHandler+0x3e2>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a78      	ldr	r2, [pc, #480]	; (800817c <HAL_UART_IRQHandler+0x594>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d014      	beq.n	8007fca <HAL_UART_IRQHandler+0x3e2>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a75      	ldr	r2, [pc, #468]	; (8008180 <HAL_UART_IRQHandler+0x598>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d00d      	beq.n	8007fca <HAL_UART_IRQHandler+0x3e2>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a73      	ldr	r2, [pc, #460]	; (8008184 <HAL_UART_IRQHandler+0x59c>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d006      	beq.n	8007fca <HAL_UART_IRQHandler+0x3e2>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a70      	ldr	r2, [pc, #448]	; (8008188 <HAL_UART_IRQHandler+0x5a0>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d106      	bne.n	8007fd8 <HAL_UART_IRQHandler+0x3f0>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	e005      	b.n	8007fe4 <HAL_UART_IRQHandler+0x3fc>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007fe8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f000 81ab 	beq.w	8008348 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ff8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	f080 81a3 	bcs.w	8008348 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008008:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008012:	69db      	ldr	r3, [r3, #28]
 8008014:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008018:	f000 8087 	beq.w	800812a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008024:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008028:	e853 3f00 	ldrex	r3, [r3]
 800802c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008030:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008038:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	461a      	mov	r2, r3
 8008042:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008046:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800804a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008052:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008056:	e841 2300 	strex	r3, r2, [r1]
 800805a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800805e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1da      	bne.n	800801c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	3308      	adds	r3, #8
 800806c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008070:	e853 3f00 	ldrex	r3, [r3]
 8008074:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008076:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008078:	f023 0301 	bic.w	r3, r3, #1
 800807c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	3308      	adds	r3, #8
 8008086:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800808a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800808e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008090:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008092:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008096:	e841 2300 	strex	r3, r2, [r1]
 800809a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800809c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1e1      	bne.n	8008066 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	3308      	adds	r3, #8
 80080a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080ac:	e853 3f00 	ldrex	r3, [r3]
 80080b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80080b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	3308      	adds	r3, #8
 80080c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80080c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80080c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80080cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80080ce:	e841 2300 	strex	r3, r2, [r1]
 80080d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80080d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d1e3      	bne.n	80080a2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2220      	movs	r2, #32
 80080de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080f0:	e853 3f00 	ldrex	r3, [r3]
 80080f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80080f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080f8:	f023 0310 	bic.w	r3, r3, #16
 80080fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	461a      	mov	r2, r3
 8008106:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800810a:	65bb      	str	r3, [r7, #88]	; 0x58
 800810c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008110:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008112:	e841 2300 	strex	r3, r2, [r1]
 8008116:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800811a:	2b00      	cmp	r3, #0
 800811c:	d1e4      	bne.n	80080e8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008124:	4618      	mov	r0, r3
 8008126:	f7f9 ffb1 	bl	800208c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2202      	movs	r2, #2
 800812e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800813c:	b29b      	uxth	r3, r3
 800813e:	1ad3      	subs	r3, r2, r3
 8008140:	b29b      	uxth	r3, r3
 8008142:	4619      	mov	r1, r3
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 f91d 	bl	8008384 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800814a:	e0fd      	b.n	8008348 <HAL_UART_IRQHandler+0x760>
 800814c:	40020010 	.word	0x40020010
 8008150:	40020028 	.word	0x40020028
 8008154:	40020040 	.word	0x40020040
 8008158:	40020058 	.word	0x40020058
 800815c:	40020070 	.word	0x40020070
 8008160:	40020088 	.word	0x40020088
 8008164:	400200a0 	.word	0x400200a0
 8008168:	400200b8 	.word	0x400200b8
 800816c:	40020410 	.word	0x40020410
 8008170:	40020428 	.word	0x40020428
 8008174:	40020440 	.word	0x40020440
 8008178:	40020458 	.word	0x40020458
 800817c:	40020470 	.word	0x40020470
 8008180:	40020488 	.word	0x40020488
 8008184:	400204a0 	.word	0x400204a0
 8008188:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008198:	b29b      	uxth	r3, r3
 800819a:	1ad3      	subs	r3, r2, r3
 800819c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f000 80cf 	beq.w	800834c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80081ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f000 80ca 	beq.w	800834c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c0:	e853 3f00 	ldrex	r3, [r3]
 80081c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80081c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	461a      	mov	r2, r3
 80081d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80081da:	647b      	str	r3, [r7, #68]	; 0x44
 80081dc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80081e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081e2:	e841 2300 	strex	r3, r2, [r1]
 80081e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80081e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1e4      	bne.n	80081b8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	3308      	adds	r3, #8
 80081f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f8:	e853 3f00 	ldrex	r3, [r3]
 80081fc:	623b      	str	r3, [r7, #32]
   return(result);
 80081fe:	6a3a      	ldr	r2, [r7, #32]
 8008200:	4b55      	ldr	r3, [pc, #340]	; (8008358 <HAL_UART_IRQHandler+0x770>)
 8008202:	4013      	ands	r3, r2
 8008204:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	3308      	adds	r3, #8
 800820e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008212:	633a      	str	r2, [r7, #48]	; 0x30
 8008214:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008216:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800821a:	e841 2300 	strex	r3, r2, [r1]
 800821e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008222:	2b00      	cmp	r3, #0
 8008224:	d1e3      	bne.n	80081ee <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2220      	movs	r2, #32
 800822a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	e853 3f00 	ldrex	r3, [r3]
 8008246:	60fb      	str	r3, [r7, #12]
   return(result);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f023 0310 	bic.w	r3, r3, #16
 800824e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	461a      	mov	r2, r3
 8008258:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800825c:	61fb      	str	r3, [r7, #28]
 800825e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008260:	69b9      	ldr	r1, [r7, #24]
 8008262:	69fa      	ldr	r2, [r7, #28]
 8008264:	e841 2300 	strex	r3, r2, [r1]
 8008268:	617b      	str	r3, [r7, #20]
   return(result);
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d1e4      	bne.n	800823a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2202      	movs	r2, #2
 8008274:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008276:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800827a:	4619      	mov	r1, r3
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 f881 	bl	8008384 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008282:	e063      	b.n	800834c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008288:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00e      	beq.n	80082ae <HAL_UART_IRQHandler+0x6c6>
 8008290:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008294:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008298:	2b00      	cmp	r3, #0
 800829a:	d008      	beq.n	80082ae <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80082a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f002 f81c 	bl	800a2e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80082ac:	e051      	b.n	8008352 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80082ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d014      	beq.n	80082e4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80082ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d105      	bne.n	80082d2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80082c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d008      	beq.n	80082e4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d03a      	beq.n	8008350 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	4798      	blx	r3
    }
    return;
 80082e2:	e035      	b.n	8008350 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80082e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d009      	beq.n	8008304 <HAL_UART_IRQHandler+0x71c>
 80082f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d003      	beq.n	8008304 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f001 faa9 	bl	8009854 <UART_EndTransmit_IT>
    return;
 8008302:	e026      	b.n	8008352 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008308:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800830c:	2b00      	cmp	r3, #0
 800830e:	d009      	beq.n	8008324 <HAL_UART_IRQHandler+0x73c>
 8008310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008314:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008318:	2b00      	cmp	r3, #0
 800831a:	d003      	beq.n	8008324 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f001 fff5 	bl	800a30c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008322:	e016      	b.n	8008352 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008328:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800832c:	2b00      	cmp	r3, #0
 800832e:	d010      	beq.n	8008352 <HAL_UART_IRQHandler+0x76a>
 8008330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008334:	2b00      	cmp	r3, #0
 8008336:	da0c      	bge.n	8008352 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f001 ffdd 	bl	800a2f8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800833e:	e008      	b.n	8008352 <HAL_UART_IRQHandler+0x76a>
      return;
 8008340:	bf00      	nop
 8008342:	e006      	b.n	8008352 <HAL_UART_IRQHandler+0x76a>
    return;
 8008344:	bf00      	nop
 8008346:	e004      	b.n	8008352 <HAL_UART_IRQHandler+0x76a>
      return;
 8008348:	bf00      	nop
 800834a:	e002      	b.n	8008352 <HAL_UART_IRQHandler+0x76a>
      return;
 800834c:	bf00      	nop
 800834e:	e000      	b.n	8008352 <HAL_UART_IRQHandler+0x76a>
    return;
 8008350:	bf00      	nop
  }
}
 8008352:	37e8      	adds	r7, #232	; 0xe8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	effffffe 	.word	0xeffffffe

0800835c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008364:	bf00      	nop
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008378:	bf00      	nop
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	460b      	mov	r3, r1
 800838e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008390:	bf00      	nop
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800839c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083a0:	b092      	sub	sp, #72	; 0x48
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80083a6:	2300      	movs	r3, #0
 80083a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	689a      	ldr	r2, [r3, #8]
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	431a      	orrs	r2, r3
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	695b      	ldr	r3, [r3, #20]
 80083ba:	431a      	orrs	r2, r3
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	69db      	ldr	r3, [r3, #28]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	4bbe      	ldr	r3, [pc, #760]	; (80086c4 <UART_SetConfig+0x328>)
 80083cc:	4013      	ands	r3, r2
 80083ce:	697a      	ldr	r2, [r7, #20]
 80083d0:	6812      	ldr	r2, [r2, #0]
 80083d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80083d4:	430b      	orrs	r3, r1
 80083d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	68da      	ldr	r2, [r3, #12]
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	430a      	orrs	r2, r1
 80083ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	699b      	ldr	r3, [r3, #24]
 80083f2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4ab3      	ldr	r2, [pc, #716]	; (80086c8 <UART_SetConfig+0x32c>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d004      	beq.n	8008408 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	6a1b      	ldr	r3, [r3, #32]
 8008402:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008404:	4313      	orrs	r3, r2
 8008406:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	689a      	ldr	r2, [r3, #8]
 800840e:	4baf      	ldr	r3, [pc, #700]	; (80086cc <UART_SetConfig+0x330>)
 8008410:	4013      	ands	r3, r2
 8008412:	697a      	ldr	r2, [r7, #20]
 8008414:	6812      	ldr	r2, [r2, #0]
 8008416:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008418:	430b      	orrs	r3, r1
 800841a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008422:	f023 010f 	bic.w	r1, r3, #15
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	430a      	orrs	r2, r1
 8008430:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4aa6      	ldr	r2, [pc, #664]	; (80086d0 <UART_SetConfig+0x334>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d177      	bne.n	800852c <UART_SetConfig+0x190>
 800843c:	4ba5      	ldr	r3, [pc, #660]	; (80086d4 <UART_SetConfig+0x338>)
 800843e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008440:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008444:	2b28      	cmp	r3, #40	; 0x28
 8008446:	d86d      	bhi.n	8008524 <UART_SetConfig+0x188>
 8008448:	a201      	add	r2, pc, #4	; (adr r2, 8008450 <UART_SetConfig+0xb4>)
 800844a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800844e:	bf00      	nop
 8008450:	080084f5 	.word	0x080084f5
 8008454:	08008525 	.word	0x08008525
 8008458:	08008525 	.word	0x08008525
 800845c:	08008525 	.word	0x08008525
 8008460:	08008525 	.word	0x08008525
 8008464:	08008525 	.word	0x08008525
 8008468:	08008525 	.word	0x08008525
 800846c:	08008525 	.word	0x08008525
 8008470:	080084fd 	.word	0x080084fd
 8008474:	08008525 	.word	0x08008525
 8008478:	08008525 	.word	0x08008525
 800847c:	08008525 	.word	0x08008525
 8008480:	08008525 	.word	0x08008525
 8008484:	08008525 	.word	0x08008525
 8008488:	08008525 	.word	0x08008525
 800848c:	08008525 	.word	0x08008525
 8008490:	08008505 	.word	0x08008505
 8008494:	08008525 	.word	0x08008525
 8008498:	08008525 	.word	0x08008525
 800849c:	08008525 	.word	0x08008525
 80084a0:	08008525 	.word	0x08008525
 80084a4:	08008525 	.word	0x08008525
 80084a8:	08008525 	.word	0x08008525
 80084ac:	08008525 	.word	0x08008525
 80084b0:	0800850d 	.word	0x0800850d
 80084b4:	08008525 	.word	0x08008525
 80084b8:	08008525 	.word	0x08008525
 80084bc:	08008525 	.word	0x08008525
 80084c0:	08008525 	.word	0x08008525
 80084c4:	08008525 	.word	0x08008525
 80084c8:	08008525 	.word	0x08008525
 80084cc:	08008525 	.word	0x08008525
 80084d0:	08008515 	.word	0x08008515
 80084d4:	08008525 	.word	0x08008525
 80084d8:	08008525 	.word	0x08008525
 80084dc:	08008525 	.word	0x08008525
 80084e0:	08008525 	.word	0x08008525
 80084e4:	08008525 	.word	0x08008525
 80084e8:	08008525 	.word	0x08008525
 80084ec:	08008525 	.word	0x08008525
 80084f0:	0800851d 	.word	0x0800851d
 80084f4:	2301      	movs	r3, #1
 80084f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084fa:	e222      	b.n	8008942 <UART_SetConfig+0x5a6>
 80084fc:	2304      	movs	r3, #4
 80084fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008502:	e21e      	b.n	8008942 <UART_SetConfig+0x5a6>
 8008504:	2308      	movs	r3, #8
 8008506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800850a:	e21a      	b.n	8008942 <UART_SetConfig+0x5a6>
 800850c:	2310      	movs	r3, #16
 800850e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008512:	e216      	b.n	8008942 <UART_SetConfig+0x5a6>
 8008514:	2320      	movs	r3, #32
 8008516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800851a:	e212      	b.n	8008942 <UART_SetConfig+0x5a6>
 800851c:	2340      	movs	r3, #64	; 0x40
 800851e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008522:	e20e      	b.n	8008942 <UART_SetConfig+0x5a6>
 8008524:	2380      	movs	r3, #128	; 0x80
 8008526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800852a:	e20a      	b.n	8008942 <UART_SetConfig+0x5a6>
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a69      	ldr	r2, [pc, #420]	; (80086d8 <UART_SetConfig+0x33c>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d130      	bne.n	8008598 <UART_SetConfig+0x1fc>
 8008536:	4b67      	ldr	r3, [pc, #412]	; (80086d4 <UART_SetConfig+0x338>)
 8008538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800853a:	f003 0307 	and.w	r3, r3, #7
 800853e:	2b05      	cmp	r3, #5
 8008540:	d826      	bhi.n	8008590 <UART_SetConfig+0x1f4>
 8008542:	a201      	add	r2, pc, #4	; (adr r2, 8008548 <UART_SetConfig+0x1ac>)
 8008544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008548:	08008561 	.word	0x08008561
 800854c:	08008569 	.word	0x08008569
 8008550:	08008571 	.word	0x08008571
 8008554:	08008579 	.word	0x08008579
 8008558:	08008581 	.word	0x08008581
 800855c:	08008589 	.word	0x08008589
 8008560:	2300      	movs	r3, #0
 8008562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008566:	e1ec      	b.n	8008942 <UART_SetConfig+0x5a6>
 8008568:	2304      	movs	r3, #4
 800856a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800856e:	e1e8      	b.n	8008942 <UART_SetConfig+0x5a6>
 8008570:	2308      	movs	r3, #8
 8008572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008576:	e1e4      	b.n	8008942 <UART_SetConfig+0x5a6>
 8008578:	2310      	movs	r3, #16
 800857a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800857e:	e1e0      	b.n	8008942 <UART_SetConfig+0x5a6>
 8008580:	2320      	movs	r3, #32
 8008582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008586:	e1dc      	b.n	8008942 <UART_SetConfig+0x5a6>
 8008588:	2340      	movs	r3, #64	; 0x40
 800858a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800858e:	e1d8      	b.n	8008942 <UART_SetConfig+0x5a6>
 8008590:	2380      	movs	r3, #128	; 0x80
 8008592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008596:	e1d4      	b.n	8008942 <UART_SetConfig+0x5a6>
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a4f      	ldr	r2, [pc, #316]	; (80086dc <UART_SetConfig+0x340>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d130      	bne.n	8008604 <UART_SetConfig+0x268>
 80085a2:	4b4c      	ldr	r3, [pc, #304]	; (80086d4 <UART_SetConfig+0x338>)
 80085a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085a6:	f003 0307 	and.w	r3, r3, #7
 80085aa:	2b05      	cmp	r3, #5
 80085ac:	d826      	bhi.n	80085fc <UART_SetConfig+0x260>
 80085ae:	a201      	add	r2, pc, #4	; (adr r2, 80085b4 <UART_SetConfig+0x218>)
 80085b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b4:	080085cd 	.word	0x080085cd
 80085b8:	080085d5 	.word	0x080085d5
 80085bc:	080085dd 	.word	0x080085dd
 80085c0:	080085e5 	.word	0x080085e5
 80085c4:	080085ed 	.word	0x080085ed
 80085c8:	080085f5 	.word	0x080085f5
 80085cc:	2300      	movs	r3, #0
 80085ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085d2:	e1b6      	b.n	8008942 <UART_SetConfig+0x5a6>
 80085d4:	2304      	movs	r3, #4
 80085d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085da:	e1b2      	b.n	8008942 <UART_SetConfig+0x5a6>
 80085dc:	2308      	movs	r3, #8
 80085de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085e2:	e1ae      	b.n	8008942 <UART_SetConfig+0x5a6>
 80085e4:	2310      	movs	r3, #16
 80085e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ea:	e1aa      	b.n	8008942 <UART_SetConfig+0x5a6>
 80085ec:	2320      	movs	r3, #32
 80085ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085f2:	e1a6      	b.n	8008942 <UART_SetConfig+0x5a6>
 80085f4:	2340      	movs	r3, #64	; 0x40
 80085f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085fa:	e1a2      	b.n	8008942 <UART_SetConfig+0x5a6>
 80085fc:	2380      	movs	r3, #128	; 0x80
 80085fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008602:	e19e      	b.n	8008942 <UART_SetConfig+0x5a6>
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a35      	ldr	r2, [pc, #212]	; (80086e0 <UART_SetConfig+0x344>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d130      	bne.n	8008670 <UART_SetConfig+0x2d4>
 800860e:	4b31      	ldr	r3, [pc, #196]	; (80086d4 <UART_SetConfig+0x338>)
 8008610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008612:	f003 0307 	and.w	r3, r3, #7
 8008616:	2b05      	cmp	r3, #5
 8008618:	d826      	bhi.n	8008668 <UART_SetConfig+0x2cc>
 800861a:	a201      	add	r2, pc, #4	; (adr r2, 8008620 <UART_SetConfig+0x284>)
 800861c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008620:	08008639 	.word	0x08008639
 8008624:	08008641 	.word	0x08008641
 8008628:	08008649 	.word	0x08008649
 800862c:	08008651 	.word	0x08008651
 8008630:	08008659 	.word	0x08008659
 8008634:	08008661 	.word	0x08008661
 8008638:	2300      	movs	r3, #0
 800863a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800863e:	e180      	b.n	8008942 <UART_SetConfig+0x5a6>
 8008640:	2304      	movs	r3, #4
 8008642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008646:	e17c      	b.n	8008942 <UART_SetConfig+0x5a6>
 8008648:	2308      	movs	r3, #8
 800864a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800864e:	e178      	b.n	8008942 <UART_SetConfig+0x5a6>
 8008650:	2310      	movs	r3, #16
 8008652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008656:	e174      	b.n	8008942 <UART_SetConfig+0x5a6>
 8008658:	2320      	movs	r3, #32
 800865a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800865e:	e170      	b.n	8008942 <UART_SetConfig+0x5a6>
 8008660:	2340      	movs	r3, #64	; 0x40
 8008662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008666:	e16c      	b.n	8008942 <UART_SetConfig+0x5a6>
 8008668:	2380      	movs	r3, #128	; 0x80
 800866a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800866e:	e168      	b.n	8008942 <UART_SetConfig+0x5a6>
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a1b      	ldr	r2, [pc, #108]	; (80086e4 <UART_SetConfig+0x348>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d142      	bne.n	8008700 <UART_SetConfig+0x364>
 800867a:	4b16      	ldr	r3, [pc, #88]	; (80086d4 <UART_SetConfig+0x338>)
 800867c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800867e:	f003 0307 	and.w	r3, r3, #7
 8008682:	2b05      	cmp	r3, #5
 8008684:	d838      	bhi.n	80086f8 <UART_SetConfig+0x35c>
 8008686:	a201      	add	r2, pc, #4	; (adr r2, 800868c <UART_SetConfig+0x2f0>)
 8008688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800868c:	080086a5 	.word	0x080086a5
 8008690:	080086ad 	.word	0x080086ad
 8008694:	080086b5 	.word	0x080086b5
 8008698:	080086bd 	.word	0x080086bd
 800869c:	080086e9 	.word	0x080086e9
 80086a0:	080086f1 	.word	0x080086f1
 80086a4:	2300      	movs	r3, #0
 80086a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086aa:	e14a      	b.n	8008942 <UART_SetConfig+0x5a6>
 80086ac:	2304      	movs	r3, #4
 80086ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086b2:	e146      	b.n	8008942 <UART_SetConfig+0x5a6>
 80086b4:	2308      	movs	r3, #8
 80086b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ba:	e142      	b.n	8008942 <UART_SetConfig+0x5a6>
 80086bc:	2310      	movs	r3, #16
 80086be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086c2:	e13e      	b.n	8008942 <UART_SetConfig+0x5a6>
 80086c4:	cfff69f3 	.word	0xcfff69f3
 80086c8:	58000c00 	.word	0x58000c00
 80086cc:	11fff4ff 	.word	0x11fff4ff
 80086d0:	40011000 	.word	0x40011000
 80086d4:	58024400 	.word	0x58024400
 80086d8:	40004400 	.word	0x40004400
 80086dc:	40004800 	.word	0x40004800
 80086e0:	40004c00 	.word	0x40004c00
 80086e4:	40005000 	.word	0x40005000
 80086e8:	2320      	movs	r3, #32
 80086ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ee:	e128      	b.n	8008942 <UART_SetConfig+0x5a6>
 80086f0:	2340      	movs	r3, #64	; 0x40
 80086f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086f6:	e124      	b.n	8008942 <UART_SetConfig+0x5a6>
 80086f8:	2380      	movs	r3, #128	; 0x80
 80086fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086fe:	e120      	b.n	8008942 <UART_SetConfig+0x5a6>
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4acb      	ldr	r2, [pc, #812]	; (8008a34 <UART_SetConfig+0x698>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d176      	bne.n	80087f8 <UART_SetConfig+0x45c>
 800870a:	4bcb      	ldr	r3, [pc, #812]	; (8008a38 <UART_SetConfig+0x69c>)
 800870c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800870e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008712:	2b28      	cmp	r3, #40	; 0x28
 8008714:	d86c      	bhi.n	80087f0 <UART_SetConfig+0x454>
 8008716:	a201      	add	r2, pc, #4	; (adr r2, 800871c <UART_SetConfig+0x380>)
 8008718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800871c:	080087c1 	.word	0x080087c1
 8008720:	080087f1 	.word	0x080087f1
 8008724:	080087f1 	.word	0x080087f1
 8008728:	080087f1 	.word	0x080087f1
 800872c:	080087f1 	.word	0x080087f1
 8008730:	080087f1 	.word	0x080087f1
 8008734:	080087f1 	.word	0x080087f1
 8008738:	080087f1 	.word	0x080087f1
 800873c:	080087c9 	.word	0x080087c9
 8008740:	080087f1 	.word	0x080087f1
 8008744:	080087f1 	.word	0x080087f1
 8008748:	080087f1 	.word	0x080087f1
 800874c:	080087f1 	.word	0x080087f1
 8008750:	080087f1 	.word	0x080087f1
 8008754:	080087f1 	.word	0x080087f1
 8008758:	080087f1 	.word	0x080087f1
 800875c:	080087d1 	.word	0x080087d1
 8008760:	080087f1 	.word	0x080087f1
 8008764:	080087f1 	.word	0x080087f1
 8008768:	080087f1 	.word	0x080087f1
 800876c:	080087f1 	.word	0x080087f1
 8008770:	080087f1 	.word	0x080087f1
 8008774:	080087f1 	.word	0x080087f1
 8008778:	080087f1 	.word	0x080087f1
 800877c:	080087d9 	.word	0x080087d9
 8008780:	080087f1 	.word	0x080087f1
 8008784:	080087f1 	.word	0x080087f1
 8008788:	080087f1 	.word	0x080087f1
 800878c:	080087f1 	.word	0x080087f1
 8008790:	080087f1 	.word	0x080087f1
 8008794:	080087f1 	.word	0x080087f1
 8008798:	080087f1 	.word	0x080087f1
 800879c:	080087e1 	.word	0x080087e1
 80087a0:	080087f1 	.word	0x080087f1
 80087a4:	080087f1 	.word	0x080087f1
 80087a8:	080087f1 	.word	0x080087f1
 80087ac:	080087f1 	.word	0x080087f1
 80087b0:	080087f1 	.word	0x080087f1
 80087b4:	080087f1 	.word	0x080087f1
 80087b8:	080087f1 	.word	0x080087f1
 80087bc:	080087e9 	.word	0x080087e9
 80087c0:	2301      	movs	r3, #1
 80087c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087c6:	e0bc      	b.n	8008942 <UART_SetConfig+0x5a6>
 80087c8:	2304      	movs	r3, #4
 80087ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ce:	e0b8      	b.n	8008942 <UART_SetConfig+0x5a6>
 80087d0:	2308      	movs	r3, #8
 80087d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087d6:	e0b4      	b.n	8008942 <UART_SetConfig+0x5a6>
 80087d8:	2310      	movs	r3, #16
 80087da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087de:	e0b0      	b.n	8008942 <UART_SetConfig+0x5a6>
 80087e0:	2320      	movs	r3, #32
 80087e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087e6:	e0ac      	b.n	8008942 <UART_SetConfig+0x5a6>
 80087e8:	2340      	movs	r3, #64	; 0x40
 80087ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ee:	e0a8      	b.n	8008942 <UART_SetConfig+0x5a6>
 80087f0:	2380      	movs	r3, #128	; 0x80
 80087f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087f6:	e0a4      	b.n	8008942 <UART_SetConfig+0x5a6>
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a8f      	ldr	r2, [pc, #572]	; (8008a3c <UART_SetConfig+0x6a0>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d130      	bne.n	8008864 <UART_SetConfig+0x4c8>
 8008802:	4b8d      	ldr	r3, [pc, #564]	; (8008a38 <UART_SetConfig+0x69c>)
 8008804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008806:	f003 0307 	and.w	r3, r3, #7
 800880a:	2b05      	cmp	r3, #5
 800880c:	d826      	bhi.n	800885c <UART_SetConfig+0x4c0>
 800880e:	a201      	add	r2, pc, #4	; (adr r2, 8008814 <UART_SetConfig+0x478>)
 8008810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008814:	0800882d 	.word	0x0800882d
 8008818:	08008835 	.word	0x08008835
 800881c:	0800883d 	.word	0x0800883d
 8008820:	08008845 	.word	0x08008845
 8008824:	0800884d 	.word	0x0800884d
 8008828:	08008855 	.word	0x08008855
 800882c:	2300      	movs	r3, #0
 800882e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008832:	e086      	b.n	8008942 <UART_SetConfig+0x5a6>
 8008834:	2304      	movs	r3, #4
 8008836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800883a:	e082      	b.n	8008942 <UART_SetConfig+0x5a6>
 800883c:	2308      	movs	r3, #8
 800883e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008842:	e07e      	b.n	8008942 <UART_SetConfig+0x5a6>
 8008844:	2310      	movs	r3, #16
 8008846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800884a:	e07a      	b.n	8008942 <UART_SetConfig+0x5a6>
 800884c:	2320      	movs	r3, #32
 800884e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008852:	e076      	b.n	8008942 <UART_SetConfig+0x5a6>
 8008854:	2340      	movs	r3, #64	; 0x40
 8008856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800885a:	e072      	b.n	8008942 <UART_SetConfig+0x5a6>
 800885c:	2380      	movs	r3, #128	; 0x80
 800885e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008862:	e06e      	b.n	8008942 <UART_SetConfig+0x5a6>
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a75      	ldr	r2, [pc, #468]	; (8008a40 <UART_SetConfig+0x6a4>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d130      	bne.n	80088d0 <UART_SetConfig+0x534>
 800886e:	4b72      	ldr	r3, [pc, #456]	; (8008a38 <UART_SetConfig+0x69c>)
 8008870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008872:	f003 0307 	and.w	r3, r3, #7
 8008876:	2b05      	cmp	r3, #5
 8008878:	d826      	bhi.n	80088c8 <UART_SetConfig+0x52c>
 800887a:	a201      	add	r2, pc, #4	; (adr r2, 8008880 <UART_SetConfig+0x4e4>)
 800887c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008880:	08008899 	.word	0x08008899
 8008884:	080088a1 	.word	0x080088a1
 8008888:	080088a9 	.word	0x080088a9
 800888c:	080088b1 	.word	0x080088b1
 8008890:	080088b9 	.word	0x080088b9
 8008894:	080088c1 	.word	0x080088c1
 8008898:	2300      	movs	r3, #0
 800889a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800889e:	e050      	b.n	8008942 <UART_SetConfig+0x5a6>
 80088a0:	2304      	movs	r3, #4
 80088a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088a6:	e04c      	b.n	8008942 <UART_SetConfig+0x5a6>
 80088a8:	2308      	movs	r3, #8
 80088aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ae:	e048      	b.n	8008942 <UART_SetConfig+0x5a6>
 80088b0:	2310      	movs	r3, #16
 80088b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088b6:	e044      	b.n	8008942 <UART_SetConfig+0x5a6>
 80088b8:	2320      	movs	r3, #32
 80088ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088be:	e040      	b.n	8008942 <UART_SetConfig+0x5a6>
 80088c0:	2340      	movs	r3, #64	; 0x40
 80088c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088c6:	e03c      	b.n	8008942 <UART_SetConfig+0x5a6>
 80088c8:	2380      	movs	r3, #128	; 0x80
 80088ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ce:	e038      	b.n	8008942 <UART_SetConfig+0x5a6>
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a5b      	ldr	r2, [pc, #364]	; (8008a44 <UART_SetConfig+0x6a8>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d130      	bne.n	800893c <UART_SetConfig+0x5a0>
 80088da:	4b57      	ldr	r3, [pc, #348]	; (8008a38 <UART_SetConfig+0x69c>)
 80088dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088de:	f003 0307 	and.w	r3, r3, #7
 80088e2:	2b05      	cmp	r3, #5
 80088e4:	d826      	bhi.n	8008934 <UART_SetConfig+0x598>
 80088e6:	a201      	add	r2, pc, #4	; (adr r2, 80088ec <UART_SetConfig+0x550>)
 80088e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ec:	08008905 	.word	0x08008905
 80088f0:	0800890d 	.word	0x0800890d
 80088f4:	08008915 	.word	0x08008915
 80088f8:	0800891d 	.word	0x0800891d
 80088fc:	08008925 	.word	0x08008925
 8008900:	0800892d 	.word	0x0800892d
 8008904:	2302      	movs	r3, #2
 8008906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800890a:	e01a      	b.n	8008942 <UART_SetConfig+0x5a6>
 800890c:	2304      	movs	r3, #4
 800890e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008912:	e016      	b.n	8008942 <UART_SetConfig+0x5a6>
 8008914:	2308      	movs	r3, #8
 8008916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800891a:	e012      	b.n	8008942 <UART_SetConfig+0x5a6>
 800891c:	2310      	movs	r3, #16
 800891e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008922:	e00e      	b.n	8008942 <UART_SetConfig+0x5a6>
 8008924:	2320      	movs	r3, #32
 8008926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800892a:	e00a      	b.n	8008942 <UART_SetConfig+0x5a6>
 800892c:	2340      	movs	r3, #64	; 0x40
 800892e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008932:	e006      	b.n	8008942 <UART_SetConfig+0x5a6>
 8008934:	2380      	movs	r3, #128	; 0x80
 8008936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800893a:	e002      	b.n	8008942 <UART_SetConfig+0x5a6>
 800893c:	2380      	movs	r3, #128	; 0x80
 800893e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a3f      	ldr	r2, [pc, #252]	; (8008a44 <UART_SetConfig+0x6a8>)
 8008948:	4293      	cmp	r3, r2
 800894a:	f040 80f8 	bne.w	8008b3e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800894e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008952:	2b20      	cmp	r3, #32
 8008954:	dc46      	bgt.n	80089e4 <UART_SetConfig+0x648>
 8008956:	2b02      	cmp	r3, #2
 8008958:	f2c0 8082 	blt.w	8008a60 <UART_SetConfig+0x6c4>
 800895c:	3b02      	subs	r3, #2
 800895e:	2b1e      	cmp	r3, #30
 8008960:	d87e      	bhi.n	8008a60 <UART_SetConfig+0x6c4>
 8008962:	a201      	add	r2, pc, #4	; (adr r2, 8008968 <UART_SetConfig+0x5cc>)
 8008964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008968:	080089eb 	.word	0x080089eb
 800896c:	08008a61 	.word	0x08008a61
 8008970:	080089f3 	.word	0x080089f3
 8008974:	08008a61 	.word	0x08008a61
 8008978:	08008a61 	.word	0x08008a61
 800897c:	08008a61 	.word	0x08008a61
 8008980:	08008a03 	.word	0x08008a03
 8008984:	08008a61 	.word	0x08008a61
 8008988:	08008a61 	.word	0x08008a61
 800898c:	08008a61 	.word	0x08008a61
 8008990:	08008a61 	.word	0x08008a61
 8008994:	08008a61 	.word	0x08008a61
 8008998:	08008a61 	.word	0x08008a61
 800899c:	08008a61 	.word	0x08008a61
 80089a0:	08008a13 	.word	0x08008a13
 80089a4:	08008a61 	.word	0x08008a61
 80089a8:	08008a61 	.word	0x08008a61
 80089ac:	08008a61 	.word	0x08008a61
 80089b0:	08008a61 	.word	0x08008a61
 80089b4:	08008a61 	.word	0x08008a61
 80089b8:	08008a61 	.word	0x08008a61
 80089bc:	08008a61 	.word	0x08008a61
 80089c0:	08008a61 	.word	0x08008a61
 80089c4:	08008a61 	.word	0x08008a61
 80089c8:	08008a61 	.word	0x08008a61
 80089cc:	08008a61 	.word	0x08008a61
 80089d0:	08008a61 	.word	0x08008a61
 80089d4:	08008a61 	.word	0x08008a61
 80089d8:	08008a61 	.word	0x08008a61
 80089dc:	08008a61 	.word	0x08008a61
 80089e0:	08008a53 	.word	0x08008a53
 80089e4:	2b40      	cmp	r3, #64	; 0x40
 80089e6:	d037      	beq.n	8008a58 <UART_SetConfig+0x6bc>
 80089e8:	e03a      	b.n	8008a60 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80089ea:	f7fd fdff 	bl	80065ec <HAL_RCCEx_GetD3PCLK1Freq>
 80089ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80089f0:	e03c      	b.n	8008a6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7fd fe0e 	bl	8006618 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80089fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a00:	e034      	b.n	8008a6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a02:	f107 0318 	add.w	r3, r7, #24
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7fd ff5a 	bl	80068c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a10:	e02c      	b.n	8008a6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a12:	4b09      	ldr	r3, [pc, #36]	; (8008a38 <UART_SetConfig+0x69c>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f003 0320 	and.w	r3, r3, #32
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d016      	beq.n	8008a4c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a1e:	4b06      	ldr	r3, [pc, #24]	; (8008a38 <UART_SetConfig+0x69c>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	08db      	lsrs	r3, r3, #3
 8008a24:	f003 0303 	and.w	r3, r3, #3
 8008a28:	4a07      	ldr	r2, [pc, #28]	; (8008a48 <UART_SetConfig+0x6ac>)
 8008a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008a30:	e01c      	b.n	8008a6c <UART_SetConfig+0x6d0>
 8008a32:	bf00      	nop
 8008a34:	40011400 	.word	0x40011400
 8008a38:	58024400 	.word	0x58024400
 8008a3c:	40007800 	.word	0x40007800
 8008a40:	40007c00 	.word	0x40007c00
 8008a44:	58000c00 	.word	0x58000c00
 8008a48:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008a4c:	4b9d      	ldr	r3, [pc, #628]	; (8008cc4 <UART_SetConfig+0x928>)
 8008a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a50:	e00c      	b.n	8008a6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008a52:	4b9d      	ldr	r3, [pc, #628]	; (8008cc8 <UART_SetConfig+0x92c>)
 8008a54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a56:	e009      	b.n	8008a6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a5e:	e005      	b.n	8008a6c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008a60:	2300      	movs	r3, #0
 8008a62:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008a6a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	f000 81de 	beq.w	8008e30 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a78:	4a94      	ldr	r2, [pc, #592]	; (8008ccc <UART_SetConfig+0x930>)
 8008a7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a7e:	461a      	mov	r2, r3
 8008a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a82:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a86:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	685a      	ldr	r2, [r3, #4]
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	005b      	lsls	r3, r3, #1
 8008a90:	4413      	add	r3, r2
 8008a92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d305      	bcc.n	8008aa4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d903      	bls.n	8008aac <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008aaa:	e1c1      	b.n	8008e30 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aae:	2200      	movs	r2, #0
 8008ab0:	60bb      	str	r3, [r7, #8]
 8008ab2:	60fa      	str	r2, [r7, #12]
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab8:	4a84      	ldr	r2, [pc, #528]	; (8008ccc <UART_SetConfig+0x930>)
 8008aba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	603b      	str	r3, [r7, #0]
 8008ac4:	607a      	str	r2, [r7, #4]
 8008ac6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008aca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008ace:	f7f7 fe1b 	bl	8000708 <__aeabi_uldivmod>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	4610      	mov	r0, r2
 8008ad8:	4619      	mov	r1, r3
 8008ada:	f04f 0200 	mov.w	r2, #0
 8008ade:	f04f 0300 	mov.w	r3, #0
 8008ae2:	020b      	lsls	r3, r1, #8
 8008ae4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008ae8:	0202      	lsls	r2, r0, #8
 8008aea:	6979      	ldr	r1, [r7, #20]
 8008aec:	6849      	ldr	r1, [r1, #4]
 8008aee:	0849      	lsrs	r1, r1, #1
 8008af0:	2000      	movs	r0, #0
 8008af2:	460c      	mov	r4, r1
 8008af4:	4605      	mov	r5, r0
 8008af6:	eb12 0804 	adds.w	r8, r2, r4
 8008afa:	eb43 0905 	adc.w	r9, r3, r5
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	469a      	mov	sl, r3
 8008b06:	4693      	mov	fp, r2
 8008b08:	4652      	mov	r2, sl
 8008b0a:	465b      	mov	r3, fp
 8008b0c:	4640      	mov	r0, r8
 8008b0e:	4649      	mov	r1, r9
 8008b10:	f7f7 fdfa 	bl	8000708 <__aeabi_uldivmod>
 8008b14:	4602      	mov	r2, r0
 8008b16:	460b      	mov	r3, r1
 8008b18:	4613      	mov	r3, r2
 8008b1a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b22:	d308      	bcc.n	8008b36 <UART_SetConfig+0x79a>
 8008b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b2a:	d204      	bcs.n	8008b36 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b32:	60da      	str	r2, [r3, #12]
 8008b34:	e17c      	b.n	8008e30 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008b3c:	e178      	b.n	8008e30 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	69db      	ldr	r3, [r3, #28]
 8008b42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b46:	f040 80c5 	bne.w	8008cd4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008b4a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008b4e:	2b20      	cmp	r3, #32
 8008b50:	dc48      	bgt.n	8008be4 <UART_SetConfig+0x848>
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	db7b      	blt.n	8008c4e <UART_SetConfig+0x8b2>
 8008b56:	2b20      	cmp	r3, #32
 8008b58:	d879      	bhi.n	8008c4e <UART_SetConfig+0x8b2>
 8008b5a:	a201      	add	r2, pc, #4	; (adr r2, 8008b60 <UART_SetConfig+0x7c4>)
 8008b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b60:	08008beb 	.word	0x08008beb
 8008b64:	08008bf3 	.word	0x08008bf3
 8008b68:	08008c4f 	.word	0x08008c4f
 8008b6c:	08008c4f 	.word	0x08008c4f
 8008b70:	08008bfb 	.word	0x08008bfb
 8008b74:	08008c4f 	.word	0x08008c4f
 8008b78:	08008c4f 	.word	0x08008c4f
 8008b7c:	08008c4f 	.word	0x08008c4f
 8008b80:	08008c0b 	.word	0x08008c0b
 8008b84:	08008c4f 	.word	0x08008c4f
 8008b88:	08008c4f 	.word	0x08008c4f
 8008b8c:	08008c4f 	.word	0x08008c4f
 8008b90:	08008c4f 	.word	0x08008c4f
 8008b94:	08008c4f 	.word	0x08008c4f
 8008b98:	08008c4f 	.word	0x08008c4f
 8008b9c:	08008c4f 	.word	0x08008c4f
 8008ba0:	08008c1b 	.word	0x08008c1b
 8008ba4:	08008c4f 	.word	0x08008c4f
 8008ba8:	08008c4f 	.word	0x08008c4f
 8008bac:	08008c4f 	.word	0x08008c4f
 8008bb0:	08008c4f 	.word	0x08008c4f
 8008bb4:	08008c4f 	.word	0x08008c4f
 8008bb8:	08008c4f 	.word	0x08008c4f
 8008bbc:	08008c4f 	.word	0x08008c4f
 8008bc0:	08008c4f 	.word	0x08008c4f
 8008bc4:	08008c4f 	.word	0x08008c4f
 8008bc8:	08008c4f 	.word	0x08008c4f
 8008bcc:	08008c4f 	.word	0x08008c4f
 8008bd0:	08008c4f 	.word	0x08008c4f
 8008bd4:	08008c4f 	.word	0x08008c4f
 8008bd8:	08008c4f 	.word	0x08008c4f
 8008bdc:	08008c4f 	.word	0x08008c4f
 8008be0:	08008c41 	.word	0x08008c41
 8008be4:	2b40      	cmp	r3, #64	; 0x40
 8008be6:	d02e      	beq.n	8008c46 <UART_SetConfig+0x8aa>
 8008be8:	e031      	b.n	8008c4e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bea:	f7fc fac9 	bl	8005180 <HAL_RCC_GetPCLK1Freq>
 8008bee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008bf0:	e033      	b.n	8008c5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bf2:	f7fc fadb 	bl	80051ac <HAL_RCC_GetPCLK2Freq>
 8008bf6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008bf8:	e02f      	b.n	8008c5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7fd fd0a 	bl	8006618 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c08:	e027      	b.n	8008c5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c0a:	f107 0318 	add.w	r3, r7, #24
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7fd fe56 	bl	80068c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c18:	e01f      	b.n	8008c5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c1a:	4b2d      	ldr	r3, [pc, #180]	; (8008cd0 <UART_SetConfig+0x934>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f003 0320 	and.w	r3, r3, #32
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d009      	beq.n	8008c3a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008c26:	4b2a      	ldr	r3, [pc, #168]	; (8008cd0 <UART_SetConfig+0x934>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	08db      	lsrs	r3, r3, #3
 8008c2c:	f003 0303 	and.w	r3, r3, #3
 8008c30:	4a24      	ldr	r2, [pc, #144]	; (8008cc4 <UART_SetConfig+0x928>)
 8008c32:	fa22 f303 	lsr.w	r3, r2, r3
 8008c36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008c38:	e00f      	b.n	8008c5a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008c3a:	4b22      	ldr	r3, [pc, #136]	; (8008cc4 <UART_SetConfig+0x928>)
 8008c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c3e:	e00c      	b.n	8008c5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008c40:	4b21      	ldr	r3, [pc, #132]	; (8008cc8 <UART_SetConfig+0x92c>)
 8008c42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c44:	e009      	b.n	8008c5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c4c:	e005      	b.n	8008c5a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008c58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	f000 80e7 	beq.w	8008e30 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c66:	4a19      	ldr	r2, [pc, #100]	; (8008ccc <UART_SetConfig+0x930>)
 8008c68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c70:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c74:	005a      	lsls	r2, r3, #1
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	085b      	lsrs	r3, r3, #1
 8008c7c:	441a      	add	r2, r3
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c86:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c8a:	2b0f      	cmp	r3, #15
 8008c8c:	d916      	bls.n	8008cbc <UART_SetConfig+0x920>
 8008c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c94:	d212      	bcs.n	8008cbc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	f023 030f 	bic.w	r3, r3, #15
 8008c9e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca2:	085b      	lsrs	r3, r3, #1
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	f003 0307 	and.w	r3, r3, #7
 8008caa:	b29a      	uxth	r2, r3
 8008cac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008cb8:	60da      	str	r2, [r3, #12]
 8008cba:	e0b9      	b.n	8008e30 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008cc2:	e0b5      	b.n	8008e30 <UART_SetConfig+0xa94>
 8008cc4:	03d09000 	.word	0x03d09000
 8008cc8:	003d0900 	.word	0x003d0900
 8008ccc:	08010e20 	.word	0x08010e20
 8008cd0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008cd4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008cd8:	2b20      	cmp	r3, #32
 8008cda:	dc49      	bgt.n	8008d70 <UART_SetConfig+0x9d4>
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	db7c      	blt.n	8008dda <UART_SetConfig+0xa3e>
 8008ce0:	2b20      	cmp	r3, #32
 8008ce2:	d87a      	bhi.n	8008dda <UART_SetConfig+0xa3e>
 8008ce4:	a201      	add	r2, pc, #4	; (adr r2, 8008cec <UART_SetConfig+0x950>)
 8008ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cea:	bf00      	nop
 8008cec:	08008d77 	.word	0x08008d77
 8008cf0:	08008d7f 	.word	0x08008d7f
 8008cf4:	08008ddb 	.word	0x08008ddb
 8008cf8:	08008ddb 	.word	0x08008ddb
 8008cfc:	08008d87 	.word	0x08008d87
 8008d00:	08008ddb 	.word	0x08008ddb
 8008d04:	08008ddb 	.word	0x08008ddb
 8008d08:	08008ddb 	.word	0x08008ddb
 8008d0c:	08008d97 	.word	0x08008d97
 8008d10:	08008ddb 	.word	0x08008ddb
 8008d14:	08008ddb 	.word	0x08008ddb
 8008d18:	08008ddb 	.word	0x08008ddb
 8008d1c:	08008ddb 	.word	0x08008ddb
 8008d20:	08008ddb 	.word	0x08008ddb
 8008d24:	08008ddb 	.word	0x08008ddb
 8008d28:	08008ddb 	.word	0x08008ddb
 8008d2c:	08008da7 	.word	0x08008da7
 8008d30:	08008ddb 	.word	0x08008ddb
 8008d34:	08008ddb 	.word	0x08008ddb
 8008d38:	08008ddb 	.word	0x08008ddb
 8008d3c:	08008ddb 	.word	0x08008ddb
 8008d40:	08008ddb 	.word	0x08008ddb
 8008d44:	08008ddb 	.word	0x08008ddb
 8008d48:	08008ddb 	.word	0x08008ddb
 8008d4c:	08008ddb 	.word	0x08008ddb
 8008d50:	08008ddb 	.word	0x08008ddb
 8008d54:	08008ddb 	.word	0x08008ddb
 8008d58:	08008ddb 	.word	0x08008ddb
 8008d5c:	08008ddb 	.word	0x08008ddb
 8008d60:	08008ddb 	.word	0x08008ddb
 8008d64:	08008ddb 	.word	0x08008ddb
 8008d68:	08008ddb 	.word	0x08008ddb
 8008d6c:	08008dcd 	.word	0x08008dcd
 8008d70:	2b40      	cmp	r3, #64	; 0x40
 8008d72:	d02e      	beq.n	8008dd2 <UART_SetConfig+0xa36>
 8008d74:	e031      	b.n	8008dda <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d76:	f7fc fa03 	bl	8005180 <HAL_RCC_GetPCLK1Freq>
 8008d7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008d7c:	e033      	b.n	8008de6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d7e:	f7fc fa15 	bl	80051ac <HAL_RCC_GetPCLK2Freq>
 8008d82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008d84:	e02f      	b.n	8008de6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7fd fc44 	bl	8006618 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d94:	e027      	b.n	8008de6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d96:	f107 0318 	add.w	r3, r7, #24
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7fd fd90 	bl	80068c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008da4:	e01f      	b.n	8008de6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008da6:	4b2d      	ldr	r3, [pc, #180]	; (8008e5c <UART_SetConfig+0xac0>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f003 0320 	and.w	r3, r3, #32
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d009      	beq.n	8008dc6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008db2:	4b2a      	ldr	r3, [pc, #168]	; (8008e5c <UART_SetConfig+0xac0>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	08db      	lsrs	r3, r3, #3
 8008db8:	f003 0303 	and.w	r3, r3, #3
 8008dbc:	4a28      	ldr	r2, [pc, #160]	; (8008e60 <UART_SetConfig+0xac4>)
 8008dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8008dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008dc4:	e00f      	b.n	8008de6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008dc6:	4b26      	ldr	r3, [pc, #152]	; (8008e60 <UART_SetConfig+0xac4>)
 8008dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dca:	e00c      	b.n	8008de6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008dcc:	4b25      	ldr	r3, [pc, #148]	; (8008e64 <UART_SetConfig+0xac8>)
 8008dce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dd0:	e009      	b.n	8008de6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008dd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dd8:	e005      	b.n	8008de6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008de4:	bf00      	nop
    }

    if (pclk != 0U)
 8008de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d021      	beq.n	8008e30 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df0:	4a1d      	ldr	r2, [pc, #116]	; (8008e68 <UART_SetConfig+0xacc>)
 8008df2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008df6:	461a      	mov	r2, r3
 8008df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dfa:	fbb3 f2f2 	udiv	r2, r3, r2
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	085b      	lsrs	r3, r3, #1
 8008e04:	441a      	add	r2, r3
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e0e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e12:	2b0f      	cmp	r3, #15
 8008e14:	d909      	bls.n	8008e2a <UART_SetConfig+0xa8e>
 8008e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e1c:	d205      	bcs.n	8008e2a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e20:	b29a      	uxth	r2, r3
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	60da      	str	r2, [r3, #12]
 8008e28:	e002      	b.n	8008e30 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	2201      	movs	r2, #1
 8008e34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	2200      	movs	r2, #0
 8008e44:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008e4c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3748      	adds	r7, #72	; 0x48
 8008e54:	46bd      	mov	sp, r7
 8008e56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e5a:	bf00      	nop
 8008e5c:	58024400 	.word	0x58024400
 8008e60:	03d09000 	.word	0x03d09000
 8008e64:	003d0900 	.word	0x003d0900
 8008e68:	08010e20 	.word	0x08010e20

08008e6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e78:	f003 0301 	and.w	r3, r3, #1
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00a      	beq.n	8008e96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	430a      	orrs	r2, r1
 8008e94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e9a:	f003 0302 	and.w	r3, r3, #2
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d00a      	beq.n	8008eb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	430a      	orrs	r2, r1
 8008eb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ebc:	f003 0304 	and.w	r3, r3, #4
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d00a      	beq.n	8008eda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	430a      	orrs	r2, r1
 8008ed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ede:	f003 0308 	and.w	r3, r3, #8
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d00a      	beq.n	8008efc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	430a      	orrs	r2, r1
 8008efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f00:	f003 0310 	and.w	r3, r3, #16
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00a      	beq.n	8008f1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	430a      	orrs	r2, r1
 8008f1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f22:	f003 0320 	and.w	r3, r3, #32
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00a      	beq.n	8008f40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	430a      	orrs	r2, r1
 8008f3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d01a      	beq.n	8008f82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	430a      	orrs	r2, r1
 8008f60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f6a:	d10a      	bne.n	8008f82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	430a      	orrs	r2, r1
 8008f80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d00a      	beq.n	8008fa4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	430a      	orrs	r2, r1
 8008fa2:	605a      	str	r2, [r3, #4]
  }
}
 8008fa4:	bf00      	nop
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b098      	sub	sp, #96	; 0x60
 8008fb4:	af02      	add	r7, sp, #8
 8008fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008fc0:	f7f8 ff20 	bl	8001e04 <HAL_GetTick>
 8008fc4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f003 0308 	and.w	r3, r3, #8
 8008fd0:	2b08      	cmp	r3, #8
 8008fd2:	d12f      	bne.n	8009034 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008fd8:	9300      	str	r3, [sp, #0]
 8008fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 f88e 	bl	8009104 <UART_WaitOnFlagUntilTimeout>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d022      	beq.n	8009034 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff6:	e853 3f00 	ldrex	r3, [r3]
 8008ffa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ffe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009002:	653b      	str	r3, [r7, #80]	; 0x50
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	461a      	mov	r2, r3
 800900a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800900c:	647b      	str	r3, [r7, #68]	; 0x44
 800900e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009010:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009012:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009014:	e841 2300 	strex	r3, r2, [r1]
 8009018:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800901a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800901c:	2b00      	cmp	r3, #0
 800901e:	d1e6      	bne.n	8008fee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2220      	movs	r2, #32
 8009024:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009030:	2303      	movs	r3, #3
 8009032:	e063      	b.n	80090fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f003 0304 	and.w	r3, r3, #4
 800903e:	2b04      	cmp	r3, #4
 8009040:	d149      	bne.n	80090d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009042:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009046:	9300      	str	r3, [sp, #0]
 8009048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800904a:	2200      	movs	r2, #0
 800904c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 f857 	bl	8009104 <UART_WaitOnFlagUntilTimeout>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d03c      	beq.n	80090d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009064:	e853 3f00 	ldrex	r3, [r3]
 8009068:	623b      	str	r3, [r7, #32]
   return(result);
 800906a:	6a3b      	ldr	r3, [r7, #32]
 800906c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009070:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	461a      	mov	r2, r3
 8009078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800907a:	633b      	str	r3, [r7, #48]	; 0x30
 800907c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800907e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009082:	e841 2300 	strex	r3, r2, [r1]
 8009086:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908a:	2b00      	cmp	r3, #0
 800908c:	d1e6      	bne.n	800905c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	3308      	adds	r3, #8
 8009094:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	e853 3f00 	ldrex	r3, [r3]
 800909c:	60fb      	str	r3, [r7, #12]
   return(result);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f023 0301 	bic.w	r3, r3, #1
 80090a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	3308      	adds	r3, #8
 80090ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090ae:	61fa      	str	r2, [r7, #28]
 80090b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b2:	69b9      	ldr	r1, [r7, #24]
 80090b4:	69fa      	ldr	r2, [r7, #28]
 80090b6:	e841 2300 	strex	r3, r2, [r1]
 80090ba:	617b      	str	r3, [r7, #20]
   return(result);
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d1e5      	bne.n	800908e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2220      	movs	r2, #32
 80090c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090d2:	2303      	movs	r3, #3
 80090d4:	e012      	b.n	80090fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2220      	movs	r2, #32
 80090da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2220      	movs	r2, #32
 80090e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80090fa:	2300      	movs	r3, #0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3758      	adds	r7, #88	; 0x58
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	603b      	str	r3, [r7, #0]
 8009110:	4613      	mov	r3, r2
 8009112:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009114:	e049      	b.n	80091aa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800911c:	d045      	beq.n	80091aa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800911e:	f7f8 fe71 	bl	8001e04 <HAL_GetTick>
 8009122:	4602      	mov	r2, r0
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	1ad3      	subs	r3, r2, r3
 8009128:	69ba      	ldr	r2, [r7, #24]
 800912a:	429a      	cmp	r2, r3
 800912c:	d302      	bcc.n	8009134 <UART_WaitOnFlagUntilTimeout+0x30>
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d101      	bne.n	8009138 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009134:	2303      	movs	r3, #3
 8009136:	e048      	b.n	80091ca <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f003 0304 	and.w	r3, r3, #4
 8009142:	2b00      	cmp	r3, #0
 8009144:	d031      	beq.n	80091aa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	69db      	ldr	r3, [r3, #28]
 800914c:	f003 0308 	and.w	r3, r3, #8
 8009150:	2b08      	cmp	r3, #8
 8009152:	d110      	bne.n	8009176 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2208      	movs	r2, #8
 800915a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800915c:	68f8      	ldr	r0, [r7, #12]
 800915e:	f000 f95b 	bl	8009418 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2208      	movs	r2, #8
 8009166:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2200      	movs	r2, #0
 800916e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	e029      	b.n	80091ca <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	69db      	ldr	r3, [r3, #28]
 800917c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009180:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009184:	d111      	bne.n	80091aa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800918e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009190:	68f8      	ldr	r0, [r7, #12]
 8009192:	f000 f941 	bl	8009418 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2220      	movs	r2, #32
 800919a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80091a6:	2303      	movs	r3, #3
 80091a8:	e00f      	b.n	80091ca <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	69da      	ldr	r2, [r3, #28]
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	4013      	ands	r3, r2
 80091b4:	68ba      	ldr	r2, [r7, #8]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	bf0c      	ite	eq
 80091ba:	2301      	moveq	r3, #1
 80091bc:	2300      	movne	r3, #0
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	461a      	mov	r2, r3
 80091c2:	79fb      	ldrb	r3, [r7, #7]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d0a6      	beq.n	8009116 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
	...

080091d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b0a3      	sub	sp, #140	; 0x8c
 80091d8:	af00      	add	r7, sp, #0
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	60b9      	str	r1, [r7, #8]
 80091de:	4613      	mov	r3, r2
 80091e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	68ba      	ldr	r2, [r7, #8]
 80091e6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	88fa      	ldrh	r2, [r7, #6]
 80091ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	88fa      	ldrh	r2, [r7, #6]
 80091f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2200      	movs	r2, #0
 80091fc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009206:	d10e      	bne.n	8009226 <UART_Start_Receive_IT+0x52>
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	691b      	ldr	r3, [r3, #16]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d105      	bne.n	800921c <UART_Start_Receive_IT+0x48>
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009216:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800921a:	e02d      	b.n	8009278 <UART_Start_Receive_IT+0xa4>
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	22ff      	movs	r2, #255	; 0xff
 8009220:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009224:	e028      	b.n	8009278 <UART_Start_Receive_IT+0xa4>
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d10d      	bne.n	800924a <UART_Start_Receive_IT+0x76>
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d104      	bne.n	8009240 <UART_Start_Receive_IT+0x6c>
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	22ff      	movs	r2, #255	; 0xff
 800923a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800923e:	e01b      	b.n	8009278 <UART_Start_Receive_IT+0xa4>
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	227f      	movs	r2, #127	; 0x7f
 8009244:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009248:	e016      	b.n	8009278 <UART_Start_Receive_IT+0xa4>
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009252:	d10d      	bne.n	8009270 <UART_Start_Receive_IT+0x9c>
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	691b      	ldr	r3, [r3, #16]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d104      	bne.n	8009266 <UART_Start_Receive_IT+0x92>
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	227f      	movs	r2, #127	; 0x7f
 8009260:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009264:	e008      	b.n	8009278 <UART_Start_Receive_IT+0xa4>
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	223f      	movs	r2, #63	; 0x3f
 800926a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800926e:	e003      	b.n	8009278 <UART_Start_Receive_IT+0xa4>
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2200      	movs	r2, #0
 8009274:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2200      	movs	r2, #0
 800927c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2222      	movs	r2, #34	; 0x22
 8009284:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	3308      	adds	r3, #8
 800928e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009290:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009292:	e853 3f00 	ldrex	r3, [r3]
 8009296:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009298:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800929a:	f043 0301 	orr.w	r3, r3, #1
 800929e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	3308      	adds	r3, #8
 80092a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80092ac:	673a      	str	r2, [r7, #112]	; 0x70
 80092ae:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80092b2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80092b4:	e841 2300 	strex	r3, r2, [r1]
 80092b8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80092ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d1e3      	bne.n	8009288 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092c8:	d14f      	bne.n	800936a <UART_Start_Receive_IT+0x196>
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80092d0:	88fa      	ldrh	r2, [r7, #6]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d349      	bcc.n	800936a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092de:	d107      	bne.n	80092f0 <UART_Start_Receive_IT+0x11c>
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	691b      	ldr	r3, [r3, #16]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d103      	bne.n	80092f0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	4a47      	ldr	r2, [pc, #284]	; (8009408 <UART_Start_Receive_IT+0x234>)
 80092ec:	675a      	str	r2, [r3, #116]	; 0x74
 80092ee:	e002      	b.n	80092f6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	4a46      	ldr	r2, [pc, #280]	; (800940c <UART_Start_Receive_IT+0x238>)
 80092f4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d01a      	beq.n	8009334 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009306:	e853 3f00 	ldrex	r3, [r3]
 800930a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800930c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800930e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009312:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	461a      	mov	r2, r3
 800931c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009320:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009322:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009324:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009326:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009328:	e841 2300 	strex	r3, r2, [r1]
 800932c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800932e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009330:	2b00      	cmp	r3, #0
 8009332:	d1e4      	bne.n	80092fe <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	3308      	adds	r3, #8
 800933a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800933c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800933e:	e853 3f00 	ldrex	r3, [r3]
 8009342:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800934a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	3308      	adds	r3, #8
 8009352:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009354:	64ba      	str	r2, [r7, #72]	; 0x48
 8009356:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009358:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800935a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800935c:	e841 2300 	strex	r3, r2, [r1]
 8009360:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009364:	2b00      	cmp	r3, #0
 8009366:	d1e5      	bne.n	8009334 <UART_Start_Receive_IT+0x160>
 8009368:	e046      	b.n	80093f8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009372:	d107      	bne.n	8009384 <UART_Start_Receive_IT+0x1b0>
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	691b      	ldr	r3, [r3, #16]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d103      	bne.n	8009384 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	4a24      	ldr	r2, [pc, #144]	; (8009410 <UART_Start_Receive_IT+0x23c>)
 8009380:	675a      	str	r2, [r3, #116]	; 0x74
 8009382:	e002      	b.n	800938a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	4a23      	ldr	r2, [pc, #140]	; (8009414 <UART_Start_Receive_IT+0x240>)
 8009388:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	691b      	ldr	r3, [r3, #16]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d019      	beq.n	80093c6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939a:	e853 3f00 	ldrex	r3, [r3]
 800939e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80093a6:	677b      	str	r3, [r7, #116]	; 0x74
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	461a      	mov	r2, r3
 80093ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093b0:	637b      	str	r3, [r7, #52]	; 0x34
 80093b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80093b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093b8:	e841 2300 	strex	r3, r2, [r1]
 80093bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80093be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d1e6      	bne.n	8009392 <UART_Start_Receive_IT+0x1be>
 80093c4:	e018      	b.n	80093f8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	e853 3f00 	ldrex	r3, [r3]
 80093d2:	613b      	str	r3, [r7, #16]
   return(result);
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	f043 0320 	orr.w	r3, r3, #32
 80093da:	67bb      	str	r3, [r7, #120]	; 0x78
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	461a      	mov	r2, r3
 80093e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093e4:	623b      	str	r3, [r7, #32]
 80093e6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e8:	69f9      	ldr	r1, [r7, #28]
 80093ea:	6a3a      	ldr	r2, [r7, #32]
 80093ec:	e841 2300 	strex	r3, r2, [r1]
 80093f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1e6      	bne.n	80093c6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80093f8:	2300      	movs	r3, #0
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	378c      	adds	r7, #140	; 0x8c
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr
 8009406:	bf00      	nop
 8009408:	08009f7d 	.word	0x08009f7d
 800940c:	08009c1d 	.word	0x08009c1d
 8009410:	08009a65 	.word	0x08009a65
 8009414:	080098ad 	.word	0x080098ad

08009418 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009418:	b480      	push	{r7}
 800941a:	b095      	sub	sp, #84	; 0x54
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009428:	e853 3f00 	ldrex	r3, [r3]
 800942c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800942e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009430:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009434:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	461a      	mov	r2, r3
 800943c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800943e:	643b      	str	r3, [r7, #64]	; 0x40
 8009440:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009442:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009444:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009446:	e841 2300 	strex	r3, r2, [r1]
 800944a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800944c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800944e:	2b00      	cmp	r3, #0
 8009450:	d1e6      	bne.n	8009420 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	3308      	adds	r3, #8
 8009458:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800945a:	6a3b      	ldr	r3, [r7, #32]
 800945c:	e853 3f00 	ldrex	r3, [r3]
 8009460:	61fb      	str	r3, [r7, #28]
   return(result);
 8009462:	69fa      	ldr	r2, [r7, #28]
 8009464:	4b1e      	ldr	r3, [pc, #120]	; (80094e0 <UART_EndRxTransfer+0xc8>)
 8009466:	4013      	ands	r3, r2
 8009468:	64bb      	str	r3, [r7, #72]	; 0x48
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	3308      	adds	r3, #8
 8009470:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009472:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009474:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009476:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800947a:	e841 2300 	strex	r3, r2, [r1]
 800947e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009482:	2b00      	cmp	r3, #0
 8009484:	d1e5      	bne.n	8009452 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800948a:	2b01      	cmp	r3, #1
 800948c:	d118      	bne.n	80094c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	e853 3f00 	ldrex	r3, [r3]
 800949a:	60bb      	str	r3, [r7, #8]
   return(result);
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	f023 0310 	bic.w	r3, r3, #16
 80094a2:	647b      	str	r3, [r7, #68]	; 0x44
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	461a      	mov	r2, r3
 80094aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094ac:	61bb      	str	r3, [r7, #24]
 80094ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b0:	6979      	ldr	r1, [r7, #20]
 80094b2:	69ba      	ldr	r2, [r7, #24]
 80094b4:	e841 2300 	strex	r3, r2, [r1]
 80094b8:	613b      	str	r3, [r7, #16]
   return(result);
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d1e6      	bne.n	800948e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2220      	movs	r2, #32
 80094c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80094d4:	bf00      	nop
 80094d6:	3754      	adds	r7, #84	; 0x54
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr
 80094e0:	effffffe 	.word	0xeffffffe

080094e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2200      	movs	r2, #0
 80094f6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2200      	movs	r2, #0
 80094fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009502:	68f8      	ldr	r0, [r7, #12]
 8009504:	f7fe ff34 	bl	8008370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009508:	bf00      	nop
 800950a:	3710      	adds	r7, #16
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009510:	b480      	push	{r7}
 8009512:	b08f      	sub	sp, #60	; 0x3c
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800951e:	2b21      	cmp	r3, #33	; 0x21
 8009520:	d14c      	bne.n	80095bc <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009528:	b29b      	uxth	r3, r3
 800952a:	2b00      	cmp	r3, #0
 800952c:	d132      	bne.n	8009594 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009534:	6a3b      	ldr	r3, [r7, #32]
 8009536:	e853 3f00 	ldrex	r3, [r3]
 800953a:	61fb      	str	r3, [r7, #28]
   return(result);
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009542:	637b      	str	r3, [r7, #52]	; 0x34
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	461a      	mov	r2, r3
 800954a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800954c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800954e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009550:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009552:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009554:	e841 2300 	strex	r3, r2, [r1]
 8009558:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800955a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1e6      	bne.n	800952e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	e853 3f00 	ldrex	r3, [r3]
 800956c:	60bb      	str	r3, [r7, #8]
   return(result);
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009574:	633b      	str	r3, [r7, #48]	; 0x30
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	461a      	mov	r2, r3
 800957c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800957e:	61bb      	str	r3, [r7, #24]
 8009580:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009582:	6979      	ldr	r1, [r7, #20]
 8009584:	69ba      	ldr	r2, [r7, #24]
 8009586:	e841 2300 	strex	r3, r2, [r1]
 800958a:	613b      	str	r3, [r7, #16]
   return(result);
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d1e6      	bne.n	8009560 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009592:	e013      	b.n	80095bc <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009598:	781a      	ldrb	r2, [r3, #0]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095a4:	1c5a      	adds	r2, r3, #1
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	3b01      	subs	r3, #1
 80095b4:	b29a      	uxth	r2, r3
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80095bc:	bf00      	nop
 80095be:	373c      	adds	r7, #60	; 0x3c
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr

080095c8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b091      	sub	sp, #68	; 0x44
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095d6:	2b21      	cmp	r3, #33	; 0x21
 80095d8:	d151      	bne.n	800967e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d132      	bne.n	800964c <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ee:	e853 3f00 	ldrex	r3, [r3]
 80095f2:	623b      	str	r3, [r7, #32]
   return(result);
 80095f4:	6a3b      	ldr	r3, [r7, #32]
 80095f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	461a      	mov	r2, r3
 8009602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009604:	633b      	str	r3, [r7, #48]	; 0x30
 8009606:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009608:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800960a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800960c:	e841 2300 	strex	r3, r2, [r1]
 8009610:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009614:	2b00      	cmp	r3, #0
 8009616:	d1e6      	bne.n	80095e6 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	e853 3f00 	ldrex	r3, [r3]
 8009624:	60fb      	str	r3, [r7, #12]
   return(result);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800962c:	637b      	str	r3, [r7, #52]	; 0x34
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	461a      	mov	r2, r3
 8009634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009636:	61fb      	str	r3, [r7, #28]
 8009638:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800963a:	69b9      	ldr	r1, [r7, #24]
 800963c:	69fa      	ldr	r2, [r7, #28]
 800963e:	e841 2300 	strex	r3, r2, [r1]
 8009642:	617b      	str	r3, [r7, #20]
   return(result);
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d1e6      	bne.n	8009618 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800964a:	e018      	b.n	800967e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009650:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009654:	881b      	ldrh	r3, [r3, #0]
 8009656:	461a      	mov	r2, r3
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009660:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009666:	1c9a      	adds	r2, r3, #2
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009672:	b29b      	uxth	r3, r3
 8009674:	3b01      	subs	r3, #1
 8009676:	b29a      	uxth	r2, r3
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800967e:	bf00      	nop
 8009680:	3744      	adds	r7, #68	; 0x44
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr

0800968a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800968a:	b480      	push	{r7}
 800968c:	b091      	sub	sp, #68	; 0x44
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009698:	2b21      	cmp	r3, #33	; 0x21
 800969a:	d160      	bne.n	800975e <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80096a2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80096a4:	e057      	b.n	8009756 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d133      	bne.n	800971a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	3308      	adds	r3, #8
 80096b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096bc:	e853 3f00 	ldrex	r3, [r3]
 80096c0:	623b      	str	r3, [r7, #32]
   return(result);
 80096c2:	6a3b      	ldr	r3, [r7, #32]
 80096c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80096c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	3308      	adds	r3, #8
 80096d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096d2:	633a      	str	r2, [r7, #48]	; 0x30
 80096d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096da:	e841 2300 	strex	r3, r2, [r1]
 80096de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80096e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d1e5      	bne.n	80096b2 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	e853 3f00 	ldrex	r3, [r3]
 80096f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096fa:	637b      	str	r3, [r7, #52]	; 0x34
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	461a      	mov	r2, r3
 8009702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009704:	61fb      	str	r3, [r7, #28]
 8009706:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009708:	69b9      	ldr	r1, [r7, #24]
 800970a:	69fa      	ldr	r2, [r7, #28]
 800970c:	e841 2300 	strex	r3, r2, [r1]
 8009710:	617b      	str	r3, [r7, #20]
   return(result);
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d1e6      	bne.n	80096e6 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009718:	e021      	b.n	800975e <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	69db      	ldr	r3, [r3, #28]
 8009720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009724:	2b00      	cmp	r3, #0
 8009726:	d013      	beq.n	8009750 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800972c:	781a      	ldrb	r2, [r3, #0]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009738:	1c5a      	adds	r2, r3, #1
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009744:	b29b      	uxth	r3, r3
 8009746:	3b01      	subs	r3, #1
 8009748:	b29a      	uxth	r2, r3
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009750:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009752:	3b01      	subs	r3, #1
 8009754:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009756:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009758:	2b00      	cmp	r3, #0
 800975a:	d1a4      	bne.n	80096a6 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800975c:	e7ff      	b.n	800975e <UART_TxISR_8BIT_FIFOEN+0xd4>
 800975e:	bf00      	nop
 8009760:	3744      	adds	r7, #68	; 0x44
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr

0800976a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800976a:	b480      	push	{r7}
 800976c:	b091      	sub	sp, #68	; 0x44
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009778:	2b21      	cmp	r3, #33	; 0x21
 800977a:	d165      	bne.n	8009848 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009782:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009784:	e05c      	b.n	8009840 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800978c:	b29b      	uxth	r3, r3
 800978e:	2b00      	cmp	r3, #0
 8009790:	d133      	bne.n	80097fa <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	3308      	adds	r3, #8
 8009798:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800979a:	6a3b      	ldr	r3, [r7, #32]
 800979c:	e853 3f00 	ldrex	r3, [r3]
 80097a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80097a2:	69fb      	ldr	r3, [r7, #28]
 80097a4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80097a8:	637b      	str	r3, [r7, #52]	; 0x34
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	3308      	adds	r3, #8
 80097b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80097b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097ba:	e841 2300 	strex	r3, r2, [r1]
 80097be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d1e5      	bne.n	8009792 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	e853 3f00 	ldrex	r3, [r3]
 80097d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097da:	633b      	str	r3, [r7, #48]	; 0x30
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	461a      	mov	r2, r3
 80097e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e4:	61bb      	str	r3, [r7, #24]
 80097e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e8:	6979      	ldr	r1, [r7, #20]
 80097ea:	69ba      	ldr	r2, [r7, #24]
 80097ec:	e841 2300 	strex	r3, r2, [r1]
 80097f0:	613b      	str	r3, [r7, #16]
   return(result);
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d1e6      	bne.n	80097c6 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80097f8:	e026      	b.n	8009848 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	69db      	ldr	r3, [r3, #28]
 8009800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009804:	2b00      	cmp	r3, #0
 8009806:	d018      	beq.n	800983a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800980c:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800980e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009810:	881b      	ldrh	r3, [r3, #0]
 8009812:	461a      	mov	r2, r3
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800981c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009822:	1c9a      	adds	r2, r3, #2
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800982e:	b29b      	uxth	r3, r3
 8009830:	3b01      	subs	r3, #1
 8009832:	b29a      	uxth	r2, r3
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800983a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800983c:	3b01      	subs	r3, #1
 800983e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009840:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009842:	2b00      	cmp	r3, #0
 8009844:	d19f      	bne.n	8009786 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009846:	e7ff      	b.n	8009848 <UART_TxISR_16BIT_FIFOEN+0xde>
 8009848:	bf00      	nop
 800984a:	3744      	adds	r7, #68	; 0x44
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b088      	sub	sp, #32
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	e853 3f00 	ldrex	r3, [r3]
 8009868:	60bb      	str	r3, [r7, #8]
   return(result);
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009870:	61fb      	str	r3, [r7, #28]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	461a      	mov	r2, r3
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	61bb      	str	r3, [r7, #24]
 800987c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800987e:	6979      	ldr	r1, [r7, #20]
 8009880:	69ba      	ldr	r2, [r7, #24]
 8009882:	e841 2300 	strex	r3, r2, [r1]
 8009886:	613b      	str	r3, [r7, #16]
   return(result);
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d1e6      	bne.n	800985c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2220      	movs	r2, #32
 8009892:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2200      	movs	r2, #0
 800989a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f7fe fd5d 	bl	800835c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098a2:	bf00      	nop
 80098a4:	3720      	adds	r7, #32
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
	...

080098ac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b09c      	sub	sp, #112	; 0x70
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80098ba:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098c4:	2b22      	cmp	r3, #34	; 0x22
 80098c6:	f040 80be 	bne.w	8009a46 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80098d4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80098d8:	b2d9      	uxtb	r1, r3
 80098da:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80098de:	b2da      	uxtb	r2, r3
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098e4:	400a      	ands	r2, r1
 80098e6:	b2d2      	uxtb	r2, r2
 80098e8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098ee:	1c5a      	adds	r2, r3, #1
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	3b01      	subs	r3, #1
 80098fe:	b29a      	uxth	r2, r3
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800990c:	b29b      	uxth	r3, r3
 800990e:	2b00      	cmp	r3, #0
 8009910:	f040 80a1 	bne.w	8009a56 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800991a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800991c:	e853 3f00 	ldrex	r3, [r3]
 8009920:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009924:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009928:	66bb      	str	r3, [r7, #104]	; 0x68
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	461a      	mov	r2, r3
 8009930:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009932:	65bb      	str	r3, [r7, #88]	; 0x58
 8009934:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009936:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009938:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800993a:	e841 2300 	strex	r3, r2, [r1]
 800993e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009942:	2b00      	cmp	r3, #0
 8009944:	d1e6      	bne.n	8009914 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	3308      	adds	r3, #8
 800994c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009950:	e853 3f00 	ldrex	r3, [r3]
 8009954:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009958:	f023 0301 	bic.w	r3, r3, #1
 800995c:	667b      	str	r3, [r7, #100]	; 0x64
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	3308      	adds	r3, #8
 8009964:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009966:	647a      	str	r2, [r7, #68]	; 0x44
 8009968:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800996a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800996c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800996e:	e841 2300 	strex	r3, r2, [r1]
 8009972:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009976:	2b00      	cmp	r3, #0
 8009978:	d1e5      	bne.n	8009946 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2220      	movs	r2, #32
 800997e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2200      	movs	r2, #0
 800998c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a33      	ldr	r2, [pc, #204]	; (8009a60 <UART_RxISR_8BIT+0x1b4>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d01f      	beq.n	80099d8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d018      	beq.n	80099d8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ae:	e853 3f00 	ldrex	r3, [r3]
 80099b2:	623b      	str	r3, [r7, #32]
   return(result);
 80099b4:	6a3b      	ldr	r3, [r7, #32]
 80099b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80099ba:	663b      	str	r3, [r7, #96]	; 0x60
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	461a      	mov	r2, r3
 80099c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099c4:	633b      	str	r3, [r7, #48]	; 0x30
 80099c6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099cc:	e841 2300 	strex	r3, r2, [r1]
 80099d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80099d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d1e6      	bne.n	80099a6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d12e      	bne.n	8009a3e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2200      	movs	r2, #0
 80099e4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	e853 3f00 	ldrex	r3, [r3]
 80099f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	f023 0310 	bic.w	r3, r3, #16
 80099fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	461a      	mov	r2, r3
 8009a02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a04:	61fb      	str	r3, [r7, #28]
 8009a06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a08:	69b9      	ldr	r1, [r7, #24]
 8009a0a:	69fa      	ldr	r2, [r7, #28]
 8009a0c:	e841 2300 	strex	r3, r2, [r1]
 8009a10:	617b      	str	r3, [r7, #20]
   return(result);
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d1e6      	bne.n	80099e6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	69db      	ldr	r3, [r3, #28]
 8009a1e:	f003 0310 	and.w	r3, r3, #16
 8009a22:	2b10      	cmp	r3, #16
 8009a24:	d103      	bne.n	8009a2e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	2210      	movs	r2, #16
 8009a2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a34:	4619      	mov	r1, r3
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f7fe fca4 	bl	8008384 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a3c:	e00b      	b.n	8009a56 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f002 f8f8 	bl	800bc34 <HAL_UART_RxCpltCallback>
}
 8009a44:	e007      	b.n	8009a56 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	699a      	ldr	r2, [r3, #24]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f042 0208 	orr.w	r2, r2, #8
 8009a54:	619a      	str	r2, [r3, #24]
}
 8009a56:	bf00      	nop
 8009a58:	3770      	adds	r7, #112	; 0x70
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	58000c00 	.word	0x58000c00

08009a64 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b09c      	sub	sp, #112	; 0x70
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009a72:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a7c:	2b22      	cmp	r3, #34	; 0x22
 8009a7e:	f040 80be 	bne.w	8009bfe <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a88:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a90:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009a92:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8009a96:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009a9a:	4013      	ands	r3, r2
 8009a9c:	b29a      	uxth	r2, r3
 8009a9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009aa0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aa6:	1c9a      	adds	r2, r3, #2
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	3b01      	subs	r3, #1
 8009ab6:	b29a      	uxth	r2, r3
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	f040 80a1 	bne.w	8009c0e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ad4:	e853 3f00 	ldrex	r3, [r3]
 8009ad8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009ada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009adc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ae0:	667b      	str	r3, [r7, #100]	; 0x64
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009aea:	657b      	str	r3, [r7, #84]	; 0x54
 8009aec:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009af0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009af2:	e841 2300 	strex	r3, r2, [r1]
 8009af6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d1e6      	bne.n	8009acc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	3308      	adds	r3, #8
 8009b04:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b08:	e853 3f00 	ldrex	r3, [r3]
 8009b0c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b10:	f023 0301 	bic.w	r3, r3, #1
 8009b14:	663b      	str	r3, [r7, #96]	; 0x60
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	3308      	adds	r3, #8
 8009b1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009b1e:	643a      	str	r2, [r7, #64]	; 0x40
 8009b20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b26:	e841 2300 	strex	r3, r2, [r1]
 8009b2a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d1e5      	bne.n	8009afe <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2220      	movs	r2, #32
 8009b36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a33      	ldr	r2, [pc, #204]	; (8009c18 <UART_RxISR_16BIT+0x1b4>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d01f      	beq.n	8009b90 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d018      	beq.n	8009b90 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b64:	6a3b      	ldr	r3, [r7, #32]
 8009b66:	e853 3f00 	ldrex	r3, [r3]
 8009b6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b6c:	69fb      	ldr	r3, [r7, #28]
 8009b6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009b72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	461a      	mov	r2, r3
 8009b7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b7e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b84:	e841 2300 	strex	r3, r2, [r1]
 8009b88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d1e6      	bne.n	8009b5e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d12e      	bne.n	8009bf6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	e853 3f00 	ldrex	r3, [r3]
 8009baa:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	f023 0310 	bic.w	r3, r3, #16
 8009bb2:	65bb      	str	r3, [r7, #88]	; 0x58
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	461a      	mov	r2, r3
 8009bba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009bbc:	61bb      	str	r3, [r7, #24]
 8009bbe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc0:	6979      	ldr	r1, [r7, #20]
 8009bc2:	69ba      	ldr	r2, [r7, #24]
 8009bc4:	e841 2300 	strex	r3, r2, [r1]
 8009bc8:	613b      	str	r3, [r7, #16]
   return(result);
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d1e6      	bne.n	8009b9e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	69db      	ldr	r3, [r3, #28]
 8009bd6:	f003 0310 	and.w	r3, r3, #16
 8009bda:	2b10      	cmp	r3, #16
 8009bdc:	d103      	bne.n	8009be6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	2210      	movs	r2, #16
 8009be4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009bec:	4619      	mov	r1, r3
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f7fe fbc8 	bl	8008384 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009bf4:	e00b      	b.n	8009c0e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f002 f81c 	bl	800bc34 <HAL_UART_RxCpltCallback>
}
 8009bfc:	e007      	b.n	8009c0e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	699a      	ldr	r2, [r3, #24]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f042 0208 	orr.w	r2, r2, #8
 8009c0c:	619a      	str	r2, [r3, #24]
}
 8009c0e:	bf00      	nop
 8009c10:	3770      	adds	r7, #112	; 0x70
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	58000c00 	.word	0x58000c00

08009c1c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b0ac      	sub	sp, #176	; 0xb0
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009c2a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	69db      	ldr	r3, [r3, #28]
 8009c34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	689b      	ldr	r3, [r3, #8]
 8009c48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c52:	2b22      	cmp	r3, #34	; 0x22
 8009c54:	f040 8180 	bne.w	8009f58 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009c5e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c62:	e123      	b.n	8009eac <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009c6e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8009c72:	b2d9      	uxtb	r1, r3
 8009c74:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009c78:	b2da      	uxtb	r2, r3
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c7e:	400a      	ands	r2, r1
 8009c80:	b2d2      	uxtb	r2, r2
 8009c82:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c88:	1c5a      	adds	r2, r3, #1
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	3b01      	subs	r3, #1
 8009c98:	b29a      	uxth	r2, r3
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	69db      	ldr	r3, [r3, #28]
 8009ca6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009caa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009cae:	f003 0307 	and.w	r3, r3, #7
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d053      	beq.n	8009d5e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009cb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009cba:	f003 0301 	and.w	r3, r3, #1
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d011      	beq.n	8009ce6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009cc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d00b      	beq.n	8009ce6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cdc:	f043 0201 	orr.w	r2, r3, #1
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ce6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009cea:	f003 0302 	and.w	r3, r3, #2
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d011      	beq.n	8009d16 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009cf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009cf6:	f003 0301 	and.w	r3, r3, #1
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d00b      	beq.n	8009d16 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	2202      	movs	r2, #2
 8009d04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d0c:	f043 0204 	orr.w	r2, r3, #4
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d1a:	f003 0304 	and.w	r3, r3, #4
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d011      	beq.n	8009d46 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009d22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d26:	f003 0301 	and.w	r3, r3, #1
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d00b      	beq.n	8009d46 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2204      	movs	r2, #4
 8009d34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d3c:	f043 0202 	orr.w	r2, r3, #2
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d006      	beq.n	8009d5e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f7fe fb0d 	bl	8008370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	f040 80a0 	bne.w	8009eac <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d74:	e853 3f00 	ldrex	r3, [r3]
 8009d78:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8009d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	461a      	mov	r2, r3
 8009d8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d8e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009d90:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d92:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009d94:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009d96:	e841 2300 	strex	r3, r2, [r1]
 8009d9a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8009d9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d1e4      	bne.n	8009d6c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	3308      	adds	r3, #8
 8009da8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009daa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009dac:	e853 3f00 	ldrex	r3, [r3]
 8009db0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009db2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009db4:	4b6e      	ldr	r3, [pc, #440]	; (8009f70 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8009db6:	4013      	ands	r3, r2
 8009db8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	3308      	adds	r3, #8
 8009dc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009dc6:	66ba      	str	r2, [r7, #104]	; 0x68
 8009dc8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dca:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009dcc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009dce:	e841 2300 	strex	r3, r2, [r1]
 8009dd2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009dd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d1e3      	bne.n	8009da2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2220      	movs	r2, #32
 8009dde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2200      	movs	r2, #0
 8009de6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2200      	movs	r2, #0
 8009dec:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a60      	ldr	r2, [pc, #384]	; (8009f74 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d021      	beq.n	8009e3c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d01a      	beq.n	8009e3c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e0e:	e853 3f00 	ldrex	r3, [r3]
 8009e12:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009e1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	461a      	mov	r2, r3
 8009e24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e28:	657b      	str	r3, [r7, #84]	; 0x54
 8009e2a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009e2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009e30:	e841 2300 	strex	r3, r2, [r1]
 8009e34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d1e4      	bne.n	8009e06 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d130      	bne.n	8009ea6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e52:	e853 3f00 	ldrex	r3, [r3]
 8009e56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e5a:	f023 0310 	bic.w	r3, r3, #16
 8009e5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	461a      	mov	r2, r3
 8009e68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e6c:	643b      	str	r3, [r7, #64]	; 0x40
 8009e6e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e74:	e841 2300 	strex	r3, r2, [r1]
 8009e78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d1e4      	bne.n	8009e4a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	69db      	ldr	r3, [r3, #28]
 8009e86:	f003 0310 	and.w	r3, r3, #16
 8009e8a:	2b10      	cmp	r3, #16
 8009e8c:	d103      	bne.n	8009e96 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	2210      	movs	r2, #16
 8009e94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f7fe fa70 	bl	8008384 <HAL_UARTEx_RxEventCallback>
 8009ea4:	e002      	b.n	8009eac <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f001 fec4 	bl	800bc34 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009eac:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d006      	beq.n	8009ec2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8009eb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009eb8:	f003 0320 	and.w	r3, r3, #32
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	f47f aed1 	bne.w	8009c64 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ec8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009ecc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d049      	beq.n	8009f68 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009eda:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d242      	bcs.n	8009f68 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	3308      	adds	r3, #8
 8009ee8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eea:	6a3b      	ldr	r3, [r7, #32]
 8009eec:	e853 3f00 	ldrex	r3, [r3]
 8009ef0:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ef2:	69fb      	ldr	r3, [r7, #28]
 8009ef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ef8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	3308      	adds	r3, #8
 8009f02:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009f06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009f08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f0e:	e841 2300 	strex	r3, r2, [r1]
 8009f12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d1e3      	bne.n	8009ee2 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	4a16      	ldr	r2, [pc, #88]	; (8009f78 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009f1e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	e853 3f00 	ldrex	r3, [r3]
 8009f2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	f043 0320 	orr.w	r3, r3, #32
 8009f34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009f42:	61bb      	str	r3, [r7, #24]
 8009f44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f46:	6979      	ldr	r1, [r7, #20]
 8009f48:	69ba      	ldr	r2, [r7, #24]
 8009f4a:	e841 2300 	strex	r3, r2, [r1]
 8009f4e:	613b      	str	r3, [r7, #16]
   return(result);
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d1e4      	bne.n	8009f20 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009f56:	e007      	b.n	8009f68 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	699a      	ldr	r2, [r3, #24]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f042 0208 	orr.w	r2, r2, #8
 8009f66:	619a      	str	r2, [r3, #24]
}
 8009f68:	bf00      	nop
 8009f6a:	37b0      	adds	r7, #176	; 0xb0
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	effffffe 	.word	0xeffffffe
 8009f74:	58000c00 	.word	0x58000c00
 8009f78:	080098ad 	.word	0x080098ad

08009f7c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b0ae      	sub	sp, #184	; 0xb8
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009f8a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	69db      	ldr	r3, [r3, #28]
 8009f94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	689b      	ldr	r3, [r3, #8]
 8009fa8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fb2:	2b22      	cmp	r3, #34	; 0x22
 8009fb4:	f040 8184 	bne.w	800a2c0 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009fbe:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009fc2:	e127      	b.n	800a214 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fca:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009fd6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8009fda:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8009fde:	4013      	ands	r3, r2
 8009fe0:	b29a      	uxth	r2, r3
 8009fe2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009fe6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fec:	1c9a      	adds	r2, r3, #2
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ff8:	b29b      	uxth	r3, r3
 8009ffa:	3b01      	subs	r3, #1
 8009ffc:	b29a      	uxth	r2, r3
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	69db      	ldr	r3, [r3, #28]
 800a00a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a00e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a012:	f003 0307 	and.w	r3, r3, #7
 800a016:	2b00      	cmp	r3, #0
 800a018:	d053      	beq.n	800a0c2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a01a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a01e:	f003 0301 	and.w	r3, r3, #1
 800a022:	2b00      	cmp	r3, #0
 800a024:	d011      	beq.n	800a04a <UART_RxISR_16BIT_FIFOEN+0xce>
 800a026:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a02a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d00b      	beq.n	800a04a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	2201      	movs	r2, #1
 800a038:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a040:	f043 0201 	orr.w	r2, r3, #1
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a04a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a04e:	f003 0302 	and.w	r3, r3, #2
 800a052:	2b00      	cmp	r3, #0
 800a054:	d011      	beq.n	800a07a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a056:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a05a:	f003 0301 	and.w	r3, r3, #1
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d00b      	beq.n	800a07a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	2202      	movs	r2, #2
 800a068:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a070:	f043 0204 	orr.w	r2, r3, #4
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a07a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a07e:	f003 0304 	and.w	r3, r3, #4
 800a082:	2b00      	cmp	r3, #0
 800a084:	d011      	beq.n	800a0aa <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a086:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a08a:	f003 0301 	and.w	r3, r3, #1
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d00b      	beq.n	800a0aa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	2204      	movs	r2, #4
 800a098:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0a0:	f043 0202 	orr.w	r2, r3, #2
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d006      	beq.n	800a0c2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f7fe f95b 	bl	8008370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	f040 80a2 	bne.w	800a214 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0d8:	e853 3f00 	ldrex	r3, [r3]
 800a0dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a0de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a0e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a0f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a0f6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a0fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a0fe:	e841 2300 	strex	r3, r2, [r1]
 800a102:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a104:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a106:	2b00      	cmp	r3, #0
 800a108:	d1e2      	bne.n	800a0d0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	3308      	adds	r3, #8
 800a110:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a112:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a114:	e853 3f00 	ldrex	r3, [r3]
 800a118:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a11a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a11c:	4b6e      	ldr	r3, [pc, #440]	; (800a2d8 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800a11e:	4013      	ands	r3, r2
 800a120:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	3308      	adds	r3, #8
 800a12a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a12e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a130:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a132:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a134:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a136:	e841 2300 	strex	r3, r2, [r1]
 800a13a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a13c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d1e3      	bne.n	800a10a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2220      	movs	r2, #32
 800a146:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4a60      	ldr	r2, [pc, #384]	; (800a2dc <UART_RxISR_16BIT_FIFOEN+0x360>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d021      	beq.n	800a1a4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	685b      	ldr	r3, [r3, #4]
 800a166:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d01a      	beq.n	800a1a4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a176:	e853 3f00 	ldrex	r3, [r3]
 800a17a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a17c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a17e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a182:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	461a      	mov	r2, r3
 800a18c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a190:	65bb      	str	r3, [r7, #88]	; 0x58
 800a192:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a194:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a196:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a198:	e841 2300 	strex	r3, r2, [r1]
 800a19c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a19e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d1e4      	bne.n	800a16e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d130      	bne.n	800a20e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ba:	e853 3f00 	ldrex	r3, [r3]
 800a1be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a1c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1c2:	f023 0310 	bic.w	r3, r3, #16
 800a1c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a1d4:	647b      	str	r3, [r7, #68]	; 0x44
 800a1d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a1da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1dc:	e841 2300 	strex	r3, r2, [r1]
 800a1e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a1e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d1e4      	bne.n	800a1b2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	69db      	ldr	r3, [r3, #28]
 800a1ee:	f003 0310 	and.w	r3, r3, #16
 800a1f2:	2b10      	cmp	r3, #16
 800a1f4:	d103      	bne.n	800a1fe <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	2210      	movs	r2, #16
 800a1fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a204:	4619      	mov	r1, r3
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f7fe f8bc 	bl	8008384 <HAL_UARTEx_RxEventCallback>
 800a20c:	e002      	b.n	800a214 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f001 fd10 	bl	800bc34 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a214:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d006      	beq.n	800a22a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800a21c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a220:	f003 0320 	and.w	r3, r3, #32
 800a224:	2b00      	cmp	r3, #0
 800a226:	f47f aecd 	bne.w	8009fc4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a230:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a234:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d049      	beq.n	800a2d0 <UART_RxISR_16BIT_FIFOEN+0x354>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a242:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800a246:	429a      	cmp	r2, r3
 800a248:	d242      	bcs.n	800a2d0 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	3308      	adds	r3, #8
 800a250:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a254:	e853 3f00 	ldrex	r3, [r3]
 800a258:	623b      	str	r3, [r7, #32]
   return(result);
 800a25a:	6a3b      	ldr	r3, [r7, #32]
 800a25c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a260:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	3308      	adds	r3, #8
 800a26a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a26e:	633a      	str	r2, [r7, #48]	; 0x30
 800a270:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a272:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a276:	e841 2300 	strex	r3, r2, [r1]
 800a27a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d1e3      	bne.n	800a24a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	4a16      	ldr	r2, [pc, #88]	; (800a2e0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800a286:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	e853 3f00 	ldrex	r3, [r3]
 800a294:	60fb      	str	r3, [r7, #12]
   return(result);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f043 0320 	orr.w	r3, r3, #32
 800a29c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a2aa:	61fb      	str	r3, [r7, #28]
 800a2ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ae:	69b9      	ldr	r1, [r7, #24]
 800a2b0:	69fa      	ldr	r2, [r7, #28]
 800a2b2:	e841 2300 	strex	r3, r2, [r1]
 800a2b6:	617b      	str	r3, [r7, #20]
   return(result);
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d1e4      	bne.n	800a288 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a2be:	e007      	b.n	800a2d0 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	699a      	ldr	r2, [r3, #24]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f042 0208 	orr.w	r2, r2, #8
 800a2ce:	619a      	str	r2, [r3, #24]
}
 800a2d0:	bf00      	nop
 800a2d2:	37b8      	adds	r7, #184	; 0xb8
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}
 800a2d8:	effffffe 	.word	0xeffffffe
 800a2dc:	58000c00 	.word	0x58000c00
 800a2e0:	08009a65 	.word	0x08009a65

0800a2e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a2ec:	bf00      	nop
 800a2ee:	370c      	adds	r7, #12
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b083      	sub	sp, #12
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a300:	bf00      	nop
 800a302:	370c      	adds	r7, #12
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr

0800a30c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b083      	sub	sp, #12
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a314:	bf00      	nop
 800a316:	370c      	adds	r7, #12
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a320:	b480      	push	{r7}
 800a322:	b085      	sub	sp, #20
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d101      	bne.n	800a336 <HAL_UARTEx_DisableFifoMode+0x16>
 800a332:	2302      	movs	r3, #2
 800a334:	e027      	b.n	800a386 <HAL_UARTEx_DisableFifoMode+0x66>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2201      	movs	r2, #1
 800a33a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2224      	movs	r2, #36	; 0x24
 800a342:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	681a      	ldr	r2, [r3, #0]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f022 0201 	bic.w	r2, r2, #1
 800a35c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a364:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2200      	movs	r2, #0
 800a36a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	68fa      	ldr	r2, [r7, #12]
 800a372:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2220      	movs	r2, #32
 800a378:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a384:	2300      	movs	r3, #0
}
 800a386:	4618      	mov	r0, r3
 800a388:	3714      	adds	r7, #20
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr

0800a392 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a392:	b580      	push	{r7, lr}
 800a394:	b084      	sub	sp, #16
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
 800a39a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d101      	bne.n	800a3aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a3a6:	2302      	movs	r3, #2
 800a3a8:	e02d      	b.n	800a406 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2224      	movs	r2, #36	; 0x24
 800a3b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	681a      	ldr	r2, [r3, #0]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f022 0201 	bic.w	r2, r2, #1
 800a3d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	683a      	ldr	r2, [r7, #0]
 800a3e2:	430a      	orrs	r2, r1
 800a3e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f000 f850 	bl	800a48c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	68fa      	ldr	r2, [r7, #12]
 800a3f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2220      	movs	r2, #32
 800a3f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2200      	movs	r2, #0
 800a400:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	3710      	adds	r7, #16
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a40e:	b580      	push	{r7, lr}
 800a410:	b084      	sub	sp, #16
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
 800a416:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a41e:	2b01      	cmp	r3, #1
 800a420:	d101      	bne.n	800a426 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a422:	2302      	movs	r3, #2
 800a424:	e02d      	b.n	800a482 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2201      	movs	r2, #1
 800a42a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2224      	movs	r2, #36	; 0x24
 800a432:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f022 0201 	bic.w	r2, r2, #1
 800a44c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	683a      	ldr	r2, [r7, #0]
 800a45e:	430a      	orrs	r2, r1
 800a460:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 f812 	bl	800a48c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	68fa      	ldr	r2, [r7, #12]
 800a46e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2220      	movs	r2, #32
 800a474:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2200      	movs	r2, #0
 800a47c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a480:	2300      	movs	r3, #0
}
 800a482:	4618      	mov	r0, r3
 800a484:	3710      	adds	r7, #16
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
	...

0800a48c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b085      	sub	sp, #20
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d108      	bne.n	800a4ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a4ac:	e031      	b.n	800a512 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a4ae:	2310      	movs	r3, #16
 800a4b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a4b2:	2310      	movs	r3, #16
 800a4b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	689b      	ldr	r3, [r3, #8]
 800a4bc:	0e5b      	lsrs	r3, r3, #25
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	f003 0307 	and.w	r3, r3, #7
 800a4c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	689b      	ldr	r3, [r3, #8]
 800a4cc:	0f5b      	lsrs	r3, r3, #29
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	f003 0307 	and.w	r3, r3, #7
 800a4d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a4d6:	7bbb      	ldrb	r3, [r7, #14]
 800a4d8:	7b3a      	ldrb	r2, [r7, #12]
 800a4da:	4911      	ldr	r1, [pc, #68]	; (800a520 <UARTEx_SetNbDataToProcess+0x94>)
 800a4dc:	5c8a      	ldrb	r2, [r1, r2]
 800a4de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a4e2:	7b3a      	ldrb	r2, [r7, #12]
 800a4e4:	490f      	ldr	r1, [pc, #60]	; (800a524 <UARTEx_SetNbDataToProcess+0x98>)
 800a4e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a4e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4ec:	b29a      	uxth	r2, r3
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4f4:	7bfb      	ldrb	r3, [r7, #15]
 800a4f6:	7b7a      	ldrb	r2, [r7, #13]
 800a4f8:	4909      	ldr	r1, [pc, #36]	; (800a520 <UARTEx_SetNbDataToProcess+0x94>)
 800a4fa:	5c8a      	ldrb	r2, [r1, r2]
 800a4fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a500:	7b7a      	ldrb	r2, [r7, #13]
 800a502:	4908      	ldr	r1, [pc, #32]	; (800a524 <UARTEx_SetNbDataToProcess+0x98>)
 800a504:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a506:	fb93 f3f2 	sdiv	r3, r3, r2
 800a50a:	b29a      	uxth	r2, r3
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a512:	bf00      	nop
 800a514:	3714      	adds	r7, #20
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr
 800a51e:	bf00      	nop
 800a520:	08010e38 	.word	0x08010e38
 800a524:	08010e40 	.word	0x08010e40

0800a528 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a528:	b480      	push	{r7}
 800a52a:	b083      	sub	sp, #12
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d121      	bne.n	800a57e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681a      	ldr	r2, [r3, #0]
 800a53e:	4b27      	ldr	r3, [pc, #156]	; (800a5dc <FMC_SDRAM_Init+0xb4>)
 800a540:	4013      	ands	r3, r2
 800a542:	683a      	ldr	r2, [r7, #0]
 800a544:	6851      	ldr	r1, [r2, #4]
 800a546:	683a      	ldr	r2, [r7, #0]
 800a548:	6892      	ldr	r2, [r2, #8]
 800a54a:	4311      	orrs	r1, r2
 800a54c:	683a      	ldr	r2, [r7, #0]
 800a54e:	68d2      	ldr	r2, [r2, #12]
 800a550:	4311      	orrs	r1, r2
 800a552:	683a      	ldr	r2, [r7, #0]
 800a554:	6912      	ldr	r2, [r2, #16]
 800a556:	4311      	orrs	r1, r2
 800a558:	683a      	ldr	r2, [r7, #0]
 800a55a:	6952      	ldr	r2, [r2, #20]
 800a55c:	4311      	orrs	r1, r2
 800a55e:	683a      	ldr	r2, [r7, #0]
 800a560:	6992      	ldr	r2, [r2, #24]
 800a562:	4311      	orrs	r1, r2
 800a564:	683a      	ldr	r2, [r7, #0]
 800a566:	69d2      	ldr	r2, [r2, #28]
 800a568:	4311      	orrs	r1, r2
 800a56a:	683a      	ldr	r2, [r7, #0]
 800a56c:	6a12      	ldr	r2, [r2, #32]
 800a56e:	4311      	orrs	r1, r2
 800a570:	683a      	ldr	r2, [r7, #0]
 800a572:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a574:	430a      	orrs	r2, r1
 800a576:	431a      	orrs	r2, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	601a      	str	r2, [r3, #0]
 800a57c:	e026      	b.n	800a5cc <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	69d9      	ldr	r1, [r3, #28]
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	6a1b      	ldr	r3, [r3, #32]
 800a58e:	4319      	orrs	r1, r3
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a594:	430b      	orrs	r3, r1
 800a596:	431a      	orrs	r2, r3
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	685a      	ldr	r2, [r3, #4]
 800a5a0:	4b0e      	ldr	r3, [pc, #56]	; (800a5dc <FMC_SDRAM_Init+0xb4>)
 800a5a2:	4013      	ands	r3, r2
 800a5a4:	683a      	ldr	r2, [r7, #0]
 800a5a6:	6851      	ldr	r1, [r2, #4]
 800a5a8:	683a      	ldr	r2, [r7, #0]
 800a5aa:	6892      	ldr	r2, [r2, #8]
 800a5ac:	4311      	orrs	r1, r2
 800a5ae:	683a      	ldr	r2, [r7, #0]
 800a5b0:	68d2      	ldr	r2, [r2, #12]
 800a5b2:	4311      	orrs	r1, r2
 800a5b4:	683a      	ldr	r2, [r7, #0]
 800a5b6:	6912      	ldr	r2, [r2, #16]
 800a5b8:	4311      	orrs	r1, r2
 800a5ba:	683a      	ldr	r2, [r7, #0]
 800a5bc:	6952      	ldr	r2, [r2, #20]
 800a5be:	4311      	orrs	r1, r2
 800a5c0:	683a      	ldr	r2, [r7, #0]
 800a5c2:	6992      	ldr	r2, [r2, #24]
 800a5c4:	430a      	orrs	r2, r1
 800a5c6:	431a      	orrs	r2, r3
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a5cc:	2300      	movs	r3, #0
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	370c      	adds	r7, #12
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr
 800a5da:	bf00      	nop
 800a5dc:	ffff8000 	.word	0xffff8000

0800a5e0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b085      	sub	sp, #20
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d128      	bne.n	800a644 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	689b      	ldr	r3, [r3, #8]
 800a5f6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	1e59      	subs	r1, r3, #1
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	3b01      	subs	r3, #1
 800a606:	011b      	lsls	r3, r3, #4
 800a608:	4319      	orrs	r1, r3
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	689b      	ldr	r3, [r3, #8]
 800a60e:	3b01      	subs	r3, #1
 800a610:	021b      	lsls	r3, r3, #8
 800a612:	4319      	orrs	r1, r3
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	68db      	ldr	r3, [r3, #12]
 800a618:	3b01      	subs	r3, #1
 800a61a:	031b      	lsls	r3, r3, #12
 800a61c:	4319      	orrs	r1, r3
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	691b      	ldr	r3, [r3, #16]
 800a622:	3b01      	subs	r3, #1
 800a624:	041b      	lsls	r3, r3, #16
 800a626:	4319      	orrs	r1, r3
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	695b      	ldr	r3, [r3, #20]
 800a62c:	3b01      	subs	r3, #1
 800a62e:	051b      	lsls	r3, r3, #20
 800a630:	4319      	orrs	r1, r3
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	699b      	ldr	r3, [r3, #24]
 800a636:	3b01      	subs	r3, #1
 800a638:	061b      	lsls	r3, r3, #24
 800a63a:	430b      	orrs	r3, r1
 800a63c:	431a      	orrs	r2, r3
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	609a      	str	r2, [r3, #8]
 800a642:	e02d      	b.n	800a6a0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	689a      	ldr	r2, [r3, #8]
 800a648:	4b19      	ldr	r3, [pc, #100]	; (800a6b0 <FMC_SDRAM_Timing_Init+0xd0>)
 800a64a:	4013      	ands	r3, r2
 800a64c:	68ba      	ldr	r2, [r7, #8]
 800a64e:	68d2      	ldr	r2, [r2, #12]
 800a650:	3a01      	subs	r2, #1
 800a652:	0311      	lsls	r1, r2, #12
 800a654:	68ba      	ldr	r2, [r7, #8]
 800a656:	6952      	ldr	r2, [r2, #20]
 800a658:	3a01      	subs	r2, #1
 800a65a:	0512      	lsls	r2, r2, #20
 800a65c:	430a      	orrs	r2, r1
 800a65e:	431a      	orrs	r2, r3
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	1e59      	subs	r1, r3, #1
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	3b01      	subs	r3, #1
 800a678:	011b      	lsls	r3, r3, #4
 800a67a:	4319      	orrs	r1, r3
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	689b      	ldr	r3, [r3, #8]
 800a680:	3b01      	subs	r3, #1
 800a682:	021b      	lsls	r3, r3, #8
 800a684:	4319      	orrs	r1, r3
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	691b      	ldr	r3, [r3, #16]
 800a68a:	3b01      	subs	r3, #1
 800a68c:	041b      	lsls	r3, r3, #16
 800a68e:	4319      	orrs	r1, r3
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	699b      	ldr	r3, [r3, #24]
 800a694:	3b01      	subs	r3, #1
 800a696:	061b      	lsls	r3, r3, #24
 800a698:	430b      	orrs	r3, r1
 800a69a:	431a      	orrs	r2, r3
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800a6a0:	2300      	movs	r3, #0
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3714      	adds	r7, #20
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr
 800a6ae:	bf00      	nop
 800a6b0:	ff0f0fff 	.word	0xff0f0fff

0800a6b4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b085      	sub	sp, #20
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	60f8      	str	r0, [r7, #12]
 800a6bc:	60b9      	str	r1, [r7, #8]
 800a6be:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	691a      	ldr	r2, [r3, #16]
 800a6c4:	4b0c      	ldr	r3, [pc, #48]	; (800a6f8 <FMC_SDRAM_SendCommand+0x44>)
 800a6c6:	4013      	ands	r3, r2
 800a6c8:	68ba      	ldr	r2, [r7, #8]
 800a6ca:	6811      	ldr	r1, [r2, #0]
 800a6cc:	68ba      	ldr	r2, [r7, #8]
 800a6ce:	6852      	ldr	r2, [r2, #4]
 800a6d0:	4311      	orrs	r1, r2
 800a6d2:	68ba      	ldr	r2, [r7, #8]
 800a6d4:	6892      	ldr	r2, [r2, #8]
 800a6d6:	3a01      	subs	r2, #1
 800a6d8:	0152      	lsls	r2, r2, #5
 800a6da:	4311      	orrs	r1, r2
 800a6dc:	68ba      	ldr	r2, [r7, #8]
 800a6de:	68d2      	ldr	r2, [r2, #12]
 800a6e0:	0252      	lsls	r2, r2, #9
 800a6e2:	430a      	orrs	r2, r1
 800a6e4:	431a      	orrs	r2, r3
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800a6ea:	2300      	movs	r3, #0
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3714      	adds	r7, #20
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr
 800a6f8:	ffc00000 	.word	0xffc00000

0800a6fc <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b083      	sub	sp, #12
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	695a      	ldr	r2, [r3, #20]
 800a70a:	4b07      	ldr	r3, [pc, #28]	; (800a728 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800a70c:	4013      	ands	r3, r2
 800a70e:	683a      	ldr	r2, [r7, #0]
 800a710:	0052      	lsls	r2, r2, #1
 800a712:	431a      	orrs	r2, r3
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a718:	2300      	movs	r3, #0
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	370c      	adds	r7, #12
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr
 800a726:	bf00      	nop
 800a728:	ffffc001 	.word	0xffffc001

0800a72c <dma2d_transfer_data_r2m>:



//DMA2D传输数据函数
static void dma2d_transfer_data_r2m(uint32_t *addr, uint32_t xSize, uint32_t ySize, uint32_t offsetLine, uint16_t color)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b085      	sub	sp, #20
 800a730:	af00      	add	r7, sp, #0
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	60b9      	str	r1, [r7, #8]
 800a736:	607a      	str	r2, [r7, #4]
 800a738:	603b      	str	r3, [r7, #0]
    DMA2D->CR = DMA2D_R2M;   // dma2d mode: register to memory.
 800a73a:	4b16      	ldr	r3, [pc, #88]	; (800a794 <dma2d_transfer_data_r2m+0x68>)
 800a73c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a740:	601a      	str	r2, [r3, #0]
    DMA2D->OPFCCR = DMA2D_OUTPUT_RGB565;
 800a742:	4b14      	ldr	r3, [pc, #80]	; (800a794 <dma2d_transfer_data_r2m+0x68>)
 800a744:	2202      	movs	r2, #2
 800a746:	635a      	str	r2, [r3, #52]	; 0x34

    DMA2D->OCOLR = color;
 800a748:	4a12      	ldr	r2, [pc, #72]	; (800a794 <dma2d_transfer_data_r2m+0x68>)
 800a74a:	8b3b      	ldrh	r3, [r7, #24]
 800a74c:	6393      	str	r3, [r2, #56]	; 0x38
    DMA2D->OMAR = (uint32_t)addr;
 800a74e:	4a11      	ldr	r2, [pc, #68]	; (800a794 <dma2d_transfer_data_r2m+0x68>)
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	63d3      	str	r3, [r2, #60]	; 0x3c
    DMA2D->OOR = offsetLine;
 800a754:	4a0f      	ldr	r2, [pc, #60]	; (800a794 <dma2d_transfer_data_r2m+0x68>)
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	6413      	str	r3, [r2, #64]	; 0x40
    DMA2D->NLR = (uint32_t)(xSize << 16) | (uint16_t)ySize;
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	041b      	lsls	r3, r3, #16
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	b292      	uxth	r2, r2
 800a762:	4611      	mov	r1, r2
 800a764:	4a0b      	ldr	r2, [pc, #44]	; (800a794 <dma2d_transfer_data_r2m+0x68>)
 800a766:	430b      	orrs	r3, r1
 800a768:	6453      	str	r3, [r2, #68]	; 0x44

    DMA2D->CR |= DMA2D_CR_START;
 800a76a:	4b0a      	ldr	r3, [pc, #40]	; (800a794 <dma2d_transfer_data_r2m+0x68>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4a09      	ldr	r2, [pc, #36]	; (800a794 <dma2d_transfer_data_r2m+0x68>)
 800a770:	f043 0301 	orr.w	r3, r3, #1
 800a774:	6013      	str	r3, [r2, #0]
    while (DMA2D->CR & DMA2D_CR_START);
 800a776:	bf00      	nop
 800a778:	4b06      	ldr	r3, [pc, #24]	; (800a794 <dma2d_transfer_data_r2m+0x68>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f003 0301 	and.w	r3, r3, #1
 800a780:	2b00      	cmp	r3, #0
 800a782:	d1f9      	bne.n	800a778 <dma2d_transfer_data_r2m+0x4c>
}
 800a784:	bf00      	nop
 800a786:	bf00      	nop
 800a788:	3714      	adds	r7, #20
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr
 800a792:	bf00      	nop
 800a794:	52001000 	.word	0x52001000

0800a798 <TFTLCD_clear>:

//清屏函数
void TFTLCD_clear(uint16_t color)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af02      	add	r7, sp, #8
 800a79e:	4603      	mov	r3, r0
 800a7a0:	80fb      	strh	r3, [r7, #6]
#if USE_DMA2D_EN
    dma2d_transfer_data_r2m((uint32_t *)LCD_FRAME_BUFFER, LCD_WIDTH, LCD_HEIGHT, 0, color);
 800a7a2:	88fb      	ldrh	r3, [r7, #6]
 800a7a4:	9300      	str	r3, [sp, #0]
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a7ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a7b0:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
 800a7b4:	f7ff ffba 	bl	800a72c <dma2d_transfer_data_r2m>

    while (i++ < LCD_WIDTH*LCD_HEIGHT) {
        *(ptr+i) = color;
    }
#endif /* USE_DMA2D_EN */
}
 800a7b8:	bf00      	nop
 800a7ba:	3708      	adds	r7, #8
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <lcd_draw_point>:

//画点函数
void lcd_draw_point(uint16_t x, uint16_t y, uint16_t color)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b086      	sub	sp, #24
 800a7c4:	af02      	add	r7, sp, #8
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	80fb      	strh	r3, [r7, #6]
 800a7ca:	460b      	mov	r3, r1
 800a7cc:	80bb      	strh	r3, [r7, #4]
 800a7ce:	4613      	mov	r3, r2
 800a7d0:	807b      	strh	r3, [r7, #2]
    uint32_t pos;
    uint16_t *ptr;

    // check position.
    if (x > LCD_WIDTH || y > LCD_HEIGHT) {
 800a7d2:	88fb      	ldrh	r3, [r7, #6]
 800a7d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7d8:	d817      	bhi.n	800a80a <lcd_draw_point+0x4a>
 800a7da:	88bb      	ldrh	r3, [r7, #4]
 800a7dc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800a7e0:	d813      	bhi.n	800a80a <lcd_draw_point+0x4a>
        return;
    }

    // calculate the position offset in framebuffer.
    pos = x + y*LCD_WIDTH;
 800a7e2:	88fa      	ldrh	r2, [r7, #6]
 800a7e4:	88bb      	ldrh	r3, [r7, #4]
 800a7e6:	029b      	lsls	r3, r3, #10
 800a7e8:	4413      	add	r3, r2
 800a7ea:	60fb      	str	r3, [r7, #12]
    ptr = (uint16_t*)LCD_FRAME_BUFFER;
 800a7ec:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800a7f0:	60bb      	str	r3, [r7, #8]

    // modify the framebuffer.
#if USE_DMA2D_EN
    dma2d_transfer_data_r2m((uint32_t *)(ptr+pos), 1, 1, 0, color);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	005b      	lsls	r3, r3, #1
 800a7f6:	68ba      	ldr	r2, [r7, #8]
 800a7f8:	18d0      	adds	r0, r2, r3
 800a7fa:	887b      	ldrh	r3, [r7, #2]
 800a7fc:	9300      	str	r3, [sp, #0]
 800a7fe:	2300      	movs	r3, #0
 800a800:	2201      	movs	r2, #1
 800a802:	2101      	movs	r1, #1
 800a804:	f7ff ff92 	bl	800a72c <dma2d_transfer_data_r2m>
 800a808:	e000      	b.n	800a80c <lcd_draw_point+0x4c>
        return;
 800a80a:	bf00      	nop
#else
    *(ptr+pos) = color;
#endif /* USE_DMA2D_EN */
}
 800a80c:	3710      	adds	r7, #16
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}

0800a812 <lcd_draw_line>:

void lcd_draw_line(uint16_t X0 ,uint16_t Y0,uint16_t X1,uint16_t Y1,uint16_t color)
{
 800a812:	b590      	push	{r4, r7, lr}
 800a814:	b087      	sub	sp, #28
 800a816:	af00      	add	r7, sp, #0
 800a818:	4604      	mov	r4, r0
 800a81a:	4608      	mov	r0, r1
 800a81c:	4611      	mov	r1, r2
 800a81e:	461a      	mov	r2, r3
 800a820:	4623      	mov	r3, r4
 800a822:	80fb      	strh	r3, [r7, #6]
 800a824:	4603      	mov	r3, r0
 800a826:	80bb      	strh	r3, [r7, #4]
 800a828:	460b      	mov	r3, r1
 800a82a:	807b      	strh	r3, [r7, #2]
 800a82c:	4613      	mov	r3, r2
 800a82e:	803b      	strh	r3, [r7, #0]
    uint16_t X=0,Y=0;
 800a830:	2300      	movs	r3, #0
 800a832:	82fb      	strh	r3, [r7, #22]
 800a834:	2300      	movs	r3, #0
 800a836:	82bb      	strh	r3, [r7, #20]
    int16_t dx=0,dy=0;
 800a838:	2300      	movs	r3, #0
 800a83a:	823b      	strh	r3, [r7, #16]
 800a83c:	2300      	movs	r3, #0
 800a83e:	81fb      	strh	r3, [r7, #14]

    int16_t sub=0;
 800a840:	2300      	movs	r3, #0
 800a842:	827b      	strh	r3, [r7, #18]
    int16_t num=0;
 800a844:	2300      	movs	r3, #0
 800a846:	81bb      	strh	r3, [r7, #12]
    uint16_t temp=0;
 800a848:	2300      	movs	r3, #0
 800a84a:	817b      	strh	r3, [r7, #10]
    if((X0==X1)&&(Y0==Y1))
 800a84c:	88fa      	ldrh	r2, [r7, #6]
 800a84e:	887b      	ldrh	r3, [r7, #2]
 800a850:	429a      	cmp	r2, r3
 800a852:	d104      	bne.n	800a85e <lcd_draw_line+0x4c>
 800a854:	88ba      	ldrh	r2, [r7, #4]
 800a856:	883b      	ldrh	r3, [r7, #0]
 800a858:	429a      	cmp	r2, r3
 800a85a:	f000 80dc 	beq.w	800aa16 <lcd_draw_line+0x204>
    {
            return ;
    }
    dx=abs(X1-X0);
 800a85e:	887a      	ldrh	r2, [r7, #2]
 800a860:	88fb      	ldrh	r3, [r7, #6]
 800a862:	1ad3      	subs	r3, r2, r3
 800a864:	2b00      	cmp	r3, #0
 800a866:	bfb8      	it	lt
 800a868:	425b      	neglt	r3, r3
 800a86a:	823b      	strh	r3, [r7, #16]
    dy=abs(Y1-Y0);
 800a86c:	883a      	ldrh	r2, [r7, #0]
 800a86e:	88bb      	ldrh	r3, [r7, #4]
 800a870:	1ad3      	subs	r3, r2, r3
 800a872:	2b00      	cmp	r3, #0
 800a874:	bfb8      	it	lt
 800a876:	425b      	neglt	r3, r3
 800a878:	81fb      	strh	r3, [r7, #14]
    if(dx>=dy)//斜率小于等于1
 800a87a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800a87e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a882:	429a      	cmp	r2, r3
 800a884:	db63      	blt.n	800a94e <lcd_draw_line+0x13c>
    {
            if(X0>X1) //互换
 800a886:	88fa      	ldrh	r2, [r7, #6]
 800a888:	887b      	ldrh	r3, [r7, #2]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d90b      	bls.n	800a8a6 <lcd_draw_line+0x94>
            {
                    temp=X1;
 800a88e:	887b      	ldrh	r3, [r7, #2]
 800a890:	817b      	strh	r3, [r7, #10]
                    X1=X0;
 800a892:	88fb      	ldrh	r3, [r7, #6]
 800a894:	807b      	strh	r3, [r7, #2]
                    X0=temp;
 800a896:	897b      	ldrh	r3, [r7, #10]
 800a898:	80fb      	strh	r3, [r7, #6]
                    temp=Y1;
 800a89a:	883b      	ldrh	r3, [r7, #0]
 800a89c:	817b      	strh	r3, [r7, #10]
                    Y1=Y0;
 800a89e:	88bb      	ldrh	r3, [r7, #4]
 800a8a0:	803b      	strh	r3, [r7, #0]
                    Y0=temp;
 800a8a2:	897b      	ldrh	r3, [r7, #10]
 800a8a4:	80bb      	strh	r3, [r7, #4]
            }
            dx=abs(X1-X0);
 800a8a6:	887a      	ldrh	r2, [r7, #2]
 800a8a8:	88fb      	ldrh	r3, [r7, #6]
 800a8aa:	1ad3      	subs	r3, r2, r3
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	bfb8      	it	lt
 800a8b0:	425b      	neglt	r3, r3
 800a8b2:	823b      	strh	r3, [r7, #16]
            dy=abs(Y1-Y0);
 800a8b4:	883a      	ldrh	r2, [r7, #0]
 800a8b6:	88bb      	ldrh	r3, [r7, #4]
 800a8b8:	1ad3      	subs	r3, r2, r3
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	bfb8      	it	lt
 800a8be:	425b      	neglt	r3, r3
 800a8c0:	81fb      	strh	r3, [r7, #14]
            num=(Y1-Y0)>0?1:-1;//判断加减
 800a8c2:	883a      	ldrh	r2, [r7, #0]
 800a8c4:	88bb      	ldrh	r3, [r7, #4]
 800a8c6:	1ad3      	subs	r3, r2, r3
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	dd01      	ble.n	800a8d0 <lcd_draw_line+0xbe>
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	e001      	b.n	800a8d4 <lcd_draw_line+0xc2>
 800a8d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a8d4:	81bb      	strh	r3, [r7, #12]
            sub=(dy<<1)-dx;//sub=dy*2-dx;
 800a8d6:	89fb      	ldrh	r3, [r7, #14]
 800a8d8:	005b      	lsls	r3, r3, #1
 800a8da:	b29a      	uxth	r2, r3
 800a8dc:	8a3b      	ldrh	r3, [r7, #16]
 800a8de:	1ad3      	subs	r3, r2, r3
 800a8e0:	b29b      	uxth	r3, r3
 800a8e2:	827b      	strh	r3, [r7, #18]
            lcd_draw_point(X0,Y0,color);//起点
 800a8e4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a8e6:	88b9      	ldrh	r1, [r7, #4]
 800a8e8:	88fb      	ldrh	r3, [r7, #6]
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f7ff ff68 	bl	800a7c0 <lcd_draw_point>
            for(X=X0,Y=Y0;X<=X1;X++)
 800a8f0:	88fb      	ldrh	r3, [r7, #6]
 800a8f2:	82fb      	strh	r3, [r7, #22]
 800a8f4:	88bb      	ldrh	r3, [r7, #4]
 800a8f6:	82bb      	strh	r3, [r7, #20]
 800a8f8:	e024      	b.n	800a944 <lcd_draw_line+0x132>
            {
                    if(sub>0)
 800a8fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	dd10      	ble.n	800a924 <lcd_draw_line+0x112>
                    {
                            Y+=num;
 800a902:	89ba      	ldrh	r2, [r7, #12]
 800a904:	8abb      	ldrh	r3, [r7, #20]
 800a906:	4413      	add	r3, r2
 800a908:	82bb      	strh	r3, [r7, #20]
                            sub+=(dy<<1)-(dx<<1);//sub=2*dy-2*dx
 800a90a:	89fb      	ldrh	r3, [r7, #14]
 800a90c:	005b      	lsls	r3, r3, #1
 800a90e:	b29a      	uxth	r2, r3
 800a910:	8a3b      	ldrh	r3, [r7, #16]
 800a912:	005b      	lsls	r3, r3, #1
 800a914:	b29b      	uxth	r3, r3
 800a916:	1ad3      	subs	r3, r2, r3
 800a918:	b29a      	uxth	r2, r3
 800a91a:	8a7b      	ldrh	r3, [r7, #18]
 800a91c:	4413      	add	r3, r2
 800a91e:	b29b      	uxth	r3, r3
 800a920:	827b      	strh	r3, [r7, #18]
 800a922:	e006      	b.n	800a932 <lcd_draw_line+0x120>
                    }
                    else
                    {
                            sub+=dy<<1;
 800a924:	89fb      	ldrh	r3, [r7, #14]
 800a926:	005b      	lsls	r3, r3, #1
 800a928:	b29a      	uxth	r2, r3
 800a92a:	8a7b      	ldrh	r3, [r7, #18]
 800a92c:	4413      	add	r3, r2
 800a92e:	b29b      	uxth	r3, r3
 800a930:	827b      	strh	r3, [r7, #18]
                    }
                    lcd_draw_point(X,Y,color);//打点
 800a932:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a934:	8ab9      	ldrh	r1, [r7, #20]
 800a936:	8afb      	ldrh	r3, [r7, #22]
 800a938:	4618      	mov	r0, r3
 800a93a:	f7ff ff41 	bl	800a7c0 <lcd_draw_point>
            for(X=X0,Y=Y0;X<=X1;X++)
 800a93e:	8afb      	ldrh	r3, [r7, #22]
 800a940:	3301      	adds	r3, #1
 800a942:	82fb      	strh	r3, [r7, #22]
 800a944:	8afa      	ldrh	r2, [r7, #22]
 800a946:	887b      	ldrh	r3, [r7, #2]
 800a948:	429a      	cmp	r2, r3
 800a94a:	d9d6      	bls.n	800a8fa <lcd_draw_line+0xe8>
 800a94c:	e064      	b.n	800aa18 <lcd_draw_line+0x206>
            }
    }
    else //斜率大于1
    {
            if(Y0>Y1)  //互换
 800a94e:	88ba      	ldrh	r2, [r7, #4]
 800a950:	883b      	ldrh	r3, [r7, #0]
 800a952:	429a      	cmp	r2, r3
 800a954:	d90b      	bls.n	800a96e <lcd_draw_line+0x15c>
            {
                    temp=X1;
 800a956:	887b      	ldrh	r3, [r7, #2]
 800a958:	817b      	strh	r3, [r7, #10]
                    X1=X0;
 800a95a:	88fb      	ldrh	r3, [r7, #6]
 800a95c:	807b      	strh	r3, [r7, #2]
                    X0=temp;
 800a95e:	897b      	ldrh	r3, [r7, #10]
 800a960:	80fb      	strh	r3, [r7, #6]
                    temp=Y1;
 800a962:	883b      	ldrh	r3, [r7, #0]
 800a964:	817b      	strh	r3, [r7, #10]
                    Y1=Y0;
 800a966:	88bb      	ldrh	r3, [r7, #4]
 800a968:	803b      	strh	r3, [r7, #0]
                    Y0=temp;
 800a96a:	897b      	ldrh	r3, [r7, #10]
 800a96c:	80bb      	strh	r3, [r7, #4]
            }
            dx=abs(X1-X0);
 800a96e:	887a      	ldrh	r2, [r7, #2]
 800a970:	88fb      	ldrh	r3, [r7, #6]
 800a972:	1ad3      	subs	r3, r2, r3
 800a974:	2b00      	cmp	r3, #0
 800a976:	bfb8      	it	lt
 800a978:	425b      	neglt	r3, r3
 800a97a:	823b      	strh	r3, [r7, #16]
            dy=abs(Y1-Y0);
 800a97c:	883a      	ldrh	r2, [r7, #0]
 800a97e:	88bb      	ldrh	r3, [r7, #4]
 800a980:	1ad3      	subs	r3, r2, r3
 800a982:	2b00      	cmp	r3, #0
 800a984:	bfb8      	it	lt
 800a986:	425b      	neglt	r3, r3
 800a988:	81fb      	strh	r3, [r7, #14]
            num=(X1-X0)>0?1:-1;//判断加减
 800a98a:	887a      	ldrh	r2, [r7, #2]
 800a98c:	88fb      	ldrh	r3, [r7, #6]
 800a98e:	1ad3      	subs	r3, r2, r3
 800a990:	2b00      	cmp	r3, #0
 800a992:	dd01      	ble.n	800a998 <lcd_draw_line+0x186>
 800a994:	2301      	movs	r3, #1
 800a996:	e001      	b.n	800a99c <lcd_draw_line+0x18a>
 800a998:	f04f 33ff 	mov.w	r3, #4294967295
 800a99c:	81bb      	strh	r3, [r7, #12]
            sub=(dx<<1)-dy;//sub=dy*2-dx;
 800a99e:	8a3b      	ldrh	r3, [r7, #16]
 800a9a0:	005b      	lsls	r3, r3, #1
 800a9a2:	b29a      	uxth	r2, r3
 800a9a4:	89fb      	ldrh	r3, [r7, #14]
 800a9a6:	1ad3      	subs	r3, r2, r3
 800a9a8:	b29b      	uxth	r3, r3
 800a9aa:	827b      	strh	r3, [r7, #18]
            lcd_draw_point(X0,Y0,color);//起点
 800a9ac:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a9ae:	88b9      	ldrh	r1, [r7, #4]
 800a9b0:	88fb      	ldrh	r3, [r7, #6]
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f7ff ff04 	bl	800a7c0 <lcd_draw_point>
            for(X=X0,Y=Y0;Y<=Y1;Y++)
 800a9b8:	88fb      	ldrh	r3, [r7, #6]
 800a9ba:	82fb      	strh	r3, [r7, #22]
 800a9bc:	88bb      	ldrh	r3, [r7, #4]
 800a9be:	82bb      	strh	r3, [r7, #20]
 800a9c0:	e024      	b.n	800aa0c <lcd_draw_line+0x1fa>
            {
                    if(sub>0)
 800a9c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	dd10      	ble.n	800a9ec <lcd_draw_line+0x1da>
                    {
                            X+=num;
 800a9ca:	89ba      	ldrh	r2, [r7, #12]
 800a9cc:	8afb      	ldrh	r3, [r7, #22]
 800a9ce:	4413      	add	r3, r2
 800a9d0:	82fb      	strh	r3, [r7, #22]
                            sub+=(dx<<1)-(dy<<1);//sub=2*dy-2*dx
 800a9d2:	8a3b      	ldrh	r3, [r7, #16]
 800a9d4:	005b      	lsls	r3, r3, #1
 800a9d6:	b29a      	uxth	r2, r3
 800a9d8:	89fb      	ldrh	r3, [r7, #14]
 800a9da:	005b      	lsls	r3, r3, #1
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	1ad3      	subs	r3, r2, r3
 800a9e0:	b29a      	uxth	r2, r3
 800a9e2:	8a7b      	ldrh	r3, [r7, #18]
 800a9e4:	4413      	add	r3, r2
 800a9e6:	b29b      	uxth	r3, r3
 800a9e8:	827b      	strh	r3, [r7, #18]
 800a9ea:	e006      	b.n	800a9fa <lcd_draw_line+0x1e8>
                    }
                    else
                    {
                            sub+=dx<<1;
 800a9ec:	8a3b      	ldrh	r3, [r7, #16]
 800a9ee:	005b      	lsls	r3, r3, #1
 800a9f0:	b29a      	uxth	r2, r3
 800a9f2:	8a7b      	ldrh	r3, [r7, #18]
 800a9f4:	4413      	add	r3, r2
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	827b      	strh	r3, [r7, #18]
                    }
                    lcd_draw_point(X,Y,color);//打点
 800a9fa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a9fc:	8ab9      	ldrh	r1, [r7, #20]
 800a9fe:	8afb      	ldrh	r3, [r7, #22]
 800aa00:	4618      	mov	r0, r3
 800aa02:	f7ff fedd 	bl	800a7c0 <lcd_draw_point>
            for(X=X0,Y=Y0;Y<=Y1;Y++)
 800aa06:	8abb      	ldrh	r3, [r7, #20]
 800aa08:	3301      	adds	r3, #1
 800aa0a:	82bb      	strh	r3, [r7, #20]
 800aa0c:	8aba      	ldrh	r2, [r7, #20]
 800aa0e:	883b      	ldrh	r3, [r7, #0]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d9d6      	bls.n	800a9c2 <lcd_draw_line+0x1b0>
 800aa14:	e000      	b.n	800aa18 <lcd_draw_line+0x206>
            return ;
 800aa16:	bf00      	nop

            }
    }
}
 800aa18:	371c      	adds	r7, #28
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd90      	pop	{r4, r7, pc}

0800aa1e <lcd_draw_circle>:


//画圆  圆心和半径
void lcd_draw_circle(uint16_t x, uint16_t y, uint16_t r,uint16_t color)
{
 800aa1e:	b590      	push	{r4, r7, lr}
 800aa20:	b085      	sub	sp, #20
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	4604      	mov	r4, r0
 800aa26:	4608      	mov	r0, r1
 800aa28:	4611      	mov	r1, r2
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	4623      	mov	r3, r4
 800aa2e:	80fb      	strh	r3, [r7, #6]
 800aa30:	4603      	mov	r3, r0
 800aa32:	80bb      	strh	r3, [r7, #4]
 800aa34:	460b      	mov	r3, r1
 800aa36:	807b      	strh	r3, [r7, #2]
 800aa38:	4613      	mov	r3, r2
 800aa3a:	803b      	strh	r3, [r7, #0]
	uint16_t xm = 0,ym = r;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	81fb      	strh	r3, [r7, #14]
 800aa40:	887b      	ldrh	r3, [r7, #2]
 800aa42:	81bb      	strh	r3, [r7, #12]
//	uint16_t i = 0;
	  //先画出圆在x、y轴上的四个点
	  lcd_draw_point(x,y+r,color);
 800aa44:	88ba      	ldrh	r2, [r7, #4]
 800aa46:	887b      	ldrh	r3, [r7, #2]
 800aa48:	4413      	add	r3, r2
 800aa4a:	b299      	uxth	r1, r3
 800aa4c:	883a      	ldrh	r2, [r7, #0]
 800aa4e:	88fb      	ldrh	r3, [r7, #6]
 800aa50:	4618      	mov	r0, r3
 800aa52:	f7ff feb5 	bl	800a7c0 <lcd_draw_point>
	  lcd_draw_point(x+r,y,color);
 800aa56:	88fa      	ldrh	r2, [r7, #6]
 800aa58:	887b      	ldrh	r3, [r7, #2]
 800aa5a:	4413      	add	r3, r2
 800aa5c:	b29b      	uxth	r3, r3
 800aa5e:	883a      	ldrh	r2, [r7, #0]
 800aa60:	88b9      	ldrh	r1, [r7, #4]
 800aa62:	4618      	mov	r0, r3
 800aa64:	f7ff feac 	bl	800a7c0 <lcd_draw_point>
	  lcd_draw_point(x,y-r,color);
 800aa68:	88ba      	ldrh	r2, [r7, #4]
 800aa6a:	887b      	ldrh	r3, [r7, #2]
 800aa6c:	1ad3      	subs	r3, r2, r3
 800aa6e:	b299      	uxth	r1, r3
 800aa70:	883a      	ldrh	r2, [r7, #0]
 800aa72:	88fb      	ldrh	r3, [r7, #6]
 800aa74:	4618      	mov	r0, r3
 800aa76:	f7ff fea3 	bl	800a7c0 <lcd_draw_point>
	  lcd_draw_point(x-r,y,color);
 800aa7a:	88fa      	ldrh	r2, [r7, #6]
 800aa7c:	887b      	ldrh	r3, [r7, #2]
 800aa7e:	1ad3      	subs	r3, r2, r3
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	883a      	ldrh	r2, [r7, #0]
 800aa84:	88b9      	ldrh	r1, [r7, #4]
 800aa86:	4618      	mov	r0, r3
 800aa88:	f7ff fe9a 	bl	800a7c0 <lcd_draw_point>

	  while(xm<=ym)//判断是否画完
 800aa8c:	e075      	b.n	800ab7a <lcd_draw_circle+0x15c>
	  {
	    if((xm*xm+ym*ym)< (r*r))//在圆内
 800aa8e:	89fb      	ldrh	r3, [r7, #14]
 800aa90:	89fa      	ldrh	r2, [r7, #14]
 800aa92:	fb03 f202 	mul.w	r2, r3, r2
 800aa96:	89bb      	ldrh	r3, [r7, #12]
 800aa98:	89b9      	ldrh	r1, [r7, #12]
 800aa9a:	fb01 f303 	mul.w	r3, r1, r3
 800aa9e:	441a      	add	r2, r3
 800aaa0:	887b      	ldrh	r3, [r7, #2]
 800aaa2:	8879      	ldrh	r1, [r7, #2]
 800aaa4:	fb01 f303 	mul.w	r3, r1, r3
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	da03      	bge.n	800aab4 <lcd_draw_circle+0x96>
	      xm++;
 800aaac:	89fb      	ldrh	r3, [r7, #14]
 800aaae:	3301      	adds	r3, #1
 800aab0:	81fb      	strh	r3, [r7, #14]
 800aab2:	e002      	b.n	800aaba <lcd_draw_circle+0x9c>
	    else   //在圆外
	      ym--;
 800aab4:	89bb      	ldrh	r3, [r7, #12]
 800aab6:	3b01      	subs	r3, #1
 800aab8:	81bb      	strh	r3, [r7, #12]
	    lcd_draw_point(x+xm,y+ym,color);
 800aaba:	88fa      	ldrh	r2, [r7, #6]
 800aabc:	89fb      	ldrh	r3, [r7, #14]
 800aabe:	4413      	add	r3, r2
 800aac0:	b298      	uxth	r0, r3
 800aac2:	88ba      	ldrh	r2, [r7, #4]
 800aac4:	89bb      	ldrh	r3, [r7, #12]
 800aac6:	4413      	add	r3, r2
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	883a      	ldrh	r2, [r7, #0]
 800aacc:	4619      	mov	r1, r3
 800aace:	f7ff fe77 	bl	800a7c0 <lcd_draw_point>
	    lcd_draw_point(x-xm,y+ym,color);
 800aad2:	88fa      	ldrh	r2, [r7, #6]
 800aad4:	89fb      	ldrh	r3, [r7, #14]
 800aad6:	1ad3      	subs	r3, r2, r3
 800aad8:	b298      	uxth	r0, r3
 800aada:	88ba      	ldrh	r2, [r7, #4]
 800aadc:	89bb      	ldrh	r3, [r7, #12]
 800aade:	4413      	add	r3, r2
 800aae0:	b29b      	uxth	r3, r3
 800aae2:	883a      	ldrh	r2, [r7, #0]
 800aae4:	4619      	mov	r1, r3
 800aae6:	f7ff fe6b 	bl	800a7c0 <lcd_draw_point>
	    lcd_draw_point(x-ym,y+xm,color);
 800aaea:	88fa      	ldrh	r2, [r7, #6]
 800aaec:	89bb      	ldrh	r3, [r7, #12]
 800aaee:	1ad3      	subs	r3, r2, r3
 800aaf0:	b298      	uxth	r0, r3
 800aaf2:	88ba      	ldrh	r2, [r7, #4]
 800aaf4:	89fb      	ldrh	r3, [r7, #14]
 800aaf6:	4413      	add	r3, r2
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	883a      	ldrh	r2, [r7, #0]
 800aafc:	4619      	mov	r1, r3
 800aafe:	f7ff fe5f 	bl	800a7c0 <lcd_draw_point>
	    lcd_draw_point(x-ym,y-xm,color);
 800ab02:	88fa      	ldrh	r2, [r7, #6]
 800ab04:	89bb      	ldrh	r3, [r7, #12]
 800ab06:	1ad3      	subs	r3, r2, r3
 800ab08:	b298      	uxth	r0, r3
 800ab0a:	88ba      	ldrh	r2, [r7, #4]
 800ab0c:	89fb      	ldrh	r3, [r7, #14]
 800ab0e:	1ad3      	subs	r3, r2, r3
 800ab10:	b29b      	uxth	r3, r3
 800ab12:	883a      	ldrh	r2, [r7, #0]
 800ab14:	4619      	mov	r1, r3
 800ab16:	f7ff fe53 	bl	800a7c0 <lcd_draw_point>
	    lcd_draw_point(x+ym,y+xm,color);
 800ab1a:	88fa      	ldrh	r2, [r7, #6]
 800ab1c:	89bb      	ldrh	r3, [r7, #12]
 800ab1e:	4413      	add	r3, r2
 800ab20:	b298      	uxth	r0, r3
 800ab22:	88ba      	ldrh	r2, [r7, #4]
 800ab24:	89fb      	ldrh	r3, [r7, #14]
 800ab26:	4413      	add	r3, r2
 800ab28:	b29b      	uxth	r3, r3
 800ab2a:	883a      	ldrh	r2, [r7, #0]
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	f7ff fe47 	bl	800a7c0 <lcd_draw_point>
	    lcd_draw_point(x+ym,y-xm,color);
 800ab32:	88fa      	ldrh	r2, [r7, #6]
 800ab34:	89bb      	ldrh	r3, [r7, #12]
 800ab36:	4413      	add	r3, r2
 800ab38:	b298      	uxth	r0, r3
 800ab3a:	88ba      	ldrh	r2, [r7, #4]
 800ab3c:	89fb      	ldrh	r3, [r7, #14]
 800ab3e:	1ad3      	subs	r3, r2, r3
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	883a      	ldrh	r2, [r7, #0]
 800ab44:	4619      	mov	r1, r3
 800ab46:	f7ff fe3b 	bl	800a7c0 <lcd_draw_point>
	    lcd_draw_point(x+xm,y-ym,color);
 800ab4a:	88fa      	ldrh	r2, [r7, #6]
 800ab4c:	89fb      	ldrh	r3, [r7, #14]
 800ab4e:	4413      	add	r3, r2
 800ab50:	b298      	uxth	r0, r3
 800ab52:	88ba      	ldrh	r2, [r7, #4]
 800ab54:	89bb      	ldrh	r3, [r7, #12]
 800ab56:	1ad3      	subs	r3, r2, r3
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	883a      	ldrh	r2, [r7, #0]
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	f7ff fe2f 	bl	800a7c0 <lcd_draw_point>
	    lcd_draw_point(x-xm,y-ym,color);
 800ab62:	88fa      	ldrh	r2, [r7, #6]
 800ab64:	89fb      	ldrh	r3, [r7, #14]
 800ab66:	1ad3      	subs	r3, r2, r3
 800ab68:	b298      	uxth	r0, r3
 800ab6a:	88ba      	ldrh	r2, [r7, #4]
 800ab6c:	89bb      	ldrh	r3, [r7, #12]
 800ab6e:	1ad3      	subs	r3, r2, r3
 800ab70:	b29b      	uxth	r3, r3
 800ab72:	883a      	ldrh	r2, [r7, #0]
 800ab74:	4619      	mov	r1, r3
 800ab76:	f7ff fe23 	bl	800a7c0 <lcd_draw_point>
	  while(xm<=ym)//判断是否画完
 800ab7a:	89fa      	ldrh	r2, [r7, #14]
 800ab7c:	89bb      	ldrh	r3, [r7, #12]
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d985      	bls.n	800aa8e <lcd_draw_circle+0x70>
	  }
}
 800ab82:	bf00      	nop
 800ab84:	bf00      	nop
 800ab86:	3714      	adds	r7, #20
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd90      	pop	{r4, r7, pc}

0800ab8c <LCD_Draw_Rect>:
 * @param	x2,y2 —— 矩形终点
 * @param	color	—— 颜色
 * @retval	none
 */
void LCD_Draw_Rect(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 800ab8c:	b590      	push	{r4, r7, lr}
 800ab8e:	b085      	sub	sp, #20
 800ab90:	af02      	add	r7, sp, #8
 800ab92:	4604      	mov	r4, r0
 800ab94:	4608      	mov	r0, r1
 800ab96:	4611      	mov	r1, r2
 800ab98:	461a      	mov	r2, r3
 800ab9a:	4623      	mov	r3, r4
 800ab9c:	80fb      	strh	r3, [r7, #6]
 800ab9e:	4603      	mov	r3, r0
 800aba0:	80bb      	strh	r3, [r7, #4]
 800aba2:	460b      	mov	r3, r1
 800aba4:	807b      	strh	r3, [r7, #2]
 800aba6:	4613      	mov	r3, r2
 800aba8:	803b      	strh	r3, [r7, #0]
	lcd_draw_line(x1,y1,x2,y1,color);
 800abaa:	88bc      	ldrh	r4, [r7, #4]
 800abac:	887a      	ldrh	r2, [r7, #2]
 800abae:	88b9      	ldrh	r1, [r7, #4]
 800abb0:	88f8      	ldrh	r0, [r7, #6]
 800abb2:	8b3b      	ldrh	r3, [r7, #24]
 800abb4:	9300      	str	r3, [sp, #0]
 800abb6:	4623      	mov	r3, r4
 800abb8:	f7ff fe2b 	bl	800a812 <lcd_draw_line>
	lcd_draw_line(x1,y1,x1,y2,color);
 800abbc:	883c      	ldrh	r4, [r7, #0]
 800abbe:	88fa      	ldrh	r2, [r7, #6]
 800abc0:	88b9      	ldrh	r1, [r7, #4]
 800abc2:	88f8      	ldrh	r0, [r7, #6]
 800abc4:	8b3b      	ldrh	r3, [r7, #24]
 800abc6:	9300      	str	r3, [sp, #0]
 800abc8:	4623      	mov	r3, r4
 800abca:	f7ff fe22 	bl	800a812 <lcd_draw_line>
	lcd_draw_line(x1,y2,x2,y2,color);
 800abce:	883c      	ldrh	r4, [r7, #0]
 800abd0:	887a      	ldrh	r2, [r7, #2]
 800abd2:	8839      	ldrh	r1, [r7, #0]
 800abd4:	88f8      	ldrh	r0, [r7, #6]
 800abd6:	8b3b      	ldrh	r3, [r7, #24]
 800abd8:	9300      	str	r3, [sp, #0]
 800abda:	4623      	mov	r3, r4
 800abdc:	f7ff fe19 	bl	800a812 <lcd_draw_line>
	lcd_draw_line(x2,y1,x2,y2,color);
 800abe0:	883c      	ldrh	r4, [r7, #0]
 800abe2:	887a      	ldrh	r2, [r7, #2]
 800abe4:	88b9      	ldrh	r1, [r7, #4]
 800abe6:	8878      	ldrh	r0, [r7, #2]
 800abe8:	8b3b      	ldrh	r3, [r7, #24]
 800abea:	9300      	str	r3, [sp, #0]
 800abec:	4623      	mov	r3, r4
 800abee:	f7ff fe10 	bl	800a812 <lcd_draw_line>
}
 800abf2:	bf00      	nop
 800abf4:	370c      	adds	r7, #12
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd90      	pop	{r4, r7, pc}
 800abfa:	0000      	movs	r0, r0
 800abfc:	0000      	movs	r0, r0
	...

0800ac00 <TFTLCD_test>:


void TFTLCD_test(void)
{
 800ac00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac02:	ed2d 8b02 	vpush	{d8}
 800ac06:	b085      	sub	sp, #20
 800ac08:	af02      	add	r7, sp, #8
	uint16_t i,j;
    float alpha = 0.0f;
 800ac0a:	f04f 0300 	mov.w	r3, #0
 800ac0e:	603b      	str	r3, [r7, #0]

    //清屏
	TFTLCD_clear(WHITE);
 800ac10:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ac14:	f7ff fdc0 	bl	800a798 <TFTLCD_clear>

	//用点画线
	for(i=0;i<300;i++)
 800ac18:	2300      	movs	r3, #0
 800ac1a:	80fb      	strh	r3, [r7, #6]
 800ac1c:	e042      	b.n	800aca4 <TFTLCD_test+0xa4>
	{
		lcd_draw_point(512+i,300+i,RED);
 800ac1e:	88fb      	ldrh	r3, [r7, #6]
 800ac20:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ac24:	b298      	uxth	r0, r3
 800ac26:	88fb      	ldrh	r3, [r7, #6]
 800ac28:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800ac32:	4619      	mov	r1, r3
 800ac34:	f7ff fdc4 	bl	800a7c0 <lcd_draw_point>
		HAL_Delay(1);
 800ac38:	2001      	movs	r0, #1
 800ac3a:	f000 ffc3 	bl	800bbc4 <HAL_Delay>
		lcd_draw_point(512-i,300-i,RED);
 800ac3e:	88fb      	ldrh	r3, [r7, #6]
 800ac40:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ac44:	b298      	uxth	r0, r3
 800ac46:	88fb      	ldrh	r3, [r7, #6]
 800ac48:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 800ac4c:	b29b      	uxth	r3, r3
 800ac4e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800ac52:	4619      	mov	r1, r3
 800ac54:	f7ff fdb4 	bl	800a7c0 <lcd_draw_point>
		HAL_Delay(1);
 800ac58:	2001      	movs	r0, #1
 800ac5a:	f000 ffb3 	bl	800bbc4 <HAL_Delay>
		lcd_draw_point(512+i,300-i,RED);
 800ac5e:	88fb      	ldrh	r3, [r7, #6]
 800ac60:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ac64:	b298      	uxth	r0, r3
 800ac66:	88fb      	ldrh	r3, [r7, #6]
 800ac68:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800ac72:	4619      	mov	r1, r3
 800ac74:	f7ff fda4 	bl	800a7c0 <lcd_draw_point>
		HAL_Delay(1);
 800ac78:	2001      	movs	r0, #1
 800ac7a:	f000 ffa3 	bl	800bbc4 <HAL_Delay>
		lcd_draw_point(512-i,300+i,RED);
 800ac7e:	88fb      	ldrh	r3, [r7, #6]
 800ac80:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ac84:	b298      	uxth	r0, r3
 800ac86:	88fb      	ldrh	r3, [r7, #6]
 800ac88:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800ac92:	4619      	mov	r1, r3
 800ac94:	f7ff fd94 	bl	800a7c0 <lcd_draw_point>
		HAL_Delay(1);
 800ac98:	2001      	movs	r0, #1
 800ac9a:	f000 ff93 	bl	800bbc4 <HAL_Delay>
	for(i=0;i<300;i++)
 800ac9e:	88fb      	ldrh	r3, [r7, #6]
 800aca0:	3301      	adds	r3, #1
 800aca2:	80fb      	strh	r3, [r7, #6]
 800aca4:	88fb      	ldrh	r3, [r7, #6]
 800aca6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800acaa:	d3b8      	bcc.n	800ac1e <TFTLCD_test+0x1e>

	}
	for(i=0;i<300;i++)
 800acac:	2300      	movs	r3, #0
 800acae:	80fb      	strh	r3, [r7, #6]
 800acb0:	e042      	b.n	800ad38 <TFTLCD_test+0x138>
	{
		lcd_draw_point(512+i,300+i,WHITE);
 800acb2:	88fb      	ldrh	r3, [r7, #6]
 800acb4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800acb8:	b298      	uxth	r0, r3
 800acba:	88fb      	ldrh	r3, [r7, #6]
 800acbc:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800acc0:	b29b      	uxth	r3, r3
 800acc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800acc6:	4619      	mov	r1, r3
 800acc8:	f7ff fd7a 	bl	800a7c0 <lcd_draw_point>
		HAL_Delay(1);
 800accc:	2001      	movs	r0, #1
 800acce:	f000 ff79 	bl	800bbc4 <HAL_Delay>
		lcd_draw_point(512-i,300-i,WHITE);
 800acd2:	88fb      	ldrh	r3, [r7, #6]
 800acd4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800acd8:	b298      	uxth	r0, r3
 800acda:	88fb      	ldrh	r3, [r7, #6]
 800acdc:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 800ace0:	b29b      	uxth	r3, r3
 800ace2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ace6:	4619      	mov	r1, r3
 800ace8:	f7ff fd6a 	bl	800a7c0 <lcd_draw_point>
		HAL_Delay(1);
 800acec:	2001      	movs	r0, #1
 800acee:	f000 ff69 	bl	800bbc4 <HAL_Delay>
		lcd_draw_point(512+i,300-i,WHITE);
 800acf2:	88fb      	ldrh	r3, [r7, #6]
 800acf4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800acf8:	b298      	uxth	r0, r3
 800acfa:	88fb      	ldrh	r3, [r7, #6]
 800acfc:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 800ad00:	b29b      	uxth	r3, r3
 800ad02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad06:	4619      	mov	r1, r3
 800ad08:	f7ff fd5a 	bl	800a7c0 <lcd_draw_point>
		HAL_Delay(1);
 800ad0c:	2001      	movs	r0, #1
 800ad0e:	f000 ff59 	bl	800bbc4 <HAL_Delay>
		lcd_draw_point(512-i,300+i,WHITE);
 800ad12:	88fb      	ldrh	r3, [r7, #6]
 800ad14:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ad18:	b298      	uxth	r0, r3
 800ad1a:	88fb      	ldrh	r3, [r7, #6]
 800ad1c:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800ad20:	b29b      	uxth	r3, r3
 800ad22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad26:	4619      	mov	r1, r3
 800ad28:	f7ff fd4a 	bl	800a7c0 <lcd_draw_point>
		HAL_Delay(1);
 800ad2c:	2001      	movs	r0, #1
 800ad2e:	f000 ff49 	bl	800bbc4 <HAL_Delay>
	for(i=0;i<300;i++)
 800ad32:	88fb      	ldrh	r3, [r7, #6]
 800ad34:	3301      	adds	r3, #1
 800ad36:	80fb      	strh	r3, [r7, #6]
 800ad38:	88fb      	ldrh	r3, [r7, #6]
 800ad3a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800ad3e:	d3b8      	bcc.n	800acb2 <TFTLCD_test+0xb2>
	}
	//画线
	lcd_draw_line(512,300,1023,599,RED);
 800ad40:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800ad44:	9300      	str	r3, [sp, #0]
 800ad46:	f240 2357 	movw	r3, #599	; 0x257
 800ad4a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800ad4e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800ad52:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ad56:	f7ff fd5c 	bl	800a812 <lcd_draw_line>
	HAL_Delay(300);
 800ad5a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ad5e:	f000 ff31 	bl	800bbc4 <HAL_Delay>
	lcd_draw_line(512,300,1023,0,RED);
 800ad62:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800ad66:	9300      	str	r3, [sp, #0]
 800ad68:	2300      	movs	r3, #0
 800ad6a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800ad6e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800ad72:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ad76:	f7ff fd4c 	bl	800a812 <lcd_draw_line>
	HAL_Delay(300);
 800ad7a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ad7e:	f000 ff21 	bl	800bbc4 <HAL_Delay>
	lcd_draw_line(512,300,0,0,RED);
 800ad82:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800ad86:	9300      	str	r3, [sp, #0]
 800ad88:	2300      	movs	r3, #0
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800ad90:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ad94:	f7ff fd3d 	bl	800a812 <lcd_draw_line>
	HAL_Delay(300);
 800ad98:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ad9c:	f000 ff12 	bl	800bbc4 <HAL_Delay>
	lcd_draw_line(512,300,0,599,RED);
 800ada0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800ada4:	9300      	str	r3, [sp, #0]
 800ada6:	f240 2357 	movw	r3, #599	; 0x257
 800adaa:	2200      	movs	r2, #0
 800adac:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800adb0:	f44f 7000 	mov.w	r0, #512	; 0x200
 800adb4:	f7ff fd2d 	bl	800a812 <lcd_draw_line>
	HAL_Delay(300);
 800adb8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800adbc:	f000 ff02 	bl	800bbc4 <HAL_Delay>
	lcd_draw_line(512,300,0,599,WHITE);
 800adc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800adc4:	9300      	str	r3, [sp, #0]
 800adc6:	f240 2357 	movw	r3, #599	; 0x257
 800adca:	2200      	movs	r2, #0
 800adcc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800add0:	f44f 7000 	mov.w	r0, #512	; 0x200
 800add4:	f7ff fd1d 	bl	800a812 <lcd_draw_line>
	HAL_Delay(300);
 800add8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800addc:	f000 fef2 	bl	800bbc4 <HAL_Delay>
	lcd_draw_line(512,300,0,0,WHITE);
 800ade0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ade4:	9300      	str	r3, [sp, #0]
 800ade6:	2300      	movs	r3, #0
 800ade8:	2200      	movs	r2, #0
 800adea:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800adee:	f44f 7000 	mov.w	r0, #512	; 0x200
 800adf2:	f7ff fd0e 	bl	800a812 <lcd_draw_line>
	HAL_Delay(300);
 800adf6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800adfa:	f000 fee3 	bl	800bbc4 <HAL_Delay>
	lcd_draw_line(512,300,1023,0,WHITE);
 800adfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ae02:	9300      	str	r3, [sp, #0]
 800ae04:	2300      	movs	r3, #0
 800ae06:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800ae0a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800ae0e:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ae12:	f7ff fcfe 	bl	800a812 <lcd_draw_line>
	HAL_Delay(300);
 800ae16:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ae1a:	f000 fed3 	bl	800bbc4 <HAL_Delay>
	lcd_draw_line(512,300,1023,599,WHITE);
 800ae1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ae22:	9300      	str	r3, [sp, #0]
 800ae24:	f240 2357 	movw	r3, #599	; 0x257
 800ae28:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800ae2c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800ae30:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ae34:	f7ff fced 	bl	800a812 <lcd_draw_line>
	HAL_Delay(300);
 800ae38:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ae3c:	f000 fec2 	bl	800bbc4 <HAL_Delay>

	//画正弦波
	for(i=0;i<512;i++)
 800ae40:	2300      	movs	r3, #0
 800ae42:	80fb      	strh	r3, [r7, #6]
 800ae44:	e0b3      	b.n	800afae <TFTLCD_test+0x3ae>
	{
		lcd_draw_line(512+i,300+200*sin(alpha+i*0.035),512+i+1,300+200*sin(alpha+(i+1)*0.035),RED);
 800ae46:	88fb      	ldrh	r3, [r7, #6]
 800ae48:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ae4c:	b29c      	uxth	r4, r3
 800ae4e:	edd7 7a00 	vldr	s15, [r7]
 800ae52:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800ae56:	88fb      	ldrh	r3, [r7, #6]
 800ae58:	ee07 3a90 	vmov	s15, r3
 800ae5c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ae60:	ed9f 5bb9 	vldr	d5, [pc, #740]	; 800b148 <TFTLCD_test+0x548>
 800ae64:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ae68:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ae6c:	eeb0 0b47 	vmov.f64	d0, d7
 800ae70:	f005 f9d6 	bl	8010220 <sin>
 800ae74:	eeb0 7b40 	vmov.f64	d7, d0
 800ae78:	ed9f 6bb1 	vldr	d6, [pc, #708]	; 800b140 <TFTLCD_test+0x540>
 800ae7c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ae80:	ed9f 6bb3 	vldr	d6, [pc, #716]	; 800b150 <TFTLCD_test+0x550>
 800ae84:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ae88:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800ae8c:	ee17 3a90 	vmov	r3, s15
 800ae90:	b29d      	uxth	r5, r3
 800ae92:	88fb      	ldrh	r3, [r7, #6]
 800ae94:	f203 2301 	addw	r3, r3, #513	; 0x201
 800ae98:	b29e      	uxth	r6, r3
 800ae9a:	edd7 7a00 	vldr	s15, [r7]
 800ae9e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800aea2:	88fb      	ldrh	r3, [r7, #6]
 800aea4:	3301      	adds	r3, #1
 800aea6:	ee07 3a90 	vmov	s15, r3
 800aeaa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800aeae:	ed9f 5ba6 	vldr	d5, [pc, #664]	; 800b148 <TFTLCD_test+0x548>
 800aeb2:	ee27 7b05 	vmul.f64	d7, d7, d5
 800aeb6:	ee36 7b07 	vadd.f64	d7, d6, d7
 800aeba:	eeb0 0b47 	vmov.f64	d0, d7
 800aebe:	f005 f9af 	bl	8010220 <sin>
 800aec2:	eeb0 7b40 	vmov.f64	d7, d0
 800aec6:	ed9f 6b9e 	vldr	d6, [pc, #632]	; 800b140 <TFTLCD_test+0x540>
 800aeca:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aece:	ed9f 6ba0 	vldr	d6, [pc, #640]	; 800b150 <TFTLCD_test+0x550>
 800aed2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800aed6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800aeda:	ee17 3a90 	vmov	r3, s15
 800aede:	b29b      	uxth	r3, r3
 800aee0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800aee4:	9200      	str	r2, [sp, #0]
 800aee6:	4632      	mov	r2, r6
 800aee8:	4629      	mov	r1, r5
 800aeea:	4620      	mov	r0, r4
 800aeec:	f7ff fc91 	bl	800a812 <lcd_draw_line>
		HAL_Delay(5);
 800aef0:	2005      	movs	r0, #5
 800aef2:	f000 fe67 	bl	800bbc4 <HAL_Delay>
		lcd_draw_line(512-i,300+200*sin(alpha+i*0.035),512-i-1,300+200*sin(alpha+(i+1)*0.035),RED);
 800aef6:	88fb      	ldrh	r3, [r7, #6]
 800aef8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800aefc:	b29c      	uxth	r4, r3
 800aefe:	edd7 7a00 	vldr	s15, [r7]
 800af02:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800af06:	88fb      	ldrh	r3, [r7, #6]
 800af08:	ee07 3a90 	vmov	s15, r3
 800af0c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800af10:	ed9f 5b8d 	vldr	d5, [pc, #564]	; 800b148 <TFTLCD_test+0x548>
 800af14:	ee27 7b05 	vmul.f64	d7, d7, d5
 800af18:	ee36 7b07 	vadd.f64	d7, d6, d7
 800af1c:	eeb0 0b47 	vmov.f64	d0, d7
 800af20:	f005 f97e 	bl	8010220 <sin>
 800af24:	eeb0 7b40 	vmov.f64	d7, d0
 800af28:	ed9f 6b85 	vldr	d6, [pc, #532]	; 800b140 <TFTLCD_test+0x540>
 800af2c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800af30:	ed9f 6b87 	vldr	d6, [pc, #540]	; 800b150 <TFTLCD_test+0x550>
 800af34:	ee37 7b06 	vadd.f64	d7, d7, d6
 800af38:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800af3c:	ee17 3a90 	vmov	r3, s15
 800af40:	b29d      	uxth	r5, r3
 800af42:	88fb      	ldrh	r3, [r7, #6]
 800af44:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 800af48:	3301      	adds	r3, #1
 800af4a:	b29e      	uxth	r6, r3
 800af4c:	edd7 7a00 	vldr	s15, [r7]
 800af50:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800af54:	88fb      	ldrh	r3, [r7, #6]
 800af56:	3301      	adds	r3, #1
 800af58:	ee07 3a90 	vmov	s15, r3
 800af5c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800af60:	ed9f 5b79 	vldr	d5, [pc, #484]	; 800b148 <TFTLCD_test+0x548>
 800af64:	ee27 7b05 	vmul.f64	d7, d7, d5
 800af68:	ee36 7b07 	vadd.f64	d7, d6, d7
 800af6c:	eeb0 0b47 	vmov.f64	d0, d7
 800af70:	f005 f956 	bl	8010220 <sin>
 800af74:	eeb0 7b40 	vmov.f64	d7, d0
 800af78:	ed9f 6b71 	vldr	d6, [pc, #452]	; 800b140 <TFTLCD_test+0x540>
 800af7c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800af80:	ed9f 6b73 	vldr	d6, [pc, #460]	; 800b150 <TFTLCD_test+0x550>
 800af84:	ee37 7b06 	vadd.f64	d7, d7, d6
 800af88:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800af8c:	ee17 3a90 	vmov	r3, s15
 800af90:	b29b      	uxth	r3, r3
 800af92:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800af96:	9200      	str	r2, [sp, #0]
 800af98:	4632      	mov	r2, r6
 800af9a:	4629      	mov	r1, r5
 800af9c:	4620      	mov	r0, r4
 800af9e:	f7ff fc38 	bl	800a812 <lcd_draw_line>
		HAL_Delay(5);
 800afa2:	2005      	movs	r0, #5
 800afa4:	f000 fe0e 	bl	800bbc4 <HAL_Delay>
	for(i=0;i<512;i++)
 800afa8:	88fb      	ldrh	r3, [r7, #6]
 800afaa:	3301      	adds	r3, #1
 800afac:	80fb      	strh	r3, [r7, #6]
 800afae:	88fb      	ldrh	r3, [r7, #6]
 800afb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afb4:	f4ff af47 	bcc.w	800ae46 <TFTLCD_test+0x246>
	}

	for(i=0;i<512;i++)
 800afb8:	2300      	movs	r3, #0
 800afba:	80fb      	strh	r3, [r7, #6]
 800afbc:	e0b3      	b.n	800b126 <TFTLCD_test+0x526>
	{
		lcd_draw_line(512+i,300+200*sin(alpha+i*0.035),512+i+1,300+200*sin(alpha+(i+1)*0.035),WHITE);
 800afbe:	88fb      	ldrh	r3, [r7, #6]
 800afc0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800afc4:	b29c      	uxth	r4, r3
 800afc6:	edd7 7a00 	vldr	s15, [r7]
 800afca:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800afce:	88fb      	ldrh	r3, [r7, #6]
 800afd0:	ee07 3a90 	vmov	s15, r3
 800afd4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800afd8:	ed9f 5b5b 	vldr	d5, [pc, #364]	; 800b148 <TFTLCD_test+0x548>
 800afdc:	ee27 7b05 	vmul.f64	d7, d7, d5
 800afe0:	ee36 7b07 	vadd.f64	d7, d6, d7
 800afe4:	eeb0 0b47 	vmov.f64	d0, d7
 800afe8:	f005 f91a 	bl	8010220 <sin>
 800afec:	eeb0 7b40 	vmov.f64	d7, d0
 800aff0:	ed9f 6b53 	vldr	d6, [pc, #332]	; 800b140 <TFTLCD_test+0x540>
 800aff4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aff8:	ed9f 6b55 	vldr	d6, [pc, #340]	; 800b150 <TFTLCD_test+0x550>
 800affc:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b000:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800b004:	ee17 3a90 	vmov	r3, s15
 800b008:	b29d      	uxth	r5, r3
 800b00a:	88fb      	ldrh	r3, [r7, #6]
 800b00c:	f203 2301 	addw	r3, r3, #513	; 0x201
 800b010:	b29e      	uxth	r6, r3
 800b012:	edd7 7a00 	vldr	s15, [r7]
 800b016:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800b01a:	88fb      	ldrh	r3, [r7, #6]
 800b01c:	3301      	adds	r3, #1
 800b01e:	ee07 3a90 	vmov	s15, r3
 800b022:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b026:	ed9f 5b48 	vldr	d5, [pc, #288]	; 800b148 <TFTLCD_test+0x548>
 800b02a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b02e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b032:	eeb0 0b47 	vmov.f64	d0, d7
 800b036:	f005 f8f3 	bl	8010220 <sin>
 800b03a:	eeb0 7b40 	vmov.f64	d7, d0
 800b03e:	ed9f 6b40 	vldr	d6, [pc, #256]	; 800b140 <TFTLCD_test+0x540>
 800b042:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b046:	ed9f 6b42 	vldr	d6, [pc, #264]	; 800b150 <TFTLCD_test+0x550>
 800b04a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b04e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800b052:	ee17 3a90 	vmov	r3, s15
 800b056:	b29b      	uxth	r3, r3
 800b058:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b05c:	9200      	str	r2, [sp, #0]
 800b05e:	4632      	mov	r2, r6
 800b060:	4629      	mov	r1, r5
 800b062:	4620      	mov	r0, r4
 800b064:	f7ff fbd5 	bl	800a812 <lcd_draw_line>
		HAL_Delay(5);
 800b068:	2005      	movs	r0, #5
 800b06a:	f000 fdab 	bl	800bbc4 <HAL_Delay>
		lcd_draw_line(512-i,300+200*sin(alpha+i*0.035),512-i-1,300+200*sin(alpha+(i+1)*0.035),WHITE);
 800b06e:	88fb      	ldrh	r3, [r7, #6]
 800b070:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b074:	b29c      	uxth	r4, r3
 800b076:	edd7 7a00 	vldr	s15, [r7]
 800b07a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800b07e:	88fb      	ldrh	r3, [r7, #6]
 800b080:	ee07 3a90 	vmov	s15, r3
 800b084:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b088:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 800b148 <TFTLCD_test+0x548>
 800b08c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b090:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b094:	eeb0 0b47 	vmov.f64	d0, d7
 800b098:	f005 f8c2 	bl	8010220 <sin>
 800b09c:	eeb0 7b40 	vmov.f64	d7, d0
 800b0a0:	ed9f 6b27 	vldr	d6, [pc, #156]	; 800b140 <TFTLCD_test+0x540>
 800b0a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b0a8:	ed9f 6b29 	vldr	d6, [pc, #164]	; 800b150 <TFTLCD_test+0x550>
 800b0ac:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b0b0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800b0b4:	ee17 3a90 	vmov	r3, s15
 800b0b8:	b29d      	uxth	r5, r3
 800b0ba:	88fb      	ldrh	r3, [r7, #6]
 800b0bc:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 800b0c0:	3301      	adds	r3, #1
 800b0c2:	b29e      	uxth	r6, r3
 800b0c4:	edd7 7a00 	vldr	s15, [r7]
 800b0c8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800b0cc:	88fb      	ldrh	r3, [r7, #6]
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	ee07 3a90 	vmov	s15, r3
 800b0d4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b0d8:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 800b148 <TFTLCD_test+0x548>
 800b0dc:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b0e0:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b0e4:	eeb0 0b47 	vmov.f64	d0, d7
 800b0e8:	f005 f89a 	bl	8010220 <sin>
 800b0ec:	eeb0 7b40 	vmov.f64	d7, d0
 800b0f0:	ed9f 6b13 	vldr	d6, [pc, #76]	; 800b140 <TFTLCD_test+0x540>
 800b0f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b0f8:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800b150 <TFTLCD_test+0x550>
 800b0fc:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b100:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800b104:	ee17 3a90 	vmov	r3, s15
 800b108:	b29b      	uxth	r3, r3
 800b10a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b10e:	9200      	str	r2, [sp, #0]
 800b110:	4632      	mov	r2, r6
 800b112:	4629      	mov	r1, r5
 800b114:	4620      	mov	r0, r4
 800b116:	f7ff fb7c 	bl	800a812 <lcd_draw_line>
		HAL_Delay(5);
 800b11a:	2005      	movs	r0, #5
 800b11c:	f000 fd52 	bl	800bbc4 <HAL_Delay>
	for(i=0;i<512;i++)
 800b120:	88fb      	ldrh	r3, [r7, #6]
 800b122:	3301      	adds	r3, #1
 800b124:	80fb      	strh	r3, [r7, #6]
 800b126:	88fb      	ldrh	r3, [r7, #6]
 800b128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b12c:	f4ff af47 	bcc.w	800afbe <TFTLCD_test+0x3be>
	}

	for(j=0;j<250;j++)
 800b130:	2300      	movs	r3, #0
 800b132:	80bb      	strh	r3, [r7, #4]
 800b134:	e0d8      	b.n	800b2e8 <TFTLCD_test+0x6e8>
	{
		for(i=0;i<512;i++)
 800b136:	2300      	movs	r3, #0
 800b138:	80fb      	strh	r3, [r7, #6]
 800b13a:	e0cd      	b.n	800b2d8 <TFTLCD_test+0x6d8>
 800b13c:	f3af 8000 	nop.w
 800b140:	00000000 	.word	0x00000000
 800b144:	40690000 	.word	0x40690000
 800b148:	1eb851ec 	.word	0x1eb851ec
 800b14c:	3fa1eb85 	.word	0x3fa1eb85
 800b150:	00000000 	.word	0x00000000
 800b154:	4072c000 	.word	0x4072c000
		{
			lcd_draw_line(512+i,300+j*sin(alpha+i*0.035),512+i+1,300+j*sin(alpha+(i+1)*0.035),YELLOW);
 800b158:	88fb      	ldrh	r3, [r7, #6]
 800b15a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b15e:	b29c      	uxth	r4, r3
 800b160:	88bb      	ldrh	r3, [r7, #4]
 800b162:	ee07 3a90 	vmov	s15, r3
 800b166:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 800b16a:	edd7 7a00 	vldr	s15, [r7]
 800b16e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800b172:	88fb      	ldrh	r3, [r7, #6]
 800b174:	ee07 3a90 	vmov	s15, r3
 800b178:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b17c:	ed1f 5b0e 	vldr	d5, [pc, #-56]	; 800b148 <TFTLCD_test+0x548>
 800b180:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b184:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b188:	eeb0 0b47 	vmov.f64	d0, d7
 800b18c:	f005 f848 	bl	8010220 <sin>
 800b190:	eeb0 7b40 	vmov.f64	d7, d0
 800b194:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b198:	ed1f 6b13 	vldr	d6, [pc, #-76]	; 800b150 <TFTLCD_test+0x550>
 800b19c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b1a0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800b1a4:	ee17 3a90 	vmov	r3, s15
 800b1a8:	b29d      	uxth	r5, r3
 800b1aa:	88fb      	ldrh	r3, [r7, #6]
 800b1ac:	f203 2301 	addw	r3, r3, #513	; 0x201
 800b1b0:	b29e      	uxth	r6, r3
 800b1b2:	88bb      	ldrh	r3, [r7, #4]
 800b1b4:	ee07 3a90 	vmov	s15, r3
 800b1b8:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 800b1bc:	edd7 7a00 	vldr	s15, [r7]
 800b1c0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800b1c4:	88fb      	ldrh	r3, [r7, #6]
 800b1c6:	3301      	adds	r3, #1
 800b1c8:	ee07 3a90 	vmov	s15, r3
 800b1cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b1d0:	ed1f 5b23 	vldr	d5, [pc, #-140]	; 800b148 <TFTLCD_test+0x548>
 800b1d4:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b1d8:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b1dc:	eeb0 0b47 	vmov.f64	d0, d7
 800b1e0:	f005 f81e 	bl	8010220 <sin>
 800b1e4:	eeb0 7b40 	vmov.f64	d7, d0
 800b1e8:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b1ec:	ed1f 6b28 	vldr	d6, [pc, #-160]	; 800b150 <TFTLCD_test+0x550>
 800b1f0:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b1f4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800b1f8:	ee17 3a90 	vmov	r3, s15
 800b1fc:	b29b      	uxth	r3, r3
 800b1fe:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800b202:	9200      	str	r2, [sp, #0]
 800b204:	4632      	mov	r2, r6
 800b206:	4629      	mov	r1, r5
 800b208:	4620      	mov	r0, r4
 800b20a:	f7ff fb02 	bl	800a812 <lcd_draw_line>
			user_delay_us(20);
 800b20e:	2014      	movs	r0, #20
 800b210:	f000 fc64 	bl	800badc <user_delay_us>
			lcd_draw_line(512-i,300+j*sin(alpha+i*0.035),512-i-1,300+j*sin(alpha+(i+1)*0.035),YELLOW);
 800b214:	88fb      	ldrh	r3, [r7, #6]
 800b216:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b21a:	b29c      	uxth	r4, r3
 800b21c:	88bb      	ldrh	r3, [r7, #4]
 800b21e:	ee07 3a90 	vmov	s15, r3
 800b222:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 800b226:	edd7 7a00 	vldr	s15, [r7]
 800b22a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800b22e:	88fb      	ldrh	r3, [r7, #6]
 800b230:	ee07 3a90 	vmov	s15, r3
 800b234:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b238:	ed1f 5b3d 	vldr	d5, [pc, #-244]	; 800b148 <TFTLCD_test+0x548>
 800b23c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b240:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b244:	eeb0 0b47 	vmov.f64	d0, d7
 800b248:	f004 ffea 	bl	8010220 <sin>
 800b24c:	eeb0 7b40 	vmov.f64	d7, d0
 800b250:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b254:	ed1f 6b42 	vldr	d6, [pc, #-264]	; 800b150 <TFTLCD_test+0x550>
 800b258:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b25c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800b260:	ee17 3a90 	vmov	r3, s15
 800b264:	b29d      	uxth	r5, r3
 800b266:	88fb      	ldrh	r3, [r7, #6]
 800b268:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 800b26c:	3301      	adds	r3, #1
 800b26e:	b29e      	uxth	r6, r3
 800b270:	88bb      	ldrh	r3, [r7, #4]
 800b272:	ee07 3a90 	vmov	s15, r3
 800b276:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 800b27a:	edd7 7a00 	vldr	s15, [r7]
 800b27e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800b282:	88fb      	ldrh	r3, [r7, #6]
 800b284:	3301      	adds	r3, #1
 800b286:	ee07 3a90 	vmov	s15, r3
 800b28a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b28e:	ed1f 5b52 	vldr	d5, [pc, #-328]	; 800b148 <TFTLCD_test+0x548>
 800b292:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b296:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b29a:	eeb0 0b47 	vmov.f64	d0, d7
 800b29e:	f004 ffbf 	bl	8010220 <sin>
 800b2a2:	eeb0 7b40 	vmov.f64	d7, d0
 800b2a6:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b2aa:	ed1f 6b57 	vldr	d6, [pc, #-348]	; 800b150 <TFTLCD_test+0x550>
 800b2ae:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b2b2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800b2b6:	ee17 3a90 	vmov	r3, s15
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800b2c0:	9200      	str	r2, [sp, #0]
 800b2c2:	4632      	mov	r2, r6
 800b2c4:	4629      	mov	r1, r5
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	f7ff faa3 	bl	800a812 <lcd_draw_line>
			user_delay_us(20);
 800b2cc:	2014      	movs	r0, #20
 800b2ce:	f000 fc05 	bl	800badc <user_delay_us>
		for(i=0;i<512;i++)
 800b2d2:	88fb      	ldrh	r3, [r7, #6]
 800b2d4:	3301      	adds	r3, #1
 800b2d6:	80fb      	strh	r3, [r7, #6]
 800b2d8:	88fb      	ldrh	r3, [r7, #6]
 800b2da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2de:	f4ff af3b 	bcc.w	800b158 <TFTLCD_test+0x558>
	for(j=0;j<250;j++)
 800b2e2:	88bb      	ldrh	r3, [r7, #4]
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	80bb      	strh	r3, [r7, #4]
 800b2e8:	88bb      	ldrh	r3, [r7, #4]
 800b2ea:	2bf9      	cmp	r3, #249	; 0xf9
 800b2ec:	f67f af23 	bls.w	800b136 <TFTLCD_test+0x536>
		}
	}
	for(j=0;j<250;j++)
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	80bb      	strh	r3, [r7, #4]
 800b2f4:	e0ca      	b.n	800b48c <TFTLCD_test+0x88c>
	{
		for(i=0;i<512;i++)
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	80fb      	strh	r3, [r7, #6]
 800b2fa:	e0bf      	b.n	800b47c <TFTLCD_test+0x87c>
		{
			lcd_draw_line(512+i,300+j*sin(alpha+i*0.035),512+i+1,300+j*sin(alpha+(i+1)*0.035),WHITE);
 800b2fc:	88fb      	ldrh	r3, [r7, #6]
 800b2fe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b302:	b29c      	uxth	r4, r3
 800b304:	88bb      	ldrh	r3, [r7, #4]
 800b306:	ee07 3a90 	vmov	s15, r3
 800b30a:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 800b30e:	edd7 7a00 	vldr	s15, [r7]
 800b312:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800b316:	88fb      	ldrh	r3, [r7, #6]
 800b318:	ee07 3a90 	vmov	s15, r3
 800b31c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b320:	ed1f 5b77 	vldr	d5, [pc, #-476]	; 800b148 <TFTLCD_test+0x548>
 800b324:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b328:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b32c:	eeb0 0b47 	vmov.f64	d0, d7
 800b330:	f004 ff76 	bl	8010220 <sin>
 800b334:	eeb0 7b40 	vmov.f64	d7, d0
 800b338:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b33c:	ed1f 6b7c 	vldr	d6, [pc, #-496]	; 800b150 <TFTLCD_test+0x550>
 800b340:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b344:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800b348:	ee17 3a90 	vmov	r3, s15
 800b34c:	b29d      	uxth	r5, r3
 800b34e:	88fb      	ldrh	r3, [r7, #6]
 800b350:	f203 2301 	addw	r3, r3, #513	; 0x201
 800b354:	b29e      	uxth	r6, r3
 800b356:	88bb      	ldrh	r3, [r7, #4]
 800b358:	ee07 3a90 	vmov	s15, r3
 800b35c:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 800b360:	edd7 7a00 	vldr	s15, [r7]
 800b364:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800b368:	88fb      	ldrh	r3, [r7, #6]
 800b36a:	3301      	adds	r3, #1
 800b36c:	ee07 3a90 	vmov	s15, r3
 800b370:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b374:	ed1f 5b8c 	vldr	d5, [pc, #-560]	; 800b148 <TFTLCD_test+0x548>
 800b378:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b37c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b380:	eeb0 0b47 	vmov.f64	d0, d7
 800b384:	f004 ff4c 	bl	8010220 <sin>
 800b388:	eeb0 7b40 	vmov.f64	d7, d0
 800b38c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b390:	ed1f 6b91 	vldr	d6, [pc, #-580]	; 800b150 <TFTLCD_test+0x550>
 800b394:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b398:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800b39c:	ee17 3a90 	vmov	r3, s15
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b3a6:	9200      	str	r2, [sp, #0]
 800b3a8:	4632      	mov	r2, r6
 800b3aa:	4629      	mov	r1, r5
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	f7ff fa30 	bl	800a812 <lcd_draw_line>
			user_delay_us(20);
 800b3b2:	2014      	movs	r0, #20
 800b3b4:	f000 fb92 	bl	800badc <user_delay_us>
			lcd_draw_line(512-i,300+j*sin(alpha+i*0.035),512-i-1,300+j*sin(alpha+(i+1)*0.035),WHITE);
 800b3b8:	88fb      	ldrh	r3, [r7, #6]
 800b3ba:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b3be:	b29c      	uxth	r4, r3
 800b3c0:	88bb      	ldrh	r3, [r7, #4]
 800b3c2:	ee07 3a90 	vmov	s15, r3
 800b3c6:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 800b3ca:	edd7 7a00 	vldr	s15, [r7]
 800b3ce:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800b3d2:	88fb      	ldrh	r3, [r7, #6]
 800b3d4:	ee07 3a90 	vmov	s15, r3
 800b3d8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b3dc:	ed1f 5ba6 	vldr	d5, [pc, #-664]	; 800b148 <TFTLCD_test+0x548>
 800b3e0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b3e4:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b3e8:	eeb0 0b47 	vmov.f64	d0, d7
 800b3ec:	f004 ff18 	bl	8010220 <sin>
 800b3f0:	eeb0 7b40 	vmov.f64	d7, d0
 800b3f4:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b3f8:	ed1f 6bab 	vldr	d6, [pc, #-684]	; 800b150 <TFTLCD_test+0x550>
 800b3fc:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b400:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800b404:	ee17 3a90 	vmov	r3, s15
 800b408:	b29d      	uxth	r5, r3
 800b40a:	88fb      	ldrh	r3, [r7, #6]
 800b40c:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 800b410:	3301      	adds	r3, #1
 800b412:	b29e      	uxth	r6, r3
 800b414:	88bb      	ldrh	r3, [r7, #4]
 800b416:	ee07 3a90 	vmov	s15, r3
 800b41a:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 800b41e:	edd7 7a00 	vldr	s15, [r7]
 800b422:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800b426:	88fb      	ldrh	r3, [r7, #6]
 800b428:	3301      	adds	r3, #1
 800b42a:	ee07 3a90 	vmov	s15, r3
 800b42e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b432:	ed1f 5bbb 	vldr	d5, [pc, #-748]	; 800b148 <TFTLCD_test+0x548>
 800b436:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b43a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b43e:	eeb0 0b47 	vmov.f64	d0, d7
 800b442:	f004 feed 	bl	8010220 <sin>
 800b446:	eeb0 7b40 	vmov.f64	d7, d0
 800b44a:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b44e:	ed1f 6bc0 	vldr	d6, [pc, #-768]	; 800b150 <TFTLCD_test+0x550>
 800b452:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b456:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800b45a:	ee17 3a90 	vmov	r3, s15
 800b45e:	b29b      	uxth	r3, r3
 800b460:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b464:	9200      	str	r2, [sp, #0]
 800b466:	4632      	mov	r2, r6
 800b468:	4629      	mov	r1, r5
 800b46a:	4620      	mov	r0, r4
 800b46c:	f7ff f9d1 	bl	800a812 <lcd_draw_line>
			user_delay_us(20);
 800b470:	2014      	movs	r0, #20
 800b472:	f000 fb33 	bl	800badc <user_delay_us>
		for(i=0;i<512;i++)
 800b476:	88fb      	ldrh	r3, [r7, #6]
 800b478:	3301      	adds	r3, #1
 800b47a:	80fb      	strh	r3, [r7, #6]
 800b47c:	88fb      	ldrh	r3, [r7, #6]
 800b47e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b482:	f4ff af3b 	bcc.w	800b2fc <TFTLCD_test+0x6fc>
	for(j=0;j<250;j++)
 800b486:	88bb      	ldrh	r3, [r7, #4]
 800b488:	3301      	adds	r3, #1
 800b48a:	80bb      	strh	r3, [r7, #4]
 800b48c:	88bb      	ldrh	r3, [r7, #4]
 800b48e:	2bf9      	cmp	r3, #249	; 0xf9
 800b490:	f67f af31 	bls.w	800b2f6 <TFTLCD_test+0x6f6>
		}
	}

	//画圆
	for(i=20;i<250;i++)
 800b494:	2314      	movs	r3, #20
 800b496:	80fb      	strh	r3, [r7, #6]
 800b498:	e00e      	b.n	800b4b8 <TFTLCD_test+0x8b8>
	{
	 lcd_draw_circle(512,300,i,RED);
 800b49a:	88fa      	ldrh	r2, [r7, #6]
 800b49c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800b4a0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800b4a4:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b4a8:	f7ff fab9 	bl	800aa1e <lcd_draw_circle>
	 HAL_Delay(10);
 800b4ac:	200a      	movs	r0, #10
 800b4ae:	f000 fb89 	bl	800bbc4 <HAL_Delay>
	for(i=20;i<250;i++)
 800b4b2:	88fb      	ldrh	r3, [r7, #6]
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	80fb      	strh	r3, [r7, #6]
 800b4b8:	88fb      	ldrh	r3, [r7, #6]
 800b4ba:	2bf9      	cmp	r3, #249	; 0xf9
 800b4bc:	d9ed      	bls.n	800b49a <TFTLCD_test+0x89a>
	}
	for(i=20;i<250;i++)
 800b4be:	2314      	movs	r3, #20
 800b4c0:	80fb      	strh	r3, [r7, #6]
 800b4c2:	e00e      	b.n	800b4e2 <TFTLCD_test+0x8e2>
	{
	 lcd_draw_circle(512,300,i,PINK);
 800b4c4:	88fa      	ldrh	r2, [r7, #6]
 800b4c6:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800b4ca:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800b4ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b4d2:	f7ff faa4 	bl	800aa1e <lcd_draw_circle>
	 HAL_Delay(10);
 800b4d6:	200a      	movs	r0, #10
 800b4d8:	f000 fb74 	bl	800bbc4 <HAL_Delay>
	for(i=20;i<250;i++)
 800b4dc:	88fb      	ldrh	r3, [r7, #6]
 800b4de:	3301      	adds	r3, #1
 800b4e0:	80fb      	strh	r3, [r7, #6]
 800b4e2:	88fb      	ldrh	r3, [r7, #6]
 800b4e4:	2bf9      	cmp	r3, #249	; 0xf9
 800b4e6:	d9ed      	bls.n	800b4c4 <TFTLCD_test+0x8c4>
	}
	for(i=20;i<250;i++)
 800b4e8:	2314      	movs	r3, #20
 800b4ea:	80fb      	strh	r3, [r7, #6]
 800b4ec:	e00e      	b.n	800b50c <TFTLCD_test+0x90c>
	{
	 lcd_draw_circle(512,300,i,YELLOW);
 800b4ee:	88fa      	ldrh	r2, [r7, #6]
 800b4f0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800b4f4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800b4f8:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b4fc:	f7ff fa8f 	bl	800aa1e <lcd_draw_circle>
	 HAL_Delay(10);
 800b500:	200a      	movs	r0, #10
 800b502:	f000 fb5f 	bl	800bbc4 <HAL_Delay>
	for(i=20;i<250;i++)
 800b506:	88fb      	ldrh	r3, [r7, #6]
 800b508:	3301      	adds	r3, #1
 800b50a:	80fb      	strh	r3, [r7, #6]
 800b50c:	88fb      	ldrh	r3, [r7, #6]
 800b50e:	2bf9      	cmp	r3, #249	; 0xf9
 800b510:	d9ed      	bls.n	800b4ee <TFTLCD_test+0x8ee>
	}
	for(i=20;i<250;i++)
 800b512:	2314      	movs	r3, #20
 800b514:	80fb      	strh	r3, [r7, #6]
 800b516:	e00e      	b.n	800b536 <TFTLCD_test+0x936>
	{
	 lcd_draw_circle(512,300,i,WHITE);
 800b518:	88fa      	ldrh	r2, [r7, #6]
 800b51a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b51e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800b522:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b526:	f7ff fa7a 	bl	800aa1e <lcd_draw_circle>
	 HAL_Delay(10);
 800b52a:	200a      	movs	r0, #10
 800b52c:	f000 fb4a 	bl	800bbc4 <HAL_Delay>
	for(i=20;i<250;i++)
 800b530:	88fb      	ldrh	r3, [r7, #6]
 800b532:	3301      	adds	r3, #1
 800b534:	80fb      	strh	r3, [r7, #6]
 800b536:	88fb      	ldrh	r3, [r7, #6]
 800b538:	2bf9      	cmp	r3, #249	; 0xf9
 800b53a:	d9ed      	bls.n	800b518 <TFTLCD_test+0x918>
	}
	//画矩形
	for(i=0;i<250;i++)
 800b53c:	2300      	movs	r3, #0
 800b53e:	80fb      	strh	r3, [r7, #6]
 800b540:	e019      	b.n	800b576 <TFTLCD_test+0x976>
	{
		LCD_Draw_Rect(312+i,100+i,712-i,500-i,RED);
 800b542:	88fb      	ldrh	r3, [r7, #6]
 800b544:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800b548:	b298      	uxth	r0, r3
 800b54a:	88fb      	ldrh	r3, [r7, #6]
 800b54c:	3364      	adds	r3, #100	; 0x64
 800b54e:	b299      	uxth	r1, r3
 800b550:	88fb      	ldrh	r3, [r7, #6]
 800b552:	f5c3 7332 	rsb	r3, r3, #712	; 0x2c8
 800b556:	b29a      	uxth	r2, r3
 800b558:	88fb      	ldrh	r3, [r7, #6]
 800b55a:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 800b55e:	b29b      	uxth	r3, r3
 800b560:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 800b564:	9400      	str	r4, [sp, #0]
 800b566:	f7ff fb11 	bl	800ab8c <LCD_Draw_Rect>
		HAL_Delay(10);
 800b56a:	200a      	movs	r0, #10
 800b56c:	f000 fb2a 	bl	800bbc4 <HAL_Delay>
	for(i=0;i<250;i++)
 800b570:	88fb      	ldrh	r3, [r7, #6]
 800b572:	3301      	adds	r3, #1
 800b574:	80fb      	strh	r3, [r7, #6]
 800b576:	88fb      	ldrh	r3, [r7, #6]
 800b578:	2bf9      	cmp	r3, #249	; 0xf9
 800b57a:	d9e2      	bls.n	800b542 <TFTLCD_test+0x942>
	}
	for(i=0;i<250;i++)
 800b57c:	2300      	movs	r3, #0
 800b57e:	80fb      	strh	r3, [r7, #6]
 800b580:	e019      	b.n	800b5b6 <TFTLCD_test+0x9b6>
	{
		LCD_Draw_Rect(312+i,100+i,712-i,500-i,GREEN);
 800b582:	88fb      	ldrh	r3, [r7, #6]
 800b584:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800b588:	b298      	uxth	r0, r3
 800b58a:	88fb      	ldrh	r3, [r7, #6]
 800b58c:	3364      	adds	r3, #100	; 0x64
 800b58e:	b299      	uxth	r1, r3
 800b590:	88fb      	ldrh	r3, [r7, #6]
 800b592:	f5c3 7332 	rsb	r3, r3, #712	; 0x2c8
 800b596:	b29a      	uxth	r2, r3
 800b598:	88fb      	ldrh	r3, [r7, #6]
 800b59a:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 800b59e:	b29b      	uxth	r3, r3
 800b5a0:	f44f 64fc 	mov.w	r4, #2016	; 0x7e0
 800b5a4:	9400      	str	r4, [sp, #0]
 800b5a6:	f7ff faf1 	bl	800ab8c <LCD_Draw_Rect>
		HAL_Delay(10);
 800b5aa:	200a      	movs	r0, #10
 800b5ac:	f000 fb0a 	bl	800bbc4 <HAL_Delay>
	for(i=0;i<250;i++)
 800b5b0:	88fb      	ldrh	r3, [r7, #6]
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	80fb      	strh	r3, [r7, #6]
 800b5b6:	88fb      	ldrh	r3, [r7, #6]
 800b5b8:	2bf9      	cmp	r3, #249	; 0xf9
 800b5ba:	d9e2      	bls.n	800b582 <TFTLCD_test+0x982>
	}
	for(i=0;i<250;i++)
 800b5bc:	2300      	movs	r3, #0
 800b5be:	80fb      	strh	r3, [r7, #6]
 800b5c0:	e018      	b.n	800b5f4 <TFTLCD_test+0x9f4>
	{
		LCD_Draw_Rect(312+i,100+i,712-i,500-i,BLUE);
 800b5c2:	88fb      	ldrh	r3, [r7, #6]
 800b5c4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800b5c8:	b298      	uxth	r0, r3
 800b5ca:	88fb      	ldrh	r3, [r7, #6]
 800b5cc:	3364      	adds	r3, #100	; 0x64
 800b5ce:	b299      	uxth	r1, r3
 800b5d0:	88fb      	ldrh	r3, [r7, #6]
 800b5d2:	f5c3 7332 	rsb	r3, r3, #712	; 0x2c8
 800b5d6:	b29a      	uxth	r2, r3
 800b5d8:	88fb      	ldrh	r3, [r7, #6]
 800b5da:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 800b5de:	b29b      	uxth	r3, r3
 800b5e0:	241f      	movs	r4, #31
 800b5e2:	9400      	str	r4, [sp, #0]
 800b5e4:	f7ff fad2 	bl	800ab8c <LCD_Draw_Rect>
		HAL_Delay(10);
 800b5e8:	200a      	movs	r0, #10
 800b5ea:	f000 faeb 	bl	800bbc4 <HAL_Delay>
	for(i=0;i<250;i++)
 800b5ee:	88fb      	ldrh	r3, [r7, #6]
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	80fb      	strh	r3, [r7, #6]
 800b5f4:	88fb      	ldrh	r3, [r7, #6]
 800b5f6:	2bf9      	cmp	r3, #249	; 0xf9
 800b5f8:	d9e3      	bls.n	800b5c2 <TFTLCD_test+0x9c2>
	}
	for(i=0;i<250;i++)
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	80fb      	strh	r3, [r7, #6]
 800b5fe:	e019      	b.n	800b634 <TFTLCD_test+0xa34>
	{
		LCD_Draw_Rect(312+i,100+i,712-i,500-i,WHITE);
 800b600:	88fb      	ldrh	r3, [r7, #6]
 800b602:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800b606:	b298      	uxth	r0, r3
 800b608:	88fb      	ldrh	r3, [r7, #6]
 800b60a:	3364      	adds	r3, #100	; 0x64
 800b60c:	b299      	uxth	r1, r3
 800b60e:	88fb      	ldrh	r3, [r7, #6]
 800b610:	f5c3 7332 	rsb	r3, r3, #712	; 0x2c8
 800b614:	b29a      	uxth	r2, r3
 800b616:	88fb      	ldrh	r3, [r7, #6]
 800b618:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 800b61c:	b29b      	uxth	r3, r3
 800b61e:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800b622:	9400      	str	r4, [sp, #0]
 800b624:	f7ff fab2 	bl	800ab8c <LCD_Draw_Rect>
		HAL_Delay(10);
 800b628:	200a      	movs	r0, #10
 800b62a:	f000 facb 	bl	800bbc4 <HAL_Delay>
	for(i=0;i<250;i++)
 800b62e:	88fb      	ldrh	r3, [r7, #6]
 800b630:	3301      	adds	r3, #1
 800b632:	80fb      	strh	r3, [r7, #6]
 800b634:	88fb      	ldrh	r3, [r7, #6]
 800b636:	2bf9      	cmp	r3, #249	; 0xf9
 800b638:	d9e2      	bls.n	800b600 <TFTLCD_test+0xa00>
	}
	HAL_Delay(1000);
 800b63a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b63e:	f000 fac1 	bl	800bbc4 <HAL_Delay>

}
 800b642:	bf00      	nop
 800b644:	370c      	adds	r7, #12
 800b646:	46bd      	mov	sp, r7
 800b648:	ecbd 8b02 	vpop	{d8}
 800b64c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b64e:	bf00      	nop

0800b650 <QSPI_Send_CMD>:
//	addressMode:地址模式; QSPI_ADDRESS_NONE,QSPI_ADDRESS_1_LINE,QSPI_ADDRESS_2_LINE,QSPI_ADDRESS_4_LINE
//	addressSize:地址长度;QSPI_ADDRESS_8_BITS,QSPI_ADDRESS_16_BITS,QSPI_ADDRESS_24_BITS,QSPI_ADDRESS_32_BITS
//	dataMode:数据模式; QSPI_DATA_NONE,QSPI_DATA_1_LINE,QSPI_DATA_2_LINE,QSPI_DATA_4_LINE

void QSPI_Send_CMD(uint32_t instruction,uint32_t address,uint32_t dummyCycles,uint32_t instructionMode,uint32_t addressMode,uint32_t addressSize,uint32_t dataMode)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b092      	sub	sp, #72	; 0x48
 800b654:	af00      	add	r7, sp, #0
 800b656:	60f8      	str	r0, [r7, #12]
 800b658:	60b9      	str	r1, [r7, #8]
 800b65a:	607a      	str	r2, [r7, #4]
 800b65c:	603b      	str	r3, [r7, #0]
    QSPI_CommandTypeDef Cmdhandler;

    Cmdhandler.Instruction=instruction;                 	//指令
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	613b      	str	r3, [r7, #16]
    Cmdhandler.Address=address;                            	//地址
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	617b      	str	r3, [r7, #20]
    Cmdhandler.DummyCycles=dummyCycles;                     //设置空指令周期数
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	627b      	str	r3, [r7, #36]	; 0x24
    Cmdhandler.InstructionMode=instructionMode;				//指令模式
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	62bb      	str	r3, [r7, #40]	; 0x28
    Cmdhandler.AddressMode=addressMode;   					//地址模式
 800b66e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b670:	62fb      	str	r3, [r7, #44]	; 0x2c
    Cmdhandler.AddressSize=addressSize;   					//地址长度
 800b672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b674:	61fb      	str	r3, [r7, #28]
    Cmdhandler.DataMode=dataMode;             				//数据模式
 800b676:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b678:	637b      	str	r3, [r7, #52]	; 0x34
    Cmdhandler.SIOOMode=QSPI_SIOO_INST_EVERY_CMD;       	//每次都发送指令
 800b67a:	2300      	movs	r3, #0
 800b67c:	647b      	str	r3, [r7, #68]	; 0x44
    Cmdhandler.AlternateByteMode=QSPI_ALTERNATE_BYTES_NONE; //无交替字节
 800b67e:	2300      	movs	r3, #0
 800b680:	633b      	str	r3, [r7, #48]	; 0x30
    Cmdhandler.DdrMode=QSPI_DDR_MODE_DISABLE;           	//关闭DDR模式
 800b682:	2300      	movs	r3, #0
 800b684:	63fb      	str	r3, [r7, #60]	; 0x3c
    Cmdhandler.DdrHoldHalfCycle=QSPI_DDR_HHC_ANALOG_DELAY;
 800b686:	2300      	movs	r3, #0
 800b688:	643b      	str	r3, [r7, #64]	; 0x40

    HAL_QSPI_Command(&hqspi,&Cmdhandler,5000);
 800b68a:	f107 0310 	add.w	r3, r7, #16
 800b68e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b692:	4619      	mov	r1, r3
 800b694:	4803      	ldr	r0, [pc, #12]	; (800b6a4 <QSPI_Send_CMD+0x54>)
 800b696:	f7f8 fa61 	bl	8003b5c <HAL_QSPI_Command>
}
 800b69a:	bf00      	nop
 800b69c:	3748      	adds	r7, #72	; 0x48
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
 800b6a2:	bf00      	nop
 800b6a4:	24000304 	.word	0x24000304

0800b6a8 <QSPI_Receive>:
//buf:接收数据缓冲区首地址
//datalen:要传输的数据长度
//返回值:0,正常
//    其他,错误代码
uint8_t QSPI_Receive(uint8_t* buf,uint32_t datalen)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b082      	sub	sp, #8
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]
	hqspi.Instance->DLR=datalen-1;                           //配置数据长度
 800b6b2:	4b0a      	ldr	r3, [pc, #40]	; (800b6dc <QSPI_Receive+0x34>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	683a      	ldr	r2, [r7, #0]
 800b6b8:	3a01      	subs	r2, #1
 800b6ba:	611a      	str	r2, [r3, #16]
    if(HAL_QSPI_Receive(&hqspi,buf,5000)==HAL_OK) return 0;  //接收数据
 800b6bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6c0:	6879      	ldr	r1, [r7, #4]
 800b6c2:	4806      	ldr	r0, [pc, #24]	; (800b6dc <QSPI_Receive+0x34>)
 800b6c4:	f7f8 fb3a 	bl	8003d3c <HAL_QSPI_Receive>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d101      	bne.n	800b6d2 <QSPI_Receive+0x2a>
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	e000      	b.n	800b6d4 <QSPI_Receive+0x2c>
    else return 1;
 800b6d2:	2301      	movs	r3, #1
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3708      	adds	r7, #8
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}
 800b6dc:	24000304 	.word	0x24000304

0800b6e0 <QSPI_Transmit>:
//buf:发送数据缓冲区首地址
//datalen:要传输的数据长度
//返回值:0,正常
//    其他,错误代码
uint8_t QSPI_Transmit(uint8_t* buf,uint32_t datalen)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b082      	sub	sp, #8
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	6039      	str	r1, [r7, #0]
	hqspi.Instance->DLR=datalen-1;                            //配置数据长度
 800b6ea:	4b0a      	ldr	r3, [pc, #40]	; (800b714 <QSPI_Transmit+0x34>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	683a      	ldr	r2, [r7, #0]
 800b6f0:	3a01      	subs	r2, #1
 800b6f2:	611a      	str	r2, [r3, #16]
    if(HAL_QSPI_Transmit(&hqspi,buf,5000)==HAL_OK) return 0;  //发送数据
 800b6f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6f8:	6879      	ldr	r1, [r7, #4]
 800b6fa:	4806      	ldr	r0, [pc, #24]	; (800b714 <QSPI_Transmit+0x34>)
 800b6fc:	f7f8 fa8c 	bl	8003c18 <HAL_QSPI_Transmit>
 800b700:	4603      	mov	r3, r0
 800b702:	2b00      	cmp	r3, #0
 800b704:	d101      	bne.n	800b70a <QSPI_Transmit+0x2a>
 800b706:	2300      	movs	r3, #0
 800b708:	e000      	b.n	800b70c <QSPI_Transmit+0x2c>
    else return 1;
 800b70a:	2301      	movs	r3, #1
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3708      	adds	r7, #8
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}
 800b714:	24000304 	.word	0x24000304

0800b718 <W25QXX_ReadSR>:
//BIT7      6    5    4   3   2   1   0
//HOLD/RST  DRV1 DRV0 (R) (R) WPS ADP ADS
//regno:状态寄存器号，范:1~3
//返回值:状态寄存器值
uint8_t W25QXX_ReadSR(uint8_t regno)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b088      	sub	sp, #32
 800b71c:	af04      	add	r7, sp, #16
 800b71e:	4603      	mov	r3, r0
 800b720:	71fb      	strb	r3, [r7, #7]
	uint8_t byte=0,command=0;
 800b722:	2300      	movs	r3, #0
 800b724:	73bb      	strb	r3, [r7, #14]
 800b726:	2300      	movs	r3, #0
 800b728:	73fb      	strb	r3, [r7, #15]
    switch(regno)
 800b72a:	79fb      	ldrb	r3, [r7, #7]
 800b72c:	2b03      	cmp	r3, #3
 800b72e:	d00c      	beq.n	800b74a <W25QXX_ReadSR+0x32>
 800b730:	2b03      	cmp	r3, #3
 800b732:	dc0d      	bgt.n	800b750 <W25QXX_ReadSR+0x38>
 800b734:	2b01      	cmp	r3, #1
 800b736:	d002      	beq.n	800b73e <W25QXX_ReadSR+0x26>
 800b738:	2b02      	cmp	r3, #2
 800b73a:	d003      	beq.n	800b744 <W25QXX_ReadSR+0x2c>
 800b73c:	e008      	b.n	800b750 <W25QXX_ReadSR+0x38>
    {
        case 1:
            command=W25X_ReadStatusReg1;    //读状态寄存器1指令
 800b73e:	2305      	movs	r3, #5
 800b740:	73fb      	strb	r3, [r7, #15]
            break;
 800b742:	e008      	b.n	800b756 <W25QXX_ReadSR+0x3e>
        case 2:
            command=W25X_ReadStatusReg2;    //读状态寄存器2指令
 800b744:	2335      	movs	r3, #53	; 0x35
 800b746:	73fb      	strb	r3, [r7, #15]
            break;
 800b748:	e005      	b.n	800b756 <W25QXX_ReadSR+0x3e>
        case 3:
            command=W25X_ReadStatusReg3;    //读状态寄存器3指令
 800b74a:	2315      	movs	r3, #21
 800b74c:	73fb      	strb	r3, [r7, #15]
            break;
 800b74e:	e002      	b.n	800b756 <W25QXX_ReadSR+0x3e>
        default:
            command=W25X_ReadStatusReg1;
 800b750:	2305      	movs	r3, #5
 800b752:	73fb      	strb	r3, [r7, #15]
            break;
 800b754:	bf00      	nop
    }
	if(W25QXX_QPI_MODE)QSPI_Send_CMD(command,0,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_NONE,QSPI_ADDRESS_8_BITS,QSPI_DATA_4_LINES);	//QPI,写command指令,地址为0,4线传数据_8位地址_无地址_4线传输指令,无空周期,1个字节数据
 800b756:	4b16      	ldr	r3, [pc, #88]	; (800b7b0 <W25QXX_ReadSR+0x98>)
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d00e      	beq.n	800b77c <W25QXX_ReadSR+0x64>
 800b75e:	7bf8      	ldrb	r0, [r7, #15]
 800b760:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800b764:	9302      	str	r3, [sp, #8]
 800b766:	2300      	movs	r3, #0
 800b768:	9301      	str	r3, [sp, #4]
 800b76a:	2300      	movs	r3, #0
 800b76c:	9300      	str	r3, [sp, #0]
 800b76e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b772:	2200      	movs	r2, #0
 800b774:	2100      	movs	r1, #0
 800b776:	f7ff ff6b 	bl	800b650 <QSPI_Send_CMD>
 800b77a:	e00d      	b.n	800b798 <W25QXX_ReadSR+0x80>
	else QSPI_Send_CMD(command,0,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_NONE,QSPI_ADDRESS_8_BITS,QSPI_DATA_1_LINE);				//SPI,写command指令,地址为0,单线传数据_8位地址_无地址_单线传输指令,无空周期,1个字节数据
 800b77c:	7bf8      	ldrb	r0, [r7, #15]
 800b77e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b782:	9302      	str	r3, [sp, #8]
 800b784:	2300      	movs	r3, #0
 800b786:	9301      	str	r3, [sp, #4]
 800b788:	2300      	movs	r3, #0
 800b78a:	9300      	str	r3, [sp, #0]
 800b78c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b790:	2200      	movs	r2, #0
 800b792:	2100      	movs	r1, #0
 800b794:	f7ff ff5c 	bl	800b650 <QSPI_Send_CMD>
	QSPI_Receive(&byte,1);
 800b798:	f107 030e 	add.w	r3, r7, #14
 800b79c:	2101      	movs	r1, #1
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7ff ff82 	bl	800b6a8 <QSPI_Receive>
	return byte;
 800b7a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3710      	adds	r7, #16
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
 800b7ae:	bf00      	nop
 800b7b0:	24000504 	.word	0x24000504

0800b7b4 <W25QXX_Write_SR>:

//写W25QXX状态寄存器
void W25QXX_Write_SR(uint8_t regno,uint8_t sr)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b088      	sub	sp, #32
 800b7b8:	af04      	add	r7, sp, #16
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	460a      	mov	r2, r1
 800b7be:	71fb      	strb	r3, [r7, #7]
 800b7c0:	4613      	mov	r3, r2
 800b7c2:	71bb      	strb	r3, [r7, #6]
    uint8_t command=0;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	73fb      	strb	r3, [r7, #15]
    switch(regno)
 800b7c8:	79fb      	ldrb	r3, [r7, #7]
 800b7ca:	2b03      	cmp	r3, #3
 800b7cc:	d00c      	beq.n	800b7e8 <W25QXX_Write_SR+0x34>
 800b7ce:	2b03      	cmp	r3, #3
 800b7d0:	dc0d      	bgt.n	800b7ee <W25QXX_Write_SR+0x3a>
 800b7d2:	2b01      	cmp	r3, #1
 800b7d4:	d002      	beq.n	800b7dc <W25QXX_Write_SR+0x28>
 800b7d6:	2b02      	cmp	r3, #2
 800b7d8:	d003      	beq.n	800b7e2 <W25QXX_Write_SR+0x2e>
 800b7da:	e008      	b.n	800b7ee <W25QXX_Write_SR+0x3a>
    {
        case 1:
            command=W25X_WriteStatusReg1;    //写状态寄存器1指令
 800b7dc:	2301      	movs	r3, #1
 800b7de:	73fb      	strb	r3, [r7, #15]
            break;
 800b7e0:	e008      	b.n	800b7f4 <W25QXX_Write_SR+0x40>
        case 2:
            command=W25X_WriteStatusReg2;    //写状态寄存器2指令
 800b7e2:	2331      	movs	r3, #49	; 0x31
 800b7e4:	73fb      	strb	r3, [r7, #15]
            break;
 800b7e6:	e005      	b.n	800b7f4 <W25QXX_Write_SR+0x40>
        case 3:
            command=W25X_WriteStatusReg3;    //写状态寄存器3指令
 800b7e8:	2311      	movs	r3, #17
 800b7ea:	73fb      	strb	r3, [r7, #15]
            break;
 800b7ec:	e002      	b.n	800b7f4 <W25QXX_Write_SR+0x40>
        default:
            command=W25X_WriteStatusReg1;
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	73fb      	strb	r3, [r7, #15]
            break;
 800b7f2:	bf00      	nop
    }
	if(W25QXX_QPI_MODE)QSPI_Send_CMD(command,0,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_NONE,QSPI_ADDRESS_8_BITS,QSPI_DATA_4_LINES);	//QPI,写command指令,地址为0,4线传数据_8位地址_无地址_4线传输指令,无空周期,1个字节数据
 800b7f4:	4b14      	ldr	r3, [pc, #80]	; (800b848 <W25QXX_Write_SR+0x94>)
 800b7f6:	781b      	ldrb	r3, [r3, #0]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d00e      	beq.n	800b81a <W25QXX_Write_SR+0x66>
 800b7fc:	7bf8      	ldrb	r0, [r7, #15]
 800b7fe:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800b802:	9302      	str	r3, [sp, #8]
 800b804:	2300      	movs	r3, #0
 800b806:	9301      	str	r3, [sp, #4]
 800b808:	2300      	movs	r3, #0
 800b80a:	9300      	str	r3, [sp, #0]
 800b80c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b810:	2200      	movs	r2, #0
 800b812:	2100      	movs	r1, #0
 800b814:	f7ff ff1c 	bl	800b650 <QSPI_Send_CMD>
 800b818:	e00d      	b.n	800b836 <W25QXX_Write_SR+0x82>
	else QSPI_Send_CMD(command,0,0, QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_NONE,QSPI_ADDRESS_8_BITS,QSPI_DATA_1_LINE);				//SPI,写command指令,地址为0,单线传数据_8位地址_无地址_单线传输指令,无空周期,1个字节数据
 800b81a:	7bf8      	ldrb	r0, [r7, #15]
 800b81c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b820:	9302      	str	r3, [sp, #8]
 800b822:	2300      	movs	r3, #0
 800b824:	9301      	str	r3, [sp, #4]
 800b826:	2300      	movs	r3, #0
 800b828:	9300      	str	r3, [sp, #0]
 800b82a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b82e:	2200      	movs	r2, #0
 800b830:	2100      	movs	r1, #0
 800b832:	f7ff ff0d 	bl	800b650 <QSPI_Send_CMD>
	QSPI_Transmit(&sr,1);
 800b836:	1dbb      	adds	r3, r7, #6
 800b838:	2101      	movs	r1, #1
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7ff ff50 	bl	800b6e0 <QSPI_Transmit>
}
 800b840:	bf00      	nop
 800b842:	3710      	adds	r7, #16
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}
 800b848:	24000504 	.word	0x24000504

0800b84c <W25QXX_Qspi_Enable>:

//W25QXX进入QSPI模式
void W25QXX_Qspi_Enable(void)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b086      	sub	sp, #24
 800b850:	af04      	add	r7, sp, #16
	uint8_t stareg2;
	stareg2=W25QXX_ReadSR(2);		//先读出状态寄存器2的原始值
 800b852:	2002      	movs	r0, #2
 800b854:	f7ff ff60 	bl	800b718 <W25QXX_ReadSR>
 800b858:	4603      	mov	r3, r0
 800b85a:	71fb      	strb	r3, [r7, #7]
	if((stareg2&0X02)==0)			//QE位未使能
 800b85c:	79fb      	ldrb	r3, [r7, #7]
 800b85e:	f003 0302 	and.w	r3, r3, #2
 800b862:	2b00      	cmp	r3, #0
 800b864:	d10a      	bne.n	800b87c <W25QXX_Qspi_Enable+0x30>
	{
		W25QXX_Write_Enable();		//写使能
 800b866:	f000 f81f 	bl	800b8a8 <W25QXX_Write_Enable>
		stareg2|=1<<1;				//使能QE位
 800b86a:	79fb      	ldrb	r3, [r7, #7]
 800b86c:	f043 0302 	orr.w	r3, r3, #2
 800b870:	71fb      	strb	r3, [r7, #7]
		W25QXX_Write_SR(2,stareg2);	//写状态寄存器2
 800b872:	79fb      	ldrb	r3, [r7, #7]
 800b874:	4619      	mov	r1, r3
 800b876:	2002      	movs	r0, #2
 800b878:	f7ff ff9c 	bl	800b7b4 <W25QXX_Write_SR>
	}
	QSPI_Send_CMD(W25X_EnterQPIMode,0,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_NONE,QSPI_ADDRESS_8_BITS,QSPI_DATA_NONE);//写command指令,地址为0,无数据_8位地址_无地址_单线传输指令,无空周期,0个字节数据
 800b87c:	2300      	movs	r3, #0
 800b87e:	9302      	str	r3, [sp, #8]
 800b880:	2300      	movs	r3, #0
 800b882:	9301      	str	r3, [sp, #4]
 800b884:	2300      	movs	r3, #0
 800b886:	9300      	str	r3, [sp, #0]
 800b888:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b88c:	2200      	movs	r2, #0
 800b88e:	2100      	movs	r1, #0
 800b890:	2038      	movs	r0, #56	; 0x38
 800b892:	f7ff fedd 	bl	800b650 <QSPI_Send_CMD>
	W25QXX_QPI_MODE=1;				//标记QSPI模式
 800b896:	4b03      	ldr	r3, [pc, #12]	; (800b8a4 <W25QXX_Qspi_Enable+0x58>)
 800b898:	2201      	movs	r2, #1
 800b89a:	701a      	strb	r2, [r3, #0]
}
 800b89c:	bf00      	nop
 800b89e:	3708      	adds	r7, #8
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}
 800b8a4:	24000504 	.word	0x24000504

0800b8a8 <W25QXX_Write_Enable>:

//W25QXX写使能
//将S1寄存器的WEL置位
void W25QXX_Write_Enable(void)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b084      	sub	sp, #16
 800b8ac:	af04      	add	r7, sp, #16
	if(W25QXX_QPI_MODE)QSPI_Send_CMD(W25X_WriteEnable,0,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_NONE,QSPI_ADDRESS_8_BITS,QSPI_DATA_NONE);	//QPI,写使能指令,地址为0,无数据_8位地址_无地址_4线传输指令,无空周期,0个字节数据
 800b8ae:	4b11      	ldr	r3, [pc, #68]	; (800b8f4 <W25QXX_Write_Enable+0x4c>)
 800b8b0:	781b      	ldrb	r3, [r3, #0]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d00d      	beq.n	800b8d2 <W25QXX_Write_Enable+0x2a>
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	9302      	str	r3, [sp, #8]
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	9301      	str	r3, [sp, #4]
 800b8be:	2300      	movs	r3, #0
 800b8c0:	9300      	str	r3, [sp, #0]
 800b8c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	2100      	movs	r1, #0
 800b8ca:	2006      	movs	r0, #6
 800b8cc:	f7ff fec0 	bl	800b650 <QSPI_Send_CMD>
	else QSPI_Send_CMD(W25X_WriteEnable,0,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_NONE,QSPI_ADDRESS_8_BITS,QSPI_DATA_NONE);				//SPI,写使能指令,地址为0,无数据_8位地址_无地址_单线传输指令,无空周期,0个字节数据
}
 800b8d0:	e00c      	b.n	800b8ec <W25QXX_Write_Enable+0x44>
	else QSPI_Send_CMD(W25X_WriteEnable,0,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_NONE,QSPI_ADDRESS_8_BITS,QSPI_DATA_NONE);				//SPI,写使能指令,地址为0,无数据_8位地址_无地址_单线传输指令,无空周期,0个字节数据
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	9302      	str	r3, [sp, #8]
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	9301      	str	r3, [sp, #4]
 800b8da:	2300      	movs	r3, #0
 800b8dc:	9300      	str	r3, [sp, #0]
 800b8de:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	2100      	movs	r1, #0
 800b8e6:	2006      	movs	r0, #6
 800b8e8:	f7ff feb2 	bl	800b650 <QSPI_Send_CMD>
}
 800b8ec:	bf00      	nop
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}
 800b8f2:	bf00      	nop
 800b8f4:	24000504 	.word	0x24000504

0800b8f8 <W25QXX_ReadID>:
//0XEF15,表示芯片型号为W25Q32
//0XEF16,表示芯片型号为W25Q64
//0XEF17,表示芯片型号为W25Q128
//0XEF18,表示芯片型号为W25Q256
uint16_t W25QXX_ReadID(void)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b086      	sub	sp, #24
 800b8fc:	af04      	add	r7, sp, #16
	uint8_t temp[2];
	uint16_t deviceid;
	if(W25QXX_QPI_MODE)QSPI_Send_CMD(W25X_ManufactDeviceID,0,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_4_LINES,QSPI_ADDRESS_24_BITS,QSPI_DATA_4_LINES);//QPI,读id,地址为0,4线传输数据_24位地址_4线传输地址_4线传输指令,无空周期,2个字节数据
 800b8fe:	4b1b      	ldr	r3, [pc, #108]	; (800b96c <W25QXX_ReadID+0x74>)
 800b900:	781b      	ldrb	r3, [r3, #0]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d010      	beq.n	800b928 <W25QXX_ReadID+0x30>
 800b906:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800b90a:	9302      	str	r3, [sp, #8]
 800b90c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b910:	9301      	str	r3, [sp, #4]
 800b912:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b916:	9300      	str	r3, [sp, #0]
 800b918:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b91c:	2200      	movs	r2, #0
 800b91e:	2100      	movs	r1, #0
 800b920:	2090      	movs	r0, #144	; 0x90
 800b922:	f7ff fe95 	bl	800b650 <QSPI_Send_CMD>
 800b926:	e00f      	b.n	800b948 <W25QXX_ReadID+0x50>
	else QSPI_Send_CMD(W25X_ManufactDeviceID,0,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_1_LINE,QSPI_ADDRESS_24_BITS,QSPI_DATA_1_LINE);			//SPI,读id,地址为0,单线传输数据_24位地址_单线传输地址_单线传输指令,无空周期,2个字节数据
 800b928:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b92c:	9302      	str	r3, [sp, #8]
 800b92e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b932:	9301      	str	r3, [sp, #4]
 800b934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b938:	9300      	str	r3, [sp, #0]
 800b93a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b93e:	2200      	movs	r2, #0
 800b940:	2100      	movs	r1, #0
 800b942:	2090      	movs	r0, #144	; 0x90
 800b944:	f7ff fe84 	bl	800b650 <QSPI_Send_CMD>
	QSPI_Receive(temp,2);
 800b948:	1d3b      	adds	r3, r7, #4
 800b94a:	2102      	movs	r1, #2
 800b94c:	4618      	mov	r0, r3
 800b94e:	f7ff feab 	bl	800b6a8 <QSPI_Receive>
	deviceid=(temp[0]<<8)|temp[1];
 800b952:	793b      	ldrb	r3, [r7, #4]
 800b954:	021b      	lsls	r3, r3, #8
 800b956:	b21a      	sxth	r2, r3
 800b958:	797b      	ldrb	r3, [r7, #5]
 800b95a:	b21b      	sxth	r3, r3
 800b95c:	4313      	orrs	r3, r2
 800b95e:	b21b      	sxth	r3, r3
 800b960:	80fb      	strh	r3, [r7, #6]
	return deviceid;
 800b962:	88fb      	ldrh	r3, [r7, #6]
}
 800b964:	4618      	mov	r0, r3
 800b966:	3708      	adds	r7, #8
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}
 800b96c:	24000504 	.word	0x24000504

0800b970 <W25QXX_Init>:

//初始化SPI FLASH的IO口
void W25QXX_Init(void)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b086      	sub	sp, #24
 800b974:	af04      	add	r7, sp, #16
    uint8_t temp;
//	QSPI_Init();					//初始化QSPI
 	W25QXX_Qspi_Enable();			//使能QSPI模式
 800b976:	f7ff ff69 	bl	800b84c <W25QXX_Qspi_Enable>
	W25QXX_TYPE=W25QXX_ReadID();	//读取FLASH ID.
 800b97a:	f7ff ffbd 	bl	800b8f8 <W25QXX_ReadID>
 800b97e:	4603      	mov	r3, r0
 800b980:	461a      	mov	r2, r3
 800b982:	4b1e      	ldr	r3, [pc, #120]	; (800b9fc <W25QXX_Init+0x8c>)
 800b984:	801a      	strh	r2, [r3, #0]
//	printf("ID:%x\r\n",W25QXX_TYPE);
	if(W25QXX_TYPE==W25Q256)        //SPI FLASH为W25Q256
 800b986:	4b1d      	ldr	r3, [pc, #116]	; (800b9fc <W25QXX_Init+0x8c>)
 800b988:	881b      	ldrh	r3, [r3, #0]
 800b98a:	f64e 7218 	movw	r2, #61208	; 0xef18
 800b98e:	4293      	cmp	r3, r2
 800b990:	d12f      	bne.n	800b9f2 <W25QXX_Init+0x82>
    {
        temp=W25QXX_ReadSR(3);      //读取状态寄存器3，判断地址模式
 800b992:	2003      	movs	r0, #3
 800b994:	f7ff fec0 	bl	800b718 <W25QXX_ReadSR>
 800b998:	4603      	mov	r3, r0
 800b99a:	71fb      	strb	r3, [r7, #7]
        if((temp&0X01)==0)			//如果不是4字节地址模式,则进入4字节地址模式
 800b99c:	79fb      	ldrb	r3, [r7, #7]
 800b99e:	f003 0301 	and.w	r3, r3, #1
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d10e      	bne.n	800b9c4 <W25QXX_Init+0x54>
		{
			W25QXX_Write_Enable();	//写使能
 800b9a6:	f7ff ff7f 	bl	800b8a8 <W25QXX_Write_Enable>
			QSPI_Send_CMD(W25X_Enable4ByteAddr,0,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_NONE,QSPI_ADDRESS_8_BITS,QSPI_DATA_NONE);//QPI,使能4字节地址指令,地址为0,无数据_8位地址_无地址_4线传输指令,无空周期,0个字节数据
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	9302      	str	r3, [sp, #8]
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	9301      	str	r3, [sp, #4]
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	9300      	str	r3, [sp, #0]
 800b9b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	2100      	movs	r1, #0
 800b9be:	20b7      	movs	r0, #183	; 0xb7
 800b9c0:	f7ff fe46 	bl	800b650 <QSPI_Send_CMD>
		}
		W25QXX_Write_Enable();		//写使能
 800b9c4:	f7ff ff70 	bl	800b8a8 <W25QXX_Write_Enable>
		QSPI_Send_CMD(W25X_SetReadParam,0,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_NONE,QSPI_ADDRESS_8_BITS,QSPI_DATA_4_LINES); 		//QPI,设置读参数指令,地址为0,4线传数据_8位地址_无地址_4线传输指令,无空周期,1个字节数据
 800b9c8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800b9cc:	9302      	str	r3, [sp, #8]
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	9301      	str	r3, [sp, #4]
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	9300      	str	r3, [sp, #0]
 800b9d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b9da:	2200      	movs	r2, #0
 800b9dc:	2100      	movs	r1, #0
 800b9de:	20c0      	movs	r0, #192	; 0xc0
 800b9e0:	f7ff fe36 	bl	800b650 <QSPI_Send_CMD>
		temp=3<<4;					//设置P4&P5=11,8个dummy clocks,104M
 800b9e4:	2330      	movs	r3, #48	; 0x30
 800b9e6:	71fb      	strb	r3, [r7, #7]
		QSPI_Transmit(&temp,1);		//发送1个字节
 800b9e8:	1dfb      	adds	r3, r7, #7
 800b9ea:	2101      	movs	r1, #1
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f7ff fe77 	bl	800b6e0 <QSPI_Transmit>
    }
}
 800b9f2:	bf00      	nop
 800b9f4:	3708      	adds	r7, #8
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}
 800b9fa:	bf00      	nop
 800b9fc:	2400000e 	.word	0x2400000e

0800ba00 <SDRAM_SendCommand>:




static int SDRAM_SendCommand(uint32_t CommandMode, uint32_t Bank, uint32_t RefreshNum, uint32_t RegVal)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b08a      	sub	sp, #40	; 0x28
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	60f8      	str	r0, [r7, #12]
 800ba08:	60b9      	str	r1, [r7, #8]
 800ba0a:	607a      	str	r2, [r7, #4]
 800ba0c:	603b      	str	r3, [r7, #0]
    uint32_t CommandTarget;
    FMC_SDRAM_CommandTypeDef Command;

    if (Bank == 1) {
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	d102      	bne.n	800ba1a <SDRAM_SendCommand+0x1a>
        CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800ba14:	2310      	movs	r3, #16
 800ba16:	627b      	str	r3, [r7, #36]	; 0x24
 800ba18:	e004      	b.n	800ba24 <SDRAM_SendCommand+0x24>
    } else if (Bank == 2) {
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	2b02      	cmp	r3, #2
 800ba1e:	d101      	bne.n	800ba24 <SDRAM_SendCommand+0x24>
        CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 800ba20:	2308      	movs	r3, #8
 800ba22:	627b      	str	r3, [r7, #36]	; 0x24
    }

    Command.CommandMode = CommandMode;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	617b      	str	r3, [r7, #20]
    Command.CommandTarget = CommandTarget;
 800ba28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba2a:	61bb      	str	r3, [r7, #24]
    Command.AutoRefreshNumber = RefreshNum;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	61fb      	str	r3, [r7, #28]
    Command.ModeRegisterDefinition = RegVal;
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	623b      	str	r3, [r7, #32]

    if (HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000) != HAL_OK) {
 800ba34:	f107 0314 	add.w	r3, r7, #20
 800ba38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	4807      	ldr	r0, [pc, #28]	; (800ba5c <SDRAM_SendCommand+0x5c>)
 800ba40:	f7fb fa32 	bl	8006ea8 <HAL_SDRAM_SendCommand>
 800ba44:	4603      	mov	r3, r0
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d002      	beq.n	800ba50 <SDRAM_SendCommand+0x50>
        return -1;
 800ba4a:	f04f 33ff 	mov.w	r3, #4294967295
 800ba4e:	e000      	b.n	800ba52 <SDRAM_SendCommand+0x52>
    }

    return 0;
 800ba50:	2300      	movs	r3, #0
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3728      	adds	r7, #40	; 0x28
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}
 800ba5a:	bf00      	nop
 800ba5c:	240004c4 	.word	0x240004c4

0800ba60 <SDRAM_Init>:



void SDRAM_Init(void)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b082      	sub	sp, #8
 800ba64:	af00      	add	r7, sp, #0
    uint32_t temp;

    /* 1. 时钟使能命令 */
    SDRAM_SendCommand(FMC_SDRAM_CMD_CLK_ENABLE, 1, 1, 0);
 800ba66:	2300      	movs	r3, #0
 800ba68:	2201      	movs	r2, #1
 800ba6a:	2101      	movs	r1, #1
 800ba6c:	2001      	movs	r0, #1
 800ba6e:	f7ff ffc7 	bl	800ba00 <SDRAM_SendCommand>

    /* 2. 延时，至少100us */
    HAL_Delay(1);
 800ba72:	2001      	movs	r0, #1
 800ba74:	f000 f8a6 	bl	800bbc4 <HAL_Delay>

    /* 3. SDRAM全部预充电命令 */
    SDRAM_SendCommand(FMC_SDRAM_CMD_PALL, 1, 1, 0);
 800ba78:	2300      	movs	r3, #0
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	2101      	movs	r1, #1
 800ba7e:	2002      	movs	r0, #2
 800ba80:	f7ff ffbe 	bl	800ba00 <SDRAM_SendCommand>

    /* 4. 自动刷新命令 */
    SDRAM_SendCommand(FMC_SDRAM_CMD_AUTOREFRESH_MODE, 1, 8, 0);
 800ba84:	2300      	movs	r3, #0
 800ba86:	2208      	movs	r2, #8
 800ba88:	2101      	movs	r1, #1
 800ba8a:	2003      	movs	r0, #3
 800ba8c:	f7ff ffb8 	bl	800ba00 <SDRAM_SendCommand>

    /* 5. 配置SDRAM模式寄存器 */
    temp = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1            |          //设置突发长度：1
 800ba90:	f44f 730c 	mov.w	r3, #560	; 0x230
 800ba94:	607b      	str	r3, [r7, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL     |          //设置突发类型：连续
                     SDRAM_MODEREG_CAS_LATENCY_3             |          //设置CL值：3
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD   |          //设置操作模式：标准
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;              //设置突发写模式：单点访问
    SDRAM_SendCommand(FMC_SDRAM_CMD_LOAD_MODE, 1, 1, temp);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2201      	movs	r2, #1
 800ba9a:	2101      	movs	r1, #1
 800ba9c:	2004      	movs	r0, #4
 800ba9e:	f7ff ffaf 	bl	800ba00 <SDRAM_SendCommand>
    /*
        SDRAM refresh period / Number of rows）*SDRAM时钟速度 – 20
      = 64000(64 ms) / 4096 *108MHz - 20
      = 1667.5 取值1668
    */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, 1668);
 800baa2:	f240 6184 	movw	r1, #1668	; 0x684
 800baa6:	4803      	ldr	r0, [pc, #12]	; (800bab4 <SDRAM_Init+0x54>)
 800baa8:	f7fb fa33 	bl	8006f12 <HAL_SDRAM_ProgramRefreshRate>
}
 800baac:	bf00      	nop
 800baae:	3708      	adds	r7, #8
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}
 800bab4:	240004c4 	.word	0x240004c4

0800bab8 <user_delay_init>:
 */
#include "user_delay.h"

static uint32_t g_fac_us = 0; /* us延时倍乘数 */
void user_delay_init(uint16_t sysclk)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b082      	sub	sp, #8
 800babc:	af00      	add	r7, sp, #0
 800babe:	4603      	mov	r3, r0
 800bac0:	80fb      	strh	r3, [r7, #6]

    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK); /* SYSTICK使用外部时钟源,频率为HCLK */
 800bac2:	2004      	movs	r0, #4
 800bac4:	f7f6 fac6 	bl	8002054 <HAL_SYSTICK_CLKSourceConfig>
    g_fac_us = sysclk;                                   /* 不论是否使用OS,g_fac_us都需要使用 */
 800bac8:	88fb      	ldrh	r3, [r7, #6]
 800baca:	4a03      	ldr	r2, [pc, #12]	; (800bad8 <user_delay_init+0x20>)
 800bacc:	6013      	str	r3, [r2, #0]

}
 800bace:	bf00      	nop
 800bad0:	3708      	adds	r7, #8
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}
 800bad6:	bf00      	nop
 800bad8:	24000508 	.word	0x24000508

0800badc <user_delay_us>:
 * @param       nus: 要延时的us数.
 * @note        nus取值范围 : 0~190887435(最大值即 2^32 / fac_us @fac_us = 21)
 * @retval      无
 */
void user_delay_us(uint32_t nus)
{
 800badc:	b480      	push	{r7}
 800bade:	b089      	sub	sp, #36	; 0x24
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
    uint32_t ticks;
    uint32_t told, tnow, tcnt = 0;
 800bae4:	2300      	movs	r3, #0
 800bae6:	61bb      	str	r3, [r7, #24]
    uint32_t reload = SysTick->LOAD; /* LOAD的值 */
 800bae8:	4b19      	ldr	r3, [pc, #100]	; (800bb50 <user_delay_us+0x74>)
 800baea:	685b      	ldr	r3, [r3, #4]
 800baec:	617b      	str	r3, [r7, #20]
    ticks = nus * g_fac_us;          /* 需要的节拍数 */
 800baee:	4b19      	ldr	r3, [pc, #100]	; (800bb54 <user_delay_us+0x78>)
 800baf0:	681a      	ldr	r2, [r3, #0]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	fb02 f303 	mul.w	r3, r2, r3
 800baf8:	613b      	str	r3, [r7, #16]
    told = SysTick->VAL;             /* 刚进入时的计数器值 */
 800bafa:	4b15      	ldr	r3, [pc, #84]	; (800bb50 <user_delay_us+0x74>)
 800bafc:	689b      	ldr	r3, [r3, #8]
 800bafe:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 800bb00:	4b13      	ldr	r3, [pc, #76]	; (800bb50 <user_delay_us+0x74>)
 800bb02:	689b      	ldr	r3, [r3, #8]
 800bb04:	60fb      	str	r3, [r7, #12]
        if (tnow != told)
 800bb06:	68fa      	ldr	r2, [r7, #12]
 800bb08:	69fb      	ldr	r3, [r7, #28]
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d0f8      	beq.n	800bb00 <user_delay_us+0x24>
        {
            if (tnow < told)
 800bb0e:	68fa      	ldr	r2, [r7, #12]
 800bb10:	69fb      	ldr	r3, [r7, #28]
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d206      	bcs.n	800bb24 <user_delay_us+0x48>
            {
                tcnt += told - tnow; /* 这里注意一下SYSTICK是一个递减的计数器就可以了 */
 800bb16:	69fa      	ldr	r2, [r7, #28]
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	1ad3      	subs	r3, r2, r3
 800bb1c:	69ba      	ldr	r2, [r7, #24]
 800bb1e:	4413      	add	r3, r2
 800bb20:	61bb      	str	r3, [r7, #24]
 800bb22:	e007      	b.n	800bb34 <user_delay_us+0x58>
            }
            else
            {
                tcnt += reload - tnow + told;
 800bb24:	697a      	ldr	r2, [r7, #20]
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	1ad2      	subs	r2, r2, r3
 800bb2a:	69fb      	ldr	r3, [r7, #28]
 800bb2c:	4413      	add	r3, r2
 800bb2e:	69ba      	ldr	r2, [r7, #24]
 800bb30:	4413      	add	r3, r2
 800bb32:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 800bb38:	69ba      	ldr	r2, [r7, #24]
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d200      	bcs.n	800bb42 <user_delay_us+0x66>
        tnow = SysTick->VAL;
 800bb40:	e7de      	b.n	800bb00 <user_delay_us+0x24>
            {
                break; /* 时间超过/等于要延迟的时间,则退出 */
 800bb42:	bf00      	nop
            }
        }
    }
}
 800bb44:	bf00      	nop
 800bb46:	3724      	adds	r7, #36	; 0x24
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4e:	4770      	bx	lr
 800bb50:	e000e010 	.word	0xe000e010
 800bb54:	24000508 	.word	0x24000508

0800bb58 <user_delay_ms>:
 * @brief       延时nms
 * @param       nms: 要延时的ms数 (0< nms <= 65535)
 * @retval      无
 */
void user_delay_ms(uint16_t nms)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b084      	sub	sp, #16
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	4603      	mov	r3, r0
 800bb60:	80fb      	strh	r3, [r7, #6]
    uint32_t repeat = nms / 540; /*  这里用540,是考虑到可能有超频应用, 比如248M的时候,delay_us最大只能延时541ms左右了 */
 800bb62:	88fb      	ldrh	r3, [r7, #6]
 800bb64:	4a15      	ldr	r2, [pc, #84]	; (800bbbc <user_delay_ms+0x64>)
 800bb66:	fba2 2303 	umull	r2, r3, r2, r3
 800bb6a:	0a5b      	lsrs	r3, r3, #9
 800bb6c:	b29b      	uxth	r3, r3
 800bb6e:	60fb      	str	r3, [r7, #12]
    uint32_t remain = nms % 540;
 800bb70:	88fb      	ldrh	r3, [r7, #6]
 800bb72:	4a12      	ldr	r2, [pc, #72]	; (800bbbc <user_delay_ms+0x64>)
 800bb74:	fba2 1203 	umull	r1, r2, r2, r3
 800bb78:	0a52      	lsrs	r2, r2, #9
 800bb7a:	f44f 7107 	mov.w	r1, #540	; 0x21c
 800bb7e:	fb01 f202 	mul.w	r2, r1, r2
 800bb82:	1a9b      	subs	r3, r3, r2
 800bb84:	b29b      	uxth	r3, r3
 800bb86:	60bb      	str	r3, [r7, #8]

    while (repeat)
 800bb88:	e005      	b.n	800bb96 <user_delay_ms+0x3e>
    {
    	user_delay_us(540 * 1000); /* 利用delay_us 实现 540ms 延时 */
 800bb8a:	480d      	ldr	r0, [pc, #52]	; (800bbc0 <user_delay_ms+0x68>)
 800bb8c:	f7ff ffa6 	bl	800badc <user_delay_us>
        repeat--;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	3b01      	subs	r3, #1
 800bb94:	60fb      	str	r3, [r7, #12]
    while (repeat)
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d1f6      	bne.n	800bb8a <user_delay_ms+0x32>
    }

    if (remain)
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d007      	beq.n	800bbb2 <user_delay_ms+0x5a>
    {
    	user_delay_us(remain * 1000); /* 利用delay_us, 把尾数延时(remain ms)给做了 */
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bba8:	fb02 f303 	mul.w	r3, r2, r3
 800bbac:	4618      	mov	r0, r3
 800bbae:	f7ff ff95 	bl	800badc <user_delay_us>
    }
}
 800bbb2:	bf00      	nop
 800bbb4:	3710      	adds	r7, #16
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
 800bbba:	bf00      	nop
 800bbbc:	f2b9d649 	.word	0xf2b9d649
 800bbc0:	00083d60 	.word	0x00083d60

0800bbc4 <HAL_Delay>:
 * @note        HAL库的延时默认用Systick，如果我们没有开Systick的中断会导致调用这个延时后无法退出
 * @param       Delay : 要延时的毫秒数
 * @retval      None
 */
void HAL_Delay(uint32_t Delay)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
	user_delay_ms(Delay);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	b29b      	uxth	r3, r3
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f7ff ffc1 	bl	800bb58 <user_delay_ms>
}
 800bbd6:	bf00      	nop
 800bbd8:	3708      	adds	r7, #8
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
	...

0800bbe0 <_write>:
  HAL_UART_Receive(&huart1, &ch, 1, 0xffff);
  return ch;
}


int _write(int32_t file, uint8_t *ptr, int32_t len) {
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b084      	sub	sp, #16
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	60f8      	str	r0, [r7, #12]
 800bbe8:	60b9      	str	r1, [r7, #8]
 800bbea:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, ptr, len, HAL_MAX_DELAY);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	b29a      	uxth	r2, r3
 800bbf0:	f04f 33ff 	mov.w	r3, #4294967295
 800bbf4:	68b9      	ldr	r1, [r7, #8]
 800bbf6:	4804      	ldr	r0, [pc, #16]	; (800bc08 <_write+0x28>)
 800bbf8:	f7fb fe88 	bl	800790c <HAL_UART_Transmit>
  return len;
 800bbfc:	687b      	ldr	r3, [r7, #4]
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3710      	adds	r7, #16
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
 800bc06:	bf00      	nop
 800bc08:	2400039c 	.word	0x2400039c

0800bc0c <log_com_uart_init>:

void log_com_uart_init(void)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	af00      	add	r7, sp, #0

  HAL_UART_Transmit_IT(&huart1, (uint8_t *)StaMessages, sizeof(StaMessages));
 800bc10:	2204      	movs	r2, #4
 800bc12:	4905      	ldr	r1, [pc, #20]	; (800bc28 <log_com_uart_init+0x1c>)
 800bc14:	4805      	ldr	r0, [pc, #20]	; (800bc2c <log_com_uart_init+0x20>)
 800bc16:	f7fb ff07 	bl	8007a28 <HAL_UART_Transmit_IT>
  HAL_UART_Receive_IT(&huart1, (uint8_t *)uart1_RxBuffer, 1); // 调用中断接收函数，接收长度设为1，接收一个字节进一次中断
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	4904      	ldr	r1, [pc, #16]	; (800bc30 <log_com_uart_init+0x24>)
 800bc1e:	4803      	ldr	r0, [pc, #12]	; (800bc2c <log_com_uart_init+0x20>)
 800bc20:	f7fb ff96 	bl	8007b50 <HAL_UART_Receive_IT>
}
 800bc24:	bf00      	nop
 800bc26:	bd80      	pop	{r7, pc}
 800bc28:	2400050c 	.word	0x2400050c
 800bc2c:	2400039c 	.word	0x2400039c
 800bc30:	24000510 	.word	0x24000510

0800bc34 <HAL_UART_RxCpltCallback>:
  HAL_UART_Transmit_IT(&huart2, (uint8_t *)StaMessages, sizeof(StaMessages));
  HAL_UART_Receive_IT(&huart2, (uint8_t *)uart2_RxBuffer, 1); // 调用中断接收函数，接收长度设为1，接收一个字节进一次中断
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b082      	sub	sp, #8
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
  if(huart->Instance == USART1)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	4a11      	ldr	r2, [pc, #68]	; (800bc88 <HAL_UART_RxCpltCallback+0x54>)
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d10b      	bne.n	800bc5e <HAL_UART_RxCpltCallback+0x2a>
  {
	  HAL_UART_Transmit(&huart1, (uint8_t *)uart1_RxBuffer, 1, 0xFFFF); // 发送接收到的数据
 800bc46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	490f      	ldr	r1, [pc, #60]	; (800bc8c <HAL_UART_RxCpltCallback+0x58>)
 800bc4e:	4810      	ldr	r0, [pc, #64]	; (800bc90 <HAL_UART_RxCpltCallback+0x5c>)
 800bc50:	f7fb fe5c 	bl	800790c <HAL_UART_Transmit>
	  HAL_UART_Receive_IT(&huart1, (uint8_t *)uart1_RxBuffer, 1);       // 再开启接收中断（因为里面中断只会触发一次，因此需要再次开启）
 800bc54:	2201      	movs	r2, #1
 800bc56:	490d      	ldr	r1, [pc, #52]	; (800bc8c <HAL_UART_RxCpltCallback+0x58>)
 800bc58:	480d      	ldr	r0, [pc, #52]	; (800bc90 <HAL_UART_RxCpltCallback+0x5c>)
 800bc5a:	f7fb ff79 	bl	8007b50 <HAL_UART_Receive_IT>
  }
  if(huart->Instance == USART2)
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	4a0c      	ldr	r2, [pc, #48]	; (800bc94 <HAL_UART_RxCpltCallback+0x60>)
 800bc64:	4293      	cmp	r3, r2
 800bc66:	d10b      	bne.n	800bc80 <HAL_UART_RxCpltCallback+0x4c>
  {
	  HAL_UART_Transmit(&huart2, (uint8_t *)uart2_RxBuffer, 1, 0xFFFF); // 发送接收到的数据
 800bc68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	490a      	ldr	r1, [pc, #40]	; (800bc98 <HAL_UART_RxCpltCallback+0x64>)
 800bc70:	480a      	ldr	r0, [pc, #40]	; (800bc9c <HAL_UART_RxCpltCallback+0x68>)
 800bc72:	f7fb fe4b 	bl	800790c <HAL_UART_Transmit>
	  HAL_UART_Receive_IT(&huart2, (uint8_t *)uart2_RxBuffer, 1);       // 再开启接收中断（因为里面中断只会触发一次，因此需要再次开启）
 800bc76:	2201      	movs	r2, #1
 800bc78:	4907      	ldr	r1, [pc, #28]	; (800bc98 <HAL_UART_RxCpltCallback+0x64>)
 800bc7a:	4808      	ldr	r0, [pc, #32]	; (800bc9c <HAL_UART_RxCpltCallback+0x68>)
 800bc7c:	f7fb ff68 	bl	8007b50 <HAL_UART_Receive_IT>
  }

}
 800bc80:	bf00      	nop
 800bc82:	3708      	adds	r7, #8
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}
 800bc88:	40011000 	.word	0x40011000
 800bc8c:	24000510 	.word	0x24000510
 800bc90:	2400039c 	.word	0x2400039c
 800bc94:	40004400 	.word	0x40004400
 800bc98:	24000524 	.word	0x24000524
 800bc9c:	24000430 	.word	0x24000430

0800bca0 <__cvt>:
 800bca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bca2:	ed2d 8b02 	vpush	{d8}
 800bca6:	eeb0 8b40 	vmov.f64	d8, d0
 800bcaa:	b085      	sub	sp, #20
 800bcac:	4617      	mov	r7, r2
 800bcae:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800bcb0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800bcb2:	ee18 2a90 	vmov	r2, s17
 800bcb6:	f025 0520 	bic.w	r5, r5, #32
 800bcba:	2a00      	cmp	r2, #0
 800bcbc:	bfb6      	itet	lt
 800bcbe:	222d      	movlt	r2, #45	; 0x2d
 800bcc0:	2200      	movge	r2, #0
 800bcc2:	eeb1 8b40 	vneglt.f64	d8, d0
 800bcc6:	2d46      	cmp	r5, #70	; 0x46
 800bcc8:	460c      	mov	r4, r1
 800bcca:	701a      	strb	r2, [r3, #0]
 800bccc:	d004      	beq.n	800bcd8 <__cvt+0x38>
 800bcce:	2d45      	cmp	r5, #69	; 0x45
 800bcd0:	d100      	bne.n	800bcd4 <__cvt+0x34>
 800bcd2:	3401      	adds	r4, #1
 800bcd4:	2102      	movs	r1, #2
 800bcd6:	e000      	b.n	800bcda <__cvt+0x3a>
 800bcd8:	2103      	movs	r1, #3
 800bcda:	ab03      	add	r3, sp, #12
 800bcdc:	9301      	str	r3, [sp, #4]
 800bcde:	ab02      	add	r3, sp, #8
 800bce0:	9300      	str	r3, [sp, #0]
 800bce2:	4622      	mov	r2, r4
 800bce4:	4633      	mov	r3, r6
 800bce6:	eeb0 0b48 	vmov.f64	d0, d8
 800bcea:	f001 f8cd 	bl	800ce88 <_dtoa_r>
 800bcee:	2d47      	cmp	r5, #71	; 0x47
 800bcf0:	d101      	bne.n	800bcf6 <__cvt+0x56>
 800bcf2:	07fb      	lsls	r3, r7, #31
 800bcf4:	d51a      	bpl.n	800bd2c <__cvt+0x8c>
 800bcf6:	2d46      	cmp	r5, #70	; 0x46
 800bcf8:	eb00 0204 	add.w	r2, r0, r4
 800bcfc:	d10c      	bne.n	800bd18 <__cvt+0x78>
 800bcfe:	7803      	ldrb	r3, [r0, #0]
 800bd00:	2b30      	cmp	r3, #48	; 0x30
 800bd02:	d107      	bne.n	800bd14 <__cvt+0x74>
 800bd04:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bd08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd0c:	bf1c      	itt	ne
 800bd0e:	f1c4 0401 	rsbne	r4, r4, #1
 800bd12:	6034      	strne	r4, [r6, #0]
 800bd14:	6833      	ldr	r3, [r6, #0]
 800bd16:	441a      	add	r2, r3
 800bd18:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bd1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd20:	bf08      	it	eq
 800bd22:	9203      	streq	r2, [sp, #12]
 800bd24:	2130      	movs	r1, #48	; 0x30
 800bd26:	9b03      	ldr	r3, [sp, #12]
 800bd28:	4293      	cmp	r3, r2
 800bd2a:	d307      	bcc.n	800bd3c <__cvt+0x9c>
 800bd2c:	9b03      	ldr	r3, [sp, #12]
 800bd2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd30:	1a1b      	subs	r3, r3, r0
 800bd32:	6013      	str	r3, [r2, #0]
 800bd34:	b005      	add	sp, #20
 800bd36:	ecbd 8b02 	vpop	{d8}
 800bd3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd3c:	1c5c      	adds	r4, r3, #1
 800bd3e:	9403      	str	r4, [sp, #12]
 800bd40:	7019      	strb	r1, [r3, #0]
 800bd42:	e7f0      	b.n	800bd26 <__cvt+0x86>

0800bd44 <__exponent>:
 800bd44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd46:	4603      	mov	r3, r0
 800bd48:	2900      	cmp	r1, #0
 800bd4a:	bfb8      	it	lt
 800bd4c:	4249      	neglt	r1, r1
 800bd4e:	f803 2b02 	strb.w	r2, [r3], #2
 800bd52:	bfb4      	ite	lt
 800bd54:	222d      	movlt	r2, #45	; 0x2d
 800bd56:	222b      	movge	r2, #43	; 0x2b
 800bd58:	2909      	cmp	r1, #9
 800bd5a:	7042      	strb	r2, [r0, #1]
 800bd5c:	dd2a      	ble.n	800bdb4 <__exponent+0x70>
 800bd5e:	f10d 0207 	add.w	r2, sp, #7
 800bd62:	4617      	mov	r7, r2
 800bd64:	260a      	movs	r6, #10
 800bd66:	4694      	mov	ip, r2
 800bd68:	fb91 f5f6 	sdiv	r5, r1, r6
 800bd6c:	fb06 1415 	mls	r4, r6, r5, r1
 800bd70:	3430      	adds	r4, #48	; 0x30
 800bd72:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800bd76:	460c      	mov	r4, r1
 800bd78:	2c63      	cmp	r4, #99	; 0x63
 800bd7a:	f102 32ff 	add.w	r2, r2, #4294967295
 800bd7e:	4629      	mov	r1, r5
 800bd80:	dcf1      	bgt.n	800bd66 <__exponent+0x22>
 800bd82:	3130      	adds	r1, #48	; 0x30
 800bd84:	f1ac 0402 	sub.w	r4, ip, #2
 800bd88:	f802 1c01 	strb.w	r1, [r2, #-1]
 800bd8c:	1c41      	adds	r1, r0, #1
 800bd8e:	4622      	mov	r2, r4
 800bd90:	42ba      	cmp	r2, r7
 800bd92:	d30a      	bcc.n	800bdaa <__exponent+0x66>
 800bd94:	f10d 0209 	add.w	r2, sp, #9
 800bd98:	eba2 020c 	sub.w	r2, r2, ip
 800bd9c:	42bc      	cmp	r4, r7
 800bd9e:	bf88      	it	hi
 800bda0:	2200      	movhi	r2, #0
 800bda2:	4413      	add	r3, r2
 800bda4:	1a18      	subs	r0, r3, r0
 800bda6:	b003      	add	sp, #12
 800bda8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdaa:	f812 5b01 	ldrb.w	r5, [r2], #1
 800bdae:	f801 5f01 	strb.w	r5, [r1, #1]!
 800bdb2:	e7ed      	b.n	800bd90 <__exponent+0x4c>
 800bdb4:	2330      	movs	r3, #48	; 0x30
 800bdb6:	3130      	adds	r1, #48	; 0x30
 800bdb8:	7083      	strb	r3, [r0, #2]
 800bdba:	70c1      	strb	r1, [r0, #3]
 800bdbc:	1d03      	adds	r3, r0, #4
 800bdbe:	e7f1      	b.n	800bda4 <__exponent+0x60>

0800bdc0 <_printf_float>:
 800bdc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc4:	b08b      	sub	sp, #44	; 0x2c
 800bdc6:	460c      	mov	r4, r1
 800bdc8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800bdcc:	4616      	mov	r6, r2
 800bdce:	461f      	mov	r7, r3
 800bdd0:	4605      	mov	r5, r0
 800bdd2:	f000 ff53 	bl	800cc7c <_localeconv_r>
 800bdd6:	f8d0 b000 	ldr.w	fp, [r0]
 800bdda:	4658      	mov	r0, fp
 800bddc:	f7f4 fad0 	bl	8000380 <strlen>
 800bde0:	2300      	movs	r3, #0
 800bde2:	9308      	str	r3, [sp, #32]
 800bde4:	f8d8 3000 	ldr.w	r3, [r8]
 800bde8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800bdec:	6822      	ldr	r2, [r4, #0]
 800bdee:	3307      	adds	r3, #7
 800bdf0:	f023 0307 	bic.w	r3, r3, #7
 800bdf4:	f103 0108 	add.w	r1, r3, #8
 800bdf8:	f8c8 1000 	str.w	r1, [r8]
 800bdfc:	ed93 0b00 	vldr	d0, [r3]
 800be00:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800c060 <_printf_float+0x2a0>
 800be04:	eeb0 7bc0 	vabs.f64	d7, d0
 800be08:	eeb4 7b46 	vcmp.f64	d7, d6
 800be0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be10:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800be14:	4682      	mov	sl, r0
 800be16:	dd24      	ble.n	800be62 <_printf_float+0xa2>
 800be18:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800be1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be20:	d502      	bpl.n	800be28 <_printf_float+0x68>
 800be22:	232d      	movs	r3, #45	; 0x2d
 800be24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be28:	498f      	ldr	r1, [pc, #572]	; (800c068 <_printf_float+0x2a8>)
 800be2a:	4b90      	ldr	r3, [pc, #576]	; (800c06c <_printf_float+0x2ac>)
 800be2c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800be30:	bf94      	ite	ls
 800be32:	4688      	movls	r8, r1
 800be34:	4698      	movhi	r8, r3
 800be36:	2303      	movs	r3, #3
 800be38:	6123      	str	r3, [r4, #16]
 800be3a:	f022 0204 	bic.w	r2, r2, #4
 800be3e:	2300      	movs	r3, #0
 800be40:	6022      	str	r2, [r4, #0]
 800be42:	9304      	str	r3, [sp, #16]
 800be44:	9700      	str	r7, [sp, #0]
 800be46:	4633      	mov	r3, r6
 800be48:	aa09      	add	r2, sp, #36	; 0x24
 800be4a:	4621      	mov	r1, r4
 800be4c:	4628      	mov	r0, r5
 800be4e:	f000 f9d1 	bl	800c1f4 <_printf_common>
 800be52:	3001      	adds	r0, #1
 800be54:	f040 808a 	bne.w	800bf6c <_printf_float+0x1ac>
 800be58:	f04f 30ff 	mov.w	r0, #4294967295
 800be5c:	b00b      	add	sp, #44	; 0x2c
 800be5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be62:	eeb4 0b40 	vcmp.f64	d0, d0
 800be66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be6a:	d709      	bvc.n	800be80 <_printf_float+0xc0>
 800be6c:	ee10 3a90 	vmov	r3, s1
 800be70:	2b00      	cmp	r3, #0
 800be72:	bfbc      	itt	lt
 800be74:	232d      	movlt	r3, #45	; 0x2d
 800be76:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800be7a:	497d      	ldr	r1, [pc, #500]	; (800c070 <_printf_float+0x2b0>)
 800be7c:	4b7d      	ldr	r3, [pc, #500]	; (800c074 <_printf_float+0x2b4>)
 800be7e:	e7d5      	b.n	800be2c <_printf_float+0x6c>
 800be80:	6863      	ldr	r3, [r4, #4]
 800be82:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800be86:	9104      	str	r1, [sp, #16]
 800be88:	1c59      	adds	r1, r3, #1
 800be8a:	d13c      	bne.n	800bf06 <_printf_float+0x146>
 800be8c:	2306      	movs	r3, #6
 800be8e:	6063      	str	r3, [r4, #4]
 800be90:	2300      	movs	r3, #0
 800be92:	9303      	str	r3, [sp, #12]
 800be94:	ab08      	add	r3, sp, #32
 800be96:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800be9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800be9e:	ab07      	add	r3, sp, #28
 800bea0:	6861      	ldr	r1, [r4, #4]
 800bea2:	9300      	str	r3, [sp, #0]
 800bea4:	6022      	str	r2, [r4, #0]
 800bea6:	f10d 031b 	add.w	r3, sp, #27
 800beaa:	4628      	mov	r0, r5
 800beac:	f7ff fef8 	bl	800bca0 <__cvt>
 800beb0:	9b04      	ldr	r3, [sp, #16]
 800beb2:	9907      	ldr	r1, [sp, #28]
 800beb4:	2b47      	cmp	r3, #71	; 0x47
 800beb6:	4680      	mov	r8, r0
 800beb8:	d108      	bne.n	800becc <_printf_float+0x10c>
 800beba:	1cc8      	adds	r0, r1, #3
 800bebc:	db02      	blt.n	800bec4 <_printf_float+0x104>
 800bebe:	6863      	ldr	r3, [r4, #4]
 800bec0:	4299      	cmp	r1, r3
 800bec2:	dd41      	ble.n	800bf48 <_printf_float+0x188>
 800bec4:	f1a9 0902 	sub.w	r9, r9, #2
 800bec8:	fa5f f989 	uxtb.w	r9, r9
 800becc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bed0:	d820      	bhi.n	800bf14 <_printf_float+0x154>
 800bed2:	3901      	subs	r1, #1
 800bed4:	464a      	mov	r2, r9
 800bed6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800beda:	9107      	str	r1, [sp, #28]
 800bedc:	f7ff ff32 	bl	800bd44 <__exponent>
 800bee0:	9a08      	ldr	r2, [sp, #32]
 800bee2:	9004      	str	r0, [sp, #16]
 800bee4:	1813      	adds	r3, r2, r0
 800bee6:	2a01      	cmp	r2, #1
 800bee8:	6123      	str	r3, [r4, #16]
 800beea:	dc02      	bgt.n	800bef2 <_printf_float+0x132>
 800beec:	6822      	ldr	r2, [r4, #0]
 800beee:	07d2      	lsls	r2, r2, #31
 800bef0:	d501      	bpl.n	800bef6 <_printf_float+0x136>
 800bef2:	3301      	adds	r3, #1
 800bef4:	6123      	str	r3, [r4, #16]
 800bef6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d0a2      	beq.n	800be44 <_printf_float+0x84>
 800befe:	232d      	movs	r3, #45	; 0x2d
 800bf00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf04:	e79e      	b.n	800be44 <_printf_float+0x84>
 800bf06:	9904      	ldr	r1, [sp, #16]
 800bf08:	2947      	cmp	r1, #71	; 0x47
 800bf0a:	d1c1      	bne.n	800be90 <_printf_float+0xd0>
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d1bf      	bne.n	800be90 <_printf_float+0xd0>
 800bf10:	2301      	movs	r3, #1
 800bf12:	e7bc      	b.n	800be8e <_printf_float+0xce>
 800bf14:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800bf18:	d118      	bne.n	800bf4c <_printf_float+0x18c>
 800bf1a:	2900      	cmp	r1, #0
 800bf1c:	6863      	ldr	r3, [r4, #4]
 800bf1e:	dd0b      	ble.n	800bf38 <_printf_float+0x178>
 800bf20:	6121      	str	r1, [r4, #16]
 800bf22:	b913      	cbnz	r3, 800bf2a <_printf_float+0x16a>
 800bf24:	6822      	ldr	r2, [r4, #0]
 800bf26:	07d0      	lsls	r0, r2, #31
 800bf28:	d502      	bpl.n	800bf30 <_printf_float+0x170>
 800bf2a:	3301      	adds	r3, #1
 800bf2c:	440b      	add	r3, r1
 800bf2e:	6123      	str	r3, [r4, #16]
 800bf30:	2300      	movs	r3, #0
 800bf32:	65a1      	str	r1, [r4, #88]	; 0x58
 800bf34:	9304      	str	r3, [sp, #16]
 800bf36:	e7de      	b.n	800bef6 <_printf_float+0x136>
 800bf38:	b913      	cbnz	r3, 800bf40 <_printf_float+0x180>
 800bf3a:	6822      	ldr	r2, [r4, #0]
 800bf3c:	07d2      	lsls	r2, r2, #31
 800bf3e:	d501      	bpl.n	800bf44 <_printf_float+0x184>
 800bf40:	3302      	adds	r3, #2
 800bf42:	e7f4      	b.n	800bf2e <_printf_float+0x16e>
 800bf44:	2301      	movs	r3, #1
 800bf46:	e7f2      	b.n	800bf2e <_printf_float+0x16e>
 800bf48:	f04f 0967 	mov.w	r9, #103	; 0x67
 800bf4c:	9b08      	ldr	r3, [sp, #32]
 800bf4e:	4299      	cmp	r1, r3
 800bf50:	db05      	blt.n	800bf5e <_printf_float+0x19e>
 800bf52:	6823      	ldr	r3, [r4, #0]
 800bf54:	6121      	str	r1, [r4, #16]
 800bf56:	07d8      	lsls	r0, r3, #31
 800bf58:	d5ea      	bpl.n	800bf30 <_printf_float+0x170>
 800bf5a:	1c4b      	adds	r3, r1, #1
 800bf5c:	e7e7      	b.n	800bf2e <_printf_float+0x16e>
 800bf5e:	2900      	cmp	r1, #0
 800bf60:	bfd4      	ite	le
 800bf62:	f1c1 0202 	rsble	r2, r1, #2
 800bf66:	2201      	movgt	r2, #1
 800bf68:	4413      	add	r3, r2
 800bf6a:	e7e0      	b.n	800bf2e <_printf_float+0x16e>
 800bf6c:	6823      	ldr	r3, [r4, #0]
 800bf6e:	055a      	lsls	r2, r3, #21
 800bf70:	d407      	bmi.n	800bf82 <_printf_float+0x1c2>
 800bf72:	6923      	ldr	r3, [r4, #16]
 800bf74:	4642      	mov	r2, r8
 800bf76:	4631      	mov	r1, r6
 800bf78:	4628      	mov	r0, r5
 800bf7a:	47b8      	blx	r7
 800bf7c:	3001      	adds	r0, #1
 800bf7e:	d12a      	bne.n	800bfd6 <_printf_float+0x216>
 800bf80:	e76a      	b.n	800be58 <_printf_float+0x98>
 800bf82:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bf86:	f240 80e0 	bls.w	800c14a <_printf_float+0x38a>
 800bf8a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800bf8e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bf92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf96:	d133      	bne.n	800c000 <_printf_float+0x240>
 800bf98:	4a37      	ldr	r2, [pc, #220]	; (800c078 <_printf_float+0x2b8>)
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	4631      	mov	r1, r6
 800bf9e:	4628      	mov	r0, r5
 800bfa0:	47b8      	blx	r7
 800bfa2:	3001      	adds	r0, #1
 800bfa4:	f43f af58 	beq.w	800be58 <_printf_float+0x98>
 800bfa8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800bfac:	429a      	cmp	r2, r3
 800bfae:	db02      	blt.n	800bfb6 <_printf_float+0x1f6>
 800bfb0:	6823      	ldr	r3, [r4, #0]
 800bfb2:	07d8      	lsls	r0, r3, #31
 800bfb4:	d50f      	bpl.n	800bfd6 <_printf_float+0x216>
 800bfb6:	4653      	mov	r3, sl
 800bfb8:	465a      	mov	r2, fp
 800bfba:	4631      	mov	r1, r6
 800bfbc:	4628      	mov	r0, r5
 800bfbe:	47b8      	blx	r7
 800bfc0:	3001      	adds	r0, #1
 800bfc2:	f43f af49 	beq.w	800be58 <_printf_float+0x98>
 800bfc6:	f04f 0800 	mov.w	r8, #0
 800bfca:	f104 091a 	add.w	r9, r4, #26
 800bfce:	9b08      	ldr	r3, [sp, #32]
 800bfd0:	3b01      	subs	r3, #1
 800bfd2:	4543      	cmp	r3, r8
 800bfd4:	dc09      	bgt.n	800bfea <_printf_float+0x22a>
 800bfd6:	6823      	ldr	r3, [r4, #0]
 800bfd8:	079b      	lsls	r3, r3, #30
 800bfda:	f100 8106 	bmi.w	800c1ea <_printf_float+0x42a>
 800bfde:	68e0      	ldr	r0, [r4, #12]
 800bfe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfe2:	4298      	cmp	r0, r3
 800bfe4:	bfb8      	it	lt
 800bfe6:	4618      	movlt	r0, r3
 800bfe8:	e738      	b.n	800be5c <_printf_float+0x9c>
 800bfea:	2301      	movs	r3, #1
 800bfec:	464a      	mov	r2, r9
 800bfee:	4631      	mov	r1, r6
 800bff0:	4628      	mov	r0, r5
 800bff2:	47b8      	blx	r7
 800bff4:	3001      	adds	r0, #1
 800bff6:	f43f af2f 	beq.w	800be58 <_printf_float+0x98>
 800bffa:	f108 0801 	add.w	r8, r8, #1
 800bffe:	e7e6      	b.n	800bfce <_printf_float+0x20e>
 800c000:	9b07      	ldr	r3, [sp, #28]
 800c002:	2b00      	cmp	r3, #0
 800c004:	dc3a      	bgt.n	800c07c <_printf_float+0x2bc>
 800c006:	4a1c      	ldr	r2, [pc, #112]	; (800c078 <_printf_float+0x2b8>)
 800c008:	2301      	movs	r3, #1
 800c00a:	4631      	mov	r1, r6
 800c00c:	4628      	mov	r0, r5
 800c00e:	47b8      	blx	r7
 800c010:	3001      	adds	r0, #1
 800c012:	f43f af21 	beq.w	800be58 <_printf_float+0x98>
 800c016:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800c01a:	4313      	orrs	r3, r2
 800c01c:	d102      	bne.n	800c024 <_printf_float+0x264>
 800c01e:	6823      	ldr	r3, [r4, #0]
 800c020:	07d9      	lsls	r1, r3, #31
 800c022:	d5d8      	bpl.n	800bfd6 <_printf_float+0x216>
 800c024:	4653      	mov	r3, sl
 800c026:	465a      	mov	r2, fp
 800c028:	4631      	mov	r1, r6
 800c02a:	4628      	mov	r0, r5
 800c02c:	47b8      	blx	r7
 800c02e:	3001      	adds	r0, #1
 800c030:	f43f af12 	beq.w	800be58 <_printf_float+0x98>
 800c034:	f04f 0900 	mov.w	r9, #0
 800c038:	f104 0a1a 	add.w	sl, r4, #26
 800c03c:	9b07      	ldr	r3, [sp, #28]
 800c03e:	425b      	negs	r3, r3
 800c040:	454b      	cmp	r3, r9
 800c042:	dc01      	bgt.n	800c048 <_printf_float+0x288>
 800c044:	9b08      	ldr	r3, [sp, #32]
 800c046:	e795      	b.n	800bf74 <_printf_float+0x1b4>
 800c048:	2301      	movs	r3, #1
 800c04a:	4652      	mov	r2, sl
 800c04c:	4631      	mov	r1, r6
 800c04e:	4628      	mov	r0, r5
 800c050:	47b8      	blx	r7
 800c052:	3001      	adds	r0, #1
 800c054:	f43f af00 	beq.w	800be58 <_printf_float+0x98>
 800c058:	f109 0901 	add.w	r9, r9, #1
 800c05c:	e7ee      	b.n	800c03c <_printf_float+0x27c>
 800c05e:	bf00      	nop
 800c060:	ffffffff 	.word	0xffffffff
 800c064:	7fefffff 	.word	0x7fefffff
 800c068:	08010e48 	.word	0x08010e48
 800c06c:	08010e4c 	.word	0x08010e4c
 800c070:	08010e50 	.word	0x08010e50
 800c074:	08010e54 	.word	0x08010e54
 800c078:	08010e58 	.word	0x08010e58
 800c07c:	9a08      	ldr	r2, [sp, #32]
 800c07e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c080:	429a      	cmp	r2, r3
 800c082:	bfa8      	it	ge
 800c084:	461a      	movge	r2, r3
 800c086:	2a00      	cmp	r2, #0
 800c088:	4691      	mov	r9, r2
 800c08a:	dc38      	bgt.n	800c0fe <_printf_float+0x33e>
 800c08c:	2300      	movs	r3, #0
 800c08e:	9305      	str	r3, [sp, #20]
 800c090:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c094:	f104 021a 	add.w	r2, r4, #26
 800c098:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c09a:	9905      	ldr	r1, [sp, #20]
 800c09c:	9304      	str	r3, [sp, #16]
 800c09e:	eba3 0309 	sub.w	r3, r3, r9
 800c0a2:	428b      	cmp	r3, r1
 800c0a4:	dc33      	bgt.n	800c10e <_printf_float+0x34e>
 800c0a6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c0aa:	429a      	cmp	r2, r3
 800c0ac:	db3c      	blt.n	800c128 <_printf_float+0x368>
 800c0ae:	6823      	ldr	r3, [r4, #0]
 800c0b0:	07da      	lsls	r2, r3, #31
 800c0b2:	d439      	bmi.n	800c128 <_printf_float+0x368>
 800c0b4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800c0b8:	eba2 0903 	sub.w	r9, r2, r3
 800c0bc:	9b04      	ldr	r3, [sp, #16]
 800c0be:	1ad2      	subs	r2, r2, r3
 800c0c0:	4591      	cmp	r9, r2
 800c0c2:	bfa8      	it	ge
 800c0c4:	4691      	movge	r9, r2
 800c0c6:	f1b9 0f00 	cmp.w	r9, #0
 800c0ca:	dc35      	bgt.n	800c138 <_printf_float+0x378>
 800c0cc:	f04f 0800 	mov.w	r8, #0
 800c0d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c0d4:	f104 0a1a 	add.w	sl, r4, #26
 800c0d8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c0dc:	1a9b      	subs	r3, r3, r2
 800c0de:	eba3 0309 	sub.w	r3, r3, r9
 800c0e2:	4543      	cmp	r3, r8
 800c0e4:	f77f af77 	ble.w	800bfd6 <_printf_float+0x216>
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	4652      	mov	r2, sl
 800c0ec:	4631      	mov	r1, r6
 800c0ee:	4628      	mov	r0, r5
 800c0f0:	47b8      	blx	r7
 800c0f2:	3001      	adds	r0, #1
 800c0f4:	f43f aeb0 	beq.w	800be58 <_printf_float+0x98>
 800c0f8:	f108 0801 	add.w	r8, r8, #1
 800c0fc:	e7ec      	b.n	800c0d8 <_printf_float+0x318>
 800c0fe:	4613      	mov	r3, r2
 800c100:	4631      	mov	r1, r6
 800c102:	4642      	mov	r2, r8
 800c104:	4628      	mov	r0, r5
 800c106:	47b8      	blx	r7
 800c108:	3001      	adds	r0, #1
 800c10a:	d1bf      	bne.n	800c08c <_printf_float+0x2cc>
 800c10c:	e6a4      	b.n	800be58 <_printf_float+0x98>
 800c10e:	2301      	movs	r3, #1
 800c110:	4631      	mov	r1, r6
 800c112:	4628      	mov	r0, r5
 800c114:	9204      	str	r2, [sp, #16]
 800c116:	47b8      	blx	r7
 800c118:	3001      	adds	r0, #1
 800c11a:	f43f ae9d 	beq.w	800be58 <_printf_float+0x98>
 800c11e:	9b05      	ldr	r3, [sp, #20]
 800c120:	9a04      	ldr	r2, [sp, #16]
 800c122:	3301      	adds	r3, #1
 800c124:	9305      	str	r3, [sp, #20]
 800c126:	e7b7      	b.n	800c098 <_printf_float+0x2d8>
 800c128:	4653      	mov	r3, sl
 800c12a:	465a      	mov	r2, fp
 800c12c:	4631      	mov	r1, r6
 800c12e:	4628      	mov	r0, r5
 800c130:	47b8      	blx	r7
 800c132:	3001      	adds	r0, #1
 800c134:	d1be      	bne.n	800c0b4 <_printf_float+0x2f4>
 800c136:	e68f      	b.n	800be58 <_printf_float+0x98>
 800c138:	9a04      	ldr	r2, [sp, #16]
 800c13a:	464b      	mov	r3, r9
 800c13c:	4442      	add	r2, r8
 800c13e:	4631      	mov	r1, r6
 800c140:	4628      	mov	r0, r5
 800c142:	47b8      	blx	r7
 800c144:	3001      	adds	r0, #1
 800c146:	d1c1      	bne.n	800c0cc <_printf_float+0x30c>
 800c148:	e686      	b.n	800be58 <_printf_float+0x98>
 800c14a:	9a08      	ldr	r2, [sp, #32]
 800c14c:	2a01      	cmp	r2, #1
 800c14e:	dc01      	bgt.n	800c154 <_printf_float+0x394>
 800c150:	07db      	lsls	r3, r3, #31
 800c152:	d537      	bpl.n	800c1c4 <_printf_float+0x404>
 800c154:	2301      	movs	r3, #1
 800c156:	4642      	mov	r2, r8
 800c158:	4631      	mov	r1, r6
 800c15a:	4628      	mov	r0, r5
 800c15c:	47b8      	blx	r7
 800c15e:	3001      	adds	r0, #1
 800c160:	f43f ae7a 	beq.w	800be58 <_printf_float+0x98>
 800c164:	4653      	mov	r3, sl
 800c166:	465a      	mov	r2, fp
 800c168:	4631      	mov	r1, r6
 800c16a:	4628      	mov	r0, r5
 800c16c:	47b8      	blx	r7
 800c16e:	3001      	adds	r0, #1
 800c170:	f43f ae72 	beq.w	800be58 <_printf_float+0x98>
 800c174:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c178:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c17c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c180:	9b08      	ldr	r3, [sp, #32]
 800c182:	d01a      	beq.n	800c1ba <_printf_float+0x3fa>
 800c184:	3b01      	subs	r3, #1
 800c186:	f108 0201 	add.w	r2, r8, #1
 800c18a:	4631      	mov	r1, r6
 800c18c:	4628      	mov	r0, r5
 800c18e:	47b8      	blx	r7
 800c190:	3001      	adds	r0, #1
 800c192:	d10e      	bne.n	800c1b2 <_printf_float+0x3f2>
 800c194:	e660      	b.n	800be58 <_printf_float+0x98>
 800c196:	2301      	movs	r3, #1
 800c198:	464a      	mov	r2, r9
 800c19a:	4631      	mov	r1, r6
 800c19c:	4628      	mov	r0, r5
 800c19e:	47b8      	blx	r7
 800c1a0:	3001      	adds	r0, #1
 800c1a2:	f43f ae59 	beq.w	800be58 <_printf_float+0x98>
 800c1a6:	f108 0801 	add.w	r8, r8, #1
 800c1aa:	9b08      	ldr	r3, [sp, #32]
 800c1ac:	3b01      	subs	r3, #1
 800c1ae:	4543      	cmp	r3, r8
 800c1b0:	dcf1      	bgt.n	800c196 <_printf_float+0x3d6>
 800c1b2:	9b04      	ldr	r3, [sp, #16]
 800c1b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c1b8:	e6dd      	b.n	800bf76 <_printf_float+0x1b6>
 800c1ba:	f04f 0800 	mov.w	r8, #0
 800c1be:	f104 091a 	add.w	r9, r4, #26
 800c1c2:	e7f2      	b.n	800c1aa <_printf_float+0x3ea>
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	4642      	mov	r2, r8
 800c1c8:	e7df      	b.n	800c18a <_printf_float+0x3ca>
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	464a      	mov	r2, r9
 800c1ce:	4631      	mov	r1, r6
 800c1d0:	4628      	mov	r0, r5
 800c1d2:	47b8      	blx	r7
 800c1d4:	3001      	adds	r0, #1
 800c1d6:	f43f ae3f 	beq.w	800be58 <_printf_float+0x98>
 800c1da:	f108 0801 	add.w	r8, r8, #1
 800c1de:	68e3      	ldr	r3, [r4, #12]
 800c1e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c1e2:	1a5b      	subs	r3, r3, r1
 800c1e4:	4543      	cmp	r3, r8
 800c1e6:	dcf0      	bgt.n	800c1ca <_printf_float+0x40a>
 800c1e8:	e6f9      	b.n	800bfde <_printf_float+0x21e>
 800c1ea:	f04f 0800 	mov.w	r8, #0
 800c1ee:	f104 0919 	add.w	r9, r4, #25
 800c1f2:	e7f4      	b.n	800c1de <_printf_float+0x41e>

0800c1f4 <_printf_common>:
 800c1f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1f8:	4616      	mov	r6, r2
 800c1fa:	4699      	mov	r9, r3
 800c1fc:	688a      	ldr	r2, [r1, #8]
 800c1fe:	690b      	ldr	r3, [r1, #16]
 800c200:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c204:	4293      	cmp	r3, r2
 800c206:	bfb8      	it	lt
 800c208:	4613      	movlt	r3, r2
 800c20a:	6033      	str	r3, [r6, #0]
 800c20c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c210:	4607      	mov	r7, r0
 800c212:	460c      	mov	r4, r1
 800c214:	b10a      	cbz	r2, 800c21a <_printf_common+0x26>
 800c216:	3301      	adds	r3, #1
 800c218:	6033      	str	r3, [r6, #0]
 800c21a:	6823      	ldr	r3, [r4, #0]
 800c21c:	0699      	lsls	r1, r3, #26
 800c21e:	bf42      	ittt	mi
 800c220:	6833      	ldrmi	r3, [r6, #0]
 800c222:	3302      	addmi	r3, #2
 800c224:	6033      	strmi	r3, [r6, #0]
 800c226:	6825      	ldr	r5, [r4, #0]
 800c228:	f015 0506 	ands.w	r5, r5, #6
 800c22c:	d106      	bne.n	800c23c <_printf_common+0x48>
 800c22e:	f104 0a19 	add.w	sl, r4, #25
 800c232:	68e3      	ldr	r3, [r4, #12]
 800c234:	6832      	ldr	r2, [r6, #0]
 800c236:	1a9b      	subs	r3, r3, r2
 800c238:	42ab      	cmp	r3, r5
 800c23a:	dc26      	bgt.n	800c28a <_printf_common+0x96>
 800c23c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c240:	1e13      	subs	r3, r2, #0
 800c242:	6822      	ldr	r2, [r4, #0]
 800c244:	bf18      	it	ne
 800c246:	2301      	movne	r3, #1
 800c248:	0692      	lsls	r2, r2, #26
 800c24a:	d42b      	bmi.n	800c2a4 <_printf_common+0xb0>
 800c24c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c250:	4649      	mov	r1, r9
 800c252:	4638      	mov	r0, r7
 800c254:	47c0      	blx	r8
 800c256:	3001      	adds	r0, #1
 800c258:	d01e      	beq.n	800c298 <_printf_common+0xa4>
 800c25a:	6823      	ldr	r3, [r4, #0]
 800c25c:	6922      	ldr	r2, [r4, #16]
 800c25e:	f003 0306 	and.w	r3, r3, #6
 800c262:	2b04      	cmp	r3, #4
 800c264:	bf02      	ittt	eq
 800c266:	68e5      	ldreq	r5, [r4, #12]
 800c268:	6833      	ldreq	r3, [r6, #0]
 800c26a:	1aed      	subeq	r5, r5, r3
 800c26c:	68a3      	ldr	r3, [r4, #8]
 800c26e:	bf0c      	ite	eq
 800c270:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c274:	2500      	movne	r5, #0
 800c276:	4293      	cmp	r3, r2
 800c278:	bfc4      	itt	gt
 800c27a:	1a9b      	subgt	r3, r3, r2
 800c27c:	18ed      	addgt	r5, r5, r3
 800c27e:	2600      	movs	r6, #0
 800c280:	341a      	adds	r4, #26
 800c282:	42b5      	cmp	r5, r6
 800c284:	d11a      	bne.n	800c2bc <_printf_common+0xc8>
 800c286:	2000      	movs	r0, #0
 800c288:	e008      	b.n	800c29c <_printf_common+0xa8>
 800c28a:	2301      	movs	r3, #1
 800c28c:	4652      	mov	r2, sl
 800c28e:	4649      	mov	r1, r9
 800c290:	4638      	mov	r0, r7
 800c292:	47c0      	blx	r8
 800c294:	3001      	adds	r0, #1
 800c296:	d103      	bne.n	800c2a0 <_printf_common+0xac>
 800c298:	f04f 30ff 	mov.w	r0, #4294967295
 800c29c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2a0:	3501      	adds	r5, #1
 800c2a2:	e7c6      	b.n	800c232 <_printf_common+0x3e>
 800c2a4:	18e1      	adds	r1, r4, r3
 800c2a6:	1c5a      	adds	r2, r3, #1
 800c2a8:	2030      	movs	r0, #48	; 0x30
 800c2aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c2ae:	4422      	add	r2, r4
 800c2b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c2b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c2b8:	3302      	adds	r3, #2
 800c2ba:	e7c7      	b.n	800c24c <_printf_common+0x58>
 800c2bc:	2301      	movs	r3, #1
 800c2be:	4622      	mov	r2, r4
 800c2c0:	4649      	mov	r1, r9
 800c2c2:	4638      	mov	r0, r7
 800c2c4:	47c0      	blx	r8
 800c2c6:	3001      	adds	r0, #1
 800c2c8:	d0e6      	beq.n	800c298 <_printf_common+0xa4>
 800c2ca:	3601      	adds	r6, #1
 800c2cc:	e7d9      	b.n	800c282 <_printf_common+0x8e>
	...

0800c2d0 <_printf_i>:
 800c2d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c2d4:	7e0f      	ldrb	r7, [r1, #24]
 800c2d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c2d8:	2f78      	cmp	r7, #120	; 0x78
 800c2da:	4691      	mov	r9, r2
 800c2dc:	4680      	mov	r8, r0
 800c2de:	460c      	mov	r4, r1
 800c2e0:	469a      	mov	sl, r3
 800c2e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c2e6:	d807      	bhi.n	800c2f8 <_printf_i+0x28>
 800c2e8:	2f62      	cmp	r7, #98	; 0x62
 800c2ea:	d80a      	bhi.n	800c302 <_printf_i+0x32>
 800c2ec:	2f00      	cmp	r7, #0
 800c2ee:	f000 80d4 	beq.w	800c49a <_printf_i+0x1ca>
 800c2f2:	2f58      	cmp	r7, #88	; 0x58
 800c2f4:	f000 80c0 	beq.w	800c478 <_printf_i+0x1a8>
 800c2f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c2fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c300:	e03a      	b.n	800c378 <_printf_i+0xa8>
 800c302:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c306:	2b15      	cmp	r3, #21
 800c308:	d8f6      	bhi.n	800c2f8 <_printf_i+0x28>
 800c30a:	a101      	add	r1, pc, #4	; (adr r1, 800c310 <_printf_i+0x40>)
 800c30c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c310:	0800c369 	.word	0x0800c369
 800c314:	0800c37d 	.word	0x0800c37d
 800c318:	0800c2f9 	.word	0x0800c2f9
 800c31c:	0800c2f9 	.word	0x0800c2f9
 800c320:	0800c2f9 	.word	0x0800c2f9
 800c324:	0800c2f9 	.word	0x0800c2f9
 800c328:	0800c37d 	.word	0x0800c37d
 800c32c:	0800c2f9 	.word	0x0800c2f9
 800c330:	0800c2f9 	.word	0x0800c2f9
 800c334:	0800c2f9 	.word	0x0800c2f9
 800c338:	0800c2f9 	.word	0x0800c2f9
 800c33c:	0800c481 	.word	0x0800c481
 800c340:	0800c3a9 	.word	0x0800c3a9
 800c344:	0800c43b 	.word	0x0800c43b
 800c348:	0800c2f9 	.word	0x0800c2f9
 800c34c:	0800c2f9 	.word	0x0800c2f9
 800c350:	0800c4a3 	.word	0x0800c4a3
 800c354:	0800c2f9 	.word	0x0800c2f9
 800c358:	0800c3a9 	.word	0x0800c3a9
 800c35c:	0800c2f9 	.word	0x0800c2f9
 800c360:	0800c2f9 	.word	0x0800c2f9
 800c364:	0800c443 	.word	0x0800c443
 800c368:	682b      	ldr	r3, [r5, #0]
 800c36a:	1d1a      	adds	r2, r3, #4
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	602a      	str	r2, [r5, #0]
 800c370:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c374:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c378:	2301      	movs	r3, #1
 800c37a:	e09f      	b.n	800c4bc <_printf_i+0x1ec>
 800c37c:	6820      	ldr	r0, [r4, #0]
 800c37e:	682b      	ldr	r3, [r5, #0]
 800c380:	0607      	lsls	r7, r0, #24
 800c382:	f103 0104 	add.w	r1, r3, #4
 800c386:	6029      	str	r1, [r5, #0]
 800c388:	d501      	bpl.n	800c38e <_printf_i+0xbe>
 800c38a:	681e      	ldr	r6, [r3, #0]
 800c38c:	e003      	b.n	800c396 <_printf_i+0xc6>
 800c38e:	0646      	lsls	r6, r0, #25
 800c390:	d5fb      	bpl.n	800c38a <_printf_i+0xba>
 800c392:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c396:	2e00      	cmp	r6, #0
 800c398:	da03      	bge.n	800c3a2 <_printf_i+0xd2>
 800c39a:	232d      	movs	r3, #45	; 0x2d
 800c39c:	4276      	negs	r6, r6
 800c39e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3a2:	485a      	ldr	r0, [pc, #360]	; (800c50c <_printf_i+0x23c>)
 800c3a4:	230a      	movs	r3, #10
 800c3a6:	e012      	b.n	800c3ce <_printf_i+0xfe>
 800c3a8:	682b      	ldr	r3, [r5, #0]
 800c3aa:	6820      	ldr	r0, [r4, #0]
 800c3ac:	1d19      	adds	r1, r3, #4
 800c3ae:	6029      	str	r1, [r5, #0]
 800c3b0:	0605      	lsls	r5, r0, #24
 800c3b2:	d501      	bpl.n	800c3b8 <_printf_i+0xe8>
 800c3b4:	681e      	ldr	r6, [r3, #0]
 800c3b6:	e002      	b.n	800c3be <_printf_i+0xee>
 800c3b8:	0641      	lsls	r1, r0, #25
 800c3ba:	d5fb      	bpl.n	800c3b4 <_printf_i+0xe4>
 800c3bc:	881e      	ldrh	r6, [r3, #0]
 800c3be:	4853      	ldr	r0, [pc, #332]	; (800c50c <_printf_i+0x23c>)
 800c3c0:	2f6f      	cmp	r7, #111	; 0x6f
 800c3c2:	bf0c      	ite	eq
 800c3c4:	2308      	moveq	r3, #8
 800c3c6:	230a      	movne	r3, #10
 800c3c8:	2100      	movs	r1, #0
 800c3ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c3ce:	6865      	ldr	r5, [r4, #4]
 800c3d0:	60a5      	str	r5, [r4, #8]
 800c3d2:	2d00      	cmp	r5, #0
 800c3d4:	bfa2      	ittt	ge
 800c3d6:	6821      	ldrge	r1, [r4, #0]
 800c3d8:	f021 0104 	bicge.w	r1, r1, #4
 800c3dc:	6021      	strge	r1, [r4, #0]
 800c3de:	b90e      	cbnz	r6, 800c3e4 <_printf_i+0x114>
 800c3e0:	2d00      	cmp	r5, #0
 800c3e2:	d04b      	beq.n	800c47c <_printf_i+0x1ac>
 800c3e4:	4615      	mov	r5, r2
 800c3e6:	fbb6 f1f3 	udiv	r1, r6, r3
 800c3ea:	fb03 6711 	mls	r7, r3, r1, r6
 800c3ee:	5dc7      	ldrb	r7, [r0, r7]
 800c3f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c3f4:	4637      	mov	r7, r6
 800c3f6:	42bb      	cmp	r3, r7
 800c3f8:	460e      	mov	r6, r1
 800c3fa:	d9f4      	bls.n	800c3e6 <_printf_i+0x116>
 800c3fc:	2b08      	cmp	r3, #8
 800c3fe:	d10b      	bne.n	800c418 <_printf_i+0x148>
 800c400:	6823      	ldr	r3, [r4, #0]
 800c402:	07de      	lsls	r6, r3, #31
 800c404:	d508      	bpl.n	800c418 <_printf_i+0x148>
 800c406:	6923      	ldr	r3, [r4, #16]
 800c408:	6861      	ldr	r1, [r4, #4]
 800c40a:	4299      	cmp	r1, r3
 800c40c:	bfde      	ittt	le
 800c40e:	2330      	movle	r3, #48	; 0x30
 800c410:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c414:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c418:	1b52      	subs	r2, r2, r5
 800c41a:	6122      	str	r2, [r4, #16]
 800c41c:	f8cd a000 	str.w	sl, [sp]
 800c420:	464b      	mov	r3, r9
 800c422:	aa03      	add	r2, sp, #12
 800c424:	4621      	mov	r1, r4
 800c426:	4640      	mov	r0, r8
 800c428:	f7ff fee4 	bl	800c1f4 <_printf_common>
 800c42c:	3001      	adds	r0, #1
 800c42e:	d14a      	bne.n	800c4c6 <_printf_i+0x1f6>
 800c430:	f04f 30ff 	mov.w	r0, #4294967295
 800c434:	b004      	add	sp, #16
 800c436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c43a:	6823      	ldr	r3, [r4, #0]
 800c43c:	f043 0320 	orr.w	r3, r3, #32
 800c440:	6023      	str	r3, [r4, #0]
 800c442:	4833      	ldr	r0, [pc, #204]	; (800c510 <_printf_i+0x240>)
 800c444:	2778      	movs	r7, #120	; 0x78
 800c446:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c44a:	6823      	ldr	r3, [r4, #0]
 800c44c:	6829      	ldr	r1, [r5, #0]
 800c44e:	061f      	lsls	r7, r3, #24
 800c450:	f851 6b04 	ldr.w	r6, [r1], #4
 800c454:	d402      	bmi.n	800c45c <_printf_i+0x18c>
 800c456:	065f      	lsls	r7, r3, #25
 800c458:	bf48      	it	mi
 800c45a:	b2b6      	uxthmi	r6, r6
 800c45c:	07df      	lsls	r7, r3, #31
 800c45e:	bf48      	it	mi
 800c460:	f043 0320 	orrmi.w	r3, r3, #32
 800c464:	6029      	str	r1, [r5, #0]
 800c466:	bf48      	it	mi
 800c468:	6023      	strmi	r3, [r4, #0]
 800c46a:	b91e      	cbnz	r6, 800c474 <_printf_i+0x1a4>
 800c46c:	6823      	ldr	r3, [r4, #0]
 800c46e:	f023 0320 	bic.w	r3, r3, #32
 800c472:	6023      	str	r3, [r4, #0]
 800c474:	2310      	movs	r3, #16
 800c476:	e7a7      	b.n	800c3c8 <_printf_i+0xf8>
 800c478:	4824      	ldr	r0, [pc, #144]	; (800c50c <_printf_i+0x23c>)
 800c47a:	e7e4      	b.n	800c446 <_printf_i+0x176>
 800c47c:	4615      	mov	r5, r2
 800c47e:	e7bd      	b.n	800c3fc <_printf_i+0x12c>
 800c480:	682b      	ldr	r3, [r5, #0]
 800c482:	6826      	ldr	r6, [r4, #0]
 800c484:	6961      	ldr	r1, [r4, #20]
 800c486:	1d18      	adds	r0, r3, #4
 800c488:	6028      	str	r0, [r5, #0]
 800c48a:	0635      	lsls	r5, r6, #24
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	d501      	bpl.n	800c494 <_printf_i+0x1c4>
 800c490:	6019      	str	r1, [r3, #0]
 800c492:	e002      	b.n	800c49a <_printf_i+0x1ca>
 800c494:	0670      	lsls	r0, r6, #25
 800c496:	d5fb      	bpl.n	800c490 <_printf_i+0x1c0>
 800c498:	8019      	strh	r1, [r3, #0]
 800c49a:	2300      	movs	r3, #0
 800c49c:	6123      	str	r3, [r4, #16]
 800c49e:	4615      	mov	r5, r2
 800c4a0:	e7bc      	b.n	800c41c <_printf_i+0x14c>
 800c4a2:	682b      	ldr	r3, [r5, #0]
 800c4a4:	1d1a      	adds	r2, r3, #4
 800c4a6:	602a      	str	r2, [r5, #0]
 800c4a8:	681d      	ldr	r5, [r3, #0]
 800c4aa:	6862      	ldr	r2, [r4, #4]
 800c4ac:	2100      	movs	r1, #0
 800c4ae:	4628      	mov	r0, r5
 800c4b0:	f7f3 ff16 	bl	80002e0 <memchr>
 800c4b4:	b108      	cbz	r0, 800c4ba <_printf_i+0x1ea>
 800c4b6:	1b40      	subs	r0, r0, r5
 800c4b8:	6060      	str	r0, [r4, #4]
 800c4ba:	6863      	ldr	r3, [r4, #4]
 800c4bc:	6123      	str	r3, [r4, #16]
 800c4be:	2300      	movs	r3, #0
 800c4c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4c4:	e7aa      	b.n	800c41c <_printf_i+0x14c>
 800c4c6:	6923      	ldr	r3, [r4, #16]
 800c4c8:	462a      	mov	r2, r5
 800c4ca:	4649      	mov	r1, r9
 800c4cc:	4640      	mov	r0, r8
 800c4ce:	47d0      	blx	sl
 800c4d0:	3001      	adds	r0, #1
 800c4d2:	d0ad      	beq.n	800c430 <_printf_i+0x160>
 800c4d4:	6823      	ldr	r3, [r4, #0]
 800c4d6:	079b      	lsls	r3, r3, #30
 800c4d8:	d413      	bmi.n	800c502 <_printf_i+0x232>
 800c4da:	68e0      	ldr	r0, [r4, #12]
 800c4dc:	9b03      	ldr	r3, [sp, #12]
 800c4de:	4298      	cmp	r0, r3
 800c4e0:	bfb8      	it	lt
 800c4e2:	4618      	movlt	r0, r3
 800c4e4:	e7a6      	b.n	800c434 <_printf_i+0x164>
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	4632      	mov	r2, r6
 800c4ea:	4649      	mov	r1, r9
 800c4ec:	4640      	mov	r0, r8
 800c4ee:	47d0      	blx	sl
 800c4f0:	3001      	adds	r0, #1
 800c4f2:	d09d      	beq.n	800c430 <_printf_i+0x160>
 800c4f4:	3501      	adds	r5, #1
 800c4f6:	68e3      	ldr	r3, [r4, #12]
 800c4f8:	9903      	ldr	r1, [sp, #12]
 800c4fa:	1a5b      	subs	r3, r3, r1
 800c4fc:	42ab      	cmp	r3, r5
 800c4fe:	dcf2      	bgt.n	800c4e6 <_printf_i+0x216>
 800c500:	e7eb      	b.n	800c4da <_printf_i+0x20a>
 800c502:	2500      	movs	r5, #0
 800c504:	f104 0619 	add.w	r6, r4, #25
 800c508:	e7f5      	b.n	800c4f6 <_printf_i+0x226>
 800c50a:	bf00      	nop
 800c50c:	08010e5a 	.word	0x08010e5a
 800c510:	08010e6b 	.word	0x08010e6b

0800c514 <_scanf_float>:
 800c514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c518:	b087      	sub	sp, #28
 800c51a:	4617      	mov	r7, r2
 800c51c:	9303      	str	r3, [sp, #12]
 800c51e:	688b      	ldr	r3, [r1, #8]
 800c520:	1e5a      	subs	r2, r3, #1
 800c522:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c526:	bf83      	ittte	hi
 800c528:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c52c:	195b      	addhi	r3, r3, r5
 800c52e:	9302      	strhi	r3, [sp, #8]
 800c530:	2300      	movls	r3, #0
 800c532:	bf86      	itte	hi
 800c534:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c538:	608b      	strhi	r3, [r1, #8]
 800c53a:	9302      	strls	r3, [sp, #8]
 800c53c:	680b      	ldr	r3, [r1, #0]
 800c53e:	468b      	mov	fp, r1
 800c540:	2500      	movs	r5, #0
 800c542:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c546:	f84b 3b1c 	str.w	r3, [fp], #28
 800c54a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c54e:	4680      	mov	r8, r0
 800c550:	460c      	mov	r4, r1
 800c552:	465e      	mov	r6, fp
 800c554:	46aa      	mov	sl, r5
 800c556:	46a9      	mov	r9, r5
 800c558:	9501      	str	r5, [sp, #4]
 800c55a:	68a2      	ldr	r2, [r4, #8]
 800c55c:	b152      	cbz	r2, 800c574 <_scanf_float+0x60>
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	781b      	ldrb	r3, [r3, #0]
 800c562:	2b4e      	cmp	r3, #78	; 0x4e
 800c564:	d864      	bhi.n	800c630 <_scanf_float+0x11c>
 800c566:	2b40      	cmp	r3, #64	; 0x40
 800c568:	d83c      	bhi.n	800c5e4 <_scanf_float+0xd0>
 800c56a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c56e:	b2c8      	uxtb	r0, r1
 800c570:	280e      	cmp	r0, #14
 800c572:	d93a      	bls.n	800c5ea <_scanf_float+0xd6>
 800c574:	f1b9 0f00 	cmp.w	r9, #0
 800c578:	d003      	beq.n	800c582 <_scanf_float+0x6e>
 800c57a:	6823      	ldr	r3, [r4, #0]
 800c57c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c580:	6023      	str	r3, [r4, #0]
 800c582:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c586:	f1ba 0f01 	cmp.w	sl, #1
 800c58a:	f200 8113 	bhi.w	800c7b4 <_scanf_float+0x2a0>
 800c58e:	455e      	cmp	r6, fp
 800c590:	f200 8105 	bhi.w	800c79e <_scanf_float+0x28a>
 800c594:	2501      	movs	r5, #1
 800c596:	4628      	mov	r0, r5
 800c598:	b007      	add	sp, #28
 800c59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c59e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c5a2:	2a0d      	cmp	r2, #13
 800c5a4:	d8e6      	bhi.n	800c574 <_scanf_float+0x60>
 800c5a6:	a101      	add	r1, pc, #4	; (adr r1, 800c5ac <_scanf_float+0x98>)
 800c5a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c5ac:	0800c6eb 	.word	0x0800c6eb
 800c5b0:	0800c575 	.word	0x0800c575
 800c5b4:	0800c575 	.word	0x0800c575
 800c5b8:	0800c575 	.word	0x0800c575
 800c5bc:	0800c74b 	.word	0x0800c74b
 800c5c0:	0800c723 	.word	0x0800c723
 800c5c4:	0800c575 	.word	0x0800c575
 800c5c8:	0800c575 	.word	0x0800c575
 800c5cc:	0800c6f9 	.word	0x0800c6f9
 800c5d0:	0800c575 	.word	0x0800c575
 800c5d4:	0800c575 	.word	0x0800c575
 800c5d8:	0800c575 	.word	0x0800c575
 800c5dc:	0800c575 	.word	0x0800c575
 800c5e0:	0800c6b1 	.word	0x0800c6b1
 800c5e4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c5e8:	e7db      	b.n	800c5a2 <_scanf_float+0x8e>
 800c5ea:	290e      	cmp	r1, #14
 800c5ec:	d8c2      	bhi.n	800c574 <_scanf_float+0x60>
 800c5ee:	a001      	add	r0, pc, #4	; (adr r0, 800c5f4 <_scanf_float+0xe0>)
 800c5f0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c5f4:	0800c6a3 	.word	0x0800c6a3
 800c5f8:	0800c575 	.word	0x0800c575
 800c5fc:	0800c6a3 	.word	0x0800c6a3
 800c600:	0800c737 	.word	0x0800c737
 800c604:	0800c575 	.word	0x0800c575
 800c608:	0800c651 	.word	0x0800c651
 800c60c:	0800c68d 	.word	0x0800c68d
 800c610:	0800c68d 	.word	0x0800c68d
 800c614:	0800c68d 	.word	0x0800c68d
 800c618:	0800c68d 	.word	0x0800c68d
 800c61c:	0800c68d 	.word	0x0800c68d
 800c620:	0800c68d 	.word	0x0800c68d
 800c624:	0800c68d 	.word	0x0800c68d
 800c628:	0800c68d 	.word	0x0800c68d
 800c62c:	0800c68d 	.word	0x0800c68d
 800c630:	2b6e      	cmp	r3, #110	; 0x6e
 800c632:	d809      	bhi.n	800c648 <_scanf_float+0x134>
 800c634:	2b60      	cmp	r3, #96	; 0x60
 800c636:	d8b2      	bhi.n	800c59e <_scanf_float+0x8a>
 800c638:	2b54      	cmp	r3, #84	; 0x54
 800c63a:	d077      	beq.n	800c72c <_scanf_float+0x218>
 800c63c:	2b59      	cmp	r3, #89	; 0x59
 800c63e:	d199      	bne.n	800c574 <_scanf_float+0x60>
 800c640:	2d07      	cmp	r5, #7
 800c642:	d197      	bne.n	800c574 <_scanf_float+0x60>
 800c644:	2508      	movs	r5, #8
 800c646:	e029      	b.n	800c69c <_scanf_float+0x188>
 800c648:	2b74      	cmp	r3, #116	; 0x74
 800c64a:	d06f      	beq.n	800c72c <_scanf_float+0x218>
 800c64c:	2b79      	cmp	r3, #121	; 0x79
 800c64e:	e7f6      	b.n	800c63e <_scanf_float+0x12a>
 800c650:	6821      	ldr	r1, [r4, #0]
 800c652:	05c8      	lsls	r0, r1, #23
 800c654:	d51a      	bpl.n	800c68c <_scanf_float+0x178>
 800c656:	9b02      	ldr	r3, [sp, #8]
 800c658:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c65c:	6021      	str	r1, [r4, #0]
 800c65e:	f109 0901 	add.w	r9, r9, #1
 800c662:	b11b      	cbz	r3, 800c66c <_scanf_float+0x158>
 800c664:	3b01      	subs	r3, #1
 800c666:	3201      	adds	r2, #1
 800c668:	9302      	str	r3, [sp, #8]
 800c66a:	60a2      	str	r2, [r4, #8]
 800c66c:	68a3      	ldr	r3, [r4, #8]
 800c66e:	3b01      	subs	r3, #1
 800c670:	60a3      	str	r3, [r4, #8]
 800c672:	6923      	ldr	r3, [r4, #16]
 800c674:	3301      	adds	r3, #1
 800c676:	6123      	str	r3, [r4, #16]
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	3b01      	subs	r3, #1
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	607b      	str	r3, [r7, #4]
 800c680:	f340 8084 	ble.w	800c78c <_scanf_float+0x278>
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	3301      	adds	r3, #1
 800c688:	603b      	str	r3, [r7, #0]
 800c68a:	e766      	b.n	800c55a <_scanf_float+0x46>
 800c68c:	eb1a 0f05 	cmn.w	sl, r5
 800c690:	f47f af70 	bne.w	800c574 <_scanf_float+0x60>
 800c694:	6822      	ldr	r2, [r4, #0]
 800c696:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c69a:	6022      	str	r2, [r4, #0]
 800c69c:	f806 3b01 	strb.w	r3, [r6], #1
 800c6a0:	e7e4      	b.n	800c66c <_scanf_float+0x158>
 800c6a2:	6822      	ldr	r2, [r4, #0]
 800c6a4:	0610      	lsls	r0, r2, #24
 800c6a6:	f57f af65 	bpl.w	800c574 <_scanf_float+0x60>
 800c6aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c6ae:	e7f4      	b.n	800c69a <_scanf_float+0x186>
 800c6b0:	f1ba 0f00 	cmp.w	sl, #0
 800c6b4:	d10e      	bne.n	800c6d4 <_scanf_float+0x1c0>
 800c6b6:	f1b9 0f00 	cmp.w	r9, #0
 800c6ba:	d10e      	bne.n	800c6da <_scanf_float+0x1c6>
 800c6bc:	6822      	ldr	r2, [r4, #0]
 800c6be:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c6c2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c6c6:	d108      	bne.n	800c6da <_scanf_float+0x1c6>
 800c6c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c6cc:	6022      	str	r2, [r4, #0]
 800c6ce:	f04f 0a01 	mov.w	sl, #1
 800c6d2:	e7e3      	b.n	800c69c <_scanf_float+0x188>
 800c6d4:	f1ba 0f02 	cmp.w	sl, #2
 800c6d8:	d055      	beq.n	800c786 <_scanf_float+0x272>
 800c6da:	2d01      	cmp	r5, #1
 800c6dc:	d002      	beq.n	800c6e4 <_scanf_float+0x1d0>
 800c6de:	2d04      	cmp	r5, #4
 800c6e0:	f47f af48 	bne.w	800c574 <_scanf_float+0x60>
 800c6e4:	3501      	adds	r5, #1
 800c6e6:	b2ed      	uxtb	r5, r5
 800c6e8:	e7d8      	b.n	800c69c <_scanf_float+0x188>
 800c6ea:	f1ba 0f01 	cmp.w	sl, #1
 800c6ee:	f47f af41 	bne.w	800c574 <_scanf_float+0x60>
 800c6f2:	f04f 0a02 	mov.w	sl, #2
 800c6f6:	e7d1      	b.n	800c69c <_scanf_float+0x188>
 800c6f8:	b97d      	cbnz	r5, 800c71a <_scanf_float+0x206>
 800c6fa:	f1b9 0f00 	cmp.w	r9, #0
 800c6fe:	f47f af3c 	bne.w	800c57a <_scanf_float+0x66>
 800c702:	6822      	ldr	r2, [r4, #0]
 800c704:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c708:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c70c:	f47f af39 	bne.w	800c582 <_scanf_float+0x6e>
 800c710:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c714:	6022      	str	r2, [r4, #0]
 800c716:	2501      	movs	r5, #1
 800c718:	e7c0      	b.n	800c69c <_scanf_float+0x188>
 800c71a:	2d03      	cmp	r5, #3
 800c71c:	d0e2      	beq.n	800c6e4 <_scanf_float+0x1d0>
 800c71e:	2d05      	cmp	r5, #5
 800c720:	e7de      	b.n	800c6e0 <_scanf_float+0x1cc>
 800c722:	2d02      	cmp	r5, #2
 800c724:	f47f af26 	bne.w	800c574 <_scanf_float+0x60>
 800c728:	2503      	movs	r5, #3
 800c72a:	e7b7      	b.n	800c69c <_scanf_float+0x188>
 800c72c:	2d06      	cmp	r5, #6
 800c72e:	f47f af21 	bne.w	800c574 <_scanf_float+0x60>
 800c732:	2507      	movs	r5, #7
 800c734:	e7b2      	b.n	800c69c <_scanf_float+0x188>
 800c736:	6822      	ldr	r2, [r4, #0]
 800c738:	0591      	lsls	r1, r2, #22
 800c73a:	f57f af1b 	bpl.w	800c574 <_scanf_float+0x60>
 800c73e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c742:	6022      	str	r2, [r4, #0]
 800c744:	f8cd 9004 	str.w	r9, [sp, #4]
 800c748:	e7a8      	b.n	800c69c <_scanf_float+0x188>
 800c74a:	6822      	ldr	r2, [r4, #0]
 800c74c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c750:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c754:	d006      	beq.n	800c764 <_scanf_float+0x250>
 800c756:	0550      	lsls	r0, r2, #21
 800c758:	f57f af0c 	bpl.w	800c574 <_scanf_float+0x60>
 800c75c:	f1b9 0f00 	cmp.w	r9, #0
 800c760:	f43f af0f 	beq.w	800c582 <_scanf_float+0x6e>
 800c764:	0591      	lsls	r1, r2, #22
 800c766:	bf58      	it	pl
 800c768:	9901      	ldrpl	r1, [sp, #4]
 800c76a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c76e:	bf58      	it	pl
 800c770:	eba9 0101 	subpl.w	r1, r9, r1
 800c774:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c778:	bf58      	it	pl
 800c77a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c77e:	6022      	str	r2, [r4, #0]
 800c780:	f04f 0900 	mov.w	r9, #0
 800c784:	e78a      	b.n	800c69c <_scanf_float+0x188>
 800c786:	f04f 0a03 	mov.w	sl, #3
 800c78a:	e787      	b.n	800c69c <_scanf_float+0x188>
 800c78c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c790:	4639      	mov	r1, r7
 800c792:	4640      	mov	r0, r8
 800c794:	4798      	blx	r3
 800c796:	2800      	cmp	r0, #0
 800c798:	f43f aedf 	beq.w	800c55a <_scanf_float+0x46>
 800c79c:	e6ea      	b.n	800c574 <_scanf_float+0x60>
 800c79e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c7a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c7a6:	463a      	mov	r2, r7
 800c7a8:	4640      	mov	r0, r8
 800c7aa:	4798      	blx	r3
 800c7ac:	6923      	ldr	r3, [r4, #16]
 800c7ae:	3b01      	subs	r3, #1
 800c7b0:	6123      	str	r3, [r4, #16]
 800c7b2:	e6ec      	b.n	800c58e <_scanf_float+0x7a>
 800c7b4:	1e6b      	subs	r3, r5, #1
 800c7b6:	2b06      	cmp	r3, #6
 800c7b8:	d825      	bhi.n	800c806 <_scanf_float+0x2f2>
 800c7ba:	2d02      	cmp	r5, #2
 800c7bc:	d836      	bhi.n	800c82c <_scanf_float+0x318>
 800c7be:	455e      	cmp	r6, fp
 800c7c0:	f67f aee8 	bls.w	800c594 <_scanf_float+0x80>
 800c7c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c7c8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c7cc:	463a      	mov	r2, r7
 800c7ce:	4640      	mov	r0, r8
 800c7d0:	4798      	blx	r3
 800c7d2:	6923      	ldr	r3, [r4, #16]
 800c7d4:	3b01      	subs	r3, #1
 800c7d6:	6123      	str	r3, [r4, #16]
 800c7d8:	e7f1      	b.n	800c7be <_scanf_float+0x2aa>
 800c7da:	9802      	ldr	r0, [sp, #8]
 800c7dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c7e0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c7e4:	9002      	str	r0, [sp, #8]
 800c7e6:	463a      	mov	r2, r7
 800c7e8:	4640      	mov	r0, r8
 800c7ea:	4798      	blx	r3
 800c7ec:	6923      	ldr	r3, [r4, #16]
 800c7ee:	3b01      	subs	r3, #1
 800c7f0:	6123      	str	r3, [r4, #16]
 800c7f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c7f6:	fa5f fa8a 	uxtb.w	sl, sl
 800c7fa:	f1ba 0f02 	cmp.w	sl, #2
 800c7fe:	d1ec      	bne.n	800c7da <_scanf_float+0x2c6>
 800c800:	3d03      	subs	r5, #3
 800c802:	b2ed      	uxtb	r5, r5
 800c804:	1b76      	subs	r6, r6, r5
 800c806:	6823      	ldr	r3, [r4, #0]
 800c808:	05da      	lsls	r2, r3, #23
 800c80a:	d52f      	bpl.n	800c86c <_scanf_float+0x358>
 800c80c:	055b      	lsls	r3, r3, #21
 800c80e:	d510      	bpl.n	800c832 <_scanf_float+0x31e>
 800c810:	455e      	cmp	r6, fp
 800c812:	f67f aebf 	bls.w	800c594 <_scanf_float+0x80>
 800c816:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c81a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c81e:	463a      	mov	r2, r7
 800c820:	4640      	mov	r0, r8
 800c822:	4798      	blx	r3
 800c824:	6923      	ldr	r3, [r4, #16]
 800c826:	3b01      	subs	r3, #1
 800c828:	6123      	str	r3, [r4, #16]
 800c82a:	e7f1      	b.n	800c810 <_scanf_float+0x2fc>
 800c82c:	46aa      	mov	sl, r5
 800c82e:	9602      	str	r6, [sp, #8]
 800c830:	e7df      	b.n	800c7f2 <_scanf_float+0x2de>
 800c832:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c836:	6923      	ldr	r3, [r4, #16]
 800c838:	2965      	cmp	r1, #101	; 0x65
 800c83a:	f103 33ff 	add.w	r3, r3, #4294967295
 800c83e:	f106 35ff 	add.w	r5, r6, #4294967295
 800c842:	6123      	str	r3, [r4, #16]
 800c844:	d00c      	beq.n	800c860 <_scanf_float+0x34c>
 800c846:	2945      	cmp	r1, #69	; 0x45
 800c848:	d00a      	beq.n	800c860 <_scanf_float+0x34c>
 800c84a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c84e:	463a      	mov	r2, r7
 800c850:	4640      	mov	r0, r8
 800c852:	4798      	blx	r3
 800c854:	6923      	ldr	r3, [r4, #16]
 800c856:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c85a:	3b01      	subs	r3, #1
 800c85c:	1eb5      	subs	r5, r6, #2
 800c85e:	6123      	str	r3, [r4, #16]
 800c860:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c864:	463a      	mov	r2, r7
 800c866:	4640      	mov	r0, r8
 800c868:	4798      	blx	r3
 800c86a:	462e      	mov	r6, r5
 800c86c:	6825      	ldr	r5, [r4, #0]
 800c86e:	f015 0510 	ands.w	r5, r5, #16
 800c872:	d14d      	bne.n	800c910 <_scanf_float+0x3fc>
 800c874:	7035      	strb	r5, [r6, #0]
 800c876:	6823      	ldr	r3, [r4, #0]
 800c878:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c87c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c880:	d11a      	bne.n	800c8b8 <_scanf_float+0x3a4>
 800c882:	9b01      	ldr	r3, [sp, #4]
 800c884:	454b      	cmp	r3, r9
 800c886:	eba3 0209 	sub.w	r2, r3, r9
 800c88a:	d122      	bne.n	800c8d2 <_scanf_float+0x3be>
 800c88c:	2200      	movs	r2, #0
 800c88e:	4659      	mov	r1, fp
 800c890:	4640      	mov	r0, r8
 800c892:	f002 fbdb 	bl	800f04c <_strtod_r>
 800c896:	9b03      	ldr	r3, [sp, #12]
 800c898:	6821      	ldr	r1, [r4, #0]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f011 0f02 	tst.w	r1, #2
 800c8a0:	f103 0204 	add.w	r2, r3, #4
 800c8a4:	d020      	beq.n	800c8e8 <_scanf_float+0x3d4>
 800c8a6:	9903      	ldr	r1, [sp, #12]
 800c8a8:	600a      	str	r2, [r1, #0]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	ed83 0b00 	vstr	d0, [r3]
 800c8b0:	68e3      	ldr	r3, [r4, #12]
 800c8b2:	3301      	adds	r3, #1
 800c8b4:	60e3      	str	r3, [r4, #12]
 800c8b6:	e66e      	b.n	800c596 <_scanf_float+0x82>
 800c8b8:	9b04      	ldr	r3, [sp, #16]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d0e6      	beq.n	800c88c <_scanf_float+0x378>
 800c8be:	9905      	ldr	r1, [sp, #20]
 800c8c0:	230a      	movs	r3, #10
 800c8c2:	462a      	mov	r2, r5
 800c8c4:	3101      	adds	r1, #1
 800c8c6:	4640      	mov	r0, r8
 800c8c8:	f002 fc48 	bl	800f15c <_strtol_r>
 800c8cc:	9b04      	ldr	r3, [sp, #16]
 800c8ce:	9e05      	ldr	r6, [sp, #20]
 800c8d0:	1ac2      	subs	r2, r0, r3
 800c8d2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c8d6:	429e      	cmp	r6, r3
 800c8d8:	bf28      	it	cs
 800c8da:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c8de:	490d      	ldr	r1, [pc, #52]	; (800c914 <_scanf_float+0x400>)
 800c8e0:	4630      	mov	r0, r6
 800c8e2:	f000 f8cb 	bl	800ca7c <siprintf>
 800c8e6:	e7d1      	b.n	800c88c <_scanf_float+0x378>
 800c8e8:	f011 0f04 	tst.w	r1, #4
 800c8ec:	9903      	ldr	r1, [sp, #12]
 800c8ee:	600a      	str	r2, [r1, #0]
 800c8f0:	d1db      	bne.n	800c8aa <_scanf_float+0x396>
 800c8f2:	eeb4 0b40 	vcmp.f64	d0, d0
 800c8f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8fa:	681e      	ldr	r6, [r3, #0]
 800c8fc:	d705      	bvc.n	800c90a <_scanf_float+0x3f6>
 800c8fe:	4806      	ldr	r0, [pc, #24]	; (800c918 <_scanf_float+0x404>)
 800c900:	f000 fa32 	bl	800cd68 <nanf>
 800c904:	ed86 0a00 	vstr	s0, [r6]
 800c908:	e7d2      	b.n	800c8b0 <_scanf_float+0x39c>
 800c90a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c90e:	e7f9      	b.n	800c904 <_scanf_float+0x3f0>
 800c910:	2500      	movs	r5, #0
 800c912:	e640      	b.n	800c596 <_scanf_float+0x82>
 800c914:	08010e7c 	.word	0x08010e7c
 800c918:	0801120d 	.word	0x0801120d

0800c91c <std>:
 800c91c:	2300      	movs	r3, #0
 800c91e:	b510      	push	{r4, lr}
 800c920:	4604      	mov	r4, r0
 800c922:	e9c0 3300 	strd	r3, r3, [r0]
 800c926:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c92a:	6083      	str	r3, [r0, #8]
 800c92c:	8181      	strh	r1, [r0, #12]
 800c92e:	6643      	str	r3, [r0, #100]	; 0x64
 800c930:	81c2      	strh	r2, [r0, #14]
 800c932:	6183      	str	r3, [r0, #24]
 800c934:	4619      	mov	r1, r3
 800c936:	2208      	movs	r2, #8
 800c938:	305c      	adds	r0, #92	; 0x5c
 800c93a:	f000 f997 	bl	800cc6c <memset>
 800c93e:	4b05      	ldr	r3, [pc, #20]	; (800c954 <std+0x38>)
 800c940:	6263      	str	r3, [r4, #36]	; 0x24
 800c942:	4b05      	ldr	r3, [pc, #20]	; (800c958 <std+0x3c>)
 800c944:	62a3      	str	r3, [r4, #40]	; 0x28
 800c946:	4b05      	ldr	r3, [pc, #20]	; (800c95c <std+0x40>)
 800c948:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c94a:	4b05      	ldr	r3, [pc, #20]	; (800c960 <std+0x44>)
 800c94c:	6224      	str	r4, [r4, #32]
 800c94e:	6323      	str	r3, [r4, #48]	; 0x30
 800c950:	bd10      	pop	{r4, pc}
 800c952:	bf00      	nop
 800c954:	0800cabd 	.word	0x0800cabd
 800c958:	0800cadf 	.word	0x0800cadf
 800c95c:	0800cb17 	.word	0x0800cb17
 800c960:	0800cb3b 	.word	0x0800cb3b

0800c964 <stdio_exit_handler>:
 800c964:	4a02      	ldr	r2, [pc, #8]	; (800c970 <stdio_exit_handler+0xc>)
 800c966:	4903      	ldr	r1, [pc, #12]	; (800c974 <stdio_exit_handler+0x10>)
 800c968:	4803      	ldr	r0, [pc, #12]	; (800c978 <stdio_exit_handler+0x14>)
 800c96a:	f000 b869 	b.w	800ca40 <_fwalk_sglue>
 800c96e:	bf00      	nop
 800c970:	24000010 	.word	0x24000010
 800c974:	0800f51d 	.word	0x0800f51d
 800c978:	2400001c 	.word	0x2400001c

0800c97c <cleanup_stdio>:
 800c97c:	6841      	ldr	r1, [r0, #4]
 800c97e:	4b0c      	ldr	r3, [pc, #48]	; (800c9b0 <cleanup_stdio+0x34>)
 800c980:	4299      	cmp	r1, r3
 800c982:	b510      	push	{r4, lr}
 800c984:	4604      	mov	r4, r0
 800c986:	d001      	beq.n	800c98c <cleanup_stdio+0x10>
 800c988:	f002 fdc8 	bl	800f51c <_fflush_r>
 800c98c:	68a1      	ldr	r1, [r4, #8]
 800c98e:	4b09      	ldr	r3, [pc, #36]	; (800c9b4 <cleanup_stdio+0x38>)
 800c990:	4299      	cmp	r1, r3
 800c992:	d002      	beq.n	800c99a <cleanup_stdio+0x1e>
 800c994:	4620      	mov	r0, r4
 800c996:	f002 fdc1 	bl	800f51c <_fflush_r>
 800c99a:	68e1      	ldr	r1, [r4, #12]
 800c99c:	4b06      	ldr	r3, [pc, #24]	; (800c9b8 <cleanup_stdio+0x3c>)
 800c99e:	4299      	cmp	r1, r3
 800c9a0:	d004      	beq.n	800c9ac <cleanup_stdio+0x30>
 800c9a2:	4620      	mov	r0, r4
 800c9a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9a8:	f002 bdb8 	b.w	800f51c <_fflush_r>
 800c9ac:	bd10      	pop	{r4, pc}
 800c9ae:	bf00      	nop
 800c9b0:	24000538 	.word	0x24000538
 800c9b4:	240005a0 	.word	0x240005a0
 800c9b8:	24000608 	.word	0x24000608

0800c9bc <global_stdio_init.part.0>:
 800c9bc:	b510      	push	{r4, lr}
 800c9be:	4b0b      	ldr	r3, [pc, #44]	; (800c9ec <global_stdio_init.part.0+0x30>)
 800c9c0:	4c0b      	ldr	r4, [pc, #44]	; (800c9f0 <global_stdio_init.part.0+0x34>)
 800c9c2:	4a0c      	ldr	r2, [pc, #48]	; (800c9f4 <global_stdio_init.part.0+0x38>)
 800c9c4:	601a      	str	r2, [r3, #0]
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	2104      	movs	r1, #4
 800c9cc:	f7ff ffa6 	bl	800c91c <std>
 800c9d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c9d4:	2201      	movs	r2, #1
 800c9d6:	2109      	movs	r1, #9
 800c9d8:	f7ff ffa0 	bl	800c91c <std>
 800c9dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c9e0:	2202      	movs	r2, #2
 800c9e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9e6:	2112      	movs	r1, #18
 800c9e8:	f7ff bf98 	b.w	800c91c <std>
 800c9ec:	24000670 	.word	0x24000670
 800c9f0:	24000538 	.word	0x24000538
 800c9f4:	0800c965 	.word	0x0800c965

0800c9f8 <__sfp_lock_acquire>:
 800c9f8:	4801      	ldr	r0, [pc, #4]	; (800ca00 <__sfp_lock_acquire+0x8>)
 800c9fa:	f000 b9b3 	b.w	800cd64 <__retarget_lock_acquire_recursive>
 800c9fe:	bf00      	nop
 800ca00:	24000679 	.word	0x24000679

0800ca04 <__sfp_lock_release>:
 800ca04:	4801      	ldr	r0, [pc, #4]	; (800ca0c <__sfp_lock_release+0x8>)
 800ca06:	f000 b9ae 	b.w	800cd66 <__retarget_lock_release_recursive>
 800ca0a:	bf00      	nop
 800ca0c:	24000679 	.word	0x24000679

0800ca10 <__sinit>:
 800ca10:	b510      	push	{r4, lr}
 800ca12:	4604      	mov	r4, r0
 800ca14:	f7ff fff0 	bl	800c9f8 <__sfp_lock_acquire>
 800ca18:	6a23      	ldr	r3, [r4, #32]
 800ca1a:	b11b      	cbz	r3, 800ca24 <__sinit+0x14>
 800ca1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca20:	f7ff bff0 	b.w	800ca04 <__sfp_lock_release>
 800ca24:	4b04      	ldr	r3, [pc, #16]	; (800ca38 <__sinit+0x28>)
 800ca26:	6223      	str	r3, [r4, #32]
 800ca28:	4b04      	ldr	r3, [pc, #16]	; (800ca3c <__sinit+0x2c>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d1f5      	bne.n	800ca1c <__sinit+0xc>
 800ca30:	f7ff ffc4 	bl	800c9bc <global_stdio_init.part.0>
 800ca34:	e7f2      	b.n	800ca1c <__sinit+0xc>
 800ca36:	bf00      	nop
 800ca38:	0800c97d 	.word	0x0800c97d
 800ca3c:	24000670 	.word	0x24000670

0800ca40 <_fwalk_sglue>:
 800ca40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca44:	4607      	mov	r7, r0
 800ca46:	4688      	mov	r8, r1
 800ca48:	4614      	mov	r4, r2
 800ca4a:	2600      	movs	r6, #0
 800ca4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ca50:	f1b9 0901 	subs.w	r9, r9, #1
 800ca54:	d505      	bpl.n	800ca62 <_fwalk_sglue+0x22>
 800ca56:	6824      	ldr	r4, [r4, #0]
 800ca58:	2c00      	cmp	r4, #0
 800ca5a:	d1f7      	bne.n	800ca4c <_fwalk_sglue+0xc>
 800ca5c:	4630      	mov	r0, r6
 800ca5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca62:	89ab      	ldrh	r3, [r5, #12]
 800ca64:	2b01      	cmp	r3, #1
 800ca66:	d907      	bls.n	800ca78 <_fwalk_sglue+0x38>
 800ca68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ca6c:	3301      	adds	r3, #1
 800ca6e:	d003      	beq.n	800ca78 <_fwalk_sglue+0x38>
 800ca70:	4629      	mov	r1, r5
 800ca72:	4638      	mov	r0, r7
 800ca74:	47c0      	blx	r8
 800ca76:	4306      	orrs	r6, r0
 800ca78:	3568      	adds	r5, #104	; 0x68
 800ca7a:	e7e9      	b.n	800ca50 <_fwalk_sglue+0x10>

0800ca7c <siprintf>:
 800ca7c:	b40e      	push	{r1, r2, r3}
 800ca7e:	b500      	push	{lr}
 800ca80:	b09c      	sub	sp, #112	; 0x70
 800ca82:	ab1d      	add	r3, sp, #116	; 0x74
 800ca84:	9002      	str	r0, [sp, #8]
 800ca86:	9006      	str	r0, [sp, #24]
 800ca88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ca8c:	4809      	ldr	r0, [pc, #36]	; (800cab4 <siprintf+0x38>)
 800ca8e:	9107      	str	r1, [sp, #28]
 800ca90:	9104      	str	r1, [sp, #16]
 800ca92:	4909      	ldr	r1, [pc, #36]	; (800cab8 <siprintf+0x3c>)
 800ca94:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca98:	9105      	str	r1, [sp, #20]
 800ca9a:	6800      	ldr	r0, [r0, #0]
 800ca9c:	9301      	str	r3, [sp, #4]
 800ca9e:	a902      	add	r1, sp, #8
 800caa0:	f002 fbb8 	bl	800f214 <_svfiprintf_r>
 800caa4:	9b02      	ldr	r3, [sp, #8]
 800caa6:	2200      	movs	r2, #0
 800caa8:	701a      	strb	r2, [r3, #0]
 800caaa:	b01c      	add	sp, #112	; 0x70
 800caac:	f85d eb04 	ldr.w	lr, [sp], #4
 800cab0:	b003      	add	sp, #12
 800cab2:	4770      	bx	lr
 800cab4:	24000068 	.word	0x24000068
 800cab8:	ffff0208 	.word	0xffff0208

0800cabc <__sread>:
 800cabc:	b510      	push	{r4, lr}
 800cabe:	460c      	mov	r4, r1
 800cac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cac4:	f000 f900 	bl	800ccc8 <_read_r>
 800cac8:	2800      	cmp	r0, #0
 800caca:	bfab      	itete	ge
 800cacc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cace:	89a3      	ldrhlt	r3, [r4, #12]
 800cad0:	181b      	addge	r3, r3, r0
 800cad2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cad6:	bfac      	ite	ge
 800cad8:	6563      	strge	r3, [r4, #84]	; 0x54
 800cada:	81a3      	strhlt	r3, [r4, #12]
 800cadc:	bd10      	pop	{r4, pc}

0800cade <__swrite>:
 800cade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cae2:	461f      	mov	r7, r3
 800cae4:	898b      	ldrh	r3, [r1, #12]
 800cae6:	05db      	lsls	r3, r3, #23
 800cae8:	4605      	mov	r5, r0
 800caea:	460c      	mov	r4, r1
 800caec:	4616      	mov	r6, r2
 800caee:	d505      	bpl.n	800cafc <__swrite+0x1e>
 800caf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800caf4:	2302      	movs	r3, #2
 800caf6:	2200      	movs	r2, #0
 800caf8:	f000 f8d4 	bl	800cca4 <_lseek_r>
 800cafc:	89a3      	ldrh	r3, [r4, #12]
 800cafe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cb06:	81a3      	strh	r3, [r4, #12]
 800cb08:	4632      	mov	r2, r6
 800cb0a:	463b      	mov	r3, r7
 800cb0c:	4628      	mov	r0, r5
 800cb0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb12:	f000 b8eb 	b.w	800ccec <_write_r>

0800cb16 <__sseek>:
 800cb16:	b510      	push	{r4, lr}
 800cb18:	460c      	mov	r4, r1
 800cb1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb1e:	f000 f8c1 	bl	800cca4 <_lseek_r>
 800cb22:	1c43      	adds	r3, r0, #1
 800cb24:	89a3      	ldrh	r3, [r4, #12]
 800cb26:	bf15      	itete	ne
 800cb28:	6560      	strne	r0, [r4, #84]	; 0x54
 800cb2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cb2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cb32:	81a3      	strheq	r3, [r4, #12]
 800cb34:	bf18      	it	ne
 800cb36:	81a3      	strhne	r3, [r4, #12]
 800cb38:	bd10      	pop	{r4, pc}

0800cb3a <__sclose>:
 800cb3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb3e:	f000 b8a1 	b.w	800cc84 <_close_r>

0800cb42 <__swbuf_r>:
 800cb42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb44:	460e      	mov	r6, r1
 800cb46:	4614      	mov	r4, r2
 800cb48:	4605      	mov	r5, r0
 800cb4a:	b118      	cbz	r0, 800cb54 <__swbuf_r+0x12>
 800cb4c:	6a03      	ldr	r3, [r0, #32]
 800cb4e:	b90b      	cbnz	r3, 800cb54 <__swbuf_r+0x12>
 800cb50:	f7ff ff5e 	bl	800ca10 <__sinit>
 800cb54:	69a3      	ldr	r3, [r4, #24]
 800cb56:	60a3      	str	r3, [r4, #8]
 800cb58:	89a3      	ldrh	r3, [r4, #12]
 800cb5a:	071a      	lsls	r2, r3, #28
 800cb5c:	d525      	bpl.n	800cbaa <__swbuf_r+0x68>
 800cb5e:	6923      	ldr	r3, [r4, #16]
 800cb60:	b31b      	cbz	r3, 800cbaa <__swbuf_r+0x68>
 800cb62:	6823      	ldr	r3, [r4, #0]
 800cb64:	6922      	ldr	r2, [r4, #16]
 800cb66:	1a98      	subs	r0, r3, r2
 800cb68:	6963      	ldr	r3, [r4, #20]
 800cb6a:	b2f6      	uxtb	r6, r6
 800cb6c:	4283      	cmp	r3, r0
 800cb6e:	4637      	mov	r7, r6
 800cb70:	dc04      	bgt.n	800cb7c <__swbuf_r+0x3a>
 800cb72:	4621      	mov	r1, r4
 800cb74:	4628      	mov	r0, r5
 800cb76:	f002 fcd1 	bl	800f51c <_fflush_r>
 800cb7a:	b9e0      	cbnz	r0, 800cbb6 <__swbuf_r+0x74>
 800cb7c:	68a3      	ldr	r3, [r4, #8]
 800cb7e:	3b01      	subs	r3, #1
 800cb80:	60a3      	str	r3, [r4, #8]
 800cb82:	6823      	ldr	r3, [r4, #0]
 800cb84:	1c5a      	adds	r2, r3, #1
 800cb86:	6022      	str	r2, [r4, #0]
 800cb88:	701e      	strb	r6, [r3, #0]
 800cb8a:	6962      	ldr	r2, [r4, #20]
 800cb8c:	1c43      	adds	r3, r0, #1
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d004      	beq.n	800cb9c <__swbuf_r+0x5a>
 800cb92:	89a3      	ldrh	r3, [r4, #12]
 800cb94:	07db      	lsls	r3, r3, #31
 800cb96:	d506      	bpl.n	800cba6 <__swbuf_r+0x64>
 800cb98:	2e0a      	cmp	r6, #10
 800cb9a:	d104      	bne.n	800cba6 <__swbuf_r+0x64>
 800cb9c:	4621      	mov	r1, r4
 800cb9e:	4628      	mov	r0, r5
 800cba0:	f002 fcbc 	bl	800f51c <_fflush_r>
 800cba4:	b938      	cbnz	r0, 800cbb6 <__swbuf_r+0x74>
 800cba6:	4638      	mov	r0, r7
 800cba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbaa:	4621      	mov	r1, r4
 800cbac:	4628      	mov	r0, r5
 800cbae:	f000 f805 	bl	800cbbc <__swsetup_r>
 800cbb2:	2800      	cmp	r0, #0
 800cbb4:	d0d5      	beq.n	800cb62 <__swbuf_r+0x20>
 800cbb6:	f04f 37ff 	mov.w	r7, #4294967295
 800cbba:	e7f4      	b.n	800cba6 <__swbuf_r+0x64>

0800cbbc <__swsetup_r>:
 800cbbc:	b538      	push	{r3, r4, r5, lr}
 800cbbe:	4b2a      	ldr	r3, [pc, #168]	; (800cc68 <__swsetup_r+0xac>)
 800cbc0:	4605      	mov	r5, r0
 800cbc2:	6818      	ldr	r0, [r3, #0]
 800cbc4:	460c      	mov	r4, r1
 800cbc6:	b118      	cbz	r0, 800cbd0 <__swsetup_r+0x14>
 800cbc8:	6a03      	ldr	r3, [r0, #32]
 800cbca:	b90b      	cbnz	r3, 800cbd0 <__swsetup_r+0x14>
 800cbcc:	f7ff ff20 	bl	800ca10 <__sinit>
 800cbd0:	89a3      	ldrh	r3, [r4, #12]
 800cbd2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cbd6:	0718      	lsls	r0, r3, #28
 800cbd8:	d422      	bmi.n	800cc20 <__swsetup_r+0x64>
 800cbda:	06d9      	lsls	r1, r3, #27
 800cbdc:	d407      	bmi.n	800cbee <__swsetup_r+0x32>
 800cbde:	2309      	movs	r3, #9
 800cbe0:	602b      	str	r3, [r5, #0]
 800cbe2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cbe6:	81a3      	strh	r3, [r4, #12]
 800cbe8:	f04f 30ff 	mov.w	r0, #4294967295
 800cbec:	e034      	b.n	800cc58 <__swsetup_r+0x9c>
 800cbee:	0758      	lsls	r0, r3, #29
 800cbf0:	d512      	bpl.n	800cc18 <__swsetup_r+0x5c>
 800cbf2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cbf4:	b141      	cbz	r1, 800cc08 <__swsetup_r+0x4c>
 800cbf6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbfa:	4299      	cmp	r1, r3
 800cbfc:	d002      	beq.n	800cc04 <__swsetup_r+0x48>
 800cbfe:	4628      	mov	r0, r5
 800cc00:	f000 feae 	bl	800d960 <_free_r>
 800cc04:	2300      	movs	r3, #0
 800cc06:	6363      	str	r3, [r4, #52]	; 0x34
 800cc08:	89a3      	ldrh	r3, [r4, #12]
 800cc0a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cc0e:	81a3      	strh	r3, [r4, #12]
 800cc10:	2300      	movs	r3, #0
 800cc12:	6063      	str	r3, [r4, #4]
 800cc14:	6923      	ldr	r3, [r4, #16]
 800cc16:	6023      	str	r3, [r4, #0]
 800cc18:	89a3      	ldrh	r3, [r4, #12]
 800cc1a:	f043 0308 	orr.w	r3, r3, #8
 800cc1e:	81a3      	strh	r3, [r4, #12]
 800cc20:	6923      	ldr	r3, [r4, #16]
 800cc22:	b94b      	cbnz	r3, 800cc38 <__swsetup_r+0x7c>
 800cc24:	89a3      	ldrh	r3, [r4, #12]
 800cc26:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cc2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc2e:	d003      	beq.n	800cc38 <__swsetup_r+0x7c>
 800cc30:	4621      	mov	r1, r4
 800cc32:	4628      	mov	r0, r5
 800cc34:	f002 fcc0 	bl	800f5b8 <__smakebuf_r>
 800cc38:	89a0      	ldrh	r0, [r4, #12]
 800cc3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc3e:	f010 0301 	ands.w	r3, r0, #1
 800cc42:	d00a      	beq.n	800cc5a <__swsetup_r+0x9e>
 800cc44:	2300      	movs	r3, #0
 800cc46:	60a3      	str	r3, [r4, #8]
 800cc48:	6963      	ldr	r3, [r4, #20]
 800cc4a:	425b      	negs	r3, r3
 800cc4c:	61a3      	str	r3, [r4, #24]
 800cc4e:	6923      	ldr	r3, [r4, #16]
 800cc50:	b943      	cbnz	r3, 800cc64 <__swsetup_r+0xa8>
 800cc52:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cc56:	d1c4      	bne.n	800cbe2 <__swsetup_r+0x26>
 800cc58:	bd38      	pop	{r3, r4, r5, pc}
 800cc5a:	0781      	lsls	r1, r0, #30
 800cc5c:	bf58      	it	pl
 800cc5e:	6963      	ldrpl	r3, [r4, #20]
 800cc60:	60a3      	str	r3, [r4, #8]
 800cc62:	e7f4      	b.n	800cc4e <__swsetup_r+0x92>
 800cc64:	2000      	movs	r0, #0
 800cc66:	e7f7      	b.n	800cc58 <__swsetup_r+0x9c>
 800cc68:	24000068 	.word	0x24000068

0800cc6c <memset>:
 800cc6c:	4402      	add	r2, r0
 800cc6e:	4603      	mov	r3, r0
 800cc70:	4293      	cmp	r3, r2
 800cc72:	d100      	bne.n	800cc76 <memset+0xa>
 800cc74:	4770      	bx	lr
 800cc76:	f803 1b01 	strb.w	r1, [r3], #1
 800cc7a:	e7f9      	b.n	800cc70 <memset+0x4>

0800cc7c <_localeconv_r>:
 800cc7c:	4800      	ldr	r0, [pc, #0]	; (800cc80 <_localeconv_r+0x4>)
 800cc7e:	4770      	bx	lr
 800cc80:	2400015c 	.word	0x2400015c

0800cc84 <_close_r>:
 800cc84:	b538      	push	{r3, r4, r5, lr}
 800cc86:	4d06      	ldr	r5, [pc, #24]	; (800cca0 <_close_r+0x1c>)
 800cc88:	2300      	movs	r3, #0
 800cc8a:	4604      	mov	r4, r0
 800cc8c:	4608      	mov	r0, r1
 800cc8e:	602b      	str	r3, [r5, #0]
 800cc90:	f7f4 ff15 	bl	8001abe <_close>
 800cc94:	1c43      	adds	r3, r0, #1
 800cc96:	d102      	bne.n	800cc9e <_close_r+0x1a>
 800cc98:	682b      	ldr	r3, [r5, #0]
 800cc9a:	b103      	cbz	r3, 800cc9e <_close_r+0x1a>
 800cc9c:	6023      	str	r3, [r4, #0]
 800cc9e:	bd38      	pop	{r3, r4, r5, pc}
 800cca0:	24000674 	.word	0x24000674

0800cca4 <_lseek_r>:
 800cca4:	b538      	push	{r3, r4, r5, lr}
 800cca6:	4d07      	ldr	r5, [pc, #28]	; (800ccc4 <_lseek_r+0x20>)
 800cca8:	4604      	mov	r4, r0
 800ccaa:	4608      	mov	r0, r1
 800ccac:	4611      	mov	r1, r2
 800ccae:	2200      	movs	r2, #0
 800ccb0:	602a      	str	r2, [r5, #0]
 800ccb2:	461a      	mov	r2, r3
 800ccb4:	f7f4 ff2a 	bl	8001b0c <_lseek>
 800ccb8:	1c43      	adds	r3, r0, #1
 800ccba:	d102      	bne.n	800ccc2 <_lseek_r+0x1e>
 800ccbc:	682b      	ldr	r3, [r5, #0]
 800ccbe:	b103      	cbz	r3, 800ccc2 <_lseek_r+0x1e>
 800ccc0:	6023      	str	r3, [r4, #0]
 800ccc2:	bd38      	pop	{r3, r4, r5, pc}
 800ccc4:	24000674 	.word	0x24000674

0800ccc8 <_read_r>:
 800ccc8:	b538      	push	{r3, r4, r5, lr}
 800ccca:	4d07      	ldr	r5, [pc, #28]	; (800cce8 <_read_r+0x20>)
 800cccc:	4604      	mov	r4, r0
 800ccce:	4608      	mov	r0, r1
 800ccd0:	4611      	mov	r1, r2
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	602a      	str	r2, [r5, #0]
 800ccd6:	461a      	mov	r2, r3
 800ccd8:	f7f4 fed4 	bl	8001a84 <_read>
 800ccdc:	1c43      	adds	r3, r0, #1
 800ccde:	d102      	bne.n	800cce6 <_read_r+0x1e>
 800cce0:	682b      	ldr	r3, [r5, #0]
 800cce2:	b103      	cbz	r3, 800cce6 <_read_r+0x1e>
 800cce4:	6023      	str	r3, [r4, #0]
 800cce6:	bd38      	pop	{r3, r4, r5, pc}
 800cce8:	24000674 	.word	0x24000674

0800ccec <_write_r>:
 800ccec:	b538      	push	{r3, r4, r5, lr}
 800ccee:	4d07      	ldr	r5, [pc, #28]	; (800cd0c <_write_r+0x20>)
 800ccf0:	4604      	mov	r4, r0
 800ccf2:	4608      	mov	r0, r1
 800ccf4:	4611      	mov	r1, r2
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	602a      	str	r2, [r5, #0]
 800ccfa:	461a      	mov	r2, r3
 800ccfc:	f7fe ff70 	bl	800bbe0 <_write>
 800cd00:	1c43      	adds	r3, r0, #1
 800cd02:	d102      	bne.n	800cd0a <_write_r+0x1e>
 800cd04:	682b      	ldr	r3, [r5, #0]
 800cd06:	b103      	cbz	r3, 800cd0a <_write_r+0x1e>
 800cd08:	6023      	str	r3, [r4, #0]
 800cd0a:	bd38      	pop	{r3, r4, r5, pc}
 800cd0c:	24000674 	.word	0x24000674

0800cd10 <__errno>:
 800cd10:	4b01      	ldr	r3, [pc, #4]	; (800cd18 <__errno+0x8>)
 800cd12:	6818      	ldr	r0, [r3, #0]
 800cd14:	4770      	bx	lr
 800cd16:	bf00      	nop
 800cd18:	24000068 	.word	0x24000068

0800cd1c <__libc_init_array>:
 800cd1c:	b570      	push	{r4, r5, r6, lr}
 800cd1e:	4d0d      	ldr	r5, [pc, #52]	; (800cd54 <__libc_init_array+0x38>)
 800cd20:	4c0d      	ldr	r4, [pc, #52]	; (800cd58 <__libc_init_array+0x3c>)
 800cd22:	1b64      	subs	r4, r4, r5
 800cd24:	10a4      	asrs	r4, r4, #2
 800cd26:	2600      	movs	r6, #0
 800cd28:	42a6      	cmp	r6, r4
 800cd2a:	d109      	bne.n	800cd40 <__libc_init_array+0x24>
 800cd2c:	4d0b      	ldr	r5, [pc, #44]	; (800cd5c <__libc_init_array+0x40>)
 800cd2e:	4c0c      	ldr	r4, [pc, #48]	; (800cd60 <__libc_init_array+0x44>)
 800cd30:	f004 f862 	bl	8010df8 <_init>
 800cd34:	1b64      	subs	r4, r4, r5
 800cd36:	10a4      	asrs	r4, r4, #2
 800cd38:	2600      	movs	r6, #0
 800cd3a:	42a6      	cmp	r6, r4
 800cd3c:	d105      	bne.n	800cd4a <__libc_init_array+0x2e>
 800cd3e:	bd70      	pop	{r4, r5, r6, pc}
 800cd40:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd44:	4798      	blx	r3
 800cd46:	3601      	adds	r6, #1
 800cd48:	e7ee      	b.n	800cd28 <__libc_init_array+0xc>
 800cd4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd4e:	4798      	blx	r3
 800cd50:	3601      	adds	r6, #1
 800cd52:	e7f2      	b.n	800cd3a <__libc_init_array+0x1e>
 800cd54:	08011450 	.word	0x08011450
 800cd58:	08011450 	.word	0x08011450
 800cd5c:	08011450 	.word	0x08011450
 800cd60:	08011454 	.word	0x08011454

0800cd64 <__retarget_lock_acquire_recursive>:
 800cd64:	4770      	bx	lr

0800cd66 <__retarget_lock_release_recursive>:
 800cd66:	4770      	bx	lr

0800cd68 <nanf>:
 800cd68:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cd70 <nanf+0x8>
 800cd6c:	4770      	bx	lr
 800cd6e:	bf00      	nop
 800cd70:	7fc00000 	.word	0x7fc00000

0800cd74 <quorem>:
 800cd74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd78:	6903      	ldr	r3, [r0, #16]
 800cd7a:	690c      	ldr	r4, [r1, #16]
 800cd7c:	42a3      	cmp	r3, r4
 800cd7e:	4607      	mov	r7, r0
 800cd80:	db7e      	blt.n	800ce80 <quorem+0x10c>
 800cd82:	3c01      	subs	r4, #1
 800cd84:	f101 0814 	add.w	r8, r1, #20
 800cd88:	f100 0514 	add.w	r5, r0, #20
 800cd8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cd90:	9301      	str	r3, [sp, #4]
 800cd92:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cd96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cd9a:	3301      	adds	r3, #1
 800cd9c:	429a      	cmp	r2, r3
 800cd9e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cda2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cda6:	fbb2 f6f3 	udiv	r6, r2, r3
 800cdaa:	d331      	bcc.n	800ce10 <quorem+0x9c>
 800cdac:	f04f 0e00 	mov.w	lr, #0
 800cdb0:	4640      	mov	r0, r8
 800cdb2:	46ac      	mov	ip, r5
 800cdb4:	46f2      	mov	sl, lr
 800cdb6:	f850 2b04 	ldr.w	r2, [r0], #4
 800cdba:	b293      	uxth	r3, r2
 800cdbc:	fb06 e303 	mla	r3, r6, r3, lr
 800cdc0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cdc4:	0c1a      	lsrs	r2, r3, #16
 800cdc6:	b29b      	uxth	r3, r3
 800cdc8:	ebaa 0303 	sub.w	r3, sl, r3
 800cdcc:	f8dc a000 	ldr.w	sl, [ip]
 800cdd0:	fa13 f38a 	uxtah	r3, r3, sl
 800cdd4:	fb06 220e 	mla	r2, r6, lr, r2
 800cdd8:	9300      	str	r3, [sp, #0]
 800cdda:	9b00      	ldr	r3, [sp, #0]
 800cddc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cde0:	b292      	uxth	r2, r2
 800cde2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cde6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cdea:	f8bd 3000 	ldrh.w	r3, [sp]
 800cdee:	4581      	cmp	r9, r0
 800cdf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cdf4:	f84c 3b04 	str.w	r3, [ip], #4
 800cdf8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cdfc:	d2db      	bcs.n	800cdb6 <quorem+0x42>
 800cdfe:	f855 300b 	ldr.w	r3, [r5, fp]
 800ce02:	b92b      	cbnz	r3, 800ce10 <quorem+0x9c>
 800ce04:	9b01      	ldr	r3, [sp, #4]
 800ce06:	3b04      	subs	r3, #4
 800ce08:	429d      	cmp	r5, r3
 800ce0a:	461a      	mov	r2, r3
 800ce0c:	d32c      	bcc.n	800ce68 <quorem+0xf4>
 800ce0e:	613c      	str	r4, [r7, #16]
 800ce10:	4638      	mov	r0, r7
 800ce12:	f001 f96b 	bl	800e0ec <__mcmp>
 800ce16:	2800      	cmp	r0, #0
 800ce18:	db22      	blt.n	800ce60 <quorem+0xec>
 800ce1a:	3601      	adds	r6, #1
 800ce1c:	4629      	mov	r1, r5
 800ce1e:	2000      	movs	r0, #0
 800ce20:	f858 2b04 	ldr.w	r2, [r8], #4
 800ce24:	f8d1 c000 	ldr.w	ip, [r1]
 800ce28:	b293      	uxth	r3, r2
 800ce2a:	1ac3      	subs	r3, r0, r3
 800ce2c:	0c12      	lsrs	r2, r2, #16
 800ce2e:	fa13 f38c 	uxtah	r3, r3, ip
 800ce32:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ce36:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ce3a:	b29b      	uxth	r3, r3
 800ce3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce40:	45c1      	cmp	r9, r8
 800ce42:	f841 3b04 	str.w	r3, [r1], #4
 800ce46:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ce4a:	d2e9      	bcs.n	800ce20 <quorem+0xac>
 800ce4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ce50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ce54:	b922      	cbnz	r2, 800ce60 <quorem+0xec>
 800ce56:	3b04      	subs	r3, #4
 800ce58:	429d      	cmp	r5, r3
 800ce5a:	461a      	mov	r2, r3
 800ce5c:	d30a      	bcc.n	800ce74 <quorem+0x100>
 800ce5e:	613c      	str	r4, [r7, #16]
 800ce60:	4630      	mov	r0, r6
 800ce62:	b003      	add	sp, #12
 800ce64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce68:	6812      	ldr	r2, [r2, #0]
 800ce6a:	3b04      	subs	r3, #4
 800ce6c:	2a00      	cmp	r2, #0
 800ce6e:	d1ce      	bne.n	800ce0e <quorem+0x9a>
 800ce70:	3c01      	subs	r4, #1
 800ce72:	e7c9      	b.n	800ce08 <quorem+0x94>
 800ce74:	6812      	ldr	r2, [r2, #0]
 800ce76:	3b04      	subs	r3, #4
 800ce78:	2a00      	cmp	r2, #0
 800ce7a:	d1f0      	bne.n	800ce5e <quorem+0xea>
 800ce7c:	3c01      	subs	r4, #1
 800ce7e:	e7eb      	b.n	800ce58 <quorem+0xe4>
 800ce80:	2000      	movs	r0, #0
 800ce82:	e7ee      	b.n	800ce62 <quorem+0xee>
 800ce84:	0000      	movs	r0, r0
	...

0800ce88 <_dtoa_r>:
 800ce88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce8c:	ed2d 8b02 	vpush	{d8}
 800ce90:	69c5      	ldr	r5, [r0, #28]
 800ce92:	b091      	sub	sp, #68	; 0x44
 800ce94:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ce98:	ec59 8b10 	vmov	r8, r9, d0
 800ce9c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800ce9e:	9106      	str	r1, [sp, #24]
 800cea0:	4606      	mov	r6, r0
 800cea2:	9208      	str	r2, [sp, #32]
 800cea4:	930c      	str	r3, [sp, #48]	; 0x30
 800cea6:	b975      	cbnz	r5, 800cec6 <_dtoa_r+0x3e>
 800cea8:	2010      	movs	r0, #16
 800ceaa:	f000 fda5 	bl	800d9f8 <malloc>
 800ceae:	4602      	mov	r2, r0
 800ceb0:	61f0      	str	r0, [r6, #28]
 800ceb2:	b920      	cbnz	r0, 800cebe <_dtoa_r+0x36>
 800ceb4:	4ba6      	ldr	r3, [pc, #664]	; (800d150 <_dtoa_r+0x2c8>)
 800ceb6:	21ef      	movs	r1, #239	; 0xef
 800ceb8:	48a6      	ldr	r0, [pc, #664]	; (800d154 <_dtoa_r+0x2cc>)
 800ceba:	f002 fc2d 	bl	800f718 <__assert_func>
 800cebe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cec2:	6005      	str	r5, [r0, #0]
 800cec4:	60c5      	str	r5, [r0, #12]
 800cec6:	69f3      	ldr	r3, [r6, #28]
 800cec8:	6819      	ldr	r1, [r3, #0]
 800ceca:	b151      	cbz	r1, 800cee2 <_dtoa_r+0x5a>
 800cecc:	685a      	ldr	r2, [r3, #4]
 800cece:	604a      	str	r2, [r1, #4]
 800ced0:	2301      	movs	r3, #1
 800ced2:	4093      	lsls	r3, r2
 800ced4:	608b      	str	r3, [r1, #8]
 800ced6:	4630      	mov	r0, r6
 800ced8:	f000 fe82 	bl	800dbe0 <_Bfree>
 800cedc:	69f3      	ldr	r3, [r6, #28]
 800cede:	2200      	movs	r2, #0
 800cee0:	601a      	str	r2, [r3, #0]
 800cee2:	f1b9 0300 	subs.w	r3, r9, #0
 800cee6:	bfbb      	ittet	lt
 800cee8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ceec:	9303      	strlt	r3, [sp, #12]
 800ceee:	2300      	movge	r3, #0
 800cef0:	2201      	movlt	r2, #1
 800cef2:	bfac      	ite	ge
 800cef4:	6023      	strge	r3, [r4, #0]
 800cef6:	6022      	strlt	r2, [r4, #0]
 800cef8:	4b97      	ldr	r3, [pc, #604]	; (800d158 <_dtoa_r+0x2d0>)
 800cefa:	9c03      	ldr	r4, [sp, #12]
 800cefc:	43a3      	bics	r3, r4
 800cefe:	d11c      	bne.n	800cf3a <_dtoa_r+0xb2>
 800cf00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cf02:	f242 730f 	movw	r3, #9999	; 0x270f
 800cf06:	6013      	str	r3, [r2, #0]
 800cf08:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800cf0c:	ea53 0308 	orrs.w	r3, r3, r8
 800cf10:	f000 84fb 	beq.w	800d90a <_dtoa_r+0xa82>
 800cf14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cf16:	b963      	cbnz	r3, 800cf32 <_dtoa_r+0xaa>
 800cf18:	4b90      	ldr	r3, [pc, #576]	; (800d15c <_dtoa_r+0x2d4>)
 800cf1a:	e020      	b.n	800cf5e <_dtoa_r+0xd6>
 800cf1c:	4b90      	ldr	r3, [pc, #576]	; (800d160 <_dtoa_r+0x2d8>)
 800cf1e:	9301      	str	r3, [sp, #4]
 800cf20:	3308      	adds	r3, #8
 800cf22:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800cf24:	6013      	str	r3, [r2, #0]
 800cf26:	9801      	ldr	r0, [sp, #4]
 800cf28:	b011      	add	sp, #68	; 0x44
 800cf2a:	ecbd 8b02 	vpop	{d8}
 800cf2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf32:	4b8a      	ldr	r3, [pc, #552]	; (800d15c <_dtoa_r+0x2d4>)
 800cf34:	9301      	str	r3, [sp, #4]
 800cf36:	3303      	adds	r3, #3
 800cf38:	e7f3      	b.n	800cf22 <_dtoa_r+0x9a>
 800cf3a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800cf3e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cf42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf46:	d10c      	bne.n	800cf62 <_dtoa_r+0xda>
 800cf48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	6013      	str	r3, [r2, #0]
 800cf4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	f000 84d7 	beq.w	800d904 <_dtoa_r+0xa7c>
 800cf56:	4b83      	ldr	r3, [pc, #524]	; (800d164 <_dtoa_r+0x2dc>)
 800cf58:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800cf5a:	6013      	str	r3, [r2, #0]
 800cf5c:	3b01      	subs	r3, #1
 800cf5e:	9301      	str	r3, [sp, #4]
 800cf60:	e7e1      	b.n	800cf26 <_dtoa_r+0x9e>
 800cf62:	aa0e      	add	r2, sp, #56	; 0x38
 800cf64:	a90f      	add	r1, sp, #60	; 0x3c
 800cf66:	4630      	mov	r0, r6
 800cf68:	eeb0 0b48 	vmov.f64	d0, d8
 800cf6c:	f001 f9d4 	bl	800e318 <__d2b>
 800cf70:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800cf74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cf76:	4605      	mov	r5, r0
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d046      	beq.n	800d00a <_dtoa_r+0x182>
 800cf7c:	eeb0 7b48 	vmov.f64	d7, d8
 800cf80:	ee18 1a90 	vmov	r1, s17
 800cf84:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800cf88:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800cf8c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800cf90:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cf94:	2000      	movs	r0, #0
 800cf96:	ee07 1a90 	vmov	s15, r1
 800cf9a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800cf9e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800d138 <_dtoa_r+0x2b0>
 800cfa2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cfa6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800d140 <_dtoa_r+0x2b8>
 800cfaa:	eea7 6b05 	vfma.f64	d6, d7, d5
 800cfae:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800d148 <_dtoa_r+0x2c0>
 800cfb2:	ee07 3a90 	vmov	s15, r3
 800cfb6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800cfba:	eeb0 7b46 	vmov.f64	d7, d6
 800cfbe:	eea4 7b05 	vfma.f64	d7, d4, d5
 800cfc2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800cfc6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800cfca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfce:	ee16 ba90 	vmov	fp, s13
 800cfd2:	9009      	str	r0, [sp, #36]	; 0x24
 800cfd4:	d508      	bpl.n	800cfe8 <_dtoa_r+0x160>
 800cfd6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800cfda:	eeb4 6b47 	vcmp.f64	d6, d7
 800cfde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfe2:	bf18      	it	ne
 800cfe4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800cfe8:	f1bb 0f16 	cmp.w	fp, #22
 800cfec:	d82b      	bhi.n	800d046 <_dtoa_r+0x1be>
 800cfee:	495e      	ldr	r1, [pc, #376]	; (800d168 <_dtoa_r+0x2e0>)
 800cff0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800cff4:	ed91 7b00 	vldr	d7, [r1]
 800cff8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800cffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d000:	d501      	bpl.n	800d006 <_dtoa_r+0x17e>
 800d002:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d006:	2100      	movs	r1, #0
 800d008:	e01e      	b.n	800d048 <_dtoa_r+0x1c0>
 800d00a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d00c:	4413      	add	r3, r2
 800d00e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800d012:	2920      	cmp	r1, #32
 800d014:	bfc1      	itttt	gt
 800d016:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800d01a:	408c      	lslgt	r4, r1
 800d01c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800d020:	fa28 f101 	lsrgt.w	r1, r8, r1
 800d024:	bfd6      	itet	le
 800d026:	f1c1 0120 	rsble	r1, r1, #32
 800d02a:	4321      	orrgt	r1, r4
 800d02c:	fa08 f101 	lslle.w	r1, r8, r1
 800d030:	ee07 1a90 	vmov	s15, r1
 800d034:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d038:	3b01      	subs	r3, #1
 800d03a:	ee17 1a90 	vmov	r1, s15
 800d03e:	2001      	movs	r0, #1
 800d040:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800d044:	e7a7      	b.n	800cf96 <_dtoa_r+0x10e>
 800d046:	2101      	movs	r1, #1
 800d048:	1ad2      	subs	r2, r2, r3
 800d04a:	1e53      	subs	r3, r2, #1
 800d04c:	9305      	str	r3, [sp, #20]
 800d04e:	bf45      	ittet	mi
 800d050:	f1c2 0301 	rsbmi	r3, r2, #1
 800d054:	9304      	strmi	r3, [sp, #16]
 800d056:	2300      	movpl	r3, #0
 800d058:	2300      	movmi	r3, #0
 800d05a:	bf4c      	ite	mi
 800d05c:	9305      	strmi	r3, [sp, #20]
 800d05e:	9304      	strpl	r3, [sp, #16]
 800d060:	f1bb 0f00 	cmp.w	fp, #0
 800d064:	910b      	str	r1, [sp, #44]	; 0x2c
 800d066:	db18      	blt.n	800d09a <_dtoa_r+0x212>
 800d068:	9b05      	ldr	r3, [sp, #20]
 800d06a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800d06e:	445b      	add	r3, fp
 800d070:	9305      	str	r3, [sp, #20]
 800d072:	2300      	movs	r3, #0
 800d074:	9a06      	ldr	r2, [sp, #24]
 800d076:	2a09      	cmp	r2, #9
 800d078:	d848      	bhi.n	800d10c <_dtoa_r+0x284>
 800d07a:	2a05      	cmp	r2, #5
 800d07c:	bfc4      	itt	gt
 800d07e:	3a04      	subgt	r2, #4
 800d080:	9206      	strgt	r2, [sp, #24]
 800d082:	9a06      	ldr	r2, [sp, #24]
 800d084:	f1a2 0202 	sub.w	r2, r2, #2
 800d088:	bfcc      	ite	gt
 800d08a:	2400      	movgt	r4, #0
 800d08c:	2401      	movle	r4, #1
 800d08e:	2a03      	cmp	r2, #3
 800d090:	d847      	bhi.n	800d122 <_dtoa_r+0x29a>
 800d092:	e8df f002 	tbb	[pc, r2]
 800d096:	2d0b      	.short	0x2d0b
 800d098:	392b      	.short	0x392b
 800d09a:	9b04      	ldr	r3, [sp, #16]
 800d09c:	2200      	movs	r2, #0
 800d09e:	eba3 030b 	sub.w	r3, r3, fp
 800d0a2:	9304      	str	r3, [sp, #16]
 800d0a4:	920a      	str	r2, [sp, #40]	; 0x28
 800d0a6:	f1cb 0300 	rsb	r3, fp, #0
 800d0aa:	e7e3      	b.n	800d074 <_dtoa_r+0x1ec>
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	9207      	str	r2, [sp, #28]
 800d0b0:	9a08      	ldr	r2, [sp, #32]
 800d0b2:	2a00      	cmp	r2, #0
 800d0b4:	dc38      	bgt.n	800d128 <_dtoa_r+0x2a0>
 800d0b6:	f04f 0a01 	mov.w	sl, #1
 800d0ba:	46d1      	mov	r9, sl
 800d0bc:	4652      	mov	r2, sl
 800d0be:	f8cd a020 	str.w	sl, [sp, #32]
 800d0c2:	69f7      	ldr	r7, [r6, #28]
 800d0c4:	2100      	movs	r1, #0
 800d0c6:	2004      	movs	r0, #4
 800d0c8:	f100 0c14 	add.w	ip, r0, #20
 800d0cc:	4594      	cmp	ip, r2
 800d0ce:	d930      	bls.n	800d132 <_dtoa_r+0x2aa>
 800d0d0:	6079      	str	r1, [r7, #4]
 800d0d2:	4630      	mov	r0, r6
 800d0d4:	930d      	str	r3, [sp, #52]	; 0x34
 800d0d6:	f000 fd43 	bl	800db60 <_Balloc>
 800d0da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0dc:	9001      	str	r0, [sp, #4]
 800d0de:	4602      	mov	r2, r0
 800d0e0:	2800      	cmp	r0, #0
 800d0e2:	d145      	bne.n	800d170 <_dtoa_r+0x2e8>
 800d0e4:	4b21      	ldr	r3, [pc, #132]	; (800d16c <_dtoa_r+0x2e4>)
 800d0e6:	f240 11af 	movw	r1, #431	; 0x1af
 800d0ea:	e6e5      	b.n	800ceb8 <_dtoa_r+0x30>
 800d0ec:	2201      	movs	r2, #1
 800d0ee:	e7de      	b.n	800d0ae <_dtoa_r+0x226>
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	9207      	str	r2, [sp, #28]
 800d0f4:	9a08      	ldr	r2, [sp, #32]
 800d0f6:	eb0b 0a02 	add.w	sl, fp, r2
 800d0fa:	f10a 0901 	add.w	r9, sl, #1
 800d0fe:	464a      	mov	r2, r9
 800d100:	2a01      	cmp	r2, #1
 800d102:	bfb8      	it	lt
 800d104:	2201      	movlt	r2, #1
 800d106:	e7dc      	b.n	800d0c2 <_dtoa_r+0x23a>
 800d108:	2201      	movs	r2, #1
 800d10a:	e7f2      	b.n	800d0f2 <_dtoa_r+0x26a>
 800d10c:	2401      	movs	r4, #1
 800d10e:	2200      	movs	r2, #0
 800d110:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800d114:	f04f 3aff 	mov.w	sl, #4294967295
 800d118:	2100      	movs	r1, #0
 800d11a:	46d1      	mov	r9, sl
 800d11c:	2212      	movs	r2, #18
 800d11e:	9108      	str	r1, [sp, #32]
 800d120:	e7cf      	b.n	800d0c2 <_dtoa_r+0x23a>
 800d122:	2201      	movs	r2, #1
 800d124:	9207      	str	r2, [sp, #28]
 800d126:	e7f5      	b.n	800d114 <_dtoa_r+0x28c>
 800d128:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d12c:	46d1      	mov	r9, sl
 800d12e:	4652      	mov	r2, sl
 800d130:	e7c7      	b.n	800d0c2 <_dtoa_r+0x23a>
 800d132:	3101      	adds	r1, #1
 800d134:	0040      	lsls	r0, r0, #1
 800d136:	e7c7      	b.n	800d0c8 <_dtoa_r+0x240>
 800d138:	636f4361 	.word	0x636f4361
 800d13c:	3fd287a7 	.word	0x3fd287a7
 800d140:	8b60c8b3 	.word	0x8b60c8b3
 800d144:	3fc68a28 	.word	0x3fc68a28
 800d148:	509f79fb 	.word	0x509f79fb
 800d14c:	3fd34413 	.word	0x3fd34413
 800d150:	08010e8e 	.word	0x08010e8e
 800d154:	08010ea5 	.word	0x08010ea5
 800d158:	7ff00000 	.word	0x7ff00000
 800d15c:	08010e8a 	.word	0x08010e8a
 800d160:	08010e81 	.word	0x08010e81
 800d164:	08010e59 	.word	0x08010e59
 800d168:	08010f90 	.word	0x08010f90
 800d16c:	08010efd 	.word	0x08010efd
 800d170:	69f2      	ldr	r2, [r6, #28]
 800d172:	9901      	ldr	r1, [sp, #4]
 800d174:	6011      	str	r1, [r2, #0]
 800d176:	f1b9 0f0e 	cmp.w	r9, #14
 800d17a:	d86c      	bhi.n	800d256 <_dtoa_r+0x3ce>
 800d17c:	2c00      	cmp	r4, #0
 800d17e:	d06a      	beq.n	800d256 <_dtoa_r+0x3ce>
 800d180:	f1bb 0f00 	cmp.w	fp, #0
 800d184:	f340 80a0 	ble.w	800d2c8 <_dtoa_r+0x440>
 800d188:	4ac1      	ldr	r2, [pc, #772]	; (800d490 <_dtoa_r+0x608>)
 800d18a:	f00b 010f 	and.w	r1, fp, #15
 800d18e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d192:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d196:	ed92 7b00 	vldr	d7, [r2]
 800d19a:	ea4f 122b 	mov.w	r2, fp, asr #4
 800d19e:	f000 8087 	beq.w	800d2b0 <_dtoa_r+0x428>
 800d1a2:	49bc      	ldr	r1, [pc, #752]	; (800d494 <_dtoa_r+0x60c>)
 800d1a4:	ed91 6b08 	vldr	d6, [r1, #32]
 800d1a8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800d1ac:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d1b0:	f002 020f 	and.w	r2, r2, #15
 800d1b4:	2103      	movs	r1, #3
 800d1b6:	48b7      	ldr	r0, [pc, #732]	; (800d494 <_dtoa_r+0x60c>)
 800d1b8:	2a00      	cmp	r2, #0
 800d1ba:	d17b      	bne.n	800d2b4 <_dtoa_r+0x42c>
 800d1bc:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d1c0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d1c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d1c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d1ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d1ce:	2a00      	cmp	r2, #0
 800d1d0:	f000 80a0 	beq.w	800d314 <_dtoa_r+0x48c>
 800d1d4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d1d8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d1dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1e0:	f140 8098 	bpl.w	800d314 <_dtoa_r+0x48c>
 800d1e4:	f1b9 0f00 	cmp.w	r9, #0
 800d1e8:	f000 8094 	beq.w	800d314 <_dtoa_r+0x48c>
 800d1ec:	f1ba 0f00 	cmp.w	sl, #0
 800d1f0:	dd2f      	ble.n	800d252 <_dtoa_r+0x3ca>
 800d1f2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d1f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d1fa:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d1fe:	f10b 32ff 	add.w	r2, fp, #4294967295
 800d202:	3101      	adds	r1, #1
 800d204:	4654      	mov	r4, sl
 800d206:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d20a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d20e:	ee07 1a90 	vmov	s15, r1
 800d212:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d216:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d21a:	ee15 7a90 	vmov	r7, s11
 800d21e:	ec51 0b15 	vmov	r0, r1, d5
 800d222:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800d226:	2c00      	cmp	r4, #0
 800d228:	d177      	bne.n	800d31a <_dtoa_r+0x492>
 800d22a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d22e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d232:	ec41 0b17 	vmov	d7, r0, r1
 800d236:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d23a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d23e:	f300 826a 	bgt.w	800d716 <_dtoa_r+0x88e>
 800d242:	eeb1 7b47 	vneg.f64	d7, d7
 800d246:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d24a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d24e:	f100 8260 	bmi.w	800d712 <_dtoa_r+0x88a>
 800d252:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d256:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d258:	2a00      	cmp	r2, #0
 800d25a:	f2c0 811d 	blt.w	800d498 <_dtoa_r+0x610>
 800d25e:	f1bb 0f0e 	cmp.w	fp, #14
 800d262:	f300 8119 	bgt.w	800d498 <_dtoa_r+0x610>
 800d266:	4b8a      	ldr	r3, [pc, #552]	; (800d490 <_dtoa_r+0x608>)
 800d268:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d26c:	ed93 6b00 	vldr	d6, [r3]
 800d270:	9b08      	ldr	r3, [sp, #32]
 800d272:	2b00      	cmp	r3, #0
 800d274:	f280 80b7 	bge.w	800d3e6 <_dtoa_r+0x55e>
 800d278:	f1b9 0f00 	cmp.w	r9, #0
 800d27c:	f300 80b3 	bgt.w	800d3e6 <_dtoa_r+0x55e>
 800d280:	f040 8246 	bne.w	800d710 <_dtoa_r+0x888>
 800d284:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d288:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d28c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d290:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d298:	464c      	mov	r4, r9
 800d29a:	464f      	mov	r7, r9
 800d29c:	f280 821c 	bge.w	800d6d8 <_dtoa_r+0x850>
 800d2a0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d2a4:	2331      	movs	r3, #49	; 0x31
 800d2a6:	f808 3b01 	strb.w	r3, [r8], #1
 800d2aa:	f10b 0b01 	add.w	fp, fp, #1
 800d2ae:	e218      	b.n	800d6e2 <_dtoa_r+0x85a>
 800d2b0:	2102      	movs	r1, #2
 800d2b2:	e780      	b.n	800d1b6 <_dtoa_r+0x32e>
 800d2b4:	07d4      	lsls	r4, r2, #31
 800d2b6:	d504      	bpl.n	800d2c2 <_dtoa_r+0x43a>
 800d2b8:	ed90 6b00 	vldr	d6, [r0]
 800d2bc:	3101      	adds	r1, #1
 800d2be:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d2c2:	1052      	asrs	r2, r2, #1
 800d2c4:	3008      	adds	r0, #8
 800d2c6:	e777      	b.n	800d1b8 <_dtoa_r+0x330>
 800d2c8:	d022      	beq.n	800d310 <_dtoa_r+0x488>
 800d2ca:	f1cb 0200 	rsb	r2, fp, #0
 800d2ce:	4970      	ldr	r1, [pc, #448]	; (800d490 <_dtoa_r+0x608>)
 800d2d0:	f002 000f 	and.w	r0, r2, #15
 800d2d4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d2d8:	ed91 7b00 	vldr	d7, [r1]
 800d2dc:	ee28 7b07 	vmul.f64	d7, d8, d7
 800d2e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d2e4:	486b      	ldr	r0, [pc, #428]	; (800d494 <_dtoa_r+0x60c>)
 800d2e6:	1112      	asrs	r2, r2, #4
 800d2e8:	2400      	movs	r4, #0
 800d2ea:	2102      	movs	r1, #2
 800d2ec:	b92a      	cbnz	r2, 800d2fa <_dtoa_r+0x472>
 800d2ee:	2c00      	cmp	r4, #0
 800d2f0:	f43f af6a 	beq.w	800d1c8 <_dtoa_r+0x340>
 800d2f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d2f8:	e766      	b.n	800d1c8 <_dtoa_r+0x340>
 800d2fa:	07d7      	lsls	r7, r2, #31
 800d2fc:	d505      	bpl.n	800d30a <_dtoa_r+0x482>
 800d2fe:	ed90 6b00 	vldr	d6, [r0]
 800d302:	3101      	adds	r1, #1
 800d304:	2401      	movs	r4, #1
 800d306:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d30a:	1052      	asrs	r2, r2, #1
 800d30c:	3008      	adds	r0, #8
 800d30e:	e7ed      	b.n	800d2ec <_dtoa_r+0x464>
 800d310:	2102      	movs	r1, #2
 800d312:	e759      	b.n	800d1c8 <_dtoa_r+0x340>
 800d314:	465a      	mov	r2, fp
 800d316:	464c      	mov	r4, r9
 800d318:	e775      	b.n	800d206 <_dtoa_r+0x37e>
 800d31a:	ec41 0b17 	vmov	d7, r0, r1
 800d31e:	495c      	ldr	r1, [pc, #368]	; (800d490 <_dtoa_r+0x608>)
 800d320:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800d324:	ed11 4b02 	vldr	d4, [r1, #-8]
 800d328:	9901      	ldr	r1, [sp, #4]
 800d32a:	440c      	add	r4, r1
 800d32c:	9907      	ldr	r1, [sp, #28]
 800d32e:	b351      	cbz	r1, 800d386 <_dtoa_r+0x4fe>
 800d330:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d334:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d338:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d33c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d340:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d344:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d348:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d34c:	ee14 1a90 	vmov	r1, s9
 800d350:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d354:	3130      	adds	r1, #48	; 0x30
 800d356:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d35a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d35e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d362:	f808 1b01 	strb.w	r1, [r8], #1
 800d366:	d439      	bmi.n	800d3dc <_dtoa_r+0x554>
 800d368:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d36c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d374:	d472      	bmi.n	800d45c <_dtoa_r+0x5d4>
 800d376:	45a0      	cmp	r8, r4
 800d378:	f43f af6b 	beq.w	800d252 <_dtoa_r+0x3ca>
 800d37c:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d380:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d384:	e7e0      	b.n	800d348 <_dtoa_r+0x4c0>
 800d386:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d38a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d38e:	4620      	mov	r0, r4
 800d390:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d394:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d398:	ee14 1a90 	vmov	r1, s9
 800d39c:	3130      	adds	r1, #48	; 0x30
 800d39e:	f808 1b01 	strb.w	r1, [r8], #1
 800d3a2:	45a0      	cmp	r8, r4
 800d3a4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d3a8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d3ac:	d118      	bne.n	800d3e0 <_dtoa_r+0x558>
 800d3ae:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d3b2:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d3b6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d3ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3be:	dc4d      	bgt.n	800d45c <_dtoa_r+0x5d4>
 800d3c0:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d3c4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800d3c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3cc:	f57f af41 	bpl.w	800d252 <_dtoa_r+0x3ca>
 800d3d0:	4680      	mov	r8, r0
 800d3d2:	3801      	subs	r0, #1
 800d3d4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800d3d8:	2b30      	cmp	r3, #48	; 0x30
 800d3da:	d0f9      	beq.n	800d3d0 <_dtoa_r+0x548>
 800d3dc:	4693      	mov	fp, r2
 800d3de:	e02a      	b.n	800d436 <_dtoa_r+0x5ae>
 800d3e0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d3e4:	e7d6      	b.n	800d394 <_dtoa_r+0x50c>
 800d3e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d3ea:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800d3ee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d3f2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d3f6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d3fa:	ee15 3a10 	vmov	r3, s10
 800d3fe:	3330      	adds	r3, #48	; 0x30
 800d400:	f808 3b01 	strb.w	r3, [r8], #1
 800d404:	9b01      	ldr	r3, [sp, #4]
 800d406:	eba8 0303 	sub.w	r3, r8, r3
 800d40a:	4599      	cmp	r9, r3
 800d40c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d410:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d414:	d133      	bne.n	800d47e <_dtoa_r+0x5f6>
 800d416:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d41a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d41e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d422:	dc1a      	bgt.n	800d45a <_dtoa_r+0x5d2>
 800d424:	eeb4 7b46 	vcmp.f64	d7, d6
 800d428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d42c:	d103      	bne.n	800d436 <_dtoa_r+0x5ae>
 800d42e:	ee15 3a10 	vmov	r3, s10
 800d432:	07d9      	lsls	r1, r3, #31
 800d434:	d411      	bmi.n	800d45a <_dtoa_r+0x5d2>
 800d436:	4629      	mov	r1, r5
 800d438:	4630      	mov	r0, r6
 800d43a:	f000 fbd1 	bl	800dbe0 <_Bfree>
 800d43e:	2300      	movs	r3, #0
 800d440:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d442:	f888 3000 	strb.w	r3, [r8]
 800d446:	f10b 0301 	add.w	r3, fp, #1
 800d44a:	6013      	str	r3, [r2, #0]
 800d44c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d44e:	2b00      	cmp	r3, #0
 800d450:	f43f ad69 	beq.w	800cf26 <_dtoa_r+0x9e>
 800d454:	f8c3 8000 	str.w	r8, [r3]
 800d458:	e565      	b.n	800cf26 <_dtoa_r+0x9e>
 800d45a:	465a      	mov	r2, fp
 800d45c:	4643      	mov	r3, r8
 800d45e:	4698      	mov	r8, r3
 800d460:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800d464:	2939      	cmp	r1, #57	; 0x39
 800d466:	d106      	bne.n	800d476 <_dtoa_r+0x5ee>
 800d468:	9901      	ldr	r1, [sp, #4]
 800d46a:	4299      	cmp	r1, r3
 800d46c:	d1f7      	bne.n	800d45e <_dtoa_r+0x5d6>
 800d46e:	9801      	ldr	r0, [sp, #4]
 800d470:	2130      	movs	r1, #48	; 0x30
 800d472:	3201      	adds	r2, #1
 800d474:	7001      	strb	r1, [r0, #0]
 800d476:	7819      	ldrb	r1, [r3, #0]
 800d478:	3101      	adds	r1, #1
 800d47a:	7019      	strb	r1, [r3, #0]
 800d47c:	e7ae      	b.n	800d3dc <_dtoa_r+0x554>
 800d47e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d482:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d48a:	d1b2      	bne.n	800d3f2 <_dtoa_r+0x56a>
 800d48c:	e7d3      	b.n	800d436 <_dtoa_r+0x5ae>
 800d48e:	bf00      	nop
 800d490:	08010f90 	.word	0x08010f90
 800d494:	08010f68 	.word	0x08010f68
 800d498:	9907      	ldr	r1, [sp, #28]
 800d49a:	2900      	cmp	r1, #0
 800d49c:	f000 80d0 	beq.w	800d640 <_dtoa_r+0x7b8>
 800d4a0:	9906      	ldr	r1, [sp, #24]
 800d4a2:	2901      	cmp	r1, #1
 800d4a4:	f300 80b4 	bgt.w	800d610 <_dtoa_r+0x788>
 800d4a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d4aa:	2900      	cmp	r1, #0
 800d4ac:	f000 80ac 	beq.w	800d608 <_dtoa_r+0x780>
 800d4b0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d4b4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d4b8:	461c      	mov	r4, r3
 800d4ba:	9309      	str	r3, [sp, #36]	; 0x24
 800d4bc:	9b04      	ldr	r3, [sp, #16]
 800d4be:	4413      	add	r3, r2
 800d4c0:	9304      	str	r3, [sp, #16]
 800d4c2:	9b05      	ldr	r3, [sp, #20]
 800d4c4:	2101      	movs	r1, #1
 800d4c6:	4413      	add	r3, r2
 800d4c8:	4630      	mov	r0, r6
 800d4ca:	9305      	str	r3, [sp, #20]
 800d4cc:	f000 fc88 	bl	800dde0 <__i2b>
 800d4d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4d2:	4607      	mov	r7, r0
 800d4d4:	f1b8 0f00 	cmp.w	r8, #0
 800d4d8:	d00d      	beq.n	800d4f6 <_dtoa_r+0x66e>
 800d4da:	9a05      	ldr	r2, [sp, #20]
 800d4dc:	2a00      	cmp	r2, #0
 800d4de:	dd0a      	ble.n	800d4f6 <_dtoa_r+0x66e>
 800d4e0:	4542      	cmp	r2, r8
 800d4e2:	9904      	ldr	r1, [sp, #16]
 800d4e4:	bfa8      	it	ge
 800d4e6:	4642      	movge	r2, r8
 800d4e8:	1a89      	subs	r1, r1, r2
 800d4ea:	9104      	str	r1, [sp, #16]
 800d4ec:	9905      	ldr	r1, [sp, #20]
 800d4ee:	eba8 0802 	sub.w	r8, r8, r2
 800d4f2:	1a8a      	subs	r2, r1, r2
 800d4f4:	9205      	str	r2, [sp, #20]
 800d4f6:	b303      	cbz	r3, 800d53a <_dtoa_r+0x6b2>
 800d4f8:	9a07      	ldr	r2, [sp, #28]
 800d4fa:	2a00      	cmp	r2, #0
 800d4fc:	f000 80a5 	beq.w	800d64a <_dtoa_r+0x7c2>
 800d500:	2c00      	cmp	r4, #0
 800d502:	dd13      	ble.n	800d52c <_dtoa_r+0x6a4>
 800d504:	4639      	mov	r1, r7
 800d506:	4622      	mov	r2, r4
 800d508:	4630      	mov	r0, r6
 800d50a:	930d      	str	r3, [sp, #52]	; 0x34
 800d50c:	f000 fd28 	bl	800df60 <__pow5mult>
 800d510:	462a      	mov	r2, r5
 800d512:	4601      	mov	r1, r0
 800d514:	4607      	mov	r7, r0
 800d516:	4630      	mov	r0, r6
 800d518:	f000 fc78 	bl	800de0c <__multiply>
 800d51c:	4629      	mov	r1, r5
 800d51e:	9009      	str	r0, [sp, #36]	; 0x24
 800d520:	4630      	mov	r0, r6
 800d522:	f000 fb5d 	bl	800dbe0 <_Bfree>
 800d526:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d528:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d52a:	4615      	mov	r5, r2
 800d52c:	1b1a      	subs	r2, r3, r4
 800d52e:	d004      	beq.n	800d53a <_dtoa_r+0x6b2>
 800d530:	4629      	mov	r1, r5
 800d532:	4630      	mov	r0, r6
 800d534:	f000 fd14 	bl	800df60 <__pow5mult>
 800d538:	4605      	mov	r5, r0
 800d53a:	2101      	movs	r1, #1
 800d53c:	4630      	mov	r0, r6
 800d53e:	f000 fc4f 	bl	800dde0 <__i2b>
 800d542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d544:	2b00      	cmp	r3, #0
 800d546:	4604      	mov	r4, r0
 800d548:	f340 8081 	ble.w	800d64e <_dtoa_r+0x7c6>
 800d54c:	461a      	mov	r2, r3
 800d54e:	4601      	mov	r1, r0
 800d550:	4630      	mov	r0, r6
 800d552:	f000 fd05 	bl	800df60 <__pow5mult>
 800d556:	9b06      	ldr	r3, [sp, #24]
 800d558:	2b01      	cmp	r3, #1
 800d55a:	4604      	mov	r4, r0
 800d55c:	dd7a      	ble.n	800d654 <_dtoa_r+0x7cc>
 800d55e:	2300      	movs	r3, #0
 800d560:	9309      	str	r3, [sp, #36]	; 0x24
 800d562:	6922      	ldr	r2, [r4, #16]
 800d564:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d568:	6910      	ldr	r0, [r2, #16]
 800d56a:	f000 fbeb 	bl	800dd44 <__hi0bits>
 800d56e:	f1c0 0020 	rsb	r0, r0, #32
 800d572:	9b05      	ldr	r3, [sp, #20]
 800d574:	4418      	add	r0, r3
 800d576:	f010 001f 	ands.w	r0, r0, #31
 800d57a:	f000 8093 	beq.w	800d6a4 <_dtoa_r+0x81c>
 800d57e:	f1c0 0220 	rsb	r2, r0, #32
 800d582:	2a04      	cmp	r2, #4
 800d584:	f340 8085 	ble.w	800d692 <_dtoa_r+0x80a>
 800d588:	9b04      	ldr	r3, [sp, #16]
 800d58a:	f1c0 001c 	rsb	r0, r0, #28
 800d58e:	4403      	add	r3, r0
 800d590:	9304      	str	r3, [sp, #16]
 800d592:	9b05      	ldr	r3, [sp, #20]
 800d594:	4480      	add	r8, r0
 800d596:	4403      	add	r3, r0
 800d598:	9305      	str	r3, [sp, #20]
 800d59a:	9b04      	ldr	r3, [sp, #16]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	dd05      	ble.n	800d5ac <_dtoa_r+0x724>
 800d5a0:	4629      	mov	r1, r5
 800d5a2:	461a      	mov	r2, r3
 800d5a4:	4630      	mov	r0, r6
 800d5a6:	f000 fd35 	bl	800e014 <__lshift>
 800d5aa:	4605      	mov	r5, r0
 800d5ac:	9b05      	ldr	r3, [sp, #20]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	dd05      	ble.n	800d5be <_dtoa_r+0x736>
 800d5b2:	4621      	mov	r1, r4
 800d5b4:	461a      	mov	r2, r3
 800d5b6:	4630      	mov	r0, r6
 800d5b8:	f000 fd2c 	bl	800e014 <__lshift>
 800d5bc:	4604      	mov	r4, r0
 800d5be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d071      	beq.n	800d6a8 <_dtoa_r+0x820>
 800d5c4:	4621      	mov	r1, r4
 800d5c6:	4628      	mov	r0, r5
 800d5c8:	f000 fd90 	bl	800e0ec <__mcmp>
 800d5cc:	2800      	cmp	r0, #0
 800d5ce:	da6b      	bge.n	800d6a8 <_dtoa_r+0x820>
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	4629      	mov	r1, r5
 800d5d4:	220a      	movs	r2, #10
 800d5d6:	4630      	mov	r0, r6
 800d5d8:	f000 fb24 	bl	800dc24 <__multadd>
 800d5dc:	9b07      	ldr	r3, [sp, #28]
 800d5de:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d5e2:	4605      	mov	r5, r0
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	f000 8197 	beq.w	800d918 <_dtoa_r+0xa90>
 800d5ea:	4639      	mov	r1, r7
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	220a      	movs	r2, #10
 800d5f0:	4630      	mov	r0, r6
 800d5f2:	f000 fb17 	bl	800dc24 <__multadd>
 800d5f6:	f1ba 0f00 	cmp.w	sl, #0
 800d5fa:	4607      	mov	r7, r0
 800d5fc:	f300 8093 	bgt.w	800d726 <_dtoa_r+0x89e>
 800d600:	9b06      	ldr	r3, [sp, #24]
 800d602:	2b02      	cmp	r3, #2
 800d604:	dc57      	bgt.n	800d6b6 <_dtoa_r+0x82e>
 800d606:	e08e      	b.n	800d726 <_dtoa_r+0x89e>
 800d608:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d60a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d60e:	e751      	b.n	800d4b4 <_dtoa_r+0x62c>
 800d610:	f109 34ff 	add.w	r4, r9, #4294967295
 800d614:	42a3      	cmp	r3, r4
 800d616:	bfbf      	itttt	lt
 800d618:	1ae2      	sublt	r2, r4, r3
 800d61a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d61c:	189b      	addlt	r3, r3, r2
 800d61e:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d620:	bfae      	itee	ge
 800d622:	1b1c      	subge	r4, r3, r4
 800d624:	4623      	movlt	r3, r4
 800d626:	2400      	movlt	r4, #0
 800d628:	f1b9 0f00 	cmp.w	r9, #0
 800d62c:	bfb5      	itete	lt
 800d62e:	9a04      	ldrlt	r2, [sp, #16]
 800d630:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800d634:	eba2 0809 	sublt.w	r8, r2, r9
 800d638:	464a      	movge	r2, r9
 800d63a:	bfb8      	it	lt
 800d63c:	2200      	movlt	r2, #0
 800d63e:	e73c      	b.n	800d4ba <_dtoa_r+0x632>
 800d640:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d644:	9f07      	ldr	r7, [sp, #28]
 800d646:	461c      	mov	r4, r3
 800d648:	e744      	b.n	800d4d4 <_dtoa_r+0x64c>
 800d64a:	461a      	mov	r2, r3
 800d64c:	e770      	b.n	800d530 <_dtoa_r+0x6a8>
 800d64e:	9b06      	ldr	r3, [sp, #24]
 800d650:	2b01      	cmp	r3, #1
 800d652:	dc18      	bgt.n	800d686 <_dtoa_r+0x7fe>
 800d654:	9b02      	ldr	r3, [sp, #8]
 800d656:	b9b3      	cbnz	r3, 800d686 <_dtoa_r+0x7fe>
 800d658:	9b03      	ldr	r3, [sp, #12]
 800d65a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d65e:	b9a2      	cbnz	r2, 800d68a <_dtoa_r+0x802>
 800d660:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d664:	0d12      	lsrs	r2, r2, #20
 800d666:	0512      	lsls	r2, r2, #20
 800d668:	b18a      	cbz	r2, 800d68e <_dtoa_r+0x806>
 800d66a:	9b04      	ldr	r3, [sp, #16]
 800d66c:	3301      	adds	r3, #1
 800d66e:	9304      	str	r3, [sp, #16]
 800d670:	9b05      	ldr	r3, [sp, #20]
 800d672:	3301      	adds	r3, #1
 800d674:	9305      	str	r3, [sp, #20]
 800d676:	2301      	movs	r3, #1
 800d678:	9309      	str	r3, [sp, #36]	; 0x24
 800d67a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	f47f af70 	bne.w	800d562 <_dtoa_r+0x6da>
 800d682:	2001      	movs	r0, #1
 800d684:	e775      	b.n	800d572 <_dtoa_r+0x6ea>
 800d686:	2300      	movs	r3, #0
 800d688:	e7f6      	b.n	800d678 <_dtoa_r+0x7f0>
 800d68a:	9b02      	ldr	r3, [sp, #8]
 800d68c:	e7f4      	b.n	800d678 <_dtoa_r+0x7f0>
 800d68e:	9209      	str	r2, [sp, #36]	; 0x24
 800d690:	e7f3      	b.n	800d67a <_dtoa_r+0x7f2>
 800d692:	d082      	beq.n	800d59a <_dtoa_r+0x712>
 800d694:	9b04      	ldr	r3, [sp, #16]
 800d696:	321c      	adds	r2, #28
 800d698:	4413      	add	r3, r2
 800d69a:	9304      	str	r3, [sp, #16]
 800d69c:	9b05      	ldr	r3, [sp, #20]
 800d69e:	4490      	add	r8, r2
 800d6a0:	4413      	add	r3, r2
 800d6a2:	e779      	b.n	800d598 <_dtoa_r+0x710>
 800d6a4:	4602      	mov	r2, r0
 800d6a6:	e7f5      	b.n	800d694 <_dtoa_r+0x80c>
 800d6a8:	f1b9 0f00 	cmp.w	r9, #0
 800d6ac:	dc36      	bgt.n	800d71c <_dtoa_r+0x894>
 800d6ae:	9b06      	ldr	r3, [sp, #24]
 800d6b0:	2b02      	cmp	r3, #2
 800d6b2:	dd33      	ble.n	800d71c <_dtoa_r+0x894>
 800d6b4:	46ca      	mov	sl, r9
 800d6b6:	f1ba 0f00 	cmp.w	sl, #0
 800d6ba:	d10d      	bne.n	800d6d8 <_dtoa_r+0x850>
 800d6bc:	4621      	mov	r1, r4
 800d6be:	4653      	mov	r3, sl
 800d6c0:	2205      	movs	r2, #5
 800d6c2:	4630      	mov	r0, r6
 800d6c4:	f000 faae 	bl	800dc24 <__multadd>
 800d6c8:	4601      	mov	r1, r0
 800d6ca:	4604      	mov	r4, r0
 800d6cc:	4628      	mov	r0, r5
 800d6ce:	f000 fd0d 	bl	800e0ec <__mcmp>
 800d6d2:	2800      	cmp	r0, #0
 800d6d4:	f73f ade4 	bgt.w	800d2a0 <_dtoa_r+0x418>
 800d6d8:	9b08      	ldr	r3, [sp, #32]
 800d6da:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d6de:	ea6f 0b03 	mvn.w	fp, r3
 800d6e2:	f04f 0900 	mov.w	r9, #0
 800d6e6:	4621      	mov	r1, r4
 800d6e8:	4630      	mov	r0, r6
 800d6ea:	f000 fa79 	bl	800dbe0 <_Bfree>
 800d6ee:	2f00      	cmp	r7, #0
 800d6f0:	f43f aea1 	beq.w	800d436 <_dtoa_r+0x5ae>
 800d6f4:	f1b9 0f00 	cmp.w	r9, #0
 800d6f8:	d005      	beq.n	800d706 <_dtoa_r+0x87e>
 800d6fa:	45b9      	cmp	r9, r7
 800d6fc:	d003      	beq.n	800d706 <_dtoa_r+0x87e>
 800d6fe:	4649      	mov	r1, r9
 800d700:	4630      	mov	r0, r6
 800d702:	f000 fa6d 	bl	800dbe0 <_Bfree>
 800d706:	4639      	mov	r1, r7
 800d708:	4630      	mov	r0, r6
 800d70a:	f000 fa69 	bl	800dbe0 <_Bfree>
 800d70e:	e692      	b.n	800d436 <_dtoa_r+0x5ae>
 800d710:	2400      	movs	r4, #0
 800d712:	4627      	mov	r7, r4
 800d714:	e7e0      	b.n	800d6d8 <_dtoa_r+0x850>
 800d716:	4693      	mov	fp, r2
 800d718:	4627      	mov	r7, r4
 800d71a:	e5c1      	b.n	800d2a0 <_dtoa_r+0x418>
 800d71c:	9b07      	ldr	r3, [sp, #28]
 800d71e:	46ca      	mov	sl, r9
 800d720:	2b00      	cmp	r3, #0
 800d722:	f000 8100 	beq.w	800d926 <_dtoa_r+0xa9e>
 800d726:	f1b8 0f00 	cmp.w	r8, #0
 800d72a:	dd05      	ble.n	800d738 <_dtoa_r+0x8b0>
 800d72c:	4639      	mov	r1, r7
 800d72e:	4642      	mov	r2, r8
 800d730:	4630      	mov	r0, r6
 800d732:	f000 fc6f 	bl	800e014 <__lshift>
 800d736:	4607      	mov	r7, r0
 800d738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d05d      	beq.n	800d7fa <_dtoa_r+0x972>
 800d73e:	6879      	ldr	r1, [r7, #4]
 800d740:	4630      	mov	r0, r6
 800d742:	f000 fa0d 	bl	800db60 <_Balloc>
 800d746:	4680      	mov	r8, r0
 800d748:	b928      	cbnz	r0, 800d756 <_dtoa_r+0x8ce>
 800d74a:	4b82      	ldr	r3, [pc, #520]	; (800d954 <_dtoa_r+0xacc>)
 800d74c:	4602      	mov	r2, r0
 800d74e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d752:	f7ff bbb1 	b.w	800ceb8 <_dtoa_r+0x30>
 800d756:	693a      	ldr	r2, [r7, #16]
 800d758:	3202      	adds	r2, #2
 800d75a:	0092      	lsls	r2, r2, #2
 800d75c:	f107 010c 	add.w	r1, r7, #12
 800d760:	300c      	adds	r0, #12
 800d762:	f001 ffc3 	bl	800f6ec <memcpy>
 800d766:	2201      	movs	r2, #1
 800d768:	4641      	mov	r1, r8
 800d76a:	4630      	mov	r0, r6
 800d76c:	f000 fc52 	bl	800e014 <__lshift>
 800d770:	9b01      	ldr	r3, [sp, #4]
 800d772:	3301      	adds	r3, #1
 800d774:	9304      	str	r3, [sp, #16]
 800d776:	9b01      	ldr	r3, [sp, #4]
 800d778:	4453      	add	r3, sl
 800d77a:	9308      	str	r3, [sp, #32]
 800d77c:	9b02      	ldr	r3, [sp, #8]
 800d77e:	f003 0301 	and.w	r3, r3, #1
 800d782:	46b9      	mov	r9, r7
 800d784:	9307      	str	r3, [sp, #28]
 800d786:	4607      	mov	r7, r0
 800d788:	9b04      	ldr	r3, [sp, #16]
 800d78a:	4621      	mov	r1, r4
 800d78c:	3b01      	subs	r3, #1
 800d78e:	4628      	mov	r0, r5
 800d790:	9302      	str	r3, [sp, #8]
 800d792:	f7ff faef 	bl	800cd74 <quorem>
 800d796:	4603      	mov	r3, r0
 800d798:	3330      	adds	r3, #48	; 0x30
 800d79a:	9005      	str	r0, [sp, #20]
 800d79c:	4649      	mov	r1, r9
 800d79e:	4628      	mov	r0, r5
 800d7a0:	9309      	str	r3, [sp, #36]	; 0x24
 800d7a2:	f000 fca3 	bl	800e0ec <__mcmp>
 800d7a6:	463a      	mov	r2, r7
 800d7a8:	4682      	mov	sl, r0
 800d7aa:	4621      	mov	r1, r4
 800d7ac:	4630      	mov	r0, r6
 800d7ae:	f000 fcb9 	bl	800e124 <__mdiff>
 800d7b2:	68c2      	ldr	r2, [r0, #12]
 800d7b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7b6:	4680      	mov	r8, r0
 800d7b8:	bb0a      	cbnz	r2, 800d7fe <_dtoa_r+0x976>
 800d7ba:	4601      	mov	r1, r0
 800d7bc:	4628      	mov	r0, r5
 800d7be:	f000 fc95 	bl	800e0ec <__mcmp>
 800d7c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7c4:	4602      	mov	r2, r0
 800d7c6:	4641      	mov	r1, r8
 800d7c8:	4630      	mov	r0, r6
 800d7ca:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800d7ce:	f000 fa07 	bl	800dbe0 <_Bfree>
 800d7d2:	9b06      	ldr	r3, [sp, #24]
 800d7d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d7d6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d7da:	ea43 0102 	orr.w	r1, r3, r2
 800d7de:	9b07      	ldr	r3, [sp, #28]
 800d7e0:	4319      	orrs	r1, r3
 800d7e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7e4:	d10d      	bne.n	800d802 <_dtoa_r+0x97a>
 800d7e6:	2b39      	cmp	r3, #57	; 0x39
 800d7e8:	d029      	beq.n	800d83e <_dtoa_r+0x9b6>
 800d7ea:	f1ba 0f00 	cmp.w	sl, #0
 800d7ee:	dd01      	ble.n	800d7f4 <_dtoa_r+0x96c>
 800d7f0:	9b05      	ldr	r3, [sp, #20]
 800d7f2:	3331      	adds	r3, #49	; 0x31
 800d7f4:	9a02      	ldr	r2, [sp, #8]
 800d7f6:	7013      	strb	r3, [r2, #0]
 800d7f8:	e775      	b.n	800d6e6 <_dtoa_r+0x85e>
 800d7fa:	4638      	mov	r0, r7
 800d7fc:	e7b8      	b.n	800d770 <_dtoa_r+0x8e8>
 800d7fe:	2201      	movs	r2, #1
 800d800:	e7e1      	b.n	800d7c6 <_dtoa_r+0x93e>
 800d802:	f1ba 0f00 	cmp.w	sl, #0
 800d806:	db06      	blt.n	800d816 <_dtoa_r+0x98e>
 800d808:	9906      	ldr	r1, [sp, #24]
 800d80a:	ea41 0a0a 	orr.w	sl, r1, sl
 800d80e:	9907      	ldr	r1, [sp, #28]
 800d810:	ea5a 0a01 	orrs.w	sl, sl, r1
 800d814:	d120      	bne.n	800d858 <_dtoa_r+0x9d0>
 800d816:	2a00      	cmp	r2, #0
 800d818:	ddec      	ble.n	800d7f4 <_dtoa_r+0x96c>
 800d81a:	4629      	mov	r1, r5
 800d81c:	2201      	movs	r2, #1
 800d81e:	4630      	mov	r0, r6
 800d820:	9304      	str	r3, [sp, #16]
 800d822:	f000 fbf7 	bl	800e014 <__lshift>
 800d826:	4621      	mov	r1, r4
 800d828:	4605      	mov	r5, r0
 800d82a:	f000 fc5f 	bl	800e0ec <__mcmp>
 800d82e:	2800      	cmp	r0, #0
 800d830:	9b04      	ldr	r3, [sp, #16]
 800d832:	dc02      	bgt.n	800d83a <_dtoa_r+0x9b2>
 800d834:	d1de      	bne.n	800d7f4 <_dtoa_r+0x96c>
 800d836:	07da      	lsls	r2, r3, #31
 800d838:	d5dc      	bpl.n	800d7f4 <_dtoa_r+0x96c>
 800d83a:	2b39      	cmp	r3, #57	; 0x39
 800d83c:	d1d8      	bne.n	800d7f0 <_dtoa_r+0x968>
 800d83e:	9a02      	ldr	r2, [sp, #8]
 800d840:	2339      	movs	r3, #57	; 0x39
 800d842:	7013      	strb	r3, [r2, #0]
 800d844:	4643      	mov	r3, r8
 800d846:	4698      	mov	r8, r3
 800d848:	3b01      	subs	r3, #1
 800d84a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800d84e:	2a39      	cmp	r2, #57	; 0x39
 800d850:	d051      	beq.n	800d8f6 <_dtoa_r+0xa6e>
 800d852:	3201      	adds	r2, #1
 800d854:	701a      	strb	r2, [r3, #0]
 800d856:	e746      	b.n	800d6e6 <_dtoa_r+0x85e>
 800d858:	2a00      	cmp	r2, #0
 800d85a:	dd03      	ble.n	800d864 <_dtoa_r+0x9dc>
 800d85c:	2b39      	cmp	r3, #57	; 0x39
 800d85e:	d0ee      	beq.n	800d83e <_dtoa_r+0x9b6>
 800d860:	3301      	adds	r3, #1
 800d862:	e7c7      	b.n	800d7f4 <_dtoa_r+0x96c>
 800d864:	9a04      	ldr	r2, [sp, #16]
 800d866:	9908      	ldr	r1, [sp, #32]
 800d868:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d86c:	428a      	cmp	r2, r1
 800d86e:	d02b      	beq.n	800d8c8 <_dtoa_r+0xa40>
 800d870:	4629      	mov	r1, r5
 800d872:	2300      	movs	r3, #0
 800d874:	220a      	movs	r2, #10
 800d876:	4630      	mov	r0, r6
 800d878:	f000 f9d4 	bl	800dc24 <__multadd>
 800d87c:	45b9      	cmp	r9, r7
 800d87e:	4605      	mov	r5, r0
 800d880:	f04f 0300 	mov.w	r3, #0
 800d884:	f04f 020a 	mov.w	r2, #10
 800d888:	4649      	mov	r1, r9
 800d88a:	4630      	mov	r0, r6
 800d88c:	d107      	bne.n	800d89e <_dtoa_r+0xa16>
 800d88e:	f000 f9c9 	bl	800dc24 <__multadd>
 800d892:	4681      	mov	r9, r0
 800d894:	4607      	mov	r7, r0
 800d896:	9b04      	ldr	r3, [sp, #16]
 800d898:	3301      	adds	r3, #1
 800d89a:	9304      	str	r3, [sp, #16]
 800d89c:	e774      	b.n	800d788 <_dtoa_r+0x900>
 800d89e:	f000 f9c1 	bl	800dc24 <__multadd>
 800d8a2:	4639      	mov	r1, r7
 800d8a4:	4681      	mov	r9, r0
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	220a      	movs	r2, #10
 800d8aa:	4630      	mov	r0, r6
 800d8ac:	f000 f9ba 	bl	800dc24 <__multadd>
 800d8b0:	4607      	mov	r7, r0
 800d8b2:	e7f0      	b.n	800d896 <_dtoa_r+0xa0e>
 800d8b4:	f1ba 0f00 	cmp.w	sl, #0
 800d8b8:	9a01      	ldr	r2, [sp, #4]
 800d8ba:	bfcc      	ite	gt
 800d8bc:	46d0      	movgt	r8, sl
 800d8be:	f04f 0801 	movle.w	r8, #1
 800d8c2:	4490      	add	r8, r2
 800d8c4:	f04f 0900 	mov.w	r9, #0
 800d8c8:	4629      	mov	r1, r5
 800d8ca:	2201      	movs	r2, #1
 800d8cc:	4630      	mov	r0, r6
 800d8ce:	9302      	str	r3, [sp, #8]
 800d8d0:	f000 fba0 	bl	800e014 <__lshift>
 800d8d4:	4621      	mov	r1, r4
 800d8d6:	4605      	mov	r5, r0
 800d8d8:	f000 fc08 	bl	800e0ec <__mcmp>
 800d8dc:	2800      	cmp	r0, #0
 800d8de:	dcb1      	bgt.n	800d844 <_dtoa_r+0x9bc>
 800d8e0:	d102      	bne.n	800d8e8 <_dtoa_r+0xa60>
 800d8e2:	9b02      	ldr	r3, [sp, #8]
 800d8e4:	07db      	lsls	r3, r3, #31
 800d8e6:	d4ad      	bmi.n	800d844 <_dtoa_r+0x9bc>
 800d8e8:	4643      	mov	r3, r8
 800d8ea:	4698      	mov	r8, r3
 800d8ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d8f0:	2a30      	cmp	r2, #48	; 0x30
 800d8f2:	d0fa      	beq.n	800d8ea <_dtoa_r+0xa62>
 800d8f4:	e6f7      	b.n	800d6e6 <_dtoa_r+0x85e>
 800d8f6:	9a01      	ldr	r2, [sp, #4]
 800d8f8:	429a      	cmp	r2, r3
 800d8fa:	d1a4      	bne.n	800d846 <_dtoa_r+0x9be>
 800d8fc:	f10b 0b01 	add.w	fp, fp, #1
 800d900:	2331      	movs	r3, #49	; 0x31
 800d902:	e778      	b.n	800d7f6 <_dtoa_r+0x96e>
 800d904:	4b14      	ldr	r3, [pc, #80]	; (800d958 <_dtoa_r+0xad0>)
 800d906:	f7ff bb2a 	b.w	800cf5e <_dtoa_r+0xd6>
 800d90a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	f47f ab05 	bne.w	800cf1c <_dtoa_r+0x94>
 800d912:	4b12      	ldr	r3, [pc, #72]	; (800d95c <_dtoa_r+0xad4>)
 800d914:	f7ff bb23 	b.w	800cf5e <_dtoa_r+0xd6>
 800d918:	f1ba 0f00 	cmp.w	sl, #0
 800d91c:	dc03      	bgt.n	800d926 <_dtoa_r+0xa9e>
 800d91e:	9b06      	ldr	r3, [sp, #24]
 800d920:	2b02      	cmp	r3, #2
 800d922:	f73f aec8 	bgt.w	800d6b6 <_dtoa_r+0x82e>
 800d926:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d92a:	4621      	mov	r1, r4
 800d92c:	4628      	mov	r0, r5
 800d92e:	f7ff fa21 	bl	800cd74 <quorem>
 800d932:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d936:	f808 3b01 	strb.w	r3, [r8], #1
 800d93a:	9a01      	ldr	r2, [sp, #4]
 800d93c:	eba8 0202 	sub.w	r2, r8, r2
 800d940:	4592      	cmp	sl, r2
 800d942:	ddb7      	ble.n	800d8b4 <_dtoa_r+0xa2c>
 800d944:	4629      	mov	r1, r5
 800d946:	2300      	movs	r3, #0
 800d948:	220a      	movs	r2, #10
 800d94a:	4630      	mov	r0, r6
 800d94c:	f000 f96a 	bl	800dc24 <__multadd>
 800d950:	4605      	mov	r5, r0
 800d952:	e7ea      	b.n	800d92a <_dtoa_r+0xaa2>
 800d954:	08010efd 	.word	0x08010efd
 800d958:	08010e58 	.word	0x08010e58
 800d95c:	08010e81 	.word	0x08010e81

0800d960 <_free_r>:
 800d960:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d962:	2900      	cmp	r1, #0
 800d964:	d044      	beq.n	800d9f0 <_free_r+0x90>
 800d966:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d96a:	9001      	str	r0, [sp, #4]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	f1a1 0404 	sub.w	r4, r1, #4
 800d972:	bfb8      	it	lt
 800d974:	18e4      	addlt	r4, r4, r3
 800d976:	f000 f8e7 	bl	800db48 <__malloc_lock>
 800d97a:	4a1e      	ldr	r2, [pc, #120]	; (800d9f4 <_free_r+0x94>)
 800d97c:	9801      	ldr	r0, [sp, #4]
 800d97e:	6813      	ldr	r3, [r2, #0]
 800d980:	b933      	cbnz	r3, 800d990 <_free_r+0x30>
 800d982:	6063      	str	r3, [r4, #4]
 800d984:	6014      	str	r4, [r2, #0]
 800d986:	b003      	add	sp, #12
 800d988:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d98c:	f000 b8e2 	b.w	800db54 <__malloc_unlock>
 800d990:	42a3      	cmp	r3, r4
 800d992:	d908      	bls.n	800d9a6 <_free_r+0x46>
 800d994:	6825      	ldr	r5, [r4, #0]
 800d996:	1961      	adds	r1, r4, r5
 800d998:	428b      	cmp	r3, r1
 800d99a:	bf01      	itttt	eq
 800d99c:	6819      	ldreq	r1, [r3, #0]
 800d99e:	685b      	ldreq	r3, [r3, #4]
 800d9a0:	1949      	addeq	r1, r1, r5
 800d9a2:	6021      	streq	r1, [r4, #0]
 800d9a4:	e7ed      	b.n	800d982 <_free_r+0x22>
 800d9a6:	461a      	mov	r2, r3
 800d9a8:	685b      	ldr	r3, [r3, #4]
 800d9aa:	b10b      	cbz	r3, 800d9b0 <_free_r+0x50>
 800d9ac:	42a3      	cmp	r3, r4
 800d9ae:	d9fa      	bls.n	800d9a6 <_free_r+0x46>
 800d9b0:	6811      	ldr	r1, [r2, #0]
 800d9b2:	1855      	adds	r5, r2, r1
 800d9b4:	42a5      	cmp	r5, r4
 800d9b6:	d10b      	bne.n	800d9d0 <_free_r+0x70>
 800d9b8:	6824      	ldr	r4, [r4, #0]
 800d9ba:	4421      	add	r1, r4
 800d9bc:	1854      	adds	r4, r2, r1
 800d9be:	42a3      	cmp	r3, r4
 800d9c0:	6011      	str	r1, [r2, #0]
 800d9c2:	d1e0      	bne.n	800d986 <_free_r+0x26>
 800d9c4:	681c      	ldr	r4, [r3, #0]
 800d9c6:	685b      	ldr	r3, [r3, #4]
 800d9c8:	6053      	str	r3, [r2, #4]
 800d9ca:	440c      	add	r4, r1
 800d9cc:	6014      	str	r4, [r2, #0]
 800d9ce:	e7da      	b.n	800d986 <_free_r+0x26>
 800d9d0:	d902      	bls.n	800d9d8 <_free_r+0x78>
 800d9d2:	230c      	movs	r3, #12
 800d9d4:	6003      	str	r3, [r0, #0]
 800d9d6:	e7d6      	b.n	800d986 <_free_r+0x26>
 800d9d8:	6825      	ldr	r5, [r4, #0]
 800d9da:	1961      	adds	r1, r4, r5
 800d9dc:	428b      	cmp	r3, r1
 800d9de:	bf04      	itt	eq
 800d9e0:	6819      	ldreq	r1, [r3, #0]
 800d9e2:	685b      	ldreq	r3, [r3, #4]
 800d9e4:	6063      	str	r3, [r4, #4]
 800d9e6:	bf04      	itt	eq
 800d9e8:	1949      	addeq	r1, r1, r5
 800d9ea:	6021      	streq	r1, [r4, #0]
 800d9ec:	6054      	str	r4, [r2, #4]
 800d9ee:	e7ca      	b.n	800d986 <_free_r+0x26>
 800d9f0:	b003      	add	sp, #12
 800d9f2:	bd30      	pop	{r4, r5, pc}
 800d9f4:	2400067c 	.word	0x2400067c

0800d9f8 <malloc>:
 800d9f8:	4b02      	ldr	r3, [pc, #8]	; (800da04 <malloc+0xc>)
 800d9fa:	4601      	mov	r1, r0
 800d9fc:	6818      	ldr	r0, [r3, #0]
 800d9fe:	f000 b823 	b.w	800da48 <_malloc_r>
 800da02:	bf00      	nop
 800da04:	24000068 	.word	0x24000068

0800da08 <sbrk_aligned>:
 800da08:	b570      	push	{r4, r5, r6, lr}
 800da0a:	4e0e      	ldr	r6, [pc, #56]	; (800da44 <sbrk_aligned+0x3c>)
 800da0c:	460c      	mov	r4, r1
 800da0e:	6831      	ldr	r1, [r6, #0]
 800da10:	4605      	mov	r5, r0
 800da12:	b911      	cbnz	r1, 800da1a <sbrk_aligned+0x12>
 800da14:	f001 fe5a 	bl	800f6cc <_sbrk_r>
 800da18:	6030      	str	r0, [r6, #0]
 800da1a:	4621      	mov	r1, r4
 800da1c:	4628      	mov	r0, r5
 800da1e:	f001 fe55 	bl	800f6cc <_sbrk_r>
 800da22:	1c43      	adds	r3, r0, #1
 800da24:	d00a      	beq.n	800da3c <sbrk_aligned+0x34>
 800da26:	1cc4      	adds	r4, r0, #3
 800da28:	f024 0403 	bic.w	r4, r4, #3
 800da2c:	42a0      	cmp	r0, r4
 800da2e:	d007      	beq.n	800da40 <sbrk_aligned+0x38>
 800da30:	1a21      	subs	r1, r4, r0
 800da32:	4628      	mov	r0, r5
 800da34:	f001 fe4a 	bl	800f6cc <_sbrk_r>
 800da38:	3001      	adds	r0, #1
 800da3a:	d101      	bne.n	800da40 <sbrk_aligned+0x38>
 800da3c:	f04f 34ff 	mov.w	r4, #4294967295
 800da40:	4620      	mov	r0, r4
 800da42:	bd70      	pop	{r4, r5, r6, pc}
 800da44:	24000680 	.word	0x24000680

0800da48 <_malloc_r>:
 800da48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da4c:	1ccd      	adds	r5, r1, #3
 800da4e:	f025 0503 	bic.w	r5, r5, #3
 800da52:	3508      	adds	r5, #8
 800da54:	2d0c      	cmp	r5, #12
 800da56:	bf38      	it	cc
 800da58:	250c      	movcc	r5, #12
 800da5a:	2d00      	cmp	r5, #0
 800da5c:	4607      	mov	r7, r0
 800da5e:	db01      	blt.n	800da64 <_malloc_r+0x1c>
 800da60:	42a9      	cmp	r1, r5
 800da62:	d905      	bls.n	800da70 <_malloc_r+0x28>
 800da64:	230c      	movs	r3, #12
 800da66:	603b      	str	r3, [r7, #0]
 800da68:	2600      	movs	r6, #0
 800da6a:	4630      	mov	r0, r6
 800da6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da70:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800db44 <_malloc_r+0xfc>
 800da74:	f000 f868 	bl	800db48 <__malloc_lock>
 800da78:	f8d8 3000 	ldr.w	r3, [r8]
 800da7c:	461c      	mov	r4, r3
 800da7e:	bb5c      	cbnz	r4, 800dad8 <_malloc_r+0x90>
 800da80:	4629      	mov	r1, r5
 800da82:	4638      	mov	r0, r7
 800da84:	f7ff ffc0 	bl	800da08 <sbrk_aligned>
 800da88:	1c43      	adds	r3, r0, #1
 800da8a:	4604      	mov	r4, r0
 800da8c:	d155      	bne.n	800db3a <_malloc_r+0xf2>
 800da8e:	f8d8 4000 	ldr.w	r4, [r8]
 800da92:	4626      	mov	r6, r4
 800da94:	2e00      	cmp	r6, #0
 800da96:	d145      	bne.n	800db24 <_malloc_r+0xdc>
 800da98:	2c00      	cmp	r4, #0
 800da9a:	d048      	beq.n	800db2e <_malloc_r+0xe6>
 800da9c:	6823      	ldr	r3, [r4, #0]
 800da9e:	4631      	mov	r1, r6
 800daa0:	4638      	mov	r0, r7
 800daa2:	eb04 0903 	add.w	r9, r4, r3
 800daa6:	f001 fe11 	bl	800f6cc <_sbrk_r>
 800daaa:	4581      	cmp	r9, r0
 800daac:	d13f      	bne.n	800db2e <_malloc_r+0xe6>
 800daae:	6821      	ldr	r1, [r4, #0]
 800dab0:	1a6d      	subs	r5, r5, r1
 800dab2:	4629      	mov	r1, r5
 800dab4:	4638      	mov	r0, r7
 800dab6:	f7ff ffa7 	bl	800da08 <sbrk_aligned>
 800daba:	3001      	adds	r0, #1
 800dabc:	d037      	beq.n	800db2e <_malloc_r+0xe6>
 800dabe:	6823      	ldr	r3, [r4, #0]
 800dac0:	442b      	add	r3, r5
 800dac2:	6023      	str	r3, [r4, #0]
 800dac4:	f8d8 3000 	ldr.w	r3, [r8]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d038      	beq.n	800db3e <_malloc_r+0xf6>
 800dacc:	685a      	ldr	r2, [r3, #4]
 800dace:	42a2      	cmp	r2, r4
 800dad0:	d12b      	bne.n	800db2a <_malloc_r+0xe2>
 800dad2:	2200      	movs	r2, #0
 800dad4:	605a      	str	r2, [r3, #4]
 800dad6:	e00f      	b.n	800daf8 <_malloc_r+0xb0>
 800dad8:	6822      	ldr	r2, [r4, #0]
 800dada:	1b52      	subs	r2, r2, r5
 800dadc:	d41f      	bmi.n	800db1e <_malloc_r+0xd6>
 800dade:	2a0b      	cmp	r2, #11
 800dae0:	d917      	bls.n	800db12 <_malloc_r+0xca>
 800dae2:	1961      	adds	r1, r4, r5
 800dae4:	42a3      	cmp	r3, r4
 800dae6:	6025      	str	r5, [r4, #0]
 800dae8:	bf18      	it	ne
 800daea:	6059      	strne	r1, [r3, #4]
 800daec:	6863      	ldr	r3, [r4, #4]
 800daee:	bf08      	it	eq
 800daf0:	f8c8 1000 	streq.w	r1, [r8]
 800daf4:	5162      	str	r2, [r4, r5]
 800daf6:	604b      	str	r3, [r1, #4]
 800daf8:	4638      	mov	r0, r7
 800dafa:	f104 060b 	add.w	r6, r4, #11
 800dafe:	f000 f829 	bl	800db54 <__malloc_unlock>
 800db02:	f026 0607 	bic.w	r6, r6, #7
 800db06:	1d23      	adds	r3, r4, #4
 800db08:	1af2      	subs	r2, r6, r3
 800db0a:	d0ae      	beq.n	800da6a <_malloc_r+0x22>
 800db0c:	1b9b      	subs	r3, r3, r6
 800db0e:	50a3      	str	r3, [r4, r2]
 800db10:	e7ab      	b.n	800da6a <_malloc_r+0x22>
 800db12:	42a3      	cmp	r3, r4
 800db14:	6862      	ldr	r2, [r4, #4]
 800db16:	d1dd      	bne.n	800dad4 <_malloc_r+0x8c>
 800db18:	f8c8 2000 	str.w	r2, [r8]
 800db1c:	e7ec      	b.n	800daf8 <_malloc_r+0xb0>
 800db1e:	4623      	mov	r3, r4
 800db20:	6864      	ldr	r4, [r4, #4]
 800db22:	e7ac      	b.n	800da7e <_malloc_r+0x36>
 800db24:	4634      	mov	r4, r6
 800db26:	6876      	ldr	r6, [r6, #4]
 800db28:	e7b4      	b.n	800da94 <_malloc_r+0x4c>
 800db2a:	4613      	mov	r3, r2
 800db2c:	e7cc      	b.n	800dac8 <_malloc_r+0x80>
 800db2e:	230c      	movs	r3, #12
 800db30:	603b      	str	r3, [r7, #0]
 800db32:	4638      	mov	r0, r7
 800db34:	f000 f80e 	bl	800db54 <__malloc_unlock>
 800db38:	e797      	b.n	800da6a <_malloc_r+0x22>
 800db3a:	6025      	str	r5, [r4, #0]
 800db3c:	e7dc      	b.n	800daf8 <_malloc_r+0xb0>
 800db3e:	605b      	str	r3, [r3, #4]
 800db40:	deff      	udf	#255	; 0xff
 800db42:	bf00      	nop
 800db44:	2400067c 	.word	0x2400067c

0800db48 <__malloc_lock>:
 800db48:	4801      	ldr	r0, [pc, #4]	; (800db50 <__malloc_lock+0x8>)
 800db4a:	f7ff b90b 	b.w	800cd64 <__retarget_lock_acquire_recursive>
 800db4e:	bf00      	nop
 800db50:	24000678 	.word	0x24000678

0800db54 <__malloc_unlock>:
 800db54:	4801      	ldr	r0, [pc, #4]	; (800db5c <__malloc_unlock+0x8>)
 800db56:	f7ff b906 	b.w	800cd66 <__retarget_lock_release_recursive>
 800db5a:	bf00      	nop
 800db5c:	24000678 	.word	0x24000678

0800db60 <_Balloc>:
 800db60:	b570      	push	{r4, r5, r6, lr}
 800db62:	69c6      	ldr	r6, [r0, #28]
 800db64:	4604      	mov	r4, r0
 800db66:	460d      	mov	r5, r1
 800db68:	b976      	cbnz	r6, 800db88 <_Balloc+0x28>
 800db6a:	2010      	movs	r0, #16
 800db6c:	f7ff ff44 	bl	800d9f8 <malloc>
 800db70:	4602      	mov	r2, r0
 800db72:	61e0      	str	r0, [r4, #28]
 800db74:	b920      	cbnz	r0, 800db80 <_Balloc+0x20>
 800db76:	4b18      	ldr	r3, [pc, #96]	; (800dbd8 <_Balloc+0x78>)
 800db78:	4818      	ldr	r0, [pc, #96]	; (800dbdc <_Balloc+0x7c>)
 800db7a:	216b      	movs	r1, #107	; 0x6b
 800db7c:	f001 fdcc 	bl	800f718 <__assert_func>
 800db80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800db84:	6006      	str	r6, [r0, #0]
 800db86:	60c6      	str	r6, [r0, #12]
 800db88:	69e6      	ldr	r6, [r4, #28]
 800db8a:	68f3      	ldr	r3, [r6, #12]
 800db8c:	b183      	cbz	r3, 800dbb0 <_Balloc+0x50>
 800db8e:	69e3      	ldr	r3, [r4, #28]
 800db90:	68db      	ldr	r3, [r3, #12]
 800db92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800db96:	b9b8      	cbnz	r0, 800dbc8 <_Balloc+0x68>
 800db98:	2101      	movs	r1, #1
 800db9a:	fa01 f605 	lsl.w	r6, r1, r5
 800db9e:	1d72      	adds	r2, r6, #5
 800dba0:	0092      	lsls	r2, r2, #2
 800dba2:	4620      	mov	r0, r4
 800dba4:	f001 fdd6 	bl	800f754 <_calloc_r>
 800dba8:	b160      	cbz	r0, 800dbc4 <_Balloc+0x64>
 800dbaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dbae:	e00e      	b.n	800dbce <_Balloc+0x6e>
 800dbb0:	2221      	movs	r2, #33	; 0x21
 800dbb2:	2104      	movs	r1, #4
 800dbb4:	4620      	mov	r0, r4
 800dbb6:	f001 fdcd 	bl	800f754 <_calloc_r>
 800dbba:	69e3      	ldr	r3, [r4, #28]
 800dbbc:	60f0      	str	r0, [r6, #12]
 800dbbe:	68db      	ldr	r3, [r3, #12]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d1e4      	bne.n	800db8e <_Balloc+0x2e>
 800dbc4:	2000      	movs	r0, #0
 800dbc6:	bd70      	pop	{r4, r5, r6, pc}
 800dbc8:	6802      	ldr	r2, [r0, #0]
 800dbca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dbce:	2300      	movs	r3, #0
 800dbd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dbd4:	e7f7      	b.n	800dbc6 <_Balloc+0x66>
 800dbd6:	bf00      	nop
 800dbd8:	08010e8e 	.word	0x08010e8e
 800dbdc:	08010f0e 	.word	0x08010f0e

0800dbe0 <_Bfree>:
 800dbe0:	b570      	push	{r4, r5, r6, lr}
 800dbe2:	69c6      	ldr	r6, [r0, #28]
 800dbe4:	4605      	mov	r5, r0
 800dbe6:	460c      	mov	r4, r1
 800dbe8:	b976      	cbnz	r6, 800dc08 <_Bfree+0x28>
 800dbea:	2010      	movs	r0, #16
 800dbec:	f7ff ff04 	bl	800d9f8 <malloc>
 800dbf0:	4602      	mov	r2, r0
 800dbf2:	61e8      	str	r0, [r5, #28]
 800dbf4:	b920      	cbnz	r0, 800dc00 <_Bfree+0x20>
 800dbf6:	4b09      	ldr	r3, [pc, #36]	; (800dc1c <_Bfree+0x3c>)
 800dbf8:	4809      	ldr	r0, [pc, #36]	; (800dc20 <_Bfree+0x40>)
 800dbfa:	218f      	movs	r1, #143	; 0x8f
 800dbfc:	f001 fd8c 	bl	800f718 <__assert_func>
 800dc00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dc04:	6006      	str	r6, [r0, #0]
 800dc06:	60c6      	str	r6, [r0, #12]
 800dc08:	b13c      	cbz	r4, 800dc1a <_Bfree+0x3a>
 800dc0a:	69eb      	ldr	r3, [r5, #28]
 800dc0c:	6862      	ldr	r2, [r4, #4]
 800dc0e:	68db      	ldr	r3, [r3, #12]
 800dc10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dc14:	6021      	str	r1, [r4, #0]
 800dc16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dc1a:	bd70      	pop	{r4, r5, r6, pc}
 800dc1c:	08010e8e 	.word	0x08010e8e
 800dc20:	08010f0e 	.word	0x08010f0e

0800dc24 <__multadd>:
 800dc24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc28:	690d      	ldr	r5, [r1, #16]
 800dc2a:	4607      	mov	r7, r0
 800dc2c:	460c      	mov	r4, r1
 800dc2e:	461e      	mov	r6, r3
 800dc30:	f101 0c14 	add.w	ip, r1, #20
 800dc34:	2000      	movs	r0, #0
 800dc36:	f8dc 3000 	ldr.w	r3, [ip]
 800dc3a:	b299      	uxth	r1, r3
 800dc3c:	fb02 6101 	mla	r1, r2, r1, r6
 800dc40:	0c1e      	lsrs	r6, r3, #16
 800dc42:	0c0b      	lsrs	r3, r1, #16
 800dc44:	fb02 3306 	mla	r3, r2, r6, r3
 800dc48:	b289      	uxth	r1, r1
 800dc4a:	3001      	adds	r0, #1
 800dc4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dc50:	4285      	cmp	r5, r0
 800dc52:	f84c 1b04 	str.w	r1, [ip], #4
 800dc56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dc5a:	dcec      	bgt.n	800dc36 <__multadd+0x12>
 800dc5c:	b30e      	cbz	r6, 800dca2 <__multadd+0x7e>
 800dc5e:	68a3      	ldr	r3, [r4, #8]
 800dc60:	42ab      	cmp	r3, r5
 800dc62:	dc19      	bgt.n	800dc98 <__multadd+0x74>
 800dc64:	6861      	ldr	r1, [r4, #4]
 800dc66:	4638      	mov	r0, r7
 800dc68:	3101      	adds	r1, #1
 800dc6a:	f7ff ff79 	bl	800db60 <_Balloc>
 800dc6e:	4680      	mov	r8, r0
 800dc70:	b928      	cbnz	r0, 800dc7e <__multadd+0x5a>
 800dc72:	4602      	mov	r2, r0
 800dc74:	4b0c      	ldr	r3, [pc, #48]	; (800dca8 <__multadd+0x84>)
 800dc76:	480d      	ldr	r0, [pc, #52]	; (800dcac <__multadd+0x88>)
 800dc78:	21ba      	movs	r1, #186	; 0xba
 800dc7a:	f001 fd4d 	bl	800f718 <__assert_func>
 800dc7e:	6922      	ldr	r2, [r4, #16]
 800dc80:	3202      	adds	r2, #2
 800dc82:	f104 010c 	add.w	r1, r4, #12
 800dc86:	0092      	lsls	r2, r2, #2
 800dc88:	300c      	adds	r0, #12
 800dc8a:	f001 fd2f 	bl	800f6ec <memcpy>
 800dc8e:	4621      	mov	r1, r4
 800dc90:	4638      	mov	r0, r7
 800dc92:	f7ff ffa5 	bl	800dbe0 <_Bfree>
 800dc96:	4644      	mov	r4, r8
 800dc98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dc9c:	3501      	adds	r5, #1
 800dc9e:	615e      	str	r6, [r3, #20]
 800dca0:	6125      	str	r5, [r4, #16]
 800dca2:	4620      	mov	r0, r4
 800dca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dca8:	08010efd 	.word	0x08010efd
 800dcac:	08010f0e 	.word	0x08010f0e

0800dcb0 <__s2b>:
 800dcb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcb4:	460c      	mov	r4, r1
 800dcb6:	4615      	mov	r5, r2
 800dcb8:	461f      	mov	r7, r3
 800dcba:	2209      	movs	r2, #9
 800dcbc:	3308      	adds	r3, #8
 800dcbe:	4606      	mov	r6, r0
 800dcc0:	fb93 f3f2 	sdiv	r3, r3, r2
 800dcc4:	2100      	movs	r1, #0
 800dcc6:	2201      	movs	r2, #1
 800dcc8:	429a      	cmp	r2, r3
 800dcca:	db09      	blt.n	800dce0 <__s2b+0x30>
 800dccc:	4630      	mov	r0, r6
 800dcce:	f7ff ff47 	bl	800db60 <_Balloc>
 800dcd2:	b940      	cbnz	r0, 800dce6 <__s2b+0x36>
 800dcd4:	4602      	mov	r2, r0
 800dcd6:	4b19      	ldr	r3, [pc, #100]	; (800dd3c <__s2b+0x8c>)
 800dcd8:	4819      	ldr	r0, [pc, #100]	; (800dd40 <__s2b+0x90>)
 800dcda:	21d3      	movs	r1, #211	; 0xd3
 800dcdc:	f001 fd1c 	bl	800f718 <__assert_func>
 800dce0:	0052      	lsls	r2, r2, #1
 800dce2:	3101      	adds	r1, #1
 800dce4:	e7f0      	b.n	800dcc8 <__s2b+0x18>
 800dce6:	9b08      	ldr	r3, [sp, #32]
 800dce8:	6143      	str	r3, [r0, #20]
 800dcea:	2d09      	cmp	r5, #9
 800dcec:	f04f 0301 	mov.w	r3, #1
 800dcf0:	6103      	str	r3, [r0, #16]
 800dcf2:	dd16      	ble.n	800dd22 <__s2b+0x72>
 800dcf4:	f104 0909 	add.w	r9, r4, #9
 800dcf8:	46c8      	mov	r8, r9
 800dcfa:	442c      	add	r4, r5
 800dcfc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800dd00:	4601      	mov	r1, r0
 800dd02:	3b30      	subs	r3, #48	; 0x30
 800dd04:	220a      	movs	r2, #10
 800dd06:	4630      	mov	r0, r6
 800dd08:	f7ff ff8c 	bl	800dc24 <__multadd>
 800dd0c:	45a0      	cmp	r8, r4
 800dd0e:	d1f5      	bne.n	800dcfc <__s2b+0x4c>
 800dd10:	f1a5 0408 	sub.w	r4, r5, #8
 800dd14:	444c      	add	r4, r9
 800dd16:	1b2d      	subs	r5, r5, r4
 800dd18:	1963      	adds	r3, r4, r5
 800dd1a:	42bb      	cmp	r3, r7
 800dd1c:	db04      	blt.n	800dd28 <__s2b+0x78>
 800dd1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd22:	340a      	adds	r4, #10
 800dd24:	2509      	movs	r5, #9
 800dd26:	e7f6      	b.n	800dd16 <__s2b+0x66>
 800dd28:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dd2c:	4601      	mov	r1, r0
 800dd2e:	3b30      	subs	r3, #48	; 0x30
 800dd30:	220a      	movs	r2, #10
 800dd32:	4630      	mov	r0, r6
 800dd34:	f7ff ff76 	bl	800dc24 <__multadd>
 800dd38:	e7ee      	b.n	800dd18 <__s2b+0x68>
 800dd3a:	bf00      	nop
 800dd3c:	08010efd 	.word	0x08010efd
 800dd40:	08010f0e 	.word	0x08010f0e

0800dd44 <__hi0bits>:
 800dd44:	0c03      	lsrs	r3, r0, #16
 800dd46:	041b      	lsls	r3, r3, #16
 800dd48:	b9d3      	cbnz	r3, 800dd80 <__hi0bits+0x3c>
 800dd4a:	0400      	lsls	r0, r0, #16
 800dd4c:	2310      	movs	r3, #16
 800dd4e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800dd52:	bf04      	itt	eq
 800dd54:	0200      	lsleq	r0, r0, #8
 800dd56:	3308      	addeq	r3, #8
 800dd58:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dd5c:	bf04      	itt	eq
 800dd5e:	0100      	lsleq	r0, r0, #4
 800dd60:	3304      	addeq	r3, #4
 800dd62:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dd66:	bf04      	itt	eq
 800dd68:	0080      	lsleq	r0, r0, #2
 800dd6a:	3302      	addeq	r3, #2
 800dd6c:	2800      	cmp	r0, #0
 800dd6e:	db05      	blt.n	800dd7c <__hi0bits+0x38>
 800dd70:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800dd74:	f103 0301 	add.w	r3, r3, #1
 800dd78:	bf08      	it	eq
 800dd7a:	2320      	moveq	r3, #32
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	4770      	bx	lr
 800dd80:	2300      	movs	r3, #0
 800dd82:	e7e4      	b.n	800dd4e <__hi0bits+0xa>

0800dd84 <__lo0bits>:
 800dd84:	6803      	ldr	r3, [r0, #0]
 800dd86:	f013 0207 	ands.w	r2, r3, #7
 800dd8a:	d00c      	beq.n	800dda6 <__lo0bits+0x22>
 800dd8c:	07d9      	lsls	r1, r3, #31
 800dd8e:	d422      	bmi.n	800ddd6 <__lo0bits+0x52>
 800dd90:	079a      	lsls	r2, r3, #30
 800dd92:	bf49      	itett	mi
 800dd94:	085b      	lsrmi	r3, r3, #1
 800dd96:	089b      	lsrpl	r3, r3, #2
 800dd98:	6003      	strmi	r3, [r0, #0]
 800dd9a:	2201      	movmi	r2, #1
 800dd9c:	bf5c      	itt	pl
 800dd9e:	6003      	strpl	r3, [r0, #0]
 800dda0:	2202      	movpl	r2, #2
 800dda2:	4610      	mov	r0, r2
 800dda4:	4770      	bx	lr
 800dda6:	b299      	uxth	r1, r3
 800dda8:	b909      	cbnz	r1, 800ddae <__lo0bits+0x2a>
 800ddaa:	0c1b      	lsrs	r3, r3, #16
 800ddac:	2210      	movs	r2, #16
 800ddae:	b2d9      	uxtb	r1, r3
 800ddb0:	b909      	cbnz	r1, 800ddb6 <__lo0bits+0x32>
 800ddb2:	3208      	adds	r2, #8
 800ddb4:	0a1b      	lsrs	r3, r3, #8
 800ddb6:	0719      	lsls	r1, r3, #28
 800ddb8:	bf04      	itt	eq
 800ddba:	091b      	lsreq	r3, r3, #4
 800ddbc:	3204      	addeq	r2, #4
 800ddbe:	0799      	lsls	r1, r3, #30
 800ddc0:	bf04      	itt	eq
 800ddc2:	089b      	lsreq	r3, r3, #2
 800ddc4:	3202      	addeq	r2, #2
 800ddc6:	07d9      	lsls	r1, r3, #31
 800ddc8:	d403      	bmi.n	800ddd2 <__lo0bits+0x4e>
 800ddca:	085b      	lsrs	r3, r3, #1
 800ddcc:	f102 0201 	add.w	r2, r2, #1
 800ddd0:	d003      	beq.n	800ddda <__lo0bits+0x56>
 800ddd2:	6003      	str	r3, [r0, #0]
 800ddd4:	e7e5      	b.n	800dda2 <__lo0bits+0x1e>
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	e7e3      	b.n	800dda2 <__lo0bits+0x1e>
 800ddda:	2220      	movs	r2, #32
 800dddc:	e7e1      	b.n	800dda2 <__lo0bits+0x1e>
	...

0800dde0 <__i2b>:
 800dde0:	b510      	push	{r4, lr}
 800dde2:	460c      	mov	r4, r1
 800dde4:	2101      	movs	r1, #1
 800dde6:	f7ff febb 	bl	800db60 <_Balloc>
 800ddea:	4602      	mov	r2, r0
 800ddec:	b928      	cbnz	r0, 800ddfa <__i2b+0x1a>
 800ddee:	4b05      	ldr	r3, [pc, #20]	; (800de04 <__i2b+0x24>)
 800ddf0:	4805      	ldr	r0, [pc, #20]	; (800de08 <__i2b+0x28>)
 800ddf2:	f240 1145 	movw	r1, #325	; 0x145
 800ddf6:	f001 fc8f 	bl	800f718 <__assert_func>
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	6144      	str	r4, [r0, #20]
 800ddfe:	6103      	str	r3, [r0, #16]
 800de00:	bd10      	pop	{r4, pc}
 800de02:	bf00      	nop
 800de04:	08010efd 	.word	0x08010efd
 800de08:	08010f0e 	.word	0x08010f0e

0800de0c <__multiply>:
 800de0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de10:	4691      	mov	r9, r2
 800de12:	690a      	ldr	r2, [r1, #16]
 800de14:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800de18:	429a      	cmp	r2, r3
 800de1a:	bfb8      	it	lt
 800de1c:	460b      	movlt	r3, r1
 800de1e:	460c      	mov	r4, r1
 800de20:	bfbc      	itt	lt
 800de22:	464c      	movlt	r4, r9
 800de24:	4699      	movlt	r9, r3
 800de26:	6927      	ldr	r7, [r4, #16]
 800de28:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800de2c:	68a3      	ldr	r3, [r4, #8]
 800de2e:	6861      	ldr	r1, [r4, #4]
 800de30:	eb07 060a 	add.w	r6, r7, sl
 800de34:	42b3      	cmp	r3, r6
 800de36:	b085      	sub	sp, #20
 800de38:	bfb8      	it	lt
 800de3a:	3101      	addlt	r1, #1
 800de3c:	f7ff fe90 	bl	800db60 <_Balloc>
 800de40:	b930      	cbnz	r0, 800de50 <__multiply+0x44>
 800de42:	4602      	mov	r2, r0
 800de44:	4b44      	ldr	r3, [pc, #272]	; (800df58 <__multiply+0x14c>)
 800de46:	4845      	ldr	r0, [pc, #276]	; (800df5c <__multiply+0x150>)
 800de48:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800de4c:	f001 fc64 	bl	800f718 <__assert_func>
 800de50:	f100 0514 	add.w	r5, r0, #20
 800de54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800de58:	462b      	mov	r3, r5
 800de5a:	2200      	movs	r2, #0
 800de5c:	4543      	cmp	r3, r8
 800de5e:	d321      	bcc.n	800dea4 <__multiply+0x98>
 800de60:	f104 0314 	add.w	r3, r4, #20
 800de64:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800de68:	f109 0314 	add.w	r3, r9, #20
 800de6c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800de70:	9202      	str	r2, [sp, #8]
 800de72:	1b3a      	subs	r2, r7, r4
 800de74:	3a15      	subs	r2, #21
 800de76:	f022 0203 	bic.w	r2, r2, #3
 800de7a:	3204      	adds	r2, #4
 800de7c:	f104 0115 	add.w	r1, r4, #21
 800de80:	428f      	cmp	r7, r1
 800de82:	bf38      	it	cc
 800de84:	2204      	movcc	r2, #4
 800de86:	9201      	str	r2, [sp, #4]
 800de88:	9a02      	ldr	r2, [sp, #8]
 800de8a:	9303      	str	r3, [sp, #12]
 800de8c:	429a      	cmp	r2, r3
 800de8e:	d80c      	bhi.n	800deaa <__multiply+0x9e>
 800de90:	2e00      	cmp	r6, #0
 800de92:	dd03      	ble.n	800de9c <__multiply+0x90>
 800de94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d05b      	beq.n	800df54 <__multiply+0x148>
 800de9c:	6106      	str	r6, [r0, #16]
 800de9e:	b005      	add	sp, #20
 800dea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dea4:	f843 2b04 	str.w	r2, [r3], #4
 800dea8:	e7d8      	b.n	800de5c <__multiply+0x50>
 800deaa:	f8b3 a000 	ldrh.w	sl, [r3]
 800deae:	f1ba 0f00 	cmp.w	sl, #0
 800deb2:	d024      	beq.n	800defe <__multiply+0xf2>
 800deb4:	f104 0e14 	add.w	lr, r4, #20
 800deb8:	46a9      	mov	r9, r5
 800deba:	f04f 0c00 	mov.w	ip, #0
 800debe:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dec2:	f8d9 1000 	ldr.w	r1, [r9]
 800dec6:	fa1f fb82 	uxth.w	fp, r2
 800deca:	b289      	uxth	r1, r1
 800decc:	fb0a 110b 	mla	r1, sl, fp, r1
 800ded0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ded4:	f8d9 2000 	ldr.w	r2, [r9]
 800ded8:	4461      	add	r1, ip
 800deda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dede:	fb0a c20b 	mla	r2, sl, fp, ip
 800dee2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dee6:	b289      	uxth	r1, r1
 800dee8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800deec:	4577      	cmp	r7, lr
 800deee:	f849 1b04 	str.w	r1, [r9], #4
 800def2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800def6:	d8e2      	bhi.n	800debe <__multiply+0xb2>
 800def8:	9a01      	ldr	r2, [sp, #4]
 800defa:	f845 c002 	str.w	ip, [r5, r2]
 800defe:	9a03      	ldr	r2, [sp, #12]
 800df00:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800df04:	3304      	adds	r3, #4
 800df06:	f1b9 0f00 	cmp.w	r9, #0
 800df0a:	d021      	beq.n	800df50 <__multiply+0x144>
 800df0c:	6829      	ldr	r1, [r5, #0]
 800df0e:	f104 0c14 	add.w	ip, r4, #20
 800df12:	46ae      	mov	lr, r5
 800df14:	f04f 0a00 	mov.w	sl, #0
 800df18:	f8bc b000 	ldrh.w	fp, [ip]
 800df1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800df20:	fb09 220b 	mla	r2, r9, fp, r2
 800df24:	4452      	add	r2, sl
 800df26:	b289      	uxth	r1, r1
 800df28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800df2c:	f84e 1b04 	str.w	r1, [lr], #4
 800df30:	f85c 1b04 	ldr.w	r1, [ip], #4
 800df34:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800df38:	f8be 1000 	ldrh.w	r1, [lr]
 800df3c:	fb09 110a 	mla	r1, r9, sl, r1
 800df40:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800df44:	4567      	cmp	r7, ip
 800df46:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800df4a:	d8e5      	bhi.n	800df18 <__multiply+0x10c>
 800df4c:	9a01      	ldr	r2, [sp, #4]
 800df4e:	50a9      	str	r1, [r5, r2]
 800df50:	3504      	adds	r5, #4
 800df52:	e799      	b.n	800de88 <__multiply+0x7c>
 800df54:	3e01      	subs	r6, #1
 800df56:	e79b      	b.n	800de90 <__multiply+0x84>
 800df58:	08010efd 	.word	0x08010efd
 800df5c:	08010f0e 	.word	0x08010f0e

0800df60 <__pow5mult>:
 800df60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df64:	4615      	mov	r5, r2
 800df66:	f012 0203 	ands.w	r2, r2, #3
 800df6a:	4606      	mov	r6, r0
 800df6c:	460f      	mov	r7, r1
 800df6e:	d007      	beq.n	800df80 <__pow5mult+0x20>
 800df70:	4c25      	ldr	r4, [pc, #148]	; (800e008 <__pow5mult+0xa8>)
 800df72:	3a01      	subs	r2, #1
 800df74:	2300      	movs	r3, #0
 800df76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800df7a:	f7ff fe53 	bl	800dc24 <__multadd>
 800df7e:	4607      	mov	r7, r0
 800df80:	10ad      	asrs	r5, r5, #2
 800df82:	d03d      	beq.n	800e000 <__pow5mult+0xa0>
 800df84:	69f4      	ldr	r4, [r6, #28]
 800df86:	b97c      	cbnz	r4, 800dfa8 <__pow5mult+0x48>
 800df88:	2010      	movs	r0, #16
 800df8a:	f7ff fd35 	bl	800d9f8 <malloc>
 800df8e:	4602      	mov	r2, r0
 800df90:	61f0      	str	r0, [r6, #28]
 800df92:	b928      	cbnz	r0, 800dfa0 <__pow5mult+0x40>
 800df94:	4b1d      	ldr	r3, [pc, #116]	; (800e00c <__pow5mult+0xac>)
 800df96:	481e      	ldr	r0, [pc, #120]	; (800e010 <__pow5mult+0xb0>)
 800df98:	f240 11b3 	movw	r1, #435	; 0x1b3
 800df9c:	f001 fbbc 	bl	800f718 <__assert_func>
 800dfa0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dfa4:	6004      	str	r4, [r0, #0]
 800dfa6:	60c4      	str	r4, [r0, #12]
 800dfa8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800dfac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dfb0:	b94c      	cbnz	r4, 800dfc6 <__pow5mult+0x66>
 800dfb2:	f240 2171 	movw	r1, #625	; 0x271
 800dfb6:	4630      	mov	r0, r6
 800dfb8:	f7ff ff12 	bl	800dde0 <__i2b>
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	f8c8 0008 	str.w	r0, [r8, #8]
 800dfc2:	4604      	mov	r4, r0
 800dfc4:	6003      	str	r3, [r0, #0]
 800dfc6:	f04f 0900 	mov.w	r9, #0
 800dfca:	07eb      	lsls	r3, r5, #31
 800dfcc:	d50a      	bpl.n	800dfe4 <__pow5mult+0x84>
 800dfce:	4639      	mov	r1, r7
 800dfd0:	4622      	mov	r2, r4
 800dfd2:	4630      	mov	r0, r6
 800dfd4:	f7ff ff1a 	bl	800de0c <__multiply>
 800dfd8:	4639      	mov	r1, r7
 800dfda:	4680      	mov	r8, r0
 800dfdc:	4630      	mov	r0, r6
 800dfde:	f7ff fdff 	bl	800dbe0 <_Bfree>
 800dfe2:	4647      	mov	r7, r8
 800dfe4:	106d      	asrs	r5, r5, #1
 800dfe6:	d00b      	beq.n	800e000 <__pow5mult+0xa0>
 800dfe8:	6820      	ldr	r0, [r4, #0]
 800dfea:	b938      	cbnz	r0, 800dffc <__pow5mult+0x9c>
 800dfec:	4622      	mov	r2, r4
 800dfee:	4621      	mov	r1, r4
 800dff0:	4630      	mov	r0, r6
 800dff2:	f7ff ff0b 	bl	800de0c <__multiply>
 800dff6:	6020      	str	r0, [r4, #0]
 800dff8:	f8c0 9000 	str.w	r9, [r0]
 800dffc:	4604      	mov	r4, r0
 800dffe:	e7e4      	b.n	800dfca <__pow5mult+0x6a>
 800e000:	4638      	mov	r0, r7
 800e002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e006:	bf00      	nop
 800e008:	08011058 	.word	0x08011058
 800e00c:	08010e8e 	.word	0x08010e8e
 800e010:	08010f0e 	.word	0x08010f0e

0800e014 <__lshift>:
 800e014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e018:	460c      	mov	r4, r1
 800e01a:	6849      	ldr	r1, [r1, #4]
 800e01c:	6923      	ldr	r3, [r4, #16]
 800e01e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e022:	68a3      	ldr	r3, [r4, #8]
 800e024:	4607      	mov	r7, r0
 800e026:	4691      	mov	r9, r2
 800e028:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e02c:	f108 0601 	add.w	r6, r8, #1
 800e030:	42b3      	cmp	r3, r6
 800e032:	db0b      	blt.n	800e04c <__lshift+0x38>
 800e034:	4638      	mov	r0, r7
 800e036:	f7ff fd93 	bl	800db60 <_Balloc>
 800e03a:	4605      	mov	r5, r0
 800e03c:	b948      	cbnz	r0, 800e052 <__lshift+0x3e>
 800e03e:	4602      	mov	r2, r0
 800e040:	4b28      	ldr	r3, [pc, #160]	; (800e0e4 <__lshift+0xd0>)
 800e042:	4829      	ldr	r0, [pc, #164]	; (800e0e8 <__lshift+0xd4>)
 800e044:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e048:	f001 fb66 	bl	800f718 <__assert_func>
 800e04c:	3101      	adds	r1, #1
 800e04e:	005b      	lsls	r3, r3, #1
 800e050:	e7ee      	b.n	800e030 <__lshift+0x1c>
 800e052:	2300      	movs	r3, #0
 800e054:	f100 0114 	add.w	r1, r0, #20
 800e058:	f100 0210 	add.w	r2, r0, #16
 800e05c:	4618      	mov	r0, r3
 800e05e:	4553      	cmp	r3, sl
 800e060:	db33      	blt.n	800e0ca <__lshift+0xb6>
 800e062:	6920      	ldr	r0, [r4, #16]
 800e064:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e068:	f104 0314 	add.w	r3, r4, #20
 800e06c:	f019 091f 	ands.w	r9, r9, #31
 800e070:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e074:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e078:	d02b      	beq.n	800e0d2 <__lshift+0xbe>
 800e07a:	f1c9 0e20 	rsb	lr, r9, #32
 800e07e:	468a      	mov	sl, r1
 800e080:	2200      	movs	r2, #0
 800e082:	6818      	ldr	r0, [r3, #0]
 800e084:	fa00 f009 	lsl.w	r0, r0, r9
 800e088:	4310      	orrs	r0, r2
 800e08a:	f84a 0b04 	str.w	r0, [sl], #4
 800e08e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e092:	459c      	cmp	ip, r3
 800e094:	fa22 f20e 	lsr.w	r2, r2, lr
 800e098:	d8f3      	bhi.n	800e082 <__lshift+0x6e>
 800e09a:	ebac 0304 	sub.w	r3, ip, r4
 800e09e:	3b15      	subs	r3, #21
 800e0a0:	f023 0303 	bic.w	r3, r3, #3
 800e0a4:	3304      	adds	r3, #4
 800e0a6:	f104 0015 	add.w	r0, r4, #21
 800e0aa:	4584      	cmp	ip, r0
 800e0ac:	bf38      	it	cc
 800e0ae:	2304      	movcc	r3, #4
 800e0b0:	50ca      	str	r2, [r1, r3]
 800e0b2:	b10a      	cbz	r2, 800e0b8 <__lshift+0xa4>
 800e0b4:	f108 0602 	add.w	r6, r8, #2
 800e0b8:	3e01      	subs	r6, #1
 800e0ba:	4638      	mov	r0, r7
 800e0bc:	612e      	str	r6, [r5, #16]
 800e0be:	4621      	mov	r1, r4
 800e0c0:	f7ff fd8e 	bl	800dbe0 <_Bfree>
 800e0c4:	4628      	mov	r0, r5
 800e0c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0ca:	f842 0f04 	str.w	r0, [r2, #4]!
 800e0ce:	3301      	adds	r3, #1
 800e0d0:	e7c5      	b.n	800e05e <__lshift+0x4a>
 800e0d2:	3904      	subs	r1, #4
 800e0d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0d8:	f841 2f04 	str.w	r2, [r1, #4]!
 800e0dc:	459c      	cmp	ip, r3
 800e0de:	d8f9      	bhi.n	800e0d4 <__lshift+0xc0>
 800e0e0:	e7ea      	b.n	800e0b8 <__lshift+0xa4>
 800e0e2:	bf00      	nop
 800e0e4:	08010efd 	.word	0x08010efd
 800e0e8:	08010f0e 	.word	0x08010f0e

0800e0ec <__mcmp>:
 800e0ec:	b530      	push	{r4, r5, lr}
 800e0ee:	6902      	ldr	r2, [r0, #16]
 800e0f0:	690c      	ldr	r4, [r1, #16]
 800e0f2:	1b12      	subs	r2, r2, r4
 800e0f4:	d10e      	bne.n	800e114 <__mcmp+0x28>
 800e0f6:	f100 0314 	add.w	r3, r0, #20
 800e0fa:	3114      	adds	r1, #20
 800e0fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e100:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e104:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e108:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e10c:	42a5      	cmp	r5, r4
 800e10e:	d003      	beq.n	800e118 <__mcmp+0x2c>
 800e110:	d305      	bcc.n	800e11e <__mcmp+0x32>
 800e112:	2201      	movs	r2, #1
 800e114:	4610      	mov	r0, r2
 800e116:	bd30      	pop	{r4, r5, pc}
 800e118:	4283      	cmp	r3, r0
 800e11a:	d3f3      	bcc.n	800e104 <__mcmp+0x18>
 800e11c:	e7fa      	b.n	800e114 <__mcmp+0x28>
 800e11e:	f04f 32ff 	mov.w	r2, #4294967295
 800e122:	e7f7      	b.n	800e114 <__mcmp+0x28>

0800e124 <__mdiff>:
 800e124:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e128:	460c      	mov	r4, r1
 800e12a:	4606      	mov	r6, r0
 800e12c:	4611      	mov	r1, r2
 800e12e:	4620      	mov	r0, r4
 800e130:	4690      	mov	r8, r2
 800e132:	f7ff ffdb 	bl	800e0ec <__mcmp>
 800e136:	1e05      	subs	r5, r0, #0
 800e138:	d110      	bne.n	800e15c <__mdiff+0x38>
 800e13a:	4629      	mov	r1, r5
 800e13c:	4630      	mov	r0, r6
 800e13e:	f7ff fd0f 	bl	800db60 <_Balloc>
 800e142:	b930      	cbnz	r0, 800e152 <__mdiff+0x2e>
 800e144:	4b3a      	ldr	r3, [pc, #232]	; (800e230 <__mdiff+0x10c>)
 800e146:	4602      	mov	r2, r0
 800e148:	f240 2137 	movw	r1, #567	; 0x237
 800e14c:	4839      	ldr	r0, [pc, #228]	; (800e234 <__mdiff+0x110>)
 800e14e:	f001 fae3 	bl	800f718 <__assert_func>
 800e152:	2301      	movs	r3, #1
 800e154:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e158:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e15c:	bfa4      	itt	ge
 800e15e:	4643      	movge	r3, r8
 800e160:	46a0      	movge	r8, r4
 800e162:	4630      	mov	r0, r6
 800e164:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e168:	bfa6      	itte	ge
 800e16a:	461c      	movge	r4, r3
 800e16c:	2500      	movge	r5, #0
 800e16e:	2501      	movlt	r5, #1
 800e170:	f7ff fcf6 	bl	800db60 <_Balloc>
 800e174:	b920      	cbnz	r0, 800e180 <__mdiff+0x5c>
 800e176:	4b2e      	ldr	r3, [pc, #184]	; (800e230 <__mdiff+0x10c>)
 800e178:	4602      	mov	r2, r0
 800e17a:	f240 2145 	movw	r1, #581	; 0x245
 800e17e:	e7e5      	b.n	800e14c <__mdiff+0x28>
 800e180:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e184:	6926      	ldr	r6, [r4, #16]
 800e186:	60c5      	str	r5, [r0, #12]
 800e188:	f104 0914 	add.w	r9, r4, #20
 800e18c:	f108 0514 	add.w	r5, r8, #20
 800e190:	f100 0e14 	add.w	lr, r0, #20
 800e194:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e198:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e19c:	f108 0210 	add.w	r2, r8, #16
 800e1a0:	46f2      	mov	sl, lr
 800e1a2:	2100      	movs	r1, #0
 800e1a4:	f859 3b04 	ldr.w	r3, [r9], #4
 800e1a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e1ac:	fa11 f88b 	uxtah	r8, r1, fp
 800e1b0:	b299      	uxth	r1, r3
 800e1b2:	0c1b      	lsrs	r3, r3, #16
 800e1b4:	eba8 0801 	sub.w	r8, r8, r1
 800e1b8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e1bc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e1c0:	fa1f f888 	uxth.w	r8, r8
 800e1c4:	1419      	asrs	r1, r3, #16
 800e1c6:	454e      	cmp	r6, r9
 800e1c8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e1cc:	f84a 3b04 	str.w	r3, [sl], #4
 800e1d0:	d8e8      	bhi.n	800e1a4 <__mdiff+0x80>
 800e1d2:	1b33      	subs	r3, r6, r4
 800e1d4:	3b15      	subs	r3, #21
 800e1d6:	f023 0303 	bic.w	r3, r3, #3
 800e1da:	3304      	adds	r3, #4
 800e1dc:	3415      	adds	r4, #21
 800e1de:	42a6      	cmp	r6, r4
 800e1e0:	bf38      	it	cc
 800e1e2:	2304      	movcc	r3, #4
 800e1e4:	441d      	add	r5, r3
 800e1e6:	4473      	add	r3, lr
 800e1e8:	469e      	mov	lr, r3
 800e1ea:	462e      	mov	r6, r5
 800e1ec:	4566      	cmp	r6, ip
 800e1ee:	d30e      	bcc.n	800e20e <__mdiff+0xea>
 800e1f0:	f10c 0203 	add.w	r2, ip, #3
 800e1f4:	1b52      	subs	r2, r2, r5
 800e1f6:	f022 0203 	bic.w	r2, r2, #3
 800e1fa:	3d03      	subs	r5, #3
 800e1fc:	45ac      	cmp	ip, r5
 800e1fe:	bf38      	it	cc
 800e200:	2200      	movcc	r2, #0
 800e202:	4413      	add	r3, r2
 800e204:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e208:	b17a      	cbz	r2, 800e22a <__mdiff+0x106>
 800e20a:	6107      	str	r7, [r0, #16]
 800e20c:	e7a4      	b.n	800e158 <__mdiff+0x34>
 800e20e:	f856 8b04 	ldr.w	r8, [r6], #4
 800e212:	fa11 f288 	uxtah	r2, r1, r8
 800e216:	1414      	asrs	r4, r2, #16
 800e218:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e21c:	b292      	uxth	r2, r2
 800e21e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e222:	f84e 2b04 	str.w	r2, [lr], #4
 800e226:	1421      	asrs	r1, r4, #16
 800e228:	e7e0      	b.n	800e1ec <__mdiff+0xc8>
 800e22a:	3f01      	subs	r7, #1
 800e22c:	e7ea      	b.n	800e204 <__mdiff+0xe0>
 800e22e:	bf00      	nop
 800e230:	08010efd 	.word	0x08010efd
 800e234:	08010f0e 	.word	0x08010f0e

0800e238 <__ulp>:
 800e238:	b082      	sub	sp, #8
 800e23a:	ed8d 0b00 	vstr	d0, [sp]
 800e23e:	9a01      	ldr	r2, [sp, #4]
 800e240:	4b0f      	ldr	r3, [pc, #60]	; (800e280 <__ulp+0x48>)
 800e242:	4013      	ands	r3, r2
 800e244:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800e248:	2b00      	cmp	r3, #0
 800e24a:	dc08      	bgt.n	800e25e <__ulp+0x26>
 800e24c:	425b      	negs	r3, r3
 800e24e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800e252:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e256:	da04      	bge.n	800e262 <__ulp+0x2a>
 800e258:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e25c:	4113      	asrs	r3, r2
 800e25e:	2200      	movs	r2, #0
 800e260:	e008      	b.n	800e274 <__ulp+0x3c>
 800e262:	f1a2 0314 	sub.w	r3, r2, #20
 800e266:	2b1e      	cmp	r3, #30
 800e268:	bfda      	itte	le
 800e26a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800e26e:	40da      	lsrle	r2, r3
 800e270:	2201      	movgt	r2, #1
 800e272:	2300      	movs	r3, #0
 800e274:	4619      	mov	r1, r3
 800e276:	4610      	mov	r0, r2
 800e278:	ec41 0b10 	vmov	d0, r0, r1
 800e27c:	b002      	add	sp, #8
 800e27e:	4770      	bx	lr
 800e280:	7ff00000 	.word	0x7ff00000

0800e284 <__b2d>:
 800e284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e288:	6906      	ldr	r6, [r0, #16]
 800e28a:	f100 0814 	add.w	r8, r0, #20
 800e28e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e292:	1f37      	subs	r7, r6, #4
 800e294:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e298:	4610      	mov	r0, r2
 800e29a:	f7ff fd53 	bl	800dd44 <__hi0bits>
 800e29e:	f1c0 0320 	rsb	r3, r0, #32
 800e2a2:	280a      	cmp	r0, #10
 800e2a4:	600b      	str	r3, [r1, #0]
 800e2a6:	491b      	ldr	r1, [pc, #108]	; (800e314 <__b2d+0x90>)
 800e2a8:	dc15      	bgt.n	800e2d6 <__b2d+0x52>
 800e2aa:	f1c0 0c0b 	rsb	ip, r0, #11
 800e2ae:	fa22 f30c 	lsr.w	r3, r2, ip
 800e2b2:	45b8      	cmp	r8, r7
 800e2b4:	ea43 0501 	orr.w	r5, r3, r1
 800e2b8:	bf34      	ite	cc
 800e2ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e2be:	2300      	movcs	r3, #0
 800e2c0:	3015      	adds	r0, #21
 800e2c2:	fa02 f000 	lsl.w	r0, r2, r0
 800e2c6:	fa23 f30c 	lsr.w	r3, r3, ip
 800e2ca:	4303      	orrs	r3, r0
 800e2cc:	461c      	mov	r4, r3
 800e2ce:	ec45 4b10 	vmov	d0, r4, r5
 800e2d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2d6:	45b8      	cmp	r8, r7
 800e2d8:	bf3a      	itte	cc
 800e2da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e2de:	f1a6 0708 	subcc.w	r7, r6, #8
 800e2e2:	2300      	movcs	r3, #0
 800e2e4:	380b      	subs	r0, #11
 800e2e6:	d012      	beq.n	800e30e <__b2d+0x8a>
 800e2e8:	f1c0 0120 	rsb	r1, r0, #32
 800e2ec:	fa23 f401 	lsr.w	r4, r3, r1
 800e2f0:	4082      	lsls	r2, r0
 800e2f2:	4322      	orrs	r2, r4
 800e2f4:	4547      	cmp	r7, r8
 800e2f6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800e2fa:	bf8c      	ite	hi
 800e2fc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e300:	2200      	movls	r2, #0
 800e302:	4083      	lsls	r3, r0
 800e304:	40ca      	lsrs	r2, r1
 800e306:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e30a:	4313      	orrs	r3, r2
 800e30c:	e7de      	b.n	800e2cc <__b2d+0x48>
 800e30e:	ea42 0501 	orr.w	r5, r2, r1
 800e312:	e7db      	b.n	800e2cc <__b2d+0x48>
 800e314:	3ff00000 	.word	0x3ff00000

0800e318 <__d2b>:
 800e318:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e31c:	460f      	mov	r7, r1
 800e31e:	2101      	movs	r1, #1
 800e320:	ec59 8b10 	vmov	r8, r9, d0
 800e324:	4616      	mov	r6, r2
 800e326:	f7ff fc1b 	bl	800db60 <_Balloc>
 800e32a:	4604      	mov	r4, r0
 800e32c:	b930      	cbnz	r0, 800e33c <__d2b+0x24>
 800e32e:	4602      	mov	r2, r0
 800e330:	4b24      	ldr	r3, [pc, #144]	; (800e3c4 <__d2b+0xac>)
 800e332:	4825      	ldr	r0, [pc, #148]	; (800e3c8 <__d2b+0xb0>)
 800e334:	f240 310f 	movw	r1, #783	; 0x30f
 800e338:	f001 f9ee 	bl	800f718 <__assert_func>
 800e33c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e340:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e344:	bb2d      	cbnz	r5, 800e392 <__d2b+0x7a>
 800e346:	9301      	str	r3, [sp, #4]
 800e348:	f1b8 0300 	subs.w	r3, r8, #0
 800e34c:	d026      	beq.n	800e39c <__d2b+0x84>
 800e34e:	4668      	mov	r0, sp
 800e350:	9300      	str	r3, [sp, #0]
 800e352:	f7ff fd17 	bl	800dd84 <__lo0bits>
 800e356:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e35a:	b1e8      	cbz	r0, 800e398 <__d2b+0x80>
 800e35c:	f1c0 0320 	rsb	r3, r0, #32
 800e360:	fa02 f303 	lsl.w	r3, r2, r3
 800e364:	430b      	orrs	r3, r1
 800e366:	40c2      	lsrs	r2, r0
 800e368:	6163      	str	r3, [r4, #20]
 800e36a:	9201      	str	r2, [sp, #4]
 800e36c:	9b01      	ldr	r3, [sp, #4]
 800e36e:	61a3      	str	r3, [r4, #24]
 800e370:	2b00      	cmp	r3, #0
 800e372:	bf14      	ite	ne
 800e374:	2202      	movne	r2, #2
 800e376:	2201      	moveq	r2, #1
 800e378:	6122      	str	r2, [r4, #16]
 800e37a:	b1bd      	cbz	r5, 800e3ac <__d2b+0x94>
 800e37c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e380:	4405      	add	r5, r0
 800e382:	603d      	str	r5, [r7, #0]
 800e384:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e388:	6030      	str	r0, [r6, #0]
 800e38a:	4620      	mov	r0, r4
 800e38c:	b003      	add	sp, #12
 800e38e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e392:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e396:	e7d6      	b.n	800e346 <__d2b+0x2e>
 800e398:	6161      	str	r1, [r4, #20]
 800e39a:	e7e7      	b.n	800e36c <__d2b+0x54>
 800e39c:	a801      	add	r0, sp, #4
 800e39e:	f7ff fcf1 	bl	800dd84 <__lo0bits>
 800e3a2:	9b01      	ldr	r3, [sp, #4]
 800e3a4:	6163      	str	r3, [r4, #20]
 800e3a6:	3020      	adds	r0, #32
 800e3a8:	2201      	movs	r2, #1
 800e3aa:	e7e5      	b.n	800e378 <__d2b+0x60>
 800e3ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e3b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e3b4:	6038      	str	r0, [r7, #0]
 800e3b6:	6918      	ldr	r0, [r3, #16]
 800e3b8:	f7ff fcc4 	bl	800dd44 <__hi0bits>
 800e3bc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e3c0:	e7e2      	b.n	800e388 <__d2b+0x70>
 800e3c2:	bf00      	nop
 800e3c4:	08010efd 	.word	0x08010efd
 800e3c8:	08010f0e 	.word	0x08010f0e

0800e3cc <__ratio>:
 800e3cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3d0:	4688      	mov	r8, r1
 800e3d2:	4669      	mov	r1, sp
 800e3d4:	4681      	mov	r9, r0
 800e3d6:	f7ff ff55 	bl	800e284 <__b2d>
 800e3da:	a901      	add	r1, sp, #4
 800e3dc:	4640      	mov	r0, r8
 800e3de:	ec55 4b10 	vmov	r4, r5, d0
 800e3e2:	ee10 aa10 	vmov	sl, s0
 800e3e6:	f7ff ff4d 	bl	800e284 <__b2d>
 800e3ea:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e3ee:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e3f2:	1ad2      	subs	r2, r2, r3
 800e3f4:	e9dd 3100 	ldrd	r3, r1, [sp]
 800e3f8:	1a5b      	subs	r3, r3, r1
 800e3fa:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800e3fe:	ec57 6b10 	vmov	r6, r7, d0
 800e402:	2b00      	cmp	r3, #0
 800e404:	bfd6      	itet	le
 800e406:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e40a:	462a      	movgt	r2, r5
 800e40c:	463a      	movle	r2, r7
 800e40e:	46ab      	mov	fp, r5
 800e410:	bfd6      	itet	le
 800e412:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800e416:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800e41a:	ee00 3a90 	vmovle	s1, r3
 800e41e:	ec4b ab17 	vmov	d7, sl, fp
 800e422:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800e426:	b003      	add	sp, #12
 800e428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e42c <__copybits>:
 800e42c:	3901      	subs	r1, #1
 800e42e:	b570      	push	{r4, r5, r6, lr}
 800e430:	1149      	asrs	r1, r1, #5
 800e432:	6914      	ldr	r4, [r2, #16]
 800e434:	3101      	adds	r1, #1
 800e436:	f102 0314 	add.w	r3, r2, #20
 800e43a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e43e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e442:	1f05      	subs	r5, r0, #4
 800e444:	42a3      	cmp	r3, r4
 800e446:	d30c      	bcc.n	800e462 <__copybits+0x36>
 800e448:	1aa3      	subs	r3, r4, r2
 800e44a:	3b11      	subs	r3, #17
 800e44c:	f023 0303 	bic.w	r3, r3, #3
 800e450:	3211      	adds	r2, #17
 800e452:	42a2      	cmp	r2, r4
 800e454:	bf88      	it	hi
 800e456:	2300      	movhi	r3, #0
 800e458:	4418      	add	r0, r3
 800e45a:	2300      	movs	r3, #0
 800e45c:	4288      	cmp	r0, r1
 800e45e:	d305      	bcc.n	800e46c <__copybits+0x40>
 800e460:	bd70      	pop	{r4, r5, r6, pc}
 800e462:	f853 6b04 	ldr.w	r6, [r3], #4
 800e466:	f845 6f04 	str.w	r6, [r5, #4]!
 800e46a:	e7eb      	b.n	800e444 <__copybits+0x18>
 800e46c:	f840 3b04 	str.w	r3, [r0], #4
 800e470:	e7f4      	b.n	800e45c <__copybits+0x30>

0800e472 <__any_on>:
 800e472:	f100 0214 	add.w	r2, r0, #20
 800e476:	6900      	ldr	r0, [r0, #16]
 800e478:	114b      	asrs	r3, r1, #5
 800e47a:	4298      	cmp	r0, r3
 800e47c:	b510      	push	{r4, lr}
 800e47e:	db11      	blt.n	800e4a4 <__any_on+0x32>
 800e480:	dd0a      	ble.n	800e498 <__any_on+0x26>
 800e482:	f011 011f 	ands.w	r1, r1, #31
 800e486:	d007      	beq.n	800e498 <__any_on+0x26>
 800e488:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e48c:	fa24 f001 	lsr.w	r0, r4, r1
 800e490:	fa00 f101 	lsl.w	r1, r0, r1
 800e494:	428c      	cmp	r4, r1
 800e496:	d10b      	bne.n	800e4b0 <__any_on+0x3e>
 800e498:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e49c:	4293      	cmp	r3, r2
 800e49e:	d803      	bhi.n	800e4a8 <__any_on+0x36>
 800e4a0:	2000      	movs	r0, #0
 800e4a2:	bd10      	pop	{r4, pc}
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	e7f7      	b.n	800e498 <__any_on+0x26>
 800e4a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e4ac:	2900      	cmp	r1, #0
 800e4ae:	d0f5      	beq.n	800e49c <__any_on+0x2a>
 800e4b0:	2001      	movs	r0, #1
 800e4b2:	e7f6      	b.n	800e4a2 <__any_on+0x30>

0800e4b4 <sulp>:
 800e4b4:	b570      	push	{r4, r5, r6, lr}
 800e4b6:	4604      	mov	r4, r0
 800e4b8:	460d      	mov	r5, r1
 800e4ba:	4616      	mov	r6, r2
 800e4bc:	ec45 4b10 	vmov	d0, r4, r5
 800e4c0:	f7ff feba 	bl	800e238 <__ulp>
 800e4c4:	b17e      	cbz	r6, 800e4e6 <sulp+0x32>
 800e4c6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e4ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	dd09      	ble.n	800e4e6 <sulp+0x32>
 800e4d2:	051b      	lsls	r3, r3, #20
 800e4d4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800e4d8:	2000      	movs	r0, #0
 800e4da:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800e4de:	ec41 0b17 	vmov	d7, r0, r1
 800e4e2:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e4e6:	bd70      	pop	{r4, r5, r6, pc}

0800e4e8 <_strtod_l>:
 800e4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4ec:	ed2d 8b0e 	vpush	{d8-d14}
 800e4f0:	b097      	sub	sp, #92	; 0x5c
 800e4f2:	4604      	mov	r4, r0
 800e4f4:	920d      	str	r2, [sp, #52]	; 0x34
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	9212      	str	r2, [sp, #72]	; 0x48
 800e4fa:	468a      	mov	sl, r1
 800e4fc:	f04f 0800 	mov.w	r8, #0
 800e500:	f04f 0900 	mov.w	r9, #0
 800e504:	460a      	mov	r2, r1
 800e506:	9211      	str	r2, [sp, #68]	; 0x44
 800e508:	7811      	ldrb	r1, [r2, #0]
 800e50a:	292b      	cmp	r1, #43	; 0x2b
 800e50c:	d04c      	beq.n	800e5a8 <_strtod_l+0xc0>
 800e50e:	d839      	bhi.n	800e584 <_strtod_l+0x9c>
 800e510:	290d      	cmp	r1, #13
 800e512:	d833      	bhi.n	800e57c <_strtod_l+0x94>
 800e514:	2908      	cmp	r1, #8
 800e516:	d833      	bhi.n	800e580 <_strtod_l+0x98>
 800e518:	2900      	cmp	r1, #0
 800e51a:	d03c      	beq.n	800e596 <_strtod_l+0xae>
 800e51c:	2200      	movs	r2, #0
 800e51e:	9208      	str	r2, [sp, #32]
 800e520:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800e522:	7832      	ldrb	r2, [r6, #0]
 800e524:	2a30      	cmp	r2, #48	; 0x30
 800e526:	f040 80b8 	bne.w	800e69a <_strtod_l+0x1b2>
 800e52a:	7872      	ldrb	r2, [r6, #1]
 800e52c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800e530:	2a58      	cmp	r2, #88	; 0x58
 800e532:	d170      	bne.n	800e616 <_strtod_l+0x12e>
 800e534:	9302      	str	r3, [sp, #8]
 800e536:	9b08      	ldr	r3, [sp, #32]
 800e538:	9301      	str	r3, [sp, #4]
 800e53a:	ab12      	add	r3, sp, #72	; 0x48
 800e53c:	9300      	str	r3, [sp, #0]
 800e53e:	4a91      	ldr	r2, [pc, #580]	; (800e784 <_strtod_l+0x29c>)
 800e540:	ab13      	add	r3, sp, #76	; 0x4c
 800e542:	a911      	add	r1, sp, #68	; 0x44
 800e544:	4620      	mov	r0, r4
 800e546:	f001 f983 	bl	800f850 <__gethex>
 800e54a:	f010 070f 	ands.w	r7, r0, #15
 800e54e:	4605      	mov	r5, r0
 800e550:	d005      	beq.n	800e55e <_strtod_l+0x76>
 800e552:	2f06      	cmp	r7, #6
 800e554:	d12a      	bne.n	800e5ac <_strtod_l+0xc4>
 800e556:	3601      	adds	r6, #1
 800e558:	2300      	movs	r3, #0
 800e55a:	9611      	str	r6, [sp, #68]	; 0x44
 800e55c:	9308      	str	r3, [sp, #32]
 800e55e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e560:	2b00      	cmp	r3, #0
 800e562:	f040 8555 	bne.w	800f010 <_strtod_l+0xb28>
 800e566:	9b08      	ldr	r3, [sp, #32]
 800e568:	ec49 8b10 	vmov	d0, r8, r9
 800e56c:	b1cb      	cbz	r3, 800e5a2 <_strtod_l+0xba>
 800e56e:	eeb1 0b40 	vneg.f64	d0, d0
 800e572:	b017      	add	sp, #92	; 0x5c
 800e574:	ecbd 8b0e 	vpop	{d8-d14}
 800e578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e57c:	2920      	cmp	r1, #32
 800e57e:	d1cd      	bne.n	800e51c <_strtod_l+0x34>
 800e580:	3201      	adds	r2, #1
 800e582:	e7c0      	b.n	800e506 <_strtod_l+0x1e>
 800e584:	292d      	cmp	r1, #45	; 0x2d
 800e586:	d1c9      	bne.n	800e51c <_strtod_l+0x34>
 800e588:	2101      	movs	r1, #1
 800e58a:	9108      	str	r1, [sp, #32]
 800e58c:	1c51      	adds	r1, r2, #1
 800e58e:	9111      	str	r1, [sp, #68]	; 0x44
 800e590:	7852      	ldrb	r2, [r2, #1]
 800e592:	2a00      	cmp	r2, #0
 800e594:	d1c4      	bne.n	800e520 <_strtod_l+0x38>
 800e596:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e598:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	f040 8535 	bne.w	800f00c <_strtod_l+0xb24>
 800e5a2:	ec49 8b10 	vmov	d0, r8, r9
 800e5a6:	e7e4      	b.n	800e572 <_strtod_l+0x8a>
 800e5a8:	2100      	movs	r1, #0
 800e5aa:	e7ee      	b.n	800e58a <_strtod_l+0xa2>
 800e5ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e5ae:	b13a      	cbz	r2, 800e5c0 <_strtod_l+0xd8>
 800e5b0:	2135      	movs	r1, #53	; 0x35
 800e5b2:	a814      	add	r0, sp, #80	; 0x50
 800e5b4:	f7ff ff3a 	bl	800e42c <__copybits>
 800e5b8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e5ba:	4620      	mov	r0, r4
 800e5bc:	f7ff fb10 	bl	800dbe0 <_Bfree>
 800e5c0:	1e7b      	subs	r3, r7, #1
 800e5c2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e5c4:	2b04      	cmp	r3, #4
 800e5c6:	d806      	bhi.n	800e5d6 <_strtod_l+0xee>
 800e5c8:	e8df f003 	tbb	[pc, r3]
 800e5cc:	201d0314 	.word	0x201d0314
 800e5d0:	14          	.byte	0x14
 800e5d1:	00          	.byte	0x00
 800e5d2:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800e5d6:	05eb      	lsls	r3, r5, #23
 800e5d8:	bf48      	it	mi
 800e5da:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800e5de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e5e2:	0d1b      	lsrs	r3, r3, #20
 800e5e4:	051b      	lsls	r3, r3, #20
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d1b9      	bne.n	800e55e <_strtod_l+0x76>
 800e5ea:	f7fe fb91 	bl	800cd10 <__errno>
 800e5ee:	2322      	movs	r3, #34	; 0x22
 800e5f0:	6003      	str	r3, [r0, #0]
 800e5f2:	e7b4      	b.n	800e55e <_strtod_l+0x76>
 800e5f4:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800e5f8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e5fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e600:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800e604:	e7e7      	b.n	800e5d6 <_strtod_l+0xee>
 800e606:	f8df 9184 	ldr.w	r9, [pc, #388]	; 800e78c <_strtod_l+0x2a4>
 800e60a:	e7e4      	b.n	800e5d6 <_strtod_l+0xee>
 800e60c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800e610:	f04f 38ff 	mov.w	r8, #4294967295
 800e614:	e7df      	b.n	800e5d6 <_strtod_l+0xee>
 800e616:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e618:	1c5a      	adds	r2, r3, #1
 800e61a:	9211      	str	r2, [sp, #68]	; 0x44
 800e61c:	785b      	ldrb	r3, [r3, #1]
 800e61e:	2b30      	cmp	r3, #48	; 0x30
 800e620:	d0f9      	beq.n	800e616 <_strtod_l+0x12e>
 800e622:	2b00      	cmp	r3, #0
 800e624:	d09b      	beq.n	800e55e <_strtod_l+0x76>
 800e626:	2301      	movs	r3, #1
 800e628:	9306      	str	r3, [sp, #24]
 800e62a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e62c:	9309      	str	r3, [sp, #36]	; 0x24
 800e62e:	2300      	movs	r3, #0
 800e630:	9305      	str	r3, [sp, #20]
 800e632:	9307      	str	r3, [sp, #28]
 800e634:	461e      	mov	r6, r3
 800e636:	220a      	movs	r2, #10
 800e638:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e63a:	7805      	ldrb	r5, [r0, #0]
 800e63c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800e640:	b2d9      	uxtb	r1, r3
 800e642:	2909      	cmp	r1, #9
 800e644:	d92b      	bls.n	800e69e <_strtod_l+0x1b6>
 800e646:	4950      	ldr	r1, [pc, #320]	; (800e788 <_strtod_l+0x2a0>)
 800e648:	2201      	movs	r2, #1
 800e64a:	f001 f80b 	bl	800f664 <strncmp>
 800e64e:	2800      	cmp	r0, #0
 800e650:	d035      	beq.n	800e6be <_strtod_l+0x1d6>
 800e652:	2000      	movs	r0, #0
 800e654:	462a      	mov	r2, r5
 800e656:	4633      	mov	r3, r6
 800e658:	4683      	mov	fp, r0
 800e65a:	4601      	mov	r1, r0
 800e65c:	2a65      	cmp	r2, #101	; 0x65
 800e65e:	d001      	beq.n	800e664 <_strtod_l+0x17c>
 800e660:	2a45      	cmp	r2, #69	; 0x45
 800e662:	d118      	bne.n	800e696 <_strtod_l+0x1ae>
 800e664:	b91b      	cbnz	r3, 800e66e <_strtod_l+0x186>
 800e666:	9b06      	ldr	r3, [sp, #24]
 800e668:	4303      	orrs	r3, r0
 800e66a:	d094      	beq.n	800e596 <_strtod_l+0xae>
 800e66c:	2300      	movs	r3, #0
 800e66e:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800e672:	f10a 0201 	add.w	r2, sl, #1
 800e676:	9211      	str	r2, [sp, #68]	; 0x44
 800e678:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800e67c:	2a2b      	cmp	r2, #43	; 0x2b
 800e67e:	d075      	beq.n	800e76c <_strtod_l+0x284>
 800e680:	2a2d      	cmp	r2, #45	; 0x2d
 800e682:	d07b      	beq.n	800e77c <_strtod_l+0x294>
 800e684:	f04f 0e00 	mov.w	lr, #0
 800e688:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800e68c:	2d09      	cmp	r5, #9
 800e68e:	f240 8083 	bls.w	800e798 <_strtod_l+0x2b0>
 800e692:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800e696:	2500      	movs	r5, #0
 800e698:	e09e      	b.n	800e7d8 <_strtod_l+0x2f0>
 800e69a:	2300      	movs	r3, #0
 800e69c:	e7c4      	b.n	800e628 <_strtod_l+0x140>
 800e69e:	2e08      	cmp	r6, #8
 800e6a0:	bfd5      	itete	le
 800e6a2:	9907      	ldrle	r1, [sp, #28]
 800e6a4:	9905      	ldrgt	r1, [sp, #20]
 800e6a6:	fb02 3301 	mlale	r3, r2, r1, r3
 800e6aa:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e6ae:	f100 0001 	add.w	r0, r0, #1
 800e6b2:	bfd4      	ite	le
 800e6b4:	9307      	strle	r3, [sp, #28]
 800e6b6:	9305      	strgt	r3, [sp, #20]
 800e6b8:	3601      	adds	r6, #1
 800e6ba:	9011      	str	r0, [sp, #68]	; 0x44
 800e6bc:	e7bc      	b.n	800e638 <_strtod_l+0x150>
 800e6be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e6c0:	1c5a      	adds	r2, r3, #1
 800e6c2:	9211      	str	r2, [sp, #68]	; 0x44
 800e6c4:	785a      	ldrb	r2, [r3, #1]
 800e6c6:	b3ae      	cbz	r6, 800e734 <_strtod_l+0x24c>
 800e6c8:	4683      	mov	fp, r0
 800e6ca:	4633      	mov	r3, r6
 800e6cc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800e6d0:	2909      	cmp	r1, #9
 800e6d2:	d912      	bls.n	800e6fa <_strtod_l+0x212>
 800e6d4:	2101      	movs	r1, #1
 800e6d6:	e7c1      	b.n	800e65c <_strtod_l+0x174>
 800e6d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e6da:	1c5a      	adds	r2, r3, #1
 800e6dc:	9211      	str	r2, [sp, #68]	; 0x44
 800e6de:	785a      	ldrb	r2, [r3, #1]
 800e6e0:	3001      	adds	r0, #1
 800e6e2:	2a30      	cmp	r2, #48	; 0x30
 800e6e4:	d0f8      	beq.n	800e6d8 <_strtod_l+0x1f0>
 800e6e6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800e6ea:	2b08      	cmp	r3, #8
 800e6ec:	f200 8495 	bhi.w	800f01a <_strtod_l+0xb32>
 800e6f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e6f2:	9309      	str	r3, [sp, #36]	; 0x24
 800e6f4:	4683      	mov	fp, r0
 800e6f6:	2000      	movs	r0, #0
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	3a30      	subs	r2, #48	; 0x30
 800e6fc:	f100 0101 	add.w	r1, r0, #1
 800e700:	d012      	beq.n	800e728 <_strtod_l+0x240>
 800e702:	448b      	add	fp, r1
 800e704:	eb00 0c03 	add.w	ip, r0, r3
 800e708:	4619      	mov	r1, r3
 800e70a:	250a      	movs	r5, #10
 800e70c:	4561      	cmp	r1, ip
 800e70e:	d113      	bne.n	800e738 <_strtod_l+0x250>
 800e710:	1819      	adds	r1, r3, r0
 800e712:	2908      	cmp	r1, #8
 800e714:	f103 0301 	add.w	r3, r3, #1
 800e718:	4403      	add	r3, r0
 800e71a:	dc1b      	bgt.n	800e754 <_strtod_l+0x26c>
 800e71c:	9807      	ldr	r0, [sp, #28]
 800e71e:	210a      	movs	r1, #10
 800e720:	fb01 2200 	mla	r2, r1, r0, r2
 800e724:	9207      	str	r2, [sp, #28]
 800e726:	2100      	movs	r1, #0
 800e728:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e72a:	1c50      	adds	r0, r2, #1
 800e72c:	9011      	str	r0, [sp, #68]	; 0x44
 800e72e:	7852      	ldrb	r2, [r2, #1]
 800e730:	4608      	mov	r0, r1
 800e732:	e7cb      	b.n	800e6cc <_strtod_l+0x1e4>
 800e734:	4630      	mov	r0, r6
 800e736:	e7d4      	b.n	800e6e2 <_strtod_l+0x1fa>
 800e738:	2908      	cmp	r1, #8
 800e73a:	f101 0101 	add.w	r1, r1, #1
 800e73e:	dc03      	bgt.n	800e748 <_strtod_l+0x260>
 800e740:	9f07      	ldr	r7, [sp, #28]
 800e742:	436f      	muls	r7, r5
 800e744:	9707      	str	r7, [sp, #28]
 800e746:	e7e1      	b.n	800e70c <_strtod_l+0x224>
 800e748:	2910      	cmp	r1, #16
 800e74a:	bfde      	ittt	le
 800e74c:	9f05      	ldrle	r7, [sp, #20]
 800e74e:	436f      	mulle	r7, r5
 800e750:	9705      	strle	r7, [sp, #20]
 800e752:	e7db      	b.n	800e70c <_strtod_l+0x224>
 800e754:	2b10      	cmp	r3, #16
 800e756:	bfdf      	itttt	le
 800e758:	9805      	ldrle	r0, [sp, #20]
 800e75a:	210a      	movle	r1, #10
 800e75c:	fb01 2200 	mlale	r2, r1, r0, r2
 800e760:	9205      	strle	r2, [sp, #20]
 800e762:	e7e0      	b.n	800e726 <_strtod_l+0x23e>
 800e764:	f04f 0b00 	mov.w	fp, #0
 800e768:	2101      	movs	r1, #1
 800e76a:	e77c      	b.n	800e666 <_strtod_l+0x17e>
 800e76c:	f04f 0e00 	mov.w	lr, #0
 800e770:	f10a 0202 	add.w	r2, sl, #2
 800e774:	9211      	str	r2, [sp, #68]	; 0x44
 800e776:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800e77a:	e785      	b.n	800e688 <_strtod_l+0x1a0>
 800e77c:	f04f 0e01 	mov.w	lr, #1
 800e780:	e7f6      	b.n	800e770 <_strtod_l+0x288>
 800e782:	bf00      	nop
 800e784:	08011068 	.word	0x08011068
 800e788:	08011064 	.word	0x08011064
 800e78c:	7ff00000 	.word	0x7ff00000
 800e790:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e792:	1c55      	adds	r5, r2, #1
 800e794:	9511      	str	r5, [sp, #68]	; 0x44
 800e796:	7852      	ldrb	r2, [r2, #1]
 800e798:	2a30      	cmp	r2, #48	; 0x30
 800e79a:	d0f9      	beq.n	800e790 <_strtod_l+0x2a8>
 800e79c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800e7a0:	2d08      	cmp	r5, #8
 800e7a2:	f63f af78 	bhi.w	800e696 <_strtod_l+0x1ae>
 800e7a6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800e7aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e7ac:	920a      	str	r2, [sp, #40]	; 0x28
 800e7ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e7b0:	1c55      	adds	r5, r2, #1
 800e7b2:	9511      	str	r5, [sp, #68]	; 0x44
 800e7b4:	7852      	ldrb	r2, [r2, #1]
 800e7b6:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800e7ba:	2f09      	cmp	r7, #9
 800e7bc:	d937      	bls.n	800e82e <_strtod_l+0x346>
 800e7be:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800e7c0:	1bed      	subs	r5, r5, r7
 800e7c2:	2d08      	cmp	r5, #8
 800e7c4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800e7c8:	dc02      	bgt.n	800e7d0 <_strtod_l+0x2e8>
 800e7ca:	4565      	cmp	r5, ip
 800e7cc:	bfa8      	it	ge
 800e7ce:	4665      	movge	r5, ip
 800e7d0:	f1be 0f00 	cmp.w	lr, #0
 800e7d4:	d000      	beq.n	800e7d8 <_strtod_l+0x2f0>
 800e7d6:	426d      	negs	r5, r5
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d14d      	bne.n	800e878 <_strtod_l+0x390>
 800e7dc:	9b06      	ldr	r3, [sp, #24]
 800e7de:	4303      	orrs	r3, r0
 800e7e0:	f47f aebd 	bne.w	800e55e <_strtod_l+0x76>
 800e7e4:	2900      	cmp	r1, #0
 800e7e6:	f47f aed6 	bne.w	800e596 <_strtod_l+0xae>
 800e7ea:	2a69      	cmp	r2, #105	; 0x69
 800e7ec:	d027      	beq.n	800e83e <_strtod_l+0x356>
 800e7ee:	dc24      	bgt.n	800e83a <_strtod_l+0x352>
 800e7f0:	2a49      	cmp	r2, #73	; 0x49
 800e7f2:	d024      	beq.n	800e83e <_strtod_l+0x356>
 800e7f4:	2a4e      	cmp	r2, #78	; 0x4e
 800e7f6:	f47f aece 	bne.w	800e596 <_strtod_l+0xae>
 800e7fa:	4995      	ldr	r1, [pc, #596]	; (800ea50 <_strtod_l+0x568>)
 800e7fc:	a811      	add	r0, sp, #68	; 0x44
 800e7fe:	f001 fa67 	bl	800fcd0 <__match>
 800e802:	2800      	cmp	r0, #0
 800e804:	f43f aec7 	beq.w	800e596 <_strtod_l+0xae>
 800e808:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e80a:	781b      	ldrb	r3, [r3, #0]
 800e80c:	2b28      	cmp	r3, #40	; 0x28
 800e80e:	d12d      	bne.n	800e86c <_strtod_l+0x384>
 800e810:	4990      	ldr	r1, [pc, #576]	; (800ea54 <_strtod_l+0x56c>)
 800e812:	aa14      	add	r2, sp, #80	; 0x50
 800e814:	a811      	add	r0, sp, #68	; 0x44
 800e816:	f001 fa6f 	bl	800fcf8 <__hexnan>
 800e81a:	2805      	cmp	r0, #5
 800e81c:	d126      	bne.n	800e86c <_strtod_l+0x384>
 800e81e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e820:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800e824:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800e828:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800e82c:	e697      	b.n	800e55e <_strtod_l+0x76>
 800e82e:	250a      	movs	r5, #10
 800e830:	fb05 2c0c 	mla	ip, r5, ip, r2
 800e834:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800e838:	e7b9      	b.n	800e7ae <_strtod_l+0x2c6>
 800e83a:	2a6e      	cmp	r2, #110	; 0x6e
 800e83c:	e7db      	b.n	800e7f6 <_strtod_l+0x30e>
 800e83e:	4986      	ldr	r1, [pc, #536]	; (800ea58 <_strtod_l+0x570>)
 800e840:	a811      	add	r0, sp, #68	; 0x44
 800e842:	f001 fa45 	bl	800fcd0 <__match>
 800e846:	2800      	cmp	r0, #0
 800e848:	f43f aea5 	beq.w	800e596 <_strtod_l+0xae>
 800e84c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e84e:	4983      	ldr	r1, [pc, #524]	; (800ea5c <_strtod_l+0x574>)
 800e850:	3b01      	subs	r3, #1
 800e852:	a811      	add	r0, sp, #68	; 0x44
 800e854:	9311      	str	r3, [sp, #68]	; 0x44
 800e856:	f001 fa3b 	bl	800fcd0 <__match>
 800e85a:	b910      	cbnz	r0, 800e862 <_strtod_l+0x37a>
 800e85c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e85e:	3301      	adds	r3, #1
 800e860:	9311      	str	r3, [sp, #68]	; 0x44
 800e862:	f8df 920c 	ldr.w	r9, [pc, #524]	; 800ea70 <_strtod_l+0x588>
 800e866:	f04f 0800 	mov.w	r8, #0
 800e86a:	e678      	b.n	800e55e <_strtod_l+0x76>
 800e86c:	487c      	ldr	r0, [pc, #496]	; (800ea60 <_strtod_l+0x578>)
 800e86e:	f000 ff4b 	bl	800f708 <nan>
 800e872:	ec59 8b10 	vmov	r8, r9, d0
 800e876:	e672      	b.n	800e55e <_strtod_l+0x76>
 800e878:	eddd 7a07 	vldr	s15, [sp, #28]
 800e87c:	eba5 020b 	sub.w	r2, r5, fp
 800e880:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e884:	2e00      	cmp	r6, #0
 800e886:	bf08      	it	eq
 800e888:	461e      	moveq	r6, r3
 800e88a:	2b10      	cmp	r3, #16
 800e88c:	9206      	str	r2, [sp, #24]
 800e88e:	461a      	mov	r2, r3
 800e890:	bfa8      	it	ge
 800e892:	2210      	movge	r2, #16
 800e894:	2b09      	cmp	r3, #9
 800e896:	ec59 8b17 	vmov	r8, r9, d7
 800e89a:	dd0c      	ble.n	800e8b6 <_strtod_l+0x3ce>
 800e89c:	4971      	ldr	r1, [pc, #452]	; (800ea64 <_strtod_l+0x57c>)
 800e89e:	eddd 6a05 	vldr	s13, [sp, #20]
 800e8a2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800e8a6:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800e8aa:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800e8ae:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e8b2:	ec59 8b16 	vmov	r8, r9, d6
 800e8b6:	2b0f      	cmp	r3, #15
 800e8b8:	dc37      	bgt.n	800e92a <_strtod_l+0x442>
 800e8ba:	9906      	ldr	r1, [sp, #24]
 800e8bc:	2900      	cmp	r1, #0
 800e8be:	f43f ae4e 	beq.w	800e55e <_strtod_l+0x76>
 800e8c2:	dd23      	ble.n	800e90c <_strtod_l+0x424>
 800e8c4:	2916      	cmp	r1, #22
 800e8c6:	dc0b      	bgt.n	800e8e0 <_strtod_l+0x3f8>
 800e8c8:	4b66      	ldr	r3, [pc, #408]	; (800ea64 <_strtod_l+0x57c>)
 800e8ca:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e8ce:	ed93 7b00 	vldr	d7, [r3]
 800e8d2:	ec49 8b16 	vmov	d6, r8, r9
 800e8d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e8da:	ec59 8b17 	vmov	r8, r9, d7
 800e8de:	e63e      	b.n	800e55e <_strtod_l+0x76>
 800e8e0:	9806      	ldr	r0, [sp, #24]
 800e8e2:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800e8e6:	4281      	cmp	r1, r0
 800e8e8:	db1f      	blt.n	800e92a <_strtod_l+0x442>
 800e8ea:	4a5e      	ldr	r2, [pc, #376]	; (800ea64 <_strtod_l+0x57c>)
 800e8ec:	f1c3 030f 	rsb	r3, r3, #15
 800e8f0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800e8f4:	ed91 7b00 	vldr	d7, [r1]
 800e8f8:	ec49 8b16 	vmov	d6, r8, r9
 800e8fc:	1ac3      	subs	r3, r0, r3
 800e8fe:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e902:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e906:	ed92 6b00 	vldr	d6, [r2]
 800e90a:	e7e4      	b.n	800e8d6 <_strtod_l+0x3ee>
 800e90c:	9906      	ldr	r1, [sp, #24]
 800e90e:	3116      	adds	r1, #22
 800e910:	db0b      	blt.n	800e92a <_strtod_l+0x442>
 800e912:	4b54      	ldr	r3, [pc, #336]	; (800ea64 <_strtod_l+0x57c>)
 800e914:	ebab 0505 	sub.w	r5, fp, r5
 800e918:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e91c:	ed95 7b00 	vldr	d7, [r5]
 800e920:	ec49 8b16 	vmov	d6, r8, r9
 800e924:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e928:	e7d7      	b.n	800e8da <_strtod_l+0x3f2>
 800e92a:	9906      	ldr	r1, [sp, #24]
 800e92c:	1a9a      	subs	r2, r3, r2
 800e92e:	440a      	add	r2, r1
 800e930:	2a00      	cmp	r2, #0
 800e932:	dd6e      	ble.n	800ea12 <_strtod_l+0x52a>
 800e934:	f012 000f 	ands.w	r0, r2, #15
 800e938:	d00a      	beq.n	800e950 <_strtod_l+0x468>
 800e93a:	494a      	ldr	r1, [pc, #296]	; (800ea64 <_strtod_l+0x57c>)
 800e93c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e940:	ed91 7b00 	vldr	d7, [r1]
 800e944:	ec49 8b16 	vmov	d6, r8, r9
 800e948:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e94c:	ec59 8b17 	vmov	r8, r9, d7
 800e950:	f032 020f 	bics.w	r2, r2, #15
 800e954:	d04e      	beq.n	800e9f4 <_strtod_l+0x50c>
 800e956:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800e95a:	dd22      	ble.n	800e9a2 <_strtod_l+0x4ba>
 800e95c:	2500      	movs	r5, #0
 800e95e:	462e      	mov	r6, r5
 800e960:	9507      	str	r5, [sp, #28]
 800e962:	462f      	mov	r7, r5
 800e964:	2322      	movs	r3, #34	; 0x22
 800e966:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800ea70 <_strtod_l+0x588>
 800e96a:	6023      	str	r3, [r4, #0]
 800e96c:	f04f 0800 	mov.w	r8, #0
 800e970:	9b07      	ldr	r3, [sp, #28]
 800e972:	2b00      	cmp	r3, #0
 800e974:	f43f adf3 	beq.w	800e55e <_strtod_l+0x76>
 800e978:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e97a:	4620      	mov	r0, r4
 800e97c:	f7ff f930 	bl	800dbe0 <_Bfree>
 800e980:	4639      	mov	r1, r7
 800e982:	4620      	mov	r0, r4
 800e984:	f7ff f92c 	bl	800dbe0 <_Bfree>
 800e988:	4631      	mov	r1, r6
 800e98a:	4620      	mov	r0, r4
 800e98c:	f7ff f928 	bl	800dbe0 <_Bfree>
 800e990:	9907      	ldr	r1, [sp, #28]
 800e992:	4620      	mov	r0, r4
 800e994:	f7ff f924 	bl	800dbe0 <_Bfree>
 800e998:	4629      	mov	r1, r5
 800e99a:	4620      	mov	r0, r4
 800e99c:	f7ff f920 	bl	800dbe0 <_Bfree>
 800e9a0:	e5dd      	b.n	800e55e <_strtod_l+0x76>
 800e9a2:	2000      	movs	r0, #0
 800e9a4:	ec49 8b17 	vmov	d7, r8, r9
 800e9a8:	4f2f      	ldr	r7, [pc, #188]	; (800ea68 <_strtod_l+0x580>)
 800e9aa:	1112      	asrs	r2, r2, #4
 800e9ac:	4601      	mov	r1, r0
 800e9ae:	2a01      	cmp	r2, #1
 800e9b0:	dc23      	bgt.n	800e9fa <_strtod_l+0x512>
 800e9b2:	b108      	cbz	r0, 800e9b8 <_strtod_l+0x4d0>
 800e9b4:	ec59 8b17 	vmov	r8, r9, d7
 800e9b8:	4a2b      	ldr	r2, [pc, #172]	; (800ea68 <_strtod_l+0x580>)
 800e9ba:	482c      	ldr	r0, [pc, #176]	; (800ea6c <_strtod_l+0x584>)
 800e9bc:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e9c0:	ed92 7b00 	vldr	d7, [r2]
 800e9c4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800e9c8:	ec49 8b16 	vmov	d6, r8, r9
 800e9cc:	4a28      	ldr	r2, [pc, #160]	; (800ea70 <_strtod_l+0x588>)
 800e9ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e9d2:	ee17 1a90 	vmov	r1, s15
 800e9d6:	400a      	ands	r2, r1
 800e9d8:	4282      	cmp	r2, r0
 800e9da:	ec59 8b17 	vmov	r8, r9, d7
 800e9de:	d8bd      	bhi.n	800e95c <_strtod_l+0x474>
 800e9e0:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800e9e4:	4282      	cmp	r2, r0
 800e9e6:	bf86      	itte	hi
 800e9e8:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 800ea74 <_strtod_l+0x58c>
 800e9ec:	f04f 38ff 	movhi.w	r8, #4294967295
 800e9f0:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	9205      	str	r2, [sp, #20]
 800e9f8:	e076      	b.n	800eae8 <_strtod_l+0x600>
 800e9fa:	f012 0f01 	tst.w	r2, #1
 800e9fe:	d004      	beq.n	800ea0a <_strtod_l+0x522>
 800ea00:	ed97 6b00 	vldr	d6, [r7]
 800ea04:	2001      	movs	r0, #1
 800ea06:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ea0a:	3101      	adds	r1, #1
 800ea0c:	1052      	asrs	r2, r2, #1
 800ea0e:	3708      	adds	r7, #8
 800ea10:	e7cd      	b.n	800e9ae <_strtod_l+0x4c6>
 800ea12:	d0ef      	beq.n	800e9f4 <_strtod_l+0x50c>
 800ea14:	4252      	negs	r2, r2
 800ea16:	f012 000f 	ands.w	r0, r2, #15
 800ea1a:	d00a      	beq.n	800ea32 <_strtod_l+0x54a>
 800ea1c:	4911      	ldr	r1, [pc, #68]	; (800ea64 <_strtod_l+0x57c>)
 800ea1e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800ea22:	ed91 7b00 	vldr	d7, [r1]
 800ea26:	ec49 8b16 	vmov	d6, r8, r9
 800ea2a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ea2e:	ec59 8b17 	vmov	r8, r9, d7
 800ea32:	1112      	asrs	r2, r2, #4
 800ea34:	d0de      	beq.n	800e9f4 <_strtod_l+0x50c>
 800ea36:	2a1f      	cmp	r2, #31
 800ea38:	dd1e      	ble.n	800ea78 <_strtod_l+0x590>
 800ea3a:	2500      	movs	r5, #0
 800ea3c:	462e      	mov	r6, r5
 800ea3e:	9507      	str	r5, [sp, #28]
 800ea40:	462f      	mov	r7, r5
 800ea42:	2322      	movs	r3, #34	; 0x22
 800ea44:	f04f 0800 	mov.w	r8, #0
 800ea48:	f04f 0900 	mov.w	r9, #0
 800ea4c:	6023      	str	r3, [r4, #0]
 800ea4e:	e78f      	b.n	800e970 <_strtod_l+0x488>
 800ea50:	08010e55 	.word	0x08010e55
 800ea54:	0801107c 	.word	0x0801107c
 800ea58:	08010e4d 	.word	0x08010e4d
 800ea5c:	08010e84 	.word	0x08010e84
 800ea60:	0801120d 	.word	0x0801120d
 800ea64:	08010f90 	.word	0x08010f90
 800ea68:	08010f68 	.word	0x08010f68
 800ea6c:	7ca00000 	.word	0x7ca00000
 800ea70:	7ff00000 	.word	0x7ff00000
 800ea74:	7fefffff 	.word	0x7fefffff
 800ea78:	f012 0110 	ands.w	r1, r2, #16
 800ea7c:	bf18      	it	ne
 800ea7e:	216a      	movne	r1, #106	; 0x6a
 800ea80:	9105      	str	r1, [sp, #20]
 800ea82:	ec49 8b17 	vmov	d7, r8, r9
 800ea86:	49be      	ldr	r1, [pc, #760]	; (800ed80 <_strtod_l+0x898>)
 800ea88:	2000      	movs	r0, #0
 800ea8a:	07d7      	lsls	r7, r2, #31
 800ea8c:	d504      	bpl.n	800ea98 <_strtod_l+0x5b0>
 800ea8e:	ed91 6b00 	vldr	d6, [r1]
 800ea92:	2001      	movs	r0, #1
 800ea94:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ea98:	1052      	asrs	r2, r2, #1
 800ea9a:	f101 0108 	add.w	r1, r1, #8
 800ea9e:	d1f4      	bne.n	800ea8a <_strtod_l+0x5a2>
 800eaa0:	b108      	cbz	r0, 800eaa6 <_strtod_l+0x5be>
 800eaa2:	ec59 8b17 	vmov	r8, r9, d7
 800eaa6:	9a05      	ldr	r2, [sp, #20]
 800eaa8:	b1ba      	cbz	r2, 800eada <_strtod_l+0x5f2>
 800eaaa:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800eaae:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800eab2:	2a00      	cmp	r2, #0
 800eab4:	4648      	mov	r0, r9
 800eab6:	dd10      	ble.n	800eada <_strtod_l+0x5f2>
 800eab8:	2a1f      	cmp	r2, #31
 800eaba:	f340 812c 	ble.w	800ed16 <_strtod_l+0x82e>
 800eabe:	2a34      	cmp	r2, #52	; 0x34
 800eac0:	bfde      	ittt	le
 800eac2:	f04f 32ff 	movle.w	r2, #4294967295
 800eac6:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800eaca:	408a      	lslle	r2, r1
 800eacc:	f04f 0800 	mov.w	r8, #0
 800ead0:	bfcc      	ite	gt
 800ead2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800ead6:	ea02 0900 	andle.w	r9, r2, r0
 800eada:	ec49 8b17 	vmov	d7, r8, r9
 800eade:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800eae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eae6:	d0a8      	beq.n	800ea3a <_strtod_l+0x552>
 800eae8:	9a07      	ldr	r2, [sp, #28]
 800eaea:	9200      	str	r2, [sp, #0]
 800eaec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eaee:	4632      	mov	r2, r6
 800eaf0:	4620      	mov	r0, r4
 800eaf2:	f7ff f8dd 	bl	800dcb0 <__s2b>
 800eaf6:	9007      	str	r0, [sp, #28]
 800eaf8:	2800      	cmp	r0, #0
 800eafa:	f43f af2f 	beq.w	800e95c <_strtod_l+0x474>
 800eafe:	9a06      	ldr	r2, [sp, #24]
 800eb00:	2a00      	cmp	r2, #0
 800eb02:	ebab 0305 	sub.w	r3, fp, r5
 800eb06:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800ed60 <_strtod_l+0x878>
 800eb0a:	bfa8      	it	ge
 800eb0c:	2300      	movge	r3, #0
 800eb0e:	ed9f ab96 	vldr	d10, [pc, #600]	; 800ed68 <_strtod_l+0x880>
 800eb12:	ed9f bb97 	vldr	d11, [pc, #604]	; 800ed70 <_strtod_l+0x888>
 800eb16:	9309      	str	r3, [sp, #36]	; 0x24
 800eb18:	2500      	movs	r5, #0
 800eb1a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800eb1e:	930c      	str	r3, [sp, #48]	; 0x30
 800eb20:	462e      	mov	r6, r5
 800eb22:	9b07      	ldr	r3, [sp, #28]
 800eb24:	4620      	mov	r0, r4
 800eb26:	6859      	ldr	r1, [r3, #4]
 800eb28:	f7ff f81a 	bl	800db60 <_Balloc>
 800eb2c:	4607      	mov	r7, r0
 800eb2e:	2800      	cmp	r0, #0
 800eb30:	f43f af18 	beq.w	800e964 <_strtod_l+0x47c>
 800eb34:	9b07      	ldr	r3, [sp, #28]
 800eb36:	691a      	ldr	r2, [r3, #16]
 800eb38:	3202      	adds	r2, #2
 800eb3a:	f103 010c 	add.w	r1, r3, #12
 800eb3e:	0092      	lsls	r2, r2, #2
 800eb40:	300c      	adds	r0, #12
 800eb42:	f000 fdd3 	bl	800f6ec <memcpy>
 800eb46:	ec49 8b10 	vmov	d0, r8, r9
 800eb4a:	aa14      	add	r2, sp, #80	; 0x50
 800eb4c:	a913      	add	r1, sp, #76	; 0x4c
 800eb4e:	4620      	mov	r0, r4
 800eb50:	f7ff fbe2 	bl	800e318 <__d2b>
 800eb54:	ec49 8b18 	vmov	d8, r8, r9
 800eb58:	9012      	str	r0, [sp, #72]	; 0x48
 800eb5a:	2800      	cmp	r0, #0
 800eb5c:	f43f af02 	beq.w	800e964 <_strtod_l+0x47c>
 800eb60:	2101      	movs	r1, #1
 800eb62:	4620      	mov	r0, r4
 800eb64:	f7ff f93c 	bl	800dde0 <__i2b>
 800eb68:	4606      	mov	r6, r0
 800eb6a:	2800      	cmp	r0, #0
 800eb6c:	f43f aefa 	beq.w	800e964 <_strtod_l+0x47c>
 800eb70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eb72:	9914      	ldr	r1, [sp, #80]	; 0x50
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	bfab      	itete	ge
 800eb78:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800eb7a:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800eb7c:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800eb80:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800eb84:	bfac      	ite	ge
 800eb86:	eb03 0b02 	addge.w	fp, r3, r2
 800eb8a:	eba2 0a03 	sublt.w	sl, r2, r3
 800eb8e:	9a05      	ldr	r2, [sp, #20]
 800eb90:	1a9b      	subs	r3, r3, r2
 800eb92:	440b      	add	r3, r1
 800eb94:	4a7b      	ldr	r2, [pc, #492]	; (800ed84 <_strtod_l+0x89c>)
 800eb96:	3b01      	subs	r3, #1
 800eb98:	4293      	cmp	r3, r2
 800eb9a:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800eb9e:	f280 80cd 	bge.w	800ed3c <_strtod_l+0x854>
 800eba2:	1ad2      	subs	r2, r2, r3
 800eba4:	2a1f      	cmp	r2, #31
 800eba6:	eba1 0102 	sub.w	r1, r1, r2
 800ebaa:	f04f 0001 	mov.w	r0, #1
 800ebae:	f300 80b9 	bgt.w	800ed24 <_strtod_l+0x83c>
 800ebb2:	fa00 f302 	lsl.w	r3, r0, r2
 800ebb6:	930b      	str	r3, [sp, #44]	; 0x2c
 800ebb8:	2300      	movs	r3, #0
 800ebba:	930a      	str	r3, [sp, #40]	; 0x28
 800ebbc:	eb0b 0301 	add.w	r3, fp, r1
 800ebc0:	9a05      	ldr	r2, [sp, #20]
 800ebc2:	459b      	cmp	fp, r3
 800ebc4:	448a      	add	sl, r1
 800ebc6:	4492      	add	sl, r2
 800ebc8:	465a      	mov	r2, fp
 800ebca:	bfa8      	it	ge
 800ebcc:	461a      	movge	r2, r3
 800ebce:	4552      	cmp	r2, sl
 800ebd0:	bfa8      	it	ge
 800ebd2:	4652      	movge	r2, sl
 800ebd4:	2a00      	cmp	r2, #0
 800ebd6:	bfc2      	ittt	gt
 800ebd8:	1a9b      	subgt	r3, r3, r2
 800ebda:	ebaa 0a02 	subgt.w	sl, sl, r2
 800ebde:	ebab 0b02 	subgt.w	fp, fp, r2
 800ebe2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ebe4:	2a00      	cmp	r2, #0
 800ebe6:	dd18      	ble.n	800ec1a <_strtod_l+0x732>
 800ebe8:	4631      	mov	r1, r6
 800ebea:	4620      	mov	r0, r4
 800ebec:	930f      	str	r3, [sp, #60]	; 0x3c
 800ebee:	f7ff f9b7 	bl	800df60 <__pow5mult>
 800ebf2:	4606      	mov	r6, r0
 800ebf4:	2800      	cmp	r0, #0
 800ebf6:	f43f aeb5 	beq.w	800e964 <_strtod_l+0x47c>
 800ebfa:	4601      	mov	r1, r0
 800ebfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ebfe:	4620      	mov	r0, r4
 800ec00:	f7ff f904 	bl	800de0c <__multiply>
 800ec04:	900e      	str	r0, [sp, #56]	; 0x38
 800ec06:	2800      	cmp	r0, #0
 800ec08:	f43f aeac 	beq.w	800e964 <_strtod_l+0x47c>
 800ec0c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ec0e:	4620      	mov	r0, r4
 800ec10:	f7fe ffe6 	bl	800dbe0 <_Bfree>
 800ec14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ec16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec18:	9212      	str	r2, [sp, #72]	; 0x48
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	f300 8093 	bgt.w	800ed46 <_strtod_l+0x85e>
 800ec20:	9b06      	ldr	r3, [sp, #24]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	dd08      	ble.n	800ec38 <_strtod_l+0x750>
 800ec26:	4639      	mov	r1, r7
 800ec28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ec2a:	4620      	mov	r0, r4
 800ec2c:	f7ff f998 	bl	800df60 <__pow5mult>
 800ec30:	4607      	mov	r7, r0
 800ec32:	2800      	cmp	r0, #0
 800ec34:	f43f ae96 	beq.w	800e964 <_strtod_l+0x47c>
 800ec38:	f1ba 0f00 	cmp.w	sl, #0
 800ec3c:	dd08      	ble.n	800ec50 <_strtod_l+0x768>
 800ec3e:	4639      	mov	r1, r7
 800ec40:	4652      	mov	r2, sl
 800ec42:	4620      	mov	r0, r4
 800ec44:	f7ff f9e6 	bl	800e014 <__lshift>
 800ec48:	4607      	mov	r7, r0
 800ec4a:	2800      	cmp	r0, #0
 800ec4c:	f43f ae8a 	beq.w	800e964 <_strtod_l+0x47c>
 800ec50:	f1bb 0f00 	cmp.w	fp, #0
 800ec54:	dd08      	ble.n	800ec68 <_strtod_l+0x780>
 800ec56:	4631      	mov	r1, r6
 800ec58:	465a      	mov	r2, fp
 800ec5a:	4620      	mov	r0, r4
 800ec5c:	f7ff f9da 	bl	800e014 <__lshift>
 800ec60:	4606      	mov	r6, r0
 800ec62:	2800      	cmp	r0, #0
 800ec64:	f43f ae7e 	beq.w	800e964 <_strtod_l+0x47c>
 800ec68:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ec6a:	463a      	mov	r2, r7
 800ec6c:	4620      	mov	r0, r4
 800ec6e:	f7ff fa59 	bl	800e124 <__mdiff>
 800ec72:	4605      	mov	r5, r0
 800ec74:	2800      	cmp	r0, #0
 800ec76:	f43f ae75 	beq.w	800e964 <_strtod_l+0x47c>
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800ec80:	60c3      	str	r3, [r0, #12]
 800ec82:	4631      	mov	r1, r6
 800ec84:	f7ff fa32 	bl	800e0ec <__mcmp>
 800ec88:	2800      	cmp	r0, #0
 800ec8a:	da7f      	bge.n	800ed8c <_strtod_l+0x8a4>
 800ec8c:	ea5a 0a08 	orrs.w	sl, sl, r8
 800ec90:	f040 80a5 	bne.w	800edde <_strtod_l+0x8f6>
 800ec94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	f040 80a0 	bne.w	800edde <_strtod_l+0x8f6>
 800ec9e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800eca2:	0d1b      	lsrs	r3, r3, #20
 800eca4:	051b      	lsls	r3, r3, #20
 800eca6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ecaa:	f240 8098 	bls.w	800edde <_strtod_l+0x8f6>
 800ecae:	696b      	ldr	r3, [r5, #20]
 800ecb0:	b91b      	cbnz	r3, 800ecba <_strtod_l+0x7d2>
 800ecb2:	692b      	ldr	r3, [r5, #16]
 800ecb4:	2b01      	cmp	r3, #1
 800ecb6:	f340 8092 	ble.w	800edde <_strtod_l+0x8f6>
 800ecba:	4629      	mov	r1, r5
 800ecbc:	2201      	movs	r2, #1
 800ecbe:	4620      	mov	r0, r4
 800ecc0:	f7ff f9a8 	bl	800e014 <__lshift>
 800ecc4:	4631      	mov	r1, r6
 800ecc6:	4605      	mov	r5, r0
 800ecc8:	f7ff fa10 	bl	800e0ec <__mcmp>
 800eccc:	2800      	cmp	r0, #0
 800ecce:	f340 8086 	ble.w	800edde <_strtod_l+0x8f6>
 800ecd2:	9905      	ldr	r1, [sp, #20]
 800ecd4:	4a2c      	ldr	r2, [pc, #176]	; (800ed88 <_strtod_l+0x8a0>)
 800ecd6:	464b      	mov	r3, r9
 800ecd8:	2900      	cmp	r1, #0
 800ecda:	f000 809f 	beq.w	800ee1c <_strtod_l+0x934>
 800ecde:	ea02 0109 	and.w	r1, r2, r9
 800ece2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ece6:	f300 8099 	bgt.w	800ee1c <_strtod_l+0x934>
 800ecea:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ecee:	f77f aea8 	ble.w	800ea42 <_strtod_l+0x55a>
 800ecf2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800ed78 <_strtod_l+0x890>
 800ecf6:	ec49 8b16 	vmov	d6, r8, r9
 800ecfa:	4b23      	ldr	r3, [pc, #140]	; (800ed88 <_strtod_l+0x8a0>)
 800ecfc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ed00:	ee17 2a90 	vmov	r2, s15
 800ed04:	4013      	ands	r3, r2
 800ed06:	ec59 8b17 	vmov	r8, r9, d7
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	f47f ae34 	bne.w	800e978 <_strtod_l+0x490>
 800ed10:	2322      	movs	r3, #34	; 0x22
 800ed12:	6023      	str	r3, [r4, #0]
 800ed14:	e630      	b.n	800e978 <_strtod_l+0x490>
 800ed16:	f04f 31ff 	mov.w	r1, #4294967295
 800ed1a:	fa01 f202 	lsl.w	r2, r1, r2
 800ed1e:	ea02 0808 	and.w	r8, r2, r8
 800ed22:	e6da      	b.n	800eada <_strtod_l+0x5f2>
 800ed24:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800ed28:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800ed2c:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800ed30:	33e2      	adds	r3, #226	; 0xe2
 800ed32:	fa00 f303 	lsl.w	r3, r0, r3
 800ed36:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800ed3a:	e73f      	b.n	800ebbc <_strtod_l+0x6d4>
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	2301      	movs	r3, #1
 800ed40:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ed44:	e73a      	b.n	800ebbc <_strtod_l+0x6d4>
 800ed46:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ed48:	461a      	mov	r2, r3
 800ed4a:	4620      	mov	r0, r4
 800ed4c:	f7ff f962 	bl	800e014 <__lshift>
 800ed50:	9012      	str	r0, [sp, #72]	; 0x48
 800ed52:	2800      	cmp	r0, #0
 800ed54:	f47f af64 	bne.w	800ec20 <_strtod_l+0x738>
 800ed58:	e604      	b.n	800e964 <_strtod_l+0x47c>
 800ed5a:	bf00      	nop
 800ed5c:	f3af 8000 	nop.w
 800ed60:	94a03595 	.word	0x94a03595
 800ed64:	3fcfffff 	.word	0x3fcfffff
 800ed68:	94a03595 	.word	0x94a03595
 800ed6c:	3fdfffff 	.word	0x3fdfffff
 800ed70:	35afe535 	.word	0x35afe535
 800ed74:	3fe00000 	.word	0x3fe00000
 800ed78:	00000000 	.word	0x00000000
 800ed7c:	39500000 	.word	0x39500000
 800ed80:	08011090 	.word	0x08011090
 800ed84:	fffffc02 	.word	0xfffffc02
 800ed88:	7ff00000 	.word	0x7ff00000
 800ed8c:	46cb      	mov	fp, r9
 800ed8e:	d15f      	bne.n	800ee50 <_strtod_l+0x968>
 800ed90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ed94:	f1ba 0f00 	cmp.w	sl, #0
 800ed98:	d02a      	beq.n	800edf0 <_strtod_l+0x908>
 800ed9a:	4aa7      	ldr	r2, [pc, #668]	; (800f038 <_strtod_l+0xb50>)
 800ed9c:	4293      	cmp	r3, r2
 800ed9e:	d12b      	bne.n	800edf8 <_strtod_l+0x910>
 800eda0:	9b05      	ldr	r3, [sp, #20]
 800eda2:	4642      	mov	r2, r8
 800eda4:	b1fb      	cbz	r3, 800ede6 <_strtod_l+0x8fe>
 800eda6:	4ba5      	ldr	r3, [pc, #660]	; (800f03c <_strtod_l+0xb54>)
 800eda8:	ea09 0303 	and.w	r3, r9, r3
 800edac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800edb0:	f04f 31ff 	mov.w	r1, #4294967295
 800edb4:	d81a      	bhi.n	800edec <_strtod_l+0x904>
 800edb6:	0d1b      	lsrs	r3, r3, #20
 800edb8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800edbc:	fa01 f303 	lsl.w	r3, r1, r3
 800edc0:	429a      	cmp	r2, r3
 800edc2:	d119      	bne.n	800edf8 <_strtod_l+0x910>
 800edc4:	4b9e      	ldr	r3, [pc, #632]	; (800f040 <_strtod_l+0xb58>)
 800edc6:	459b      	cmp	fp, r3
 800edc8:	d102      	bne.n	800edd0 <_strtod_l+0x8e8>
 800edca:	3201      	adds	r2, #1
 800edcc:	f43f adca 	beq.w	800e964 <_strtod_l+0x47c>
 800edd0:	4b9a      	ldr	r3, [pc, #616]	; (800f03c <_strtod_l+0xb54>)
 800edd2:	ea0b 0303 	and.w	r3, fp, r3
 800edd6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800edda:	f04f 0800 	mov.w	r8, #0
 800edde:	9b05      	ldr	r3, [sp, #20]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d186      	bne.n	800ecf2 <_strtod_l+0x80a>
 800ede4:	e5c8      	b.n	800e978 <_strtod_l+0x490>
 800ede6:	f04f 33ff 	mov.w	r3, #4294967295
 800edea:	e7e9      	b.n	800edc0 <_strtod_l+0x8d8>
 800edec:	460b      	mov	r3, r1
 800edee:	e7e7      	b.n	800edc0 <_strtod_l+0x8d8>
 800edf0:	ea53 0308 	orrs.w	r3, r3, r8
 800edf4:	f43f af6d 	beq.w	800ecd2 <_strtod_l+0x7ea>
 800edf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800edfa:	b1cb      	cbz	r3, 800ee30 <_strtod_l+0x948>
 800edfc:	ea13 0f0b 	tst.w	r3, fp
 800ee00:	d0ed      	beq.n	800edde <_strtod_l+0x8f6>
 800ee02:	9a05      	ldr	r2, [sp, #20]
 800ee04:	4640      	mov	r0, r8
 800ee06:	4649      	mov	r1, r9
 800ee08:	f1ba 0f00 	cmp.w	sl, #0
 800ee0c:	d014      	beq.n	800ee38 <_strtod_l+0x950>
 800ee0e:	f7ff fb51 	bl	800e4b4 <sulp>
 800ee12:	ee38 7b00 	vadd.f64	d7, d8, d0
 800ee16:	ec59 8b17 	vmov	r8, r9, d7
 800ee1a:	e7e0      	b.n	800edde <_strtod_l+0x8f6>
 800ee1c:	4013      	ands	r3, r2
 800ee1e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ee22:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ee26:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ee2a:	f04f 38ff 	mov.w	r8, #4294967295
 800ee2e:	e7d6      	b.n	800edde <_strtod_l+0x8f6>
 800ee30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee32:	ea13 0f08 	tst.w	r3, r8
 800ee36:	e7e3      	b.n	800ee00 <_strtod_l+0x918>
 800ee38:	f7ff fb3c 	bl	800e4b4 <sulp>
 800ee3c:	ee38 0b40 	vsub.f64	d0, d8, d0
 800ee40:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ee44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee48:	ec59 8b10 	vmov	r8, r9, d0
 800ee4c:	d1c7      	bne.n	800edde <_strtod_l+0x8f6>
 800ee4e:	e5f8      	b.n	800ea42 <_strtod_l+0x55a>
 800ee50:	4631      	mov	r1, r6
 800ee52:	4628      	mov	r0, r5
 800ee54:	f7ff faba 	bl	800e3cc <__ratio>
 800ee58:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800ee5c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ee60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee64:	d85f      	bhi.n	800ef26 <_strtod_l+0xa3e>
 800ee66:	f1ba 0f00 	cmp.w	sl, #0
 800ee6a:	d166      	bne.n	800ef3a <_strtod_l+0xa52>
 800ee6c:	f1b8 0f00 	cmp.w	r8, #0
 800ee70:	d14d      	bne.n	800ef0e <_strtod_l+0xa26>
 800ee72:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ee76:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d162      	bne.n	800ef44 <_strtod_l+0xa5c>
 800ee7e:	eeb4 0bcd 	vcmpe.f64	d0, d13
 800ee82:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800ee86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee8a:	d401      	bmi.n	800ee90 <_strtod_l+0x9a8>
 800ee8c:	ee20 db0d 	vmul.f64	d13, d0, d13
 800ee90:	eeb1 cb4d 	vneg.f64	d12, d13
 800ee94:	4869      	ldr	r0, [pc, #420]	; (800f03c <_strtod_l+0xb54>)
 800ee96:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 800f048 <_strtod_l+0xb60>
 800ee9a:	ea0b 0100 	and.w	r1, fp, r0
 800ee9e:	4561      	cmp	r1, ip
 800eea0:	ec53 2b1c 	vmov	r2, r3, d12
 800eea4:	d17a      	bne.n	800ef9c <_strtod_l+0xab4>
 800eea6:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800eeaa:	ec49 8b10 	vmov	d0, r8, r9
 800eeae:	910a      	str	r1, [sp, #40]	; 0x28
 800eeb0:	f7ff f9c2 	bl	800e238 <__ulp>
 800eeb4:	ec49 8b1e 	vmov	d14, r8, r9
 800eeb8:	4860      	ldr	r0, [pc, #384]	; (800f03c <_strtod_l+0xb54>)
 800eeba:	eea0 eb0c 	vfma.f64	d14, d0, d12
 800eebe:	ee1e 3a90 	vmov	r3, s29
 800eec2:	4a60      	ldr	r2, [pc, #384]	; (800f044 <_strtod_l+0xb5c>)
 800eec4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800eec6:	4018      	ands	r0, r3
 800eec8:	4290      	cmp	r0, r2
 800eeca:	ec59 8b1e 	vmov	r8, r9, d14
 800eece:	d93c      	bls.n	800ef4a <_strtod_l+0xa62>
 800eed0:	ee18 2a90 	vmov	r2, s17
 800eed4:	4b5a      	ldr	r3, [pc, #360]	; (800f040 <_strtod_l+0xb58>)
 800eed6:	429a      	cmp	r2, r3
 800eed8:	d104      	bne.n	800eee4 <_strtod_l+0x9fc>
 800eeda:	ee18 3a10 	vmov	r3, s16
 800eede:	3301      	adds	r3, #1
 800eee0:	f43f ad40 	beq.w	800e964 <_strtod_l+0x47c>
 800eee4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800f040 <_strtod_l+0xb58>
 800eee8:	f04f 38ff 	mov.w	r8, #4294967295
 800eeec:	9912      	ldr	r1, [sp, #72]	; 0x48
 800eeee:	4620      	mov	r0, r4
 800eef0:	f7fe fe76 	bl	800dbe0 <_Bfree>
 800eef4:	4639      	mov	r1, r7
 800eef6:	4620      	mov	r0, r4
 800eef8:	f7fe fe72 	bl	800dbe0 <_Bfree>
 800eefc:	4631      	mov	r1, r6
 800eefe:	4620      	mov	r0, r4
 800ef00:	f7fe fe6e 	bl	800dbe0 <_Bfree>
 800ef04:	4629      	mov	r1, r5
 800ef06:	4620      	mov	r0, r4
 800ef08:	f7fe fe6a 	bl	800dbe0 <_Bfree>
 800ef0c:	e609      	b.n	800eb22 <_strtod_l+0x63a>
 800ef0e:	f1b8 0f01 	cmp.w	r8, #1
 800ef12:	d103      	bne.n	800ef1c <_strtod_l+0xa34>
 800ef14:	f1b9 0f00 	cmp.w	r9, #0
 800ef18:	f43f ad93 	beq.w	800ea42 <_strtod_l+0x55a>
 800ef1c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800ef20:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800ef24:	e7b6      	b.n	800ee94 <_strtod_l+0x9ac>
 800ef26:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800ef2a:	ee20 db0d 	vmul.f64	d13, d0, d13
 800ef2e:	f1ba 0f00 	cmp.w	sl, #0
 800ef32:	d0ad      	beq.n	800ee90 <_strtod_l+0x9a8>
 800ef34:	eeb0 cb4d 	vmov.f64	d12, d13
 800ef38:	e7ac      	b.n	800ee94 <_strtod_l+0x9ac>
 800ef3a:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 800ef3e:	eeb0 db4c 	vmov.f64	d13, d12
 800ef42:	e7a7      	b.n	800ee94 <_strtod_l+0x9ac>
 800ef44:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800ef48:	e7a4      	b.n	800ee94 <_strtod_l+0x9ac>
 800ef4a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ef4e:	9b05      	ldr	r3, [sp, #20]
 800ef50:	46cb      	mov	fp, r9
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d1ca      	bne.n	800eeec <_strtod_l+0xa04>
 800ef56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ef5a:	0d1b      	lsrs	r3, r3, #20
 800ef5c:	051b      	lsls	r3, r3, #20
 800ef5e:	4299      	cmp	r1, r3
 800ef60:	d1c4      	bne.n	800eeec <_strtod_l+0xa04>
 800ef62:	ec51 0b1d 	vmov	r0, r1, d13
 800ef66:	f7f1 fbe7 	bl	8000738 <__aeabi_d2lz>
 800ef6a:	f7f1 fb9f 	bl	80006ac <__aeabi_l2d>
 800ef6e:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 800ef72:	ec41 0b17 	vmov	d7, r0, r1
 800ef76:	ea4b 0b08 	orr.w	fp, fp, r8
 800ef7a:	ea5b 0b0a 	orrs.w	fp, fp, sl
 800ef7e:	ee3d db47 	vsub.f64	d13, d13, d7
 800ef82:	d03c      	beq.n	800effe <_strtod_l+0xb16>
 800ef84:	eeb4 dbca 	vcmpe.f64	d13, d10
 800ef88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef8c:	f53f acf4 	bmi.w	800e978 <_strtod_l+0x490>
 800ef90:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800ef94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef98:	dda8      	ble.n	800eeec <_strtod_l+0xa04>
 800ef9a:	e4ed      	b.n	800e978 <_strtod_l+0x490>
 800ef9c:	9805      	ldr	r0, [sp, #20]
 800ef9e:	b1f0      	cbz	r0, 800efde <_strtod_l+0xaf6>
 800efa0:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800efa4:	d81b      	bhi.n	800efde <_strtod_l+0xaf6>
 800efa6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800f030 <_strtod_l+0xb48>
 800efaa:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800efae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efb2:	d811      	bhi.n	800efd8 <_strtod_l+0xaf0>
 800efb4:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800efb8:	ee1d 3a10 	vmov	r3, s26
 800efbc:	2b01      	cmp	r3, #1
 800efbe:	bf38      	it	cc
 800efc0:	2301      	movcc	r3, #1
 800efc2:	ee0d 3a10 	vmov	s26, r3
 800efc6:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800efca:	f1ba 0f00 	cmp.w	sl, #0
 800efce:	d113      	bne.n	800eff8 <_strtod_l+0xb10>
 800efd0:	eeb1 7b4d 	vneg.f64	d7, d13
 800efd4:	ec53 2b17 	vmov	r2, r3, d7
 800efd8:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800efdc:	1a43      	subs	r3, r0, r1
 800efde:	eeb0 0b48 	vmov.f64	d0, d8
 800efe2:	ec43 2b1c 	vmov	d12, r2, r3
 800efe6:	910a      	str	r1, [sp, #40]	; 0x28
 800efe8:	f7ff f926 	bl	800e238 <__ulp>
 800efec:	990a      	ldr	r1, [sp, #40]	; 0x28
 800efee:	eeac 8b00 	vfma.f64	d8, d12, d0
 800eff2:	ec59 8b18 	vmov	r8, r9, d8
 800eff6:	e7aa      	b.n	800ef4e <_strtod_l+0xa66>
 800eff8:	eeb0 7b4d 	vmov.f64	d7, d13
 800effc:	e7ea      	b.n	800efd4 <_strtod_l+0xaec>
 800effe:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800f002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f006:	f57f af71 	bpl.w	800eeec <_strtod_l+0xa04>
 800f00a:	e4b5      	b.n	800e978 <_strtod_l+0x490>
 800f00c:	2300      	movs	r3, #0
 800f00e:	9308      	str	r3, [sp, #32]
 800f010:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f012:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f014:	6013      	str	r3, [r2, #0]
 800f016:	f7ff baa6 	b.w	800e566 <_strtod_l+0x7e>
 800f01a:	2a65      	cmp	r2, #101	; 0x65
 800f01c:	f43f aba2 	beq.w	800e764 <_strtod_l+0x27c>
 800f020:	2a45      	cmp	r2, #69	; 0x45
 800f022:	f43f ab9f 	beq.w	800e764 <_strtod_l+0x27c>
 800f026:	2101      	movs	r1, #1
 800f028:	f7ff bbd8 	b.w	800e7dc <_strtod_l+0x2f4>
 800f02c:	f3af 8000 	nop.w
 800f030:	ffc00000 	.word	0xffc00000
 800f034:	41dfffff 	.word	0x41dfffff
 800f038:	000fffff 	.word	0x000fffff
 800f03c:	7ff00000 	.word	0x7ff00000
 800f040:	7fefffff 	.word	0x7fefffff
 800f044:	7c9fffff 	.word	0x7c9fffff
 800f048:	7fe00000 	.word	0x7fe00000

0800f04c <_strtod_r>:
 800f04c:	4b01      	ldr	r3, [pc, #4]	; (800f054 <_strtod_r+0x8>)
 800f04e:	f7ff ba4b 	b.w	800e4e8 <_strtod_l>
 800f052:	bf00      	nop
 800f054:	2400006c 	.word	0x2400006c

0800f058 <_strtol_l.constprop.0>:
 800f058:	2b01      	cmp	r3, #1
 800f05a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f05e:	d001      	beq.n	800f064 <_strtol_l.constprop.0+0xc>
 800f060:	2b24      	cmp	r3, #36	; 0x24
 800f062:	d906      	bls.n	800f072 <_strtol_l.constprop.0+0x1a>
 800f064:	f7fd fe54 	bl	800cd10 <__errno>
 800f068:	2316      	movs	r3, #22
 800f06a:	6003      	str	r3, [r0, #0]
 800f06c:	2000      	movs	r0, #0
 800f06e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f072:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f158 <_strtol_l.constprop.0+0x100>
 800f076:	460d      	mov	r5, r1
 800f078:	462e      	mov	r6, r5
 800f07a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f07e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800f082:	f017 0708 	ands.w	r7, r7, #8
 800f086:	d1f7      	bne.n	800f078 <_strtol_l.constprop.0+0x20>
 800f088:	2c2d      	cmp	r4, #45	; 0x2d
 800f08a:	d132      	bne.n	800f0f2 <_strtol_l.constprop.0+0x9a>
 800f08c:	782c      	ldrb	r4, [r5, #0]
 800f08e:	2701      	movs	r7, #1
 800f090:	1cb5      	adds	r5, r6, #2
 800f092:	2b00      	cmp	r3, #0
 800f094:	d05b      	beq.n	800f14e <_strtol_l.constprop.0+0xf6>
 800f096:	2b10      	cmp	r3, #16
 800f098:	d109      	bne.n	800f0ae <_strtol_l.constprop.0+0x56>
 800f09a:	2c30      	cmp	r4, #48	; 0x30
 800f09c:	d107      	bne.n	800f0ae <_strtol_l.constprop.0+0x56>
 800f09e:	782c      	ldrb	r4, [r5, #0]
 800f0a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f0a4:	2c58      	cmp	r4, #88	; 0x58
 800f0a6:	d14d      	bne.n	800f144 <_strtol_l.constprop.0+0xec>
 800f0a8:	786c      	ldrb	r4, [r5, #1]
 800f0aa:	2310      	movs	r3, #16
 800f0ac:	3502      	adds	r5, #2
 800f0ae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f0b2:	f108 38ff 	add.w	r8, r8, #4294967295
 800f0b6:	f04f 0e00 	mov.w	lr, #0
 800f0ba:	fbb8 f9f3 	udiv	r9, r8, r3
 800f0be:	4676      	mov	r6, lr
 800f0c0:	fb03 8a19 	mls	sl, r3, r9, r8
 800f0c4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800f0c8:	f1bc 0f09 	cmp.w	ip, #9
 800f0cc:	d816      	bhi.n	800f0fc <_strtol_l.constprop.0+0xa4>
 800f0ce:	4664      	mov	r4, ip
 800f0d0:	42a3      	cmp	r3, r4
 800f0d2:	dd24      	ble.n	800f11e <_strtol_l.constprop.0+0xc6>
 800f0d4:	f1be 3fff 	cmp.w	lr, #4294967295
 800f0d8:	d008      	beq.n	800f0ec <_strtol_l.constprop.0+0x94>
 800f0da:	45b1      	cmp	r9, r6
 800f0dc:	d31c      	bcc.n	800f118 <_strtol_l.constprop.0+0xc0>
 800f0de:	d101      	bne.n	800f0e4 <_strtol_l.constprop.0+0x8c>
 800f0e0:	45a2      	cmp	sl, r4
 800f0e2:	db19      	blt.n	800f118 <_strtol_l.constprop.0+0xc0>
 800f0e4:	fb06 4603 	mla	r6, r6, r3, r4
 800f0e8:	f04f 0e01 	mov.w	lr, #1
 800f0ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f0f0:	e7e8      	b.n	800f0c4 <_strtol_l.constprop.0+0x6c>
 800f0f2:	2c2b      	cmp	r4, #43	; 0x2b
 800f0f4:	bf04      	itt	eq
 800f0f6:	782c      	ldrbeq	r4, [r5, #0]
 800f0f8:	1cb5      	addeq	r5, r6, #2
 800f0fa:	e7ca      	b.n	800f092 <_strtol_l.constprop.0+0x3a>
 800f0fc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800f100:	f1bc 0f19 	cmp.w	ip, #25
 800f104:	d801      	bhi.n	800f10a <_strtol_l.constprop.0+0xb2>
 800f106:	3c37      	subs	r4, #55	; 0x37
 800f108:	e7e2      	b.n	800f0d0 <_strtol_l.constprop.0+0x78>
 800f10a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800f10e:	f1bc 0f19 	cmp.w	ip, #25
 800f112:	d804      	bhi.n	800f11e <_strtol_l.constprop.0+0xc6>
 800f114:	3c57      	subs	r4, #87	; 0x57
 800f116:	e7db      	b.n	800f0d0 <_strtol_l.constprop.0+0x78>
 800f118:	f04f 3eff 	mov.w	lr, #4294967295
 800f11c:	e7e6      	b.n	800f0ec <_strtol_l.constprop.0+0x94>
 800f11e:	f1be 3fff 	cmp.w	lr, #4294967295
 800f122:	d105      	bne.n	800f130 <_strtol_l.constprop.0+0xd8>
 800f124:	2322      	movs	r3, #34	; 0x22
 800f126:	6003      	str	r3, [r0, #0]
 800f128:	4646      	mov	r6, r8
 800f12a:	b942      	cbnz	r2, 800f13e <_strtol_l.constprop.0+0xe6>
 800f12c:	4630      	mov	r0, r6
 800f12e:	e79e      	b.n	800f06e <_strtol_l.constprop.0+0x16>
 800f130:	b107      	cbz	r7, 800f134 <_strtol_l.constprop.0+0xdc>
 800f132:	4276      	negs	r6, r6
 800f134:	2a00      	cmp	r2, #0
 800f136:	d0f9      	beq.n	800f12c <_strtol_l.constprop.0+0xd4>
 800f138:	f1be 0f00 	cmp.w	lr, #0
 800f13c:	d000      	beq.n	800f140 <_strtol_l.constprop.0+0xe8>
 800f13e:	1e69      	subs	r1, r5, #1
 800f140:	6011      	str	r1, [r2, #0]
 800f142:	e7f3      	b.n	800f12c <_strtol_l.constprop.0+0xd4>
 800f144:	2430      	movs	r4, #48	; 0x30
 800f146:	2b00      	cmp	r3, #0
 800f148:	d1b1      	bne.n	800f0ae <_strtol_l.constprop.0+0x56>
 800f14a:	2308      	movs	r3, #8
 800f14c:	e7af      	b.n	800f0ae <_strtol_l.constprop.0+0x56>
 800f14e:	2c30      	cmp	r4, #48	; 0x30
 800f150:	d0a5      	beq.n	800f09e <_strtol_l.constprop.0+0x46>
 800f152:	230a      	movs	r3, #10
 800f154:	e7ab      	b.n	800f0ae <_strtol_l.constprop.0+0x56>
 800f156:	bf00      	nop
 800f158:	080110b9 	.word	0x080110b9

0800f15c <_strtol_r>:
 800f15c:	f7ff bf7c 	b.w	800f058 <_strtol_l.constprop.0>

0800f160 <__ssputs_r>:
 800f160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f164:	688e      	ldr	r6, [r1, #8]
 800f166:	461f      	mov	r7, r3
 800f168:	42be      	cmp	r6, r7
 800f16a:	680b      	ldr	r3, [r1, #0]
 800f16c:	4682      	mov	sl, r0
 800f16e:	460c      	mov	r4, r1
 800f170:	4690      	mov	r8, r2
 800f172:	d82c      	bhi.n	800f1ce <__ssputs_r+0x6e>
 800f174:	898a      	ldrh	r2, [r1, #12]
 800f176:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f17a:	d026      	beq.n	800f1ca <__ssputs_r+0x6a>
 800f17c:	6965      	ldr	r5, [r4, #20]
 800f17e:	6909      	ldr	r1, [r1, #16]
 800f180:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f184:	eba3 0901 	sub.w	r9, r3, r1
 800f188:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f18c:	1c7b      	adds	r3, r7, #1
 800f18e:	444b      	add	r3, r9
 800f190:	106d      	asrs	r5, r5, #1
 800f192:	429d      	cmp	r5, r3
 800f194:	bf38      	it	cc
 800f196:	461d      	movcc	r5, r3
 800f198:	0553      	lsls	r3, r2, #21
 800f19a:	d527      	bpl.n	800f1ec <__ssputs_r+0x8c>
 800f19c:	4629      	mov	r1, r5
 800f19e:	f7fe fc53 	bl	800da48 <_malloc_r>
 800f1a2:	4606      	mov	r6, r0
 800f1a4:	b360      	cbz	r0, 800f200 <__ssputs_r+0xa0>
 800f1a6:	6921      	ldr	r1, [r4, #16]
 800f1a8:	464a      	mov	r2, r9
 800f1aa:	f000 fa9f 	bl	800f6ec <memcpy>
 800f1ae:	89a3      	ldrh	r3, [r4, #12]
 800f1b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f1b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1b8:	81a3      	strh	r3, [r4, #12]
 800f1ba:	6126      	str	r6, [r4, #16]
 800f1bc:	6165      	str	r5, [r4, #20]
 800f1be:	444e      	add	r6, r9
 800f1c0:	eba5 0509 	sub.w	r5, r5, r9
 800f1c4:	6026      	str	r6, [r4, #0]
 800f1c6:	60a5      	str	r5, [r4, #8]
 800f1c8:	463e      	mov	r6, r7
 800f1ca:	42be      	cmp	r6, r7
 800f1cc:	d900      	bls.n	800f1d0 <__ssputs_r+0x70>
 800f1ce:	463e      	mov	r6, r7
 800f1d0:	6820      	ldr	r0, [r4, #0]
 800f1d2:	4632      	mov	r2, r6
 800f1d4:	4641      	mov	r1, r8
 800f1d6:	f000 fa2b 	bl	800f630 <memmove>
 800f1da:	68a3      	ldr	r3, [r4, #8]
 800f1dc:	1b9b      	subs	r3, r3, r6
 800f1de:	60a3      	str	r3, [r4, #8]
 800f1e0:	6823      	ldr	r3, [r4, #0]
 800f1e2:	4433      	add	r3, r6
 800f1e4:	6023      	str	r3, [r4, #0]
 800f1e6:	2000      	movs	r0, #0
 800f1e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1ec:	462a      	mov	r2, r5
 800f1ee:	f000 fe30 	bl	800fe52 <_realloc_r>
 800f1f2:	4606      	mov	r6, r0
 800f1f4:	2800      	cmp	r0, #0
 800f1f6:	d1e0      	bne.n	800f1ba <__ssputs_r+0x5a>
 800f1f8:	6921      	ldr	r1, [r4, #16]
 800f1fa:	4650      	mov	r0, sl
 800f1fc:	f7fe fbb0 	bl	800d960 <_free_r>
 800f200:	230c      	movs	r3, #12
 800f202:	f8ca 3000 	str.w	r3, [sl]
 800f206:	89a3      	ldrh	r3, [r4, #12]
 800f208:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f20c:	81a3      	strh	r3, [r4, #12]
 800f20e:	f04f 30ff 	mov.w	r0, #4294967295
 800f212:	e7e9      	b.n	800f1e8 <__ssputs_r+0x88>

0800f214 <_svfiprintf_r>:
 800f214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f218:	4698      	mov	r8, r3
 800f21a:	898b      	ldrh	r3, [r1, #12]
 800f21c:	061b      	lsls	r3, r3, #24
 800f21e:	b09d      	sub	sp, #116	; 0x74
 800f220:	4607      	mov	r7, r0
 800f222:	460d      	mov	r5, r1
 800f224:	4614      	mov	r4, r2
 800f226:	d50e      	bpl.n	800f246 <_svfiprintf_r+0x32>
 800f228:	690b      	ldr	r3, [r1, #16]
 800f22a:	b963      	cbnz	r3, 800f246 <_svfiprintf_r+0x32>
 800f22c:	2140      	movs	r1, #64	; 0x40
 800f22e:	f7fe fc0b 	bl	800da48 <_malloc_r>
 800f232:	6028      	str	r0, [r5, #0]
 800f234:	6128      	str	r0, [r5, #16]
 800f236:	b920      	cbnz	r0, 800f242 <_svfiprintf_r+0x2e>
 800f238:	230c      	movs	r3, #12
 800f23a:	603b      	str	r3, [r7, #0]
 800f23c:	f04f 30ff 	mov.w	r0, #4294967295
 800f240:	e0d0      	b.n	800f3e4 <_svfiprintf_r+0x1d0>
 800f242:	2340      	movs	r3, #64	; 0x40
 800f244:	616b      	str	r3, [r5, #20]
 800f246:	2300      	movs	r3, #0
 800f248:	9309      	str	r3, [sp, #36]	; 0x24
 800f24a:	2320      	movs	r3, #32
 800f24c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f250:	f8cd 800c 	str.w	r8, [sp, #12]
 800f254:	2330      	movs	r3, #48	; 0x30
 800f256:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f3fc <_svfiprintf_r+0x1e8>
 800f25a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f25e:	f04f 0901 	mov.w	r9, #1
 800f262:	4623      	mov	r3, r4
 800f264:	469a      	mov	sl, r3
 800f266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f26a:	b10a      	cbz	r2, 800f270 <_svfiprintf_r+0x5c>
 800f26c:	2a25      	cmp	r2, #37	; 0x25
 800f26e:	d1f9      	bne.n	800f264 <_svfiprintf_r+0x50>
 800f270:	ebba 0b04 	subs.w	fp, sl, r4
 800f274:	d00b      	beq.n	800f28e <_svfiprintf_r+0x7a>
 800f276:	465b      	mov	r3, fp
 800f278:	4622      	mov	r2, r4
 800f27a:	4629      	mov	r1, r5
 800f27c:	4638      	mov	r0, r7
 800f27e:	f7ff ff6f 	bl	800f160 <__ssputs_r>
 800f282:	3001      	adds	r0, #1
 800f284:	f000 80a9 	beq.w	800f3da <_svfiprintf_r+0x1c6>
 800f288:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f28a:	445a      	add	r2, fp
 800f28c:	9209      	str	r2, [sp, #36]	; 0x24
 800f28e:	f89a 3000 	ldrb.w	r3, [sl]
 800f292:	2b00      	cmp	r3, #0
 800f294:	f000 80a1 	beq.w	800f3da <_svfiprintf_r+0x1c6>
 800f298:	2300      	movs	r3, #0
 800f29a:	f04f 32ff 	mov.w	r2, #4294967295
 800f29e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f2a2:	f10a 0a01 	add.w	sl, sl, #1
 800f2a6:	9304      	str	r3, [sp, #16]
 800f2a8:	9307      	str	r3, [sp, #28]
 800f2aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f2ae:	931a      	str	r3, [sp, #104]	; 0x68
 800f2b0:	4654      	mov	r4, sl
 800f2b2:	2205      	movs	r2, #5
 800f2b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2b8:	4850      	ldr	r0, [pc, #320]	; (800f3fc <_svfiprintf_r+0x1e8>)
 800f2ba:	f7f1 f811 	bl	80002e0 <memchr>
 800f2be:	9a04      	ldr	r2, [sp, #16]
 800f2c0:	b9d8      	cbnz	r0, 800f2fa <_svfiprintf_r+0xe6>
 800f2c2:	06d0      	lsls	r0, r2, #27
 800f2c4:	bf44      	itt	mi
 800f2c6:	2320      	movmi	r3, #32
 800f2c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f2cc:	0711      	lsls	r1, r2, #28
 800f2ce:	bf44      	itt	mi
 800f2d0:	232b      	movmi	r3, #43	; 0x2b
 800f2d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f2d6:	f89a 3000 	ldrb.w	r3, [sl]
 800f2da:	2b2a      	cmp	r3, #42	; 0x2a
 800f2dc:	d015      	beq.n	800f30a <_svfiprintf_r+0xf6>
 800f2de:	9a07      	ldr	r2, [sp, #28]
 800f2e0:	4654      	mov	r4, sl
 800f2e2:	2000      	movs	r0, #0
 800f2e4:	f04f 0c0a 	mov.w	ip, #10
 800f2e8:	4621      	mov	r1, r4
 800f2ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f2ee:	3b30      	subs	r3, #48	; 0x30
 800f2f0:	2b09      	cmp	r3, #9
 800f2f2:	d94d      	bls.n	800f390 <_svfiprintf_r+0x17c>
 800f2f4:	b1b0      	cbz	r0, 800f324 <_svfiprintf_r+0x110>
 800f2f6:	9207      	str	r2, [sp, #28]
 800f2f8:	e014      	b.n	800f324 <_svfiprintf_r+0x110>
 800f2fa:	eba0 0308 	sub.w	r3, r0, r8
 800f2fe:	fa09 f303 	lsl.w	r3, r9, r3
 800f302:	4313      	orrs	r3, r2
 800f304:	9304      	str	r3, [sp, #16]
 800f306:	46a2      	mov	sl, r4
 800f308:	e7d2      	b.n	800f2b0 <_svfiprintf_r+0x9c>
 800f30a:	9b03      	ldr	r3, [sp, #12]
 800f30c:	1d19      	adds	r1, r3, #4
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	9103      	str	r1, [sp, #12]
 800f312:	2b00      	cmp	r3, #0
 800f314:	bfbb      	ittet	lt
 800f316:	425b      	neglt	r3, r3
 800f318:	f042 0202 	orrlt.w	r2, r2, #2
 800f31c:	9307      	strge	r3, [sp, #28]
 800f31e:	9307      	strlt	r3, [sp, #28]
 800f320:	bfb8      	it	lt
 800f322:	9204      	strlt	r2, [sp, #16]
 800f324:	7823      	ldrb	r3, [r4, #0]
 800f326:	2b2e      	cmp	r3, #46	; 0x2e
 800f328:	d10c      	bne.n	800f344 <_svfiprintf_r+0x130>
 800f32a:	7863      	ldrb	r3, [r4, #1]
 800f32c:	2b2a      	cmp	r3, #42	; 0x2a
 800f32e:	d134      	bne.n	800f39a <_svfiprintf_r+0x186>
 800f330:	9b03      	ldr	r3, [sp, #12]
 800f332:	1d1a      	adds	r2, r3, #4
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	9203      	str	r2, [sp, #12]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	bfb8      	it	lt
 800f33c:	f04f 33ff 	movlt.w	r3, #4294967295
 800f340:	3402      	adds	r4, #2
 800f342:	9305      	str	r3, [sp, #20]
 800f344:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f40c <_svfiprintf_r+0x1f8>
 800f348:	7821      	ldrb	r1, [r4, #0]
 800f34a:	2203      	movs	r2, #3
 800f34c:	4650      	mov	r0, sl
 800f34e:	f7f0 ffc7 	bl	80002e0 <memchr>
 800f352:	b138      	cbz	r0, 800f364 <_svfiprintf_r+0x150>
 800f354:	9b04      	ldr	r3, [sp, #16]
 800f356:	eba0 000a 	sub.w	r0, r0, sl
 800f35a:	2240      	movs	r2, #64	; 0x40
 800f35c:	4082      	lsls	r2, r0
 800f35e:	4313      	orrs	r3, r2
 800f360:	3401      	adds	r4, #1
 800f362:	9304      	str	r3, [sp, #16]
 800f364:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f368:	4825      	ldr	r0, [pc, #148]	; (800f400 <_svfiprintf_r+0x1ec>)
 800f36a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f36e:	2206      	movs	r2, #6
 800f370:	f7f0 ffb6 	bl	80002e0 <memchr>
 800f374:	2800      	cmp	r0, #0
 800f376:	d038      	beq.n	800f3ea <_svfiprintf_r+0x1d6>
 800f378:	4b22      	ldr	r3, [pc, #136]	; (800f404 <_svfiprintf_r+0x1f0>)
 800f37a:	bb1b      	cbnz	r3, 800f3c4 <_svfiprintf_r+0x1b0>
 800f37c:	9b03      	ldr	r3, [sp, #12]
 800f37e:	3307      	adds	r3, #7
 800f380:	f023 0307 	bic.w	r3, r3, #7
 800f384:	3308      	adds	r3, #8
 800f386:	9303      	str	r3, [sp, #12]
 800f388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f38a:	4433      	add	r3, r6
 800f38c:	9309      	str	r3, [sp, #36]	; 0x24
 800f38e:	e768      	b.n	800f262 <_svfiprintf_r+0x4e>
 800f390:	fb0c 3202 	mla	r2, ip, r2, r3
 800f394:	460c      	mov	r4, r1
 800f396:	2001      	movs	r0, #1
 800f398:	e7a6      	b.n	800f2e8 <_svfiprintf_r+0xd4>
 800f39a:	2300      	movs	r3, #0
 800f39c:	3401      	adds	r4, #1
 800f39e:	9305      	str	r3, [sp, #20]
 800f3a0:	4619      	mov	r1, r3
 800f3a2:	f04f 0c0a 	mov.w	ip, #10
 800f3a6:	4620      	mov	r0, r4
 800f3a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f3ac:	3a30      	subs	r2, #48	; 0x30
 800f3ae:	2a09      	cmp	r2, #9
 800f3b0:	d903      	bls.n	800f3ba <_svfiprintf_r+0x1a6>
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d0c6      	beq.n	800f344 <_svfiprintf_r+0x130>
 800f3b6:	9105      	str	r1, [sp, #20]
 800f3b8:	e7c4      	b.n	800f344 <_svfiprintf_r+0x130>
 800f3ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800f3be:	4604      	mov	r4, r0
 800f3c0:	2301      	movs	r3, #1
 800f3c2:	e7f0      	b.n	800f3a6 <_svfiprintf_r+0x192>
 800f3c4:	ab03      	add	r3, sp, #12
 800f3c6:	9300      	str	r3, [sp, #0]
 800f3c8:	462a      	mov	r2, r5
 800f3ca:	4b0f      	ldr	r3, [pc, #60]	; (800f408 <_svfiprintf_r+0x1f4>)
 800f3cc:	a904      	add	r1, sp, #16
 800f3ce:	4638      	mov	r0, r7
 800f3d0:	f7fc fcf6 	bl	800bdc0 <_printf_float>
 800f3d4:	1c42      	adds	r2, r0, #1
 800f3d6:	4606      	mov	r6, r0
 800f3d8:	d1d6      	bne.n	800f388 <_svfiprintf_r+0x174>
 800f3da:	89ab      	ldrh	r3, [r5, #12]
 800f3dc:	065b      	lsls	r3, r3, #25
 800f3de:	f53f af2d 	bmi.w	800f23c <_svfiprintf_r+0x28>
 800f3e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f3e4:	b01d      	add	sp, #116	; 0x74
 800f3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3ea:	ab03      	add	r3, sp, #12
 800f3ec:	9300      	str	r3, [sp, #0]
 800f3ee:	462a      	mov	r2, r5
 800f3f0:	4b05      	ldr	r3, [pc, #20]	; (800f408 <_svfiprintf_r+0x1f4>)
 800f3f2:	a904      	add	r1, sp, #16
 800f3f4:	4638      	mov	r0, r7
 800f3f6:	f7fc ff6b 	bl	800c2d0 <_printf_i>
 800f3fa:	e7eb      	b.n	800f3d4 <_svfiprintf_r+0x1c0>
 800f3fc:	080111b9 	.word	0x080111b9
 800f400:	080111c3 	.word	0x080111c3
 800f404:	0800bdc1 	.word	0x0800bdc1
 800f408:	0800f161 	.word	0x0800f161
 800f40c:	080111bf 	.word	0x080111bf

0800f410 <__sflush_r>:
 800f410:	898a      	ldrh	r2, [r1, #12]
 800f412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f416:	4605      	mov	r5, r0
 800f418:	0710      	lsls	r0, r2, #28
 800f41a:	460c      	mov	r4, r1
 800f41c:	d458      	bmi.n	800f4d0 <__sflush_r+0xc0>
 800f41e:	684b      	ldr	r3, [r1, #4]
 800f420:	2b00      	cmp	r3, #0
 800f422:	dc05      	bgt.n	800f430 <__sflush_r+0x20>
 800f424:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f426:	2b00      	cmp	r3, #0
 800f428:	dc02      	bgt.n	800f430 <__sflush_r+0x20>
 800f42a:	2000      	movs	r0, #0
 800f42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f430:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f432:	2e00      	cmp	r6, #0
 800f434:	d0f9      	beq.n	800f42a <__sflush_r+0x1a>
 800f436:	2300      	movs	r3, #0
 800f438:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f43c:	682f      	ldr	r7, [r5, #0]
 800f43e:	6a21      	ldr	r1, [r4, #32]
 800f440:	602b      	str	r3, [r5, #0]
 800f442:	d032      	beq.n	800f4aa <__sflush_r+0x9a>
 800f444:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f446:	89a3      	ldrh	r3, [r4, #12]
 800f448:	075a      	lsls	r2, r3, #29
 800f44a:	d505      	bpl.n	800f458 <__sflush_r+0x48>
 800f44c:	6863      	ldr	r3, [r4, #4]
 800f44e:	1ac0      	subs	r0, r0, r3
 800f450:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f452:	b10b      	cbz	r3, 800f458 <__sflush_r+0x48>
 800f454:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f456:	1ac0      	subs	r0, r0, r3
 800f458:	2300      	movs	r3, #0
 800f45a:	4602      	mov	r2, r0
 800f45c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f45e:	6a21      	ldr	r1, [r4, #32]
 800f460:	4628      	mov	r0, r5
 800f462:	47b0      	blx	r6
 800f464:	1c43      	adds	r3, r0, #1
 800f466:	89a3      	ldrh	r3, [r4, #12]
 800f468:	d106      	bne.n	800f478 <__sflush_r+0x68>
 800f46a:	6829      	ldr	r1, [r5, #0]
 800f46c:	291d      	cmp	r1, #29
 800f46e:	d82b      	bhi.n	800f4c8 <__sflush_r+0xb8>
 800f470:	4a29      	ldr	r2, [pc, #164]	; (800f518 <__sflush_r+0x108>)
 800f472:	410a      	asrs	r2, r1
 800f474:	07d6      	lsls	r6, r2, #31
 800f476:	d427      	bmi.n	800f4c8 <__sflush_r+0xb8>
 800f478:	2200      	movs	r2, #0
 800f47a:	6062      	str	r2, [r4, #4]
 800f47c:	04d9      	lsls	r1, r3, #19
 800f47e:	6922      	ldr	r2, [r4, #16]
 800f480:	6022      	str	r2, [r4, #0]
 800f482:	d504      	bpl.n	800f48e <__sflush_r+0x7e>
 800f484:	1c42      	adds	r2, r0, #1
 800f486:	d101      	bne.n	800f48c <__sflush_r+0x7c>
 800f488:	682b      	ldr	r3, [r5, #0]
 800f48a:	b903      	cbnz	r3, 800f48e <__sflush_r+0x7e>
 800f48c:	6560      	str	r0, [r4, #84]	; 0x54
 800f48e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f490:	602f      	str	r7, [r5, #0]
 800f492:	2900      	cmp	r1, #0
 800f494:	d0c9      	beq.n	800f42a <__sflush_r+0x1a>
 800f496:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f49a:	4299      	cmp	r1, r3
 800f49c:	d002      	beq.n	800f4a4 <__sflush_r+0x94>
 800f49e:	4628      	mov	r0, r5
 800f4a0:	f7fe fa5e 	bl	800d960 <_free_r>
 800f4a4:	2000      	movs	r0, #0
 800f4a6:	6360      	str	r0, [r4, #52]	; 0x34
 800f4a8:	e7c0      	b.n	800f42c <__sflush_r+0x1c>
 800f4aa:	2301      	movs	r3, #1
 800f4ac:	4628      	mov	r0, r5
 800f4ae:	47b0      	blx	r6
 800f4b0:	1c41      	adds	r1, r0, #1
 800f4b2:	d1c8      	bne.n	800f446 <__sflush_r+0x36>
 800f4b4:	682b      	ldr	r3, [r5, #0]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d0c5      	beq.n	800f446 <__sflush_r+0x36>
 800f4ba:	2b1d      	cmp	r3, #29
 800f4bc:	d001      	beq.n	800f4c2 <__sflush_r+0xb2>
 800f4be:	2b16      	cmp	r3, #22
 800f4c0:	d101      	bne.n	800f4c6 <__sflush_r+0xb6>
 800f4c2:	602f      	str	r7, [r5, #0]
 800f4c4:	e7b1      	b.n	800f42a <__sflush_r+0x1a>
 800f4c6:	89a3      	ldrh	r3, [r4, #12]
 800f4c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4cc:	81a3      	strh	r3, [r4, #12]
 800f4ce:	e7ad      	b.n	800f42c <__sflush_r+0x1c>
 800f4d0:	690f      	ldr	r7, [r1, #16]
 800f4d2:	2f00      	cmp	r7, #0
 800f4d4:	d0a9      	beq.n	800f42a <__sflush_r+0x1a>
 800f4d6:	0793      	lsls	r3, r2, #30
 800f4d8:	680e      	ldr	r6, [r1, #0]
 800f4da:	bf08      	it	eq
 800f4dc:	694b      	ldreq	r3, [r1, #20]
 800f4de:	600f      	str	r7, [r1, #0]
 800f4e0:	bf18      	it	ne
 800f4e2:	2300      	movne	r3, #0
 800f4e4:	eba6 0807 	sub.w	r8, r6, r7
 800f4e8:	608b      	str	r3, [r1, #8]
 800f4ea:	f1b8 0f00 	cmp.w	r8, #0
 800f4ee:	dd9c      	ble.n	800f42a <__sflush_r+0x1a>
 800f4f0:	6a21      	ldr	r1, [r4, #32]
 800f4f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f4f4:	4643      	mov	r3, r8
 800f4f6:	463a      	mov	r2, r7
 800f4f8:	4628      	mov	r0, r5
 800f4fa:	47b0      	blx	r6
 800f4fc:	2800      	cmp	r0, #0
 800f4fe:	dc06      	bgt.n	800f50e <__sflush_r+0xfe>
 800f500:	89a3      	ldrh	r3, [r4, #12]
 800f502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f506:	81a3      	strh	r3, [r4, #12]
 800f508:	f04f 30ff 	mov.w	r0, #4294967295
 800f50c:	e78e      	b.n	800f42c <__sflush_r+0x1c>
 800f50e:	4407      	add	r7, r0
 800f510:	eba8 0800 	sub.w	r8, r8, r0
 800f514:	e7e9      	b.n	800f4ea <__sflush_r+0xda>
 800f516:	bf00      	nop
 800f518:	dfbffffe 	.word	0xdfbffffe

0800f51c <_fflush_r>:
 800f51c:	b538      	push	{r3, r4, r5, lr}
 800f51e:	690b      	ldr	r3, [r1, #16]
 800f520:	4605      	mov	r5, r0
 800f522:	460c      	mov	r4, r1
 800f524:	b913      	cbnz	r3, 800f52c <_fflush_r+0x10>
 800f526:	2500      	movs	r5, #0
 800f528:	4628      	mov	r0, r5
 800f52a:	bd38      	pop	{r3, r4, r5, pc}
 800f52c:	b118      	cbz	r0, 800f536 <_fflush_r+0x1a>
 800f52e:	6a03      	ldr	r3, [r0, #32]
 800f530:	b90b      	cbnz	r3, 800f536 <_fflush_r+0x1a>
 800f532:	f7fd fa6d 	bl	800ca10 <__sinit>
 800f536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d0f3      	beq.n	800f526 <_fflush_r+0xa>
 800f53e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f540:	07d0      	lsls	r0, r2, #31
 800f542:	d404      	bmi.n	800f54e <_fflush_r+0x32>
 800f544:	0599      	lsls	r1, r3, #22
 800f546:	d402      	bmi.n	800f54e <_fflush_r+0x32>
 800f548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f54a:	f7fd fc0b 	bl	800cd64 <__retarget_lock_acquire_recursive>
 800f54e:	4628      	mov	r0, r5
 800f550:	4621      	mov	r1, r4
 800f552:	f7ff ff5d 	bl	800f410 <__sflush_r>
 800f556:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f558:	07da      	lsls	r2, r3, #31
 800f55a:	4605      	mov	r5, r0
 800f55c:	d4e4      	bmi.n	800f528 <_fflush_r+0xc>
 800f55e:	89a3      	ldrh	r3, [r4, #12]
 800f560:	059b      	lsls	r3, r3, #22
 800f562:	d4e1      	bmi.n	800f528 <_fflush_r+0xc>
 800f564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f566:	f7fd fbfe 	bl	800cd66 <__retarget_lock_release_recursive>
 800f56a:	e7dd      	b.n	800f528 <_fflush_r+0xc>

0800f56c <__swhatbuf_r>:
 800f56c:	b570      	push	{r4, r5, r6, lr}
 800f56e:	460c      	mov	r4, r1
 800f570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f574:	2900      	cmp	r1, #0
 800f576:	b096      	sub	sp, #88	; 0x58
 800f578:	4615      	mov	r5, r2
 800f57a:	461e      	mov	r6, r3
 800f57c:	da0d      	bge.n	800f59a <__swhatbuf_r+0x2e>
 800f57e:	89a3      	ldrh	r3, [r4, #12]
 800f580:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f584:	f04f 0100 	mov.w	r1, #0
 800f588:	bf0c      	ite	eq
 800f58a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f58e:	2340      	movne	r3, #64	; 0x40
 800f590:	2000      	movs	r0, #0
 800f592:	6031      	str	r1, [r6, #0]
 800f594:	602b      	str	r3, [r5, #0]
 800f596:	b016      	add	sp, #88	; 0x58
 800f598:	bd70      	pop	{r4, r5, r6, pc}
 800f59a:	466a      	mov	r2, sp
 800f59c:	f000 f874 	bl	800f688 <_fstat_r>
 800f5a0:	2800      	cmp	r0, #0
 800f5a2:	dbec      	blt.n	800f57e <__swhatbuf_r+0x12>
 800f5a4:	9901      	ldr	r1, [sp, #4]
 800f5a6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f5aa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f5ae:	4259      	negs	r1, r3
 800f5b0:	4159      	adcs	r1, r3
 800f5b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f5b6:	e7eb      	b.n	800f590 <__swhatbuf_r+0x24>

0800f5b8 <__smakebuf_r>:
 800f5b8:	898b      	ldrh	r3, [r1, #12]
 800f5ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f5bc:	079d      	lsls	r5, r3, #30
 800f5be:	4606      	mov	r6, r0
 800f5c0:	460c      	mov	r4, r1
 800f5c2:	d507      	bpl.n	800f5d4 <__smakebuf_r+0x1c>
 800f5c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f5c8:	6023      	str	r3, [r4, #0]
 800f5ca:	6123      	str	r3, [r4, #16]
 800f5cc:	2301      	movs	r3, #1
 800f5ce:	6163      	str	r3, [r4, #20]
 800f5d0:	b002      	add	sp, #8
 800f5d2:	bd70      	pop	{r4, r5, r6, pc}
 800f5d4:	ab01      	add	r3, sp, #4
 800f5d6:	466a      	mov	r2, sp
 800f5d8:	f7ff ffc8 	bl	800f56c <__swhatbuf_r>
 800f5dc:	9900      	ldr	r1, [sp, #0]
 800f5de:	4605      	mov	r5, r0
 800f5e0:	4630      	mov	r0, r6
 800f5e2:	f7fe fa31 	bl	800da48 <_malloc_r>
 800f5e6:	b948      	cbnz	r0, 800f5fc <__smakebuf_r+0x44>
 800f5e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5ec:	059a      	lsls	r2, r3, #22
 800f5ee:	d4ef      	bmi.n	800f5d0 <__smakebuf_r+0x18>
 800f5f0:	f023 0303 	bic.w	r3, r3, #3
 800f5f4:	f043 0302 	orr.w	r3, r3, #2
 800f5f8:	81a3      	strh	r3, [r4, #12]
 800f5fa:	e7e3      	b.n	800f5c4 <__smakebuf_r+0xc>
 800f5fc:	89a3      	ldrh	r3, [r4, #12]
 800f5fe:	6020      	str	r0, [r4, #0]
 800f600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f604:	81a3      	strh	r3, [r4, #12]
 800f606:	9b00      	ldr	r3, [sp, #0]
 800f608:	6163      	str	r3, [r4, #20]
 800f60a:	9b01      	ldr	r3, [sp, #4]
 800f60c:	6120      	str	r0, [r4, #16]
 800f60e:	b15b      	cbz	r3, 800f628 <__smakebuf_r+0x70>
 800f610:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f614:	4630      	mov	r0, r6
 800f616:	f000 f849 	bl	800f6ac <_isatty_r>
 800f61a:	b128      	cbz	r0, 800f628 <__smakebuf_r+0x70>
 800f61c:	89a3      	ldrh	r3, [r4, #12]
 800f61e:	f023 0303 	bic.w	r3, r3, #3
 800f622:	f043 0301 	orr.w	r3, r3, #1
 800f626:	81a3      	strh	r3, [r4, #12]
 800f628:	89a3      	ldrh	r3, [r4, #12]
 800f62a:	431d      	orrs	r5, r3
 800f62c:	81a5      	strh	r5, [r4, #12]
 800f62e:	e7cf      	b.n	800f5d0 <__smakebuf_r+0x18>

0800f630 <memmove>:
 800f630:	4288      	cmp	r0, r1
 800f632:	b510      	push	{r4, lr}
 800f634:	eb01 0402 	add.w	r4, r1, r2
 800f638:	d902      	bls.n	800f640 <memmove+0x10>
 800f63a:	4284      	cmp	r4, r0
 800f63c:	4623      	mov	r3, r4
 800f63e:	d807      	bhi.n	800f650 <memmove+0x20>
 800f640:	1e43      	subs	r3, r0, #1
 800f642:	42a1      	cmp	r1, r4
 800f644:	d008      	beq.n	800f658 <memmove+0x28>
 800f646:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f64a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f64e:	e7f8      	b.n	800f642 <memmove+0x12>
 800f650:	4402      	add	r2, r0
 800f652:	4601      	mov	r1, r0
 800f654:	428a      	cmp	r2, r1
 800f656:	d100      	bne.n	800f65a <memmove+0x2a>
 800f658:	bd10      	pop	{r4, pc}
 800f65a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f65e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f662:	e7f7      	b.n	800f654 <memmove+0x24>

0800f664 <strncmp>:
 800f664:	b510      	push	{r4, lr}
 800f666:	b16a      	cbz	r2, 800f684 <strncmp+0x20>
 800f668:	3901      	subs	r1, #1
 800f66a:	1884      	adds	r4, r0, r2
 800f66c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f670:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f674:	429a      	cmp	r2, r3
 800f676:	d103      	bne.n	800f680 <strncmp+0x1c>
 800f678:	42a0      	cmp	r0, r4
 800f67a:	d001      	beq.n	800f680 <strncmp+0x1c>
 800f67c:	2a00      	cmp	r2, #0
 800f67e:	d1f5      	bne.n	800f66c <strncmp+0x8>
 800f680:	1ad0      	subs	r0, r2, r3
 800f682:	bd10      	pop	{r4, pc}
 800f684:	4610      	mov	r0, r2
 800f686:	e7fc      	b.n	800f682 <strncmp+0x1e>

0800f688 <_fstat_r>:
 800f688:	b538      	push	{r3, r4, r5, lr}
 800f68a:	4d07      	ldr	r5, [pc, #28]	; (800f6a8 <_fstat_r+0x20>)
 800f68c:	2300      	movs	r3, #0
 800f68e:	4604      	mov	r4, r0
 800f690:	4608      	mov	r0, r1
 800f692:	4611      	mov	r1, r2
 800f694:	602b      	str	r3, [r5, #0]
 800f696:	f7f2 fa1e 	bl	8001ad6 <_fstat>
 800f69a:	1c43      	adds	r3, r0, #1
 800f69c:	d102      	bne.n	800f6a4 <_fstat_r+0x1c>
 800f69e:	682b      	ldr	r3, [r5, #0]
 800f6a0:	b103      	cbz	r3, 800f6a4 <_fstat_r+0x1c>
 800f6a2:	6023      	str	r3, [r4, #0]
 800f6a4:	bd38      	pop	{r3, r4, r5, pc}
 800f6a6:	bf00      	nop
 800f6a8:	24000674 	.word	0x24000674

0800f6ac <_isatty_r>:
 800f6ac:	b538      	push	{r3, r4, r5, lr}
 800f6ae:	4d06      	ldr	r5, [pc, #24]	; (800f6c8 <_isatty_r+0x1c>)
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	4604      	mov	r4, r0
 800f6b4:	4608      	mov	r0, r1
 800f6b6:	602b      	str	r3, [r5, #0]
 800f6b8:	f7f2 fa1d 	bl	8001af6 <_isatty>
 800f6bc:	1c43      	adds	r3, r0, #1
 800f6be:	d102      	bne.n	800f6c6 <_isatty_r+0x1a>
 800f6c0:	682b      	ldr	r3, [r5, #0]
 800f6c2:	b103      	cbz	r3, 800f6c6 <_isatty_r+0x1a>
 800f6c4:	6023      	str	r3, [r4, #0]
 800f6c6:	bd38      	pop	{r3, r4, r5, pc}
 800f6c8:	24000674 	.word	0x24000674

0800f6cc <_sbrk_r>:
 800f6cc:	b538      	push	{r3, r4, r5, lr}
 800f6ce:	4d06      	ldr	r5, [pc, #24]	; (800f6e8 <_sbrk_r+0x1c>)
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	4604      	mov	r4, r0
 800f6d4:	4608      	mov	r0, r1
 800f6d6:	602b      	str	r3, [r5, #0]
 800f6d8:	f7f2 fa26 	bl	8001b28 <_sbrk>
 800f6dc:	1c43      	adds	r3, r0, #1
 800f6de:	d102      	bne.n	800f6e6 <_sbrk_r+0x1a>
 800f6e0:	682b      	ldr	r3, [r5, #0]
 800f6e2:	b103      	cbz	r3, 800f6e6 <_sbrk_r+0x1a>
 800f6e4:	6023      	str	r3, [r4, #0]
 800f6e6:	bd38      	pop	{r3, r4, r5, pc}
 800f6e8:	24000674 	.word	0x24000674

0800f6ec <memcpy>:
 800f6ec:	440a      	add	r2, r1
 800f6ee:	4291      	cmp	r1, r2
 800f6f0:	f100 33ff 	add.w	r3, r0, #4294967295
 800f6f4:	d100      	bne.n	800f6f8 <memcpy+0xc>
 800f6f6:	4770      	bx	lr
 800f6f8:	b510      	push	{r4, lr}
 800f6fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f6fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f702:	4291      	cmp	r1, r2
 800f704:	d1f9      	bne.n	800f6fa <memcpy+0xe>
 800f706:	bd10      	pop	{r4, pc}

0800f708 <nan>:
 800f708:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f710 <nan+0x8>
 800f70c:	4770      	bx	lr
 800f70e:	bf00      	nop
 800f710:	00000000 	.word	0x00000000
 800f714:	7ff80000 	.word	0x7ff80000

0800f718 <__assert_func>:
 800f718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f71a:	4614      	mov	r4, r2
 800f71c:	461a      	mov	r2, r3
 800f71e:	4b09      	ldr	r3, [pc, #36]	; (800f744 <__assert_func+0x2c>)
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	4605      	mov	r5, r0
 800f724:	68d8      	ldr	r0, [r3, #12]
 800f726:	b14c      	cbz	r4, 800f73c <__assert_func+0x24>
 800f728:	4b07      	ldr	r3, [pc, #28]	; (800f748 <__assert_func+0x30>)
 800f72a:	9100      	str	r1, [sp, #0]
 800f72c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f730:	4906      	ldr	r1, [pc, #24]	; (800f74c <__assert_func+0x34>)
 800f732:	462b      	mov	r3, r5
 800f734:	f000 fbca 	bl	800fecc <fiprintf>
 800f738:	f000 fbda 	bl	800fef0 <abort>
 800f73c:	4b04      	ldr	r3, [pc, #16]	; (800f750 <__assert_func+0x38>)
 800f73e:	461c      	mov	r4, r3
 800f740:	e7f3      	b.n	800f72a <__assert_func+0x12>
 800f742:	bf00      	nop
 800f744:	24000068 	.word	0x24000068
 800f748:	080111d2 	.word	0x080111d2
 800f74c:	080111df 	.word	0x080111df
 800f750:	0801120d 	.word	0x0801120d

0800f754 <_calloc_r>:
 800f754:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f756:	fba1 2402 	umull	r2, r4, r1, r2
 800f75a:	b94c      	cbnz	r4, 800f770 <_calloc_r+0x1c>
 800f75c:	4611      	mov	r1, r2
 800f75e:	9201      	str	r2, [sp, #4]
 800f760:	f7fe f972 	bl	800da48 <_malloc_r>
 800f764:	9a01      	ldr	r2, [sp, #4]
 800f766:	4605      	mov	r5, r0
 800f768:	b930      	cbnz	r0, 800f778 <_calloc_r+0x24>
 800f76a:	4628      	mov	r0, r5
 800f76c:	b003      	add	sp, #12
 800f76e:	bd30      	pop	{r4, r5, pc}
 800f770:	220c      	movs	r2, #12
 800f772:	6002      	str	r2, [r0, #0]
 800f774:	2500      	movs	r5, #0
 800f776:	e7f8      	b.n	800f76a <_calloc_r+0x16>
 800f778:	4621      	mov	r1, r4
 800f77a:	f7fd fa77 	bl	800cc6c <memset>
 800f77e:	e7f4      	b.n	800f76a <_calloc_r+0x16>

0800f780 <rshift>:
 800f780:	6903      	ldr	r3, [r0, #16]
 800f782:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f786:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f78a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f78e:	f100 0414 	add.w	r4, r0, #20
 800f792:	dd45      	ble.n	800f820 <rshift+0xa0>
 800f794:	f011 011f 	ands.w	r1, r1, #31
 800f798:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f79c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f7a0:	d10c      	bne.n	800f7bc <rshift+0x3c>
 800f7a2:	f100 0710 	add.w	r7, r0, #16
 800f7a6:	4629      	mov	r1, r5
 800f7a8:	42b1      	cmp	r1, r6
 800f7aa:	d334      	bcc.n	800f816 <rshift+0x96>
 800f7ac:	1a9b      	subs	r3, r3, r2
 800f7ae:	009b      	lsls	r3, r3, #2
 800f7b0:	1eea      	subs	r2, r5, #3
 800f7b2:	4296      	cmp	r6, r2
 800f7b4:	bf38      	it	cc
 800f7b6:	2300      	movcc	r3, #0
 800f7b8:	4423      	add	r3, r4
 800f7ba:	e015      	b.n	800f7e8 <rshift+0x68>
 800f7bc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f7c0:	f1c1 0820 	rsb	r8, r1, #32
 800f7c4:	40cf      	lsrs	r7, r1
 800f7c6:	f105 0e04 	add.w	lr, r5, #4
 800f7ca:	46a1      	mov	r9, r4
 800f7cc:	4576      	cmp	r6, lr
 800f7ce:	46f4      	mov	ip, lr
 800f7d0:	d815      	bhi.n	800f7fe <rshift+0x7e>
 800f7d2:	1a9a      	subs	r2, r3, r2
 800f7d4:	0092      	lsls	r2, r2, #2
 800f7d6:	3a04      	subs	r2, #4
 800f7d8:	3501      	adds	r5, #1
 800f7da:	42ae      	cmp	r6, r5
 800f7dc:	bf38      	it	cc
 800f7de:	2200      	movcc	r2, #0
 800f7e0:	18a3      	adds	r3, r4, r2
 800f7e2:	50a7      	str	r7, [r4, r2]
 800f7e4:	b107      	cbz	r7, 800f7e8 <rshift+0x68>
 800f7e6:	3304      	adds	r3, #4
 800f7e8:	1b1a      	subs	r2, r3, r4
 800f7ea:	42a3      	cmp	r3, r4
 800f7ec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f7f0:	bf08      	it	eq
 800f7f2:	2300      	moveq	r3, #0
 800f7f4:	6102      	str	r2, [r0, #16]
 800f7f6:	bf08      	it	eq
 800f7f8:	6143      	streq	r3, [r0, #20]
 800f7fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7fe:	f8dc c000 	ldr.w	ip, [ip]
 800f802:	fa0c fc08 	lsl.w	ip, ip, r8
 800f806:	ea4c 0707 	orr.w	r7, ip, r7
 800f80a:	f849 7b04 	str.w	r7, [r9], #4
 800f80e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f812:	40cf      	lsrs	r7, r1
 800f814:	e7da      	b.n	800f7cc <rshift+0x4c>
 800f816:	f851 cb04 	ldr.w	ip, [r1], #4
 800f81a:	f847 cf04 	str.w	ip, [r7, #4]!
 800f81e:	e7c3      	b.n	800f7a8 <rshift+0x28>
 800f820:	4623      	mov	r3, r4
 800f822:	e7e1      	b.n	800f7e8 <rshift+0x68>

0800f824 <__hexdig_fun>:
 800f824:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f828:	2b09      	cmp	r3, #9
 800f82a:	d802      	bhi.n	800f832 <__hexdig_fun+0xe>
 800f82c:	3820      	subs	r0, #32
 800f82e:	b2c0      	uxtb	r0, r0
 800f830:	4770      	bx	lr
 800f832:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f836:	2b05      	cmp	r3, #5
 800f838:	d801      	bhi.n	800f83e <__hexdig_fun+0x1a>
 800f83a:	3847      	subs	r0, #71	; 0x47
 800f83c:	e7f7      	b.n	800f82e <__hexdig_fun+0xa>
 800f83e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f842:	2b05      	cmp	r3, #5
 800f844:	d801      	bhi.n	800f84a <__hexdig_fun+0x26>
 800f846:	3827      	subs	r0, #39	; 0x27
 800f848:	e7f1      	b.n	800f82e <__hexdig_fun+0xa>
 800f84a:	2000      	movs	r0, #0
 800f84c:	4770      	bx	lr
	...

0800f850 <__gethex>:
 800f850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f854:	4617      	mov	r7, r2
 800f856:	680a      	ldr	r2, [r1, #0]
 800f858:	b085      	sub	sp, #20
 800f85a:	f102 0b02 	add.w	fp, r2, #2
 800f85e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f862:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f866:	4681      	mov	r9, r0
 800f868:	468a      	mov	sl, r1
 800f86a:	9302      	str	r3, [sp, #8]
 800f86c:	32fe      	adds	r2, #254	; 0xfe
 800f86e:	eb02 030b 	add.w	r3, r2, fp
 800f872:	46d8      	mov	r8, fp
 800f874:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800f878:	9301      	str	r3, [sp, #4]
 800f87a:	2830      	cmp	r0, #48	; 0x30
 800f87c:	d0f7      	beq.n	800f86e <__gethex+0x1e>
 800f87e:	f7ff ffd1 	bl	800f824 <__hexdig_fun>
 800f882:	4604      	mov	r4, r0
 800f884:	2800      	cmp	r0, #0
 800f886:	d138      	bne.n	800f8fa <__gethex+0xaa>
 800f888:	49a7      	ldr	r1, [pc, #668]	; (800fb28 <__gethex+0x2d8>)
 800f88a:	2201      	movs	r2, #1
 800f88c:	4640      	mov	r0, r8
 800f88e:	f7ff fee9 	bl	800f664 <strncmp>
 800f892:	4606      	mov	r6, r0
 800f894:	2800      	cmp	r0, #0
 800f896:	d169      	bne.n	800f96c <__gethex+0x11c>
 800f898:	f898 0001 	ldrb.w	r0, [r8, #1]
 800f89c:	465d      	mov	r5, fp
 800f89e:	f7ff ffc1 	bl	800f824 <__hexdig_fun>
 800f8a2:	2800      	cmp	r0, #0
 800f8a4:	d064      	beq.n	800f970 <__gethex+0x120>
 800f8a6:	465a      	mov	r2, fp
 800f8a8:	7810      	ldrb	r0, [r2, #0]
 800f8aa:	2830      	cmp	r0, #48	; 0x30
 800f8ac:	4690      	mov	r8, r2
 800f8ae:	f102 0201 	add.w	r2, r2, #1
 800f8b2:	d0f9      	beq.n	800f8a8 <__gethex+0x58>
 800f8b4:	f7ff ffb6 	bl	800f824 <__hexdig_fun>
 800f8b8:	2301      	movs	r3, #1
 800f8ba:	fab0 f480 	clz	r4, r0
 800f8be:	0964      	lsrs	r4, r4, #5
 800f8c0:	465e      	mov	r6, fp
 800f8c2:	9301      	str	r3, [sp, #4]
 800f8c4:	4642      	mov	r2, r8
 800f8c6:	4615      	mov	r5, r2
 800f8c8:	3201      	adds	r2, #1
 800f8ca:	7828      	ldrb	r0, [r5, #0]
 800f8cc:	f7ff ffaa 	bl	800f824 <__hexdig_fun>
 800f8d0:	2800      	cmp	r0, #0
 800f8d2:	d1f8      	bne.n	800f8c6 <__gethex+0x76>
 800f8d4:	4994      	ldr	r1, [pc, #592]	; (800fb28 <__gethex+0x2d8>)
 800f8d6:	2201      	movs	r2, #1
 800f8d8:	4628      	mov	r0, r5
 800f8da:	f7ff fec3 	bl	800f664 <strncmp>
 800f8de:	b978      	cbnz	r0, 800f900 <__gethex+0xb0>
 800f8e0:	b946      	cbnz	r6, 800f8f4 <__gethex+0xa4>
 800f8e2:	1c6e      	adds	r6, r5, #1
 800f8e4:	4632      	mov	r2, r6
 800f8e6:	4615      	mov	r5, r2
 800f8e8:	3201      	adds	r2, #1
 800f8ea:	7828      	ldrb	r0, [r5, #0]
 800f8ec:	f7ff ff9a 	bl	800f824 <__hexdig_fun>
 800f8f0:	2800      	cmp	r0, #0
 800f8f2:	d1f8      	bne.n	800f8e6 <__gethex+0x96>
 800f8f4:	1b73      	subs	r3, r6, r5
 800f8f6:	009e      	lsls	r6, r3, #2
 800f8f8:	e004      	b.n	800f904 <__gethex+0xb4>
 800f8fa:	2400      	movs	r4, #0
 800f8fc:	4626      	mov	r6, r4
 800f8fe:	e7e1      	b.n	800f8c4 <__gethex+0x74>
 800f900:	2e00      	cmp	r6, #0
 800f902:	d1f7      	bne.n	800f8f4 <__gethex+0xa4>
 800f904:	782b      	ldrb	r3, [r5, #0]
 800f906:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f90a:	2b50      	cmp	r3, #80	; 0x50
 800f90c:	d13d      	bne.n	800f98a <__gethex+0x13a>
 800f90e:	786b      	ldrb	r3, [r5, #1]
 800f910:	2b2b      	cmp	r3, #43	; 0x2b
 800f912:	d02f      	beq.n	800f974 <__gethex+0x124>
 800f914:	2b2d      	cmp	r3, #45	; 0x2d
 800f916:	d031      	beq.n	800f97c <__gethex+0x12c>
 800f918:	1c69      	adds	r1, r5, #1
 800f91a:	f04f 0b00 	mov.w	fp, #0
 800f91e:	7808      	ldrb	r0, [r1, #0]
 800f920:	f7ff ff80 	bl	800f824 <__hexdig_fun>
 800f924:	1e42      	subs	r2, r0, #1
 800f926:	b2d2      	uxtb	r2, r2
 800f928:	2a18      	cmp	r2, #24
 800f92a:	d82e      	bhi.n	800f98a <__gethex+0x13a>
 800f92c:	f1a0 0210 	sub.w	r2, r0, #16
 800f930:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f934:	f7ff ff76 	bl	800f824 <__hexdig_fun>
 800f938:	f100 3cff 	add.w	ip, r0, #4294967295
 800f93c:	fa5f fc8c 	uxtb.w	ip, ip
 800f940:	f1bc 0f18 	cmp.w	ip, #24
 800f944:	d91d      	bls.n	800f982 <__gethex+0x132>
 800f946:	f1bb 0f00 	cmp.w	fp, #0
 800f94a:	d000      	beq.n	800f94e <__gethex+0xfe>
 800f94c:	4252      	negs	r2, r2
 800f94e:	4416      	add	r6, r2
 800f950:	f8ca 1000 	str.w	r1, [sl]
 800f954:	b1dc      	cbz	r4, 800f98e <__gethex+0x13e>
 800f956:	9b01      	ldr	r3, [sp, #4]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	bf14      	ite	ne
 800f95c:	f04f 0800 	movne.w	r8, #0
 800f960:	f04f 0806 	moveq.w	r8, #6
 800f964:	4640      	mov	r0, r8
 800f966:	b005      	add	sp, #20
 800f968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f96c:	4645      	mov	r5, r8
 800f96e:	4626      	mov	r6, r4
 800f970:	2401      	movs	r4, #1
 800f972:	e7c7      	b.n	800f904 <__gethex+0xb4>
 800f974:	f04f 0b00 	mov.w	fp, #0
 800f978:	1ca9      	adds	r1, r5, #2
 800f97a:	e7d0      	b.n	800f91e <__gethex+0xce>
 800f97c:	f04f 0b01 	mov.w	fp, #1
 800f980:	e7fa      	b.n	800f978 <__gethex+0x128>
 800f982:	230a      	movs	r3, #10
 800f984:	fb03 0002 	mla	r0, r3, r2, r0
 800f988:	e7d0      	b.n	800f92c <__gethex+0xdc>
 800f98a:	4629      	mov	r1, r5
 800f98c:	e7e0      	b.n	800f950 <__gethex+0x100>
 800f98e:	eba5 0308 	sub.w	r3, r5, r8
 800f992:	3b01      	subs	r3, #1
 800f994:	4621      	mov	r1, r4
 800f996:	2b07      	cmp	r3, #7
 800f998:	dc0a      	bgt.n	800f9b0 <__gethex+0x160>
 800f99a:	4648      	mov	r0, r9
 800f99c:	f7fe f8e0 	bl	800db60 <_Balloc>
 800f9a0:	4604      	mov	r4, r0
 800f9a2:	b940      	cbnz	r0, 800f9b6 <__gethex+0x166>
 800f9a4:	4b61      	ldr	r3, [pc, #388]	; (800fb2c <__gethex+0x2dc>)
 800f9a6:	4602      	mov	r2, r0
 800f9a8:	21e4      	movs	r1, #228	; 0xe4
 800f9aa:	4861      	ldr	r0, [pc, #388]	; (800fb30 <__gethex+0x2e0>)
 800f9ac:	f7ff feb4 	bl	800f718 <__assert_func>
 800f9b0:	3101      	adds	r1, #1
 800f9b2:	105b      	asrs	r3, r3, #1
 800f9b4:	e7ef      	b.n	800f996 <__gethex+0x146>
 800f9b6:	f100 0a14 	add.w	sl, r0, #20
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	495a      	ldr	r1, [pc, #360]	; (800fb28 <__gethex+0x2d8>)
 800f9be:	f8cd a004 	str.w	sl, [sp, #4]
 800f9c2:	469b      	mov	fp, r3
 800f9c4:	45a8      	cmp	r8, r5
 800f9c6:	d342      	bcc.n	800fa4e <__gethex+0x1fe>
 800f9c8:	9801      	ldr	r0, [sp, #4]
 800f9ca:	f840 bb04 	str.w	fp, [r0], #4
 800f9ce:	eba0 000a 	sub.w	r0, r0, sl
 800f9d2:	1080      	asrs	r0, r0, #2
 800f9d4:	6120      	str	r0, [r4, #16]
 800f9d6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800f9da:	4658      	mov	r0, fp
 800f9dc:	f7fe f9b2 	bl	800dd44 <__hi0bits>
 800f9e0:	683d      	ldr	r5, [r7, #0]
 800f9e2:	eba8 0000 	sub.w	r0, r8, r0
 800f9e6:	42a8      	cmp	r0, r5
 800f9e8:	dd59      	ble.n	800fa9e <__gethex+0x24e>
 800f9ea:	eba0 0805 	sub.w	r8, r0, r5
 800f9ee:	4641      	mov	r1, r8
 800f9f0:	4620      	mov	r0, r4
 800f9f2:	f7fe fd3e 	bl	800e472 <__any_on>
 800f9f6:	4683      	mov	fp, r0
 800f9f8:	b1b8      	cbz	r0, 800fa2a <__gethex+0x1da>
 800f9fa:	f108 33ff 	add.w	r3, r8, #4294967295
 800f9fe:	1159      	asrs	r1, r3, #5
 800fa00:	f003 021f 	and.w	r2, r3, #31
 800fa04:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800fa08:	f04f 0b01 	mov.w	fp, #1
 800fa0c:	fa0b f202 	lsl.w	r2, fp, r2
 800fa10:	420a      	tst	r2, r1
 800fa12:	d00a      	beq.n	800fa2a <__gethex+0x1da>
 800fa14:	455b      	cmp	r3, fp
 800fa16:	dd06      	ble.n	800fa26 <__gethex+0x1d6>
 800fa18:	f1a8 0102 	sub.w	r1, r8, #2
 800fa1c:	4620      	mov	r0, r4
 800fa1e:	f7fe fd28 	bl	800e472 <__any_on>
 800fa22:	2800      	cmp	r0, #0
 800fa24:	d138      	bne.n	800fa98 <__gethex+0x248>
 800fa26:	f04f 0b02 	mov.w	fp, #2
 800fa2a:	4641      	mov	r1, r8
 800fa2c:	4620      	mov	r0, r4
 800fa2e:	f7ff fea7 	bl	800f780 <rshift>
 800fa32:	4446      	add	r6, r8
 800fa34:	68bb      	ldr	r3, [r7, #8]
 800fa36:	42b3      	cmp	r3, r6
 800fa38:	da41      	bge.n	800fabe <__gethex+0x26e>
 800fa3a:	4621      	mov	r1, r4
 800fa3c:	4648      	mov	r0, r9
 800fa3e:	f7fe f8cf 	bl	800dbe0 <_Bfree>
 800fa42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fa44:	2300      	movs	r3, #0
 800fa46:	6013      	str	r3, [r2, #0]
 800fa48:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800fa4c:	e78a      	b.n	800f964 <__gethex+0x114>
 800fa4e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800fa52:	2a2e      	cmp	r2, #46	; 0x2e
 800fa54:	d014      	beq.n	800fa80 <__gethex+0x230>
 800fa56:	2b20      	cmp	r3, #32
 800fa58:	d106      	bne.n	800fa68 <__gethex+0x218>
 800fa5a:	9b01      	ldr	r3, [sp, #4]
 800fa5c:	f843 bb04 	str.w	fp, [r3], #4
 800fa60:	f04f 0b00 	mov.w	fp, #0
 800fa64:	9301      	str	r3, [sp, #4]
 800fa66:	465b      	mov	r3, fp
 800fa68:	7828      	ldrb	r0, [r5, #0]
 800fa6a:	9303      	str	r3, [sp, #12]
 800fa6c:	f7ff feda 	bl	800f824 <__hexdig_fun>
 800fa70:	9b03      	ldr	r3, [sp, #12]
 800fa72:	f000 000f 	and.w	r0, r0, #15
 800fa76:	4098      	lsls	r0, r3
 800fa78:	ea4b 0b00 	orr.w	fp, fp, r0
 800fa7c:	3304      	adds	r3, #4
 800fa7e:	e7a1      	b.n	800f9c4 <__gethex+0x174>
 800fa80:	45a8      	cmp	r8, r5
 800fa82:	d8e8      	bhi.n	800fa56 <__gethex+0x206>
 800fa84:	2201      	movs	r2, #1
 800fa86:	4628      	mov	r0, r5
 800fa88:	9303      	str	r3, [sp, #12]
 800fa8a:	f7ff fdeb 	bl	800f664 <strncmp>
 800fa8e:	4926      	ldr	r1, [pc, #152]	; (800fb28 <__gethex+0x2d8>)
 800fa90:	9b03      	ldr	r3, [sp, #12]
 800fa92:	2800      	cmp	r0, #0
 800fa94:	d1df      	bne.n	800fa56 <__gethex+0x206>
 800fa96:	e795      	b.n	800f9c4 <__gethex+0x174>
 800fa98:	f04f 0b03 	mov.w	fp, #3
 800fa9c:	e7c5      	b.n	800fa2a <__gethex+0x1da>
 800fa9e:	da0b      	bge.n	800fab8 <__gethex+0x268>
 800faa0:	eba5 0800 	sub.w	r8, r5, r0
 800faa4:	4621      	mov	r1, r4
 800faa6:	4642      	mov	r2, r8
 800faa8:	4648      	mov	r0, r9
 800faaa:	f7fe fab3 	bl	800e014 <__lshift>
 800faae:	eba6 0608 	sub.w	r6, r6, r8
 800fab2:	4604      	mov	r4, r0
 800fab4:	f100 0a14 	add.w	sl, r0, #20
 800fab8:	f04f 0b00 	mov.w	fp, #0
 800fabc:	e7ba      	b.n	800fa34 <__gethex+0x1e4>
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	42b3      	cmp	r3, r6
 800fac2:	dd73      	ble.n	800fbac <__gethex+0x35c>
 800fac4:	1b9e      	subs	r6, r3, r6
 800fac6:	42b5      	cmp	r5, r6
 800fac8:	dc34      	bgt.n	800fb34 <__gethex+0x2e4>
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	2b02      	cmp	r3, #2
 800face:	d023      	beq.n	800fb18 <__gethex+0x2c8>
 800fad0:	2b03      	cmp	r3, #3
 800fad2:	d025      	beq.n	800fb20 <__gethex+0x2d0>
 800fad4:	2b01      	cmp	r3, #1
 800fad6:	d115      	bne.n	800fb04 <__gethex+0x2b4>
 800fad8:	42b5      	cmp	r5, r6
 800fada:	d113      	bne.n	800fb04 <__gethex+0x2b4>
 800fadc:	2d01      	cmp	r5, #1
 800fade:	d10b      	bne.n	800faf8 <__gethex+0x2a8>
 800fae0:	9a02      	ldr	r2, [sp, #8]
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	6013      	str	r3, [r2, #0]
 800fae6:	2301      	movs	r3, #1
 800fae8:	6123      	str	r3, [r4, #16]
 800faea:	f8ca 3000 	str.w	r3, [sl]
 800faee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800faf0:	f04f 0862 	mov.w	r8, #98	; 0x62
 800faf4:	601c      	str	r4, [r3, #0]
 800faf6:	e735      	b.n	800f964 <__gethex+0x114>
 800faf8:	1e69      	subs	r1, r5, #1
 800fafa:	4620      	mov	r0, r4
 800fafc:	f7fe fcb9 	bl	800e472 <__any_on>
 800fb00:	2800      	cmp	r0, #0
 800fb02:	d1ed      	bne.n	800fae0 <__gethex+0x290>
 800fb04:	4621      	mov	r1, r4
 800fb06:	4648      	mov	r0, r9
 800fb08:	f7fe f86a 	bl	800dbe0 <_Bfree>
 800fb0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fb0e:	2300      	movs	r3, #0
 800fb10:	6013      	str	r3, [r2, #0]
 800fb12:	f04f 0850 	mov.w	r8, #80	; 0x50
 800fb16:	e725      	b.n	800f964 <__gethex+0x114>
 800fb18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d1f2      	bne.n	800fb04 <__gethex+0x2b4>
 800fb1e:	e7df      	b.n	800fae0 <__gethex+0x290>
 800fb20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d1dc      	bne.n	800fae0 <__gethex+0x290>
 800fb26:	e7ed      	b.n	800fb04 <__gethex+0x2b4>
 800fb28:	08011064 	.word	0x08011064
 800fb2c:	08010efd 	.word	0x08010efd
 800fb30:	0801120e 	.word	0x0801120e
 800fb34:	f106 38ff 	add.w	r8, r6, #4294967295
 800fb38:	f1bb 0f00 	cmp.w	fp, #0
 800fb3c:	d133      	bne.n	800fba6 <__gethex+0x356>
 800fb3e:	f1b8 0f00 	cmp.w	r8, #0
 800fb42:	d004      	beq.n	800fb4e <__gethex+0x2fe>
 800fb44:	4641      	mov	r1, r8
 800fb46:	4620      	mov	r0, r4
 800fb48:	f7fe fc93 	bl	800e472 <__any_on>
 800fb4c:	4683      	mov	fp, r0
 800fb4e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800fb52:	2301      	movs	r3, #1
 800fb54:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800fb58:	f008 081f 	and.w	r8, r8, #31
 800fb5c:	fa03 f308 	lsl.w	r3, r3, r8
 800fb60:	4213      	tst	r3, r2
 800fb62:	4631      	mov	r1, r6
 800fb64:	4620      	mov	r0, r4
 800fb66:	bf18      	it	ne
 800fb68:	f04b 0b02 	orrne.w	fp, fp, #2
 800fb6c:	1bad      	subs	r5, r5, r6
 800fb6e:	f7ff fe07 	bl	800f780 <rshift>
 800fb72:	687e      	ldr	r6, [r7, #4]
 800fb74:	f04f 0802 	mov.w	r8, #2
 800fb78:	f1bb 0f00 	cmp.w	fp, #0
 800fb7c:	d04a      	beq.n	800fc14 <__gethex+0x3c4>
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	2b02      	cmp	r3, #2
 800fb82:	d016      	beq.n	800fbb2 <__gethex+0x362>
 800fb84:	2b03      	cmp	r3, #3
 800fb86:	d018      	beq.n	800fbba <__gethex+0x36a>
 800fb88:	2b01      	cmp	r3, #1
 800fb8a:	d109      	bne.n	800fba0 <__gethex+0x350>
 800fb8c:	f01b 0f02 	tst.w	fp, #2
 800fb90:	d006      	beq.n	800fba0 <__gethex+0x350>
 800fb92:	f8da 3000 	ldr.w	r3, [sl]
 800fb96:	ea4b 0b03 	orr.w	fp, fp, r3
 800fb9a:	f01b 0f01 	tst.w	fp, #1
 800fb9e:	d10f      	bne.n	800fbc0 <__gethex+0x370>
 800fba0:	f048 0810 	orr.w	r8, r8, #16
 800fba4:	e036      	b.n	800fc14 <__gethex+0x3c4>
 800fba6:	f04f 0b01 	mov.w	fp, #1
 800fbaa:	e7d0      	b.n	800fb4e <__gethex+0x2fe>
 800fbac:	f04f 0801 	mov.w	r8, #1
 800fbb0:	e7e2      	b.n	800fb78 <__gethex+0x328>
 800fbb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fbb4:	f1c3 0301 	rsb	r3, r3, #1
 800fbb8:	930f      	str	r3, [sp, #60]	; 0x3c
 800fbba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d0ef      	beq.n	800fba0 <__gethex+0x350>
 800fbc0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fbc4:	f104 0214 	add.w	r2, r4, #20
 800fbc8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800fbcc:	9301      	str	r3, [sp, #4]
 800fbce:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	4694      	mov	ip, r2
 800fbd6:	f852 1b04 	ldr.w	r1, [r2], #4
 800fbda:	f1b1 3fff 	cmp.w	r1, #4294967295
 800fbde:	d01e      	beq.n	800fc1e <__gethex+0x3ce>
 800fbe0:	3101      	adds	r1, #1
 800fbe2:	f8cc 1000 	str.w	r1, [ip]
 800fbe6:	f1b8 0f02 	cmp.w	r8, #2
 800fbea:	f104 0214 	add.w	r2, r4, #20
 800fbee:	d13d      	bne.n	800fc6c <__gethex+0x41c>
 800fbf0:	683b      	ldr	r3, [r7, #0]
 800fbf2:	3b01      	subs	r3, #1
 800fbf4:	42ab      	cmp	r3, r5
 800fbf6:	d10b      	bne.n	800fc10 <__gethex+0x3c0>
 800fbf8:	1169      	asrs	r1, r5, #5
 800fbfa:	2301      	movs	r3, #1
 800fbfc:	f005 051f 	and.w	r5, r5, #31
 800fc00:	fa03 f505 	lsl.w	r5, r3, r5
 800fc04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fc08:	421d      	tst	r5, r3
 800fc0a:	bf18      	it	ne
 800fc0c:	f04f 0801 	movne.w	r8, #1
 800fc10:	f048 0820 	orr.w	r8, r8, #32
 800fc14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fc16:	601c      	str	r4, [r3, #0]
 800fc18:	9b02      	ldr	r3, [sp, #8]
 800fc1a:	601e      	str	r6, [r3, #0]
 800fc1c:	e6a2      	b.n	800f964 <__gethex+0x114>
 800fc1e:	4290      	cmp	r0, r2
 800fc20:	f842 3c04 	str.w	r3, [r2, #-4]
 800fc24:	d8d6      	bhi.n	800fbd4 <__gethex+0x384>
 800fc26:	68a2      	ldr	r2, [r4, #8]
 800fc28:	4593      	cmp	fp, r2
 800fc2a:	db17      	blt.n	800fc5c <__gethex+0x40c>
 800fc2c:	6861      	ldr	r1, [r4, #4]
 800fc2e:	4648      	mov	r0, r9
 800fc30:	3101      	adds	r1, #1
 800fc32:	f7fd ff95 	bl	800db60 <_Balloc>
 800fc36:	4682      	mov	sl, r0
 800fc38:	b918      	cbnz	r0, 800fc42 <__gethex+0x3f2>
 800fc3a:	4b1b      	ldr	r3, [pc, #108]	; (800fca8 <__gethex+0x458>)
 800fc3c:	4602      	mov	r2, r0
 800fc3e:	2184      	movs	r1, #132	; 0x84
 800fc40:	e6b3      	b.n	800f9aa <__gethex+0x15a>
 800fc42:	6922      	ldr	r2, [r4, #16]
 800fc44:	3202      	adds	r2, #2
 800fc46:	f104 010c 	add.w	r1, r4, #12
 800fc4a:	0092      	lsls	r2, r2, #2
 800fc4c:	300c      	adds	r0, #12
 800fc4e:	f7ff fd4d 	bl	800f6ec <memcpy>
 800fc52:	4621      	mov	r1, r4
 800fc54:	4648      	mov	r0, r9
 800fc56:	f7fd ffc3 	bl	800dbe0 <_Bfree>
 800fc5a:	4654      	mov	r4, sl
 800fc5c:	6922      	ldr	r2, [r4, #16]
 800fc5e:	1c51      	adds	r1, r2, #1
 800fc60:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800fc64:	6121      	str	r1, [r4, #16]
 800fc66:	2101      	movs	r1, #1
 800fc68:	6151      	str	r1, [r2, #20]
 800fc6a:	e7bc      	b.n	800fbe6 <__gethex+0x396>
 800fc6c:	6921      	ldr	r1, [r4, #16]
 800fc6e:	4559      	cmp	r1, fp
 800fc70:	dd0b      	ble.n	800fc8a <__gethex+0x43a>
 800fc72:	2101      	movs	r1, #1
 800fc74:	4620      	mov	r0, r4
 800fc76:	f7ff fd83 	bl	800f780 <rshift>
 800fc7a:	68bb      	ldr	r3, [r7, #8]
 800fc7c:	3601      	adds	r6, #1
 800fc7e:	42b3      	cmp	r3, r6
 800fc80:	f6ff aedb 	blt.w	800fa3a <__gethex+0x1ea>
 800fc84:	f04f 0801 	mov.w	r8, #1
 800fc88:	e7c2      	b.n	800fc10 <__gethex+0x3c0>
 800fc8a:	f015 051f 	ands.w	r5, r5, #31
 800fc8e:	d0f9      	beq.n	800fc84 <__gethex+0x434>
 800fc90:	9b01      	ldr	r3, [sp, #4]
 800fc92:	441a      	add	r2, r3
 800fc94:	f1c5 0520 	rsb	r5, r5, #32
 800fc98:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800fc9c:	f7fe f852 	bl	800dd44 <__hi0bits>
 800fca0:	42a8      	cmp	r0, r5
 800fca2:	dbe6      	blt.n	800fc72 <__gethex+0x422>
 800fca4:	e7ee      	b.n	800fc84 <__gethex+0x434>
 800fca6:	bf00      	nop
 800fca8:	08010efd 	.word	0x08010efd

0800fcac <L_shift>:
 800fcac:	f1c2 0208 	rsb	r2, r2, #8
 800fcb0:	0092      	lsls	r2, r2, #2
 800fcb2:	b570      	push	{r4, r5, r6, lr}
 800fcb4:	f1c2 0620 	rsb	r6, r2, #32
 800fcb8:	6843      	ldr	r3, [r0, #4]
 800fcba:	6804      	ldr	r4, [r0, #0]
 800fcbc:	fa03 f506 	lsl.w	r5, r3, r6
 800fcc0:	432c      	orrs	r4, r5
 800fcc2:	40d3      	lsrs	r3, r2
 800fcc4:	6004      	str	r4, [r0, #0]
 800fcc6:	f840 3f04 	str.w	r3, [r0, #4]!
 800fcca:	4288      	cmp	r0, r1
 800fccc:	d3f4      	bcc.n	800fcb8 <L_shift+0xc>
 800fcce:	bd70      	pop	{r4, r5, r6, pc}

0800fcd0 <__match>:
 800fcd0:	b530      	push	{r4, r5, lr}
 800fcd2:	6803      	ldr	r3, [r0, #0]
 800fcd4:	3301      	adds	r3, #1
 800fcd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fcda:	b914      	cbnz	r4, 800fce2 <__match+0x12>
 800fcdc:	6003      	str	r3, [r0, #0]
 800fcde:	2001      	movs	r0, #1
 800fce0:	bd30      	pop	{r4, r5, pc}
 800fce2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fce6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800fcea:	2d19      	cmp	r5, #25
 800fcec:	bf98      	it	ls
 800fcee:	3220      	addls	r2, #32
 800fcf0:	42a2      	cmp	r2, r4
 800fcf2:	d0f0      	beq.n	800fcd6 <__match+0x6>
 800fcf4:	2000      	movs	r0, #0
 800fcf6:	e7f3      	b.n	800fce0 <__match+0x10>

0800fcf8 <__hexnan>:
 800fcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcfc:	680b      	ldr	r3, [r1, #0]
 800fcfe:	6801      	ldr	r1, [r0, #0]
 800fd00:	115e      	asrs	r6, r3, #5
 800fd02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fd06:	f013 031f 	ands.w	r3, r3, #31
 800fd0a:	b087      	sub	sp, #28
 800fd0c:	bf18      	it	ne
 800fd0e:	3604      	addne	r6, #4
 800fd10:	2500      	movs	r5, #0
 800fd12:	1f37      	subs	r7, r6, #4
 800fd14:	4682      	mov	sl, r0
 800fd16:	4690      	mov	r8, r2
 800fd18:	9301      	str	r3, [sp, #4]
 800fd1a:	f846 5c04 	str.w	r5, [r6, #-4]
 800fd1e:	46b9      	mov	r9, r7
 800fd20:	463c      	mov	r4, r7
 800fd22:	9502      	str	r5, [sp, #8]
 800fd24:	46ab      	mov	fp, r5
 800fd26:	784a      	ldrb	r2, [r1, #1]
 800fd28:	1c4b      	adds	r3, r1, #1
 800fd2a:	9303      	str	r3, [sp, #12]
 800fd2c:	b342      	cbz	r2, 800fd80 <__hexnan+0x88>
 800fd2e:	4610      	mov	r0, r2
 800fd30:	9105      	str	r1, [sp, #20]
 800fd32:	9204      	str	r2, [sp, #16]
 800fd34:	f7ff fd76 	bl	800f824 <__hexdig_fun>
 800fd38:	2800      	cmp	r0, #0
 800fd3a:	d14f      	bne.n	800fddc <__hexnan+0xe4>
 800fd3c:	9a04      	ldr	r2, [sp, #16]
 800fd3e:	9905      	ldr	r1, [sp, #20]
 800fd40:	2a20      	cmp	r2, #32
 800fd42:	d818      	bhi.n	800fd76 <__hexnan+0x7e>
 800fd44:	9b02      	ldr	r3, [sp, #8]
 800fd46:	459b      	cmp	fp, r3
 800fd48:	dd13      	ble.n	800fd72 <__hexnan+0x7a>
 800fd4a:	454c      	cmp	r4, r9
 800fd4c:	d206      	bcs.n	800fd5c <__hexnan+0x64>
 800fd4e:	2d07      	cmp	r5, #7
 800fd50:	dc04      	bgt.n	800fd5c <__hexnan+0x64>
 800fd52:	462a      	mov	r2, r5
 800fd54:	4649      	mov	r1, r9
 800fd56:	4620      	mov	r0, r4
 800fd58:	f7ff ffa8 	bl	800fcac <L_shift>
 800fd5c:	4544      	cmp	r4, r8
 800fd5e:	d950      	bls.n	800fe02 <__hexnan+0x10a>
 800fd60:	2300      	movs	r3, #0
 800fd62:	f1a4 0904 	sub.w	r9, r4, #4
 800fd66:	f844 3c04 	str.w	r3, [r4, #-4]
 800fd6a:	f8cd b008 	str.w	fp, [sp, #8]
 800fd6e:	464c      	mov	r4, r9
 800fd70:	461d      	mov	r5, r3
 800fd72:	9903      	ldr	r1, [sp, #12]
 800fd74:	e7d7      	b.n	800fd26 <__hexnan+0x2e>
 800fd76:	2a29      	cmp	r2, #41	; 0x29
 800fd78:	d155      	bne.n	800fe26 <__hexnan+0x12e>
 800fd7a:	3102      	adds	r1, #2
 800fd7c:	f8ca 1000 	str.w	r1, [sl]
 800fd80:	f1bb 0f00 	cmp.w	fp, #0
 800fd84:	d04f      	beq.n	800fe26 <__hexnan+0x12e>
 800fd86:	454c      	cmp	r4, r9
 800fd88:	d206      	bcs.n	800fd98 <__hexnan+0xa0>
 800fd8a:	2d07      	cmp	r5, #7
 800fd8c:	dc04      	bgt.n	800fd98 <__hexnan+0xa0>
 800fd8e:	462a      	mov	r2, r5
 800fd90:	4649      	mov	r1, r9
 800fd92:	4620      	mov	r0, r4
 800fd94:	f7ff ff8a 	bl	800fcac <L_shift>
 800fd98:	4544      	cmp	r4, r8
 800fd9a:	d934      	bls.n	800fe06 <__hexnan+0x10e>
 800fd9c:	f1a8 0204 	sub.w	r2, r8, #4
 800fda0:	4623      	mov	r3, r4
 800fda2:	f853 1b04 	ldr.w	r1, [r3], #4
 800fda6:	f842 1f04 	str.w	r1, [r2, #4]!
 800fdaa:	429f      	cmp	r7, r3
 800fdac:	d2f9      	bcs.n	800fda2 <__hexnan+0xaa>
 800fdae:	1b3b      	subs	r3, r7, r4
 800fdb0:	f023 0303 	bic.w	r3, r3, #3
 800fdb4:	3304      	adds	r3, #4
 800fdb6:	3e03      	subs	r6, #3
 800fdb8:	3401      	adds	r4, #1
 800fdba:	42a6      	cmp	r6, r4
 800fdbc:	bf38      	it	cc
 800fdbe:	2304      	movcc	r3, #4
 800fdc0:	4443      	add	r3, r8
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	f843 2b04 	str.w	r2, [r3], #4
 800fdc8:	429f      	cmp	r7, r3
 800fdca:	d2fb      	bcs.n	800fdc4 <__hexnan+0xcc>
 800fdcc:	683b      	ldr	r3, [r7, #0]
 800fdce:	b91b      	cbnz	r3, 800fdd8 <__hexnan+0xe0>
 800fdd0:	4547      	cmp	r7, r8
 800fdd2:	d126      	bne.n	800fe22 <__hexnan+0x12a>
 800fdd4:	2301      	movs	r3, #1
 800fdd6:	603b      	str	r3, [r7, #0]
 800fdd8:	2005      	movs	r0, #5
 800fdda:	e025      	b.n	800fe28 <__hexnan+0x130>
 800fddc:	3501      	adds	r5, #1
 800fdde:	2d08      	cmp	r5, #8
 800fde0:	f10b 0b01 	add.w	fp, fp, #1
 800fde4:	dd06      	ble.n	800fdf4 <__hexnan+0xfc>
 800fde6:	4544      	cmp	r4, r8
 800fde8:	d9c3      	bls.n	800fd72 <__hexnan+0x7a>
 800fdea:	2300      	movs	r3, #0
 800fdec:	f844 3c04 	str.w	r3, [r4, #-4]
 800fdf0:	2501      	movs	r5, #1
 800fdf2:	3c04      	subs	r4, #4
 800fdf4:	6822      	ldr	r2, [r4, #0]
 800fdf6:	f000 000f 	and.w	r0, r0, #15
 800fdfa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800fdfe:	6020      	str	r0, [r4, #0]
 800fe00:	e7b7      	b.n	800fd72 <__hexnan+0x7a>
 800fe02:	2508      	movs	r5, #8
 800fe04:	e7b5      	b.n	800fd72 <__hexnan+0x7a>
 800fe06:	9b01      	ldr	r3, [sp, #4]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d0df      	beq.n	800fdcc <__hexnan+0xd4>
 800fe0c:	f1c3 0320 	rsb	r3, r3, #32
 800fe10:	f04f 32ff 	mov.w	r2, #4294967295
 800fe14:	40da      	lsrs	r2, r3
 800fe16:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800fe1a:	4013      	ands	r3, r2
 800fe1c:	f846 3c04 	str.w	r3, [r6, #-4]
 800fe20:	e7d4      	b.n	800fdcc <__hexnan+0xd4>
 800fe22:	3f04      	subs	r7, #4
 800fe24:	e7d2      	b.n	800fdcc <__hexnan+0xd4>
 800fe26:	2004      	movs	r0, #4
 800fe28:	b007      	add	sp, #28
 800fe2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fe2e <__ascii_mbtowc>:
 800fe2e:	b082      	sub	sp, #8
 800fe30:	b901      	cbnz	r1, 800fe34 <__ascii_mbtowc+0x6>
 800fe32:	a901      	add	r1, sp, #4
 800fe34:	b142      	cbz	r2, 800fe48 <__ascii_mbtowc+0x1a>
 800fe36:	b14b      	cbz	r3, 800fe4c <__ascii_mbtowc+0x1e>
 800fe38:	7813      	ldrb	r3, [r2, #0]
 800fe3a:	600b      	str	r3, [r1, #0]
 800fe3c:	7812      	ldrb	r2, [r2, #0]
 800fe3e:	1e10      	subs	r0, r2, #0
 800fe40:	bf18      	it	ne
 800fe42:	2001      	movne	r0, #1
 800fe44:	b002      	add	sp, #8
 800fe46:	4770      	bx	lr
 800fe48:	4610      	mov	r0, r2
 800fe4a:	e7fb      	b.n	800fe44 <__ascii_mbtowc+0x16>
 800fe4c:	f06f 0001 	mvn.w	r0, #1
 800fe50:	e7f8      	b.n	800fe44 <__ascii_mbtowc+0x16>

0800fe52 <_realloc_r>:
 800fe52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe56:	4680      	mov	r8, r0
 800fe58:	4614      	mov	r4, r2
 800fe5a:	460e      	mov	r6, r1
 800fe5c:	b921      	cbnz	r1, 800fe68 <_realloc_r+0x16>
 800fe5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe62:	4611      	mov	r1, r2
 800fe64:	f7fd bdf0 	b.w	800da48 <_malloc_r>
 800fe68:	b92a      	cbnz	r2, 800fe76 <_realloc_r+0x24>
 800fe6a:	f7fd fd79 	bl	800d960 <_free_r>
 800fe6e:	4625      	mov	r5, r4
 800fe70:	4628      	mov	r0, r5
 800fe72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe76:	f000 f842 	bl	800fefe <_malloc_usable_size_r>
 800fe7a:	4284      	cmp	r4, r0
 800fe7c:	4607      	mov	r7, r0
 800fe7e:	d802      	bhi.n	800fe86 <_realloc_r+0x34>
 800fe80:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fe84:	d812      	bhi.n	800feac <_realloc_r+0x5a>
 800fe86:	4621      	mov	r1, r4
 800fe88:	4640      	mov	r0, r8
 800fe8a:	f7fd fddd 	bl	800da48 <_malloc_r>
 800fe8e:	4605      	mov	r5, r0
 800fe90:	2800      	cmp	r0, #0
 800fe92:	d0ed      	beq.n	800fe70 <_realloc_r+0x1e>
 800fe94:	42bc      	cmp	r4, r7
 800fe96:	4622      	mov	r2, r4
 800fe98:	4631      	mov	r1, r6
 800fe9a:	bf28      	it	cs
 800fe9c:	463a      	movcs	r2, r7
 800fe9e:	f7ff fc25 	bl	800f6ec <memcpy>
 800fea2:	4631      	mov	r1, r6
 800fea4:	4640      	mov	r0, r8
 800fea6:	f7fd fd5b 	bl	800d960 <_free_r>
 800feaa:	e7e1      	b.n	800fe70 <_realloc_r+0x1e>
 800feac:	4635      	mov	r5, r6
 800feae:	e7df      	b.n	800fe70 <_realloc_r+0x1e>

0800feb0 <__ascii_wctomb>:
 800feb0:	b149      	cbz	r1, 800fec6 <__ascii_wctomb+0x16>
 800feb2:	2aff      	cmp	r2, #255	; 0xff
 800feb4:	bf85      	ittet	hi
 800feb6:	238a      	movhi	r3, #138	; 0x8a
 800feb8:	6003      	strhi	r3, [r0, #0]
 800feba:	700a      	strbls	r2, [r1, #0]
 800febc:	f04f 30ff 	movhi.w	r0, #4294967295
 800fec0:	bf98      	it	ls
 800fec2:	2001      	movls	r0, #1
 800fec4:	4770      	bx	lr
 800fec6:	4608      	mov	r0, r1
 800fec8:	4770      	bx	lr
	...

0800fecc <fiprintf>:
 800fecc:	b40e      	push	{r1, r2, r3}
 800fece:	b503      	push	{r0, r1, lr}
 800fed0:	4601      	mov	r1, r0
 800fed2:	ab03      	add	r3, sp, #12
 800fed4:	4805      	ldr	r0, [pc, #20]	; (800feec <fiprintf+0x20>)
 800fed6:	f853 2b04 	ldr.w	r2, [r3], #4
 800feda:	6800      	ldr	r0, [r0, #0]
 800fedc:	9301      	str	r3, [sp, #4]
 800fede:	f000 f83f 	bl	800ff60 <_vfiprintf_r>
 800fee2:	b002      	add	sp, #8
 800fee4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fee8:	b003      	add	sp, #12
 800feea:	4770      	bx	lr
 800feec:	24000068 	.word	0x24000068

0800fef0 <abort>:
 800fef0:	b508      	push	{r3, lr}
 800fef2:	2006      	movs	r0, #6
 800fef4:	f000 f976 	bl	80101e4 <raise>
 800fef8:	2001      	movs	r0, #1
 800fefa:	f7f1 fdb9 	bl	8001a70 <_exit>

0800fefe <_malloc_usable_size_r>:
 800fefe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff02:	1f18      	subs	r0, r3, #4
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	bfbc      	itt	lt
 800ff08:	580b      	ldrlt	r3, [r1, r0]
 800ff0a:	18c0      	addlt	r0, r0, r3
 800ff0c:	4770      	bx	lr

0800ff0e <__sfputc_r>:
 800ff0e:	6893      	ldr	r3, [r2, #8]
 800ff10:	3b01      	subs	r3, #1
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	b410      	push	{r4}
 800ff16:	6093      	str	r3, [r2, #8]
 800ff18:	da08      	bge.n	800ff2c <__sfputc_r+0x1e>
 800ff1a:	6994      	ldr	r4, [r2, #24]
 800ff1c:	42a3      	cmp	r3, r4
 800ff1e:	db01      	blt.n	800ff24 <__sfputc_r+0x16>
 800ff20:	290a      	cmp	r1, #10
 800ff22:	d103      	bne.n	800ff2c <__sfputc_r+0x1e>
 800ff24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff28:	f7fc be0b 	b.w	800cb42 <__swbuf_r>
 800ff2c:	6813      	ldr	r3, [r2, #0]
 800ff2e:	1c58      	adds	r0, r3, #1
 800ff30:	6010      	str	r0, [r2, #0]
 800ff32:	7019      	strb	r1, [r3, #0]
 800ff34:	4608      	mov	r0, r1
 800ff36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff3a:	4770      	bx	lr

0800ff3c <__sfputs_r>:
 800ff3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff3e:	4606      	mov	r6, r0
 800ff40:	460f      	mov	r7, r1
 800ff42:	4614      	mov	r4, r2
 800ff44:	18d5      	adds	r5, r2, r3
 800ff46:	42ac      	cmp	r4, r5
 800ff48:	d101      	bne.n	800ff4e <__sfputs_r+0x12>
 800ff4a:	2000      	movs	r0, #0
 800ff4c:	e007      	b.n	800ff5e <__sfputs_r+0x22>
 800ff4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff52:	463a      	mov	r2, r7
 800ff54:	4630      	mov	r0, r6
 800ff56:	f7ff ffda 	bl	800ff0e <__sfputc_r>
 800ff5a:	1c43      	adds	r3, r0, #1
 800ff5c:	d1f3      	bne.n	800ff46 <__sfputs_r+0xa>
 800ff5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ff60 <_vfiprintf_r>:
 800ff60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff64:	460d      	mov	r5, r1
 800ff66:	b09d      	sub	sp, #116	; 0x74
 800ff68:	4614      	mov	r4, r2
 800ff6a:	4698      	mov	r8, r3
 800ff6c:	4606      	mov	r6, r0
 800ff6e:	b118      	cbz	r0, 800ff78 <_vfiprintf_r+0x18>
 800ff70:	6a03      	ldr	r3, [r0, #32]
 800ff72:	b90b      	cbnz	r3, 800ff78 <_vfiprintf_r+0x18>
 800ff74:	f7fc fd4c 	bl	800ca10 <__sinit>
 800ff78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff7a:	07d9      	lsls	r1, r3, #31
 800ff7c:	d405      	bmi.n	800ff8a <_vfiprintf_r+0x2a>
 800ff7e:	89ab      	ldrh	r3, [r5, #12]
 800ff80:	059a      	lsls	r2, r3, #22
 800ff82:	d402      	bmi.n	800ff8a <_vfiprintf_r+0x2a>
 800ff84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff86:	f7fc feed 	bl	800cd64 <__retarget_lock_acquire_recursive>
 800ff8a:	89ab      	ldrh	r3, [r5, #12]
 800ff8c:	071b      	lsls	r3, r3, #28
 800ff8e:	d501      	bpl.n	800ff94 <_vfiprintf_r+0x34>
 800ff90:	692b      	ldr	r3, [r5, #16]
 800ff92:	b99b      	cbnz	r3, 800ffbc <_vfiprintf_r+0x5c>
 800ff94:	4629      	mov	r1, r5
 800ff96:	4630      	mov	r0, r6
 800ff98:	f7fc fe10 	bl	800cbbc <__swsetup_r>
 800ff9c:	b170      	cbz	r0, 800ffbc <_vfiprintf_r+0x5c>
 800ff9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ffa0:	07dc      	lsls	r4, r3, #31
 800ffa2:	d504      	bpl.n	800ffae <_vfiprintf_r+0x4e>
 800ffa4:	f04f 30ff 	mov.w	r0, #4294967295
 800ffa8:	b01d      	add	sp, #116	; 0x74
 800ffaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffae:	89ab      	ldrh	r3, [r5, #12]
 800ffb0:	0598      	lsls	r0, r3, #22
 800ffb2:	d4f7      	bmi.n	800ffa4 <_vfiprintf_r+0x44>
 800ffb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ffb6:	f7fc fed6 	bl	800cd66 <__retarget_lock_release_recursive>
 800ffba:	e7f3      	b.n	800ffa4 <_vfiprintf_r+0x44>
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	9309      	str	r3, [sp, #36]	; 0x24
 800ffc0:	2320      	movs	r3, #32
 800ffc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ffc6:	f8cd 800c 	str.w	r8, [sp, #12]
 800ffca:	2330      	movs	r3, #48	; 0x30
 800ffcc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010180 <_vfiprintf_r+0x220>
 800ffd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ffd4:	f04f 0901 	mov.w	r9, #1
 800ffd8:	4623      	mov	r3, r4
 800ffda:	469a      	mov	sl, r3
 800ffdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ffe0:	b10a      	cbz	r2, 800ffe6 <_vfiprintf_r+0x86>
 800ffe2:	2a25      	cmp	r2, #37	; 0x25
 800ffe4:	d1f9      	bne.n	800ffda <_vfiprintf_r+0x7a>
 800ffe6:	ebba 0b04 	subs.w	fp, sl, r4
 800ffea:	d00b      	beq.n	8010004 <_vfiprintf_r+0xa4>
 800ffec:	465b      	mov	r3, fp
 800ffee:	4622      	mov	r2, r4
 800fff0:	4629      	mov	r1, r5
 800fff2:	4630      	mov	r0, r6
 800fff4:	f7ff ffa2 	bl	800ff3c <__sfputs_r>
 800fff8:	3001      	adds	r0, #1
 800fffa:	f000 80a9 	beq.w	8010150 <_vfiprintf_r+0x1f0>
 800fffe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010000:	445a      	add	r2, fp
 8010002:	9209      	str	r2, [sp, #36]	; 0x24
 8010004:	f89a 3000 	ldrb.w	r3, [sl]
 8010008:	2b00      	cmp	r3, #0
 801000a:	f000 80a1 	beq.w	8010150 <_vfiprintf_r+0x1f0>
 801000e:	2300      	movs	r3, #0
 8010010:	f04f 32ff 	mov.w	r2, #4294967295
 8010014:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010018:	f10a 0a01 	add.w	sl, sl, #1
 801001c:	9304      	str	r3, [sp, #16]
 801001e:	9307      	str	r3, [sp, #28]
 8010020:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010024:	931a      	str	r3, [sp, #104]	; 0x68
 8010026:	4654      	mov	r4, sl
 8010028:	2205      	movs	r2, #5
 801002a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801002e:	4854      	ldr	r0, [pc, #336]	; (8010180 <_vfiprintf_r+0x220>)
 8010030:	f7f0 f956 	bl	80002e0 <memchr>
 8010034:	9a04      	ldr	r2, [sp, #16]
 8010036:	b9d8      	cbnz	r0, 8010070 <_vfiprintf_r+0x110>
 8010038:	06d1      	lsls	r1, r2, #27
 801003a:	bf44      	itt	mi
 801003c:	2320      	movmi	r3, #32
 801003e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010042:	0713      	lsls	r3, r2, #28
 8010044:	bf44      	itt	mi
 8010046:	232b      	movmi	r3, #43	; 0x2b
 8010048:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801004c:	f89a 3000 	ldrb.w	r3, [sl]
 8010050:	2b2a      	cmp	r3, #42	; 0x2a
 8010052:	d015      	beq.n	8010080 <_vfiprintf_r+0x120>
 8010054:	9a07      	ldr	r2, [sp, #28]
 8010056:	4654      	mov	r4, sl
 8010058:	2000      	movs	r0, #0
 801005a:	f04f 0c0a 	mov.w	ip, #10
 801005e:	4621      	mov	r1, r4
 8010060:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010064:	3b30      	subs	r3, #48	; 0x30
 8010066:	2b09      	cmp	r3, #9
 8010068:	d94d      	bls.n	8010106 <_vfiprintf_r+0x1a6>
 801006a:	b1b0      	cbz	r0, 801009a <_vfiprintf_r+0x13a>
 801006c:	9207      	str	r2, [sp, #28]
 801006e:	e014      	b.n	801009a <_vfiprintf_r+0x13a>
 8010070:	eba0 0308 	sub.w	r3, r0, r8
 8010074:	fa09 f303 	lsl.w	r3, r9, r3
 8010078:	4313      	orrs	r3, r2
 801007a:	9304      	str	r3, [sp, #16]
 801007c:	46a2      	mov	sl, r4
 801007e:	e7d2      	b.n	8010026 <_vfiprintf_r+0xc6>
 8010080:	9b03      	ldr	r3, [sp, #12]
 8010082:	1d19      	adds	r1, r3, #4
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	9103      	str	r1, [sp, #12]
 8010088:	2b00      	cmp	r3, #0
 801008a:	bfbb      	ittet	lt
 801008c:	425b      	neglt	r3, r3
 801008e:	f042 0202 	orrlt.w	r2, r2, #2
 8010092:	9307      	strge	r3, [sp, #28]
 8010094:	9307      	strlt	r3, [sp, #28]
 8010096:	bfb8      	it	lt
 8010098:	9204      	strlt	r2, [sp, #16]
 801009a:	7823      	ldrb	r3, [r4, #0]
 801009c:	2b2e      	cmp	r3, #46	; 0x2e
 801009e:	d10c      	bne.n	80100ba <_vfiprintf_r+0x15a>
 80100a0:	7863      	ldrb	r3, [r4, #1]
 80100a2:	2b2a      	cmp	r3, #42	; 0x2a
 80100a4:	d134      	bne.n	8010110 <_vfiprintf_r+0x1b0>
 80100a6:	9b03      	ldr	r3, [sp, #12]
 80100a8:	1d1a      	adds	r2, r3, #4
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	9203      	str	r2, [sp, #12]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	bfb8      	it	lt
 80100b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80100b6:	3402      	adds	r4, #2
 80100b8:	9305      	str	r3, [sp, #20]
 80100ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010190 <_vfiprintf_r+0x230>
 80100be:	7821      	ldrb	r1, [r4, #0]
 80100c0:	2203      	movs	r2, #3
 80100c2:	4650      	mov	r0, sl
 80100c4:	f7f0 f90c 	bl	80002e0 <memchr>
 80100c8:	b138      	cbz	r0, 80100da <_vfiprintf_r+0x17a>
 80100ca:	9b04      	ldr	r3, [sp, #16]
 80100cc:	eba0 000a 	sub.w	r0, r0, sl
 80100d0:	2240      	movs	r2, #64	; 0x40
 80100d2:	4082      	lsls	r2, r0
 80100d4:	4313      	orrs	r3, r2
 80100d6:	3401      	adds	r4, #1
 80100d8:	9304      	str	r3, [sp, #16]
 80100da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100de:	4829      	ldr	r0, [pc, #164]	; (8010184 <_vfiprintf_r+0x224>)
 80100e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80100e4:	2206      	movs	r2, #6
 80100e6:	f7f0 f8fb 	bl	80002e0 <memchr>
 80100ea:	2800      	cmp	r0, #0
 80100ec:	d03f      	beq.n	801016e <_vfiprintf_r+0x20e>
 80100ee:	4b26      	ldr	r3, [pc, #152]	; (8010188 <_vfiprintf_r+0x228>)
 80100f0:	bb1b      	cbnz	r3, 801013a <_vfiprintf_r+0x1da>
 80100f2:	9b03      	ldr	r3, [sp, #12]
 80100f4:	3307      	adds	r3, #7
 80100f6:	f023 0307 	bic.w	r3, r3, #7
 80100fa:	3308      	adds	r3, #8
 80100fc:	9303      	str	r3, [sp, #12]
 80100fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010100:	443b      	add	r3, r7
 8010102:	9309      	str	r3, [sp, #36]	; 0x24
 8010104:	e768      	b.n	800ffd8 <_vfiprintf_r+0x78>
 8010106:	fb0c 3202 	mla	r2, ip, r2, r3
 801010a:	460c      	mov	r4, r1
 801010c:	2001      	movs	r0, #1
 801010e:	e7a6      	b.n	801005e <_vfiprintf_r+0xfe>
 8010110:	2300      	movs	r3, #0
 8010112:	3401      	adds	r4, #1
 8010114:	9305      	str	r3, [sp, #20]
 8010116:	4619      	mov	r1, r3
 8010118:	f04f 0c0a 	mov.w	ip, #10
 801011c:	4620      	mov	r0, r4
 801011e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010122:	3a30      	subs	r2, #48	; 0x30
 8010124:	2a09      	cmp	r2, #9
 8010126:	d903      	bls.n	8010130 <_vfiprintf_r+0x1d0>
 8010128:	2b00      	cmp	r3, #0
 801012a:	d0c6      	beq.n	80100ba <_vfiprintf_r+0x15a>
 801012c:	9105      	str	r1, [sp, #20]
 801012e:	e7c4      	b.n	80100ba <_vfiprintf_r+0x15a>
 8010130:	fb0c 2101 	mla	r1, ip, r1, r2
 8010134:	4604      	mov	r4, r0
 8010136:	2301      	movs	r3, #1
 8010138:	e7f0      	b.n	801011c <_vfiprintf_r+0x1bc>
 801013a:	ab03      	add	r3, sp, #12
 801013c:	9300      	str	r3, [sp, #0]
 801013e:	462a      	mov	r2, r5
 8010140:	4b12      	ldr	r3, [pc, #72]	; (801018c <_vfiprintf_r+0x22c>)
 8010142:	a904      	add	r1, sp, #16
 8010144:	4630      	mov	r0, r6
 8010146:	f7fb fe3b 	bl	800bdc0 <_printf_float>
 801014a:	4607      	mov	r7, r0
 801014c:	1c78      	adds	r0, r7, #1
 801014e:	d1d6      	bne.n	80100fe <_vfiprintf_r+0x19e>
 8010150:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010152:	07d9      	lsls	r1, r3, #31
 8010154:	d405      	bmi.n	8010162 <_vfiprintf_r+0x202>
 8010156:	89ab      	ldrh	r3, [r5, #12]
 8010158:	059a      	lsls	r2, r3, #22
 801015a:	d402      	bmi.n	8010162 <_vfiprintf_r+0x202>
 801015c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801015e:	f7fc fe02 	bl	800cd66 <__retarget_lock_release_recursive>
 8010162:	89ab      	ldrh	r3, [r5, #12]
 8010164:	065b      	lsls	r3, r3, #25
 8010166:	f53f af1d 	bmi.w	800ffa4 <_vfiprintf_r+0x44>
 801016a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801016c:	e71c      	b.n	800ffa8 <_vfiprintf_r+0x48>
 801016e:	ab03      	add	r3, sp, #12
 8010170:	9300      	str	r3, [sp, #0]
 8010172:	462a      	mov	r2, r5
 8010174:	4b05      	ldr	r3, [pc, #20]	; (801018c <_vfiprintf_r+0x22c>)
 8010176:	a904      	add	r1, sp, #16
 8010178:	4630      	mov	r0, r6
 801017a:	f7fc f8a9 	bl	800c2d0 <_printf_i>
 801017e:	e7e4      	b.n	801014a <_vfiprintf_r+0x1ea>
 8010180:	080111b9 	.word	0x080111b9
 8010184:	080111c3 	.word	0x080111c3
 8010188:	0800bdc1 	.word	0x0800bdc1
 801018c:	0800ff3d 	.word	0x0800ff3d
 8010190:	080111bf 	.word	0x080111bf

08010194 <_raise_r>:
 8010194:	291f      	cmp	r1, #31
 8010196:	b538      	push	{r3, r4, r5, lr}
 8010198:	4604      	mov	r4, r0
 801019a:	460d      	mov	r5, r1
 801019c:	d904      	bls.n	80101a8 <_raise_r+0x14>
 801019e:	2316      	movs	r3, #22
 80101a0:	6003      	str	r3, [r0, #0]
 80101a2:	f04f 30ff 	mov.w	r0, #4294967295
 80101a6:	bd38      	pop	{r3, r4, r5, pc}
 80101a8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80101aa:	b112      	cbz	r2, 80101b2 <_raise_r+0x1e>
 80101ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80101b0:	b94b      	cbnz	r3, 80101c6 <_raise_r+0x32>
 80101b2:	4620      	mov	r0, r4
 80101b4:	f000 f830 	bl	8010218 <_getpid_r>
 80101b8:	462a      	mov	r2, r5
 80101ba:	4601      	mov	r1, r0
 80101bc:	4620      	mov	r0, r4
 80101be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80101c2:	f000 b817 	b.w	80101f4 <_kill_r>
 80101c6:	2b01      	cmp	r3, #1
 80101c8:	d00a      	beq.n	80101e0 <_raise_r+0x4c>
 80101ca:	1c59      	adds	r1, r3, #1
 80101cc:	d103      	bne.n	80101d6 <_raise_r+0x42>
 80101ce:	2316      	movs	r3, #22
 80101d0:	6003      	str	r3, [r0, #0]
 80101d2:	2001      	movs	r0, #1
 80101d4:	e7e7      	b.n	80101a6 <_raise_r+0x12>
 80101d6:	2400      	movs	r4, #0
 80101d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80101dc:	4628      	mov	r0, r5
 80101de:	4798      	blx	r3
 80101e0:	2000      	movs	r0, #0
 80101e2:	e7e0      	b.n	80101a6 <_raise_r+0x12>

080101e4 <raise>:
 80101e4:	4b02      	ldr	r3, [pc, #8]	; (80101f0 <raise+0xc>)
 80101e6:	4601      	mov	r1, r0
 80101e8:	6818      	ldr	r0, [r3, #0]
 80101ea:	f7ff bfd3 	b.w	8010194 <_raise_r>
 80101ee:	bf00      	nop
 80101f0:	24000068 	.word	0x24000068

080101f4 <_kill_r>:
 80101f4:	b538      	push	{r3, r4, r5, lr}
 80101f6:	4d07      	ldr	r5, [pc, #28]	; (8010214 <_kill_r+0x20>)
 80101f8:	2300      	movs	r3, #0
 80101fa:	4604      	mov	r4, r0
 80101fc:	4608      	mov	r0, r1
 80101fe:	4611      	mov	r1, r2
 8010200:	602b      	str	r3, [r5, #0]
 8010202:	f7f1 fc25 	bl	8001a50 <_kill>
 8010206:	1c43      	adds	r3, r0, #1
 8010208:	d102      	bne.n	8010210 <_kill_r+0x1c>
 801020a:	682b      	ldr	r3, [r5, #0]
 801020c:	b103      	cbz	r3, 8010210 <_kill_r+0x1c>
 801020e:	6023      	str	r3, [r4, #0]
 8010210:	bd38      	pop	{r3, r4, r5, pc}
 8010212:	bf00      	nop
 8010214:	24000674 	.word	0x24000674

08010218 <_getpid_r>:
 8010218:	f7f1 bc12 	b.w	8001a40 <_getpid>
 801021c:	0000      	movs	r0, r0
	...

08010220 <sin>:
 8010220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010222:	eeb0 7b40 	vmov.f64	d7, d0
 8010226:	ee17 3a90 	vmov	r3, s15
 801022a:	4a21      	ldr	r2, [pc, #132]	; (80102b0 <sin+0x90>)
 801022c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010230:	4293      	cmp	r3, r2
 8010232:	dc07      	bgt.n	8010244 <sin+0x24>
 8010234:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 80102a8 <sin+0x88>
 8010238:	2000      	movs	r0, #0
 801023a:	b005      	add	sp, #20
 801023c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010240:	f000 b8a6 	b.w	8010390 <__kernel_sin>
 8010244:	4a1b      	ldr	r2, [pc, #108]	; (80102b4 <sin+0x94>)
 8010246:	4293      	cmp	r3, r2
 8010248:	dd04      	ble.n	8010254 <sin+0x34>
 801024a:	ee30 0b40 	vsub.f64	d0, d0, d0
 801024e:	b005      	add	sp, #20
 8010250:	f85d fb04 	ldr.w	pc, [sp], #4
 8010254:	4668      	mov	r0, sp
 8010256:	f000 f8f3 	bl	8010440 <__ieee754_rem_pio2>
 801025a:	f000 0003 	and.w	r0, r0, #3
 801025e:	2801      	cmp	r0, #1
 8010260:	d00a      	beq.n	8010278 <sin+0x58>
 8010262:	2802      	cmp	r0, #2
 8010264:	d00f      	beq.n	8010286 <sin+0x66>
 8010266:	b9c0      	cbnz	r0, 801029a <sin+0x7a>
 8010268:	ed9d 1b02 	vldr	d1, [sp, #8]
 801026c:	ed9d 0b00 	vldr	d0, [sp]
 8010270:	2001      	movs	r0, #1
 8010272:	f000 f88d 	bl	8010390 <__kernel_sin>
 8010276:	e7ea      	b.n	801024e <sin+0x2e>
 8010278:	ed9d 1b02 	vldr	d1, [sp, #8]
 801027c:	ed9d 0b00 	vldr	d0, [sp]
 8010280:	f000 f81a 	bl	80102b8 <__kernel_cos>
 8010284:	e7e3      	b.n	801024e <sin+0x2e>
 8010286:	ed9d 1b02 	vldr	d1, [sp, #8]
 801028a:	ed9d 0b00 	vldr	d0, [sp]
 801028e:	2001      	movs	r0, #1
 8010290:	f000 f87e 	bl	8010390 <__kernel_sin>
 8010294:	eeb1 0b40 	vneg.f64	d0, d0
 8010298:	e7d9      	b.n	801024e <sin+0x2e>
 801029a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801029e:	ed9d 0b00 	vldr	d0, [sp]
 80102a2:	f000 f809 	bl	80102b8 <__kernel_cos>
 80102a6:	e7f5      	b.n	8010294 <sin+0x74>
	...
 80102b0:	3fe921fb 	.word	0x3fe921fb
 80102b4:	7fefffff 	.word	0x7fefffff

080102b8 <__kernel_cos>:
 80102b8:	ee10 1a90 	vmov	r1, s1
 80102bc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80102c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80102c4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 80102c8:	da05      	bge.n	80102d6 <__kernel_cos+0x1e>
 80102ca:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80102ce:	ee17 3a90 	vmov	r3, s15
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d03d      	beq.n	8010352 <__kernel_cos+0x9a>
 80102d6:	ee20 5b00 	vmul.f64	d5, d0, d0
 80102da:	ee21 1b40 	vnmul.f64	d1, d1, d0
 80102de:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 8010358 <__kernel_cos+0xa0>
 80102e2:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 8010360 <__kernel_cos+0xa8>
 80102e6:	eea5 4b07 	vfma.f64	d4, d5, d7
 80102ea:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8010368 <__kernel_cos+0xb0>
 80102ee:	eea4 7b05 	vfma.f64	d7, d4, d5
 80102f2:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 8010370 <__kernel_cos+0xb8>
 80102f6:	eea7 4b05 	vfma.f64	d4, d7, d5
 80102fa:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8010378 <__kernel_cos+0xc0>
 80102fe:	4b22      	ldr	r3, [pc, #136]	; (8010388 <__kernel_cos+0xd0>)
 8010300:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010304:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 8010380 <__kernel_cos+0xc8>
 8010308:	4299      	cmp	r1, r3
 801030a:	eea7 4b05 	vfma.f64	d4, d7, d5
 801030e:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8010312:	ee24 4b05 	vmul.f64	d4, d4, d5
 8010316:	ee25 7b07 	vmul.f64	d7, d5, d7
 801031a:	eea5 1b04 	vfma.f64	d1, d5, d4
 801031e:	dc04      	bgt.n	801032a <__kernel_cos+0x72>
 8010320:	ee37 7b41 	vsub.f64	d7, d7, d1
 8010324:	ee36 0b47 	vsub.f64	d0, d6, d7
 8010328:	4770      	bx	lr
 801032a:	4b18      	ldr	r3, [pc, #96]	; (801038c <__kernel_cos+0xd4>)
 801032c:	4299      	cmp	r1, r3
 801032e:	dc0d      	bgt.n	801034c <__kernel_cos+0x94>
 8010330:	2200      	movs	r2, #0
 8010332:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8010336:	ec43 2b15 	vmov	d5, r2, r3
 801033a:	ee36 0b45 	vsub.f64	d0, d6, d5
 801033e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8010342:	ee37 7b41 	vsub.f64	d7, d7, d1
 8010346:	ee30 0b47 	vsub.f64	d0, d0, d7
 801034a:	4770      	bx	lr
 801034c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8010350:	e7f3      	b.n	801033a <__kernel_cos+0x82>
 8010352:	eeb0 0b46 	vmov.f64	d0, d6
 8010356:	4770      	bx	lr
 8010358:	be8838d4 	.word	0xbe8838d4
 801035c:	bda8fae9 	.word	0xbda8fae9
 8010360:	bdb4b1c4 	.word	0xbdb4b1c4
 8010364:	3e21ee9e 	.word	0x3e21ee9e
 8010368:	809c52ad 	.word	0x809c52ad
 801036c:	be927e4f 	.word	0xbe927e4f
 8010370:	19cb1590 	.word	0x19cb1590
 8010374:	3efa01a0 	.word	0x3efa01a0
 8010378:	16c15177 	.word	0x16c15177
 801037c:	bf56c16c 	.word	0xbf56c16c
 8010380:	5555554c 	.word	0x5555554c
 8010384:	3fa55555 	.word	0x3fa55555
 8010388:	3fd33332 	.word	0x3fd33332
 801038c:	3fe90000 	.word	0x3fe90000

08010390 <__kernel_sin>:
 8010390:	ee10 3a90 	vmov	r3, s1
 8010394:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010398:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801039c:	da04      	bge.n	80103a8 <__kernel_sin+0x18>
 801039e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80103a2:	ee17 3a90 	vmov	r3, s15
 80103a6:	b35b      	cbz	r3, 8010400 <__kernel_sin+0x70>
 80103a8:	ee20 6b00 	vmul.f64	d6, d0, d0
 80103ac:	ee20 5b06 	vmul.f64	d5, d0, d6
 80103b0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8010408 <__kernel_sin+0x78>
 80103b4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010410 <__kernel_sin+0x80>
 80103b8:	eea6 4b07 	vfma.f64	d4, d6, d7
 80103bc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8010418 <__kernel_sin+0x88>
 80103c0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80103c4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010420 <__kernel_sin+0x90>
 80103c8:	eea7 4b06 	vfma.f64	d4, d7, d6
 80103cc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8010428 <__kernel_sin+0x98>
 80103d0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80103d4:	b930      	cbnz	r0, 80103e4 <__kernel_sin+0x54>
 80103d6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010430 <__kernel_sin+0xa0>
 80103da:	eea6 4b07 	vfma.f64	d4, d6, d7
 80103de:	eea4 0b05 	vfma.f64	d0, d4, d5
 80103e2:	4770      	bx	lr
 80103e4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80103e8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80103ec:	eea1 7b04 	vfma.f64	d7, d1, d4
 80103f0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80103f4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8010438 <__kernel_sin+0xa8>
 80103f8:	eea5 1b07 	vfma.f64	d1, d5, d7
 80103fc:	ee30 0b41 	vsub.f64	d0, d0, d1
 8010400:	4770      	bx	lr
 8010402:	bf00      	nop
 8010404:	f3af 8000 	nop.w
 8010408:	5acfd57c 	.word	0x5acfd57c
 801040c:	3de5d93a 	.word	0x3de5d93a
 8010410:	8a2b9ceb 	.word	0x8a2b9ceb
 8010414:	be5ae5e6 	.word	0xbe5ae5e6
 8010418:	57b1fe7d 	.word	0x57b1fe7d
 801041c:	3ec71de3 	.word	0x3ec71de3
 8010420:	19c161d5 	.word	0x19c161d5
 8010424:	bf2a01a0 	.word	0xbf2a01a0
 8010428:	1110f8a6 	.word	0x1110f8a6
 801042c:	3f811111 	.word	0x3f811111
 8010430:	55555549 	.word	0x55555549
 8010434:	bfc55555 	.word	0xbfc55555
 8010438:	55555549 	.word	0x55555549
 801043c:	3fc55555 	.word	0x3fc55555

08010440 <__ieee754_rem_pio2>:
 8010440:	b570      	push	{r4, r5, r6, lr}
 8010442:	eeb0 7b40 	vmov.f64	d7, d0
 8010446:	ee17 5a90 	vmov	r5, s15
 801044a:	4b99      	ldr	r3, [pc, #612]	; (80106b0 <__ieee754_rem_pio2+0x270>)
 801044c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010450:	429e      	cmp	r6, r3
 8010452:	b088      	sub	sp, #32
 8010454:	4604      	mov	r4, r0
 8010456:	dc07      	bgt.n	8010468 <__ieee754_rem_pio2+0x28>
 8010458:	2200      	movs	r2, #0
 801045a:	2300      	movs	r3, #0
 801045c:	ed84 0b00 	vstr	d0, [r4]
 8010460:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010464:	2000      	movs	r0, #0
 8010466:	e01b      	b.n	80104a0 <__ieee754_rem_pio2+0x60>
 8010468:	4b92      	ldr	r3, [pc, #584]	; (80106b4 <__ieee754_rem_pio2+0x274>)
 801046a:	429e      	cmp	r6, r3
 801046c:	dc3b      	bgt.n	80104e6 <__ieee754_rem_pio2+0xa6>
 801046e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8010472:	2d00      	cmp	r5, #0
 8010474:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8010670 <__ieee754_rem_pio2+0x230>
 8010478:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801047c:	dd19      	ble.n	80104b2 <__ieee754_rem_pio2+0x72>
 801047e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8010482:	429e      	cmp	r6, r3
 8010484:	d00e      	beq.n	80104a4 <__ieee754_rem_pio2+0x64>
 8010486:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8010678 <__ieee754_rem_pio2+0x238>
 801048a:	ee37 5b46 	vsub.f64	d5, d7, d6
 801048e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8010492:	ed84 5b00 	vstr	d5, [r4]
 8010496:	ee37 7b46 	vsub.f64	d7, d7, d6
 801049a:	ed84 7b02 	vstr	d7, [r4, #8]
 801049e:	2001      	movs	r0, #1
 80104a0:	b008      	add	sp, #32
 80104a2:	bd70      	pop	{r4, r5, r6, pc}
 80104a4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8010680 <__ieee754_rem_pio2+0x240>
 80104a8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80104ac:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8010688 <__ieee754_rem_pio2+0x248>
 80104b0:	e7eb      	b.n	801048a <__ieee754_rem_pio2+0x4a>
 80104b2:	429e      	cmp	r6, r3
 80104b4:	ee30 7b06 	vadd.f64	d7, d0, d6
 80104b8:	d00e      	beq.n	80104d8 <__ieee754_rem_pio2+0x98>
 80104ba:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8010678 <__ieee754_rem_pio2+0x238>
 80104be:	ee37 5b06 	vadd.f64	d5, d7, d6
 80104c2:	ee37 7b45 	vsub.f64	d7, d7, d5
 80104c6:	ed84 5b00 	vstr	d5, [r4]
 80104ca:	ee37 7b06 	vadd.f64	d7, d7, d6
 80104ce:	f04f 30ff 	mov.w	r0, #4294967295
 80104d2:	ed84 7b02 	vstr	d7, [r4, #8]
 80104d6:	e7e3      	b.n	80104a0 <__ieee754_rem_pio2+0x60>
 80104d8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8010680 <__ieee754_rem_pio2+0x240>
 80104dc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80104e0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8010688 <__ieee754_rem_pio2+0x248>
 80104e4:	e7eb      	b.n	80104be <__ieee754_rem_pio2+0x7e>
 80104e6:	4b74      	ldr	r3, [pc, #464]	; (80106b8 <__ieee754_rem_pio2+0x278>)
 80104e8:	429e      	cmp	r6, r3
 80104ea:	dc70      	bgt.n	80105ce <__ieee754_rem_pio2+0x18e>
 80104ec:	f000 f8ec 	bl	80106c8 <fabs>
 80104f0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80104f4:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8010690 <__ieee754_rem_pio2+0x250>
 80104f8:	eea0 7b06 	vfma.f64	d7, d0, d6
 80104fc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8010500:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8010504:	ee17 0a90 	vmov	r0, s15
 8010508:	eeb1 4b45 	vneg.f64	d4, d5
 801050c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8010670 <__ieee754_rem_pio2+0x230>
 8010510:	eea5 0b47 	vfms.f64	d0, d5, d7
 8010514:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8010678 <__ieee754_rem_pio2+0x238>
 8010518:	281f      	cmp	r0, #31
 801051a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801051e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8010522:	dc08      	bgt.n	8010536 <__ieee754_rem_pio2+0xf6>
 8010524:	4b65      	ldr	r3, [pc, #404]	; (80106bc <__ieee754_rem_pio2+0x27c>)
 8010526:	1e42      	subs	r2, r0, #1
 8010528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801052c:	42b3      	cmp	r3, r6
 801052e:	d002      	beq.n	8010536 <__ieee754_rem_pio2+0xf6>
 8010530:	ed84 6b00 	vstr	d6, [r4]
 8010534:	e024      	b.n	8010580 <__ieee754_rem_pio2+0x140>
 8010536:	ee16 3a90 	vmov	r3, s13
 801053a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801053e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8010542:	2b10      	cmp	r3, #16
 8010544:	ea4f 5226 	mov.w	r2, r6, asr #20
 8010548:	ddf2      	ble.n	8010530 <__ieee754_rem_pio2+0xf0>
 801054a:	eeb0 6b40 	vmov.f64	d6, d0
 801054e:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 8010680 <__ieee754_rem_pio2+0x240>
 8010552:	eea4 6b03 	vfma.f64	d6, d4, d3
 8010556:	ee30 7b46 	vsub.f64	d7, d0, d6
 801055a:	eea4 7b03 	vfma.f64	d7, d4, d3
 801055e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8010688 <__ieee754_rem_pio2+0x248>
 8010562:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8010566:	ee36 3b47 	vsub.f64	d3, d6, d7
 801056a:	ee13 3a90 	vmov	r3, s7
 801056e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8010572:	1ad3      	subs	r3, r2, r3
 8010574:	2b31      	cmp	r3, #49	; 0x31
 8010576:	dc17      	bgt.n	80105a8 <__ieee754_rem_pio2+0x168>
 8010578:	eeb0 0b46 	vmov.f64	d0, d6
 801057c:	ed84 3b00 	vstr	d3, [r4]
 8010580:	ed94 6b00 	vldr	d6, [r4]
 8010584:	2d00      	cmp	r5, #0
 8010586:	ee30 0b46 	vsub.f64	d0, d0, d6
 801058a:	ee30 0b47 	vsub.f64	d0, d0, d7
 801058e:	ed84 0b02 	vstr	d0, [r4, #8]
 8010592:	da85      	bge.n	80104a0 <__ieee754_rem_pio2+0x60>
 8010594:	eeb1 6b46 	vneg.f64	d6, d6
 8010598:	eeb1 0b40 	vneg.f64	d0, d0
 801059c:	ed84 6b00 	vstr	d6, [r4]
 80105a0:	ed84 0b02 	vstr	d0, [r4, #8]
 80105a4:	4240      	negs	r0, r0
 80105a6:	e77b      	b.n	80104a0 <__ieee754_rem_pio2+0x60>
 80105a8:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8010698 <__ieee754_rem_pio2+0x258>
 80105ac:	eeb0 0b46 	vmov.f64	d0, d6
 80105b0:	eea4 0b07 	vfma.f64	d0, d4, d7
 80105b4:	ee36 6b40 	vsub.f64	d6, d6, d0
 80105b8:	eea4 6b07 	vfma.f64	d6, d4, d7
 80105bc:	ed9f 4b38 	vldr	d4, [pc, #224]	; 80106a0 <__ieee754_rem_pio2+0x260>
 80105c0:	eeb0 7b46 	vmov.f64	d7, d6
 80105c4:	ee95 7b04 	vfnms.f64	d7, d5, d4
 80105c8:	ee30 6b47 	vsub.f64	d6, d0, d7
 80105cc:	e7b0      	b.n	8010530 <__ieee754_rem_pio2+0xf0>
 80105ce:	4b3c      	ldr	r3, [pc, #240]	; (80106c0 <__ieee754_rem_pio2+0x280>)
 80105d0:	429e      	cmp	r6, r3
 80105d2:	dd06      	ble.n	80105e2 <__ieee754_rem_pio2+0x1a2>
 80105d4:	ee30 7b40 	vsub.f64	d7, d0, d0
 80105d8:	ed80 7b02 	vstr	d7, [r0, #8]
 80105dc:	ed80 7b00 	vstr	d7, [r0]
 80105e0:	e740      	b.n	8010464 <__ieee754_rem_pio2+0x24>
 80105e2:	1532      	asrs	r2, r6, #20
 80105e4:	ee10 0a10 	vmov	r0, s0
 80105e8:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 80105ec:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80105f0:	ec41 0b17 	vmov	d7, r0, r1
 80105f4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80105f8:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 80106a8 <__ieee754_rem_pio2+0x268>
 80105fc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8010600:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010604:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010608:	ee27 7b05 	vmul.f64	d7, d7, d5
 801060c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8010610:	a808      	add	r0, sp, #32
 8010612:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8010616:	ee37 7b46 	vsub.f64	d7, d7, d6
 801061a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801061e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010622:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010626:	2103      	movs	r1, #3
 8010628:	ed30 7b02 	vldmdb	r0!, {d7}
 801062c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010634:	460b      	mov	r3, r1
 8010636:	f101 31ff 	add.w	r1, r1, #4294967295
 801063a:	d0f5      	beq.n	8010628 <__ieee754_rem_pio2+0x1e8>
 801063c:	4921      	ldr	r1, [pc, #132]	; (80106c4 <__ieee754_rem_pio2+0x284>)
 801063e:	9101      	str	r1, [sp, #4]
 8010640:	2102      	movs	r1, #2
 8010642:	9100      	str	r1, [sp, #0]
 8010644:	a802      	add	r0, sp, #8
 8010646:	4621      	mov	r1, r4
 8010648:	f000 f84a 	bl	80106e0 <__kernel_rem_pio2>
 801064c:	2d00      	cmp	r5, #0
 801064e:	f6bf af27 	bge.w	80104a0 <__ieee754_rem_pio2+0x60>
 8010652:	ed94 7b00 	vldr	d7, [r4]
 8010656:	eeb1 7b47 	vneg.f64	d7, d7
 801065a:	ed84 7b00 	vstr	d7, [r4]
 801065e:	ed94 7b02 	vldr	d7, [r4, #8]
 8010662:	eeb1 7b47 	vneg.f64	d7, d7
 8010666:	ed84 7b02 	vstr	d7, [r4, #8]
 801066a:	e79b      	b.n	80105a4 <__ieee754_rem_pio2+0x164>
 801066c:	f3af 8000 	nop.w
 8010670:	54400000 	.word	0x54400000
 8010674:	3ff921fb 	.word	0x3ff921fb
 8010678:	1a626331 	.word	0x1a626331
 801067c:	3dd0b461 	.word	0x3dd0b461
 8010680:	1a600000 	.word	0x1a600000
 8010684:	3dd0b461 	.word	0x3dd0b461
 8010688:	2e037073 	.word	0x2e037073
 801068c:	3ba3198a 	.word	0x3ba3198a
 8010690:	6dc9c883 	.word	0x6dc9c883
 8010694:	3fe45f30 	.word	0x3fe45f30
 8010698:	2e000000 	.word	0x2e000000
 801069c:	3ba3198a 	.word	0x3ba3198a
 80106a0:	252049c1 	.word	0x252049c1
 80106a4:	397b839a 	.word	0x397b839a
 80106a8:	00000000 	.word	0x00000000
 80106ac:	41700000 	.word	0x41700000
 80106b0:	3fe921fb 	.word	0x3fe921fb
 80106b4:	4002d97b 	.word	0x4002d97b
 80106b8:	413921fb 	.word	0x413921fb
 80106bc:	08011270 	.word	0x08011270
 80106c0:	7fefffff 	.word	0x7fefffff
 80106c4:	080112f0 	.word	0x080112f0

080106c8 <fabs>:
 80106c8:	ec51 0b10 	vmov	r0, r1, d0
 80106cc:	ee10 2a10 	vmov	r2, s0
 80106d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80106d4:	ec43 2b10 	vmov	d0, r2, r3
 80106d8:	4770      	bx	lr
 80106da:	0000      	movs	r0, r0
 80106dc:	0000      	movs	r0, r0
	...

080106e0 <__kernel_rem_pio2>:
 80106e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106e4:	ed2d 8b06 	vpush	{d8-d10}
 80106e8:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 80106ec:	460f      	mov	r7, r1
 80106ee:	9002      	str	r0, [sp, #8]
 80106f0:	49c3      	ldr	r1, [pc, #780]	; (8010a00 <__kernel_rem_pio2+0x320>)
 80106f2:	98a2      	ldr	r0, [sp, #648]	; 0x288
 80106f4:	9301      	str	r3, [sp, #4]
 80106f6:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 80106fa:	9901      	ldr	r1, [sp, #4]
 80106fc:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80106fe:	f112 0f14 	cmn.w	r2, #20
 8010702:	bfa8      	it	ge
 8010704:	1ed0      	subge	r0, r2, #3
 8010706:	f101 3aff 	add.w	sl, r1, #4294967295
 801070a:	bfaa      	itet	ge
 801070c:	2418      	movge	r4, #24
 801070e:	2000      	movlt	r0, #0
 8010710:	fb90 f0f4 	sdivge	r0, r0, r4
 8010714:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 80109e8 <__kernel_rem_pio2+0x308>
 8010718:	f06f 0417 	mvn.w	r4, #23
 801071c:	fb00 4404 	mla	r4, r0, r4, r4
 8010720:	eba0 060a 	sub.w	r6, r0, sl
 8010724:	4414      	add	r4, r2
 8010726:	eb09 0c0a 	add.w	ip, r9, sl
 801072a:	ad1a      	add	r5, sp, #104	; 0x68
 801072c:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 8010730:	2200      	movs	r2, #0
 8010732:	4562      	cmp	r2, ip
 8010734:	dd10      	ble.n	8010758 <__kernel_rem_pio2+0x78>
 8010736:	9a01      	ldr	r2, [sp, #4]
 8010738:	a91a      	add	r1, sp, #104	; 0x68
 801073a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801073e:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 8010742:	f04f 0c00 	mov.w	ip, #0
 8010746:	45cc      	cmp	ip, r9
 8010748:	dc26      	bgt.n	8010798 <__kernel_rem_pio2+0xb8>
 801074a:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 80109e8 <__kernel_rem_pio2+0x308>
 801074e:	f8dd e008 	ldr.w	lr, [sp, #8]
 8010752:	4616      	mov	r6, r2
 8010754:	2500      	movs	r5, #0
 8010756:	e015      	b.n	8010784 <__kernel_rem_pio2+0xa4>
 8010758:	42d6      	cmn	r6, r2
 801075a:	d409      	bmi.n	8010770 <__kernel_rem_pio2+0x90>
 801075c:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 8010760:	ee07 1a90 	vmov	s15, r1
 8010764:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010768:	eca5 7b02 	vstmia	r5!, {d7}
 801076c:	3201      	adds	r2, #1
 801076e:	e7e0      	b.n	8010732 <__kernel_rem_pio2+0x52>
 8010770:	eeb0 7b46 	vmov.f64	d7, d6
 8010774:	e7f8      	b.n	8010768 <__kernel_rem_pio2+0x88>
 8010776:	ecbe 5b02 	vldmia	lr!, {d5}
 801077a:	ed96 6b00 	vldr	d6, [r6]
 801077e:	3501      	adds	r5, #1
 8010780:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010784:	4555      	cmp	r5, sl
 8010786:	f1a6 0608 	sub.w	r6, r6, #8
 801078a:	ddf4      	ble.n	8010776 <__kernel_rem_pio2+0x96>
 801078c:	eca8 7b02 	vstmia	r8!, {d7}
 8010790:	f10c 0c01 	add.w	ip, ip, #1
 8010794:	3208      	adds	r2, #8
 8010796:	e7d6      	b.n	8010746 <__kernel_rem_pio2+0x66>
 8010798:	aa06      	add	r2, sp, #24
 801079a:	ed9f 9b95 	vldr	d9, [pc, #596]	; 80109f0 <__kernel_rem_pio2+0x310>
 801079e:	ed9f ab96 	vldr	d10, [pc, #600]	; 80109f8 <__kernel_rem_pio2+0x318>
 80107a2:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80107a6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80107aa:	9204      	str	r2, [sp, #16]
 80107ac:	9303      	str	r3, [sp, #12]
 80107ae:	464d      	mov	r5, r9
 80107b0:	00eb      	lsls	r3, r5, #3
 80107b2:	9305      	str	r3, [sp, #20]
 80107b4:	ab92      	add	r3, sp, #584	; 0x248
 80107b6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 80107ba:	f10d 0b18 	add.w	fp, sp, #24
 80107be:	ab6a      	add	r3, sp, #424	; 0x1a8
 80107c0:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 80107c4:	465e      	mov	r6, fp
 80107c6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 80107ca:	4628      	mov	r0, r5
 80107cc:	2800      	cmp	r0, #0
 80107ce:	f1a2 0208 	sub.w	r2, r2, #8
 80107d2:	dc48      	bgt.n	8010866 <__kernel_rem_pio2+0x186>
 80107d4:	4620      	mov	r0, r4
 80107d6:	f000 fa17 	bl	8010c08 <scalbn>
 80107da:	eeb0 8b40 	vmov.f64	d8, d0
 80107de:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 80107e2:	ee28 0b00 	vmul.f64	d0, d8, d0
 80107e6:	f000 fa8f 	bl	8010d08 <floor>
 80107ea:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 80107ee:	eea0 8b47 	vfms.f64	d8, d0, d7
 80107f2:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80107f6:	2c00      	cmp	r4, #0
 80107f8:	ee17 8a90 	vmov	r8, s15
 80107fc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010800:	ee38 8b47 	vsub.f64	d8, d8, d7
 8010804:	dd41      	ble.n	801088a <__kernel_rem_pio2+0x1aa>
 8010806:	1e68      	subs	r0, r5, #1
 8010808:	ab06      	add	r3, sp, #24
 801080a:	f1c4 0c18 	rsb	ip, r4, #24
 801080e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8010812:	fa46 f20c 	asr.w	r2, r6, ip
 8010816:	4490      	add	r8, r2
 8010818:	fa02 f20c 	lsl.w	r2, r2, ip
 801081c:	1ab6      	subs	r6, r6, r2
 801081e:	f1c4 0217 	rsb	r2, r4, #23
 8010822:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8010826:	4116      	asrs	r6, r2
 8010828:	2e00      	cmp	r6, #0
 801082a:	dd3d      	ble.n	80108a8 <__kernel_rem_pio2+0x1c8>
 801082c:	f04f 0c00 	mov.w	ip, #0
 8010830:	f108 0801 	add.w	r8, r8, #1
 8010834:	4660      	mov	r0, ip
 8010836:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 801083a:	4565      	cmp	r5, ip
 801083c:	dc6a      	bgt.n	8010914 <__kernel_rem_pio2+0x234>
 801083e:	2c00      	cmp	r4, #0
 8010840:	dd04      	ble.n	801084c <__kernel_rem_pio2+0x16c>
 8010842:	2c01      	cmp	r4, #1
 8010844:	d07b      	beq.n	801093e <__kernel_rem_pio2+0x25e>
 8010846:	2c02      	cmp	r4, #2
 8010848:	f000 8083 	beq.w	8010952 <__kernel_rem_pio2+0x272>
 801084c:	2e02      	cmp	r6, #2
 801084e:	d12b      	bne.n	80108a8 <__kernel_rem_pio2+0x1c8>
 8010850:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010854:	ee30 8b48 	vsub.f64	d8, d0, d8
 8010858:	b330      	cbz	r0, 80108a8 <__kernel_rem_pio2+0x1c8>
 801085a:	4620      	mov	r0, r4
 801085c:	f000 f9d4 	bl	8010c08 <scalbn>
 8010860:	ee38 8b40 	vsub.f64	d8, d8, d0
 8010864:	e020      	b.n	80108a8 <__kernel_rem_pio2+0x1c8>
 8010866:	ee20 7b09 	vmul.f64	d7, d0, d9
 801086a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801086e:	3801      	subs	r0, #1
 8010870:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8010874:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8010878:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801087c:	eca6 0a01 	vstmia	r6!, {s0}
 8010880:	ed92 0b00 	vldr	d0, [r2]
 8010884:	ee37 0b00 	vadd.f64	d0, d7, d0
 8010888:	e7a0      	b.n	80107cc <__kernel_rem_pio2+0xec>
 801088a:	d105      	bne.n	8010898 <__kernel_rem_pio2+0x1b8>
 801088c:	1e6a      	subs	r2, r5, #1
 801088e:	ab06      	add	r3, sp, #24
 8010890:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8010894:	15f6      	asrs	r6, r6, #23
 8010896:	e7c7      	b.n	8010828 <__kernel_rem_pio2+0x148>
 8010898:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801089c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80108a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108a4:	da34      	bge.n	8010910 <__kernel_rem_pio2+0x230>
 80108a6:	2600      	movs	r6, #0
 80108a8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80108ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108b0:	f040 80aa 	bne.w	8010a08 <__kernel_rem_pio2+0x328>
 80108b4:	f105 3bff 	add.w	fp, r5, #4294967295
 80108b8:	4658      	mov	r0, fp
 80108ba:	2200      	movs	r2, #0
 80108bc:	4548      	cmp	r0, r9
 80108be:	da50      	bge.n	8010962 <__kernel_rem_pio2+0x282>
 80108c0:	2a00      	cmp	r2, #0
 80108c2:	d06b      	beq.n	801099c <__kernel_rem_pio2+0x2bc>
 80108c4:	ab06      	add	r3, sp, #24
 80108c6:	3c18      	subs	r4, #24
 80108c8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	f000 8087 	beq.w	80109e0 <__kernel_rem_pio2+0x300>
 80108d2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80108d6:	4620      	mov	r0, r4
 80108d8:	f000 f996 	bl	8010c08 <scalbn>
 80108dc:	ed9f 6b44 	vldr	d6, [pc, #272]	; 80109f0 <__kernel_rem_pio2+0x310>
 80108e0:	f10b 0201 	add.w	r2, fp, #1
 80108e4:	a96a      	add	r1, sp, #424	; 0x1a8
 80108e6:	00d3      	lsls	r3, r2, #3
 80108e8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80108ec:	465a      	mov	r2, fp
 80108ee:	2a00      	cmp	r2, #0
 80108f0:	f280 80b8 	bge.w	8010a64 <__kernel_rem_pio2+0x384>
 80108f4:	465a      	mov	r2, fp
 80108f6:	2a00      	cmp	r2, #0
 80108f8:	f2c0 80d6 	blt.w	8010aa8 <__kernel_rem_pio2+0x3c8>
 80108fc:	a96a      	add	r1, sp, #424	; 0x1a8
 80108fe:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8010902:	ed9f 7b39 	vldr	d7, [pc, #228]	; 80109e8 <__kernel_rem_pio2+0x308>
 8010906:	4d3f      	ldr	r5, [pc, #252]	; (8010a04 <__kernel_rem_pio2+0x324>)
 8010908:	2000      	movs	r0, #0
 801090a:	ebab 0102 	sub.w	r1, fp, r2
 801090e:	e0c0      	b.n	8010a92 <__kernel_rem_pio2+0x3b2>
 8010910:	2602      	movs	r6, #2
 8010912:	e78b      	b.n	801082c <__kernel_rem_pio2+0x14c>
 8010914:	f8db 2000 	ldr.w	r2, [fp]
 8010918:	b958      	cbnz	r0, 8010932 <__kernel_rem_pio2+0x252>
 801091a:	b122      	cbz	r2, 8010926 <__kernel_rem_pio2+0x246>
 801091c:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8010920:	f8cb 2000 	str.w	r2, [fp]
 8010924:	2201      	movs	r2, #1
 8010926:	f10c 0c01 	add.w	ip, ip, #1
 801092a:	f10b 0b04 	add.w	fp, fp, #4
 801092e:	4610      	mov	r0, r2
 8010930:	e783      	b.n	801083a <__kernel_rem_pio2+0x15a>
 8010932:	ebae 0202 	sub.w	r2, lr, r2
 8010936:	f8cb 2000 	str.w	r2, [fp]
 801093a:	4602      	mov	r2, r0
 801093c:	e7f3      	b.n	8010926 <__kernel_rem_pio2+0x246>
 801093e:	f105 3cff 	add.w	ip, r5, #4294967295
 8010942:	ab06      	add	r3, sp, #24
 8010944:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8010948:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801094c:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8010950:	e77c      	b.n	801084c <__kernel_rem_pio2+0x16c>
 8010952:	f105 3cff 	add.w	ip, r5, #4294967295
 8010956:	ab06      	add	r3, sp, #24
 8010958:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801095c:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8010960:	e7f4      	b.n	801094c <__kernel_rem_pio2+0x26c>
 8010962:	ab06      	add	r3, sp, #24
 8010964:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8010968:	3801      	subs	r0, #1
 801096a:	431a      	orrs	r2, r3
 801096c:	e7a6      	b.n	80108bc <__kernel_rem_pio2+0x1dc>
 801096e:	3201      	adds	r2, #1
 8010970:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8010974:	2e00      	cmp	r6, #0
 8010976:	d0fa      	beq.n	801096e <__kernel_rem_pio2+0x28e>
 8010978:	9b05      	ldr	r3, [sp, #20]
 801097a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 801097e:	eb0d 0003 	add.w	r0, sp, r3
 8010982:	9b01      	ldr	r3, [sp, #4]
 8010984:	18ee      	adds	r6, r5, r3
 8010986:	ab1a      	add	r3, sp, #104	; 0x68
 8010988:	f105 0c01 	add.w	ip, r5, #1
 801098c:	3898      	subs	r0, #152	; 0x98
 801098e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8010992:	442a      	add	r2, r5
 8010994:	4562      	cmp	r2, ip
 8010996:	da04      	bge.n	80109a2 <__kernel_rem_pio2+0x2c2>
 8010998:	4615      	mov	r5, r2
 801099a:	e709      	b.n	80107b0 <__kernel_rem_pio2+0xd0>
 801099c:	9804      	ldr	r0, [sp, #16]
 801099e:	2201      	movs	r2, #1
 80109a0:	e7e6      	b.n	8010970 <__kernel_rem_pio2+0x290>
 80109a2:	9b03      	ldr	r3, [sp, #12]
 80109a4:	f8dd e008 	ldr.w	lr, [sp, #8]
 80109a8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80109ac:	9305      	str	r3, [sp, #20]
 80109ae:	ee07 3a90 	vmov	s15, r3
 80109b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80109b6:	2500      	movs	r5, #0
 80109b8:	eca6 7b02 	vstmia	r6!, {d7}
 80109bc:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 80109e8 <__kernel_rem_pio2+0x308>
 80109c0:	46b0      	mov	r8, r6
 80109c2:	4555      	cmp	r5, sl
 80109c4:	dd04      	ble.n	80109d0 <__kernel_rem_pio2+0x2f0>
 80109c6:	eca0 7b02 	vstmia	r0!, {d7}
 80109ca:	f10c 0c01 	add.w	ip, ip, #1
 80109ce:	e7e1      	b.n	8010994 <__kernel_rem_pio2+0x2b4>
 80109d0:	ecbe 5b02 	vldmia	lr!, {d5}
 80109d4:	ed38 6b02 	vldmdb	r8!, {d6}
 80109d8:	3501      	adds	r5, #1
 80109da:	eea5 7b06 	vfma.f64	d7, d5, d6
 80109de:	e7f0      	b.n	80109c2 <__kernel_rem_pio2+0x2e2>
 80109e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80109e4:	e76e      	b.n	80108c4 <__kernel_rem_pio2+0x1e4>
 80109e6:	bf00      	nop
	...
 80109f4:	3e700000 	.word	0x3e700000
 80109f8:	00000000 	.word	0x00000000
 80109fc:	41700000 	.word	0x41700000
 8010a00:	08011438 	.word	0x08011438
 8010a04:	080113f8 	.word	0x080113f8
 8010a08:	4260      	negs	r0, r4
 8010a0a:	eeb0 0b48 	vmov.f64	d0, d8
 8010a0e:	f000 f8fb 	bl	8010c08 <scalbn>
 8010a12:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8010bf0 <__kernel_rem_pio2+0x510>
 8010a16:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8010a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a1e:	db18      	blt.n	8010a52 <__kernel_rem_pio2+0x372>
 8010a20:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8010bf8 <__kernel_rem_pio2+0x518>
 8010a24:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010a28:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8010a2c:	aa06      	add	r2, sp, #24
 8010a2e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8010a32:	eea5 0b46 	vfms.f64	d0, d5, d6
 8010a36:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010a3a:	f105 0b01 	add.w	fp, r5, #1
 8010a3e:	ee10 3a10 	vmov	r3, s0
 8010a42:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8010a46:	ee17 3a10 	vmov	r3, s14
 8010a4a:	3418      	adds	r4, #24
 8010a4c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8010a50:	e73f      	b.n	80108d2 <__kernel_rem_pio2+0x1f2>
 8010a52:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010a56:	aa06      	add	r2, sp, #24
 8010a58:	ee10 3a10 	vmov	r3, s0
 8010a5c:	46ab      	mov	fp, r5
 8010a5e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8010a62:	e736      	b.n	80108d2 <__kernel_rem_pio2+0x1f2>
 8010a64:	a806      	add	r0, sp, #24
 8010a66:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8010a6a:	9001      	str	r0, [sp, #4]
 8010a6c:	ee07 0a90 	vmov	s15, r0
 8010a70:	3a01      	subs	r2, #1
 8010a72:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010a76:	ee27 7b00 	vmul.f64	d7, d7, d0
 8010a7a:	ee20 0b06 	vmul.f64	d0, d0, d6
 8010a7e:	ed21 7b02 	vstmdb	r1!, {d7}
 8010a82:	e734      	b.n	80108ee <__kernel_rem_pio2+0x20e>
 8010a84:	ecb5 5b02 	vldmia	r5!, {d5}
 8010a88:	ecb4 6b02 	vldmia	r4!, {d6}
 8010a8c:	3001      	adds	r0, #1
 8010a8e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010a92:	4548      	cmp	r0, r9
 8010a94:	dc01      	bgt.n	8010a9a <__kernel_rem_pio2+0x3ba>
 8010a96:	4288      	cmp	r0, r1
 8010a98:	ddf4      	ble.n	8010a84 <__kernel_rem_pio2+0x3a4>
 8010a9a:	a842      	add	r0, sp, #264	; 0x108
 8010a9c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8010aa0:	ed81 7b00 	vstr	d7, [r1]
 8010aa4:	3a01      	subs	r2, #1
 8010aa6:	e726      	b.n	80108f6 <__kernel_rem_pio2+0x216>
 8010aa8:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8010aaa:	2a02      	cmp	r2, #2
 8010aac:	dc0a      	bgt.n	8010ac4 <__kernel_rem_pio2+0x3e4>
 8010aae:	2a00      	cmp	r2, #0
 8010ab0:	dc2e      	bgt.n	8010b10 <__kernel_rem_pio2+0x430>
 8010ab2:	d047      	beq.n	8010b44 <__kernel_rem_pio2+0x464>
 8010ab4:	f008 0007 	and.w	r0, r8, #7
 8010ab8:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8010abc:	ecbd 8b06 	vpop	{d8-d10}
 8010ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ac4:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8010ac6:	2a03      	cmp	r2, #3
 8010ac8:	d1f4      	bne.n	8010ab4 <__kernel_rem_pio2+0x3d4>
 8010aca:	a942      	add	r1, sp, #264	; 0x108
 8010acc:	f1a3 0208 	sub.w	r2, r3, #8
 8010ad0:	440a      	add	r2, r1
 8010ad2:	4611      	mov	r1, r2
 8010ad4:	4658      	mov	r0, fp
 8010ad6:	2800      	cmp	r0, #0
 8010ad8:	f1a1 0108 	sub.w	r1, r1, #8
 8010adc:	dc55      	bgt.n	8010b8a <__kernel_rem_pio2+0x4aa>
 8010ade:	4659      	mov	r1, fp
 8010ae0:	2901      	cmp	r1, #1
 8010ae2:	f1a2 0208 	sub.w	r2, r2, #8
 8010ae6:	dc60      	bgt.n	8010baa <__kernel_rem_pio2+0x4ca>
 8010ae8:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8010c00 <__kernel_rem_pio2+0x520>
 8010aec:	aa42      	add	r2, sp, #264	; 0x108
 8010aee:	4413      	add	r3, r2
 8010af0:	f1bb 0f01 	cmp.w	fp, #1
 8010af4:	dc69      	bgt.n	8010bca <__kernel_rem_pio2+0x4ea>
 8010af6:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8010afa:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8010afe:	2e00      	cmp	r6, #0
 8010b00:	d16a      	bne.n	8010bd8 <__kernel_rem_pio2+0x4f8>
 8010b02:	ed87 5b00 	vstr	d5, [r7]
 8010b06:	ed87 6b02 	vstr	d6, [r7, #8]
 8010b0a:	ed87 7b04 	vstr	d7, [r7, #16]
 8010b0e:	e7d1      	b.n	8010ab4 <__kernel_rem_pio2+0x3d4>
 8010b10:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8010c00 <__kernel_rem_pio2+0x520>
 8010b14:	aa42      	add	r2, sp, #264	; 0x108
 8010b16:	4413      	add	r3, r2
 8010b18:	465a      	mov	r2, fp
 8010b1a:	2a00      	cmp	r2, #0
 8010b1c:	da26      	bge.n	8010b6c <__kernel_rem_pio2+0x48c>
 8010b1e:	b35e      	cbz	r6, 8010b78 <__kernel_rem_pio2+0x498>
 8010b20:	eeb1 7b46 	vneg.f64	d7, d6
 8010b24:	ed87 7b00 	vstr	d7, [r7]
 8010b28:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8010b2c:	aa44      	add	r2, sp, #272	; 0x110
 8010b2e:	2301      	movs	r3, #1
 8010b30:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010b34:	459b      	cmp	fp, r3
 8010b36:	da22      	bge.n	8010b7e <__kernel_rem_pio2+0x49e>
 8010b38:	b10e      	cbz	r6, 8010b3e <__kernel_rem_pio2+0x45e>
 8010b3a:	eeb1 7b47 	vneg.f64	d7, d7
 8010b3e:	ed87 7b02 	vstr	d7, [r7, #8]
 8010b42:	e7b7      	b.n	8010ab4 <__kernel_rem_pio2+0x3d4>
 8010b44:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8010c00 <__kernel_rem_pio2+0x520>
 8010b48:	aa42      	add	r2, sp, #264	; 0x108
 8010b4a:	4413      	add	r3, r2
 8010b4c:	f1bb 0f00 	cmp.w	fp, #0
 8010b50:	da05      	bge.n	8010b5e <__kernel_rem_pio2+0x47e>
 8010b52:	b10e      	cbz	r6, 8010b58 <__kernel_rem_pio2+0x478>
 8010b54:	eeb1 7b47 	vneg.f64	d7, d7
 8010b58:	ed87 7b00 	vstr	d7, [r7]
 8010b5c:	e7aa      	b.n	8010ab4 <__kernel_rem_pio2+0x3d4>
 8010b5e:	ed33 6b02 	vldmdb	r3!, {d6}
 8010b62:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010b66:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010b6a:	e7ef      	b.n	8010b4c <__kernel_rem_pio2+0x46c>
 8010b6c:	ed33 7b02 	vldmdb	r3!, {d7}
 8010b70:	3a01      	subs	r2, #1
 8010b72:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010b76:	e7d0      	b.n	8010b1a <__kernel_rem_pio2+0x43a>
 8010b78:	eeb0 7b46 	vmov.f64	d7, d6
 8010b7c:	e7d2      	b.n	8010b24 <__kernel_rem_pio2+0x444>
 8010b7e:	ecb2 6b02 	vldmia	r2!, {d6}
 8010b82:	3301      	adds	r3, #1
 8010b84:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010b88:	e7d4      	b.n	8010b34 <__kernel_rem_pio2+0x454>
 8010b8a:	ed91 7b00 	vldr	d7, [r1]
 8010b8e:	ed91 5b02 	vldr	d5, [r1, #8]
 8010b92:	3801      	subs	r0, #1
 8010b94:	ee37 6b05 	vadd.f64	d6, d7, d5
 8010b98:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010b9c:	ed81 6b00 	vstr	d6, [r1]
 8010ba0:	ee37 7b05 	vadd.f64	d7, d7, d5
 8010ba4:	ed81 7b02 	vstr	d7, [r1, #8]
 8010ba8:	e795      	b.n	8010ad6 <__kernel_rem_pio2+0x3f6>
 8010baa:	ed92 7b00 	vldr	d7, [r2]
 8010bae:	ed92 5b02 	vldr	d5, [r2, #8]
 8010bb2:	3901      	subs	r1, #1
 8010bb4:	ee37 6b05 	vadd.f64	d6, d7, d5
 8010bb8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010bbc:	ed82 6b00 	vstr	d6, [r2]
 8010bc0:	ee37 7b05 	vadd.f64	d7, d7, d5
 8010bc4:	ed82 7b02 	vstr	d7, [r2, #8]
 8010bc8:	e78a      	b.n	8010ae0 <__kernel_rem_pio2+0x400>
 8010bca:	ed33 6b02 	vldmdb	r3!, {d6}
 8010bce:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010bd2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010bd6:	e78b      	b.n	8010af0 <__kernel_rem_pio2+0x410>
 8010bd8:	eeb1 5b45 	vneg.f64	d5, d5
 8010bdc:	eeb1 6b46 	vneg.f64	d6, d6
 8010be0:	ed87 5b00 	vstr	d5, [r7]
 8010be4:	eeb1 7b47 	vneg.f64	d7, d7
 8010be8:	ed87 6b02 	vstr	d6, [r7, #8]
 8010bec:	e78d      	b.n	8010b0a <__kernel_rem_pio2+0x42a>
 8010bee:	bf00      	nop
 8010bf0:	00000000 	.word	0x00000000
 8010bf4:	41700000 	.word	0x41700000
 8010bf8:	00000000 	.word	0x00000000
 8010bfc:	3e700000 	.word	0x3e700000
	...

08010c08 <scalbn>:
 8010c08:	ee10 1a90 	vmov	r1, s1
 8010c0c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010c10:	b98b      	cbnz	r3, 8010c36 <scalbn+0x2e>
 8010c12:	ee10 3a10 	vmov	r3, s0
 8010c16:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010c1a:	4319      	orrs	r1, r3
 8010c1c:	d00a      	beq.n	8010c34 <scalbn+0x2c>
 8010c1e:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8010cd0 <scalbn+0xc8>
 8010c22:	4b37      	ldr	r3, [pc, #220]	; (8010d00 <scalbn+0xf8>)
 8010c24:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010c28:	4298      	cmp	r0, r3
 8010c2a:	da0b      	bge.n	8010c44 <scalbn+0x3c>
 8010c2c:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8010cd8 <scalbn+0xd0>
 8010c30:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010c34:	4770      	bx	lr
 8010c36:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8010c3a:	4293      	cmp	r3, r2
 8010c3c:	d107      	bne.n	8010c4e <scalbn+0x46>
 8010c3e:	ee30 0b00 	vadd.f64	d0, d0, d0
 8010c42:	4770      	bx	lr
 8010c44:	ee10 1a90 	vmov	r1, s1
 8010c48:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010c4c:	3b36      	subs	r3, #54	; 0x36
 8010c4e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8010c52:	4290      	cmp	r0, r2
 8010c54:	dd0d      	ble.n	8010c72 <scalbn+0x6a>
 8010c56:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8010ce0 <scalbn+0xd8>
 8010c5a:	ee10 3a90 	vmov	r3, s1
 8010c5e:	eeb0 6b47 	vmov.f64	d6, d7
 8010c62:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8010ce8 <scalbn+0xe0>
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	fe27 7b05 	vselge.f64	d7, d7, d5
 8010c6c:	ee27 0b06 	vmul.f64	d0, d7, d6
 8010c70:	4770      	bx	lr
 8010c72:	4418      	add	r0, r3
 8010c74:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8010c78:	4298      	cmp	r0, r3
 8010c7a:	dcec      	bgt.n	8010c56 <scalbn+0x4e>
 8010c7c:	2800      	cmp	r0, #0
 8010c7e:	dd0a      	ble.n	8010c96 <scalbn+0x8e>
 8010c80:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8010c84:	ec53 2b10 	vmov	r2, r3, d0
 8010c88:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8010c8c:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8010c90:	ec43 2b10 	vmov	d0, r2, r3
 8010c94:	4770      	bx	lr
 8010c96:	f110 0f35 	cmn.w	r0, #53	; 0x35
 8010c9a:	da09      	bge.n	8010cb0 <scalbn+0xa8>
 8010c9c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8010cd8 <scalbn+0xd0>
 8010ca0:	ee10 3a90 	vmov	r3, s1
 8010ca4:	eeb0 6b47 	vmov.f64	d6, d7
 8010ca8:	ed9f 5b11 	vldr	d5, [pc, #68]	; 8010cf0 <scalbn+0xe8>
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	e7db      	b.n	8010c68 <scalbn+0x60>
 8010cb0:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8010cb4:	ec53 2b10 	vmov	r2, r3, d0
 8010cb8:	3036      	adds	r0, #54	; 0x36
 8010cba:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8010cbe:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8010cc2:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8010cf8 <scalbn+0xf0>
 8010cc6:	ec43 2b10 	vmov	d0, r2, r3
 8010cca:	e7b1      	b.n	8010c30 <scalbn+0x28>
 8010ccc:	f3af 8000 	nop.w
 8010cd0:	00000000 	.word	0x00000000
 8010cd4:	43500000 	.word	0x43500000
 8010cd8:	c2f8f359 	.word	0xc2f8f359
 8010cdc:	01a56e1f 	.word	0x01a56e1f
 8010ce0:	8800759c 	.word	0x8800759c
 8010ce4:	7e37e43c 	.word	0x7e37e43c
 8010ce8:	8800759c 	.word	0x8800759c
 8010cec:	fe37e43c 	.word	0xfe37e43c
 8010cf0:	c2f8f359 	.word	0xc2f8f359
 8010cf4:	81a56e1f 	.word	0x81a56e1f
 8010cf8:	00000000 	.word	0x00000000
 8010cfc:	3c900000 	.word	0x3c900000
 8010d00:	ffff3cb0 	.word	0xffff3cb0
 8010d04:	00000000 	.word	0x00000000

08010d08 <floor>:
 8010d08:	ee10 1a90 	vmov	r1, s1
 8010d0c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010d10:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8010d14:	2b13      	cmp	r3, #19
 8010d16:	b530      	push	{r4, r5, lr}
 8010d18:	ee10 0a10 	vmov	r0, s0
 8010d1c:	ee10 5a10 	vmov	r5, s0
 8010d20:	dc31      	bgt.n	8010d86 <floor+0x7e>
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	da15      	bge.n	8010d52 <floor+0x4a>
 8010d26:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8010de8 <floor+0xe0>
 8010d2a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010d2e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d36:	dd07      	ble.n	8010d48 <floor+0x40>
 8010d38:	2900      	cmp	r1, #0
 8010d3a:	da4e      	bge.n	8010dda <floor+0xd2>
 8010d3c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010d40:	4308      	orrs	r0, r1
 8010d42:	d04d      	beq.n	8010de0 <floor+0xd8>
 8010d44:	492a      	ldr	r1, [pc, #168]	; (8010df0 <floor+0xe8>)
 8010d46:	2000      	movs	r0, #0
 8010d48:	460b      	mov	r3, r1
 8010d4a:	4602      	mov	r2, r0
 8010d4c:	ec43 2b10 	vmov	d0, r2, r3
 8010d50:	e020      	b.n	8010d94 <floor+0x8c>
 8010d52:	4a28      	ldr	r2, [pc, #160]	; (8010df4 <floor+0xec>)
 8010d54:	411a      	asrs	r2, r3
 8010d56:	ea01 0402 	and.w	r4, r1, r2
 8010d5a:	4304      	orrs	r4, r0
 8010d5c:	d01a      	beq.n	8010d94 <floor+0x8c>
 8010d5e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8010de8 <floor+0xe0>
 8010d62:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010d66:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d6e:	ddeb      	ble.n	8010d48 <floor+0x40>
 8010d70:	2900      	cmp	r1, #0
 8010d72:	bfbe      	ittt	lt
 8010d74:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8010d78:	fa40 f303 	asrlt.w	r3, r0, r3
 8010d7c:	18c9      	addlt	r1, r1, r3
 8010d7e:	ea21 0102 	bic.w	r1, r1, r2
 8010d82:	2000      	movs	r0, #0
 8010d84:	e7e0      	b.n	8010d48 <floor+0x40>
 8010d86:	2b33      	cmp	r3, #51	; 0x33
 8010d88:	dd05      	ble.n	8010d96 <floor+0x8e>
 8010d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010d8e:	d101      	bne.n	8010d94 <floor+0x8c>
 8010d90:	ee30 0b00 	vadd.f64	d0, d0, d0
 8010d94:	bd30      	pop	{r4, r5, pc}
 8010d96:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8010d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8010d9e:	40e2      	lsrs	r2, r4
 8010da0:	4210      	tst	r0, r2
 8010da2:	d0f7      	beq.n	8010d94 <floor+0x8c>
 8010da4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8010de8 <floor+0xe0>
 8010da8:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010dac:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010db4:	ddc8      	ble.n	8010d48 <floor+0x40>
 8010db6:	2900      	cmp	r1, #0
 8010db8:	da02      	bge.n	8010dc0 <floor+0xb8>
 8010dba:	2b14      	cmp	r3, #20
 8010dbc:	d103      	bne.n	8010dc6 <floor+0xbe>
 8010dbe:	3101      	adds	r1, #1
 8010dc0:	ea20 0002 	bic.w	r0, r0, r2
 8010dc4:	e7c0      	b.n	8010d48 <floor+0x40>
 8010dc6:	2401      	movs	r4, #1
 8010dc8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010dcc:	fa04 f303 	lsl.w	r3, r4, r3
 8010dd0:	4418      	add	r0, r3
 8010dd2:	4285      	cmp	r5, r0
 8010dd4:	bf88      	it	hi
 8010dd6:	1909      	addhi	r1, r1, r4
 8010dd8:	e7f2      	b.n	8010dc0 <floor+0xb8>
 8010dda:	2000      	movs	r0, #0
 8010ddc:	4601      	mov	r1, r0
 8010dde:	e7b3      	b.n	8010d48 <floor+0x40>
 8010de0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8010de4:	e7b0      	b.n	8010d48 <floor+0x40>
 8010de6:	bf00      	nop
 8010de8:	8800759c 	.word	0x8800759c
 8010dec:	7e37e43c 	.word	0x7e37e43c
 8010df0:	bff00000 	.word	0xbff00000
 8010df4:	000fffff 	.word	0x000fffff

08010df8 <_init>:
 8010df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dfa:	bf00      	nop
 8010dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010dfe:	bc08      	pop	{r3}
 8010e00:	469e      	mov	lr, r3
 8010e02:	4770      	bx	lr

08010e04 <_fini>:
 8010e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e06:	bf00      	nop
 8010e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e0a:	bc08      	pop	{r3}
 8010e0c:	469e      	mov	lr, r3
 8010e0e:	4770      	bx	lr
